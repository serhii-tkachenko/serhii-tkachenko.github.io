{"version":3,"file":"4576-7110806c.js","mappings":"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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-initialize-options.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/cancellable-promise/cancellable-promise.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/bind-decorator/bind-decorator.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-formatter.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/currency-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-card-network-key.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/currency/create-currency-service.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-braintree-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-braintree-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-error-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-key.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-additional-action-processable.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/create-google-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-braintree-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-commerce-utils/src/paypal-commerce-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-paypal-commerce-payment-method.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/bigcommerce-payments-utils/src/paypal-sdk-helper.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-adyenv3-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-authorizenet-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-authorizenet-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-authorizenet-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-checkoutcom-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-checkoutcom-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-threedsecure-result.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-checkoutcom-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-cybersource-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-cybersource-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-orbital-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-orbital-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-initialization-data.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/google-pay-stripe-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-token-object.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-stripe-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/stripe-upe-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-worldpayaccess-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-worldpayaccess-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-tdonlinemart-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/guards/is-google-pay-td-online-mart-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/button/create-google-pay-tdonlinemart-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-additional-action-error-response.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv2-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/ui/src/loading-indicator/loading-indicator.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/gateways/google-pay-adyenv3-gateway.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-adyenv3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-authorizenet-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-checkoutcom-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-cybersource-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-orbital-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-worldpayaccess-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-braintree-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/google-pay-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/google-pay-bigcommerce-payments-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/payment/create-google-pay-tdonlinemart-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-adyenv3-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-authorizenet-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-checkoutcom-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-cybersource-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-bnz-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-orbital-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-stripe/create-google-pay-stripeupe-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-worldpayaccess-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-braintree-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-paypal-commerce/create-google-pay-paypal-commerce-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/google-pay-bigcommerce-payments/create-google-pay-bigcommerce-payments-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/google-pay-integration/src/factories/customer/create-google-pay-tdonlinemart-customer-strategy.ts","webpack://checkout/./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts","webpack://checkout/./packages/payment-integration-api/src/setPrototypeOf.ts","webpack://checkout/./packages/google-pay-integration/src/GooglePayButton.tsx","webpack://checkout/./packages/payment-integration-api/src/isEmbedded.ts","webpack://checkout/./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/./packages/payment-integration-api/src/errors/CustomError.ts","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","/**\n * A set of options that are required to initialize the GooglePay payment method\n *\n * If the customer chooses to pay with GooglePay, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n *\n * ```html\n * <!-- This is where the GooglePay button will be inserted -->\n * <div id=\"wallet-button\"></div>\n * ```\n *\n * ```js\n * service.initializePayment({\n *     // Using GooglePay provided by Braintree as an example\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button'\n *     },\n * });\n * ```\n *\n * Additional event callbacks can be registered.\n *\n * ```js\n * service.initializePayment({\n *     methodId: 'googlepaybraintree',\n *     googlepaybraintree: {\n *         walletButton: 'wallet-button',\n *         onError(error) {\n *             console.log(error);\n *         },\n *         onPaymentSelect() {\n *             console.log('Selected');\n *         },\n *     },\n * });\n * ```\n */\nexport default interface GooglePayPaymentInitializeOptions {\n    /**\n     * A container for loading spinner.\n     */\n    loadingContainerId?: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the GooglePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when GooglePay fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n\n/**\n * The recognized keys to pass the initialization options for Google Pay.\n */\nexport enum GooglePayKey {\n    ADYEN_V2 = 'googlepayadyenv2',\n    ADYEN_V3 = 'googlepayadyenv3',\n    AUTHORIZE_NET = 'googlepayauthorizenet',\n    BNZ = 'googlepaybnz',\n    BRAINTREE = 'googlepaybraintree',\n    PAYPAL_COMMERCE = 'googlepaypaypalcommerce',\n    BIGCOMMERCE_PAYMENTS = 'googlepay_bigcommerce_payments',\n    CHECKOUT_COM = 'googlepaycheckoutcom',\n    CYBERSOURCE_V2 = 'googlepaycybersourcev2',\n    ORBITAL = 'googlepayorbital',\n    STRIPE = 'googlepaystripe',\n    STRIPE_UPE = 'googlepaystripeupe',\n    STRIPE_OCS = 'googlepaystripeocs',\n    WORLDPAY_ACCESS = 'googlepayworldpayaccess',\n    TD_ONLINE_MART = 'googlepaytdonlinemart',\n}\n\n/**\n * The options that are required to initialize the GooglePay payment method.\n * They can be omitted unless you need to support GooglePay.\n */\nexport type WithGooglePayPaymentInitializeOptions = {\n    [k in GooglePayKey]?: GooglePayPaymentInitializeOptions;\n};\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\n\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype).forEach((key) => {\n        const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n        if (!descriptor || key === 'constructor') {\n            return;\n        }\n\n        Object.defineProperty(\n            decoratedTarget.prototype,\n            key,\n            bindMethodDecorator(target.prototype, key, descriptor),\n        );\n    });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<T>,\n): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { InvalidArgumentError } from '../errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(currencySettings: CurrencyConfig) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const { decimalPlaces, symbolLocation, symbol, thousandsSeparator, decimalSeparator } =\n            currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ? `-${formattedCurrency}` : formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [integerAmount, decimalAmount = ''] = this._toFixed(\n            positiveAmount,\n            this._decimalPlaces,\n        ).split('.');\n        const parsedIntegerAmount = integerAmount.replace(\n            /\\B(?=(\\d{3})+(?!\\d))/g,\n            this._thousandsSeparator,\n        );\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [parsedIntegerAmount, decimalAmount].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return this._symbolLocation.toLowerCase() === 'left'\n            ? `${this._symbol}${formattedNumber}`\n            : `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+`${Math.round(+`${value}e${precision}`)}e${-precision}`).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '@bigcommerce/checkout-sdk/utility';\n\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(private _storeConfig: StoreConfig) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { BigCommercePaymentsIntent } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    BrowserInfo,\n    BuyNowCartRequestBody,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { FundingType } from './google-pay-paypal-commerce/types';\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect',\n}\n\nexport interface PayPalButtonStyleOptions {\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: number;\n    label?: StyleButtonLabel;\n}\n\nexport interface GooglePayGatewayBaseRequest {\n    apiVersion: 2;\n    apiVersionMinor: 0;\n}\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\ntype GooglePayGatewayBaseResponse = GooglePayGatewayBaseRequest;\n\ninterface GooglePayPaymentMethod<T> {\n    type: string;\n    parameters: T;\n}\n\ntype GooglePayAuthMethod = 'PAN_ONLY' | 'CRYPTOGRAM_3DS';\n\nexport enum GooglePayCardNetwork {\n    AMEX = 'AMEX',\n    DISCOVER = 'DISCOVER',\n    INTERAC = 'INTERAC',\n    JCB = 'JCB',\n    MC = 'MASTERCARD',\n    VISA = 'VISA',\n}\n\nexport interface GooglePayCardParameters {\n    allowedAuthMethods: GooglePayAuthMethod[];\n    allowedCardNetworks: GooglePayCardNetwork[];\n    billingAddressRequired?: boolean;\n    billingAddressParameters?: {\n        format?: 'MIN' | 'FULL';\n        phoneNumberRequired?: boolean;\n    };\n}\n\nexport interface GooglePayBaseCardPaymentMethod\n    extends GooglePayPaymentMethod<GooglePayCardParameters> {\n    type: 'CARD';\n    parameters: GooglePayCardParameters;\n}\n\nexport interface GooglePayIsReadyToPayRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n}\n\ninterface GooglePayGatewayBaseParameters {\n    gateway: string;\n}\n\nexport interface GooglePayRegularGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId: string;\n}\n\nexport interface GooglePayStripeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'stripe:version'?: string;\n    'stripe:publishableKey'?: string;\n}\n\nexport interface GooglePayBraintreeGatewayParameters extends GooglePayGatewayBaseParameters {\n    'braintree:apiVersion'?: string;\n    'braintree:authorizationFingerprint'?: string;\n    'braintree:merchantId'?: string;\n    'braintree:sdkVersion'?: string;\n}\n\nexport interface GooglePayPayPalCommerceGatewayParameters extends GooglePayGatewayBaseParameters {\n    gatewayMerchantId?: string;\n}\n\nexport type GooglePayGatewayParameters =\n    | GooglePayRegularGatewayParameters\n    | GooglePayStripeGatewayParameters\n    | GooglePayBraintreeGatewayParameters;\n\nexport interface GooglePayCardPaymentMethod extends GooglePayBaseCardPaymentMethod {\n    tokenizationSpecification: {\n        type: 'PAYMENT_GATEWAY';\n        parameters: GooglePayGatewayParameters;\n    };\n}\n\nexport interface GooglePayTransactionInfo {\n    /** [!] Required for EEA countries */\n    countryCode?: string;\n    currencyCode: string;\n    totalPriceStatus: TotalPriceStatusType;\n    totalPrice: string;\n}\n\nexport interface GooglePayMerchantInfo {\n    merchantName: string;\n    merchantId: string;\n    authJwt: string;\n}\n\nexport enum CallbackIntentsType {\n    OFFER = 'OFFER',\n    PAYMENT_AUTHORIZATION = 'PAYMENT_AUTHORIZATION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n}\n\nexport interface GooglePayPaymentDataRequest extends GooglePayGatewayBaseRequest {\n    allowedPaymentMethods: [GooglePayCardPaymentMethod];\n    transactionInfo: GooglePayTransactionInfo;\n    merchantInfo: GooglePayMerchantInfo;\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n    offerInfo: Offers;\n    shippingOptionRequired?: boolean;\n    callbackIntents?: CallbackIntentsType[];\n}\n\nexport interface NewTransactionInfo {\n    newTransactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport interface ShippingOptionParameters {\n    defaultSelectedOptionId?: string;\n    shippingOptions?: GoogleShippingOption[];\n}\n\nexport interface NewShippingOptionParameters {\n    newShippingOptionParameters?: ShippingOptionParameters;\n}\n\nexport interface NewOfferInfo {\n    newOfferInfo?: Offers;\n}\n\nexport interface Offers {\n    offers: OfferInfoItem[];\n}\n\nexport interface GooglePayError {\n    message: string;\n    reason: ErrorReasonType;\n    intent: CallbackTriggerType;\n}\n\nexport enum ErrorReasonType {\n    OFFER_INVALID = 'OFFER_INVALID',\n    PAYMENT_DATA_INVALID = 'PAYMENT_DATA_INVALID',\n    SHIPPING_ADDRESS_INVALID = 'SHIPPING_ADDRESS_INVALID',\n    SHIPPING_ADDRESS_UNSERVICEABLE = 'SHIPPING_ADDRESS_UNSERVICEABLE',\n    SHIPPING_OPTION_INVALID = 'SHIPPING_OPTION_INVALID',\n    OTHER_ERROR = 'OTHER_ERROR',\n}\n\nexport interface OfferInfoItem {\n    redemptionCode: string;\n    description: string;\n}\n\nexport interface HandleCouponsOut {\n    newOfferInfo: GooglePayPaymentDataRequest['offerInfo'];\n    error?: GooglePayError;\n}\n\nexport interface GoogleShippingOption {\n    id: string;\n    label?: string;\n}\n\nexport enum CallbackTriggerType {\n    INITIALIZE = 'INITIALIZE',\n    SHIPPING_OPTION = 'SHIPPING_OPTION',\n    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS',\n    OFFER = 'OFFER',\n}\n\nexport interface IntermediatePaymentData {\n    callbackTrigger: CallbackTriggerType;\n    shippingAddress: GooglePayFullBillingAddress;\n    shippingOptionData: GoogleShippingOption;\n    offerData: {\n        redemptionCodes: string[];\n    };\n}\n\nexport interface GooglePayPaymentOptions {\n    paymentDataCallbacks?: {\n        onPaymentDataChanged(\n            intermediatePaymentData: IntermediatePaymentData,\n        ): onPaymentDataChangedOut;\n    };\n}\n\nexport type onPaymentDataChangedOut = Promise<\n    | (NewTransactionInfo & NewShippingOptionParameters & NewOfferInfo & { error?: GooglePayError })\n    | void\n>;\n\nexport type GooglePayRequiredPaymentData = Pick<\n    GooglePayPaymentDataRequest,\n    | 'emailRequired'\n    | 'shippingAddressRequired'\n    | 'shippingAddressParameters'\n    | 'shippingOptionRequired'\n>;\n\ninterface GooglePayMinBillingAddress {\n    name: string;\n    postalCode: string;\n    countryCode: string;\n    phoneNumber?: string;\n}\n\nexport interface GooglePayFullBillingAddress extends GooglePayMinBillingAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    locality: string;\n    administrativeArea: string;\n    sortingCode: string;\n}\n\ninterface GooglePayCardInfo {\n    cardNetwork: GooglePayCardNetwork;\n    cardDetails: string;\n    billingAddress?: GooglePayFullBillingAddress;\n}\n\ninterface GooglePayPaymentMethodData<T> {\n    description: string;\n    tokenizationData: {\n        type: 'PAYMENT_GATEWAY';\n        token: string;\n    };\n    type: string;\n    info: T;\n}\n\ninterface GooglePayCardData extends GooglePayPaymentMethodData<GooglePayCardInfo> {\n    type: 'CARD';\n}\n\ninterface GooglePayPaymentDataResponse<T> extends GooglePayGatewayBaseResponse {\n    paymentMethodData: GooglePayPaymentMethodData<T>;\n    shippingAddress?: GooglePayFullBillingAddress;\n    email?: string;\n}\n\nexport interface GooglePayCardDataResponse extends GooglePayPaymentDataResponse<GooglePayCardInfo> {\n    paymentMethodData: GooglePayCardData;\n}\n\ninterface GooglePayIsReadyToPayResponse {\n    result: boolean;\n}\n\nexport interface GooglePayButtonOptions {\n    onClick: (event: MouseEvent) => Promise<void>;\n    allowedPaymentMethods: [GooglePayBaseCardPaymentMethod];\n    buttonColor?: GooglePayButtonColor;\n    buttonType?: GooglePayButtonType;\n}\n\nexport interface GooglePaymentsClient {\n    isReadyToPay(request: GooglePayIsReadyToPayRequest): Promise<GooglePayIsReadyToPayResponse>;\n    createButton(options: GooglePayButtonOptions): HTMLElement;\n    loadPaymentData(request: GooglePayPaymentDataRequest): Promise<GooglePayCardDataResponse>;\n    prefetchPaymentData(request: GooglePayPaymentDataRequest): void;\n}\n\ntype GooglePayEnvironment = 'TEST' | 'PRODUCTION';\n\nexport type GooglePaymentsClientConstructor = new (paymentOptions: {\n    environment: GooglePayEnvironment;\n}) => GooglePaymentsClient;\n\nexport interface GooglePayHostWindow extends Window {\n    google?: {\n        payments: {\n            api: {\n                PaymentsClient: GooglePaymentsClientConstructor;\n            };\n        };\n    };\n}\n\ninterface GooglePayBaseInitializationData {\n    card_information?: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    gateway: string;\n    gatewayMerchantId?: string;\n    googleMerchantId: string;\n    googleMerchantName: string;\n    isThreeDSecureEnabled: boolean;\n    nonce?: string;\n    platformToken: string;\n    storeCountry?: string;\n}\n\nexport interface GooglePayPayPalCommerceInitializationData extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: PayPalCommerceIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayBigCommercePaymentsInitializationData\n    extends GooglePayBaseInitializationData {\n    merchantId?: string;\n    clientId: string;\n    attributionId?: string;\n    availableAlternativePaymentMethods: FundingType;\n    buttonStyle?: PayPalButtonStyleOptions;\n    buyerCountry?: string;\n    clientToken?: string;\n    enabledAlternativePaymentMethods: FundingType;\n    isDeveloperModeApplicable?: boolean;\n    intent?: BigCommercePaymentsIntent;\n    isHostedCheckoutEnabled?: boolean;\n    isPayPalCreditAvailable?: boolean;\n    isVenmoEnabled?: boolean;\n    isGooglePayEnabled?: boolean;\n    orderId?: string;\n    shouldRenderFields?: boolean;\n    paymentButtonStyles?: Record<string, PayPalButtonStyleOptions>;\n}\n\nexport interface GooglePayAuthorizeNetInitializationData extends GooglePayBaseInitializationData {\n    paymentGatewayId: string;\n}\n\nexport interface GooglePayStripeInitializationData extends GooglePayBaseInitializationData {\n    stripeConnectedAccount: string;\n    stripePublishableKey: string;\n    stripeVersion: string;\n}\n\nexport interface GooglePayCheckoutComInitializationData extends GooglePayBaseInitializationData {\n    checkoutcomkey: string;\n}\n\nexport interface GooglePayAdyenV2InitializationData extends GooglePayBaseInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface GooglePayAdyenV3InitializationData extends GooglePayBaseInitializationData {\n    clientKey: string;\n    environment?: string;\n    prefillCardHolderName?: boolean;\n    paymentMethodsResponse: object;\n}\n\nexport type GooglePayInitializationData =\n    | GooglePayBaseInitializationData\n    | GooglePayAdyenV2InitializationData\n    | GooglePayAdyenV3InitializationData\n    | GooglePayAuthorizeNetInitializationData\n    | GooglePayStripeInitializationData\n    | GooglePayCheckoutComInitializationData\n    | GooglePayPayPalCommerceInitializationData\n    | GooglePayBigCommercePaymentsInitializationData;\n\nexport interface GooglePaySetExternalCheckoutData {\n    nonce: string;\n    card_information: { type: string; number: string; bin?: string; isNetworkTokenized?: boolean };\n    cart_id?: string;\n}\n\nexport interface GooglePayAdditionalActionProcessable {\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void>;\n}\n\nexport interface GooglePayErrorObject {\n    errorCode?: number;\n    statusCode: 'CANCELED' | 'DEVELOPER_ERROR';\n    statusMessage?: string;\n}\n\nexport interface GooglePayTokenObject {\n    protocolVersion: string;\n    signature: string;\n    signedMessage: string;\n}\n\nexport interface GooglePayStripeTokenObject {\n    id: string;\n}\n\nexport interface GooglePayBraintreeTokenObject {\n    androidPayCards: [\n        {\n            nonce: string;\n            details: {\n                bin: string;\n                isNetworkTokenized?: boolean;\n            };\n        },\n    ];\n}\n\nexport interface GooglePayCheckoutComTokenObject {\n    token: string;\n}\n\nexport interface GooglePayThreeDSecureResult {\n    three_ds_result: {\n        acs_url: string;\n        code: string;\n    };\n}\n\nexport interface GooglePayBuyNowInitializeOptions {\n    getBuyNowCartRequestBody?(): BuyNowCartRequestBody;\n}\n\nexport interface ExtraPaymentData {\n    deviceSessionId?: string;\n    browser_info?: BrowserInfo;\n}\n\nexport type GooglePayButtonColor = 'default' | 'black' | 'white';\nexport type GooglePayButtonType =\n    | 'book'\n    | 'buy'\n    | 'checkout'\n    | 'donate'\n    | 'order'\n    | 'pay'\n    | 'plain'\n    | 'subscribe'\n    | 'long'\n    | 'short';\n\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n","import { GooglePayCardNetwork } from '../types';\n\nexport default function isGooglePayCardNetworkKey(\n    card: string,\n): card is keyof typeof GooglePayCardNetwork {\n    return card in GooglePayCardNetwork;\n}\n","import { round } from 'lodash';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    createCurrencyService,\n    CurrencyService,\n    guard,\n    InvalidArgumentError,\n    itemsRequireShipping,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    ShippingOption,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isGooglePayCardNetworkKey from '../guards/is-google-pay-card-network-key';\nimport {\n    CallbackIntentsType,\n    CallbackTriggerType,\n    ErrorReasonType,\n    ExtraPaymentData,\n    GooglePayCardDataResponse,\n    GooglePayCardNetwork,\n    GooglePayCardParameters,\n    GooglePayError,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePayMerchantInfo,\n    GooglePayPaymentDataRequest,\n    GooglePayRequiredPaymentData,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTransactionInfo,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from '../types';\n\nexport default class GooglePayGateway {\n    private _getPaymentMethodFn?: () => PaymentMethod<GooglePayInitializationData>;\n    private _isBuyNowFlow = false;\n    private _currencyCode?: string;\n    private _currencyService?: CurrencyService;\n\n    constructor(\n        private _gatewayIdentifier: string,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    mapToShippingAddressRequestBody({\n        shippingAddress,\n    }: GooglePayCardDataResponse): AddressRequestBody | undefined {\n        if (!shippingAddress) {\n            return;\n        }\n\n        const { company = '', phone = '' } =\n            this._paymentIntegrationService.getState().getShippingAddress() || {};\n\n        return this._mapToAddressRequestBody(shippingAddress, company, phone);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        const { billingAddress } = response.paymentMethodData.info;\n\n        if (!billingAddress) {\n            return;\n        }\n\n        const {\n            company = '',\n            phone = '',\n            email,\n            customFields = [],\n        } = this._paymentIntegrationService.getState().getBillingAddress() || {};\n\n        return {\n            ...this._mapToAddressRequestBody(billingAddress, company, phone, customFields),\n            email: email || response.email,\n        };\n    }\n\n    mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const {\n            paymentMethodData: {\n                tokenizationData: { token: nonce },\n                info: { cardNetwork: type, cardDetails: number },\n            },\n        } = response;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve({\n            nonce,\n            card_information: { type, number },\n            ...(this._isBuyNowFlow && {\n                cart_id: this._paymentIntegrationService.getState().getCart()?.id,\n            }),\n        });\n    }\n\n    async getRequiredData(): Promise<GooglePayRequiredPaymentData> {\n        const data: GooglePayRequiredPaymentData = { emailRequired: true };\n\n        if (!this._isShippingAddressRequired()) {\n            return data;\n        }\n\n        const state = await this._paymentIntegrationService.loadShippingCountries();\n        const allowedCountryCodes = state.getShippingCountries()?.map((country) => country.code);\n\n        return {\n            ...data,\n            shippingAddressRequired: true,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n                ...(allowedCountryCodes && { allowedCountryCodes }),\n            },\n            shippingOptionRequired: true,\n        };\n    }\n\n    getCallbackIntents(): CallbackIntentsType[] {\n        if (this._isShippingAddressRequired()) {\n            return [\n                CallbackIntentsType.OFFER,\n                CallbackIntentsType.SHIPPING_ADDRESS,\n                CallbackIntentsType.SHIPPING_OPTION,\n            ];\n        }\n\n        return [CallbackIntentsType.OFFER];\n    }\n\n    getCallbackTriggers(): { [key: string]: CallbackTriggerType[] } {\n        const state = this._paymentIntegrationService.getState();\n        // TODO remove this experiment usage after we make sure that coupons handling works fine\n        const isGooglePayCouponsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-2875.googlepay_coupons_handling'\n            ] || false;\n\n        const availableTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n            CallbackTriggerType.SHIPPING_OPTION,\n            ...(isGooglePayCouponsExperimentOn ? [CallbackTriggerType.OFFER] : []),\n        ];\n\n        const initializationTrigger = [CallbackTriggerType.INITIALIZE];\n        const addressChangeTriggers = [\n            CallbackTriggerType.INITIALIZE,\n            CallbackTriggerType.SHIPPING_ADDRESS,\n        ];\n        const shippingOptionsChangeTriggers = [CallbackTriggerType.SHIPPING_OPTION];\n        const offerChangeTriggers = isGooglePayCouponsExperimentOn\n            ? [CallbackTriggerType.OFFER]\n            : [];\n\n        return {\n            availableTriggers,\n            initializationTrigger,\n            addressChangeTriggers,\n            shippingOptionsChangeTriggers,\n            offerChangeTriggers,\n        };\n    }\n\n    getNonce(methodId: string) {\n        const nonce = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(methodId)\n            .initializationData?.nonce;\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return Promise.resolve(nonce);\n    }\n\n    extraPaymentData(): Promise<undefined | ExtraPaymentData> {\n        return Promise.resolve(undefined);\n    }\n\n    getMerchantInfo(): GooglePayMerchantInfo {\n        const {\n            googleMerchantName: merchantName,\n            googleMerchantId: merchantId,\n            platformToken: authJwt,\n        } = this.getGooglePayInitializationData();\n\n        return { merchantName, merchantId, authJwt };\n    }\n\n    getTransactionInfo(): GooglePayTransactionInfo {\n        let currencyCode: string;\n\n        if (this._isBuyNowFlow) {\n            currencyCode = this._getCurrencyCodeOrThrow();\n        } else {\n            const { getCartOrThrow } = this._paymentIntegrationService.getState();\n\n            currencyCode = getCartOrThrow().currency.code;\n        }\n\n        const countryCode = this.getGooglePayInitializationData().storeCountry;\n\n        return {\n            ...(countryCode && { countryCode }),\n            currencyCode,\n            totalPriceStatus: TotalPriceStatusType.ESTIMATED,\n            totalPrice: '0',\n        };\n    }\n\n    getPaymentGatewayParameters():\n        | Promise<GooglePayGatewayParameters>\n        | GooglePayGatewayParameters {\n        const gatewayMerchantId = this.getGooglePayInitializationData().gatewayMerchantId;\n\n        if (!gatewayMerchantId) {\n            throw new InvalidArgumentError('Unable to proceed, gatewayMerchantId is missing.');\n        }\n\n        return {\n            gateway: this._gatewayIdentifier,\n            gatewayMerchantId,\n        };\n    }\n\n    getCardParameters(): GooglePayCardParameters {\n        const allowedCardNetworks = this.getPaymentMethod()\n            .supportedCards.filter(isGooglePayCardNetworkKey)\n            .map((key) => GooglePayCardNetwork[key]);\n\n        return {\n            allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n            allowedCardNetworks,\n            billingAddressRequired: true,\n            billingAddressParameters: {\n                format: 'FULL',\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._getPaymentMethodFn = getPaymentMethod;\n        this._isBuyNowFlow = Boolean(isBuyNowFlow);\n        this._currencyCode = currencyCode;\n\n        if (this._isBuyNowFlow) {\n            this._getCurrencyCodeOrThrow();\n        }\n\n        return Promise.resolve();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress?: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        if (shippingAddress) {\n            shippingAddress.name = shippingAddress.name || '';\n            shippingAddress.address1 = shippingAddress.address1 || '';\n        }\n\n        const mappedShippingAddress = this.mapToShippingAddressRequestBody({\n            shippingAddress,\n        } as GooglePayCardDataResponse);\n\n        if (mappedShippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(mappedShippingAddress);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const consignments = state.getConsignments();\n\n        if (!consignments?.[0]) {\n            // Info: we can not return an empty data because shippingOptions should contain at least one element, it caused a developer exception\n            return;\n        }\n\n        const consignment = consignments[0];\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        if (!this._currencyService) {\n            this._currencyService = createCurrencyService(storeConfig);\n        }\n\n        const availableShippingOptions = (consignment.availableShippingOptions || []).map(\n            this._getGooglePayShippingOption.bind(this),\n        );\n\n        const recommendedShippingOption = consignment.availableShippingOptions?.find(\n            (shippingOption) => shippingOption.isRecommended,\n        );\n\n        if (availableShippingOptions.length) {\n            const selectedShippingOptionId =\n                consignment.selectedShippingOption?.id ||\n                recommendedShippingOption?.id ||\n                availableShippingOptions[0]?.id;\n\n            if (!consignment.selectedShippingOption?.id && availableShippingOptions[0]) {\n                await this.handleShippingOptionChange(\n                    recommendedShippingOption?.id || availableShippingOptions[0].id,\n                );\n            }\n\n            return {\n                defaultSelectedOptionId: selectedShippingOptionId,\n                shippingOptions: availableShippingOptions,\n            };\n        }\n    }\n\n    async handleShippingOptionChange(optionId: string) {\n        if (optionId === 'shipping_option_unselected') {\n            return;\n        }\n\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    getTotalPrice(): string {\n        const { getCheckoutOrThrow, getCartOrThrow } = this._paymentIntegrationService.getState();\n        const { decimalPlaces } = getCartOrThrow().currency;\n        const totalPrice = round(getCheckoutOrThrow().outstandingBalance, decimalPlaces).toFixed(\n            decimalPlaces,\n        );\n\n        return totalPrice;\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        const { redemptionCodes: newCouponsState = [] } = offerData;\n        const { offers: appliedCoupons } = this.getAppliedCoupons();\n        let error;\n\n        await newCouponsState.reduce(async (promise, code) => {\n            await promise;\n\n            const exists = appliedCoupons.some(({ redemptionCode }) => redemptionCode === code);\n\n            if (exists) {\n                return;\n            }\n\n            const appliedCouponError = await this.applyCoupon(code);\n\n            if (appliedCouponError) {\n                error = appliedCouponError;\n            }\n        }, Promise.resolve());\n\n        await appliedCoupons.reduce(async (promise, coupon) => {\n            await promise;\n\n            const stillExists = newCouponsState.includes(coupon.redemptionCode);\n\n            if (!stillExists) {\n                await this._paymentIntegrationService.removeCoupon(coupon.redemptionCode);\n            }\n        }, Promise.resolve());\n\n        return {\n            newOfferInfo: this.getAppliedCoupons(),\n            error,\n        };\n    }\n\n    getAppliedCoupons(): GooglePayPaymentDataRequest['offerInfo'] {\n        const state = this._paymentIntegrationService.getState();\n        const { coupons } = state.getCheckout() || {};\n\n        const offers = (coupons || []).map((coupon) => {\n            const { displayName, code } = coupon;\n\n            return {\n                redemptionCode: code,\n                description: displayName,\n            };\n        });\n\n        return {\n            offers,\n        };\n    }\n\n    async applyCoupon(code: string): Promise<GooglePayError | void> {\n        let error: GooglePayError | undefined;\n\n        try {\n            await this._paymentIntegrationService.applyCoupon(code);\n        } catch (e) {\n            if (e instanceof Error) {\n                error = {\n                    reason: ErrorReasonType.OFFER_INVALID,\n                    message: e.message,\n                    intent: CallbackTriggerType.OFFER,\n                };\n            }\n\n            return error;\n        }\n    }\n\n    protected getGooglePayInitializationData(): GooglePayInitializationData {\n        return guard(\n            this.getPaymentMethod().initializationData,\n            () => new InvalidArgumentError('Missing initialization data.'),\n        );\n    }\n\n    protected getPaymentMethod(): PaymentMethod<GooglePayInitializationData> {\n        return guard(\n            this._getPaymentMethodFn,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        )();\n    }\n\n    protected getGatewayIdentifier(): string {\n        return this._gatewayIdentifier;\n    }\n\n    protected setGatewayIdentifier(gateway?: string) {\n        this._gatewayIdentifier = gateway || this.getGatewayIdentifier();\n    }\n\n    private _isShippingAddressRequired(): boolean {\n        const { getCartOrThrow, getStoreConfig, getShippingAddress } =\n            this._paymentIntegrationService.getState();\n\n        return (\n            getShippingAddress() === undefined &&\n            itemsRequireShipping(getCartOrThrow(), getStoreConfig())\n        );\n    }\n\n    private _mapToAddressRequestBody(\n        address: GooglePayFullBillingAddress,\n        company: string,\n        phone: string,\n        customFields?: AddressRequestBody['customFields'],\n    ): AddressRequestBody {\n        const {\n            name,\n            address1,\n            address2,\n            address3,\n            locality: city,\n            administrativeArea: stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phoneNumber,\n        } = address;\n        const [firstName, lastName] = this._getFirstAndLastName(name);\n\n        return {\n            firstName,\n            lastName,\n            company,\n            address1,\n            address2: `${address2} ${address3}`.trim(),\n            city: city || stateOrProvinceCode,\n            stateOrProvince: stateOrProvinceCode,\n            stateOrProvinceCode,\n            countryCode,\n            postalCode,\n            phone: phoneNumber || phone,\n            customFields: customFields || [],\n        };\n    }\n\n    private _getFirstAndLastName(fullName: string): [string, string] {\n        const nameParts = fullName.split(' ');\n\n        if (nameParts.length === 1) {\n            return [fullName, ''];\n        }\n\n        const firstName = nameParts.slice(0, -1).join(' ');\n        const lastName = nameParts[nameParts.length - 1];\n\n        return [firstName, lastName];\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n\n    private _getGooglePayShippingOption({\n        id,\n        cost,\n        description,\n        additionalDescription,\n    }: ShippingOption) {\n        const formattedCost = this._currencyService?.toCustomerCurrency(cost);\n        const state = this._paymentIntegrationService.getState();\n        const isNewShippingOptionsExperimentOn =\n            state.getStoreConfigOrThrow().checkoutSettings.features[\n                'PI-3540.googlepay_new_shipping_options_description'\n            ];\n\n        if (isNewShippingOptionsExperimentOn) {\n            return {\n                id,\n                label: `${formattedCost || cost} ${description}`,\n                description: additionalDescription,\n            };\n        }\n\n        return {\n            id,\n            label: description,\n            description: formattedCost || cost,\n        };\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * param config - The config object containing the currency configuration\n * returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(config: StoreConfig): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import {\n    BraintreeGooglePayment,\n    BraintreeGooglePayThreeDSecure,\n    BraintreeSdk,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CancellablePromise,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayKey } from '../google-pay-payment-initialize-options';\nimport assertIsGooglePayBraintreeTokenObject from '../guards/is-google-pay-braintree-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePayInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayBraintreeGateway extends GooglePayGateway {\n    private _braintreeGooglePayment?: BraintreeGooglePayment;\n    private _service: PaymentIntegrationService;\n    private _methodId = GooglePayKey.BRAINTREE;\n\n    constructor(service: PaymentIntegrationService, private _braintreeSdk: BraintreeSdk) {\n        super('braintree', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        let paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.clientToken) {\n            const state = await this._service.loadPaymentMethod(this._methodId);\n\n            paymentMethod = state.getPaymentMethodOrThrow(this._methodId);\n        }\n\n        if (!paymentMethod.clientToken || !paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSdk.initialize(paymentMethod.clientToken);\n        this._braintreeGooglePayment = await this._braintreeSdk.getBraintreeGooglePayment();\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n\n        const { clientToken, initializationData } = super.getPaymentMethod();\n\n        if (!clientToken || !initializationData || !initializationData.card_information?.bin) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            isThreeDSecureEnabled,\n            card_information: { bin, isNetworkTokenized },\n        } = initializationData;\n\n        if (isThreeDSecureEnabled && !isNetworkTokenized) {\n            const threeDSecure = await this._braintreeSdk.getBraintreeThreeDS();\n\n            const { orderAmount } = this._service.getState().getOrderOrThrow();\n\n            const verification = await this._braintreePresent3DSChallenge(\n                threeDSecure,\n                orderAmount,\n                nonce,\n                bin,\n            );\n\n            return verification.nonce;\n        }\n\n        return nonce;\n    }\n\n    async extraPaymentData() {\n        return {\n            deviceSessionId: await this._getBraintreeDeviceData(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayBraintreeTokenObject(token);\n\n        data.nonce = token.androidPayCards[0].nonce;\n        data.card_information.bin = token.androidPayCards[0].details.bin;\n        data.card_information.isNetworkTokenized =\n            token.androidPayCards[0].details.isNetworkTokenized;\n\n        return data;\n    }\n\n    getCardParameters() {\n        return super.getCardParameters();\n    }\n\n    async getPaymentGatewayParameters(): Promise<GooglePayGatewayParameters> {\n        const braintreeGooglePayment = this.getBraintreeGooglePayment();\n\n        const request = braintreeGooglePayment.createPaymentDataRequest({\n            merchantInfo: super.getMerchantInfo(),\n            transactionInfo: super.getTransactionInfo(),\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            ...(await super.getRequiredData()),\n        });\n\n        return request.paymentMethodTokenizationParameters.parameters;\n    }\n\n    private getBraintreeGooglePayment(): BraintreeGooglePayment {\n        if (!this._braintreeGooglePayment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._braintreeGooglePayment;\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n        return deviceData;\n    }\n\n    private _braintreePresent3DSChallenge(\n        threeDSecure: BraintreeGooglePayThreeDSecure,\n        amount: number,\n        nonce: string,\n        bin: string,\n    ) {\n        const verification = new CancellablePromise(\n            threeDSecure.verifyCard({\n                amount,\n                bin,\n                nonce,\n                onLookupComplete: (_data, next) => {\n                    next();\n                },\n            }),\n        );\n\n        return verification.promise;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayBraintreeTokenObject } from '../types';\n\nfunction isGooglePayBraintreeTokenObject(token: unknown): token is GooglePayBraintreeTokenObject {\n    return typeof token === 'object' && token !== null && 'androidPayCards' in token;\n}\n\nexport default function assertIsGooglePayBraintreeTokenObject(\n    token: unknown,\n): asserts token is GooglePayBraintreeTokenObject {\n    if (!isGooglePayBraintreeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { GooglePayErrorObject } from '../types';\n\nexport default function isGooglePayErrorObject(error: unknown): error is GooglePayErrorObject {\n    return typeof error === 'object' && error !== null && 'statusCode' in error;\n}\n","import { GooglePayKey } from '../google-pay-payment-initialize-options';\n\nexport default function isGooglePayKey(key: string): key is GooglePayKey {\n    return Object.values<string>(GooglePayKey).includes(key);\n}\n","import {\n    BuyNowCartCreationError,\n    Cart,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    guard,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithGooglePayButtonInitializeOptions } from './google-pay-button-initialize-option';\nimport GooglePayCustomerInitializeOptions from './google-pay-customer-initialize-options';\nimport { WithGooglePayPaymentInitializeOptions } from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayBuyNowInitializeOptions,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    ShippingOptionParameters,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n    private _buyNowCart?: Cart;\n    private _currencyCode?: string;\n    private _buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions;\n    private _countryCode?: string;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithGooglePayButtonInitializeOptions,\n    ): Promise<void> {\n        if (!options.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        if (!options.containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"containerId\" is not a valid key.',\n            );\n        }\n\n        const googlePayOptions = options[this._getMethodOrThrow()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { buyNowInitializeOptions, currencyCode, buttonColor, buttonType, onError } =\n            googlePayOptions;\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(\n                this._getMethodOrThrow(),\n            );\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodOrThrow());\n        }\n\n        this._countryCode = paymentMethod.initializationData?.storeCountry;\n\n        if (buyNowInitializeOptions) {\n            if (!currencyCode) {\n                throw new InvalidArgumentError(\n                    `Unable to initialize payment because \"options.currencyCode\" argument is not provided.`,\n                );\n            }\n\n            this._currencyCode = currencyCode;\n            this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n                !!buyNowInitializeOptions,\n                currencyCode,\n            );\n        } else {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(),\n            );\n        }\n\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(options.containerId, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError),\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            try {\n                if (this._buyNowInitializeOptions) {\n                    await this._createBuyNowCartOrThrow(this._buyNowInitializeOptions);\n                } else {\n                    await this._paymentIntegrationService.loadDefaultCheckout();\n                }\n\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress && !this._buyNowCart?.lineItems.digitalItems.length) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodOrThrow(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getGooglePayClientOptions(): GooglePayPaymentOptions | undefined {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    if (this._buyNowInitializeOptions) {\n                        return this._getBuyNowTransactionInfo(\n                            availableShippingOptions,\n                            newOfferInfo,\n                            error,\n                        );\n                    }\n\n                    return this._getTransactionInfo(availableShippingOptions, newOfferInfo, error);\n                },\n            },\n        };\n    }\n\n    private async _createBuyNowCartOrThrow(\n        buyNowInitializeOptions?: GooglePayBuyNowInitializeOptions,\n    ): Promise<void> {\n        if (typeof buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function') {\n            const cartRequestBody = buyNowInitializeOptions.getBuyNowCartRequestBody();\n\n            try {\n                this._buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                    cartRequestBody,\n                );\n\n                await this._paymentIntegrationService.loadCheckout(this._buyNowCart.id);\n            } catch (error) {\n                if (typeof error === 'string') {\n                    throw new BuyNowCartCreationError(error);\n                }\n\n                throw error;\n            }\n        }\n    }\n\n    private _getBuyNowTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        if (!this._buyNowCart) {\n            return;\n        }\n\n        const { cartAmount } = this._buyNowCart;\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode: this._getCurrencyCodeOrThrow(),\n                totalPrice: totalPrice || String(cartAmount),\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private async _getTransactionInfo(\n        availableShippingOptions?: ShippingOptionParameters,\n        newOfferInfo?: GooglePayPaymentDataRequest['offerInfo'],\n        error?: GooglePayError,\n    ) {\n        await this._paymentIntegrationService.loadCheckout();\n\n        const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n        const { code: currencyCode } = this._paymentIntegrationService\n            .getState()\n            .getCartOrThrow().currency;\n\n        return {\n            newTransactionInfo: {\n                ...(this._countryCode && { countryCode: this._countryCode }),\n                currencyCode,\n                totalPriceStatus: TotalPriceStatusType.FINAL,\n                totalPrice,\n            },\n            ...(availableShippingOptions && {\n                newShippingOptionParameters: availableShippingOptions,\n            }),\n            ...(newOfferInfo && {\n                newOfferInfo,\n            }),\n            ...(error && {\n                error,\n            }),\n        };\n    }\n\n    private _getMethodOrThrow(): keyof WithGooglePayButtonInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _getCurrencyCodeOrThrow(): string {\n        return guard(\n            this._currencyCode,\n            () =>\n                new InvalidArgumentError(\n                    'Unable to initialize payment because \"options.currencyCode\" argument is not provided.',\n                ),\n        );\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    AddressRequestBody,\n    BillingAddressRequestBody,\n    guard,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    PaymentMethod,\n    PaymentMethodFailedError,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from './gateways/google-pay-gateway';\nimport GooglePayScriptLoader from './google-pay-script-loader';\nimport isGooglePayAdditionalActionProcessable from './guards/is-google-pay-additional-action-processable';\nimport {\n    GooglePayBaseCardPaymentMethod,\n    GooglePayButtonOptions,\n    GooglePayCardDataResponse,\n    GooglePayCardPaymentMethod,\n    GooglePayFullBillingAddress,\n    GooglePayGatewayBaseRequest,\n    GooglePayInitializationData,\n    GooglePayIsReadyToPayRequest,\n    GooglePaymentsClient,\n    GooglePayPaymentDataRequest,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    ShippingOptionParameters,\n} from './types';\n\nexport default class GooglePayPaymentProcessor {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _baseRequest: GooglePayGatewayBaseRequest = { apiVersion: 2, apiVersionMinor: 0 };\n    private _baseCardPaymentMethod?: GooglePayBaseCardPaymentMethod;\n    private _cardPaymentMethod?: GooglePayCardPaymentMethod;\n    private _paymentDataRequest?: GooglePayPaymentDataRequest;\n    private _isReadyToPayRequest?: GooglePayIsReadyToPayRequest;\n\n    constructor(\n        private _scriptLoader: GooglePayScriptLoader,\n        private _gateway: GooglePayGateway,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster,\n    ) {}\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        googlePayPaymentOptions?: GooglePayPaymentOptions,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        this._paymentsClient = await this._scriptLoader.getGooglePaymentsClient(\n            getPaymentMethod().config.testMode,\n            googlePayPaymentOptions,\n        );\n\n        await this._gateway.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        this._buildButtonPayloads();\n    }\n\n    async initializeWidget() {\n        await this._buildWidgetPayloads();\n\n        await this._determineReadinessToPay();\n\n        this._prefetchGooglePaymentData();\n    }\n\n    getNonce(methodId: string) {\n        return this._gateway.getNonce(methodId);\n    }\n\n    async extraPaymentData() {\n        return this._gateway.extraPaymentData();\n    }\n\n    addPaymentButton(\n        containerId: string,\n        options: Omit<GooglePayButtonOptions, 'allowedPaymentMethods'>,\n    ): HTMLElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const paymentButton = this._getPaymentsClient().createButton({\n            ...options,\n            allowedPaymentMethods: [this._getBaseCardPaymentMethod()],\n        });\n\n        return container.appendChild(paymentButton);\n    }\n\n    async showPaymentSheet(): Promise<GooglePayCardDataResponse> {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        return this._getPaymentsClient().loadPaymentData(paymentDataRequest);\n    }\n\n    async setExternalCheckoutXhr(\n        provider: string,\n        response: GooglePayCardDataResponse,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response);\n    }\n\n    async setExternalCheckoutForm(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        siteLink?: string,\n    ): Promise<void> {\n        return this._setExternalCheckout(provider, response, true, siteLink);\n    }\n\n    mapToBillingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): BillingAddressRequestBody | undefined {\n        return this._gateway.mapToBillingAddressRequestBody(response);\n    }\n\n    mapToShippingAddressRequestBody(\n        response: GooglePayCardDataResponse,\n    ): AddressRequestBody | undefined {\n        return this._gateway.mapToShippingAddressRequestBody(response);\n    }\n\n    processAdditionalAction(error: unknown, methodId?: string): Promise<void> {\n        return isGooglePayAdditionalActionProcessable(this._gateway)\n            ? this._gateway.processAdditionalAction(error, methodId)\n            : Promise.reject(error);\n    }\n\n    async signOut(providerId: string): Promise<void> {\n        await this._requestSender.get(`/remote-checkout/${providerId}/signout`);\n    }\n\n    getCallbackTriggers() {\n        return this._gateway.getCallbackTriggers();\n    }\n\n    async handleShippingAddressChange(\n        shippingAddress: GooglePayFullBillingAddress,\n    ): Promise<ShippingOptionParameters | undefined> {\n        return this._gateway.handleShippingAddressChange(shippingAddress);\n    }\n\n    async handleShippingOptionChange(optionId: string): Promise<void> {\n        await this._gateway.handleShippingOptionChange(optionId);\n    }\n\n    async handleCoupons(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<HandleCouponsOut> {\n        return this._gateway.handleCoupons(offerData);\n    }\n\n    getTotalPrice(): string {\n        return this._gateway.getTotalPrice();\n    }\n\n    async _setExternalCheckout(\n        provider: string,\n        response: GooglePayCardDataResponse,\n        useFormPoster = false,\n        siteLink?: string,\n    ): Promise<void> {\n        const url = '/checkout.php';\n        const body = {\n            action: 'set_external_checkout',\n            provider,\n            ...(await this._gateway.mapToExternalCheckoutData(response)),\n        };\n\n        if (useFormPoster) {\n            return new Promise((resolve) => {\n                this._formPoster.postForm(\n                    siteLink ? `${siteLink}/checkout` : url,\n                    {\n                        ...body,\n                        card_information: JSON.stringify(body.card_information),\n                    },\n                    resolve,\n                );\n            });\n        }\n\n        await this._requestSender.post(url, {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                ...SDK_VERSION_HEADERS,\n            },\n            body,\n        });\n    }\n\n    private _prefetchGooglePaymentData(): void {\n        const paymentDataRequest = this._getPaymentDataRequest();\n\n        paymentDataRequest.transactionInfo = this._gateway.getTransactionInfo();\n\n        this._getPaymentsClient().prefetchPaymentData(paymentDataRequest);\n    }\n\n    private async _determineReadinessToPay(): Promise<void> {\n        try {\n            const { result } = await this._getPaymentsClient().isReadyToPay(\n                this._getIsReadyToPayRequest(),\n            );\n\n            if (result === false) {\n                throw new PaymentMethodFailedError(\n                    'Google Pay is not supported by the current device and browser, please try another payment method.',\n                );\n            }\n        } catch (error) {\n            if (error instanceof PaymentMethodFailedError) {\n                throw error;\n            }\n\n            throw new PaymentMethodFailedError();\n        }\n    }\n\n    private _buildButtonPayloads() {\n        this._baseCardPaymentMethod = {\n            type: 'CARD',\n            parameters: this._gateway.getCardParameters(),\n        };\n    }\n\n    private async _buildWidgetPayloads(): Promise<void> {\n        const baseCardPaymentMethod = this._getBaseCardPaymentMethod();\n\n        this._cardPaymentMethod = {\n            ...baseCardPaymentMethod,\n            tokenizationSpecification: {\n                type: 'PAYMENT_GATEWAY',\n                parameters: await this._gateway.getPaymentGatewayParameters(),\n            },\n        };\n        this._paymentDataRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [this._cardPaymentMethod],\n            transactionInfo: this._gateway.getTransactionInfo(),\n            merchantInfo: this._gateway.getMerchantInfo(),\n            ...(await this._gateway.getRequiredData()),\n            callbackIntents: this._gateway.getCallbackIntents(),\n            offerInfo: this._gateway.getAppliedCoupons(),\n        };\n        this._isReadyToPayRequest = {\n            ...this._baseRequest,\n            allowedPaymentMethods: [baseCardPaymentMethod],\n        };\n    }\n\n    private _getBaseCardPaymentMethod(): GooglePayBaseCardPaymentMethod {\n        return this._getOrThrow(this._baseCardPaymentMethod);\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequest {\n        return this._getOrThrow(this._paymentDataRequest);\n    }\n\n    private _getIsReadyToPayRequest(): GooglePayIsReadyToPayRequest {\n        return this._getOrThrow(this._isReadyToPayRequest);\n    }\n\n    private _getPaymentsClient(): GooglePaymentsClient {\n        return this._getOrThrow(this._paymentsClient);\n    }\n\n    private _getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import GooglePayGateway from '../gateways/google-pay-gateway';\nimport { GooglePayAdditionalActionProcessable } from '../types';\n\nexport default function isGooglePayAdditionalActionProcessable(\n    gateway: GooglePayGateway,\n): gateway is GooglePayGateway & GooglePayAdditionalActionProcessable {\n    return 'processAdditionalAction' in gateway;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayHostWindow, GooglePaymentsClient, GooglePayPaymentOptions } from './types';\n\nexport const GOOGLE_PAY_LIBRARY = 'https://pay.google.com/gp/p/js/pay.js';\n\nexport default class GooglePayScriptLoader {\n    private _paymentsClient?: GooglePaymentsClient;\n    private _window: GooglePayHostWindow = window;\n\n    constructor(private _scriptLoader: ScriptLoader) {}\n\n    async getGooglePaymentsClient(\n        testMode = false,\n        options?: GooglePayPaymentOptions,\n    ): Promise<GooglePaymentsClient> {\n        await this._scriptLoader.loadScript(GOOGLE_PAY_LIBRARY);\n\n        if (!this._window.google) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        if (this._paymentsClient === undefined) {\n            this._paymentsClient = new this._window.google.payments.api.PaymentsClient({\n                environment: testMode ? 'TEST' : 'PRODUCTION',\n                ...(options ?? {}),\n            });\n        }\n\n        return this._paymentsClient;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport GooglePayScriptLoader from '../google-pay-script-loader';\n\nexport default function createGooglePayScriptLoader() {\n    return new GooglePayScriptLoader(getScriptLoader());\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreeButtonStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PayPalCommerceHostWindow,\n    PayPalCommerceInitializationData,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './paypal-commerce-types';\n\nexport default class PayPalCommerceSdk {\n    private window: PayPalCommerceHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: [\n                    'fastlane',\n                    'buttons',\n                    'payment-fields',\n                    'hosted-fields',\n                    'three-domain-secure',\n                ],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = enabledAlternativePaymentMethods;\n        const disableAPMsFunding = availableAlternativePaymentMethods.filter(\n            (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<PayPalCommerceInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nfunction isGooglePayPaypalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (data.initializationData) {\n        return (\n            'attributionId' in data.initializationData &&\n            'isVenmoEnabled' in data.initializationData &&\n            'isGooglePayEnabled' in data.initializationData &&\n            'isPayPalCreditAvailable' in data.initializationData\n        );\n    }\n\n    return false;\n}\n\nexport default function assertsIsGooglePayPayPalCommercePaymentMethod(\n    data: PaymentMethod<GooglePayInitializationData>,\n): asserts data is PaymentMethod<GooglePayPayPalCommerceInitializationData> {\n    if (!isGooglePayPaypalCommercePaymentMethod(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport { GooglePayConfig } from './types';\n\nexport default class GooglePayPaypalCommerceGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalCommerceSdk: PayPalCommerceSdk) {\n        super('paypalsb', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceButtonStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    BigCommercePaymentsInitializationData, FundingType,\n    PayPalFastlaneSdk,\n    PayPalGooglePaySdk,\n    PayPalHostWindow,\n    PayPalMessagesSdk,\n    PayPalSdkConfig,\n} from './bigcommerce-payments-types';\n\nexport default class PayPalSdkHelper {\n    private window: PayPalHostWindow;\n\n    constructor(private scriptLoader: ScriptLoader) {\n        this.window = window;\n    }\n\n    async getPayPalFastlaneSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): Promise<PayPalFastlaneSdk> {\n        if (!this.window.paypalFastlaneSdk) {\n            const config = this.getPayPalFastlaneSdkConfiguration(\n                paymentMethod,\n                currencyCode,\n                sessionId,\n            );\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalFastlaneSdk) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalFastlaneSdk;\n    }\n\n    async getPayPalGooglePaySdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage?: boolean,\n        forceLoad?: boolean,\n    ): Promise<PayPalGooglePaySdk> {\n        if (!this.window.paypalGooglePay || forceLoad) {\n            const paypalSdkScriptConfig = this.getPayPalGooglePaySdkScriptConfigOrThrow(\n                paymentMethod,\n                currencyCode,\n                initializesOnCheckoutPage,\n            );\n\n            await this.loadPayPalSdk(paypalSdkScriptConfig);\n        }\n\n        if (!this.window.paypalGooglePay) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalGooglePay;\n    }\n\n    async getPayPalApmsSdk(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ) {\n        if (!this.window.paypalApms) {\n            const config = this.getPayPalApmSdkConfiguration(paymentMethod, currencyCode);\n\n            await this.loadPayPalSdk(config);\n\n            if (!this.window.paypalApms) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n        }\n\n        return this.window.paypalApms;\n    }\n\n    async getPayPalMessages(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): Promise<PayPalMessagesSdk> {\n        if (!this.window.paypalMessages) {\n            const paypalSdkMessagesConfig = this.getPayPalSdkMessagesConfiguration(\n                paymentMethod,\n                currencyCode,\n            );\n\n            await this.loadPayPalSdk(paypalSdkMessagesConfig);\n        }\n\n        if (!this.window.paypalMessages) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.window.paypalMessages;\n    }\n\n    /**\n     *\n     *  loadPayPalSdk is a paypal sdk script loader\n     *  which loads paypal sdk based on provided configuration\n     *\n     */\n    private async loadPayPalSdk({ options, attributes }: PayPalSdkConfig): Promise<void> {\n        const scriptOptions = this.transformConfig<PayPalSdkConfig['options']>(options);\n        const scriptAttributes = this.transformConfig<PayPalSdkConfig['attributes']>(attributes);\n\n        const paypalSdkUrl = 'https://www.paypal.com/sdk/js';\n        const scriptQuery = new URLSearchParams(scriptOptions).toString();\n        const scriptSrc = `${paypalSdkUrl}?${scriptQuery}`;\n\n        await this.scriptLoader.loadScript(scriptSrc, {\n            async: true,\n            attributes: scriptAttributes,\n        });\n    }\n\n    /**\n     *\n     * Configurations section\n     *\n     */\n    private getPayPalFastlaneSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        sessionId: string,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { intent, clientId, merchantId, attributionId } = initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit: true,\n                components: ['fastlane', 'three-domain-secure'],\n                currency: currencyCode,\n                intent,\n            },\n            attributes: {\n                'data-client-metadata-id': sessionId.replace(/-/g, ''),\n                'data-namespace': 'paypalFastlaneSdk',\n                'data-partner-attribution-id': attributionId,\n                'data-sdk-client-token': clientToken,\n            },\n        };\n    }\n\n    private getPayPalGooglePaySdkScriptConfigOrThrow(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n        initializesOnCheckoutPage = true,\n    ): PayPalSdkConfig {\n        const { clientToken, initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isHostedCheckoutEnabled,\n            isDeveloperModeApplicable,\n        } = initializationData;\n\n        const commit = isHostedCheckoutEnabled || initializesOnCheckoutPage;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                commit,\n                components: ['googlepay'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-client-token': clientToken,\n                'data-namespace': 'paypalGooglePay',\n            },\n        };\n    }\n\n    private getPayPalApmSdkConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            intent,\n            clientId,\n            merchantId,\n            buyerCountry,\n            attributionId,\n            isDeveloperModeApplicable,\n            availableAlternativePaymentMethods = [],\n            enabledAlternativePaymentMethods = [],\n        } = initializationData;\n\n        const enableAPMsFunding = this.filterFundingOptions(enabledAlternativePaymentMethods);\n        const disableAPMsFunding = this.filterFundingOptions(\n            availableAlternativePaymentMethods.filter(\n                (apm: string) => !enabledAlternativePaymentMethods.includes(apm),\n            ),\n        );\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                'enable-funding': enableAPMsFunding.length > 0 ? enableAPMsFunding : undefined,\n                'disable-funding': disableAPMsFunding.length > 0 ? disableAPMsFunding : undefined,\n                commit: true,\n                components: ['buttons', 'payment-fields'],\n                currency: currencyCode,\n                intent,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-partner-attribution-id': attributionId,\n                'data-namespace': 'paypalApms',\n            },\n        };\n    }\n\n    private getPayPalSdkMessagesConfiguration(\n        paymentMethod: PaymentMethod<BigCommercePaymentsInitializationData>,\n        currencyCode: string,\n    ): PayPalSdkConfig {\n        const { initializationData } = paymentMethod;\n\n        if (!initializationData || !initializationData.clientId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { clientId, merchantId, attributionId, isDeveloperModeApplicable, buyerCountry } =\n            initializationData;\n\n        return {\n            options: {\n                'client-id': clientId,\n                'merchant-id': merchantId,\n                components: ['messages'],\n                currency: currencyCode,\n                ...(isDeveloperModeApplicable && { 'buyer-country': buyerCountry }),\n            },\n            attributes: {\n                'data-namespace': 'paypalMessages',\n                'data-partner-attribution-id': attributionId,\n            },\n        };\n    }\n\n    /**\n     *\n     * Utils methods\n     *\n     */\n    private filterFundingOptions(fundingOptions: FundingType[] | undefined): FundingType[] {\n        const fundingTypesToBeFiltered = ['klarna'];\n\n        if (!fundingOptions) {\n            return [];\n        }\n\n        return fundingOptions.filter(\n            (fundingOption: FundingType) => !fundingTypesToBeFiltered.includes(fundingOption),\n        );\n    }\n\n    private transformConfig<T extends Record<string, unknown>>(config: T): Record<string, string> {\n        let transformedConfig = {};\n\n        const keys = Object.keys(config) as Array<keyof T>;\n\n        keys.forEach((key) => {\n            const value = config[key];\n\n            if (\n                value === undefined ||\n                value === null ||\n                value === '' ||\n                (Array.isArray(value) && value.length === 0)\n            ) {\n                return;\n            }\n\n            transformedConfig = {\n                ...transformedConfig,\n                [key]: Array.isArray(value) ? value.join(',') : value,\n            };\n        });\n\n        return transformedConfig;\n    }\n}\n","import {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayPayPalCommercePaymentMethod from '../guards/is-google-pay-paypal-commerce-payment-method';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayConfig,\n    GooglePayPayPalCommerceGatewayParameters,\n    GooglePayPayPalCommerceInitializationData,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nexport default class GooglePayBigCommercePaymentsGateway extends GooglePayGateway {\n    private googlepayConfig?: GooglePayConfig;\n    private service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private payPalSdkHelper: PayPalSdkHelper) {\n        super('googlepay_bigcommerce_payments', service);\n\n        this.service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayPayPalCommerceInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        const currency = this.service.getState().getStoreConfig()?.currency.code ?? currencyCode;\n\n        if (!currency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currency);\n\n        const paymentMethod = super.getPaymentMethod();\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        assertsIsGooglePayPayPalCommercePaymentMethod(paymentMethod);\n\n        const googlePaySdk = await this.payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currency,\n        );\n\n        this.googlepayConfig = await googlePaySdk.Googlepay().config();\n\n        const { allowedPaymentMethods } = this.googlepayConfig;\n\n        this.setGatewayIdentifier(\n            allowedPaymentMethods[0]?.tokenizationSpecification?.parameters?.gateway,\n        );\n    }\n\n    getPaymentGatewayParameters(): GooglePayPayPalCommerceGatewayParameters {\n        if (this.googlepayConfig) {\n            const { allowedPaymentMethods } = this.googlepayConfig;\n            const { gatewayMerchantId } =\n                allowedPaymentMethods[0].tokenizationSpecification.parameters;\n\n            return {\n                gateway: this.getGatewayIdentifier(),\n                gatewayMerchantId,\n            };\n        }\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n        };\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsButtonStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2ButtonStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3ButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3ButtonStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertsIsGooglePayAuthorizeNetInitializationData from '../guards/is-google-pay-authorizenet-initialization-data';\nimport {\n    GooglePayCardDataResponse,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAuthorizeNetGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('authorizenet', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayAuthorizeNetInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.paymentGatewayId,\n        };\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayAuthorizeNetInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayAuthorizeNetInitializationData {\n    return 'paymentGatewayId' in data;\n}\n\nexport default function assertsIsGooglePayAuthorizeNetInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayAuthorizeNetInitializationData {\n    if (!isGooglePayAuthorizeNetInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetButtonStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCheckoutComInitializationData, GooglePayInitializationData } from '../types';\n\nfunction isGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayCheckoutComInitializationData {\n    return 'checkoutcomkey' in data;\n}\n\nexport default function assertIsGooglePayCheckoutComInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayCheckoutComInitializationData {\n    if (!isGooglePayCheckoutComInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    InvalidArgumentError,\n    isRequestError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport assertIsGooglePayCheckoutComInitializationData from '../guards/is-google-pay-checkoutcom-initialization-data';\nimport { isGooglePayThreeDSecureResult } from '../guards/is-google-pay-threedsecure-result';\nimport assertIsGooglePayTokenObject from '../guards/is-google-pay-token-object';\nimport {\n    GooglePayAdditionalActionProcessable,\n    GooglePayCardDataResponse,\n    GooglePayCheckoutComTokenObject,\n    GooglePayGatewayParameters,\n    GooglePaySetExternalCheckoutData,\n    GooglePayTokenObject,\n} from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCheckoutComGateway\n    extends GooglePayGateway\n    implements GooglePayAdditionalActionProcessable\n{\n    constructor(service: PaymentIntegrationService, private _requestSender: RequestSender) {\n        super('checkoutltd', service);\n    }\n\n    processAdditionalAction(error: unknown): Promise<void> {\n        return new Promise((_resolve, reject) => {\n            if (\n                isRequestError(error) &&\n                isGooglePayThreeDSecureResult(error.body) &&\n                error.body.three_ds_result.code === 'three_d_secure_required'\n            ) {\n                return window.location.assign(error.body.three_ds_result.acs_url);\n            }\n\n            reject(error);\n        });\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayTokenObject(token);\n\n        data.nonce = await this._tokenize(token);\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            gatewayMerchantId: data.checkoutcomkey,\n        };\n    }\n\n    private async _tokenize(token_data: GooglePayTokenObject): Promise<string> {\n        const url = this.getPaymentMethod().config.testMode\n            ? 'https://api.sandbox.checkout.com/tokens'\n            : 'https://api.checkout.com/tokens';\n        const data = this.getGooglePayInitializationData();\n\n        assertIsGooglePayCheckoutComInitializationData(data);\n\n        const { body } = await this._requestSender.post<GooglePayCheckoutComTokenObject>(url, {\n            credentials: false,\n            body: {\n                type: 'googlepay',\n                token_data,\n            },\n            headers: {\n                Authorization: data.checkoutcomkey,\n                'Content-Type': ContentType.Json,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return body.token;\n    }\n}\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayThreeDSecureResult } from '../types';\n\nexport function isGooglePayThreeDSecureResult(\n    body: RequestError['body'],\n): body is GooglePayThreeDSecureResult {\n    if (typeof body !== 'object' || body === null) {\n        return false;\n    }\n\n    const threeDSBody = body as Partial<GooglePayThreeDSecureResult>;\n\n    return (\n        typeof threeDSBody.three_ds_result?.acs_url === 'string' &&\n        typeof threeDSBody.three_ds_result.code === 'string'\n    );\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayTokenObject } from '../types';\n\nfunction isGooglePayTokenObject(token: unknown): token is GooglePayTokenObject {\n    return (\n        typeof token === 'object' &&\n        token !== null &&\n        'protocolVersion' in token &&\n        'signature' in token &&\n        'signedMessage' in token\n    );\n}\n\nexport default function assertIsGooglePayTokenObject(\n    token: unknown,\n): asserts token is GooglePayTokenObject {\n    if (!isGooglePayTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComButtonStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayCybersourceGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('cybersource', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourceButtonStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayOrbitalGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('chase', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalButtonStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData, GooglePayStripeInitializationData } from '../types';\n\nfunction isGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): data is GooglePayStripeInitializationData {\n    return (\n        'stripeConnectedAccount' in data &&\n        'stripePublishableKey' in data &&\n        'stripeVersion' in data\n    );\n}\n\nexport default function assertsIsGooglePayStripeInitializationData(\n    data: GooglePayInitializationData,\n): asserts data is GooglePayStripeInitializationData {\n    if (!isGooglePayStripeInitializationData(data)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n    }\n}\n","import { includes, some } from 'lodash';\n\nimport {\n    InvalidArgumentError,\n    isRequestError,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    RequestError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../gateways/google-pay-gateway';\nimport assertsIsGooglePayStripeInitializationData from '../guards/is-google-pay-stripe-initialization-data';\nimport isGooglePayStripeRequestError from '../guards/is-google-pay-stripe-request-error';\nimport assertIsGooglePayStripeTokenObject from '../guards/is-google-pay-stripe-token-object';\nimport {\n    GooglePayCardDataResponse,\n    GooglePaySetExternalCheckoutData,\n    GooglePayStripeGatewayParameters,\n} from '../types';\n\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\nimport { StripeError, StripeUPEClient } from './types';\n\nexport default class GooglePayStripeGateway extends GooglePayGateway {\n    private stripeUPEClient?: StripeUPEClient;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private scriptLoader: StripeUPEScriptLoader,\n    ) {\n        super('stripe', paymentIntegrationService);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        let token: unknown;\n\n        try {\n            token = JSON.parse(data.nonce);\n        } catch (error) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        assertIsGooglePayStripeTokenObject(token);\n\n        data.nonce = token.id;\n\n        return data;\n    }\n\n    getPaymentGatewayParameters(): GooglePayStripeGatewayParameters {\n        const data = this.getGooglePayInitializationData();\n\n        assertsIsGooglePayStripeInitializationData(data);\n\n        const { stripeVersion, stripePublishableKey, stripeConnectedAccount } = data;\n\n        return {\n            gateway: this.getGatewayIdentifier(),\n            'stripe:version': stripeVersion,\n            'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n        };\n    }\n\n    async processAdditionalAction(\n        error: unknown,\n        methodId?: string,\n    ): Promise<PaymentIntegrationSelectors | never> {\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!isRequestError(error) || !isGooglePayStripeRequestError(error.body)) {\n            throw error;\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const isStripeGooglePay3dsExperimentIsOn =\n            state.getStoreConfig()?.checkoutSettings.features[\n                'STRIPE-476.enable_stripe_googlepay_3ds'\n            ];\n        const shouldTrigger3DS =\n            some(error.body.errors, { code: 'three_d_secure_required' }) &&\n            isStripeGooglePay3dsExperimentIsOn;\n\n        if (shouldTrigger3DS) {\n            const data = this.getGooglePayInitializationData();\n\n            assertsIsGooglePayStripeInitializationData(data);\n\n            const { stripePublishableKey, stripeConnectedAccount } = data;\n\n            this.stripeUPEClient = await this.loadStripeJs(\n                stripePublishableKey,\n                stripeConnectedAccount,\n            );\n\n            const clientSecret = error.body.three_ds_result.token;\n            let result;\n            let catchedConfirmError = false;\n\n            try {\n                result = await this.stripeUPEClient.confirmCardPayment(clientSecret);\n            } catch (_) {\n                try {\n                    result = await this.stripeUPEClient.retrievePaymentIntent(clientSecret);\n                } catch (__) {\n                    catchedConfirmError = true;\n                }\n            }\n\n            if (result?.error) {\n                this._throwDisplayableStripeError(result.error);\n\n                if (this._isCancellationError(result.error)) {\n                    throw new PaymentMethodCancelledError();\n                }\n\n                throw new PaymentMethodFailedError();\n            }\n\n            if (!result?.paymentIntent && !catchedConfirmError) {\n                throw new RequestError();\n            }\n\n            return this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce: result?.paymentIntent?.id || clientSecret },\n            });\n        }\n\n        throw error;\n    }\n\n    private async loadStripeJs(\n        stripePublishableKey: string,\n        stripeConnectedAccount: string,\n    ): Promise<StripeUPEClient> {\n        if (this.stripeUPEClient) {\n            return this.stripeUPEClient;\n        }\n\n        return this.scriptLoader.getStripeClient(stripePublishableKey, stripeConnectedAccount);\n    }\n\n    private _isCancellationError(stripeError: StripeError | undefined) {\n        return (\n            stripeError &&\n            stripeError.payment_intent.last_payment_error?.message?.indexOf('canceled') !== -1\n        );\n    }\n\n    private _throwDisplayableStripeError(stripeError: StripeError) {\n        if (\n            includes(['card_error', 'invalid_request_error', 'validation_error'], stripeError.type)\n        ) {\n            throw new Error(stripeError.message);\n        }\n    }\n}\n","import {\n    MissingDataError,\n    MissingDataErrorType,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayStripeTokenObject } from '../types';\n\nfunction isGooglePayStripeTokenObject(token: unknown): token is GooglePayStripeTokenObject {\n    return typeof token === 'object' && token !== null && 'id' in token;\n}\n\nexport default function assertIsGooglePayStripeTokenObject(\n    token: unknown,\n): asserts token is GooglePayStripeTokenObject {\n    if (!isGooglePayStripeTokenObject(token)) {\n        throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n    }\n}\n","interface AdditionalActionError {\n    three_ds_result: { token: string };\n    errors: Array<{ code: string }>;\n}\n\nconst isGooglePayStripeRequestError = (body: unknown): body is AdditionalActionError => {\n    return (\n        typeof body === 'object' && body !== null && 'three_ds_result' in body && 'errors' in body\n    );\n};\n\nexport default isGooglePayStripeRequestError;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { StripeHostWindow, StripeUPEClient } from './types';\n\nexport default class StripeUPEScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private stripeWindow: StripeHostWindow = window,\n    ) {}\n\n    async getStripeClient(\n        stripePublishableKey: string,\n        stripeAccount: string,\n        locale?: string,\n    ): Promise<StripeUPEClient> {\n        let stripeClient = this.stripeWindow.bcStripeClient;\n\n        if (!stripeClient) {\n            const stripe = await this.load();\n\n            stripeClient = stripe(stripePublishableKey, {\n                stripeAccount,\n                locale,\n                betas: [\n                    'payment_element_beta_2',\n                    'alipay_pm_beta_1',\n                    'link_default_integration_beta_1',\n                    'shipping_address_element_beta_1',\n                    'address_element_beta_1',\n                ],\n                apiVersion: '2020-03-02;alipay_beta=v1;link_beta=v1',\n            });\n\n            Object.assign(this.stripeWindow, { bcStripeClient: stripeClient });\n        }\n\n        return stripeClient;\n    }\n\n    private async load() {\n        if (!this.stripeWindow.Stripe) {\n            await this.scriptLoader.loadScript('https://js.stripe.com/v3/');\n        }\n\n        if (!this.stripeWindow.Stripe) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.stripeWindow.Stripe;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayButtonStrategy from '../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripeButtonStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayCardDataResponse, GooglePaySetExternalCheckoutData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayWorldpayAccessGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService) {\n        super('worldpay', service);\n    }\n\n    async mapToExternalCheckoutData(\n        response: GooglePayCardDataResponse,\n    ): Promise<GooglePaySetExternalCheckoutData> {\n        const data = await super.mapToExternalCheckoutData(response);\n\n        data.nonce = btoa(data.nonce);\n\n        return data;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessButtonStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { isTdOnlineMartAdditionalAction } from '../guards/is-google-pay-td-online-mart-additional-action';\nimport { ExtraPaymentData, TdOnlineMartThreeDSErrorBody } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayTdOnlineMartGateway extends GooglePayGateway {\n    constructor(service: PaymentIntegrationService, private formPoster: FormPoster) {\n        super('worldlinena', service);\n    }\n\n    async extraPaymentData(): Promise<ExtraPaymentData> {\n        return Promise.resolve({ browser_info: getBrowserInfo() });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from '../types';\n\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayButtonStrategy from '../../google-pay-button-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartButtonStrategy: CheckoutButtonStrategyFactory<\n    GooglePayButtonStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayButtonStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartButtonStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import { AdyenAdditionalActionErrorResponse } from '../types';\n\nexport default function isAdditionalActionRequiredErrorResponse(\n    param: unknown,\n): param is AdyenAdditionalActionErrorResponse {\n    return (\n        typeof param === 'object' &&\n        param !== null &&\n        'errors' in (param as AdyenAdditionalActionErrorResponse) &&\n        Array.isArray((param as AdyenAdditionalActionErrorResponse).errors) &&\n        'code' in (param as AdyenAdditionalActionErrorResponse).errors[0] &&\n        typeof (param as AdyenAdditionalActionErrorResponse).errors[0].code === 'string' &&\n        'provider_data' in param &&\n        typeof (param as AdyenAdditionalActionErrorResponse).provider_data === 'object'\n    );\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV2ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV2 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV2ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    LoadingIndicatorContainerStyles,\n    LoadingIndicatorStyles,\n} from './loading-indicator-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nexport const DEFAULT_CONTAINER_STYLES = {\n    position: 'fixed',\n    'background-color': 'rgba(0, 0, 0, 0.4)',\n    'z-index': '1000',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\ninterface LoadingIndicatorOptions {\n    styles?: LoadingIndicatorStyles;\n    containerStyles?: LoadingIndicatorContainerStyles;\n}\n\nexport default class LoadingIndicator {\n    private container: HTMLElement;\n    private indicator: HTMLElement;\n    private styles: LoadingIndicatorStyles;\n    private containerStyles: LoadingIndicatorContainerStyles;\n\n    constructor(options?: LoadingIndicatorOptions) {\n        this.styles = { ...DEFAULT_STYLES, ...(options && options.styles) };\n        this.containerStyles = { ...(options && options.containerStyles) };\n\n        this.defineAnimation();\n\n        this.container = this.buildContainer();\n        this.indicator = this.buildIndicator();\n\n        this.container.appendChild(this.indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error(\n                    'Unable to attach the loading indicator because the parent ID is not valid.',\n                );\n            }\n\n            parent.appendChild(this.container);\n        }\n\n        this.container.style.visibility = 'visible';\n        this.container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this.container.style.visibility = 'hidden';\n\n            this.container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this.container.addEventListener('transitionend', handleTransitionEnd);\n\n        this.container.style.opacity = '0';\n    }\n\n    private buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        this.setStyleAttribute(container, this.containerStyles);\n\n        return container;\n    }\n\n    private buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this.styles.size}px`;\n        indicator.style.height = `${this.styles.size}px`;\n        indicator.style.borderRadius = `${this.styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private setStyleAttribute(element: HTMLElement, attrs: { [key: string]: string }): void {\n        Object.keys(attrs).forEach((k) => {\n            element.style.setProperty(k, attrs[k]);\n        });\n    }\n\n    private defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        document.head?.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(\n                `\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `,\n                0,\n            );\n        }\n    }\n}\n","import { round } from 'lodash';\n\nimport {\n    guard,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Omit,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { DEFAULT_CONTAINER_STYLES, LoadingIndicator } from '@bigcommerce/checkout-sdk/ui';\n\nimport GooglePayPaymentInitializeOptions, {\n    WithGooglePayPaymentInitializeOptions,\n} from './google-pay-payment-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    CallbackTriggerType,\n    ErrorReasonType,\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    HandleCouponsOut,\n    IntermediatePaymentData,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _loadingIndicator: LoadingIndicator;\n    private _loadingIndicatorContainer?: string;\n    private _paymentButton?: HTMLElement;\n    private _clickListener?: (event: MouseEvent) => unknown;\n    private _methodId?: keyof WithGooglePayPaymentInitializeOptions;\n\n    constructor(\n        protected _paymentIntegrationService: PaymentIntegrationService,\n        protected _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {\n        this._loadingIndicator = new LoadingIndicator({\n            containerStyles: DEFAULT_CONTAINER_STYLES,\n        });\n    }\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithGooglePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions?.walletButton) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        const { walletButton, loadingContainerId, ...callbacks } = googlePayOptions;\n\n        this._loadingIndicatorContainer = loadingContainerId;\n\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<GooglePayInitializationData>(this._getMethodId());\n\n        await this._googlePayPaymentProcessor.initialize(\n            () => paymentMethod,\n            this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n        );\n\n        this._addPaymentButton(walletButton, callbacks);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        await this._paymentIntegrationService.submitOrder();\n\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n        const extraData = await this._googlePayPaymentProcessor.extraPaymentData();\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: { nonce, ...extraData },\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error, payment.methodId);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._clickListener) {\n            this._paymentButton?.removeEventListener('click', this._clickListener);\n        }\n\n        this._paymentButton = undefined;\n        this._clickListener = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected _addPaymentButton(\n        walletButton: string,\n        callbacks: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>,\n    ): void {\n        if (this._paymentButton) {\n            return;\n        }\n\n        const paymentButton = document.getElementById(walletButton);\n\n        if (!paymentButton) {\n            throw new InvalidArgumentError('Unable to proceed without a walletButton.');\n        }\n\n        this._paymentButton = paymentButton;\n        this._clickListener = this._handleClick(callbacks);\n\n        this._paymentButton.addEventListener('click', this._clickListener);\n    }\n\n    protected _handleClick({\n        onPaymentSelect,\n        onError,\n    }: Omit<GooglePayPaymentInitializeOptions, 'walletButton'>): (event: MouseEvent) => unknown {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                this._toggleLoadingIndicator(false);\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n\n            onPaymentSelect?.();\n        };\n    }\n\n    protected async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n\n        this._toggleLoadingIndicator(true);\n\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(), response);\n\n        await this._paymentIntegrationService.loadCheckout();\n        await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n        this._toggleLoadingIndicator(false);\n    }\n\n    protected _getMethodId(): keyof WithGooglePayPaymentInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    protected async _getIsSignedInOrThrow(): Promise<boolean> {\n        try {\n            return !!(await this._googlePayPaymentProcessor.getNonce(this._getMethodId()));\n        } catch (e) {\n            if (\n                e instanceof MissingDataError &&\n                e.subtype === MissingDataErrorType.MissingPaymentToken\n            ) {\n                return false;\n            }\n\n            throw e;\n        }\n    }\n\n    protected async _handleOfferTrigger(\n        offerData: IntermediatePaymentData['offerData'],\n    ): Promise<Partial<HandleCouponsOut>> {\n        let isSignedIn = false;\n        let errorMessage = 'Sign in to Google Pay first to apply or remove promo codes.';\n\n        try {\n            isSignedIn = await this._getIsSignedInOrThrow();\n        } catch (error) {\n            if (error instanceof MissingDataError) {\n                errorMessage = error.message;\n            }\n        }\n\n        // We can only apply/remove coupons on the payment step only if we are logged into Google Pay, otherwise we will get an error\n        if (isSignedIn) {\n            const { newOfferInfo, error } = await this._googlePayPaymentProcessor.handleCoupons(\n                offerData,\n            );\n\n            return {\n                newOfferInfo,\n                error,\n            };\n        }\n\n        return {\n            error: {\n                reason: ErrorReasonType.OFFER_INVALID,\n                message: errorMessage,\n                intent: CallbackTriggerType.OFFER,\n            },\n        };\n    }\n\n    protected _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({ callbackTrigger, offerData }) => {\n                    const state = this._paymentIntegrationService.getState();\n                    // TODO remove this experiment usage after we make sure that coupons handling works fine\n                    const isGooglePayCouponsExperimentOn =\n                        state.getStoreConfigOrThrow().checkoutSettings.features[\n                            'PI-2875.googlepay_coupons_handling'\n                        ] || false;\n\n                    if (\n                        callbackTrigger !== CallbackTriggerType.INITIALIZE &&\n                        (!isGooglePayCouponsExperimentOn ||\n                            callbackTrigger !== CallbackTriggerType.OFFER)\n                    ) {\n                        return;\n                    }\n\n                    const { offerChangeTriggers } =\n                        this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._handleOfferTrigger(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const { getCheckoutOrThrow, getCartOrThrow } =\n                        this._paymentIntegrationService.getState();\n                    const { code: currencyCode, decimalPlaces } = getCartOrThrow().currency;\n                    const totalPrice = round(\n                        getCheckoutOrThrow().outstandingBalance,\n                        decimalPlaces,\n                    ).toFixed(decimalPlaces);\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _toggleLoadingIndicator(isLoading: boolean): void {\n        if (isLoading && this._loadingIndicatorContainer) {\n            this._loadingIndicator.show(this._loadingIndicatorContainer);\n        } else {\n            this._loadingIndicator.hide();\n        }\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV2Gateway from '../../gateways/google-pay-adyenv2-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV2Gateway(\n                paymentIntegrationService,\n                new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV2PaymentStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenError,\n    AdyenV3ScriptLoader,\n    isAdditionalActionRequiredErrorResponse,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    getBrowserInfo,\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Payment,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { GooglePayInitializationData } from '../types';\n\nimport GooglePayGateway from './google-pay-gateway';\n\nexport default class GooglePayAdyenV3 extends GooglePayGateway {\n    private _adyenClient?: AdyenClient;\n    private _service: PaymentIntegrationService;\n\n    constructor(service: PaymentIntegrationService, private _scriptLoader: AdyenV3ScriptLoader) {\n        super('adyen', service);\n\n        this._service = service;\n    }\n\n    async initialize(\n        getPaymentMethod: () => PaymentMethod<GooglePayInitializationData>,\n        isBuyNowFlow?: boolean,\n        currencyCode?: string,\n    ): Promise<void> {\n        await super.initialize(getPaymentMethod, isBuyNowFlow, currencyCode);\n\n        const paymentMethod = super.getPaymentMethod();\n        const state = this._service.getState();\n        const storeConfig = state.getStoreConfig();\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment: paymentMethod.config.testMode ? 'test' : 'live',\n            locale: storeConfig.storeProfile.storeLanguage,\n        });\n\n        return Promise.resolve();\n    }\n\n    async processAdditionalAction(error: unknown): Promise<PaymentIntegrationSelectors | void> {\n        if (!isRequestError(error) || !isAdditionalActionRequiredErrorResponse(error.body)) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            return await this._service.submitPayment(payment);\n        } catch (e) {\n            return this.processAdditionalAction(e);\n        }\n    }\n\n    async getNonce(methodId: string) {\n        const nonce = await super.getNonce(methodId);\n        const paymentMethod = super.getPaymentMethod();\n\n        return JSON.stringify({\n            type: paymentMethod.method,\n            googlePayToken: nonce,\n            browser_info: getBrowserInfo(),\n        });\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    resolve(paymentPayload);\n                },\n                size: '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            additionalActionComponent.mount('body');\n\n            reject(new PaymentMethodCancelledError());\n        });\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAdyenV3Gateway from '../../gateways/google-pay-adyenv3-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3PaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAdyenV3Gateway(\n                paymentIntegrationService,\n                new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAdyenV3PaymentStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeNetPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayAuthorizeNetPaymentStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComPaymentStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourcePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayCybersourcePaymentStrategy, [\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepaybnz' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalPaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayOrbitalPaymentStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayStripePaymentStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayWorldpayAccessPaymentStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: PaymentStrategyFactory<GooglePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","export type FundingType = string[];\nexport type EnableFundingType = FundingType | string;\n\n/**\n *\n * PayPal Commerce SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface PayPalCommerceHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface PayPalCommerceScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType;\n        'enable-funding'?: EnableFundingType;\n        currency?: string;\n        commit?: boolean;\n        intent?: PayPalCommerceIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum PayPalCommerceIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface GooglePayConfig {\n    allowedPaymentMethods: AllowedPaymentMethods[];\n    apiVersion: number;\n    apiVersionMinor: number;\n    countryCode: string;\n    isEligible: boolean;\n    merchantInfo: {\n        merchantId: string;\n        merchantOrigin: string;\n    };\n}\n\nexport interface AllowedPaymentMethods {\n    type: string;\n    parameters: {\n        allowedAuthMethods: string[];\n        allowedCardNetworks: string[];\n        billingAddressRequired: boolean;\n        assuranceDetailsRequired: boolean;\n        billingAddressParameters: {\n            format: string;\n        };\n    };\n    tokenizationSpecification: {\n        type: string;\n        parameters: {\n            gateway: string;\n            gatewayMerchantId: string;\n        };\n    };\n}\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport { GooglePayInitializationData, GooglePayPayPalCommerceInitializationData } from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayPaypalCommercePaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalCommerceSdk: PayPalCommerceSdk,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayPayPalCommerceInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalCommerceSdk.getPayPalGooglePaySdk(\n            paymentMethod,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepaypaypalcommercecheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\nimport GooglePayPaypalCommercePaymentStrategy from './google-pay-paypal-commerce-payment-strategy';\n\nconst createGooglePayPayPalCommercePaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalCommerceSdk = new PayPalCommerceSdk(getScriptLoader());\n\n    return new GooglePayPaypalCommercePaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(paymentIntegrationService, payPalCommerceSdk),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalCommerceSdk,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommercePaymentStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { GooglePayConfig } from '../types';\n\nexport type FundingType = string;\n\n/**\n *\n * BigCommercePayments SDK\n *\n */\nexport interface PayPalSDK {\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (confirmOrderConfig: ConfirmOrderConfig) => Promise<{ status: string }>;\n        initiatePayerAction: (payerActionConfig: PayerActionConfig) => Promise<void>;\n    };\n}\n\ninterface ConfirmOrderConfig {\n    orderId: string;\n    paymentMethodData: ConfirmOrderData;\n}\n\ninterface PayerActionConfig {\n    orderId: string;\n}\n\nexport enum ConfirmOrderStatus {\n    Approved = 'APPROVED',\n    PayerActionRequired = 'PAYER_ACTION_REQUIRED',\n}\n\nexport interface BigCommercePaymentsHostWindow extends Window {\n    paypal?: PayPalSDK;\n}\n\nexport interface BigCommercePaymentsScriptParams {\n    options: {\n        'client-id'?: string;\n        'merchant-id'?: string;\n        'buyer-country'?: string;\n        'disable-funding'?: FundingType[];\n        'enable-funding'?: FundingType[];\n        currency?: string;\n        commit?: boolean;\n        intent?: BigCommercePaymentsIntent;\n        components?: ComponentsScriptType;\n    };\n    attributes: {\n        'data-client-token'?: string;\n        'data-partner-attribution-id'?: string;\n    };\n}\n\nexport enum BigCommercePaymentsIntent {\n    AUTHORIZE = 'authorize',\n    CAPTURE = 'capture',\n}\n\nexport type ComponentsScriptType = Array<\n    | 'buttons'\n    | 'funding-eligibility'\n    | 'hosted-fields'\n    | 'messages'\n    | 'payment-fields'\n    | 'legal'\n    | 'googlepay'\n    | 'card-fields'\n>;\n\nexport interface PayPalGoogleSdk {\n    version: string;\n    getCorrelationID: () => void;\n    Googlepay: () => {\n        config: () => Promise<GooglePayConfig>;\n        confirmOrder: (arg0: {\n            orderId: string;\n            paymentMethodData: ConfirmOrderData;\n        }) => Promise<{ status: string }>;\n        initiatePayerAction: () => void;\n    };\n    FUNDING: Record<string, string>;\n}\n\nexport interface ConfirmOrderData {\n    tokenizationData: {\n        type: string;\n        token: string;\n    };\n    info: {\n        cardNetwork: string;\n        cardDetails: string;\n    };\n    type: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    BigCommercePaymentsInitializationData,\n    PayPalSdkHelper,\n} from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\nimport {\n    GooglePayBigCommercePaymentsInitializationData,\n    GooglePayInitializationData,\n} from '../types';\n\nimport { ConfirmOrderData, ConfirmOrderStatus } from './types';\n\nexport default class GooglePayBigCommercePaymentsPaymentStrategy extends GooglePayPaymentStrategy {\n    constructor(\n        _paymentIntegrationService: PaymentIntegrationService,\n        _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _payPalSdkHelper: PayPalSdkHelper,\n        private _requestSender: RequestSender,\n    ) {\n        super(_paymentIntegrationService, _googlePayPaymentProcessor);\n    }\n\n    async execute({ payment }: OrderRequestBody): Promise<void> {\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const cartId = state.getCartOrThrow().id;\n        const { initializationData } = state.getPaymentMethodOrThrow<GooglePayInitializationData>(\n            this._getMethodId(),\n        );\n        const { orderId } = await this.getOrderId(cartId);\n\n        const { card_information } = initializationData || {};\n        const nonce = await this._googlePayPaymentProcessor.getNonce(payment.methodId);\n\n        const confirmOrderData = {\n            tokenizationData: {\n                type: 'PAYMENT_GATEWAY',\n                token: atob(nonce),\n            },\n            info: {\n                cardNetwork: card_information?.type || '',\n                cardDetails: card_information?.number || '',\n            },\n            type: 'CARD',\n        };\n\n        await this.confirmOrder(orderId, confirmOrderData);\n        await this._paymentIntegrationService.submitOrder();\n\n        try {\n            const paymentData = {\n                formattedPayload: {\n                    method_id: payment.methodId,\n                    paypal_account: {\n                        order_id: orderId,\n                    },\n                },\n            };\n\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData,\n            });\n        } catch (error) {\n            await this._googlePayPaymentProcessor.processAdditionalAction(error);\n        }\n    }\n\n    private async confirmOrder(orderId: string, confirmOrderData: ConfirmOrderData) {\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod =\n            state.getPaymentMethodOrThrow<GooglePayBigCommercePaymentsInitializationData>(\n                this._getMethodId(),\n            );\n\n        if (!paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const currencyCode = state.getCartOrThrow().currency.code;\n\n        const payPalSDK = await this._payPalSdkHelper.getPayPalGooglePaySdk(\n            paymentMethod as PaymentMethod<BigCommercePaymentsInitializationData>,\n            currencyCode,\n            true,\n        );\n\n        const { status } = await payPalSDK\n            .Googlepay()\n            .confirmOrder({ orderId, paymentMethodData: confirmOrderData });\n\n        if (status === ConfirmOrderStatus.PayerActionRequired) {\n            await payPalSDK.Googlepay().initiatePayerAction({ orderId });\n\n            return Promise.resolve();\n        }\n\n        if (status !== ConfirmOrderStatus.Approved) {\n            throw new InvalidArgumentError('Payment is not approved.');\n        }\n\n        return Promise.resolve();\n    }\n\n    private async getOrderId(cartId: string): Promise<{ orderId: string }> {\n        const url = '/api/storefront/payments/googlepay_bigcommerce_paymentscheckout';\n        const requestData = {\n            cartId,\n            shouldSaveInstrument: false,\n        };\n\n        const { body } = await this._requestSender.post<{ orderId: string }>(url, {\n            headers: {\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                'Content-Type': ContentType.Json,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: requestData,\n        });\n\n        return body;\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../google-pay-payment-strategy';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\nimport GooglePayBigCommercePaymentsPaymentStrategy from './google-pay-bigcommerce-payments-payment-strategy';\n\nconst createGooglePayBigCommercePaymentsPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) => {\n    const payPalSdkHelper = new PayPalSdkHelper(getScriptLoader());\n\n    return new GooglePayBigCommercePaymentsPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(paymentIntegrationService, payPalSdkHelper),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n        payPalSdkHelper,\n        createRequestSender(),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsPaymentStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport GooglePayPaymentStrategy from '../../google-pay-payment-strategy';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartPaymentStrategy: PaymentStrategyFactory<\n    GooglePayPaymentStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayPaymentStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartPaymentStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    guard,\n    InvalidArgumentError,\n    NotImplementedError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentMethodFailedError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCustomerInitializeOptions, {\n    WithGooglePayCustomerInitializeOptions,\n} from './google-pay-customer-initialize-options';\nimport GooglePayPaymentProcessor from './google-pay-payment-processor';\nimport isGooglePayErrorObject from './guards/is-google-pay-error-object';\nimport isGooglePayKey from './guards/is-google-pay-key';\nimport {\n    GooglePayError,\n    GooglePayInitializationData,\n    GooglePayPaymentOptions,\n    TotalPriceStatusType,\n} from './types';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _paymentButton?: HTMLElement;\n    private _methodId?: keyof WithGooglePayCustomerInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n    ) {}\n\n    async initialize(\n        options?: CustomerInitializeOptions & WithGooglePayCustomerInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId || !isGooglePayKey(options.methodId)) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" is not a valid key.',\n            );\n        }\n\n        this._methodId = options.methodId;\n\n        const googlePayOptions = options[this._getMethodId()];\n\n        if (!googlePayOptions) {\n            throw new InvalidArgumentError('Unable to proceed without valid options.');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        let paymentMethod: PaymentMethod<GooglePayInitializationData>;\n\n        try {\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());\n            paymentMethod = state.getPaymentMethodOrThrow(this._getMethodId());\n        }\n\n        try {\n            await this._googlePayPaymentProcessor.initialize(\n                () => paymentMethod,\n                this._getGooglePayClientOptions(paymentMethod.initializationData?.storeCountry),\n            );\n        } catch {\n            return;\n        }\n\n        this._addPaymentButton(googlePayOptions);\n    }\n\n    signIn(): Promise<void> {\n        return Promise.reject(\n            new NotImplementedError(\n                'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.',\n            ),\n        );\n    }\n\n    async signOut(): Promise<void> {\n        const providerId = this._paymentIntegrationService.getState().getPaymentId()?.providerId;\n\n        if (providerId) {\n            await this._googlePayPaymentProcessor.signOut(providerId);\n        }\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentButton?.remove();\n        this._paymentButton = undefined;\n        this._methodId = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _getGooglePayClientOptions(countryCode?: string): GooglePayPaymentOptions {\n        return {\n            paymentDataCallbacks: {\n                onPaymentDataChanged: async ({\n                    callbackTrigger,\n                    shippingAddress,\n                    shippingOptionData,\n                    offerData,\n                }) => {\n                    const {\n                        availableTriggers,\n                        addressChangeTriggers,\n                        shippingOptionsChangeTriggers,\n                        offerChangeTriggers,\n                    } = this._googlePayPaymentProcessor.getCallbackTriggers();\n\n                    if (!availableTriggers.includes(callbackTrigger)) {\n                        return;\n                    }\n\n                    const availableShippingOptions = addressChangeTriggers.includes(callbackTrigger)\n                        ? await this._googlePayPaymentProcessor.handleShippingAddressChange(\n                              shippingAddress,\n                          )\n                        : undefined;\n\n                    if (shippingOptionsChangeTriggers.includes(callbackTrigger)) {\n                        await this._googlePayPaymentProcessor.handleShippingOptionChange(\n                            shippingOptionData.id,\n                        );\n                    }\n\n                    const { newOfferInfo = undefined, error: couponsError = undefined } =\n                        offerChangeTriggers.includes(callbackTrigger)\n                            ? await this._googlePayPaymentProcessor.handleCoupons(offerData)\n                            : {};\n\n                    // We can add another errors if needed 'couponsError || shippingError || anotherError'\n                    const error: GooglePayError | undefined = couponsError;\n\n                    await this._paymentIntegrationService.loadCheckout();\n\n                    const totalPrice = this._googlePayPaymentProcessor.getTotalPrice();\n                    const { code: currencyCode } = this._paymentIntegrationService\n                        .getState()\n                        .getCartOrThrow().currency;\n\n                    return {\n                        newTransactionInfo: {\n                            ...(countryCode && { countryCode }),\n                            currencyCode,\n                            totalPriceStatus: TotalPriceStatusType.FINAL,\n                            totalPrice,\n                        },\n                        ...(availableShippingOptions && {\n                            newShippingOptionParameters: availableShippingOptions,\n                        }),\n                        ...(newOfferInfo && {\n                            newOfferInfo,\n                        }),\n                        ...(error && {\n                            error,\n                        }),\n                    };\n                },\n            },\n        };\n    }\n\n    private _addPaymentButton({\n        container,\n        buttonColor,\n        buttonType,\n        onClick,\n        onError,\n    }: GooglePayCustomerInitializeOptions): void {\n        this._paymentButton =\n            this._paymentButton ??\n            this._googlePayPaymentProcessor.addPaymentButton(container, {\n                buttonColor: buttonColor ?? 'default',\n                buttonType: buttonType ?? 'plain',\n                onClick: this._handleClick(onError, onClick),\n            });\n    }\n\n    private _handleClick(\n        onError: GooglePayCustomerInitializeOptions['onError'],\n        onClick: GooglePayCustomerInitializeOptions['onClick'],\n    ): (event: MouseEvent) => Promise<void> {\n        return async (event: MouseEvent) => {\n            event.preventDefault();\n\n            if (onClick && typeof onClick === 'function') {\n                onClick();\n            }\n\n            // TODO: Dispatch Widget Actions\n            try {\n                await this._googlePayPaymentProcessor.initializeWidget();\n                await this._interactWithPaymentSheet();\n            } catch (error) {\n                let err: unknown = error;\n\n                if (isGooglePayErrorObject(error)) {\n                    if (error.statusCode === 'CANCELED') {\n                        throw new PaymentMethodCancelledError();\n                    }\n\n                    err = new PaymentMethodFailedError(JSON.stringify(error));\n                }\n\n                onError?.(\n                    new PaymentMethodFailedError(\n                        'An error occurred while requesting your Google Pay payment details.',\n                    ),\n                );\n\n                throw err;\n            }\n        };\n    }\n\n    private async _interactWithPaymentSheet(): Promise<void> {\n        const response = await this._googlePayPaymentProcessor.showPaymentSheet();\n        const billingAddress =\n            this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(response);\n        const shippingAddress =\n            this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(response);\n\n        const siteLink =\n            window.location.pathname === '/embedded-checkout'\n                ? this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink\n                : undefined;\n\n        if (billingAddress) {\n            await this._paymentIntegrationService.updateBillingAddress(billingAddress);\n        }\n\n        if (shippingAddress) {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        }\n\n        await this._googlePayPaymentProcessor.setExternalCheckoutForm(\n            this._getMethodId(),\n            response,\n            siteLink,\n        );\n    }\n\n    private _getMethodId(): keyof WithGooglePayCustomerInitializeOptions {\n        return guard(\n            this._methodId,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV2CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV2CustomerStrategy, [\n    { id: 'googlepayadyenv2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayGateway from '../../gateways/google-pay-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAdyenV3CustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayGateway('adyen', paymentIntegrationService),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAdyenV3CustomerStrategy, [\n    { id: 'googlepayadyenv3' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayAuthorizeNetGateway from '../../gateways/google-pay-authorizenet-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayAuthorizeDotNetCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayAuthorizeNetGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayAuthorizeDotNetCustomerStrategy, [\n    { id: 'googlepayauthorizenet' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCheckoutComGateway from '../../gateways/google-pay-checkoutcom-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCheckoutComCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCheckoutComGateway(paymentIntegrationService, requestSender),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCheckoutComCustomerStrategy, [\n    { id: 'googlepaycheckoutcom' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayCybersourceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayCybersourceCustomerStrategy, [\n    { id: 'googlepaycybersourcev2' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayCybersourceGateway from '../../gateways/google-pay-cybersource-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBnzCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayCybersourceGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBnzCustomerStrategy, [{ id: 'googlepaybnz' }]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayOrbitalGateway from '../../gateways/google-pay-orbital-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayOrbitalCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayOrbitalGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayOrbitalCustomerStrategy, [\n    { id: 'googlepayorbital' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeCustomerStrategy: CustomerStrategyFactory<GooglePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeCustomerStrategy, [\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeocs' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayStripeGateway from './google-pay-stripe-gateway';\nimport StripeUPEScriptLoader from './stripe-upe-script-loader';\n\nconst createGooglePayStripeUpeCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayStripeGateway(\n                paymentIntegrationService,\n                new StripeUPEScriptLoader(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayStripeUpeCustomerStrategy, [\n    { id: 'googlepaystripeupe' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayWorldpayAccessGateway from '../../gateways/google-pay-worldpayaccess-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayWorldpayAccessCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayWorldpayAccessGateway(paymentIntegrationService),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayWorldpayAccessCustomerStrategy, [\n    { id: 'googlepayworldpayaccess' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeHostWindow,\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayBraintreeGateway from '../../gateways/google-pay-braintree-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayBraintreePaymentStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    const requestSender = createRequestSender();\n\n    const braintreeHostWindow: BraintreeHostWindow = window;\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n    const braintreeSdk = new BraintreeSdk(\n        new BraintreeScriptLoader(\n            getScriptLoader(),\n            braintreeHostWindow,\n            braintreeSDKVersionManager,\n        ),\n    );\n\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBraintreeGateway(paymentIntegrationService, braintreeSdk),\n            requestSender,\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBraintreePaymentStrategy, [\n    { id: 'googlepaybraintree' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { PayPalCommerceSdk } from '@bigcommerce/checkout-sdk/paypal-commerce-utils';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayPaypalCommerceGateway from './google-pay-paypal-commerce-gateway';\n\nconst createGooglePayPayPalCommerceCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayPaypalCommerceGateway(\n                paymentIntegrationService,\n                new PayPalCommerceSdk(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayPayPalCommerceCustomerStrategy, [\n    { id: 'googlepaypaypalcommerce' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PayPalSdkHelper } from '@bigcommerce/checkout-sdk/bigcommerce-payments-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport createGooglePayScriptLoader from '../factories/create-google-pay-script-loader';\nimport GooglePayCustomerStrategy from '../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../google-pay-payment-processor';\n\nimport GooglePayBigCommercePaymentsGateway from './google-pay-bigcommerce-payments-gateway';\n\nconst createGooglePayBigCommercePaymentsCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) => {\n    return new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayBigCommercePaymentsGateway(\n                paymentIntegrationService,\n                new PayPalSdkHelper(getScriptLoader()),\n            ),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n};\n\nexport default toResolvableModule(createGooglePayBigCommercePaymentsCustomerStrategy, [\n    { id: 'googlepay_bigcommerce_payments' },\n]);\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport GooglePayTdOnlineMartGateway from '../../gateways/google-pay-tdonlinemart-gateway';\nimport GooglePayCustomerStrategy from '../../google-pay-customer-strategy';\nimport GooglePayPaymentProcessor from '../../google-pay-payment-processor';\nimport createGooglePayScriptLoader from '../create-google-pay-script-loader';\n\nconst createGooglePayTdOnlineMartCustomerStrategy: CustomerStrategyFactory<\n    GooglePayCustomerStrategy\n> = (paymentIntegrationService) =>\n    new GooglePayCustomerStrategy(\n        paymentIntegrationService,\n        new GooglePayPaymentProcessor(\n            createGooglePayScriptLoader(),\n            new GooglePayTdOnlineMartGateway(paymentIntegrationService, createFormPoster()),\n            createRequestSender(),\n            createFormPoster(),\n        ),\n    );\n\nexport default toResolvableModule(createGooglePayTdOnlineMartCustomerStrategy, [\n    { id: 'googlepaytdonlinemart' },\n]);\n","import setPrototypeOf from '../setPrototypeOf';\n\nimport CustomError from './CustomError';\n\nexport default class EmbeddedCheckoutUnsupportedError extends CustomError {\n    constructor(message: string) {\n        super({\n            name: 'EMBEDDED_CHECKOUT_UNSUPPORTED_ERROR',\n            message,\n        });\n\n        setPrototypeOf(this, EmbeddedCheckoutUnsupportedError.prototype);\n    }\n}\n","export default function setPrototypeOf<T extends object>(object: T, prototype: object): T {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else if (hasProto(object)) {\n        // eslint-disable-next-line no-proto\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hasProto(object: object): object is object & { __proto__: object } {\n    return '__proto__' in object;\n}\n","import {\n    createGooglePayAdyenV2CustomerStrategy,\n    createGooglePayAdyenV3CustomerStrategy,\n    createGooglePayAuthorizeDotNetCustomerStrategy,\n    createGooglePayBigCommercePaymentsCustomerStrategy,\n    createGooglePayBnzCustomerStrategy,\n    createGooglePayBraintreeCustomerStrategy,\n    createGooglePayCheckoutComCustomerStrategy,\n    createGooglePayCybersourceCustomerStrategy,\n    createGooglePayOrbitalCustomerStrategy,\n    createGooglePayPayPalCommerceCustomerStrategy,\n    createGooglePayStripeCustomerStrategy,\n    createGooglePayStripeUpeCustomerStrategy,\n    createGooglePayTdOnlineMartCustomerStrategy,\n    createGooglePayWorldpayAccessCustomerStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/google-pay';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    EmbeddedCheckoutUnsupportedError,\n    isEmbedded,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport './GooglePayButton.scss';\n\nconst GooglePayButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const { language, onUnhandledError } = props;\n\n    if (isEmbedded()) {\n        onUnhandledError(\n            new EmbeddedCheckoutUnsupportedError(\n                language.translate('embedded_checkout.unsupported_error', {\n                    methods: 'googlepay',\n                }),\n            ),\n        );\n\n        return null;\n    }\n\n    const integrations = [\n        createGooglePayAdyenV2CustomerStrategy,\n        createGooglePayAdyenV3CustomerStrategy,\n        createGooglePayAuthorizeDotNetCustomerStrategy,\n        createGooglePayCheckoutComCustomerStrategy,\n        createGooglePayCybersourceCustomerStrategy,\n        createGooglePayBnzCustomerStrategy,\n        createGooglePayOrbitalCustomerStrategy,\n        createGooglePayStripeCustomerStrategy,\n        createGooglePayStripeUpeCustomerStrategy,\n        createGooglePayWorldpayAccessCustomerStrategy,\n        createGooglePayBraintreeCustomerStrategy,\n        createGooglePayPayPalCommerceCustomerStrategy,\n        createGooglePayBigCommercePaymentsCustomerStrategy,\n        createGooglePayTdOnlineMartCustomerStrategy,\n    ];\n\n    return (\n        <CheckoutButton\n            checkoutButtonContainerClass=\"google-pay-top-button\"\n            integrations={integrations}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    GooglePayButton,\n    [\n        { id: 'googlepayadyenv2' },\n        { id: 'googlepayadyenv3' },\n        { id: 'googlepayauthorizenet' },\n        { id: 'googlepaybnz' },\n        { id: 'googlepaybraintree' },\n        { id: 'googlepaypaypalcommerce' },\n        { id: 'googlepaycheckoutcom' },\n        { id: 'googlepaycybersourcev2' },\n        { id: 'googlepayorbital' },\n        { id: 'googlepaystripe' },\n        { id: 'googlepaystripeupe' },\n        { id: 'googlepayworldpayaccess' },\n        { id: 'googlepaytdonlinemart' },\n        { id: 'googlepaystripeocs' },\n    ],\n);\n","export default function isEmbedded(pathname: string = document.location.pathname): boolean {\n    const basePath = `/${pathname.split('/')[1]}`;\n\n    return basePath === '/embedded-checkout';\n}\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport {\n    createGooglePayAdyenV2PaymentStrategy,\n    createGooglePayAdyenV3PaymentStrategy,\n    createGooglePayAuthorizeNetPaymentStrategy,\n    createGooglePayBigCommercePaymentsPaymentStrategy,\n    createGooglePayBraintreePaymentStrategy,\n    createGooglePayCheckoutComPaymentStrategy,\n    createGooglePayCybersourcePaymentStrategy,\n    createGooglePayOrbitalPaymentStrategy,\n    createGooglePayPPCPPaymentStrategy,\n    createGooglePayStripePaymentStrategy,\n    createGooglePayTdOnlineMartPaymentStrategy,\n    createGooglePayWorldpayAccessPaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/google-pay';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst GooglePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const loadingContainerId = 'checkout-app';\n            const mergedOptions: PaymentInitializeOptions = {\n                ...defaultOptions,\n                integrations: [\n                    createGooglePayAdyenV2PaymentStrategy,\n                    createGooglePayAdyenV3PaymentStrategy,\n                    createGooglePayAuthorizeNetPaymentStrategy,\n                    createGooglePayCheckoutComPaymentStrategy,\n                    createGooglePayCybersourcePaymentStrategy,\n                    createGooglePayOrbitalPaymentStrategy,\n                    createGooglePayStripePaymentStrategy,\n                    createGooglePayWorldpayAccessPaymentStrategy,\n                    createGooglePayBraintreePaymentStrategy,\n                    createGooglePayPPCPPaymentStrategy,\n                    createGooglePayBigCommercePaymentsPaymentStrategy,\n                    createGooglePayTdOnlineMartPaymentStrategy,\n                ],\n                [PaymentMethodId.AdyenV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AdyenV3GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.AuthorizeNetGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BNZGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BigCommercePaymentsGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.BraintreeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.PayPalCommerceGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeUPEGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CybersourceV2GooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.OrbitalGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.CheckoutcomGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.WorldpayAccessGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.TdOnlineMartGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n                [PaymentMethodId.StripeOCSGooglePay]: {\n                    loadingContainerId,\n                    walletButton: 'walletButton',\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"walletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeGooglePayPayment}\n            method={method}\n            shouldShowEditButton\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    GooglePayPaymentMethod,\n    [\n        { id: PaymentMethodId.AdyenV2GooglePay },\n        { id: PaymentMethodId.AdyenV3GooglePay },\n        { id: PaymentMethodId.AuthorizeNetGooglePay },\n        { id: PaymentMethodId.BNZGooglePay },\n        { id: PaymentMethodId.BraintreeGooglePay },\n        { id: PaymentMethodId.PayPalCommerceGooglePay },\n        { id: PaymentMethodId.BigCommercePaymentsGooglePay },\n        { id: PaymentMethodId.CheckoutcomGooglePay },\n        { id: PaymentMethodId.CybersourceV2GooglePay },\n        { id: PaymentMethodId.OrbitalGooglePay },\n        { id: PaymentMethodId.StripeGooglePay },\n        { id: PaymentMethodId.StripeUPEGooglePay },\n        { id: PaymentMethodId.WorldpayAccessGooglePay },\n        { id: PaymentMethodId.TdOnlineMartGooglePay },\n        { id: PaymentMethodId.StripeOCSGooglePay },\n    ],\n);\n","import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","export default class CustomError extends Error {\n    static shouldReport: boolean;\n\n    data: any;\n    title: any;\n    type: string;\n\n    constructor({\n        data = {},\n        message = '',\n        title = '',\n        name = '',\n    }: {\n        data?: any;\n        message?: string;\n        title?: string;\n        name?: string;\n    }) {\n        super();\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, CustomError);\n        } else {\n            this.stack = new Error().stack;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.data = data;\n        this.message = message;\n        this.name = name;\n        this.title = title;\n        this.type = 'custom';\n    }\n}\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n"],"names":["__webpack_require__","isExperimentEnabled","features","experimentName","fallbackValue","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","constructor","paymentIntegrationService","braintreeWindow","window","getSDKVersion","storeConfig","this","getState","getStoreConfig","checkoutSettings","getPreloadedSDKVersion","braintree","preloadedVersion","find","values","module","VERSION","StandardError","Error","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","UnsupportedBrowserError","NotInitializedErrorType","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","ESTIMATED","FINAL","NOT_CURRENTLY_KNOWN","Completed","Pending","Failed","TRUSTLY","SUCCEEDED","FAILED","CANCELED","UNRECOGNIZED","Customer","Merchant","Network","Internal","Unknown","KountNotEnabled","Visa","Mastercard","AmericanExpress","DinersClub","Discover","Jcb","UnionPay","Maestro","Elo","Mir","Hiper","Hipercard","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","initialize","clientToken","setClientToken","deinitialize","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","options","emptyDataCollector","deviceData","teardown","Promise","resolve","loadDataCollector","dataCollectorConfig","kount","error","Boolean","code","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","testMode","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","PaymentMethodClientUnavailableError","Sandbox","Production","Client","DataCollector","Fastlane","GooglePayment","HostedFields","LocalPayment","Paypal","PaypalCheckout","ThreeDSecure","UsBankAccount","Venmo","VisaCheckout","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","BRAINTREE_SDK_SCRIPTS_INTEGRITY","MissingDataErrorType","GooglePayKey","BraintreeScriptLoader","scriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","loadScript","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","t","moduleName","toResolvableModule","resolveIds","assign","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","InvalidArgumentError","CancellablePromise","promise","cancellable","_","cancel","race","bindMethodDecorator","descriptor","value","method","boundMethod","bind","set","ADYEN_V2","ADYEN_V3","AUTHORIZE_NET","BNZ","BRAINTREE","PAYPAL_COMMERCE","BIGCOMMERCE_PAYMENTS","CHECKOUT_COM","CYBERSOURCE_V2","ORBITAL","STRIPE","STRIPE_UPE","STRIPE_OCS","WORLDPAY_ACCESS","TD_ONLINE_MART","CurrencyFormatter","currencySettings","decimalPlaces","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","amount","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","Math","abs","integerAmount","decimalAmount","_toFixed","split","parsedIntegerAmount","replace","join","toLowerCase","precision","round","toFixed","CurrencyService","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","currency","toCustomerCurrency","exchangeRate","toStoreCurrency","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","guard","errorFactory","PayPalCommerceIntent","StyleButtonLabel","StyleButtonColor","StyleButtonShape","GooglePayCardNetwork","CallbackIntentsType","ErrorReasonType","CallbackTriggerType","isGooglePayCardNetworkKey","card","AUTHORIZE","CAPTURE","checkout","buynow","pay","installment","gold","blue","silver","black","white","pill","rect","AMEX","DISCOVER","INTERAC","JCB","MC","VISA","OFFER","PAYMENT_AUTHORIZATION","SHIPPING_ADDRESS","SHIPPING_OPTION","OFFER_INVALID","PAYMENT_DATA_INVALID","SHIPPING_ADDRESS_INVALID","SHIPPING_ADDRESS_UNSERVICEABLE","SHIPPING_OPTION_INVALID","OTHER_ERROR","INITIALIZE","GooglePayGateway","_gatewayIdentifier","_paymentIntegrationService","_isBuyNowFlow","mapToShippingAddressRequestBody","shippingAddress","company","phone","getShippingAddress","_mapToAddressRequestBody","mapToBillingAddressRequestBody","response","billingAddress","paymentMethodData","info","email","customFields","getBillingAddress","mapToExternalCheckoutData","tokenizationData","token","nonce","cardNetwork","cardDetails","number","card_information","cart_id","getCart","id","getRequiredData","data","emailRequired","_isShippingAddressRequired","state","loadShippingCountries","allowedCountryCodes","getShippingCountries","map","country","shippingAddressRequired","shippingAddressParameters","phoneNumberRequired","shippingOptionRequired","getCallbackIntents","getCallbackTriggers","isGooglePayCouponsExperimentOn","getStoreConfigOrThrow","availableTriggers","initializationTrigger","addressChangeTriggers","shippingOptionsChangeTriggers","offerChangeTriggers","getNonce","methodId","getPaymentMethodOrThrow","initializationData","extraPaymentData","getMerchantInfo","googleMerchantName","merchantName","googleMerchantId","merchantId","platformToken","authJwt","getGooglePayInitializationData","getTransactionInfo","currencyCode","_getCurrencyCodeOrThrow","getCartOrThrow","countryCode","storeCountry","totalPriceStatus","totalPrice","getPaymentGatewayParameters","gatewayMerchantId","gateway","getCardParameters","allowedAuthMethods","allowedCardNetworks","getPaymentMethod","supportedCards","filter","billingAddressRequired","billingAddressParameters","isBuyNowFlow","_getPaymentMethodFn","_currencyCode","handleShippingAddressChange","address1","mappedShippingAddress","updateShippingAddress","consignments","getConsignments","consignment","_currencyService","availableShippingOptions","_getGooglePayShippingOption","recommendedShippingOption","shippingOption","isRecommended","length","selectedShippingOptionId","selectedShippingOption","handleShippingOptionChange","defaultSelectedOptionId","shippingOptions","optionId","selectShippingOption","getTotalPrice","getCheckoutOrThrow","outstandingBalance","handleCoupons","offerData","redemptionCodes","newCouponsState","offers","appliedCoupons","getAppliedCoupons","reduce","some","redemptionCode","appliedCouponError","applyCoupon","coupon","includes","removeCoupon","newOfferInfo","coupons","getCheckout","displayName","description","e","reason","intent","getGatewayIdentifier","setGatewayIdentifier","cart","config","lineItems","physicalItems","lineItem","isShippingRequired","customItems","address","address2","address3","locality","city","administrativeArea","stateOrProvinceCode","postalCode","phoneNumber","firstName","lastName","_getFirstAndLastName","trim","stateOrProvince","fullName","nameParts","slice","cost","additionalDescription","formattedCost","label","GooglePayBraintreeGateway","service","_braintreeSdk","_methodId","_service","paymentMethod","loadPaymentMethod","_braintreeGooglePayment","bin","isThreeDSecureEnabled","isNetworkTokenized","orderAmount","getOrderOrThrow","_braintreePresent3DSChallenge","deviceSessionId","_getBraintreeDeviceData","JSON","parse","androidPayCards","details","createPaymentDataRequest","merchantInfo","transactionInfo","cardRequirements","billingAddressFormat","paymentMethodTokenizationParameters","parameters","verifyCard","onLookupComplete","_data","next","PaymentMethodCancelledError","PaymentMethodFailedError","BuyNowCartCreationError","isGooglePayErrorObject","isGooglePayKey","GooglePayButtonStrategy","_googlePayPaymentProcessor","containerId","googlePayOptions","_getMethodOrThrow","buyNowInitializeOptions","buttonColor","buttonType","onError","_e","_countryCode","_buyNowInitializeOptions","_getGooglePayClientOptions","loadDefaultCheckout","_paymentButton","addPaymentButton","onClick","_handleClick","remove","event","preventDefault","_createBuyNowCartOrThrow","initializeWidget","_interactWithPaymentSheet","err","statusCode","stringify","showPaymentSheet","siteLink","location","pathname","links","updateBillingAddress","_buyNowCart","digitalItems","setExternalCheckoutForm","paymentDataCallbacks","onPaymentDataChanged","callbackTrigger","shippingOptionData","couponsError","_getBuyNowTransactionInfo","_getTransactionInfo","getBuyNowCartRequestBody","cartRequestBody","createBuyNowCart","loadCheckout","cartAmount","newTransactionInfo","String","newShippingOptionParameters","SDK_VERSION_HEADERS","GooglePayPaymentProcessor","_scriptLoader","_gateway","_requestSender","_formPoster","_baseRequest","apiVersion","apiVersionMinor","googlePayPaymentOptions","_paymentsClient","getGooglePaymentsClient","_buildButtonPayloads","_buildWidgetPayloads","_determineReadinessToPay","_prefetchGooglePaymentData","container","document","querySelector","paymentButton","_getPaymentsClient","createButton","allowedPaymentMethods","_getBaseCardPaymentMethod","appendChild","paymentDataRequest","_getPaymentDataRequest","loadPaymentData","setExternalCheckoutXhr","provider","_setExternalCheckout","processAdditionalAction","signOut","providerId","useFormPoster","url","body","action","postForm","post","headers","Accept","prefetchPaymentData","result","isReadyToPay","_getIsReadyToPayRequest","_baseCardPaymentMethod","baseCardPaymentMethod","_cardPaymentMethod","tokenizationSpecification","_paymentDataRequest","callbackIntents","offerInfo","_isReadyToPayRequest","_getOrThrow","GooglePayScriptLoader","_window","google","payments","api","PaymentsClient","environment","createGooglePayScriptLoader","getScriptLoader","requestSender","createRequestSender","braintreeSdk","createFormPoster","PayPalCommerceSdk","getPayPalFastlaneSdk","sessionId","paypalFastlaneSdk","getPayPalFastlaneSdkConfiguration","loadPayPalSdk","getPayPalGooglePaySdk","initializesOnCheckoutPage","forceLoad","paypalGooglePay","paypalSdkScriptConfig","getPayPalGooglePaySdkScriptConfigOrThrow","getPayPalApmsSdk","paypalApms","getPayPalApmSdkConfiguration","getPayPalMessages","paypalMessages","paypalSdkMessagesConfig","getPayPalSdkMessagesConfiguration","scriptOptions","transformConfig","scriptAttributes","scriptSrc","URLSearchParams","toString","clientId","attributionId","commit","components","buyerCountry","isHostedCheckoutEnabled","isDeveloperModeApplicable","availableAlternativePaymentMethods","enabledAlternativePaymentMethods","enableAPMsFunding","disableAPMsFunding","apm","transformedConfig","keys","Array","isArray","assertsIsGooglePayPayPalCommercePaymentMethod","GooglePayPaypalCommerceGateway","payPalCommerceSdk","googlePaySdk","googlepayConfig","Googlepay","btoa","PayPalSdkHelper","filterFundingOptions","fundingOptions","fundingTypesToBeFiltered","fundingOption","GooglePayBigCommercePaymentsGateway","payPalSdkHelper","GooglePayAuthorizeNetGateway","paymentGatewayId","ContentType","Json","JsonV1","assertIsGooglePayCheckoutComInitializationData","GooglePayCheckoutComGateway","_resolve","threeDSBody","three_ds_result","acs_url","_tokenize","checkoutcomkey","token_data","credentials","Authorization","GooglePayCybersourceGateway","GooglePayOrbitalGateway","PaymentArgumentInvalidError","invalidFields","DEFAULT_RESPONSE","status","RequestError","errors","assertsIsGooglePayStripeInitializationData","GooglePayStripeGateway","stripeVersion","stripePublishableKey","stripeConnectedAccount","isStripeGooglePay3dsExperimentIsOn","stripeUPEClient","loadStripeJs","clientSecret","catchedConfirmError","confirmCardPayment","retrievePaymentIntent","__","_throwDisplayableStripeError","_isCancellationError","paymentIntent","submitPayment","paymentData","getStripeClient","stripeError","payment_intent","last_payment_error","indexOf","StripeUPEScriptLoader","stripeWindow","stripeAccount","locale","stripeClient","bcStripeClient","load","betas","Stripe","GooglePayWorldpayAccessGateway","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","GooglePayTdOnlineMartGateway","formPoster","browser_info","errorBody","isObject","threeDSResult","formUrl","payer_auth_request","threeDSSessionData","merchant_data","creq","AdyenV2ScriptLoader","_stylesheetLoader","configuration","loadStylesheet","prepend","AdyenCheckout","isAdditionalActionRequiredErrorResponse","param","provider_data","GooglePayAdyenV2","_adyenClient","storeProfile","storeLanguage","googlePayToken","payment","_handleAction","additionalAction","adyenAction","_getAdyenClient","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","size","mount","OrderFinalizationNotRequiredError","DEFAULT_STYLES","color","backgroundColor","DEFAULT_CONTAINER_STYLES","position","ROTATION_ANIMATION","LoadingIndicator","styles","containerStyles","defineAnimation","buildContainer","indicator","buildIndicator","show","parentId","parent","getElementById","style","visibility","opacity","hide","handleTransitionEnd","removeEventListener","addEventListener","createElement","display","bottom","left","right","top","transition","setStyleAttribute","borderRadius","border","borderColor","margin","transform","transformStyle","animation","element","attrs","k","setProperty","head","sheet","CSSStyleSheet","insertRule","GooglePayPaymentStrategy","_loadingIndicator","_getMethodId","walletButton","loadingContainerId","callbacks","_loadingIndicatorContainer","_addPaymentButton","execute","submitOrder","extraData","finalize","_clickListener","onPaymentSelect","_toggleLoadingIndicator","_getIsSignedInOrThrow","_handleOfferTrigger","isSignedIn","errorMessage","isLoading","getStylesheetLoader","AdyenV3ScriptLoader","GooglePayAdyenV3","INTERNAL_USE_ONLY","ConfirmOrderStatus","Approved","PayerActionRequired","GooglePayPaypalCommercePaymentStrategy","_payPalCommerceSdk","cartId","orderId","getOrderId","confirmOrderData","atob","confirmOrder","formattedPayload","method_id","paypal_account","order_id","payPalSDK","initiatePayerAction","requestData","shouldSaveInstrument","BigCommercePaymentsIntent","GooglePayBigCommercePaymentsPaymentStrategy","_payPalSdkHelper","NotImplementedError","GooglePayCustomerStrategy","signIn","getPaymentId","executePaymentMethodCheckout","continueWithCheckoutCallback","EmbeddedCheckoutUnsupportedError","CustomError","object","hasProto","toResolvableComponent","props","onUnhandledError","isEmbedded","translate","methods","integrations","CheckoutButton","checkoutButtonContainerClass","checkoutService","rest","initializeGooglePayPayment","useCallback","defaultOptions","reinitializePayment","deinitializePayment","gatewayId","initializePayment","mergedOptions","PaymentMethodId","AdyenV2GooglePay","AdyenV3GooglePay","AuthorizeNetGooglePay","BNZGooglePay","BigCommercePaymentsGooglePay","BraintreeGooglePay","PayPalCommerceGooglePay","StripeGooglePay","StripeUPEGooglePay","CybersourceV2GooglePay","OrbitalGooglePay","CheckoutcomGooglePay","WorldpayAccessGooglePay","TdOnlineMartGooglePay","StripeOCSGooglePay","WalletButtonPaymentMethodComponent","buttonId","shouldShowEditButton","signOutCustomer","Component","title","deinitializeCustomer","initializeCustomer","onWalletButtonClick","additionalInitializationOptions","useEffect","className","formatAccountMask","accountMask","padding","cardData","isWalletButtonInitializationData","cardType","expiryMonth","expMonth","expiryYear","expYear","accountNum","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","translations","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","PaypalCredit","getTranslatedPaymentMethodName","MultiOption","capitalize","onSignOut","TranslatedString","href","providerName","cardName","editButtonClassName","editButtonLabel","signInButtonClassName","signInButtonLabel","paymentForm","isInitializing","noop","onSignOutError","checkoutState","isPaymentDataRequired","walletPaymentData","isPaymentSelected","toggleSubmit","disableSubmit","currentIsPaymentDataRequired","handleSignOut","reload","LoadingOverlay","hideContentWhenLoading"],"sourceRoot":""}