{"version":3,"file":"apple-pay-payment-method-ba81b74a.js","mappings":"qIAIe,SAASA,EAEpBC,EACAC,GAEA,OAAOC,OAAOC,QAAQC,GAAkB,gBAACJ,EAAS,iBAAKI,KAAW,CAAEH,cACxE,C,4FCDA,MAiDA,GAAe,E,SAAA,IAjDsD,EACjEI,SACAC,kBACAC,WACAC,wBAEA,IAAAC,YAAU,MACgC,iDAClC,UACUH,EAAgBI,kBAAkB,CACpCC,UAAWN,EAAOO,QAClBC,SAAUR,EAAOS,GACjBC,aAAc,CAAC,MACfC,SAAU,CACNC,cAAeV,EAASW,UAAU,sBAClCC,cAAeZ,EAASW,UAAU,wBAG9C,CAAE,MAAOE,GACDA,aAAiBC,OACjBb,EAAiBY,EAEzB,CACJ,IAIO,MACqC,iDACpC,UACUd,EAAgBgB,oBAAoB,CACtCX,UAAWN,EAAOO,QAClBC,SAAUR,EAAOS,IAEzB,CAAE,MAAOM,GACDA,aAAiBC,OACjBb,EAAiBY,EAEzB,CACJ,OAIL,CAACd,EAAiBC,EAAUF,EAAQG,IAGhC,mCAKP,CAAC,CAAEM,GAAI,a","sources":["webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/./packages/apple-pay-integration/src/ApplePayPaymentMethod.tsx"],"sourcesContent":["import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","import { createApplePayPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/apple-pay';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst ApplePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    language,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    integrations: [createApplePayPaymentStrategy],\n                    applepay: {\n                        shippingLabel: language.translate('cart.shipping_text'),\n                        subtotalLabel: language.translate('cart.subtotal_text'),\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, language, method, onUnhandledError]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    ApplePayPaymentMethod,\n    [{ id: 'applepay' }],\n);\n"],"names":["toResolvableComponent","Component","resolveIds","Object","assign","props","method","checkoutService","language","onUnhandledError","useEffect","initializePayment","gatewayId","gateway","methodId","id","integrations","applepay","shippingLabel","translate","subtotalLabel","error","Error","deinitializePayment"],"sourceRoot":""}