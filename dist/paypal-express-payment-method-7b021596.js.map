{"version":3,"file":"paypal-express-payment-method-7b021596.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/paypal-express-integration/src/PaypalExpressPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface PaypalExpressPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<\n    PaymentMethodProps & PaypalExpressPaymentMethodProps\n> = ({ checkoutService, isEmbedded = false, ...rest }) => {\n    const initializePaypalExpressPayment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                paypalexpress: {\n                    useRedirectFlow: isEmbedded,\n                },\n            }),\n        [checkoutService, isEmbedded],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePaypalExpressPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalExpressPaymentMethod,\n    [{ id: 'paypalexpress' }],\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","id","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","isEmbedded","rest","initializePaypalExpressPayment","options","paypalexpress","useRedirectFlow","HostedPaymentComponent","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}