{"version":3,"file":"4159-5d1db2ce.js","mappings":"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","sources":["webpack://checkout/./packages/paypal-commerce-integration/src/components/PayPalCommercePaymentMethodComponent.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceAPMs/PayPalCommerceAPMsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditButton.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCredit/PayPalCommerceCreditPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceCreditCards/PayPalCommerceCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/hooks/usePayPalCommerceFastlaneInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneCreditCardForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/components/PayPalCommerceFastlaneForm.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/PayPalCommerceFastlanePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/index.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceFastlane/is-error-with-translation-key.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommerceButton.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/hooks/usePaypalCommerceInstruments.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerce/PayPalCommercePaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceVenmo/PayPalCommerceVenmoPaymentMethod.tsx","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/validation-schema/getPaypalCommerceRatePayValidationSchema.ts","webpack://checkout/./packages/paypal-commerce-integration/src/PayPalCommerceRatepay/PaypalCommerceRatePayPaymentMethod.tsx"],"sourcesContent":["import {\n    type AccountInstrument,\n    type HostedInstrument,\n    type PayPalCommerceAlternativeMethodsPaymentOptions,\n    type PayPalCommerceCreditPaymentInitializeOptions,\n    type PayPalCommercePaymentInitializeOptions,\n    type PayPalCommerceVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport {\n    createPayPalCommerceAlternativeMethodsPaymentStrategy,\n    createPayPalCommerceCreditPaymentStrategy,\n    createPayPalCommercePaymentStrategy,\n    createPayPalCommerceVenmoPaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype PayPalCommerceProvidersPaymentInitializeOptions =\n    PayPalCommerceAlternativeMethodsPaymentOptions &\n        PayPalCommerceCreditPaymentInitializeOptions &\n        PayPalCommercePaymentInitializeOptions &\n        PayPalCommerceVenmoPaymentInitializeOptions;\n\ninterface PayPalCommercePaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<PayPalCommerceProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst PayPalCommercePaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & PayPalCommercePaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [\n                    createPayPalCommerceAlternativeMethodsPaymentStrategy,\n                    createPayPalCommerceCreditPaymentStrategy,\n                    createPayPalCommercePaymentStrategy,\n                    createPayPalCommerceVenmoPaymentStrategy,\n                ],\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default PayPalCommercePaymentMethodComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const { id } = method;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"paypalcommercealternativemethods\"\n            {...props}\n        >\n            <div className={`widget widget--${id} payment-widget`} id={widgetContainerId} />\n        </PayPalCommercePaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceAPMsPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods' }],\n);\n","import { createPayPalCommerceCreditCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nconst PayPalCommerceCreditButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const { onUnhandledError } = props;\n    const additionalInitializationOptions = {\n        onComplete: navigateToOrderConfirmation,\n        onError: onUnhandledError,\n    };\n\n    return (\n        <CheckoutButton\n            additionalInitializationOptions={additionalInitializationOptions}\n            integrations={[createPayPalCommerceCreditCustomerStrategy]}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    PayPalCommerceCreditButton,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceCreditPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent\n            providerOptionsKey=\"paypalcommercecredit\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditPaymentMethod,\n    [{ id: 'paypalcommercecredit' }],\n);\n","import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { createPayPalCommerceCreditCardsPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport { compact, forIn } from 'lodash';\nimport React, { type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalCommerceCreditCardsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializePayPalCommerceCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    integrations: [createPayPalCommerceCreditCardsPaymentStrategy],\n                    paypalcommercecreditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching PayPal Commerce Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializePayPalCommerceCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceCreditCardsPaymentMethod,\n    [{ id: 'paypalcommercecreditcards' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const usePayPalCommerceFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneCreditCardForm.scss';\n\ninterface PayPalCommerceFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst PayPalCommerceFastlaneCreditCardForm: FunctionComponent<\n    PayPalCommerceFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#paypal-commerce-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-cc-form-container\"\n            data-test=\"paypal-commerce-fastlane-cc-form-container\"\n            id=\"paypal-commerce-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default PayPalCommerceFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport './PayPalCommerceFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface PayPalCommerceFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst PayPalCommerceFastlaneInstrumentsForm: FunctionComponent<\n    PayPalCommerceFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"paypal-commerce-fastlane-instrument\"\n            data-test=\"paypal-commerce-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"paypal-commerce-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"paypal-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"paypal-commerce-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"paypal-commerce-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"paypal-commerce-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { usePayPalCommerceFastlaneInstruments } from '../hooks/usePayPalCommerceFastlaneInstruments';\nimport { type PayPalFastlaneCardComponentRef } from '../PayPalCommerceFastlanePaymentMethod';\n\nimport PayPalCommerceFastlaneCreditCardForm from './PayPalCommerceFastlaneCreditCardForm';\nimport PayPalCommerceFastlaneInstrumentsForm from './PayPalCommerceFastlaneInstrumentsForm';\n\ninterface PayPalCommerceFastlaneFormProps {\n    renderPayPalCardComponent?: PayPalFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: PayPalFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst PayPalCommerceFastlaneForm: FunctionComponent<PayPalCommerceFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        usePayPalCommerceFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <PayPalCommerceFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PayPalCommerceFastlaneForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { createPayPalCommerceFastlanePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommerceFastlaneForm from './components/PayPalCommerceFastlaneForm';\n\nimport './PayPalCommerceFastlanePaymentMethod.scss';\nimport isErrorWithTranslationKey from './is-error-with-translation-key';\n\nexport interface PayPalFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst PayPalCommerceFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<PayPalFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                integrations: [createPayPalCommerceFastlanePaymentStrategy],\n                paypalcommercefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <PayPalCommerceFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceFastlanePaymentMethod,\n    [{ id: 'paypalcommerceacceleratedcheckout' }],\n);\n","import PayPalCommerceFastlanePaymentMethod from './PayPalCommerceFastlanePaymentMethod';\n\nexport default PayPalCommerceFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { createPayPalCommerceCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nconst PayPalCommerceButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const { onUnhandledError } = props;\n    const additionalInitializationOptions = {\n        onComplete: navigateToOrderConfirmation,\n        onError: onUnhandledError,\n    };\n\n    return (\n        <CheckoutButton\n            additionalInitializationOptions={additionalInitializationOptions}\n            integrations={[createPayPalCommerceCustomerStrategy]}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    PayPalCommerceButton,\n    [{ id: 'paypalcommerce' }],\n);\n","import { type AccountInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst usePaypalCommerceInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default usePaypalCommerceInstrument;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nimport usePaypalCommerceInstrument from './hooks/usePaypalCommerceInstruments';\n\nconst PayPalCommercePaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = usePaypalCommerceInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <PayPalCommercePaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"paypalcommerce\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </PayPalCommercePaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommercePaymentMethod,\n    [{ id: 'paypalcommerce' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport PayPalCommercePaymentMethodComponent from '../components/PayPalCommercePaymentMethodComponent';\n\nconst PayPalCommerceVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const { isPaymentDataRequired } = checkoutState.data;\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    return (\n        <PayPalCommercePaymentMethodComponent providerOptionsKey=\"paypalcommercevenmo\" {...props} />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalCommerceVenmoPaymentMethod,\n    [{ id: 'paypalcommercevenmo' }],\n);\n","import { type FormField, type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, type StringSchema } from 'yup';\n\nexport default memoize(function getPaypalCommerceRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { type FormField } from '@bigcommerce/checkout-sdk';\nimport { createPayPalCommerceRatePayPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-commerce';\nimport React, { type FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    type CountryData,\n    CustomError,\n    getCountryData,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    type SpecificError,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getPaypalCommerceRatePayValidationSchema from './validation-schema/getPaypalCommerceRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst PaypalCommerceRatePayPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    const getCountryInfo = (): CountryData | undefined => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        if (billing && !billing.country) {\n            return getCountryData(billing.country)[0];\n        }\n    };\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [createPayPalCommerceRatePayPaymentStrategy],\n                paypalcommerceratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => {\n                        // TODO: update PPCP Ratepay initialization data with getFieldsValues optional return data in checkout-sdk\n                        const defaultFieldValues = {\n                            ratepayBirthDate: {\n                                getDate: () => 0,\n                                getMonth: () => 0,\n                                getFullYear: () => 0,\n                            },\n                            ratepayPhoneCountryCode: '',\n                            ratepayPhoneNumber: '',\n                        };\n\n                        return {\n                            ...defaultFieldValues,\n                            ...fieldsValues.current,\n                        };\n                    },\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }): void => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    const validationSchema = useMemo(\n        () =>\n            getPaypalCommerceRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    useEffect(() => {\n        const countryInfo = getCountryInfo();\n\n        if (countryInfo) {\n            setFieldValue('ratepayPhoneCountryCode', countryInfo.dialCode);\n        }\n    }, []);\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const formContextProps = {\n        isSubmitted: isSubmitted(),\n        setSubmitted,\n    };\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={formContextProps}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PaypalCommerceRatePayPaymentMethod,\n    [{ gateway: 'paypalcommercealternativemethods', id: 'ratepay' }],\n);\n"],"names":["method","checkoutService","paymentForm","onUnhandledError","providerOptionsKey","providerOptionsData","children","currentInstrument","language","shouldConfirmInstrument","buttonActionsRef","useRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","getFieldValue","shouldSaveInstrument","validateForm","validationErrors","Object","keys","validateButton","current","length","disable","enable","togglePaypalButton","useCallback","hidePaymentSubmitButton","setTimeout","useEffect","Boolean","initializePayment","gatewayId","gateway","methodId","id","integrations","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","submitForm","setSubmitted","onError","error","disableSubmit","message","Error","translate","onValidate","resolve","reject","keysValidation","forEach","key","setFieldTouched","onInitButton","actions","getFieldsValues","deinitializePayment","toResolvableComponent","props","checkoutState","isPaymentDataRequired","data","widgetContainerId","getUniquePaymentMethodId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","className","additionalInitializationOptions","onComplete","navigateToOrderConfirmation","CheckoutButton","cardCode","showCardHolderName","isHostedFormEnabled","requireCustomerCode","config","focusedFieldType","setFocusedFieldType","useState","setFieldValue","isInstrumentCardCodeRequiredProp","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredProp","isInstrumentCardNumberRequiredSelector","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","name","compact","join","getHostedFormOptions","selectedInstrument","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","shouldRenderHostedFields","styleContainerId","fields","cardCodeVerification","accessibilityLabel","containerId","instrumentId","bigpayToken","undefined","cardNumberVerification","cardExpiryVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","getCreditCardInputStyles","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","errors","forIn","fieldErrors","errorKey","type","getHostedStoredCardValidationFieldset","HostedCreditCardValidation","cardCodeId","cardExpiryId","cardNumberId","initializePayPalCommerceCreditCardPayment","options","paypalcommercecreditcards","form","cardFieldset","HostedCreditCardFieldset","additionalFields","CreditCardCustomerCodeField","cardNameId","cardValidationSchema","getHostedCreditCardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","getHostedInstrumentValidationSchema","isCardExpiryRequired","renderPayPalCardComponent","onChange","handleSelectInstrument","toLowerCase","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","TranslatedString","showPayPalCardSelector","instruments","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","instrument","usePayPalCommerceFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isLoadingPaymentMethod","isInitializingPayment","statuses","paypalcommercefastlane","finalError","isErrorWithTranslationKey","translationKey","isLoading","formContextProps","isSubmitted","FormContext","Provider","value","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","hideContentWhenLoading","setCurrentInstrument","customer","getCustomer","getInstruments","accountInstruments","useMemo","filter","isAccountInstrument","trustedAccountInstruments","trustedShippingAddress","hasAccountInstruments","isInstrumentFeatureAvailable","isGuest","isVaultingEnabled","initializationData","isComplete","shouldShowInstrumentFieldset","shouldCreateNewInstrument","defaultInstrument","getDefaultInstrument","find","handleUseNewInstrument","isLoadingInstruments","loadInstruments","allInstruments","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","TranslatedHtml","StoreInstrumentFieldset","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","reduce","schema","required","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","label","DynamicFormFieldType","DATE","inputDateFormat","TEXT","setValidationSchema","fieldsValues","paypalcommerceratepay","legalTextContainer","loadingContainerId","getDate","getMonth","getFullYear","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","code","CustomError","shouldBeTranslatedAsHtml","handleChange","fieldId","field","validationSchema","getPaypalCommerceRatePayValidationSchema","countryInfo","billing","getBillingAddress","country","getCountryInfo","dialCode","style","marginBottom","map","DynamicFormField","extraClass"],"sourceRoot":""}