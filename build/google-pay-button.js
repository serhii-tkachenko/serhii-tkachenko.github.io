/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["google-pay-button"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/google-pay.js":
/*!**************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/google-pay.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGooglePayAdyenV2ButtonStrategy: () => (/* binding */ Zt),\n/* harmony export */   createGooglePayAdyenV2CustomerStrategy: () => (/* binding */ K),\n/* harmony export */   createGooglePayAdyenV2PaymentStrategy: () => (/* binding */ vt),\n/* harmony export */   createGooglePayAdyenV3ButtonStrategy: () => (/* binding */ Xt),\n/* harmony export */   createGooglePayAdyenV3CustomerStrategy: () => (/* binding */ Z),\n/* harmony export */   createGooglePayAdyenV3PaymentStrategy: () => (/* binding */ St),\n/* harmony export */   createGooglePayAuthorizeDotNetButtonStrategy: () => (/* binding */ Qt),\n/* harmony export */   createGooglePayAuthorizeDotNetCustomerStrategy: () => (/* binding */ Q),\n/* harmony export */   createGooglePayAuthorizeNetPaymentStrategy: () => (/* binding */ It),\n/* harmony export */   createGooglePayBigCommercePaymentsButtonStrategy: () => (/* binding */ Kt),\n/* harmony export */   createGooglePayBigCommercePaymentsCustomerStrategy: () => (/* binding */ ot),\n/* harmony export */   createGooglePayBigCommercePaymentsPaymentStrategy: () => (/* binding */ Ut),\n/* harmony export */   createGooglePayBnzCustomerStrategy: () => (/* binding */ ce),\n/* harmony export */   createGooglePayBraintreeButtonStrategy: () => (/* binding */ Yt),\n/* harmony export */   createGooglePayBraintreeCustomerStrategy: () => (/* binding */ Ye),\n/* harmony export */   createGooglePayBraintreePaymentStrategy: () => (/* binding */ Dt),\n/* harmony export */   createGooglePayCheckoutComButtonStrategy: () => (/* binding */ $t),\n/* harmony export */   createGooglePayCheckoutComCustomerStrategy: () => (/* binding */ ae),\n/* harmony export */   createGooglePayCheckoutComPaymentStrategy: () => (/* binding */ Ot),\n/* harmony export */   createGooglePayCybersourceButtonStrategy: () => (/* binding */ en),\n/* harmony export */   createGooglePayCybersourceCustomerStrategy: () => (/* binding */ se),\n/* harmony export */   createGooglePayCybersourcePaymentStrategy: () => (/* binding */ kt),\n/* harmony export */   createGooglePayOrbitalButtonStrategy: () => (/* binding */ tn),\n/* harmony export */   createGooglePayOrbitalCustomerStrategy: () => (/* binding */ le),\n/* harmony export */   createGooglePayOrbitalPaymentStrategy: () => (/* binding */ Tt),\n/* harmony export */   createGooglePayPPCPPaymentStrategy: () => (/* binding */ Rt),\n/* harmony export */   createGooglePayPayPalCommerceButtonStrategy: () => (/* binding */ Jt),\n/* harmony export */   createGooglePayPayPalCommerceCustomerStrategy: () => (/* binding */ $e),\n/* harmony export */   createGooglePayStripeButtonStrategy: () => (/* binding */ nn),\n/* harmony export */   createGooglePayStripeCustomerStrategy: () => (/* binding */ Pe),\n/* harmony export */   createGooglePayStripePaymentStrategy: () => (/* binding */ At),\n/* harmony export */   createGooglePayStripeUpeCustomerStrategy: () => (/* binding */ ve),\n/* harmony export */   createGooglePayTdOnlineMartButtonStrategy: () => (/* binding */ an),\n/* harmony export */   createGooglePayTdOnlineMartCustomerStrategy: () => (/* binding */ ct),\n/* harmony export */   createGooglePayTdOnlineMartPaymentStrategy: () => (/* binding */ Vt),\n/* harmony export */   createGooglePayWorldpayAccessButtonStrategy: () => (/* binding */ on),\n/* harmony export */   createGooglePayWorldpayAccessCustomerStrategy: () => (/* binding */ be),\n/* harmony export */   createGooglePayWorldpayAccessPaymentStrategy: () => (/* binding */ Mt)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\nvar l,u={};function h(e,t){return console.log(\"resolveIds\",t),Object.assign(e,{resolveIds:t})}u.d=(e,t)=>{for(var n in t)u.o(t,n)&&!u.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},u.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class y extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(l||(l={}));class g extends y{constructor(e){super(function(e){switch(e){case l.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case l.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case l.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case l.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case l.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case l.MissingCheckoutConfig:case l.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case l.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case l.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case l.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case l.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case l.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case l.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class p extends y{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}function m(e,t,n){if(\"function\"!=typeof n.value)return n;let i=n.value;return{get(){const e=i.bind(this);return Object.defineProperty(this,t,Object.assign(Object.assign({},n),{value:e})),e},set(e){i=e}}}class f{constructor(e){if(!e)throw new Error(\"Currency settings missing\");const{decimalPlaces:t,symbolLocation:n,symbol:i,thousandsSeparator:o,decimalSeparator:a}=e;if(\"string\"!=typeof n||\"string\"!=typeof i||\"string\"!=typeof o||\"string\"!=typeof a||\"string\"!=typeof t)throw new p(\"Invalid currency settings provided\");this._decimalPlaces=parseInt(t,10),this._symbolLocation=n,this._symbol=i,this._thousandsSeparator=o,this._decimalSeparator=a}format(e){if(\"number\"!=typeof e)throw new p(\"Invalid amount provided\");const t=this._formatNumber(e),n=this._formatCurrency(t);return e<0?`-${n}`:n}_formatNumber(e){const t=Math.abs(e),[n,i=\"\"]=this._toFixed(t,this._decimalPlaces).split(\".\"),o=n.replace(/\\B(?=(\\d{3})+(?!\\d))/g,this._thousandsSeparator);return this._decimalPlaces<1?o:[o,i].join(this._decimalSeparator)}_formatCurrency(e){return\"left\"===this._symbolLocation.toLowerCase()?`${this._symbol}${e}`:`${e}${this._symbol}`}_toFixed(e,t){return(+`${Math.round(+`${e}e${t}`)}e${-t}`).toFixed(t)}}let w=class{constructor(e){this._storeConfig=e,this._customerFormatter=new f(this._storeConfig.shopperCurrency),this._storeFormatter=new f(this._storeConfig.currency)}toCustomerCurrency(e){const t=this._storeConfig.shopperCurrency.exchangeRate;return this._customerFormatter.format(e*t)}toStoreCurrency(e){return this._storeFormatter.format(e)}};w=function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r}([function(e,t,n){return t&&n?m(0,t,n):function(e){const t=class extends e{};return Object.getOwnPropertyNames(e.prototype).forEach(n=>{const i=Object.getOwnPropertyDescriptor(e.prototype,n);i&&\"constructor\"!==n&&Object.defineProperty(t.prototype,n,m(e.prototype,n,i))}),t}(e)}],w);const P=w;function v(e,t){if(null==e)throw t?t():new Error(\"An unexpected error has occurred.\");return e}var _;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(_||(_={}));class b extends y{constructor(e){super(function(e){switch(e){case _.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case _.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case _.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case _.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}var C,S,I,O,k,T,A,M,D;function E(e){return e in T}!function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(C||(C={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(S||(S={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(I||(I={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(O||(O={})),function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(k||(k={})),function(e){e.AMEX=\"AMEX\",e.DISCOVER=\"DISCOVER\",e.INTERAC=\"INTERAC\",e.JCB=\"JCB\",e.MC=\"MASTERCARD\",e.VISA=\"VISA\"}(T||(T={})),function(e){e.OFFER=\"OFFER\",e.PAYMENT_AUTHORIZATION=\"PAYMENT_AUTHORIZATION\",e.SHIPPING_ADDRESS=\"SHIPPING_ADDRESS\",e.SHIPPING_OPTION=\"SHIPPING_OPTION\"}(A||(A={})),function(e){e.OFFER_INVALID=\"OFFER_INVALID\",e.PAYMENT_DATA_INVALID=\"PAYMENT_DATA_INVALID\",e.SHIPPING_ADDRESS_INVALID=\"SHIPPING_ADDRESS_INVALID\",e.SHIPPING_ADDRESS_UNSERVICEABLE=\"SHIPPING_ADDRESS_UNSERVICEABLE\",e.SHIPPING_OPTION_INVALID=\"SHIPPING_OPTION_INVALID\",e.OTHER_ERROR=\"OTHER_ERROR\"}(M||(M={})),function(e){e.INITIALIZE=\"INITIALIZE\",e.SHIPPING_OPTION=\"SHIPPING_OPTION\",e.SHIPPING_ADDRESS=\"SHIPPING_ADDRESS\",e.OFFER=\"OFFER\"}(D||(D={}));var N,x=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class z{constructor(e,t){this._gatewayIdentifier=e,this._paymentIntegrationService=t,this._isBuyNowFlow=!1}mapToShippingAddressRequestBody({shippingAddress:e}){if(!e)return;const{company:t=\"\",phone:n=\"\"}=this._paymentIntegrationService.getState().getShippingAddress()||{};return this._mapToAddressRequestBody(e,t,n)}mapToBillingAddressRequestBody(e){const{billingAddress:t}=e.paymentMethodData.info;if(!t)return;const{company:n=\"\",phone:i=\"\",email:o,customFields:a=[]}=this._paymentIntegrationService.getState().getBillingAddress()||{};return Object.assign(Object.assign({},this._mapToAddressRequestBody(t,n,i,a)),{email:o||e.email})}mapToExternalCheckoutData(e){var t;const{paymentMethodData:{tokenizationData:{token:n},info:{cardNetwork:i,cardDetails:o}}}=e;if(!n)throw new g(l.MissingPaymentToken);return Promise.resolve(Object.assign({nonce:n,card_information:{type:i,number:o}},this._isBuyNowFlow&&{cart_id:null===(t=this._paymentIntegrationService.getState().getCart())||void 0===t?void 0:t.id}))}getRequiredData(){var e;return x(this,void 0,void 0,function*(){const t={emailRequired:!0};if(!this._isShippingAddressRequired())return t;const n=yield this._paymentIntegrationService.loadShippingCountries(),i=null===(e=n.getShippingCountries())||void 0===e?void 0:e.map(e=>e.code);return Object.assign(Object.assign({},t),{shippingAddressRequired:!0,shippingAddressParameters:Object.assign({phoneNumberRequired:!0},i&&{allowedCountryCodes:i}),shippingOptionRequired:!0})})}getCallbackIntents(){return this._isShippingAddressRequired()?[A.OFFER,A.SHIPPING_ADDRESS,A.SHIPPING_OPTION]:[A.OFFER]}getCallbackTriggers(){const e=this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-2875.googlepay_coupons_handling\"]||!1;return{availableTriggers:[D.INITIALIZE,D.SHIPPING_ADDRESS,D.SHIPPING_OPTION,...e?[D.OFFER]:[]],initializationTrigger:[D.INITIALIZE],addressChangeTriggers:[D.INITIALIZE,D.SHIPPING_ADDRESS],shippingOptionsChangeTriggers:[D.SHIPPING_OPTION],offerChangeTriggers:e?[D.OFFER]:[]}}getNonce(e){var t;const n=null===(t=this._paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.nonce;if(!n)throw new g(l.MissingPaymentToken);return Promise.resolve(n)}extraPaymentData(){return Promise.resolve(void 0)}getMerchantInfo(){const{googleMerchantName:e,googleMerchantId:t,platformToken:n}=this.getGooglePayInitializationData();return{merchantName:e,merchantId:t,authJwt:n}}getTransactionInfo(){let e;if(this._isBuyNowFlow)e=this._getCurrencyCodeOrThrow();else{const{getCartOrThrow:t}=this._paymentIntegrationService.getState();e=t().currency.code}const t=this.getGooglePayInitializationData().storeCountry;return Object.assign(Object.assign({},t&&{countryCode:t}),{currencyCode:e,totalPriceStatus:k.ESTIMATED,totalPrice:\"0\"})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData().gatewayMerchantId;if(!e)throw new p(\"Unable to proceed, gatewayMerchantId is missing.\");return{gateway:this._gatewayIdentifier,gatewayMerchantId:e}}getCardParameters(){return{allowedAuthMethods:[\"PAN_ONLY\",\"CRYPTOGRAM_3DS\"],allowedCardNetworks:this.getPaymentMethod().supportedCards.filter(E).map(e=>T[e]),billingAddressRequired:!0,billingAddressParameters:{format:\"FULL\",phoneNumberRequired:!0}}}initialize(e,t,n){return this._getPaymentMethodFn=e,this._isBuyNowFlow=Boolean(t),this._currencyCode=n,this._isBuyNowFlow&&this._getCurrencyCodeOrThrow(),Promise.resolve()}handleShippingAddressChange(e){var t,n,i,o;return x(this,void 0,void 0,function*(){e&&(e.name=e.name||\"\",e.address1=e.address1||\"\");const a=this.mapToShippingAddressRequestBody({shippingAddress:e});a&&(yield this._paymentIntegrationService.updateShippingAddress(a));const r=this._paymentIntegrationService.getState(),s=r.getConsignments();if(!(null==s?void 0:s[0]))return;const c=s[0],d=r.getStoreConfigOrThrow();this._currencyService||(this._currencyService=new P(d));const l=(c.availableShippingOptions||[]).map(this._getGooglePayShippingOption.bind(this)),u=null===(t=c.availableShippingOptions)||void 0===t?void 0:t.find(e=>e.isRecommended);if(l.length){const e=(null===(n=c.selectedShippingOption)||void 0===n?void 0:n.id)||(null==u?void 0:u.id)||(null===(i=l[0])||void 0===i?void 0:i.id);return!(null===(o=c.selectedShippingOption)||void 0===o?void 0:o.id)&&l[0]&&(yield this.handleShippingOptionChange((null==u?void 0:u.id)||l[0].id)),{defaultSelectedOptionId:e,shippingOptions:l}}})}handleShippingOptionChange(e){return x(this,void 0,void 0,function*(){if(\"shipping_option_unselected\"!==e)return this._paymentIntegrationService.selectShippingOption(e)})}getTotalPrice(){const{getCheckoutOrThrow:e,getCartOrThrow:t}=this._paymentIntegrationService.getState(),{decimalPlaces:n}=t().currency;return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.round)(e().outstandingBalance,n).toFixed(n)}handleCoupons(e){return x(this,void 0,void 0,function*(){const{redemptionCodes:t=[]}=e,{offers:n}=this.getAppliedCoupons();let i;return yield t.reduce((e,t)=>x(this,void 0,void 0,function*(){if(yield e,n.some(({redemptionCode:e})=>e===t))return;const o=yield this.applyCoupon(t);o&&(i=o)}),Promise.resolve()),yield n.reduce((e,n)=>x(this,void 0,void 0,function*(){yield e,t.includes(n.redemptionCode)||(yield this._paymentIntegrationService.removeCoupon(n.redemptionCode))}),Promise.resolve()),{newOfferInfo:this.getAppliedCoupons(),error:i}})}getAppliedCoupons(){const e=this._paymentIntegrationService.getState(),{coupons:t}=e.getCheckout()||{};return{offers:(t||[]).map(e=>{const{displayName:t,code:n}=e;return{redemptionCode:n,description:t}})}}applyCoupon(e){return x(this,void 0,void 0,function*(){let t;try{yield this._paymentIntegrationService.applyCoupon(e)}catch(e){return e instanceof Error&&(t={reason:M.OFFER_INVALID,message:e.message,intent:D.OFFER}),t}})}getGooglePayInitializationData(){return v(this.getPaymentMethod().initializationData,()=>new p(\"Missing initialization data.\"))}getPaymentMethod(){return v(this._getPaymentMethodFn,()=>new b(_.PaymentNotInitialized))()}getGatewayIdentifier(){return this._gatewayIdentifier}setGatewayIdentifier(e){this._gatewayIdentifier=e||this.getGatewayIdentifier()}_isShippingAddressRequired(){const{getCartOrThrow:e,getStoreConfig:t,getShippingAddress:n}=this._paymentIntegrationService.getState();return void 0===n()&&(i=e(),o=t(),!!i&&(!!i.lineItems.physicalItems.some(e=>e.isShippingRequired)||!(!o||!i.lineItems.customItems)&&i.lineItems.customItems.length>0));// removed by dead control flow\n var i, o; }_mapToAddressRequestBody(e,t,n,i){const{name:o,address1:a,address2:r,address3:s,locality:c,administrativeArea:d,countryCode:l,postalCode:u,phoneNumber:h}=e,[y,g]=this._getFirstAndLastName(o);return{firstName:y,lastName:g,company:t,address1:a,address2:`${r} ${s}`.trim(),city:c||d,stateOrProvince:d,stateOrProvinceCode:d,countryCode:l,postalCode:u,phone:h||n,customFields:i||[]}}_getFirstAndLastName(e){const t=e.split(\" \");return 1===t.length?[e,\"\"]:[t.slice(0,-1).join(\" \"),t[t.length-1]]}_getCurrencyCodeOrThrow(){return v(this._currencyCode,()=>new p('Unable to initialize payment because \"options.currencyCode\" argument is not provided.'))}_getGooglePayShippingOption({id:e,cost:t,description:n,additionalDescription:i}){var o;const a=null===(o=this._currencyService)||void 0===o?void 0:o.toCustomerCurrency(t);return this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-3540.googlepay_new_shipping_options_description\"]?{id:e,label:`${a||t} ${n}`,description:i}:{id:e,label:n,description:a||t}}}class G extends y{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}class R extends y{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}class B extends y{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}function j(e){return\"object\"==typeof e&&null!==e&&\"statusCode\"in e}function L(e){return Object.values(N).includes(e)}!function(e){e.ADYEN_V2=\"googlepayadyenv2\",e.ADYEN_V3=\"googlepayadyenv3\",e.AUTHORIZE_NET=\"googlepayauthorizenet\",e.BNZ=\"googlepaybnz\",e.BRAINTREE=\"googlepaybraintree\",e.PAYPAL_COMMERCE=\"googlepaypaypalcommerce\",e.BIGCOMMERCE_PAYMENTS=\"googlepay_bigcommerce_payments\",e.CHECKOUT_COM=\"googlepaycheckoutcom\",e.CYBERSOURCE_V2=\"googlepaycybersourcev2\",e.ORBITAL=\"googlepayorbital\",e.STRIPE=\"googlepaystripe\",e.STRIPE_UPE=\"googlepaystripeupe\",e.STRIPE_OCS=\"googlepaystripeocs\",e.WORLDPAY_ACCESS=\"googlepayworldpayaccess\",e.TD_ONLINE_MART=\"googlepaytdonlinemart\"}(N||(N={}));var F=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class U{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t}initialize(e){var t;return F(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId)||!L(e.methodId))throw new p('Unable to proceed because \"methodId\" is not a valid key.');this._methodId=e.methodId;const n=e[this._getMethodId()];if(!n)throw new p(\"Unable to proceed without valid options.\");let i,o=this._paymentIntegrationService.getState();try{i=o.getPaymentMethodOrThrow(this._getMethodId())}catch(e){o=yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId()),i=o.getPaymentMethodOrThrow(this._getMethodId())}try{yield this._googlePayPaymentProcessor.initialize(()=>i,this._getGooglePayClientOptions(null===(t=i.initializationData)||void 0===t?void 0:t.storeCountry))}catch(e){return}this._addPaymentButton(n)})}signIn(){return Promise.reject(new G('In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'))}signOut(){var e;return F(this,void 0,void 0,function*(){const t=null===(e=this._paymentIntegrationService.getState().getPaymentId())||void 0===e?void 0:e.providerId;t&&(yield this._googlePayPaymentProcessor.signOut(t))})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}deinitialize(){var e;return null===(e=this._paymentButton)||void 0===e||e.remove(),this._paymentButton=void 0,this._methodId=void 0,Promise.resolve()}_getGooglePayClientOptions(e){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:t,shippingAddress:n,shippingOptionData:i,offerData:o})=>F(this,void 0,void 0,function*(){const{availableTriggers:a,addressChangeTriggers:r,shippingOptionsChangeTriggers:s,offerChangeTriggers:c}=this._googlePayPaymentProcessor.getCallbackTriggers();if(!a.includes(t))return;const d=r.includes(t)?yield this._googlePayPaymentProcessor.handleShippingAddressChange(n):void 0;s.includes(t)&&(yield this._googlePayPaymentProcessor.handleShippingOptionChange(i.id));const{newOfferInfo:l,error:u}=c.includes(t)?yield this._googlePayPaymentProcessor.handleCoupons(o):{},h=u;yield this._paymentIntegrationService.loadCheckout();const y=this._googlePayPaymentProcessor.getTotalPrice(),{code:g}=this._paymentIntegrationService.getState().getCartOrThrow().currency;return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},e&&{countryCode:e}),{currencyCode:g,totalPriceStatus:k.FINAL,totalPrice:y})},d&&{newShippingOptionParameters:d}),l&&{newOfferInfo:l}),h&&{error:h})})}}}_addPaymentButton({container:e,buttonColor:t,buttonType:n,onClick:i,onError:o}){var a;this._paymentButton=null!==(a=this._paymentButton)&&void 0!==a?a:this._googlePayPaymentProcessor.addPaymentButton(e,{buttonColor:null!=t?t:\"default\",buttonType:null!=n?n:\"plain\",onClick:this._handleClick(o,i)})}_handleClick(e,t){return n=>F(this,void 0,void 0,function*(){n.preventDefault(),t&&\"function\"==typeof t&&t();try{yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(t){let n=t;if(j(t)){if(\"CANCELED\"===t.statusCode)throw new R;n=new B(JSON.stringify(t))}throw null==e||e(new B(\"An error occurred while requesting your Google Pay payment details.\")),n}})}_interactWithPaymentSheet(){return F(this,void 0,void 0,function*(){const e=yield this._googlePayPaymentProcessor.showPaymentSheet(),t=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(e),n=this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(e),i=\"/embedded-checkout\"===window.location.pathname?this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink:void 0;t&&(yield this._paymentIntegrationService.updateBillingAddress(t)),n&&(yield this._paymentIntegrationService.updateShippingAddress(n)),yield this._googlePayPaymentProcessor.setExternalCheckoutForm(this._getMethodId(),e,i)})}_getMethodId(){return v(this._methodId,()=>new b(_.PaymentNotInitialized))}}const V={\"X-Checkout-SDK-Version\":\"1.819.0\"};var q=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class H{constructor(e,t,n,i){this._scriptLoader=e,this._gateway=t,this._requestSender=n,this._formPoster=i,this._baseRequest={apiVersion:2,apiVersionMinor:0}}initialize(e,t,n,i){return q(this,void 0,void 0,function*(){this._paymentsClient=yield this._scriptLoader.getGooglePaymentsClient(e().config.testMode,t),yield this._gateway.initialize(e,n,i),this._buildButtonPayloads()})}initializeWidget(){return q(this,void 0,void 0,function*(){yield this._buildWidgetPayloads(),yield this._determineReadinessToPay(),this._prefetchGooglePaymentData()})}getNonce(e){return this._gateway.getNonce(e)}extraPaymentData(){return q(this,void 0,void 0,function*(){return this._gateway.extraPaymentData()})}addPaymentButton(e,t){const n=document.querySelector(`#${e}`);if(!n)return;const i=this._getPaymentsClient().createButton(Object.assign(Object.assign({},t),{allowedPaymentMethods:[this._getBaseCardPaymentMethod()]}));return n.appendChild(i)}showPaymentSheet(){return q(this,void 0,void 0,function*(){const e=this._getPaymentDataRequest();return this._getPaymentsClient().loadPaymentData(e)})}setExternalCheckoutXhr(e,t){return q(this,void 0,void 0,function*(){return this._setExternalCheckout(e,t)})}setExternalCheckoutForm(e,t,n){return q(this,void 0,void 0,function*(){return this._setExternalCheckout(e,t,!0,n)})}mapToBillingAddressRequestBody(e){return this._gateway.mapToBillingAddressRequestBody(e)}mapToShippingAddressRequestBody(e){return this._gateway.mapToShippingAddressRequestBody(e)}processAdditionalAction(e,t){return\"processAdditionalAction\"in this._gateway?this._gateway.processAdditionalAction(e,t):Promise.reject(e)}signOut(e){return q(this,void 0,void 0,function*(){yield this._requestSender.get(`/remote-checkout/${e}/signout`)})}getCallbackTriggers(){return this._gateway.getCallbackTriggers()}handleShippingAddressChange(e){return q(this,void 0,void 0,function*(){return this._gateway.handleShippingAddressChange(e)})}handleShippingOptionChange(e){return q(this,void 0,void 0,function*(){yield this._gateway.handleShippingOptionChange(e)})}handleCoupons(e){return q(this,void 0,void 0,function*(){return this._gateway.handleCoupons(e)})}getTotalPrice(){return this._gateway.getTotalPrice()}_setExternalCheckout(e,t,n=!1,i){return q(this,void 0,void 0,function*(){const o=\"/checkout.php\",a=Object.assign({action:\"set_external_checkout\",provider:e},yield this._gateway.mapToExternalCheckoutData(t));if(n)return new Promise(e=>{this._formPoster.postForm(i?`${i}/checkout`:o,Object.assign(Object.assign({},a),{card_information:JSON.stringify(a.card_information)}),e)});yield this._requestSender.post(o,{headers:Object.assign({Accept:\"text/html\",\"Content-Type\":\"application/x-www-form-urlencoded\"},V),body:a})})}_prefetchGooglePaymentData(){const e=this._getPaymentDataRequest();e.transactionInfo=this._gateway.getTransactionInfo(),this._getPaymentsClient().prefetchPaymentData(e)}_determineReadinessToPay(){return q(this,void 0,void 0,function*(){try{const{result:e}=yield this._getPaymentsClient().isReadyToPay(this._getIsReadyToPayRequest());if(!1===e)throw new B(\"Google Pay is not supported by the current device and browser, please try another payment method.\")}catch(e){if(e instanceof B)throw e;throw new B}})}_buildButtonPayloads(){this._baseCardPaymentMethod={type:\"CARD\",parameters:this._gateway.getCardParameters()}}_buildWidgetPayloads(){return q(this,void 0,void 0,function*(){const e=this._getBaseCardPaymentMethod();this._cardPaymentMethod=Object.assign(Object.assign({},e),{tokenizationSpecification:{type:\"PAYMENT_GATEWAY\",parameters:yield this._gateway.getPaymentGatewayParameters()}}),this._paymentDataRequest=Object.assign(Object.assign(Object.assign(Object.assign({},this._baseRequest),{allowedPaymentMethods:[this._cardPaymentMethod],transactionInfo:this._gateway.getTransactionInfo(),merchantInfo:this._gateway.getMerchantInfo()}),yield this._gateway.getRequiredData()),{callbackIntents:this._gateway.getCallbackIntents(),offerInfo:this._gateway.getAppliedCoupons()}),this._isReadyToPayRequest=Object.assign(Object.assign({},this._baseRequest),{allowedPaymentMethods:[e]})})}_getBaseCardPaymentMethod(){return this._getOrThrow(this._baseCardPaymentMethod)}_getPaymentDataRequest(){return this._getOrThrow(this._paymentDataRequest)}_getIsReadyToPayRequest(){return this._getOrThrow(this._isReadyToPayRequest)}_getPaymentsClient(){return this._getOrThrow(this._paymentsClient)}_getOrThrow(e){return v(e,()=>new b(_.PaymentNotInitialized))}}class W extends y{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}class Y{constructor(e){this._scriptLoader=e,this._window=window}getGooglePaymentsClient(e=!1,t){return n=this,i=void 0,a=function*(){if(yield this._scriptLoader.loadScript(\"https://pay.google.com/gp/p/js/pay.js\"),!this._window.google)throw new W;return void 0===this._paymentsClient&&(this._paymentsClient=new this._window.google.payments.api.PaymentsClient(Object.assign({environment:e?\"TEST\":\"PRODUCTION\"},null!=t?t:{}))),this._paymentsClient},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}function J(){return new Y((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())}const K=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new U(n,new H(J(),new z(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv2\"}]),Z=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new U(n,new H(J(),new z(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv3\"}]);class X extends z{constructor(e){super(\"authorizenet\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();return function(e){if(!function(e){return\"paymentGatewayId\"in e}(e))throw new g(l.MissingPaymentMethod)}(e),{gateway:this.getGatewayIdentifier(),gatewayMerchantId:e.paymentGatewayId}}}const Q=h(n=>new U(n,new H(J(),new X(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]),$=e=>\"object\"==typeof e&&null!==e&&\"body\"in e;var ee;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(ee||(ee={}));const te=ee;function ne(e){if(!function(e){return\"checkoutcomkey\"in e}(e))throw new g(l.MissingPaymentMethod)}var ie=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class oe extends z{constructor(e,t){super(\"checkoutltd\",e),this._requestSender=t}processAdditionalAction(e){return new Promise((t,n)=>{if($(e)&&function(e){var t;if(\"object\"!=typeof e||null===e)return!1;const n=e;return\"string\"==typeof(null===(t=n.three_ds_result)||void 0===t?void 0:t.acs_url)&&\"string\"==typeof n.three_ds_result.code}(e.body)&&\"three_d_secure_required\"===e.body.three_ds_result.code)return window.location.assign(e.body.three_ds_result.acs_url);n(e)})}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return ie(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new p(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"protocolVersion\"in e&&\"signature\"in e&&\"signedMessage\"in e}(e))throw new g(l.MissingPaymentToken)}(i),n.nonce=yield this._tokenize(i),n})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();return ne(e),{gateway:this.getGatewayIdentifier(),gatewayMerchantId:e.checkoutcomkey}}_tokenize(e){return ie(this,void 0,void 0,function*(){const t=this.getPaymentMethod().config.testMode?\"https://api.sandbox.checkout.com/tokens\":\"https://api.checkout.com/tokens\",n=this.getGooglePayInitializationData();ne(n);const{body:i}=yield this._requestSender.post(t,{credentials:!1,body:{type:\"googlepay\",token_data:e},headers:{Authorization:n.checkoutcomkey,\"Content-Type\":te.Json,\"X-XSRF-TOKEN\":null}});return i.token})}}const ae=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new U(n,new H(J(),new oe(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]);class re extends z{constructor(e){super(\"cybersource\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const se=h(n=>new U(n,new H(J(),new re(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"}]),ce=h(n=>new U(n,new H(J(),new re(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaybnz\"}]);class de extends z{constructor(e){super(\"chase\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const le=h(n=>new U(n,new H(J(),new de(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]);class ue extends p{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}const he={body:{},headers:{},status:0};class ye extends y{constructor(e,{message:t,errors:n}={}){const{body:i,headers:o,status:a}=e||he;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=i,this.headers=o,this.status=a,this.errors=n||[]}}function ge(e){if(!function(e){return\"stripeConnectedAccount\"in e&&\"stripePublishableKey\"in e&&\"stripeVersion\"in e}(e))throw new g(l.MissingPaymentMethod)}var pe=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class me extends z{constructor(e,t){super(\"stripe\",e),this.paymentIntegrationService=e,this.scriptLoader=t}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return pe(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new p(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"id\"in e}(e))throw new g(l.MissingPaymentToken)}(i),n.nonce=i.id,n})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();ge(e);const{stripeVersion:t,stripePublishableKey:n,stripeConnectedAccount:i}=e;return{gateway:this.getGatewayIdentifier(),\"stripe:version\":t,\"stripe:publishableKey\":`${n}/${i}`}}processAdditionalAction(e,t){var n,i;return pe(this,void 0,void 0,function*(){if(!t)throw new ue([\"payment\"]);if(!$(e)||(\"object\"!=typeof(o=e.body)||null===o||!(\"three_ds_result\"in o)||!(\"errors\"in o)))throw e;var o;const a=this.paymentIntegrationService.getState(),r=null===(n=a.getStoreConfig())||void 0===n?void 0:n.checkoutSettings.features[\"STRIPE-476.enable_stripe_googlepay_3ds\"];if((0,lodash__WEBPACK_IMPORTED_MODULE_2__.some)(e.body.errors,{code:\"three_d_secure_required\"})&&r){const n=this.getGooglePayInitializationData();ge(n);const{stripePublishableKey:o,stripeConnectedAccount:a}=n;this.stripeUPEClient=yield this.loadStripeJs(o,a);const r=e.body.three_ds_result.token;let s,c=!1;try{s=yield this.stripeUPEClient.confirmCardPayment(r)}catch(e){try{s=yield this.stripeUPEClient.retrievePaymentIntent(r)}catch(e){c=!0}}if(null==s?void 0:s.error){if(this._throwDisplayableStripeError(s.error),this._isCancellationError(s.error))throw new R;throw new B}if(!(null==s?void 0:s.paymentIntent)&&!c)throw new ye;return this.paymentIntegrationService.submitPayment({methodId:t,paymentData:{nonce:(null===(i=null==s?void 0:s.paymentIntent)||void 0===i?void 0:i.id)||r}})}throw e})}loadStripeJs(e,t){return pe(this,void 0,void 0,function*(){return this.stripeUPEClient?this.stripeUPEClient:this.scriptLoader.getStripeClient(e,t)})}_isCancellationError(e){var t,n;return e&&-1!==(null===(n=null===(t=e.payment_intent.last_payment_error)||void 0===t?void 0:t.message)||void 0===n?void 0:n.indexOf(\"canceled\"))}_throwDisplayableStripeError(e){if((0,lodash__WEBPACK_IMPORTED_MODULE_2__.includes)([\"card_error\",\"invalid_request_error\",\"validation_error\"],e.type))throw new Error(e.message)}}var fe=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class we{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}getStripeClient(e,t,n){return fe(this,void 0,void 0,function*(){let i=this.stripeWindow.bcStripeClient;return i||(i=(yield this.load())(e,{stripeAccount:t,locale:n,betas:[\"payment_element_beta_2\",\"alipay_pm_beta_1\",\"link_default_integration_beta_1\",\"shipping_address_element_beta_1\",\"address_element_beta_1\"],apiVersion:\"2020-03-02;alipay_beta=v1;link_beta=v1\"}),Object.assign(this.stripeWindow,{bcStripeClient:i})),i})}load(){return fe(this,void 0,void 0,function*(){if(this.stripeWindow.Stripe||(yield this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\")),!this.stripeWindow.Stripe)throw new W;return this.stripeWindow.Stripe})}}const Pe=h(n=>new U(n,new H(J(),new me(n,new we((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeocs\"}]),ve=h(n=>new U(n,new H(J(),new me(n,new we((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripeupe\"}]);class _e extends z{constructor(e){super(\"worldpay\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const be=h(n=>new U(n,new H(J(),new _e(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]);function Ce(e,t,n=!0){var i;return null!==(i=e[t])&&void 0!==i?i:n}const Se=\"3.128.0\",Ie=\"3.123.2\",Oe=\"3.106.0\";class ke{constructor(e){this.paymentIntegrationService=e,this.braintreeWindow=window}getSDKVersion(){const e=this.paymentIntegrationService.getState().getStoreConfig(),t=(null==e?void 0:e.checkoutSettings.features)||{};return this.getPreloadedSDKVersion()||(Ce(t,\"PAYPAL-5809.braintree_hosted_fields_fix_version\")?Se:Ce(t,\"PAYPAL-5636.update_braintree_sdk_version\")?Ie:Oe)}getPreloadedSDKVersion(){const e=this.braintreeWindow.braintree;if(e){const t=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.find)(Object.values(e),e=>!!e.VERSION);return null==t?void 0:t.VERSION}}}class Te extends y{constructor(e){super(e||\"Unsupported browser error\"),this.name=\"UnsupportedBrowserError\",this.type=\"unsupported_browser\"}}var Ae,Me,De,Ee,Ne,xe,ze;!function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(Ae||(Ae={})),function(e){e.Completed=\"COMPLETED\",e.Pending=\"PENDING\",e.Failed=\"FAILED\"}(Me||(Me={})),function(e){e.TRUSTLY=\"trustly\"}(De||(De={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"cancelled\",e.UNRECOGNIZED=\"unrecognized\"}(Ee||(Ee={})),function(e){e.Customer=\"CUSTOMER\",e.Merchant=\"MERCHANT\",e.Network=\"NETWORK\",e.Internal=\"INTERNAL\",e.Unknown=\"UNKNOWN\"}(Ne||(Ne={})),function(e){e.KountNotEnabled=\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"}(xe||(xe={})),function(e){e.Visa=\"visa\",e.Mastercard=\"mastercard\",e.AmericanExpress=\"american-express\",e.DinersClub=\"diners-club\",e.Discover=\"discover\",e.Jcb=\"jcb\",e.UnionPay=\"union-pay\",e.Maestro=\"maestro\",e.Elo=\"elo\",e.Mir=\"mir\",e.Hiper=\"hiper\",e.Hipercard=\"hipercard\"}(ze||(ze={}));var Ge,Re,Be,je=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Le{constructor(e){this.braintreeScriptLoader=e}initialize(e){this.setClientToken(e)}deinitialize(){return je(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollector),this.dataCollector=void 0})}getClient(){return je(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=yield t.create({authorization:e})}return this.client})}getDataCollectorOrThrow(e){return je(this,void 0,void 0,function*(){const t={deviceData:void 0,teardown:()=>Promise.resolve()};if(!this.dataCollector)try{const t=yield this.getClient(),n=yield this.braintreeScriptLoader.loadDataCollector(),i=Object.assign({client:t,kount:!0},e);this.dataCollector=yield n.create(i)}catch(e){if(function(e){return Boolean(\"object\"==typeof e&&null!==e&&(\"type\"in e||\"message\"in e||\"code\"in e))}(e)&&e.code===xe.KountNotEnabled)return t;throw e}return this.dataCollector})}getBraintreeGooglePayment(){return je(this,void 0,void 0,function*(){if(!this.googlePayment){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadGooglePayment()]);this.googlePayment=yield t.create({client:e})}return this.googlePayment})}getBraintreeThreeDS(){return je(this,void 0,void 0,function*(){if(!this.threeDS){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]);this.threeDS=yield t.create({client:e,version:2})}return this.threeDS})}getBraintreeLocalPayment(e){return je(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment){const[t,n]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadLocalPayment()]);this.braintreeLocalPayment=yield new Promise((i,o)=>{n.create({client:t,merchantAccountId:e},(e,t)=>{e&&o(e),i(t)})})}return this.braintreeLocalPayment})}getUsBankAccount(){return je(this,void 0,void 0,function*(){if(!this.usBankAccount){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadUsBankAccount();this.usBankAccount=yield t.create({client:e})}return this.usBankAccount})}getBraintreeVisaCheckout(){return this.visaCheckout||(this.visaCheckout=Promise.all([this.getClient(),this.braintreeScriptLoader.loadVisaCheckout()]).then(([e,t])=>t.create({client:e}))),this.visaCheckout}getVisaCheckoutSdk(e){return je(this,void 0,void 0,function*(){return this.visaCheckoutSDK||(this.visaCheckoutSDK=yield this.braintreeScriptLoader.loadVisaCheckoutSdk(e)),this.visaCheckoutSDK})}getVenmoCheckoutOrThrow(){return je(this,void 0,void 0,function*(){if(!this.braintreeVenmo){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadVenmoCheckout(),n={client:e,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},i=yield t.create(n);if(!i.isBrowserSupported())throw new Te;this.braintreeVenmo=i}return this.braintreeVenmo})}setClientToken(e){this.clientToken=e}getClientTokenOrThrow(){if(!this.clientToken)throw new b(_.PaymentNotInitialized);return this.clientToken}teardownModule(e){return e?e.teardown():Promise.resolve()}}!function(e){e.Sandbox=\"sandbox\",e.Production=\"production\"}(Ge||(Ge={})),function(e){e.Client=\"client\",e.DataCollector=\"dataCollector\",e.Fastlane=\"fastlane\",e.GooglePayment=\"googlePayment\",e.HostedFields=\"hostedFields\",e.LocalPayment=\"localPayment\",e.Paypal=\"paypal\",e.PaypalCheckout=\"paypalCheckout\",e.ThreeDSecure=\"threeDSecure\",e.UsBankAccount=\"usBankAccount\",e.Venmo=\"venmo\",e.VisaCheckout=\"visaCheckout\"}(Re||(Re={})),function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\"}(Be||(Be={}));const Fe={[Oe]:{[Re.Client]:\"sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt\",[Re.PaypalCheckout]:\"sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O\",[Re.Paypal]:\"sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+\",[Re.LocalPayment]:\"sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT\",[Re.DataCollector]:\"sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV\",[Re.UsBankAccount]:\"sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ\",[Re.GooglePayment]:\"sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe\",[Re.ThreeDSecure]:\"sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB\",[Re.VisaCheckout]:\"sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT\",[Re.Venmo]:\"sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov\",[Re.HostedFields]:\"sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy\",[Re.Fastlane]:\"sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa\"},[Ie]:{[Re.Client]:\"sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO\",[Re.PaypalCheckout]:\"sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/\",[Re.Paypal]:\"sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt\",[Re.LocalPayment]:\"sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH\",[Re.DataCollector]:\"sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO\",[Re.UsBankAccount]:\"sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW\",[Re.GooglePayment]:\"sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO\",[Re.ThreeDSecure]:\"sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym\",[Re.VisaCheckout]:\"sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS\",[Re.Venmo]:\"sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU\",[Re.HostedFields]:\"sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P\",[Re.Fastlane]:\"sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y\"},[Se]:{[Re.Client]:\"sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq\",[Re.PaypalCheckout]:\"sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh\",[Re.Paypal]:\"sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH\",[Re.LocalPayment]:\"sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC\",[Re.DataCollector]:\"sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc\",[Re.UsBankAccount]:\"sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F\",[Re.GooglePayment]:\"sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i\",[Re.ThreeDSecure]:\"sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D\",[Re.VisaCheckout]:\"sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv\",[Re.Venmo]:\"sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz\",[Re.HostedFields]:\"sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z\",[Re.Fastlane]:\"sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr\"}};var Ue=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ve{constructor(e,t,n){this.scriptLoader=e,this.braintreeHostWindow=t,this.braintreeSDKVersionManager=n}loadClient(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.Client,\"client.min.js\")})}loadFastlane(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.Fastlane,\"fastlane.min.js\")})}loadPaypalCheckout(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.PaypalCheckout,\"paypal-checkout.min.js\")})}loadPaypal(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.Paypal,\"paypal.min.js\")})}loadLocalPayment(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.LocalPayment,\"local-payment.min.js\")})}loadDataCollector(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.DataCollector,\"data-collector.min.js\")})}loadUsBankAccount(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.UsBankAccount,\"us-bank-account.min.js\")})}loadGooglePayment(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.GooglePayment,\"google-payment.min.js\")})}load3DS(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.ThreeDSecure,\"three-d-secure.min.js\")})}loadVisaCheckout(){return this.loadBraintreeModuleOrThrow(Re.VisaCheckout,\"visa-checkout.min.js\")}loadVenmoCheckout(){return this.loadBraintreeModuleOrThrow(Re.Venmo,\"venmo.min.js\")}loadHostedFields(){return Ue(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(Re.HostedFields,\"hosted-fields.min.js\")})}loadVisaCheckoutSdk(e){return Ue(this,void 0,void 0,function*(){if(this.braintreeHostWindow.V)return this.braintreeHostWindow.V;const t=e?\"sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm\":\"sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6\";return this.scriptLoader.loadScript(`//${e?\"sandbox-\":\"\"}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,{async:!0,attributes:{integrity:t,crossorigin:\"anonymous\"}}).then(()=>{if(!this.braintreeHostWindow.V)throw new W;return this.braintreeHostWindow.V})})}loadBraintreeModuleOrThrow(e,t){return Ue(this,void 0,void 0,function*(){let n=this.getBraintreeModule(e);if(n)return n;const i=this.braintreeSDKVersionManager.getSDKVersion(),o=`//js.braintreegateway.com/web/${i}/js/${t}`,a=i in Fe?this.getIntegrityValuesByModuleName(e,i):void 0;if(yield this.scriptLoader.loadScript(o,a?{async:!0,attributes:{integrity:a,crossorigin:\"anonymous\"}}:void 0),n=this.getBraintreeModule(e),!n)throw new W;return n})}getBraintreeModule(e){var t;return null===(t=this.braintreeHostWindow.braintree)||void 0===t?void 0:t[e]}getIntegrityValuesByModuleName(e,t){const n=Fe[t][e];if(!n)throw new Error(\"Unexpected fileName value\");return n}}class qe{constructor(e){const t=new Promise((e,t)=>{this.cancel=t});this.promise=Promise.race([e,t])}}var He=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class We extends z{constructor(e,t){super(\"braintree\",e),this._braintreeSdk=t,this._methodId=N.BRAINTREE,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return He(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);let o=i.getPaymentMethod.call(this);if(o.clientToken||(o=(yield this._service.loadPaymentMethod(this._methodId)).getPaymentMethodOrThrow(this._methodId)),!o.clientToken||!o.initializationData)throw new g(l.MissingPaymentMethod);return this._braintreeSdk.initialize(o.clientToken),this._braintreeGooglePayment=yield this._braintreeSdk.getBraintreeGooglePayment(),Promise.resolve()})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});var n;return He(this,void 0,void 0,function*(){const i=yield t.getNonce.call(this,e),{clientToken:o,initializationData:a}=t.getPaymentMethod.call(this);if(!o||!a||!(null===(n=a.card_information)||void 0===n?void 0:n.bin))throw new g(l.MissingPaymentMethod);const{isThreeDSecureEnabled:r,card_information:{bin:s,isNetworkTokenized:c}}=a;if(r&&!c){const e=yield this._braintreeSdk.getBraintreeThreeDS(),{orderAmount:t}=this._service.getState().getOrderOrThrow();return(yield this._braintreePresent3DSChallenge(e,t,i,s)).nonce}return i})}extraPaymentData(){return He(this,void 0,void 0,function*(){return{deviceSessionId:yield this._getBraintreeDeviceData()}})}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return He(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new p(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"androidPayCards\"in e}(e))throw new g(l.MissingPaymentToken)}(i),n.nonce=i.androidPayCards[0].nonce,n.card_information.bin=i.androidPayCards[0].details.bin,n.card_information.isNetworkTokenized=i.androidPayCards[0].details.isNetworkTokenized,n})}getCardParameters(){return super.getCardParameters()}getPaymentGatewayParameters(){const e=Object.create(null,{getMerchantInfo:{get:()=>super.getMerchantInfo},getTransactionInfo:{get:()=>super.getTransactionInfo},getRequiredData:{get:()=>super.getRequiredData}});return He(this,void 0,void 0,function*(){return this.getBraintreeGooglePayment().createPaymentDataRequest(Object.assign({merchantInfo:e.getMerchantInfo.call(this),transactionInfo:e.getTransactionInfo.call(this),cardRequirements:{billingAddressRequired:!0,billingAddressFormat:\"FULL\"}},yield e.getRequiredData.call(this))).paymentMethodTokenizationParameters.parameters})}getBraintreeGooglePayment(){if(!this._braintreeGooglePayment)throw new g(l.MissingPaymentMethod);return this._braintreeGooglePayment}_getBraintreeDeviceData(){return He(this,void 0,void 0,function*(){const{deviceData:e}=yield this._braintreeSdk.getDataCollectorOrThrow();return e})}_braintreePresent3DSChallenge(e,t,n,i){return new qe(e.verifyCard({amount:t,bin:i,nonce:n,onLookupComplete:(e,t)=>{t()}})).promise}}const Ye=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),o=window,a=new ke(n),r=new Le(new Ve((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)(),o,a));return new U(n,new H(J(),new We(n,r),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]);var Je=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ke{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,n){return Je(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const i=this.getPayPalFastlaneSdkConfiguration(e,t,n);if(yield this.loadPayPalSdk(i),!this.window.paypalFastlaneSdk)throw new W}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,n,i){return Je(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||i){const i=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n);yield this.loadPayPalSdk(i)}if(!this.window.paypalGooglePay)throw new W;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return Je(this,void 0,void 0,function*(){if(!this.window.paypalApms){const n=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(n),!this.window.paypalApms)throw new W}return this.window.paypalApms})}getPayPalMessages(e,t){return Je(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const n=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(n)}if(!this.window.paypalMessages)throw new W;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return Je(this,void 0,void 0,function*(){const n=this.transformConfig(e),i=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(n).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:i})})}getPayPalFastlaneSdkConfiguration(e,t,n){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new g(l.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,attributionId:c}=o;return{options:{\"client-id\":r,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"buttons\",\"payment-fields\",\"hosted-fields\",\"three-domain-secure\"],currency:t,intent:a},attributes:{\"data-client-metadata-id\":n.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":c,\"data-sdk-client-token\":i}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n=!0){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new g(l.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,buyerCountry:c,attributionId:d,isHostedCheckoutEnabled:u,isDeveloperModeApplicable:h}=o,y=u||n;return{options:Object.assign({\"client-id\":r,\"merchant-id\":s,commit:y,components:[\"googlepay\"],currency:t,intent:a},h&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":d,\"data-client-token\":i,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new g(l.MissingPaymentMethod);const{intent:i,clientId:o,merchantId:a,buyerCountry:r,attributionId:s,isDeveloperModeApplicable:c,availableAlternativePaymentMethods:d=[],enabledAlternativePaymentMethods:u=[]}=n,h=u,y=d.filter(e=>!u.includes(e));return{options:Object.assign({\"client-id\":o,\"merchant-id\":a,\"enable-funding\":h.length>0?h:void 0,\"disable-funding\":y.length>0?y:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:i},c&&{\"buyer-country\":r}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new g(l.MissingPaymentMethod);const{clientId:i,merchantId:o,attributionId:a,isDeveloperModeApplicable:r,buyerCountry:s}=n;return{options:Object.assign({\"client-id\":i,\"merchant-id\":o,components:[\"messages\"],currency:t},r&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":a}}}transformConfig(e){let t={};return Object.keys(e).forEach(n=>{const i=e[n];null==i||\"\"===i||Array.isArray(i)&&0===i.length||(t=Object.assign(Object.assign({},t),{[n]:Array.isArray(i)?i.join(\",\"):i}))}),t}}function Ze(e){if(!function(e){return!!e.initializationData&&\"attributionId\"in e.initializationData&&\"isVenmoEnabled\"in e.initializationData&&\"isGooglePayEnabled\"in e.initializationData&&\"isPayPalCreditAvailable\"in e.initializationData}(e))throw new g(l.MissingPaymentMethod)}var Xe=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Qe extends z{constructor(e,t){super(\"paypalsb\",e),this.payPalCommerceSdk=t,this.service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});var o,a,r,s,c;return Xe(this,void 0,void 0,function*(){const d=null!==(a=null===(o=this.service.getState().getStoreConfig())||void 0===o?void 0:o.currency.code)&&void 0!==a?a:n;if(!d)throw new g(l.MissingPaymentMethod);yield i.initialize.call(this,e,t,d);const u=i.getPaymentMethod.call(this);if(!u.initializationData)throw new g(l.MissingPaymentMethod);Ze(u);const h=yield this.payPalCommerceSdk.getPayPalGooglePaySdk(u,d);this.googlepayConfig=yield h.Googlepay().config();const{allowedPaymentMethods:y}=this.googlepayConfig;this.setGatewayIdentifier(null===(c=null===(s=null===(r=y[0])||void 0===r?void 0:r.tokenizationSpecification)||void 0===s?void 0:s.parameters)||void 0===c?void 0:c.gateway)})}getPaymentGatewayParameters(){if(this.googlepayConfig){const{allowedPaymentMethods:e}=this.googlepayConfig,{gatewayMerchantId:t}=e[0].tokenizationSpecification.parameters;return{gateway:this.getGatewayIdentifier(),gatewayMerchantId:t}}return{gateway:this.getGatewayIdentifier()}}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return Xe(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n})}}const $e=h(n=>new U(n,new H(J(),new Qe(n,new Ke((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaypaypalcommerce\"}]);var et=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class tt{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,n){return et(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const i=this.getPayPalFastlaneSdkConfiguration(e,t,n);if(yield this.loadPayPalSdk(i),!this.window.paypalFastlaneSdk)throw new W}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,n,i){return et(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||i){const i=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n);yield this.loadPayPalSdk(i)}if(!this.window.paypalGooglePay)throw new W;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return et(this,void 0,void 0,function*(){if(!this.window.paypalApms){const n=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(n),!this.window.paypalApms)throw new W}return this.window.paypalApms})}getPayPalMessages(e,t){return et(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const n=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(n)}if(!this.window.paypalMessages)throw new W;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return et(this,void 0,void 0,function*(){const n=this.transformConfig(e),i=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(n).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:i})})}getPayPalFastlaneSdkConfiguration(e,t,n){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new g(l.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,attributionId:c}=o;return{options:{\"client-id\":r,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"three-domain-secure\"],currency:t,intent:a},attributes:{\"data-client-metadata-id\":n.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":c,\"data-sdk-client-token\":i}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n=!0){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new g(l.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,buyerCountry:c,attributionId:d,isHostedCheckoutEnabled:u,isDeveloperModeApplicable:h}=o,y=u||n;return{options:Object.assign({\"client-id\":r,\"merchant-id\":s,commit:y,components:[\"googlepay\"],currency:t,intent:a},h&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":d,\"data-client-token\":i,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new g(l.MissingPaymentMethod);const{intent:i,clientId:o,merchantId:a,buyerCountry:r,attributionId:s,isDeveloperModeApplicable:c,availableAlternativePaymentMethods:d=[],enabledAlternativePaymentMethods:u=[]}=n,h=this.filterFundingOptions(u),y=this.filterFundingOptions(d.filter(e=>!u.includes(e)));return{options:Object.assign({\"client-id\":o,\"merchant-id\":a,\"enable-funding\":h.length>0?h:void 0,\"disable-funding\":y.length>0?y:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:i},c&&{\"buyer-country\":r}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new g(l.MissingPaymentMethod);const{clientId:i,merchantId:o,attributionId:a,isDeveloperModeApplicable:r,buyerCountry:s}=n;return{options:Object.assign({\"client-id\":i,\"merchant-id\":o,components:[\"messages\"],currency:t},r&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":a}}}filterFundingOptions(e){const t=[\"klarna\"];return e?e.filter(e=>!t.includes(e)):[]}transformConfig(e){let t={};return Object.keys(e).forEach(n=>{const i=e[n];null==i||\"\"===i||Array.isArray(i)&&0===i.length||(t=Object.assign(Object.assign({},t),{[n]:Array.isArray(i)?i.join(\",\"):i}))}),t}}var nt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class it extends z{constructor(e,t){super(\"googlepay_bigcommerce_payments\",e),this.payPalSdkHelper=t,this.service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});var o,a,r,s,c;return nt(this,void 0,void 0,function*(){const d=null!==(a=null===(o=this.service.getState().getStoreConfig())||void 0===o?void 0:o.currency.code)&&void 0!==a?a:n;if(!d)throw new g(l.MissingPaymentMethod);yield i.initialize.call(this,e,t,d);const u=i.getPaymentMethod.call(this);if(!u.initializationData)throw new g(l.MissingPaymentMethod);Ze(u);const h=yield this.payPalSdkHelper.getPayPalGooglePaySdk(u,d);this.googlepayConfig=yield h.Googlepay().config();const{allowedPaymentMethods:y}=this.googlepayConfig;this.setGatewayIdentifier(null===(c=null===(s=null===(r=y[0])||void 0===r?void 0:r.tokenizationSpecification)||void 0===s?void 0:s.parameters)||void 0===c?void 0:c.gateway)})}getPaymentGatewayParameters(){if(this.googlepayConfig){const{allowedPaymentMethods:e}=this.googlepayConfig,{gatewayMerchantId:t}=e[0].tokenizationSpecification.parameters;return{gateway:this.getGatewayIdentifier(),gatewayMerchantId:t}}return{gateway:this.getGatewayIdentifier()}}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return nt(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n})}}const ot=h(n=>new U(n,new H(J(),new it(n,new tt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepay_bigcommerce_payments\"}]);function at(){const{navigator:e}=window;let t;return t=e.language?e.language:e.userLanguage,{color_depth:window.screen.colorDepth||24,java_enabled:\"function\"==typeof e.javaEnabled&&e.javaEnabled(),language:t,screen_height:window.screen.height,screen_width:window.screen.width,time_zone_offset:(new Date).getTimezoneOffset().toString()}}var rt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class st extends z{constructor(e,t){super(\"worldlinena\",e),this.formPoster=t}extraPaymentData(){return rt(this,void 0,void 0,function*(){return Promise.resolve({browser_info:at()})})}processAdditionalAction(e){return rt(this,void 0,void 0,function*(){if(!function(e){return $(e)&&(t=e.body,(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isObject)(t)&&\"object\"==typeof t&&\"errors\"in t&&\"three_ds_result\"in t&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isArray)(t.errors)&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.some)(t.errors,{code:\"three_d_secure_required\"}));// removed by dead control flow\n var t; }(e))throw e;const{three_ds_result:t}=e.body,{acs_url:n,payer_auth_request:i,merchant_data:r}=t||{};if(!n||!i||!r)throw new ue([\"formUrl\",\"threeDSSessionData\",\"creq\"]);return new Promise(e=>{this.formPoster.postForm(n,{threeDSSessionData:i,creq:r},e,\"_top\")})})}}const ct=h(n=>new U(n,new H(J(),new st(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);class dt{constructor(e,t,n=window){this._scriptLoader=e,this._stylesheetLoader=t,this._window=n}load(e){var t,n,i,o,a,r;return i=this,o=void 0,r=function*(){if(yield Promise.all([this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${null!==(t=e.environment)&&void 0!==t?t:\"\"}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,{prepend:!1,attributes:{integrity:\"sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE\",crossorigin:\"anonymous\"}}),this._scriptLoader.loadScript(`https://checkoutshopper-${null!==(n=e.environment)&&void 0!==n?n:\"\"}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,{async:!0,attributes:{integrity:\"sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA\",crossorigin:\"anonymous\"}})]),!this._window.AdyenCheckout)throw new W;return new this._window.AdyenCheckout(e)},new((a=void 0)||(a=Promise))(function(e,t){function n(e){try{c(r.next(e))}catch(e){t(e)}}function s(e){try{c(r.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(n,s)}c((r=r.apply(i,o||[])).next())})}}function lt(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e&&Array.isArray(e.errors)&&\"code\"in e.errors[0]&&\"string\"==typeof e.errors[0].code&&\"provider_data\"in e&&\"object\"==typeof e.provider_data}var ut=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class ht extends z{constructor(e,t){super(\"adyen\",e),this._scriptLoader=t,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return ut(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);const o=i.getPaymentMethod.call(this),a=this._service.getState().getStoreConfig();if(!a)throw new g(l.MissingCheckoutConfig);return this._adyenClient=yield this._scriptLoader.load({environment:o.config.testMode?\"test\":\"live\",locale:a.storeProfile.storeLanguage}),Promise.resolve()})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});return ut(this,void 0,void 0,function*(){const n=yield t.getNonce.call(this,e),i=t.getPaymentMethod.call(this);return JSON.stringify({type:i.method,googlePayToken:n,browser_info:at()})})}processAdditionalAction(e){return ut(this,void 0,void 0,function*(){if(!$(e)||!lt(e.body))throw e;const t=yield this._handleAction(e.body.provider_data);try{return yield this._service.submitPayment(t)}catch(e){return this.processAdditionalAction(e)}})}_handleAction(e){return new Promise((t,n)=>{const i=JSON.parse(e.action);this._getAdyenClient().createFromAction(i,{onAdditionalDetails:e=>{const n={methodId:i.paymentMethodType,paymentData:{nonce:JSON.stringify(e.data)}};t(n)},size:\"05\",onError:e=>n(e)}).mount(\"body\"),n(new R)})}_getAdyenClient(){if(!this._adyenClient)throw new b(_.PaymentNotInitialized);return this._adyenClient}}class yt extends y{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}const gt={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},pt={position:\"fixed\",\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"},mt=\"embedded-checkout-loading-indicator-rotation\";class ft{constructor(e){this.styles=Object.assign(Object.assign({},gt),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${mt} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(n=>{e.style.setProperty(n,t[n])})}defineAnimation(){var e;if(document.getElementById(mt))return;const t=document.createElement(\"style\");t.id=mt,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${mt} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}var wt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Pt{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t,this._loadingIndicator=new ft({containerStyles:pt})}initialize(e){var t;return wt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId)||!L(e.methodId))throw new p('Unable to proceed because \"methodId\" is not a valid key.');this._methodId=e.methodId;const n=e[this._getMethodId()];if(!(null==n?void 0:n.walletButton))throw new p(\"Unable to proceed without valid options.\");const{walletButton:i,loadingContainerId:o}=n,a=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(e);o<i.length;o++)t.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(e,i[o])&&(n[i[o]]=e[i[o]])}return n}(n,[\"walletButton\",\"loadingContainerId\"]);this._loadingIndicatorContainer=o,yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());const r=this._paymentIntegrationService.getState().getPaymentMethodOrThrow(this._getMethodId());yield this._googlePayPaymentProcessor.initialize(()=>r,this._getGooglePayClientOptions(null===(t=r.initializationData)||void 0===t?void 0:t.storeCountry)),this._addPaymentButton(i,a)})}execute({payment:e}){return wt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new ue([\"payment\"]);yield this._paymentIntegrationService.submitOrder();const t=yield this._googlePayPaymentProcessor.getNonce(e.methodId),n=yield this._googlePayPaymentProcessor.extraPaymentData();try{yield this._paymentIntegrationService.submitPayment(Object.assign(Object.assign({},e),{paymentData:Object.assign({nonce:t},n)}))}catch(t){yield this._googlePayPaymentProcessor.processAdditionalAction(t,e.methodId)}})}finalize(){return Promise.reject(new yt)}deinitialize(){var e;return this._clickListener&&(null===(e=this._paymentButton)||void 0===e||e.removeEventListener(\"click\",this._clickListener)),this._paymentButton=void 0,this._clickListener=void 0,this._methodId=void 0,Promise.resolve()}_addPaymentButton(e,t){if(this._paymentButton)return;const n=document.getElementById(e);if(!n)throw new p(\"Unable to proceed without a walletButton.\");this._paymentButton=n,this._clickListener=this._handleClick(t),this._paymentButton.addEventListener(\"click\",this._clickListener)}_handleClick({onPaymentSelect:e,onError:t}){return n=>wt(this,void 0,void 0,function*(){n.preventDefault();try{yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(e){let n=e;if(this._toggleLoadingIndicator(!1),j(e)){if(\"CANCELED\"===e.statusCode)throw new R;n=new B(JSON.stringify(e))}throw null==t||t(new B(\"An error occurred while requesting your Google Pay payment details.\")),n}null==e||e()})}_interactWithPaymentSheet(){return wt(this,void 0,void 0,function*(){const e=yield this._googlePayPaymentProcessor.showPaymentSheet();this._toggleLoadingIndicator(!0);const t=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(e);t&&(yield this._paymentIntegrationService.updateBillingAddress(t)),yield this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(),e),yield this._paymentIntegrationService.loadCheckout(),yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId()),this._toggleLoadingIndicator(!1)})}_getMethodId(){return v(this._methodId,()=>new b(_.PaymentNotInitialized))}_getIsSignedInOrThrow(){return wt(this,void 0,void 0,function*(){try{return!!(yield this._googlePayPaymentProcessor.getNonce(this._getMethodId()))}catch(e){if(e instanceof g&&e.subtype===l.MissingPaymentToken)return!1;throw e}})}_handleOfferTrigger(e){return wt(this,void 0,void 0,function*(){let t=!1,n=\"Sign in to Google Pay first to apply or remove promo codes.\";try{t=yield this._getIsSignedInOrThrow()}catch(e){e instanceof g&&(n=e.message)}if(t){const{newOfferInfo:t,error:n}=yield this._googlePayPaymentProcessor.handleCoupons(e);return{newOfferInfo:t,error:n}}return{error:{reason:M.OFFER_INVALID,message:n,intent:D.OFFER}}})}_getGooglePayClientOptions(e){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:t,offerData:n})=>wt(this,void 0,void 0,function*(){const i=this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-2875.googlepay_coupons_handling\"]||!1;if(t!==D.INITIALIZE&&(!i||t!==D.OFFER))return;const{offerChangeTriggers:o}=this._googlePayPaymentProcessor.getCallbackTriggers(),{newOfferInfo:a,error:s}=o.includes(t)?yield this._handleOfferTrigger(n):{},c=s;yield this._paymentIntegrationService.loadCheckout();const{getCheckoutOrThrow:d,getCartOrThrow:l}=this._paymentIntegrationService.getState(),{code:u,decimalPlaces:h}=l().currency,y=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.round)(d().outstandingBalance,h).toFixed(h);return Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},e&&{countryCode:e}),{currencyCode:u,totalPriceStatus:k.FINAL,totalPrice:y})},a&&{newOfferInfo:a}),c&&{error:c})})}}}_toggleLoadingIndicator(e){e&&this._loadingIndicatorContainer?this._loadingIndicator.show(this._loadingIndicatorContainer):this._loadingIndicator.hide()}}const vt=h(n=>new Pt(n,new H(J(),new ht(n,new dt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)(),(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getStylesheetLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayadyenv2\"}]);class _t{constructor(e,t,n=window){this._scriptLoader=e,this._stylesheetLoader=t,this._window=n}load(e){var t,n,i,o,a,r;return i=this,o=void 0,r=function*(){if(yield Promise.all([this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${null!==(t=e.environment)&&void 0!==t?t:\"\"}.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,{prepend:!1,attributes:{integrity:\"sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9\",crossorigin:\"anonymous\"}}),this._scriptLoader.loadScript(`https://checkoutshopper-${null!==(n=e.environment)&&void 0!==n?n:\"\"}.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,{async:!0,attributes:{integrity:\"sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf\",crossorigin:\"anonymous\"}})]),!this._window.AdyenCheckout)throw new W;return yield this._window.AdyenCheckout(e)},new((a=void 0)||(a=Promise))(function(e,t){function n(e){try{c(r.next(e))}catch(e){t(e)}}function s(e){try{c(r.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(n,s)}c((r=r.apply(i,o||[])).next())})}}var bt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ct extends z{constructor(e,t){super(\"adyen\",e),this._scriptLoader=t,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return bt(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);const o=i.getPaymentMethod.call(this),a=this._service.getState().getStoreConfig();if(!a)throw new g(l.MissingCheckoutConfig);return this._adyenClient=yield this._scriptLoader.load({environment:o.config.testMode?\"test\":\"live\",locale:a.storeProfile.storeLanguage}),Promise.resolve()})}processAdditionalAction(e){return bt(this,void 0,void 0,function*(){if(!$(e)||!lt(e.body))throw e;const t=yield this._handleAction(e.body.provider_data);try{return yield this._service.submitPayment(t)}catch(e){return this.processAdditionalAction(e)}})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});return bt(this,void 0,void 0,function*(){const n=yield t.getNonce.call(this,e),i=t.getPaymentMethod.call(this);return JSON.stringify({type:i.method,googlePayToken:n,browser_info:at()})})}_handleAction(e){return new Promise((t,n)=>{const i=JSON.parse(e.action);this._getAdyenClient().createFromAction(i,{onAdditionalDetails:e=>{const n={methodId:i.paymentMethodType,paymentData:{nonce:JSON.stringify(e.data)}};t(n)},size:\"05\",onError:e=>n(e)}).mount(\"body\"),n(new R)})}_getAdyenClient(){if(!this._adyenClient)throw new b(_.PaymentNotInitialized);return this._adyenClient}}const St=h(n=>new Pt(n,new H(J(),new Ct(n,new _t((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)(),(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getStylesheetLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayadyenv3\"}]),It=h(n=>new Pt(n,new H(J(),new X(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]),Ot=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Pt(n,new H(J(),new oe(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]),kt=h(n=>new Pt(n,new H(J(),new re(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"},{id:\"googlepaybnz\"}]),Tt=h(n=>new Pt(n,new H(J(),new de(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]),At=h(n=>new Pt(n,new H(J(),new me(n,new we((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeupe\"},{id:\"googlepaystripeocs\"}]),Mt=h(n=>new Pt(n,new H(J(),new _e(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]),Dt=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),o=window,a=new ke(n),r=new Le(new Ve((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)(),o,a));return new Pt(n,new H(J(),new We(n,r),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]),Et=\"This API endpoint is for internal use only and may change in the future\";var Nt,xt;!function(e){e.Approved=\"APPROVED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\"}(Nt||(Nt={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(xt||(xt={}));var zt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Gt extends Pt{constructor(e,t,n,i){super(e,t),this._payPalCommerceSdk=n,this._requestSender=i}execute({payment:e}){return zt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new ue([\"payment\"]);const t=this._paymentIntegrationService.getState(),n=t.getCartOrThrow().id,{initializationData:i}=t.getPaymentMethodOrThrow(this._getMethodId()),{orderId:o}=yield this.getOrderId(n),{card_information:a}=i||{},r=yield this._googlePayPaymentProcessor.getNonce(e.methodId),s={tokenizationData:{type:\"PAYMENT_GATEWAY\",token:atob(r)},info:{cardNetwork:(null==a?void 0:a.type)||\"\",cardDetails:(null==a?void 0:a.number)||\"\"},type:\"CARD\"};yield this.confirmOrder(o,s),yield this._paymentIntegrationService.submitOrder();try{const t={formattedPayload:{method_id:e.methodId,paypal_account:{order_id:o}}};yield this._paymentIntegrationService.submitPayment({methodId:e.methodId,paymentData:t})}catch(e){yield this._googlePayPaymentProcessor.processAdditionalAction(e)}})}confirmOrder(e,t){return zt(this,void 0,void 0,function*(){const n=this._paymentIntegrationService.getState(),i=n.getPaymentMethodOrThrow(this._getMethodId());if(!i.initializationData)throw new g(l.MissingPaymentMethod);const o=n.getCartOrThrow().currency.code,a=yield this._payPalCommerceSdk.getPayPalGooglePaySdk(i,o,!0),{status:r}=yield a.Googlepay().confirmOrder({orderId:e,paymentMethodData:t});if(r===Nt.PayerActionRequired)return yield a.Googlepay().initiatePayerAction({orderId:e}),Promise.resolve();if(r!==Nt.Approved)throw new p(\"Payment is not approved.\");return Promise.resolve()})}getOrderId(e){return zt(this,void 0,void 0,function*(){const t={cartId:e,shouldSaveInstrument:!1},{body:n}=yield this._requestSender.post(\"/api/storefront/payments/googlepaypaypalcommercecheckout\",{headers:Object.assign({\"X-API-INTERNAL\":Et,\"Content-Type\":te.Json},V),body:t});return n})}}const Rt=h(n=>{const i=new Ke((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)());return new Gt(n,new H(J(),new Qe(n,i),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),i,(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)())},[{id:\"googlepaypaypalcommerce\"}]);var Bt,jt;!function(e){e.Approved=\"APPROVED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\"}(Bt||(Bt={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(jt||(jt={}));var Lt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ft extends Pt{constructor(e,t,n,i){super(e,t),this._payPalSdkHelper=n,this._requestSender=i}execute({payment:e}){return Lt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new ue([\"payment\"]);const t=this._paymentIntegrationService.getState(),n=t.getCartOrThrow().id,{initializationData:i}=t.getPaymentMethodOrThrow(this._getMethodId()),{orderId:o}=yield this.getOrderId(n),{card_information:a}=i||{},r=yield this._googlePayPaymentProcessor.getNonce(e.methodId),s={tokenizationData:{type:\"PAYMENT_GATEWAY\",token:atob(r)},info:{cardNetwork:(null==a?void 0:a.type)||\"\",cardDetails:(null==a?void 0:a.number)||\"\"},type:\"CARD\"};yield this.confirmOrder(o,s),yield this._paymentIntegrationService.submitOrder();try{const t={formattedPayload:{method_id:e.methodId,paypal_account:{order_id:o}}};yield this._paymentIntegrationService.submitPayment({methodId:e.methodId,paymentData:t})}catch(e){yield this._googlePayPaymentProcessor.processAdditionalAction(e)}})}confirmOrder(e,t){return Lt(this,void 0,void 0,function*(){const n=this._paymentIntegrationService.getState(),i=n.getPaymentMethodOrThrow(this._getMethodId());if(!i.initializationData)throw new g(l.MissingPaymentMethod);const o=n.getCartOrThrow().currency.code,a=yield this._payPalSdkHelper.getPayPalGooglePaySdk(i,o,!0),{status:r}=yield a.Googlepay().confirmOrder({orderId:e,paymentMethodData:t});if(r===Bt.PayerActionRequired)return yield a.Googlepay().initiatePayerAction({orderId:e}),Promise.resolve();if(r!==Bt.Approved)throw new p(\"Payment is not approved.\");return Promise.resolve()})}getOrderId(e){return Lt(this,void 0,void 0,function*(){const t={cartId:e,shouldSaveInstrument:!1},{body:n}=yield this._requestSender.post(\"/api/storefront/payments/googlepay_bigcommerce_paymentscheckout\",{headers:Object.assign({\"X-API-INTERNAL\":Et,\"Content-Type\":te.Json},V),body:t});return n})}}const Ut=h(n=>{const i=new tt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)());return new Ft(n,new H(J(),new it(n,i),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),i,(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)())},[{id:\"googlepay_bigcommerce_payments\"}]),Vt=h(n=>new Pt(n,new H(J(),new st(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);class qt extends y{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}var Ht=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Wt{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t}initialize(e){var t,n;return Ht(this,void 0,void 0,function*(){if(!e.methodId||!L(e.methodId))throw new p('Unable to proceed because \"methodId\" is not a valid key.');if(this._methodId=e.methodId,!e.containerId)throw new p('Unable to proceed because \"containerId\" is not a valid key.');const i=e[this._getMethodOrThrow()];if(!i)throw new p(\"Unable to proceed without valid options.\");const{buyNowInitializeOptions:o,currencyCode:a,buttonColor:r,buttonType:s,onError:c}=i;let d,l=this._paymentIntegrationService.getState();try{d=l.getPaymentMethodOrThrow(this._getMethodOrThrow())}catch(e){l=yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodOrThrow()),d=l.getPaymentMethodOrThrow(this._getMethodOrThrow())}if(this._countryCode=null===(t=d.initializationData)||void 0===t?void 0:t.storeCountry,o){if(!a)throw new p('Unable to initialize payment because \"options.currencyCode\" argument is not provided.');this._currencyCode=a,this._buyNowInitializeOptions=o,yield this._googlePayPaymentProcessor.initialize(()=>d,this._getGooglePayClientOptions(),!!o,a)}else yield this._paymentIntegrationService.loadDefaultCheckout(),yield this._googlePayPaymentProcessor.initialize(()=>d,this._getGooglePayClientOptions());this._paymentButton=null!==(n=this._paymentButton)&&void 0!==n?n:this._googlePayPaymentProcessor.addPaymentButton(e.containerId,{buttonColor:null!=r?r:\"default\",buttonType:null!=s?s:\"plain\",onClick:this._handleClick(c)})})}deinitialize(){var e;return null===(e=this._paymentButton)||void 0===e||e.remove(),this._paymentButton=void 0,this._methodId=void 0,Promise.resolve()}_handleClick(e){return t=>Ht(this,void 0,void 0,function*(){t.preventDefault();try{this._buyNowInitializeOptions?yield this._createBuyNowCartOrThrow(this._buyNowInitializeOptions):yield this._paymentIntegrationService.loadDefaultCheckout(),yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(t){let n=t;if(j(t)){if(\"CANCELED\"===t.statusCode)throw new R;n=new B(JSON.stringify(t))}throw null==e||e(new B(\"An error occurred while requesting your Google Pay payment details.\")),n}})}_interactWithPaymentSheet(){var e;return Ht(this,void 0,void 0,function*(){const t=yield this._googlePayPaymentProcessor.showPaymentSheet(),n=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(t),i=this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(t),o=\"/embedded-checkout\"===window.location.pathname?this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink:void 0;n&&(yield this._paymentIntegrationService.updateBillingAddress(n)),i&&!(null===(e=this._buyNowCart)||void 0===e?void 0:e.lineItems.digitalItems.length)&&(yield this._paymentIntegrationService.updateShippingAddress(i)),yield this._googlePayPaymentProcessor.setExternalCheckoutForm(this._getMethodOrThrow(),t,o)})}_getGooglePayClientOptions(){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:e,shippingAddress:t,shippingOptionData:n,offerData:i})=>Ht(this,void 0,void 0,function*(){const{availableTriggers:o,addressChangeTriggers:a,shippingOptionsChangeTriggers:r,offerChangeTriggers:s}=this._googlePayPaymentProcessor.getCallbackTriggers();if(!o.includes(e))return;const c=a.includes(e)?yield this._googlePayPaymentProcessor.handleShippingAddressChange(t):void 0;r.includes(e)&&(yield this._googlePayPaymentProcessor.handleShippingOptionChange(n.id));const{newOfferInfo:d,error:l}=s.includes(e)?yield this._googlePayPaymentProcessor.handleCoupons(i):{},u=l;return this._buyNowInitializeOptions?this._getBuyNowTransactionInfo(c,d,u):this._getTransactionInfo(c,d,u)})}}}_createBuyNowCartOrThrow(e){return Ht(this,void 0,void 0,function*(){if(\"function\"==typeof(null==e?void 0:e.getBuyNowCartRequestBody)){const t=e.getBuyNowCartRequestBody();try{this._buyNowCart=yield this._paymentIntegrationService.createBuyNowCart(t),yield this._paymentIntegrationService.loadCheckout(this._buyNowCart.id)}catch(e){if(\"string\"==typeof e)throw new qt(e);throw e}}})}_getBuyNowTransactionInfo(e,t,n){if(!this._buyNowCart)return;const{cartAmount:i}=this._buyNowCart,o=this._googlePayPaymentProcessor.getTotalPrice();return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},this._countryCode&&{countryCode:this._countryCode}),{currencyCode:this._getCurrencyCodeOrThrow(),totalPrice:o||String(i),totalPriceStatus:k.FINAL})},e&&{newShippingOptionParameters:e}),t&&{newOfferInfo:t}),n&&{error:n})}_getTransactionInfo(e,t,n){return Ht(this,void 0,void 0,function*(){yield this._paymentIntegrationService.loadCheckout();const i=this._googlePayPaymentProcessor.getTotalPrice(),{code:o}=this._paymentIntegrationService.getState().getCartOrThrow().currency;return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},this._countryCode&&{countryCode:this._countryCode}),{currencyCode:o,totalPriceStatus:k.FINAL,totalPrice:i})},e&&{newShippingOptionParameters:e}),t&&{newOfferInfo:t}),n&&{error:n})})}_getMethodOrThrow(){return v(this._methodId,()=>new b(_.PaymentNotInitialized))}_getCurrencyCodeOrThrow(){return v(this._currencyCode,()=>new p('Unable to initialize payment because \"options.currencyCode\" argument is not provided.'))}}const Yt=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),o=window,a=new ke(n),r=new Le(new Ve((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)(),o,a));return new Wt(n,new H(J(),new We(n,r),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]),Jt=h(n=>new Wt(n,new H(J(),new Qe(n,new Ke((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaypaypalcommerce\"}]),Kt=h(n=>new Wt(n,new H(J(),new it(n,new tt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepay_bigcommerce_payments\"}]),Zt=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Wt(n,new H(J(),new z(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv2\"}]),Xt=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Wt(n,new H(J(),new z(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv3\"}]),Qt=h(n=>new Wt(n,new H(J(),new X(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]),$t=h(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Wt(n,new H(J(),new oe(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]),en=h(n=>new Wt(n,new H(J(),new re(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"},{id:\"googlepaybnz\"}]),tn=h(n=>new Wt(n,new H(J(),new de(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]),nn=h(n=>new Wt(n,new H(J(),new me(n,new we((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_3__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeupe\"},{id:\"googlepaystripeocs\"}]),on=h(n=>new Wt(n,new H(J(),new _e(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]),an=h(n=>new Wt(n,new H(J(),new st(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/google-pay.js\n\n}");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss ***!
  \***************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("{// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".google-pay-top-button > div {\\n  height: 100%;\\n  width: 100%;\\n}\\n.google-pay-top-button .gpay-card-info-container {\\n  height: 36px;\\n  width: 100%;\\n  min-width: 100%;\\n  min-height: unset;\\n}\\n.google-pay-top-button .gpay-card-info-animation-container {\\n  height: 100%;\\n}\\n.google-pay-top-button .gpay-card-info-container, .google-pay-top-button .gpay-button {\\n  outline: none;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2NzcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLDJHQUFzRDtBQUNoRztBQUNBO0FBQ0Esd0RBQXdELGlCQUFpQixnQkFBZ0IsR0FBRyxvREFBb0QsaUJBQWlCLGdCQUFnQixvQkFBb0Isc0JBQXNCLEdBQUcsOERBQThELGlCQUFpQixHQUFHLHlGQUF5RixrQkFBa0IsR0FBRztBQUM5WjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2Nzcz9kNzI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZ29vZ2xlLXBheS10b3AtYnV0dG9uID4gZGl2IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZ29vZ2xlLXBheS10b3AtYnV0dG9uIC5ncGF5LWNhcmQtaW5mby1jb250YWluZXIge1xcbiAgaGVpZ2h0OiAzNnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiB1bnNldDtcXG59XFxuLmdvb2dsZS1wYXktdG9wLWJ1dHRvbiAuZ3BheS1jYXJkLWluZm8tYW5pbWF0aW9uLWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5nb29nbGUtcGF5LXRvcC1idXR0b24gLmdwYXktY2FyZC1pbmZvLWNvbnRhaW5lciwgLmdvb2dsZS1wYXktdG9wLWJ1dHRvbiAuZ3BheS1idXR0b24ge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss\n\n}");

/***/ }),

/***/ "./packages/checkout-button-integration/src/CheckoutButton.tsx":
/*!*********************************************************************!*\
  !*** ./packages/checkout-button-integration/src/CheckoutButton.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n\n\n\nconst CheckoutButton = ({ checkoutService: { deinitializeCustomer, initializeCustomer }, checkoutButtonContainerClass, containerId, methodId, onUnhandledError, onWalletButtonClick, additionalInitializationOptions, integrations, }) => {\n    const initializeCustomerStrategyOrThrow = () => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n        try {\n            yield initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: Object.assign({ container: containerId, onUnhandledError, onClick: () => onWalletButtonClick(methodId) }, additionalInitializationOptions),\n            });\n        }\n        catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    });\n    const deinitializeCustomerStrategyOrThrow = () => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n        try {\n            yield deinitializeCustomer({ methodId });\n        }\n        catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        void initializeCustomerStrategyOrThrow();\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: checkoutButtonContainerClass, \"data-test\": containerId, id: containerId }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(CheckoutButton, []));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9jaGVja291dC1idXR0b24taW50ZWdyYXRpb24vc3JjL0NoZWNrb3V0QnV0dG9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUU7QUFNVjtBQUV2RCxNQUFNLGNBQWMsR0FBMkMsQ0FBQyxFQUM1RCxlQUFlLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxFQUM3RCw0QkFBNEIsRUFDNUIsV0FBVyxFQUNYLFFBQVEsRUFDUixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLCtCQUErQixFQUMvQixZQUFZLEdBQ2YsRUFBRSxFQUFFO0lBQ0QsTUFBTSxpQ0FBaUMsR0FBRyxHQUFTLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUM7WUFDRCxNQUFNLGtCQUFrQixDQUFDO2dCQUNyQixRQUFRO2dCQUNSLFlBQVk7Z0JBQ1osQ0FBQyxRQUFRLENBQUMsa0JBQ04sU0FBUyxFQUFFLFdBQVcsRUFDdEIsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFDekMsK0JBQStCLENBQ3JDO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixJQUFJLE9BQU8sZ0JBQWdCLEtBQUssVUFBVSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDbkUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDLEVBQUM7SUFFRixNQUFNLG1DQUFtQyxHQUFHLEdBQVMsRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQztZQUNELE1BQU0sb0JBQW9CLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2IsSUFBSSxPQUFPLGdCQUFnQixLQUFLLFVBQVUsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQ25FLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQyxFQUFDO0lBRUYsZ0RBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxLQUFLLGlDQUFpQyxFQUFFLENBQUM7UUFFekMsT0FBTyxHQUFHLEVBQUU7WUFDUixLQUFLLG1DQUFtQyxFQUFFLENBQUM7UUFDL0MsQ0FBQyxDQUFDO1FBQ0YsdURBQXVEO0lBQzNELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLE9BQU8sQ0FDSCxvRUFBSyxTQUFTLEVBQUUsNEJBQTRCLGVBQWEsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEdBQUksQ0FDNUYsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLGlFQUFlLHlGQUFxQixDQUNoQyxjQUFjLEVBQ2QsRUFBRSxDQUNMLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2NoZWNrb3V0LWJ1dHRvbi1pbnRlZ3JhdGlvbi9zcmMvQ2hlY2tvdXRCdXR0b24udHN4P2FjMzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHR5cGUgRnVuY3Rpb25Db21wb25lbnQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICB0eXBlIENoZWNrb3V0QnV0dG9uUHJvcHMsXG4gICAgdHlwZSBDaGVja291dEJ1dHRvblJlc29sdmVJZCxcbiAgICB0b1Jlc29sdmFibGVDb21wb25lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmNvbnN0IENoZWNrb3V0QnV0dG9uOiBGdW5jdGlvbkNvbXBvbmVudDxDaGVja291dEJ1dHRvblByb3BzPiA9ICh7XG4gICAgY2hlY2tvdXRTZXJ2aWNlOiB7IGRlaW5pdGlhbGl6ZUN1c3RvbWVyLCBpbml0aWFsaXplQ3VzdG9tZXIgfSxcbiAgICBjaGVja291dEJ1dHRvbkNvbnRhaW5lckNsYXNzLFxuICAgIGNvbnRhaW5lcklkLFxuICAgIG1ldGhvZElkLFxuICAgIG9uVW5oYW5kbGVkRXJyb3IsXG4gICAgb25XYWxsZXRCdXR0b25DbGljayxcbiAgICBhZGRpdGlvbmFsSW5pdGlhbGl6YXRpb25PcHRpb25zLFxuICAgIGludGVncmF0aW9ucyxcbn0pID0+IHtcbiAgICBjb25zdCBpbml0aWFsaXplQ3VzdG9tZXJTdHJhdGVneU9yVGhyb3cgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBpbml0aWFsaXplQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucyxcbiAgICAgICAgICAgICAgICBbbWV0aG9kSWRdOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IG9uV2FsbGV0QnV0dG9uQ2xpY2sobWV0aG9kSWQpLFxuICAgICAgICAgICAgICAgICAgICAuLi5hZGRpdGlvbmFsSW5pdGlhbGl6YXRpb25PcHRpb25zLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25VbmhhbmRsZWRFcnJvciA9PT0gJ2Z1bmN0aW9uJyAmJiBlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZGVpbml0aWFsaXplQ3VzdG9tZXJTdHJhdGVneU9yVGhyb3cgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBkZWluaXRpYWxpemVDdXN0b21lcih7IG1ldGhvZElkIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvblVuaGFuZGxlZEVycm9yID09PSAnZnVuY3Rpb24nICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2b2lkIGluaXRpYWxpemVDdXN0b21lclN0cmF0ZWd5T3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB2b2lkIGRlaW5pdGlhbGl6ZUN1c3RvbWVyU3RyYXRlZ3lPclRocm93KCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2hlY2tvdXRCdXR0b25Db250YWluZXJDbGFzc30gZGF0YS10ZXN0PXtjb250YWluZXJJZH0gaWQ9e2NvbnRhaW5lcklkfSAvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVDb21wb25lbnQ8Q2hlY2tvdXRCdXR0b25Qcm9wcywgQ2hlY2tvdXRCdXR0b25SZXNvbHZlSWQ+KFxuICAgIENoZWNrb3V0QnV0dG9uLFxuICAgIFtdLFxuKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/checkout-button-integration/src/CheckoutButton.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayButton.scss":
/*!******************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayButton.scss ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{\nvar content = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./GooglePayButton.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! !../../../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) // removed by dead control flow\n{}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2NzcyIsIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLDRUQUFpSjs7QUFFdks7O0FBRUE7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsMEdBQXNEOztBQUUzRTs7QUFFQSxHQUFHLEtBQVUsRUFBRTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2Nzcz9hMjRkIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzJdIS4vR29vZ2xlUGF5QnV0dG9uLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9Hb29nbGVQYXlCdXR0b24uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9Hb29nbGVQYXlCdXR0b24uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayButton.scss\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayButton.tsx":
/*!*****************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayButton.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/checkout-sdk/integrations/google-pay */ \"../checkout-sdk-js/dist/esm/integrations/google-pay.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bigcommerce_checkout_checkout_button_integration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/checkout/checkout-button-integration */ \"./packages/checkout-button-integration/src/CheckoutButton.tsx\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/isEmbedded.ts\");\n/* harmony import */ var _GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GooglePayButton.scss */ \"./packages/google-pay-integration/src/GooglePayButton.scss\");\n/* harmony import */ var _GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\nconst GooglePayButton = (props) => {\n    const { language, onUnhandledError } = props;\n    if ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()) {\n        onUnhandledError(new _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"](language.translate('embedded_checkout.unsupported_error', {\n            methods: 'googlepay',\n        })));\n        return null;\n    }\n    const integrations = [\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAdyenV2CustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAdyenV3CustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAuthorizeDotNetCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayCheckoutComCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayCybersourceCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBnzCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayOrbitalCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayStripeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayStripeUpeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayWorldpayAccessCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBraintreeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayPayPalCommerceCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBigCommercePaymentsCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayTdOnlineMartCustomerStrategy,\n    ];\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_bigcommerce_checkout_checkout_button_integration__WEBPACK_IMPORTED_MODULE_2__[\"default\"], Object.assign({ checkoutButtonContainerClass: \"google-pay-top-button\", integrations: integrations }, props)));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GooglePayButton, [\n    { id: 'googlepayadyenv2' },\n    { id: 'googlepayadyenv3' },\n    { id: 'googlepayauthorizenet' },\n    { id: 'googlepaybnz' },\n    { id: 'googlepaybraintree' },\n    { id: 'googlepaypaypalcommerce' },\n    { id: 'googlepaycheckoutcom' },\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepayorbital' },\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepayworldpayaccess' },\n    { id: 'googlepaytdonlinemart' },\n    { id: 'googlepaystripeocs' },\n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFlMkQ7QUFDTDtBQUU2QjtBQU81QjtBQUV2QjtBQUVoQyxNQUFNLGVBQWUsR0FBMkMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN0RSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBRTdDLElBQUkseUZBQVUsRUFBRSxFQUFFLENBQUM7UUFDZixnQkFBZ0IsQ0FDWixJQUFJLHFGQUFnQyxDQUNoQyxRQUFRLENBQUMsU0FBUyxDQUFDLHFDQUFxQyxFQUFFO1lBQ3RELE9BQU8sRUFBRSxXQUFXO1NBQ3ZCLENBQUMsQ0FDTCxDQUNKLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUc7UUFDakIscUhBQXNDO1FBQ3RDLHFIQUFzQztRQUN0Qyw2SEFBOEM7UUFDOUMseUhBQTBDO1FBQzFDLHlIQUEwQztRQUMxQyxpSEFBa0M7UUFDbEMscUhBQXNDO1FBQ3RDLG9IQUFxQztRQUNyQyx1SEFBd0M7UUFDeEMsNEhBQTZDO1FBQzdDLHVIQUF3QztRQUN4Qyw0SEFBNkM7UUFDN0MsaUlBQWtEO1FBQ2xELDBIQUEyQztLQUM5QyxDQUFDO0lBRUYsT0FBTyxDQUNILDJEQUFDLHlGQUFjLGtCQUNYLDRCQUE0QixFQUFDLHVCQUF1QixFQUNwRCxZQUFZLEVBQUUsWUFBWSxJQUN0QixLQUFLLEVBQ1gsQ0FDTCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsaUVBQWUseUZBQXFCLENBQ2hDLGVBQWUsRUFDZjtJQUNJLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFO0lBQzFCLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFO0lBQzFCLEVBQUUsRUFBRSxFQUFFLHVCQUF1QixFQUFFO0lBQy9CLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRTtJQUN0QixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtJQUM1QixFQUFFLEVBQUUsRUFBRSx5QkFBeUIsRUFBRTtJQUNqQyxFQUFFLEVBQUUsRUFBRSxzQkFBc0IsRUFBRTtJQUM5QixFQUFFLEVBQUUsRUFBRSx3QkFBd0IsRUFBRTtJQUNoQyxFQUFFLEVBQUUsRUFBRSxrQkFBa0IsRUFBRTtJQUMxQixFQUFFLEVBQUUsRUFBRSxpQkFBaUIsRUFBRTtJQUN6QixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtJQUM1QixFQUFFLEVBQUUsRUFBRSx5QkFBeUIsRUFBRTtJQUNqQyxFQUFFLEVBQUUsRUFBRSx1QkFBdUIsRUFBRTtJQUMvQixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtDQUMvQixDQUNKLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2dvb2dsZS1wYXktaW50ZWdyYXRpb24vc3JjL0dvb2dsZVBheUJ1dHRvbi50c3g/NGMwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGNyZWF0ZUdvb2dsZVBheUFkeWVuVjJDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUFkeWVuVjNDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUF1dGhvcml6ZURvdE5ldEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5QmlnQ29tbWVyY2VQYXltZW50c0N1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5Qm56Q3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlCcmFpbnRyZWVDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUNoZWNrb3V0Q29tQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlDeWJlcnNvdXJjZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5T3JiaXRhbEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5UGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheVN0cmlwZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlVXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlUZE9ubGluZU1hcnRDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheVdvcmxkcGF5QWNjZXNzQ3VzdG9tZXJTdHJhdGVneSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9pbnRlZ3JhdGlvbnMvZ29vZ2xlLXBheSc7XG5pbXBvcnQgUmVhY3QsIHsgdHlwZSBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ2hlY2tvdXRCdXR0b24gfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQvY2hlY2tvdXQtYnV0dG9uLWludGVncmF0aW9uJztcbmltcG9ydCB7XG4gICAgdHlwZSBDaGVja291dEJ1dHRvblByb3BzLFxuICAgIHR5cGUgQ2hlY2tvdXRCdXR0b25SZXNvbHZlSWQsXG4gICAgRW1iZWRkZWRDaGVja291dFVuc3VwcG9ydGVkRXJyb3IsXG4gICAgaXNFbWJlZGRlZCxcbiAgICB0b1Jlc29sdmFibGVDb21wb25lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCAnLi9Hb29nbGVQYXlCdXR0b24uc2Nzcyc7XG5cbmNvbnN0IEdvb2dsZVBheUJ1dHRvbjogRnVuY3Rpb25Db21wb25lbnQ8Q2hlY2tvdXRCdXR0b25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGxhbmd1YWdlLCBvblVuaGFuZGxlZEVycm9yIH0gPSBwcm9wcztcblxuICAgIGlmIChpc0VtYmVkZGVkKCkpIHtcbiAgICAgICAgb25VbmhhbmRsZWRFcnJvcihcbiAgICAgICAgICAgIG5ldyBFbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvcihcbiAgICAgICAgICAgICAgICBsYW5ndWFnZS50cmFuc2xhdGUoJ2VtYmVkZGVkX2NoZWNrb3V0LnVuc3VwcG9ydGVkX2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiAnZ29vZ2xlcGF5JyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaW50ZWdyYXRpb25zID0gW1xuICAgICAgICBjcmVhdGVHb29nbGVQYXlBZHllblYyQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5QWR5ZW5WM0N1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUF1dGhvcml6ZURvdE5ldEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUNoZWNrb3V0Q29tQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5Q3liZXJzb3VyY2VDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlCbnpDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlPcmJpdGFsQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlVXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5V29ybGRwYXlBY2Nlc3NDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlCcmFpbnRyZWVDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUJpZ0NvbW1lcmNlUGF5bWVudHNDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlUZE9ubGluZU1hcnRDdXN0b21lclN0cmF0ZWd5LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q2hlY2tvdXRCdXR0b25cbiAgICAgICAgICAgIGNoZWNrb3V0QnV0dG9uQ29udGFpbmVyQ2xhc3M9XCJnb29nbGUtcGF5LXRvcC1idXR0b25cIlxuICAgICAgICAgICAgaW50ZWdyYXRpb25zPXtpbnRlZ3JhdGlvbnN9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZUNvbXBvbmVudDxDaGVja291dEJ1dHRvblByb3BzLCBDaGVja291dEJ1dHRvblJlc29sdmVJZD4oXG4gICAgR29vZ2xlUGF5QnV0dG9uLFxuICAgIFtcbiAgICAgICAgeyBpZDogJ2dvb2dsZXBheWFkeWVudjInIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlhZHllbnYzJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5YXV0aG9yaXplbmV0JyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5Ym56JyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5YnJhaW50cmVlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5cGF5cGFsY29tbWVyY2UnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXljaGVja291dGNvbScgfSxcbiAgICAgICAgeyBpZDogJ2dvb2dsZXBheWN5YmVyc291cmNldjInIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlvcmJpdGFsJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5c3RyaXBlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5c3RyaXBldXBlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5d29ybGRwYXlhY2Nlc3MnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXl0ZG9ubGluZW1hcnQnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlzdHJpcGVvY3MnIH0sXG4gICAgXSxcbik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayButton.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx":
/*!************************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/checkout-sdk/integrations/google-pay */ \"../checkout-sdk-js/dist/esm/integrations/google-pay.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/PaymentMethodId.ts\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n/* harmony import */ var _bigcommerce_checkout_wallet_button_integration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @bigcommerce/checkout/wallet-button-integration */ \"./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx\");\n\n\n\n\n\nconst GooglePayPaymentMethod = (_a) => {\n    var { checkoutService, method, onUnhandledError } = _a, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, [\"checkoutService\", \"method\", \"onUnhandledError\"]);\n    const initializeGooglePayPayment = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((defaultOptions) => {\n        const reinitializePayment = (options) => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n            try {\n                yield checkoutService.deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                yield checkoutService.initializePayment(Object.assign(Object.assign({}, options), { gatewayId: method.gateway, methodId: method.id }));\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        });\n        const loadingContainerId = 'checkout-app';\n        const mergedOptions = Object.assign(Object.assign({}, defaultOptions), { integrations: [\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAdyenV2PaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAdyenV3PaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAuthorizeNetPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayCheckoutComPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayCybersourcePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayOrbitalPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayStripePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayWorldpayAccessPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayBraintreePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayPPCPPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayBigCommercePaymentsPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayTdOnlineMartPaymentStrategy,\n            ], [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV2GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV3GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AuthorizeNetGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BNZGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BigCommercePaymentsGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BraintreeGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PayPalCommerceGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeUPEGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CybersourceV2GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OrbitalGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CheckoutcomGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].WorldpayAccessGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TdOnlineMartGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeOCSGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            } });\n        return checkoutService.initializePayment(mergedOptions);\n    }, [checkoutService, method, onUnhandledError]);\n    return (react__WEBPACK_IMPORTED_MODULE_2___default().createElement(_bigcommerce_checkout_wallet_button_integration__WEBPACK_IMPORTED_MODULE_5__[\"default\"], Object.assign({}, rest, { buttonId: \"walletButton\", deinitializePayment: checkoutService.deinitializePayment, initializePayment: initializeGooglePayPayment, method: method, shouldShowEditButton: true, signOutCustomer: checkoutService.signOutCustomer })));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GooglePayPaymentMethod, [\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV2GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV3GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AuthorizeNetGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BNZGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BraintreeGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PayPalCommerceGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BigCommercePaymentsGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CheckoutcomGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CybersourceV2GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OrbitalGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeUPEGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].WorldpayAccessGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TdOnlineMartGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeOCSGooglePay },\n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/index.ts":
/*!******************************************************!*\
  !*** ./packages/google-pay-integration/src/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GooglePayButton: () => (/* reexport safe */ _GooglePayButton__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   GooglePayPaymentMethod: () => (/* reexport safe */ _GooglePayPaymentMethod__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _GooglePayButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GooglePayButton */ \"./packages/google-pay-integration/src/GooglePayButton.tsx\");\n/* harmony import */ var _GooglePayPaymentMethod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GooglePayPaymentMethod */ \"./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStEO0FBQ2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2dvb2dsZS1wYXktaW50ZWdyYXRpb24vc3JjL2luZGV4LnRzP2I5NTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBHb29nbGVQYXlCdXR0b24gfSBmcm9tICcuL0dvb2dsZVBheUJ1dHRvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdvb2dsZVBheVBheW1lbnRNZXRob2QgfSBmcm9tICcuL0dvb2dsZVBheVBheW1lbnRNZXRob2QnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/index.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/errors/CustomError.ts":
/*!********************************************************************!*\
  !*** ./packages/payment-integration-api/src/errors/CustomError.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CustomError)\n/* harmony export */ });\nclass CustomError extends Error {\n    constructor({ data = {}, message = '', title = '', name = '', }) {\n        super();\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, CustomError);\n        }\n        else {\n            this.stack = new Error().stack;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.data = data;\n        this.message = message;\n        this.name = name;\n        this.title = title;\n        this.type = 'custom';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0N1c3RvbUVycm9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxNQUFNLFdBQVksU0FBUSxLQUFLO0lBTzFDLFlBQVksRUFDUixJQUFJLEdBQUcsRUFBRSxFQUNULE9BQU8sR0FBRyxFQUFFLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDVixJQUFJLEdBQUcsRUFBRSxHQU1aO1FBQ0csS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQ2hELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDL0MsQ0FBQzthQUFNLENBQUM7WUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25DLENBQUM7UUFFRCxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7SUFDekIsQ0FBQztDQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0N1c3RvbUVycm9yLnRzP2E1YjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGljIHNob3VsZFJlcG9ydDogYm9vbGVhbjtcblxuICAgIGRhdGE6IGFueTtcbiAgICB0aXRsZTogYW55O1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICBtZXNzYWdlID0gJycsXG4gICAgICAgIHRpdGxlID0gJycsXG4gICAgICAgIG5hbWUgPSAnJyxcbiAgICB9OiB7XG4gICAgICAgIGRhdGE/OiBhbnk7XG4gICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XG4gICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICBuYW1lPzogc3RyaW5nO1xuICAgIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDdXN0b21FcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2N1c3RvbSc7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/errors/CustomError.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts":
/*!*****************************************************************************************!*\
  !*** ./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EmbeddedCheckoutUnsupportedError)\n/* harmony export */ });\n/* harmony import */ var _setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../setPrototypeOf */ \"./packages/payment-integration-api/src/setPrototypeOf.ts\");\n/* harmony import */ var _CustomError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomError */ \"./packages/payment-integration-api/src/errors/CustomError.ts\");\n\n\nclass EmbeddedCheckoutUnsupportedError extends _CustomError__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(message) {\n        super({\n            name: 'EMBEDDED_CHECKOUT_UNSUPPORTED_ERROR',\n            message,\n        });\n        (0,_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, EmbeddedCheckoutUnsupportedError.prototype);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0VtYmVkZGVkQ2hlY2tvdXRVbnN1cHBvcnRlZEVycm9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUVQO0FBRXpCLE1BQU0sZ0NBQWlDLFNBQVEsb0RBQVc7SUFDckUsWUFBWSxPQUFlO1FBQ3ZCLEtBQUssQ0FBQztZQUNGLElBQUksRUFBRSxxQ0FBcUM7WUFDM0MsT0FBTztTQUNWLENBQUMsQ0FBQztRQUVILDJEQUFjLENBQUMsSUFBSSxFQUFFLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9FbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvci50cz9kMTE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tICcuLi9zZXRQcm90b3R5cGVPZic7XG5cbmltcG9ydCBDdXN0b21FcnJvciBmcm9tICcuL0N1c3RvbUVycm9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1iZWRkZWRDaGVja291dFVuc3VwcG9ydGVkRXJyb3IgZXh0ZW5kcyBDdXN0b21FcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6ICdFTUJFRERFRF9DSEVDS09VVF9VTlNVUFBPUlRFRF9FUlJPUicsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICB9KTtcblxuICAgICAgICBzZXRQcm90b3R5cGVPZih0aGlzLCBFbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/isEmbedded.ts":
/*!************************************************************!*\
  !*** ./packages/payment-integration-api/src/isEmbedded.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isEmbedded)\n/* harmony export */ });\nfunction isEmbedded(pathname = document.location.pathname) {\n    const basePath = `/${pathname.split('/')[1]}`;\n    return basePath === '/embedded-checkout';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvaXNFbWJlZGRlZC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsU0FBUyxVQUFVLENBQUMsV0FBbUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRO0lBQzVFLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRTlDLE9BQU8sUUFBUSxLQUFLLG9CQUFvQixDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9pc0VtYmVkZGVkLnRzP2ZhNTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbWJlZGRlZChwYXRobmFtZTogc3RyaW5nID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUpOiBib29sZWFuIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IGAvJHtwYXRobmFtZS5zcGxpdCgnLycpWzFdfWA7XG5cbiAgICByZXR1cm4gYmFzZVBhdGggPT09ICcvZW1iZWRkZWQtY2hlY2tvdXQnO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/isEmbedded.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/setPrototypeOf.ts":
/*!****************************************************************!*\
  !*** ./packages/payment-integration-api/src/setPrototypeOf.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setPrototypeOf)\n/* harmony export */ });\nfunction setPrototypeOf(object, prototype) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    }\n    else if (hasProto(object)) {\n        // eslint-disable-next-line no-proto\n        object.__proto__ = prototype;\n    }\n    return object;\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hasProto(object) {\n    return '__proto__' in object;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvc2V0UHJvdG90eXBlT2YudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVMsY0FBYyxDQUFtQixNQUFTLEVBQUUsU0FBaUI7SUFDakYsdUVBQXVFO0lBQ3ZFLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7U0FBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzFCLG9DQUFvQztRQUNwQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELGdFQUFnRTtBQUNoRSxTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQzVCLE9BQU8sV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUNqQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvc2V0UHJvdG90eXBlT2YudHM/MjhiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZjxUIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IFQsIHByb3RvdHlwZTogb2JqZWN0KTogVCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmplY3QsIHByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChoYXNQcm90byhvYmplY3QpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmZ1bmN0aW9uIGhhc1Byb3RvKG9iamVjdDogb2JqZWN0KTogb2JqZWN0IGlzIG9iamVjdCAmIHsgX19wcm90b19fOiBvYmplY3QgfSB7XG4gICAgcmV0dXJuICdfX3Byb3RvX18nIGluIG9iamVjdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/setPrototypeOf.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/toResolvableComponent.tsx":
/*!************************************************************************!*\
  !*** ./packages/payment-integration-api/src/toResolvableComponent.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toResolvableComponent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction toResolvableComponent(\n// eslint-disable-next-line @typescript-eslint/naming-convention\nComponent, resolveIds) {\n    return Object.assign((props) => react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, Object.assign({}, props)), { resolveIds });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvdG9SZXNvbHZhYmxlQ29tcG9uZW50LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFJbkMsU0FBUyxxQkFBcUI7QUFDekMsZ0VBQWdFO0FBQ2hFLFNBQWdDLEVBQ2hDLFVBQXlCO0lBRXpCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsMkRBQUMsU0FBUyxvQkFBSyxLQUFLLEVBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDdEYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3RvUmVzb2x2YWJsZUNvbXBvbmVudC50c3g/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdHlwZSBDb21wb25lbnRUeXBlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSBSZXNvbHZhYmxlQ29tcG9uZW50IGZyb20gJy4vUmVzb2x2YWJsZUNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUmVzb2x2YWJsZUNvbXBvbmVudDxUUHJvcHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBUSWRlbnRpZmllcj4oXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIENvbXBvbmVudDogQ29tcG9uZW50VHlwZTxUUHJvcHM+LFxuICAgIHJlc29sdmVJZHM6IFRJZGVudGlmaWVyW10sXG4pOiBSZXNvbHZhYmxlQ29tcG9uZW50PFRQcm9wcywgVElkZW50aWZpZXI+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbigocHJvcHM6IFRQcm9wcykgPT4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+LCB7IHJlc29sdmVJZHMgfSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/toResolvableComponent.tsx\n\n}");

/***/ })

}]);