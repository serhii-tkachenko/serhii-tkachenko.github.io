"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_apple-pay_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/apple-pay.js":
/*!*************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/apple-pay.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createApplePayButtonStrategy: () => (/* binding */ Y),\n/* harmony export */   createApplePayCustomerStrategy: () => (/* binding */ H),\n/* harmony export */   createApplePayPaymentStrategy: () => (/* binding */ ie)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\nvar o={};function r(e,t,i=!0){var n;return null!==(n=e[t])&&void 0!==n?n:i}o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const s=\"3.128.0\",l=\"3.123.2\",d=\"3.106.0\";class c{constructor(e){this.paymentIntegrationService=e,this.braintreeWindow=window}getSDKVersion(){const e=this.paymentIntegrationService.getState().getStoreConfig(),t=(null==e?void 0:e.checkoutSettings.features)||{};return this.getPreloadedSDKVersion()||(r(t,\"PAYPAL-5809.braintree_hosted_fields_fix_version\")?s:r(t,\"PAYPAL-5636.update_braintree_sdk_version\")?l:d)}getPreloadedSDKVersion(){const e=this.braintreeWindow.braintree;if(e){const t=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.find)(Object.values(e),e=>!!e.VERSION);return null==t?void 0:t.VERSION}}}class h extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class u extends h{constructor(e){super(e||\"Unsupported browser error\"),this.name=\"UnsupportedBrowserError\",this.type=\"unsupported_browser\"}}var p,m,y,g,v,S,b,C;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(p||(p={}));class f extends h{constructor(e){super(function(e){switch(e){case p.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case p.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case p.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case p.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}!function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(m||(m={})),function(e){e.Completed=\"COMPLETED\",e.Pending=\"PENDING\",e.Failed=\"FAILED\"}(y||(y={})),function(e){e.TRUSTLY=\"trustly\"}(g||(g={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"cancelled\",e.UNRECOGNIZED=\"unrecognized\"}(v||(v={})),function(e){e.Customer=\"CUSTOMER\",e.Merchant=\"MERCHANT\",e.Network=\"NETWORK\",e.Internal=\"INTERNAL\",e.Unknown=\"UNKNOWN\"}(S||(S={})),function(e){e.KountNotEnabled=\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"}(b||(b={})),function(e){e.Visa=\"visa\",e.Mastercard=\"mastercard\",e.AmericanExpress=\"american-express\",e.DinersClub=\"diners-club\",e.Discover=\"discover\",e.Jcb=\"jcb\",e.UnionPay=\"union-pay\",e.Maestro=\"maestro\",e.Elo=\"elo\",e.Mir=\"mir\",e.Hiper=\"hiper\",e.Hipercard=\"hipercard\"}(C||(C={}));var _,w,P,I=function(e,t,i,n){return new(i||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())})};class T{constructor(e){this.braintreeScriptLoader=e}initialize(e){this.setClientToken(e)}deinitialize(){return I(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollector),this.dataCollector=void 0})}getClient(){return I(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=yield t.create({authorization:e})}return this.client})}getDataCollectorOrThrow(e){return I(this,void 0,void 0,function*(){const t={deviceData:void 0,teardown:()=>Promise.resolve()};if(!this.dataCollector)try{const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadDataCollector(),n=Object.assign({client:t,kount:!0},e);this.dataCollector=yield i.create(n)}catch(e){if(function(e){return Boolean(\"object\"==typeof e&&null!==e&&(\"type\"in e||\"message\"in e||\"code\"in e))}(e)&&e.code===b.KountNotEnabled)return t;throw e}return this.dataCollector})}getBraintreeGooglePayment(){return I(this,void 0,void 0,function*(){if(!this.googlePayment){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadGooglePayment()]);this.googlePayment=yield t.create({client:e})}return this.googlePayment})}getBraintreeThreeDS(){return I(this,void 0,void 0,function*(){if(!this.threeDS){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]);this.threeDS=yield t.create({client:e,version:2})}return this.threeDS})}getBraintreeLocalPayment(e){return I(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment){const[t,i]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadLocalPayment()]);this.braintreeLocalPayment=yield new Promise((n,a)=>{i.create({client:t,merchantAccountId:e},(e,t)=>{e&&a(e),n(t)})})}return this.braintreeLocalPayment})}getUsBankAccount(){return I(this,void 0,void 0,function*(){if(!this.usBankAccount){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadUsBankAccount();this.usBankAccount=yield t.create({client:e})}return this.usBankAccount})}getBraintreeVisaCheckout(){return this.visaCheckout||(this.visaCheckout=Promise.all([this.getClient(),this.braintreeScriptLoader.loadVisaCheckout()]).then(([e,t])=>t.create({client:e}))),this.visaCheckout}getVisaCheckoutSdk(e){return I(this,void 0,void 0,function*(){return this.visaCheckoutSDK||(this.visaCheckoutSDK=yield this.braintreeScriptLoader.loadVisaCheckoutSdk(e)),this.visaCheckoutSDK})}getVenmoCheckoutOrThrow(){return I(this,void 0,void 0,function*(){if(!this.braintreeVenmo){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadVenmoCheckout(),i={client:e,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},n=yield t.create(i);if(!n.isBrowserSupported())throw new u;this.braintreeVenmo=n}return this.braintreeVenmo})}setClientToken(e){this.clientToken=e}getClientTokenOrThrow(){if(!this.clientToken)throw new f(p.PaymentNotInitialized);return this.clientToken}teardownModule(e){return e?e.teardown():Promise.resolve()}}class k extends h{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}!function(e){e.Sandbox=\"sandbox\",e.Production=\"production\"}(_||(_={})),function(e){e.Client=\"client\",e.DataCollector=\"dataCollector\",e.Fastlane=\"fastlane\",e.GooglePayment=\"googlePayment\",e.HostedFields=\"hostedFields\",e.LocalPayment=\"localPayment\",e.Paypal=\"paypal\",e.PaypalCheckout=\"paypalCheckout\",e.ThreeDSecure=\"threeDSecure\",e.UsBankAccount=\"usBankAccount\",e.Venmo=\"venmo\",e.VisaCheckout=\"visaCheckout\"}(w||(w={})),function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\"}(P||(P={}));const A={[d]:{[w.Client]:\"sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt\",[w.PaypalCheckout]:\"sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O\",[w.Paypal]:\"sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+\",[w.LocalPayment]:\"sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT\",[w.DataCollector]:\"sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV\",[w.UsBankAccount]:\"sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ\",[w.GooglePayment]:\"sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe\",[w.ThreeDSecure]:\"sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB\",[w.VisaCheckout]:\"sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT\",[w.Venmo]:\"sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov\",[w.HostedFields]:\"sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy\",[w.Fastlane]:\"sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa\"},[l]:{[w.Client]:\"sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO\",[w.PaypalCheckout]:\"sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/\",[w.Paypal]:\"sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt\",[w.LocalPayment]:\"sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH\",[w.DataCollector]:\"sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO\",[w.UsBankAccount]:\"sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW\",[w.GooglePayment]:\"sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO\",[w.ThreeDSecure]:\"sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym\",[w.VisaCheckout]:\"sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS\",[w.Venmo]:\"sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU\",[w.HostedFields]:\"sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P\",[w.Fastlane]:\"sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y\"},[s]:{[w.Client]:\"sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq\",[w.PaypalCheckout]:\"sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh\",[w.Paypal]:\"sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH\",[w.LocalPayment]:\"sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC\",[w.DataCollector]:\"sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc\",[w.UsBankAccount]:\"sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F\",[w.GooglePayment]:\"sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i\",[w.ThreeDSecure]:\"sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D\",[w.VisaCheckout]:\"sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv\",[w.Venmo]:\"sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz\",[w.HostedFields]:\"sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z\",[w.Fastlane]:\"sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr\"}};var M,N,E=function(e,t,i,n){return new(i||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())})};class O{constructor(e,t,i){this.scriptLoader=e,this.braintreeHostWindow=t,this.braintreeSDKVersionManager=i}loadClient(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.Client,\"client.min.js\")})}loadFastlane(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.Fastlane,\"fastlane.min.js\")})}loadPaypalCheckout(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.PaypalCheckout,\"paypal-checkout.min.js\")})}loadPaypal(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.Paypal,\"paypal.min.js\")})}loadLocalPayment(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.LocalPayment,\"local-payment.min.js\")})}loadDataCollector(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.DataCollector,\"data-collector.min.js\")})}loadUsBankAccount(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.UsBankAccount,\"us-bank-account.min.js\")})}loadGooglePayment(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.GooglePayment,\"google-payment.min.js\")})}load3DS(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.ThreeDSecure,\"three-d-secure.min.js\")})}loadVisaCheckout(){return this.loadBraintreeModuleOrThrow(w.VisaCheckout,\"visa-checkout.min.js\")}loadVenmoCheckout(){return this.loadBraintreeModuleOrThrow(w.Venmo,\"venmo.min.js\")}loadHostedFields(){return E(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(w.HostedFields,\"hosted-fields.min.js\")})}loadVisaCheckoutSdk(e){return E(this,void 0,void 0,function*(){if(this.braintreeHostWindow.V)return this.braintreeHostWindow.V;const t=e?\"sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm\":\"sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6\";return this.scriptLoader.loadScript(`//${e?\"sandbox-\":\"\"}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,{async:!0,attributes:{integrity:t,crossorigin:\"anonymous\"}}).then(()=>{if(!this.braintreeHostWindow.V)throw new k;return this.braintreeHostWindow.V})})}loadBraintreeModuleOrThrow(e,t){return E(this,void 0,void 0,function*(){let i=this.getBraintreeModule(e);if(i)return i;const n=this.braintreeSDKVersionManager.getSDKVersion(),a=`//js.braintreegateway.com/web/${n}/js/${t}`,o=n in A?this.getIntegrityValuesByModuleName(e,n):void 0;if(yield this.scriptLoader.loadScript(a,o?{async:!0,attributes:{integrity:o,crossorigin:\"anonymous\"}}:void 0),i=this.getBraintreeModule(e),!i)throw new k;return i})}getBraintreeModule(e){var t;return null===(t=this.braintreeHostWindow.braintree)||void 0===t?void 0:t[e]}getIntegrityValuesByModuleName(e,t){const i=A[t][e];if(!i)throw new Error(\"Unexpected fileName value\");return i}}function D(e,t){return Object.assign(e,{resolveIds:t})}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(M||(M={}));class B extends h{constructor(e){super(function(e){switch(e){case M.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case M.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case M.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case M.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case M.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case M.MissingCheckoutConfig:case M.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case M.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case M.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case M.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case M.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case M.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case M.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class L extends h{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}class z extends h{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class x extends h{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}!function(e){e.BRAINTREE=\"braintree\",e.BRAINTREE_FASTLANE=\"braintreeacceleratedcheckout\"}(N||(N={}));var U,F=function(e,t,i,n){return new(i||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())})};!function(e){e.Subtotal=\"Subtotal\",e.Shipping=\"Shipping\"}(U||(U={}));class R{constructor(e,t,i,n,o){this._requestSender=e,this._paymentIntegrationService=t,this._sessionFactory=i,this._braintreeSdk=n,this._applePayScriptLoader=o,this._onAuthorizeCallback=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this._onError=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this._onClick=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this._subTotalLabel=U.Subtotal,this._shippingLabel=U.Shipping,this._hasApplePaySession=!1}initialize(e){var t;return F(this,void 0,void 0,function*(){const{methodId:i,applepay:n}=e;if(!i||!n)throw new B(M.MissingPaymentMethod);const{container:o,shippingLabel:r,subtotalLabel:s,onError:l=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,onClick:d=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,onPaymentAuthorize:c}=n;this._shippingLabel=r||U.Shipping,this._subTotalLabel=s||U.Subtotal,this._onAuthorizeCallback=c,this._onError=l,this._onClick=d;let h=this._paymentIntegrationService.getState();yield this._applePayScriptLoader.loadSdk();try{this._paymentMethod=h.getPaymentMethodOrThrow(i)}catch(e){h=yield this._paymentIntegrationService.loadPaymentMethod(i),this._paymentMethod=h.getPaymentMethodOrThrow(i)}yield this._paymentIntegrationService.verifyCheckoutSpamProtection(),this._applePayButton=this._createButton(o),this._applePayButton.addEventListener(\"click\",this._handleWalletButtonClick.bind(this)),(null===(t=this._paymentMethod.initializationData)||void 0===t?void 0:t.gateway)===N.BRAINTREE&&(yield this._initializeBraintreeSdk())})}deinitialize(){return Promise.resolve()}signIn(){throw new L('In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.')}signOut(){throw new L(\"Need to do signout via apple.\")}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}_createButton(e){const t=document.getElementById(e);if(!t)throw new z(\"Unable to create sign-in button without valid container ID.\");const i=this._createApplePayButtonElement();return t.appendChild(i),i}_createApplePayButtonElement(){const e=document.createElement(\"apple-pay-button\");return e.setAttribute(\"buttonstyle\",\"black\"),e.setAttribute(\"type\",\"plain\"),e.setAttribute(\"style\",\"--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;\"),e}_handleWalletButtonClick(e){if(e.preventDefault(),this._hasApplePaySession)return;this._onClick();const t=this._paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getStoreConfigOrThrow(),a=t.getCheckoutOrThrow();if(!this._paymentMethod||!this._paymentMethod.initializationData)throw new B(M.MissingPaymentMethod);const o=this._getBaseRequest(i,a,n,this._paymentMethod),r=this._sessionFactory.create(o);this._handleApplePayEvents(r,this._paymentMethod,n),r.begin(),this._hasApplePaySession=!0}_getBaseRequest(e,t,i,n){var a;const{storeProfile:{storeCountryCode:o,storeName:r}}=i,{currency:{code:s,decimalPlaces:l}}=e,{initializationData:{merchantCapabilities:d,supportedNetworks:c}}=n,h=e.lineItems.physicalItems.length>0,u={requiredBillingContactFields:[\"postalAddress\"],requiredShippingContactFields:[\"email\",\"phone\"],countryCode:o,currencyCode:s,merchantCapabilities:d,supportedNetworks:c,lineItems:[],total:h?{label:r,amount:`${t.grandTotal.toFixed(l)}`,type:\"pending\"}:{label:r,amount:`${t.grandTotal.toFixed(l)}`,type:\"final\"}};if(h)null===(a=u.requiredShippingContactFields)||void 0===a||a.push(\"postalAddress\");else{const e=[{label:this._subTotalLabel,amount:`${t.subtotal.toFixed(l)}`}];t.taxes.forEach(t=>e.push({label:t.name,amount:`${t.amount.toFixed(l)}`})),u.lineItems=e}return u}_handleApplePayEvents(e,t,i){e.onvalidatemerchant=i=>F(this,void 0,void 0,function*(){try{const{body:n}=yield this._onValidateMerchant(t,i);e.completeMerchantValidation(n)}catch(e){this._onError(e)}}),e.onshippingcontactselected=t=>F(this,void 0,void 0,function*(){return this._handleShippingContactSelected(e,i,t)}),e.onshippingmethodselected=t=>F(this,void 0,void 0,function*(){return this._handleShippingMethodSelected(e,i,t)}),e.oncancel=()=>F(this,void 0,void 0,function*(){this._hasApplePaySession=!1;try{const e=`/remote-checkout/${t.id}/signout`;return yield this._requestSender.get(e),yield this._paymentIntegrationService.loadCheckout()}catch(e){return this._onError(new x)}}),e.onpaymentauthorized=i=>F(this,void 0,void 0,function*(){return this._onPaymentAuthorized(i,e,t)})}_handleShippingContactSelected(e,t,i){var n;return F(this,void 0,void 0,function*(){const a=this._transformContactToAddress(i.shippingContact);try{yield this._paymentIntegrationService.updateShippingAddress(a)}catch(t){return e.abort(),this._hasApplePaySession=!1,this._onError(t)}const{storeProfile:{storeName:o}}=t;let r=this._paymentIntegrationService.getState();const{currency:{decimalPlaces:s}}=r.getCartOrThrow();let l=r.getCheckoutOrThrow();const d=null===(n=l.consignments[0].selectedShippingOption)||void 0===n?void 0:n.id,c=l.consignments[0].availableShippingOptions,h=null==c?void 0:c.find(({id:e})=>e===d),u=null==c?void 0:c.filter(e=>e.id!==d),p=h?[{label:h.description,amount:`${h.cost.toFixed(s)}`,detail:h.additionalDescription,identifier:h.id}]:[];if(u&&[...u.filter(e=>e.isRecommended),...u.filter(e=>!e.isRecommended)].forEach(e=>p.push({label:e.description,amount:`${e.cost.toFixed(s)}`,detail:e.additionalDescription,identifier:e.id})),!(c instanceof Array))throw new Error(\"Shipping options not available.\");if(0===c.length)return void e.completeShippingContactSelection(ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,[],{type:\"pending\",label:o,amount:`${l.grandTotal.toFixed(s)}`},[]);const m=c.find(e=>e.isRecommended),y=m?m.id:c[0].id,g=h?h.id:y;try{yield this._updateShippingOption(g)}catch(e){return this._onError(e)}r=this._paymentIntegrationService.getState(),l=r.getCheckoutOrThrow(),e.completeShippingContactSelection({newShippingMethods:p,newTotal:{type:\"final\",label:o,amount:`${l.grandTotal.toFixed(s)}`},newLineItems:this._getUpdatedLineItems(l,s)})})}_handleShippingMethodSelected(e,t,i){return F(this,void 0,void 0,function*(){const{storeProfile:{storeName:n}}=t,{shippingMethod:{identifier:a}}=i;try{yield this._updateShippingOption(a)}catch(t){return e.abort(),this._hasApplePaySession=!1,this._onError(t)}const o=this._paymentIntegrationService.getState(),{currency:{decimalPlaces:r}}=o.getCartOrThrow(),s=o.getCheckoutOrThrow();e.completeShippingMethodSelection({newTotal:{type:\"final\",label:n,amount:`${s.grandTotal.toFixed(r)}`},newLineItems:this._getUpdatedLineItems(s,r)})})}_getUpdatedLineItems(e,t){const i=[{label:this._subTotalLabel,amount:`${e.subtotal.toFixed(t)}`}];return e.taxes.forEach(e=>i.push({label:e.name,amount:`${e.amount.toFixed(t)}`})),i.push({label:this._shippingLabel,amount:`${e.shippingCostTotal.toFixed(t)}`}),i}_updateShippingOption(e){return F(this,void 0,void 0,function*(){return this._paymentIntegrationService.selectShippingOption(e)})}_onValidateMerchant(e,t){return F(this,void 0,void 0,function*(){const i=[`validationUrl=${t.validationURL}`,`merchantIdentifier=${e.initializationData.merchantId}`,`displayName=${e.initializationData.storeName}`,`domainName=${window.location.hostname}`].join(\"&\");return this._requestSender.post(`${e.initializationData.paymentsUrl}/api/public/v1/payments/applepay/validate_merchant`,{credentials:!1,headers:{Accept:\"application/json\",\"Content-Type\":\"application/x-www-form-urlencoded\",\"X-XSRF-TOKEN\":null},body:i})})}_onPaymentAuthorized(e,t,i){var n;return F(this,void 0,void 0,function*(){const{token:a,billingContact:o,shippingContact:r}=e.payment,s=this._paymentIntegrationService.getState().getCartOrThrow().lineItems.physicalItems.length>0;let l;(null===(n=i.initializationData)||void 0===n?void 0:n.gateway)===N.BRAINTREE&&(l=yield this._getBraintreeDeviceData());const d={methodId:i.id,paymentData:{deviceSessionId:l,formattedPayload:{apple_pay_token:{payment_data:a.paymentData,payment_method:a.paymentMethod,transaction_id:a.transactionIdentifier}}}},c=this._transformContactToAddress(o),h=this._transformContactToAddress(r),u=null==r?void 0:r.emailAddress,p=(null==r?void 0:r.phoneNumber)||\"\";try{return yield this._paymentIntegrationService.updateBillingAddress(Object.assign(Object.assign({},c),{email:u,phone:p})),s&&(yield this._paymentIntegrationService.updateShippingAddress(h)),yield this._paymentIntegrationService.submitOrder({useStoreCredit:!1}),yield this._paymentIntegrationService.submitPayment(d),t.completePayment(ApplePaySession.STATUS_SUCCESS),this._onAuthorizeCallback()}catch(e){return t.completePayment(ApplePaySession.STATUS_FAILURE),this._onError(e)}})}_transformContactToAddress(e){return{firstName:(null==e?void 0:e.givenName)||\"\",lastName:(null==e?void 0:e.familyName)||\"\",city:(null==e?void 0:e.locality)||\"\",company:\"\",address1:(null==e?void 0:e.addressLines)&&e.addressLines[0]||\"\",address2:(null==e?void 0:e.addressLines)&&e.addressLines[1]||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\",phone:(null==e?void 0:e.phoneNumber)||\"\",stateOrProvince:(null==e?void 0:e.administrativeArea)||\"\",stateOrProvinceCode:(null==e?void 0:e.administrativeArea)||\"\",customFields:[]}}_getBraintreeDeviceData(){return F(this,void 0,void 0,function*(){try{const{deviceData:e}=yield this._braintreeSdk.getDataCollectorOrThrow();return e}catch(e){}})}_initializeBraintreeSdk(){return F(this,void 0,void 0,function*(){yield this._paymentIntegrationService.loadPaymentMethod(N.BRAINTREE);const e=this._paymentIntegrationService.getState().getPaymentMethod(N.BRAINTREE);e&&e.clientToken&&e.initializationData&&this._braintreeSdk.initialize(e.clientToken)})}}function V(e){if(!function(e){return\"ApplePaySession\"in e}(e))throw new Error(\"Apple pay is not supported\")}class j{create(e){return V(window),new ApplePaySession(1,e)}}class q{constructor(e){this.scriptLoader=e,this.sdkVersion=\"1.latest\"}loadSdk(){return e=this,t=void 0,n=function*(){yield this.scriptLoader.loadScript(`https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`),V(window)},new((i=void 0)||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())});// removed by dead control flow\n var e, t, i, n; }}const H=D(n=>{const{getHost:a}=n.getState(),o=new c(n);return new R((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_0__.createRequestSender)({host:a()}),n,new j,new T(new O((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),window,o)),new q(new _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.ScriptLoader))},[{id:\"applepay\"}]);class W extends h{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}var G,$,K=function(e,t,i,n){return new(i||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())})};!function(e){e.Subtotal=\"Subtotal\",e.Shipping=\"Shipping\"}(G||(G={})),function(e){e.Black=\"black\",e.White=\"white\",e.WhiteBorder=\"white-border\"}($||($={}));class X{constructor(e,t,i,n,o){this._requestSender=e,this._paymentIntegrationService=t,this._sessionFactory=i,this._braintreeSdk=n,this._applePayScriptLoader=o,this._onAuthorizeCallback=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this._subTotalLabel=G.Subtotal,this._shippingLabel=G.Shipping}initialize(e){var t,i;return K(this,void 0,void 0,function*(){const{methodId:n,containerId:a,applepay:o}=e;if(!n||!o)throw new B(M.MissingPaymentMethod);yield this._applePayScriptLoader.loadSdk();const{onPaymentAuthorize:r,buyNowInitializeOptions:s,requiresShipping:l}=o;this._requiresShipping=l,this._buyNowInitializeOptions=s,this._onAuthorizeCallback=r,s||(yield this._paymentIntegrationService.loadDefaultCheckout()),yield this._paymentIntegrationService.loadPaymentMethod(n);const d=this._paymentIntegrationService.getState();return this._paymentMethod=d.getPaymentMethodOrThrow(n),d.getCart()&&(yield this._paymentIntegrationService.verifyCheckoutSpamProtection()),(null===(t=this._paymentMethod.initializationData)||void 0===t?void 0:t.gateway)===N.BRAINTREE&&(yield this._initializeBraintreeSdk()),this._applePayButton=this._createButton(a,null===(i=this._paymentMethod.initializationData)||void 0===i?void 0:i.styleOption),this._applePayButton.addEventListener(\"click\",this._handleWalletButtonClick.bind(this)),Promise.resolve()})}deinitialize(){return Promise.resolve()}_createButton(e,t){const i=document.getElementById(e);if(!i)throw new z(\"Unable to create wallet button without valid container ID.\");const n=this._createApplePayButtonElement(t);return i.appendChild(n),n}_createApplePayButtonElement(e){const t=document.createElement(\"apple-pay-button\");return t.setAttribute(\"buttonstyle\",(e=>{switch(e){case $.White:return\"white\";case $.WhiteBorder:return\"white-outline\";case $.Black:default:return\"black\"}})(e)),t.setAttribute(\"type\",\"plain\"),t.setAttribute(\"style\",\"--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;\"),t}_handleWalletButtonClick(e){var t;return K(this,void 0,void 0,function*(){if(e.preventDefault(),!this._paymentMethod||!this._paymentMethod.initializationData)throw new B(M.MissingPaymentMethod);if(this._buyNowInitializeOptions&&\"function\"==typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody){const{countryCode:e,currencyCode:i,merchantCapabilities:n,supportedNetworks:a,storeName:o}=this._paymentMethod.initializationData,r=this._getRequestWithEmptyTotal(e,i,a,n);this._requiresShipping&&(null===(t=r.requiredShippingContactFields)||void 0===t||t.push(\"postalAddress\"));const s=this._sessionFactory.create(r);this._handleApplePayEvents(s,this._paymentMethod,o),s.begin()}else{const e=this._paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getStoreConfigOrThrow(),n=e.getCheckoutOrThrow(),a=this._getBaseRequest(t,n,i,this._paymentMethod),o=this._sessionFactory.create(a);this._handleApplePayEvents(o,this._paymentMethod,i.storeProfile.storeName),o.begin()}})}_getRequestWithEmptyTotal(e,t,i,n){return{countryCode:e,currencyCode:t,supportedNetworks:i,merchantCapabilities:n,total:{label:\"\",amount:\"0\",type:\"pending\"},requiredBillingContactFields:[\"postalAddress\"],requiredShippingContactFields:[\"email\",\"phone\"]}}_getBaseRequest(e,t,i,n){var a;const{storeProfile:{storeCountryCode:o,storeName:r}}=i,{currency:{code:s,decimalPlaces:l}}=e,{initializationData:{merchantCapabilities:d,supportedNetworks:c}}=n,h=e.lineItems.physicalItems.length>0,u={requiredBillingContactFields:[\"postalAddress\"],requiredShippingContactFields:[\"email\",\"phone\"],countryCode:o,currencyCode:s,merchantCapabilities:d,supportedNetworks:c,lineItems:[],total:h?{label:r,amount:`${t.grandTotal.toFixed(l)}`,type:\"pending\"}:{label:r,amount:`${t.grandTotal.toFixed(l)}`,type:\"final\"}};if(h)null===(a=u.requiredShippingContactFields)||void 0===a||a.push(\"postalAddress\");else{const e=[{label:this._subTotalLabel,amount:`${t.subtotal.toFixed(l)}`}];t.taxes.forEach(t=>e.push({label:t.name,amount:`${t.amount.toFixed(l)}`})),u.lineItems=e}return u}_handleApplePayEvents(e,t,i){e.onvalidatemerchant=i=>K(this,void 0,void 0,function*(){try{const{body:n}=yield this._onValidateMerchant(t,i);e.completeMerchantValidation(n)}catch(e){throw new Error(\"Merchant validation failed\")}}),this._buyNowInitializeOptions&&!this._requiresShipping&&(e.onpaymentmethodselected=()=>K(this,void 0,void 0,function*(){yield this._createBuyNowCart(),this._handlePaymentMethodSelected(e)})),e.onshippingcontactselected=t=>K(this,void 0,void 0,function*(){this._buyNowInitializeOptions&&this._requiresShipping&&(yield this._createBuyNowCart()),yield this._handleShippingContactSelected(e,i,t)}),e.onshippingmethodselected=t=>K(this,void 0,void 0,function*(){yield this._handleShippingMethodSelected(e,i,t)}),e.oncancel=()=>K(this,void 0,void 0,function*(){try{const e=`/remote-checkout/${t.id}/signout`;return yield this._requestSender.get(e),yield this._paymentIntegrationService.loadCheckout()}catch(e){throw new x}}),e.onpaymentauthorized=i=>K(this,void 0,void 0,function*(){return this._onPaymentAuthorized(i,e,t)})}_createBuyNowCart(){var e,t;return K(this,void 0,void 0,function*(){try{const i=null===(t=null===(e=this._buyNowInitializeOptions)||void 0===e?void 0:e.getBuyNowCartRequestBody)||void 0===t?void 0:t.call(e);if(!i)throw new B(M.MissingCart);const n=yield this._paymentIntegrationService.createBuyNowCart(i);yield this._paymentIntegrationService.loadCheckout(n.id);const a=this._paymentIntegrationService.getState(),{shouldExecuteSpamCheck:o}=a.getCheckoutOrThrow();o&&(yield this._paymentIntegrationService.verifyCheckoutSpamProtection())}catch(e){throw new W}})}_handlePaymentMethodSelected(e){const t=this._paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getStoreConfigOrThrow(),a=t.getCheckoutOrThrow();if(!this._paymentMethod||!this._paymentMethod.initializationData)throw new B(M.MissingPaymentMethod);const o=this._getBaseRequest(i,a,n,this._paymentMethod);delete o.total.type,e.completePaymentMethodSelection({newTotal:o.total,newLineItems:o.lineItems})}_handleShippingContactSelected(e,t,i){var n;return K(this,void 0,void 0,function*(){const a=this._transformContactToAddress(i.shippingContact);try{yield this._paymentIntegrationService.updateShippingAddress(a)}catch(t){throw e.abort(),new Error(\"Shipping address update failed\")}let o=this._paymentIntegrationService.getState();const{currency:{decimalPlaces:r}}=o.getCartOrThrow();let s=o.getCheckoutOrThrow();const l=null===(n=s.consignments[0].selectedShippingOption)||void 0===n?void 0:n.id,d=s.consignments[0].availableShippingOptions,c=null==d?void 0:d.find(({id:e})=>e===l),h=null==d?void 0:d.filter(e=>e.id!==l),u=c?[{label:c.description,amount:`${c.cost.toFixed(r)}`,detail:c.additionalDescription,identifier:c.id}]:[];if(h&&[...h.filter(e=>e.isRecommended),...h.filter(e=>!e.isRecommended)].forEach(e=>u.push({label:e.description,amount:`${e.cost.toFixed(r)}`,detail:e.additionalDescription,identifier:e.id})),!(d instanceof Array))throw new Error(\"Shipping options not available.\");if(0===d.length)return void e.completeShippingContactSelection(ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,[],{type:\"pending\",label:t,amount:`${s.grandTotal.toFixed(r)}`},[]);const p=d.find(e=>e.isRecommended),m=p?p.id:d[0].id,y=c?c.id:m;try{yield this._updateShippingOption(y)}catch(e){throw new Error(\"Shipping options update failed\")}o=this._paymentIntegrationService.getState(),s=o.getCheckoutOrThrow(),e.completeShippingContactSelection({newShippingMethods:u,newTotal:{type:\"final\",label:t,amount:`${s.grandTotal.toFixed(r)}`},newLineItems:this._getUpdatedLineItems(s,r)})})}_handleShippingMethodSelected(e,t,i){return K(this,void 0,void 0,function*(){const{shippingMethod:{identifier:n}}=i;try{yield this._updateShippingOption(n)}catch(t){throw e.abort(),new Error(\"Shipping option selection update failed.\")}const a=this._paymentIntegrationService.getState(),{currency:{decimalPlaces:o}}=a.getCartOrThrow(),r=a.getCheckoutOrThrow();e.completeShippingMethodSelection({newTotal:{type:\"final\",label:t,amount:`${r.grandTotal.toFixed(o)}`},newLineItems:this._getUpdatedLineItems(r,o)})})}_getUpdatedLineItems(e,t){const i=[{label:this._subTotalLabel,amount:`${e.subtotal.toFixed(t)}`}];return e.taxes.forEach(e=>i.push({label:e.name,amount:`${e.amount.toFixed(t)}`})),i.push({label:this._shippingLabel,amount:`${e.shippingCostTotal.toFixed(t)}`}),i}_updateShippingOption(e){return K(this,void 0,void 0,function*(){return this._paymentIntegrationService.selectShippingOption(e)})}_onValidateMerchant(e,t){return K(this,void 0,void 0,function*(){const i=[`validationUrl=${t.validationURL}`,`merchantIdentifier=${e.initializationData.merchantId}`,`displayName=${e.initializationData.storeName}`,`domainName=${window.location.hostname}`].join(\"&\");return this._requestSender.post(`${e.initializationData.paymentsUrl}/api/public/v1/payments/applepay/validate_merchant`,{credentials:!1,headers:{Accept:\"application/json\",\"Content-Type\":\"application/x-www-form-urlencoded\",\"X-XSRF-TOKEN\":null},body:i})})}_onPaymentAuthorized(e,t,i){var n;return K(this,void 0,void 0,function*(){const{token:a,billingContact:o,shippingContact:r}=e.payment,s=this._paymentIntegrationService.getState().getCartOrThrow().lineItems.physicalItems.length>0;let l;(null===(n=i.initializationData)||void 0===n?void 0:n.gateway)===N.BRAINTREE&&(l=yield this._getBraintreeDeviceData());const d={methodId:i.id,paymentData:{deviceSessionId:l,formattedPayload:{apple_pay_token:{payment_data:a.paymentData,payment_method:a.paymentMethod,transaction_id:a.transactionIdentifier}}}},c=this._transformContactToAddress(o),h=this._transformContactToAddress(r),u=null==r?void 0:r.emailAddress,p=(null==r?void 0:r.phoneNumber)||\"\";try{return yield this._paymentIntegrationService.updateBillingAddress(Object.assign(Object.assign({},c),{email:u,phone:p})),s&&(yield this._paymentIntegrationService.updateShippingAddress(h)),yield this._paymentIntegrationService.submitOrder({useStoreCredit:!1}),yield this._paymentIntegrationService.submitPayment(d),t.completePayment(ApplePaySession.STATUS_SUCCESS),this._onAuthorizeCallback()}catch(e){throw t.completePayment(ApplePaySession.STATUS_FAILURE),new Error(\"Payment cannot complete\")}})}_transformContactToAddress(e){return{firstName:(null==e?void 0:e.givenName)||\"\",lastName:(null==e?void 0:e.familyName)||\"\",city:(null==e?void 0:e.locality)||\"\",company:\"\",address1:(null==e?void 0:e.addressLines)&&e.addressLines[0]||\"\",address2:(null==e?void 0:e.addressLines)&&e.addressLines[1]||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\",phone:(null==e?void 0:e.phoneNumber)||\"\",stateOrProvince:(null==e?void 0:e.administrativeArea)||\"\",stateOrProvinceCode:(null==e?void 0:e.administrativeArea)||\"\",customFields:[]}}_getBraintreeDeviceData(){return K(this,void 0,void 0,function*(){try{const{deviceData:e}=yield this._braintreeSdk.getDataCollectorOrThrow();return e}catch(e){}})}_initializeBraintreeSdk(){return K(this,void 0,void 0,function*(){yield this._paymentIntegrationService.loadPaymentMethod(N.BRAINTREE);const e=this._paymentIntegrationService.getState().getPaymentMethod(N.BRAINTREE);e&&e.clientToken&&e.initializationData&&this._braintreeSdk.initialize(e.clientToken)})}}const Y=D(n=>{const{getHost:a}=n.getState(),o=new c(n);return new X((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_0__.createRequestSender)({host:a()}),n,new j,new T(new O((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),window,o)),new q(new _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.ScriptLoader))},[{id:\"applepay\"}]);class Q extends z{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class Z extends h{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}var J,ee=function(e,t,i,n){return new(i||(i=Promise))(function(a,o){function r(e){try{l(n.next(e))}catch(e){o(e)}}function s(e){try{l(n.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}l((n=n.apply(e,t||[])).next())})};!function(e){e.Shipping=\"Shipping\",e.Subtotal=\"Subtotal\",e.StoreCredit=\"Store Credit\"}(J||(J={}));class te{constructor(e,t,i,n,a){this._requestSender=e,this._paymentIntegrationService=t,this._sessionFactory=i,this._braintreeSdk=n,this._applePayScriptLoader=a,this._shippingLabel=J.Shipping,this._subTotalLabel=J.Subtotal,this._storeCreditLabel=J.StoreCredit}initialize(e){var t,i,n,a;return ee(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new z('Unable to submit payment because \"options.methodId\" argument is not provided.');const{methodId:o}=e;yield this._applePayScriptLoader.loadSdk(),this._shippingLabel=(null===(t=e.applepay)||void 0===t?void 0:t.shippingLabel)||J.Shipping,this._subTotalLabel=(null===(i=e.applepay)||void 0===i?void 0:i.subtotalLabel)||J.Subtotal,this._storeCreditLabel=(null===(n=e.applepay)||void 0===n?void 0:n.storeCreditLabel)||J.StoreCredit;const r=(yield this._paymentIntegrationService.loadPaymentMethod(o)).getPaymentMethodOrThrow(o);(null===(a=r.initializationData)||void 0===a?void 0:a.gateway)===N.BRAINTREE&&(yield this._initializeBraintreeSdk())})}execute(e,t){return ee(this,void 0,void 0,function*(){const{payment:i}=e,n=this._paymentIntegrationService.getState();if(!i)throw new Q([\"payment\"]);const{methodId:a}=i,o=n.getPaymentMethodOrThrow(a),r=this._getBaseRequest(n,o),s=this._sessionFactory.create(r);return yield this._paymentIntegrationService.submitOrder({useStoreCredit:e.useStoreCredit},t),s.begin(),new Promise((e,t)=>{this._handleApplePayEvents(s,o,{resolve:e,reject:t})})})}finalize(){return Promise.reject(new Z)}deinitialize(){return Promise.resolve()}_getBaseRequest(e,t){const i=e.getCheckoutOrThrow(),n=e.getCartOrThrow(),a=e.getStoreConfigOrThrow(),{storeProfile:{storeCountryCode:o,storeName:r}}=a,{currency:{code:s,decimalPlaces:l}}=n,{initializationData:{merchantCapabilities:d,supportedNetworks:c}}=t,{grandTotal:h,isStoreCreditApplied:u,outstandingBalance:p}=i,m=[{label:this._subTotalLabel,amount:`${i.subtotal.toFixed(l)}`}];if(i.taxes.forEach(e=>m.push({label:e.name,amount:`${e.amount.toFixed(l)}`})),m.push({label:this._shippingLabel,amount:`${i.shippingCostTotal.toFixed(l)}`}),u){const{storeCredit:t}=e.getCustomerOrThrow();m.push({label:this._storeCreditLabel,amount:`-${Math.min(h,t).toFixed(l)}`})}return{countryCode:o,currencyCode:s,merchantCapabilities:d,supportedNetworks:c,lineItems:m,total:{label:r,amount:`${p.toFixed(l)}`,type:\"final\"}}}_handleApplePayEvents(e,t,i){e.onvalidatemerchant=i=>ee(this,void 0,void 0,function*(){try{const{body:n}=yield this._onValidateMerchant(t,i);e.completeMerchantValidation(n)}catch(e){throw new Error(\"Merchant validation failed\")}}),e.oncancel=()=>ee(this,void 0,void 0,function*(){return i.reject(new x(\"Continue with applepay\"))}),e.onpaymentauthorized=n=>this._onPaymentAuthorized(n,e,t,i)}_onValidateMerchant(e,t){return ee(this,void 0,void 0,function*(){const i=[`validationUrl=${t.validationURL}`,`merchantIdentifier=${e.initializationData.merchantId}`,`displayName=${e.initializationData.storeName}`,`domainName=${window.location.hostname}`].join(\"&\");return this._requestSender.post(`${e.initializationData.paymentsUrl}/api/public/v1/payments/applepay/validate_merchant`,{credentials:!1,headers:{Accept:\"application/json\",\"Content-Type\":\"application/x-www-form-urlencoded\",\"X-XSRF-TOKEN\":null},body:i})})}_onPaymentAuthorized(e,t,i,n){var a;return ee(this,void 0,void 0,function*(){const{token:o}=e.payment;let r;(null===(a=i.initializationData)||void 0===a?void 0:a.gateway)===N.BRAINTREE&&(r=yield this._getBraintreeDeviceData());const s={methodId:i.id,paymentData:{deviceSessionId:r,formattedPayload:{apple_pay_token:{payment_data:o.paymentData,payment_method:o.paymentMethod,transaction_id:o.transactionIdentifier}}}};try{return yield this._paymentIntegrationService.submitPayment(s),t.completePayment(ApplePaySession.STATUS_SUCCESS),n.resolve()}catch(e){return t.completePayment(ApplePaySession.STATUS_FAILURE),n.reject(new f(p.PaymentNotInitialized))}})}_getBraintreeDeviceData(){return ee(this,void 0,void 0,function*(){try{const{deviceData:e}=yield this._braintreeSdk.getDataCollectorOrThrow();return e}catch(e){}})}_initializeBraintreeSdk(){return ee(this,void 0,void 0,function*(){const e=this._paymentIntegrationService.getState();let t=e.getPaymentMethod(N.BRAINTREE_FASTLANE)||e.getPaymentMethod(N.BRAINTREE);t||(yield this._paymentIntegrationService.loadPaymentMethod(N.BRAINTREE),t=e.getPaymentMethod(N.BRAINTREE)),t&&t.clientToken&&t.initializationData&&this._braintreeSdk.initialize(t.clientToken)})}}const ie=D(n=>{const{getHost:a}=n.getState(),o=new c(n);return new te((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_0__.createRequestSender)({host:a()}),n,new j,new T(new O((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),window,o)),new q(new _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.ScriptLoader))},[{id:\"applepay\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/apple-pay.js\n\n}");

/***/ })

}]);