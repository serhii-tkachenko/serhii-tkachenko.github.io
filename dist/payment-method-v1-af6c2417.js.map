{"version":3,"file":"payment-method-v1-af6c2417.js","mappings":"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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/no-payment-data-required-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/no-payment-integration/src/create-no-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-three-d-secure-flow.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-failed-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-client.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/cardinal-integration/src/cardinal-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/paypal-pro-integration/src/create-paypal-pro-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/sezzle-integration/src/create-sezzle-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-base-instrument/is-base-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/isTdOnlineMartAdditionalAction.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/is-create-token-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/td-online-mart-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/td-bank-integration/src/create-td-online-mart-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/storefront-payment-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/zip-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/zip-integration/src/create-zip-payment-strategy.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/PaymentMethod.tsx"],"sourcesContent":["import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { omit } from 'lodash';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(omit(payload, 'payment'), options);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport NoPaymentDataRequiredPaymentStrategy from './no-payment-data-required-strategy';\n\nconst createNoPaymentStrategy: PaymentStrategyFactory<NoPaymentDataRequiredPaymentStrategy> = (\n    paymentIntegrationService,\n) => new NoPaymentDataRequiredPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createNoPaymentStrategy, [{ id: 'nopaymentdatarequired' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { merge, some } from 'lodash';\n\nimport {\n    HostedForm,\n    isRequestError,\n    isVaultedInstrument,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CardinalClient, { CardinalOrderData } from './cardinal-client';\n\nexport default class CardinalThreeDSecureFlow {\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _cardinalClient: CardinalClient,\n    ) {}\n\n    async prepare(method: PaymentMethod): Promise<void> {\n        await this._cardinalClient.load(method.id, method.config.testMode);\n        await this._cardinalClient.configure(await this._getClientToken(method));\n    }\n\n    async start(\n        execute: PaymentStrategy['execute'],\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n        hostedForm?: HostedForm,\n    ): Promise<void> {\n        const { getCardInstrument, getPaymentMethodOrThrow } =\n            this._paymentIntegrationService.getState();\n\n        const { payment: { methodId = '', paymentData = {} } = {} } = payload;\n        const instrument =\n            isVaultedInstrument(paymentData) && getCardInstrument(paymentData.instrumentId);\n        const bin = instrument ? instrument.iin : hostedForm && hostedForm.getBin();\n\n        if (bin) {\n            await this._cardinalClient.runBinProcess(bin);\n        }\n\n        try {\n            return await execute(\n                merge(payload, {\n                    payment: {\n                        paymentData: {\n                            threeDSecure: { token: getPaymentMethodOrThrow(methodId).clientToken },\n                        },\n                    },\n                }),\n                options,\n            );\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !some(error.body.errors, { code: 'three_d_secure_required' })\n            ) {\n                throw error;\n            }\n\n            const threeDSecure = await this._cardinalClient.getThreeDSecureData(\n                error.body.three_ds_result,\n                this._getOrderData(),\n            );\n\n            if (!hostedForm) {\n                await this._paymentIntegrationService.submitPayment(\n                    merge(payload.payment, {\n                        paymentData: { threeDSecure },\n                    }),\n                );\n\n                return;\n            }\n\n            await hostedForm.submit(\n                merge(payload.payment, {\n                    paymentData: { threeDSecure },\n                }),\n            );\n        }\n    }\n\n    private async _getClientToken(method: PaymentMethod): Promise<string> {\n        if (method.clientToken) {\n            return method.clientToken;\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(method.id);\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow(method.id);\n\n        return paymentMethod.clientToken || '';\n    }\n\n    private _getOrderData(): CardinalOrderData {\n        const state = this._paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddressOrThrow();\n        const shippingAddress = state.getShippingAddress();\n        const checkout = state.getCheckoutOrThrow();\n        const order = state.getOrderOrThrow();\n\n        return {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method has thrown an unexpected error.',\n        );\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import { ThreeDSecure, ThreeDSecureToken } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(\n        initializationType: K,\n        initializationData: CardinalInitializationDataMap[K],\n    ): void;\n    trigger(\n        event: CardinalTriggerEvents,\n        data?: string,\n    ): Promise<CardinalBinProcessResponse | void>;\n    continue(\n        paymentBrand: CardinalPaymentBrand,\n        continueObject: CardinalContinue,\n        order: CardinalPartialOrder,\n    ): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport type setupCompleteFn = (setupCompleteData: CardinalSetupCompletedData) => void;\nexport type validatedFn = (data: CardinalValidatedData, jwt?: string) => void;\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted]: setupCompleteFn;\n    [CardinalEventType.Validated]: validatedFn;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated?: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n    ChallengeCancel: string;\n}>;\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n\nexport type CardinalThreeDSecureToken = Pick<ThreeDSecure, 'xid'> | ThreeDSecureToken;\n","import { includes, noop } from 'lodash';\n\nimport {\n    Address,\n    BillingAddress,\n    CreditCardInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentMethodFailedError,\n    ThreeDSecureToken,\n    ThreeDsResult,\n    VaultedInstrument,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalSDK,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData,\n} from './cardinal';\nimport CardinalScriptLoader from './cardinal-script-loader';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _provider = '';\n    private _testMode = false;\n    private _sdk?: Promise<CardinalSDK>;\n    private _configurationToken = '';\n\n    constructor(private _scriptLoader: CardinalScriptLoader) {}\n\n    load(provider: string, testMode = false): Promise<void> {\n        this._provider = provider;\n        this._testMode = testMode;\n\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(noop);\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._configurationToken) {\n            if (this._configurationToken === clientToken) {\n                return Promise.resolve();\n            }\n\n            this._sdk = this._scriptLoader.load(`${this._provider}.${Date.now()}`, this._testMode);\n        }\n\n        return this._getClientSDK().then(\n            (client) =>\n                new Promise<void>((resolve, reject) => {\n                    client.on(CardinalEventType.SetupCompleted, () => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        this._configurationToken = clientToken;\n\n                        resolve();\n                    });\n\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                        client.off(CardinalEventType.SetupCompleted);\n                        client.off(CardinalEventType.Validated);\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Error:\n                                if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                    reject(\n                                        new MissingDataError(\n                                            MissingDataErrorType.MissingPaymentMethod,\n                                        ),\n                                    );\n                                }\n\n                                reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                break;\n                        }\n                    });\n\n                    client.setup(CardinalInitializationType.Init, {\n                        jwt: clientToken,\n                    });\n                }),\n        );\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then((client) =>\n                client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(noop),\n            )\n            .then((result) => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(\n        threeDSecureData: ThreeDsResult,\n        orderData: CardinalOrderData,\n    ): Promise<ThreeDSecureToken> {\n        return this._getClientSDK().then((client) => {\n            return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                client.on(\n                    CardinalEventType.Validated,\n                    (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n\n                        if (!jwt) {\n                            return reject(\n                                new PaymentMethodFailedError(\n                                    data.ErrorDescription\n                                        ? data.ErrorDescription\n                                        : 'An error was encountered while processing the transaction.',\n                                ),\n                            );\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(\n                                        new PaymentMethodFailedError(data.ErrorDescription),\n                                    );\n                                } else if (\n                                    !data.Payment ||\n                                    !data.Payment.ExtendedData ||\n                                    data.Payment.ExtendedData.SignatureVerification !==\n                                        CardinalSignatureVerification.Yes\n                                ) {\n                                    return reject(\n                                        new PaymentMethodFailedError(\n                                            'Transaction signature could not be validated.',\n                                        ),\n                                    );\n                                }\n\n                                return resolve({ token: jwt });\n\n                            case CardinalValidatedAction.Failure:\n                                return reject(\n                                    new PaymentMethodFailedError(\n                                        'User failed authentication or an error was encountered while processing the transaction.',\n                                    ),\n                                );\n\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    },\n                );\n\n                const continueObject = {\n                    AcsUrl: threeDSecureData.acs_url,\n                    Payload: threeDSecureData.merchant_data,\n                };\n\n                const partialOrder = this._mapToPartialOrder(\n                    orderData,\n                    threeDSecureData.payer_auth_request,\n                );\n\n                client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n            });\n        });\n    }\n\n    private _mapToPartialOrder(\n        orderData: CardinalOrderData,\n        transactionId: string,\n    ): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(private _scriptLoader: ScriptLoader, private _window: CardinalWindow = window) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader.loadScript(`${url}?v=${provider}`).then(() => {\n            if (!this._window.Cardinal) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return this._window.Cardinal;\n        });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import { CardinalThreeDSecureFlow } from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    OrderRequestBody,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class PaypalProPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        protected paymentIntegrationService: PaymentIntegrationService,\n        private threeDSecureFlow: CardinalThreeDSecureFlow,\n    ) {\n        super(paymentIntegrationService);\n    }\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await super.initialize(options);\n\n        const state = this.paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (paymentMethod.config.is3dsEnabled) {\n            await this.threeDSecureFlow.prepare(paymentMethod);\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment: { methodId = '' } = {} } = payload;\n\n        const state = this.paymentIntegrationService.getState();\n\n        if (state.getPaymentStatus() === PaymentStatusTypes.ACKNOWLEDGE) {\n            await this.paymentIntegrationService.submitOrder(\n                {\n                    ...payload,\n                    payment: { methodId },\n                },\n                options,\n            );\n\n            return Promise.resolve();\n        }\n\n        if (state.getPaymentMethodOrThrow(methodId).config.is3dsEnabled) {\n            return this.threeDSecureFlow.start(\n                super.execute.bind(this),\n                payload,\n                options,\n                this._hostedForm,\n            );\n        }\n\n        return super.execute(payload, options);\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from '@bigcommerce/checkout-sdk/cardinal-integration';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport PaypalProPaymentStrategy from './paypal-pro-payment-strategy';\n\nconst createPayPalProPaymentStrategy: CheckoutButtonStrategyFactory<PaypalProPaymentStrategy> = (\n    paymentIntegrationService,\n) =>\n    new PaypalProPaymentStrategy(\n        paymentIntegrationService,\n        new CardinalThreeDSecureFlow(\n            paymentIntegrationService,\n            new CardinalClient(new CardinalScriptLoader(getScriptLoader())),\n        ),\n    );\n\nexport default toResolvableModule(createPayPalProPaymentStrategy, [{ id: 'paypal' }]);\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { ExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/external-integration';\n\nexport default class SezzlePaymentStrategy extends ExternalPaymentStrategy {\n    protected redirectUrl(url: string): void {\n        window.location.replace(url);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport SezzlePaymentStrategy from './sezzle-payment-strategy';\n\nconst createSezzlePaymentStrategy: PaymentStrategyFactory<SezzlePaymentStrategy> = (\n    paymentIntegrationService,\n) => new SezzlePaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createSezzlePaymentStrategy, [{ id: 'sezzle' }]);\n","import { RequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface TdOnlineMartHostWindow extends Window {\n    customcheckout?(): TDCustomCheckoutSDK;\n}\n\nexport interface TDCustomCheckoutSDK {\n    create(fieldType: FieldType, options?: FieldOptions): TdOnlineMartElement;\n    createToken(callback: (result: CreateTokenResponse) => void): void;\n}\n\nexport interface TdOnlineMartElement {\n    mount(cssSelector: string): void;\n    unmount(): void;\n}\n\nexport enum FieldType {\n    CARD_NUMBER = 'card-number',\n    CVV = 'cvv',\n    EXPIRY = 'expiry',\n}\n\nexport interface TDOnlineMartInput {\n    id: string;\n    fieldType: FieldType;\n    inputElement?: TdOnlineMartElement;\n}\n\ninterface CreateTokenResponse {\n    code: string;\n    error?: CreateTokenError;\n    token?: string;\n    last4?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nexport interface CreateTokenError {\n    field: string;\n    type: string;\n    message: string;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface TdOnlineMartThreeDSErrorBody {\n    errors?: Array<{ code: string }>;\n    three_ds_result?: {\n        acs_url: string;\n        payer_auth_request: string;\n        merchant_data: string;\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport type TdOnlineMartAdditionalAction = RequestError<TdOnlineMartThreeDSErrorBody>;\n\n// Note: The style property affects the remote styling of text inside the iframe input. The classes property updates the class list of the element the field is mounted to on your page.\ninterface FieldOptions {\n    placeholder?: string;\n    style?: Styles;\n    classes?: Classes;\n    brands?: string[];\n}\n\ninterface Classes {\n    base?: string;\n    complete?: string;\n    empty?: string;\n    focus?: string;\n    error?: string;\n}\n\ninterface Styles {\n    base?: CssStyles;\n    complete?: CssStyles;\n    empty?: CssStyles;\n    error?: CssStyles;\n}\n\ninterface CssStyles {\n    color?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontStyle?: string;\n    fontWeight?: string;\n    textDecoration?: string;\n    padding?: string;\n    paddingLeft?: string;\n    paddingTop?: string;\n    paddingRight?: string;\n    paddingBottom?: string;\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","export interface BaseInstrument {\n    bigpayToken: string;\n    defaultInstrument: boolean;\n    provider: string;\n    trustedShippingAddress: boolean;\n    method: string;\n    type: string;\n}\n\nexport function isBaseInstrument(instrument: unknown): instrument is BaseInstrument {\n    if (typeof instrument !== 'object' || instrument === null) {\n        return false;\n    }\n\n    return (\n        'bigpayToken' in instrument &&\n        'defaultInstrument' in instrument &&\n        'provider' in instrument &&\n        'trustedShippingAddress' in instrument &&\n        'method' in instrument &&\n        'type' in instrument\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isBaseInstrument } from '@bigcommerce/checkout-sdk/utility';\n\nimport isCreateTokenError from './is-create-token-error';\nimport { isTdOnlineMartAdditionalAction } from './isTdOnlineMartAdditionalAction';\nimport {\n    FieldType,\n    TDCustomCheckoutSDK,\n    TDOnlineMartInput,\n    TdOnlineMartThreeDSErrorBody,\n} from './td-online-mart';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nexport default class TDOnlineMartPaymentStrategy implements PaymentStrategy {\n    private tdOnlineMartClient?: TDCustomCheckoutSDK;\n    private tdInputs: TDOnlineMartInput[] = [\n        {\n            id: 'ccNumber',\n            fieldType: FieldType.CARD_NUMBER,\n        },\n        {\n            id: 'ccCvv',\n            fieldType: FieldType.CVV,\n        },\n        {\n            id: 'ccExpiry',\n            fieldType: FieldType.EXPIRY,\n        },\n    ];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private tdOnlineMartScriptLoader: TDOnlineMartScriptLoader,\n        private formPoster: FormPoster,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        const { methodId } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        this.tdOnlineMartClient = await this.loadTDOnlineMartJs();\n\n        this.mountHostedFields(methodId);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        if (!payment.methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const paymentPayload = await this.getPaymentPayloadOrThrow(payment);\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment(paymentPayload);\n        } catch (error: unknown) {\n            await this.processWithAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this.tdOnlineMartClient = undefined;\n\n        this.tdInputs.forEach(({ inputElement }: TDOnlineMartInput) => {\n            inputElement?.unmount();\n        });\n\n        return Promise.resolve();\n    }\n\n    private async getPaymentPayloadOrThrow(payment: OrderPaymentRequestBody) {\n        const { methodId, paymentData } = payment;\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n        const commonPaymentData = {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            browser_info: getBrowserInfo(),\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        };\n\n        if (\n            isHostedInstrumentLike(paymentData) &&\n            isVaultedInstrument(paymentData) &&\n            paymentData.instrumentId\n        ) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const digitalItemsInCart = !!cart.lineItems.digitalItems.length;\n\n            const shouldAddVerificationToken =\n                !this.isTrustedVaultingInstrument(paymentData.instrumentId) || digitalItemsInCart;\n\n            return {\n                methodId,\n                paymentData: {\n                    ...commonPaymentData,\n                    instrumentId: paymentData.instrumentId,\n                    ...(shouldAddVerificationToken ? { nonce: paymentData.instrumentId } : {}),\n                },\n            };\n        }\n\n        let nonce: string;\n\n        try {\n            nonce = await this.getTokenOrThrow();\n        } catch (error) {\n            this.throwTokenizationError(error);\n        }\n\n        return {\n            methodId,\n            paymentData: {\n                ...commonPaymentData,\n                nonce,\n            },\n        };\n    }\n\n    private mountHostedFields(methodId: string): void {\n        const options = this.getHostedFieldsOptions();\n        const tdOnlineMartClient = this.getTDOnlineMartClientOrThrow();\n\n        this.tdInputs.forEach((input: TDOnlineMartInput) => {\n            const inputId = `${methodId}-${input.id}`;\n\n            if (!document.getElementById(inputId)) {\n                return;\n            }\n\n            input.inputElement = tdOnlineMartClient.create(input.fieldType, options);\n            input.inputElement.mount(`#${inputId}`);\n        });\n    }\n\n    private async loadTDOnlineMartJs(): Promise<TDCustomCheckoutSDK> {\n        if (this.tdOnlineMartClient) {\n            return this.tdOnlineMartClient;\n        }\n\n        return this.tdOnlineMartScriptLoader.load();\n    }\n\n    private getTokenOrThrow(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.getTDOnlineMartClientOrThrow().createToken((result) => {\n                const { error, token } = result;\n\n                if (error || !token) {\n                    return reject(error);\n                }\n\n                resolve(token);\n            });\n        });\n    }\n\n    private getTDOnlineMartClientOrThrow(): TDCustomCheckoutSDK {\n        if (!this.tdOnlineMartClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.tdOnlineMartClient;\n    }\n\n    private async processWithAdditionalAction(error: unknown): Promise<void> {\n        if (!isTdOnlineMartAdditionalAction(error)) {\n            throw error;\n        }\n\n        const { three_ds_result: threeDSResult }: TdOnlineMartThreeDSErrorBody = error.body;\n        const {\n            acs_url: formUrl,\n            payer_auth_request: threeDSSessionData,\n            merchant_data: creq,\n        } = threeDSResult || {};\n\n        if (!formUrl || !threeDSSessionData || !creq) {\n            throw new PaymentArgumentInvalidError(['formUrl', 'threeDSSessionData', 'creq']);\n        }\n\n        return new Promise((resolve) => {\n            this.formPoster.postForm(\n                formUrl,\n                {\n                    threeDSSessionData,\n                    creq,\n                },\n                resolve,\n                '_top',\n            );\n        });\n    }\n\n    private throwTokenizationError(error: unknown): never {\n        if (!isCreateTokenError(error)) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        throw new Error(error.message);\n    }\n\n    private getHostedFieldsOptions() {\n        const style = {\n            error: {\n                color: '#d14343',\n            },\n        };\n\n        const classes = {\n            error: 'form-input--error',\n        };\n\n        return {\n            style,\n            classes,\n        };\n    }\n\n    private isTrustedVaultingInstrument(instrumentId: string): boolean {\n        const instruments = this.paymentIntegrationService.getState().getInstruments();\n\n        const findInstrument = instruments?.find(\n            (instrument) => isBaseInstrument(instrument) && instrument.bigpayToken === instrumentId,\n        );\n        const trustedShippingAddress = isBaseInstrument(findInstrument)\n            ? findInstrument.trustedShippingAddress\n            : {};\n\n        return !!trustedShippingAddress;\n    }\n}\n","import { isArray, isObject, some } from 'lodash';\n\nimport { isRequestError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TdOnlineMartAdditionalAction, TdOnlineMartThreeDSErrorBody } from './td-online-mart';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nfunction isTdOnlineMartThreeDSErrorBody(\n    errorBody: unknown,\n): errorBody is TdOnlineMartThreeDSErrorBody {\n    return (\n        isObject(errorBody) &&\n        typeof errorBody === 'object' &&\n        'errors' in errorBody &&\n        'three_ds_result' in errorBody &&\n        isArray((errorBody as TdOnlineMartThreeDSErrorBody).errors) &&\n        some((errorBody as TdOnlineMartThreeDSErrorBody).errors, {\n            code: 'three_d_secure_required',\n        })\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n\nexport function isTdOnlineMartAdditionalAction(\n    error: unknown,\n): error is TdOnlineMartAdditionalAction {\n    return isRequestError(error) && isTdOnlineMartThreeDSErrorBody(error.body);\n}\n","import { CreateTokenError } from './td-online-mart';\n\nexport default function isCreateTokenError(error: unknown): error is CreateTokenError {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'field' in error &&\n        'type' in error &&\n        'message' in error\n    );\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { TDCustomCheckoutSDK, TdOnlineMartHostWindow } from './td-online-mart';\n\nexport default class TDOnlineMartScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private tdOnlineMartWindow: TdOnlineMartHostWindow = window,\n    ) {}\n\n    async load(): Promise<TDCustomCheckoutSDK> {\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            await this.scriptLoader.loadScript(\n                'https://libs.na.bambora.com/customcheckout/1/customcheckout.js',\n            );\n        }\n\n        if (!this.tdOnlineMartWindow.customcheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.tdOnlineMartWindow.customcheckout();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport TDOnlineMartPaymentStrategy from './td-online-mart-payment-strategy';\nimport TDOnlineMartScriptLoader from './td-online-mart-script-loader';\n\nconst createTDOnlineMartPaymentStrategy: PaymentStrategyFactory<TDOnlineMartPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new TDOnlineMartPaymentStrategy(\n        paymentIntegrationService,\n        new TDOnlineMartScriptLoader(getScriptLoader()),\n        createFormPoster(),\n    );\n};\n\nexport default toResolvableModule(createTDOnlineMartPaymentStrategy, [{ id: 'tdonlinemart' }]);\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, SDK_VERSION_HEADERS } from '../common/http-request';\n\nexport default class StorefrontPaymentRequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    async saveExternalId(methodId: string, token: string): Promise<void> {\n        const url = `/api/storefront/payment/${methodId}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                ...SDK_VERSION_HEADERS,\n            },\n            body: {\n                externalId: token,\n                provider: methodId,\n            },\n        };\n\n        await this._requestSender.post<void>(url, options);\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import {\n    isRequestError,\n    MissingDataError,\n    MissingDataErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StorefrontPaymentRequestSender,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private storefrontPaymentRequestSender: StorefrontPaymentRequestSender,\n    ) {}\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const { getPaymentMethodOrThrow } = await this.paymentIntegrationService.loadPaymentMethod(\n            methodId,\n            options,\n        );\n\n        const {\n            clientToken,\n            initializationData,\n        }: { clientToken?: string; initializationData?: { redirectUrl?: string } } =\n            getPaymentMethodOrThrow(methodId);\n        const redirectUrl = initializationData?.redirectUrl;\n\n        if (!clientToken || !redirectUrl) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { id: nonce } = JSON.parse(clientToken);\n\n        if (!nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        const { isStoreCreditApplied: useStoreCredit } = this.paymentIntegrationService\n            .getState()\n            .getCheckoutOrThrow();\n\n        await this.paymentIntegrationService.applyStoreCredit(useStoreCredit);\n        await this.paymentIntegrationService.initializePayment(methodId, { useStoreCredit });\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n        await this._prepareForReferredRegistration(methodId, nonce);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId,\n                paymentData: { nonce },\n            });\n        } catch (error) {\n            if (isRequestError(error) && error.body.status === 'additional_action_required') {\n                return new Promise(() => window.location.replace(redirectUrl));\n            }\n\n            throw error;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _prepareForReferredRegistration(methodId: string, externalId: string): Promise<void> {\n        return this.storefrontPaymentRequestSender.saveExternalId(methodId, externalId);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport {\n    PaymentStrategyFactory,\n    StorefrontPaymentRequestSender,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ZipPaymentStrategy from './zip-payment-strategy';\n\nconst createZipPaymentStrategy: PaymentStrategyFactory<ZipPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const requestSender = createRequestSender({ host: getHost() });\n    const storefrontPaymentRequestSender = new StorefrontPaymentRequestSender(requestSender);\n\n    return new ZipPaymentStrategy(paymentIntegrationService, storefrontPaymentRequestSender);\n};\n\nexport default toResolvableModule(createZipPaymentStrategy, [{ id: 'zip' }, { id: 'quadpay' }]);\n","import {\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createNoPaymentStrategy, } from '@bigcommerce/checkout-sdk/integrations/no-payment';\nimport { createPayPalProPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/paypal-pro';\nimport { createSezzlePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/sezzle';\nimport { createTDOnlineMartPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/td-bank';\nimport { createZipPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/zip';\nimport React, { type FunctionComponent, lazy, memo, Suspense } from 'react';\n\nimport { type CheckoutContextProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\n\nconst BraintreeCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"braintree-credit-card-payment-method\" */'./BraintreeCreditCardPaymentMethod'));\nconst HostedCreditCardPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-credit-card-payment-method\" */'./HostedCreditCardPaymentMethod'));\nconst HostedPaymentMethod = lazy(() => import(/* webpackChunkName: \"hosted-payment-method\" */'./HostedPaymentMethod'));\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n    submitForm?(): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\nconst PaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & WithCheckoutPaymentMethodProps\n> = (props) => {\n    const { method } = props;\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <Suspense><BraintreeCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    if (\n        method.id === PaymentMethodId.Humm ||\n        method.id === PaymentMethodId.Laybuy ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted\n    ) {\n        return <Suspense><HostedPaymentMethod {...props} /></Suspense>;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (\n        method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api\n    ) {\n        return <Suspense><HostedCreditCardPaymentMethod {...props} /></Suspense>;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps,\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: (options) => {\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [\n                    ...options.integrations ?? [],\n                    // The strategies below don’t appear to correspond to any existing component,\n                    // so they are initialized globally at the root level.\n                    createNoPaymentStrategy,\n                    createPayPalProPaymentStrategy,\n                    createSezzlePaymentStrategy,\n                    createTDOnlineMartPaymentStrategy,\n                    createZipPaymentStrategy,\n                ],\n            });\n        },\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n"],"names":["StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","OrderFinalizationNotRequiredError","NoPaymentDataRequiredPaymentStrategy","_paymentIntegrationService","execute","payload","options","submitOrder","omit","finalize","Promise","reject","initialize","resolve","deinitialize","module","paymentIntegrationService","resolveIds","id","assign","MissingDataErrorType","NotInitializedErrorType","CardinalThreeDSecureFlow","_cardinalClient","prepare","method","load","config","testMode","configure","_getClientToken","start","hostedForm","getCardInstrument","getPaymentMethodOrThrow","getState","payment","methodId","paymentData","instrument","Boolean","instrumentId","bin","iin","getBin","runBinProcess","merge","threeDSecure","token","clientToken","error","some","body","errors","code","getThreeDSecureData","three_ds_result","_getOrderData","submitPayment","submit","loadPaymentMethod","state","billingAddress","getBillingAddressOrThrow","shippingAddress","getShippingAddress","checkout","getCheckoutOrThrow","order","getOrderOrThrow","currencyCode","cart","currency","orderId","toString","amount","cartAmount","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","PaymentMethodFailedError","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","CardinalSignatureValidationErrors","CardinalEventType","CardinalInitializationType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","SetupCompleted","Validated","Init","Complete","Confirm","Success","NoAction","Failure","CCA","Paypal","Wallet","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","CardinalClient","_scriptLoader","_provider","_testMode","_configurationToken","provider","_sdk","then","noop","Date","now","_getClientSDK","client","on","off","data","ActionCode","includes","ErrorNumber","ErrorDescription","setup","jwt","binNumber","trigger","catch","result","Status","threeDSecureData","orderData","Payment","ExtendedData","SignatureVerification","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","email","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ccNumber","ExpirationMonth","ccExpiry","month","ExpirationYear","year","NameOnAccount","ccName","CardCode","ccCvv","address","cardinalAddress","FirstName","firstName","LastName","lastName","Address1","address1","City","city","State","stateOrProvince","PostalCode","postalCode","CountryCode","countryCode","address2","Address2","phone","Phone1","PaymentMethodClientUnavailableError","CardinalScriptLoader","_window","window","url","loadScript","Cardinal","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","PaymentStatusTypes","CreditCardPaymentStrategy","_isHostedPaymentFormEnabled","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","_isHostedFieldAvailable","formOptions","creditCard","form","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","_hostedForm","detach","validate","isHostedFormEnabled","values","fields","every","isNil","ACKNOWLEDGE","FINALIZE","INITIALIZE","PaypalProPaymentStrategy","threeDSecureFlow","paymentMethod","is3dsEnabled","getPaymentStatus","bind","getScriptLoader","ExternalPaymentStrategy","_formPoster","value","_isAdditionalActionRequired","additional_action_required","redirect_url","redirectUrl","postForm","status","SezzlePaymentStrategy","location","replace","createFormPoster","FieldType","isHostedInstrumentLike","shouldSaveInstrument","shouldSetAsDefaultInstrument","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","getTimezoneOffset","isBaseInstrument","CARD_NUMBER","CVV","EXPIRY","TDOnlineMartPaymentStrategy","tdOnlineMartScriptLoader","formPoster","tdInputs","fieldType","tdOnlineMartClient","loadTDOnlineMartJs","mountHostedFields","paymentPayload","getPaymentPayloadOrThrow","processWithAdditionalAction","forEach","inputElement","unmount","commonPaymentData","browser_info","digitalItemsInCart","getCartOrThrow","lineItems","digitalItems","length","shouldAddVerificationToken","isTrustedVaultingInstrument","nonce","getTokenOrThrow","throwTokenizationError","getHostedFieldsOptions","getTDOnlineMartClientOrThrow","input","inputId","document","getElementById","create","mount","createToken","errorBody","isObject","isArray","threeDSResult","formUrl","threeDSSessionData","creq","style","color","classes","instruments","getInstruments","findInstrument","find","bigpayToken","trustedShippingAddress","TDOnlineMartScriptLoader","scriptLoader","tdOnlineMartWindow","customcheckout","ContentType","Json","JsonV1","SDK_VERSION_HEADERS","StorefrontPaymentRequestSender","_requestSender","saveExternalId","headers","Accept","externalId","post","ZipPaymentStrategy","storefrontPaymentRequestSender","initializationData","JSON","parse","isStoreCreditApplied","useStoreCredit","applyStoreCredit","initializePayment","_prepareForReferredRegistration","getHost","requestSender","createRequestSender","BraintreeCreditCardPaymentMethod","lazy","HostedCreditCardPaymentMethod","HostedPaymentMethod","withCheckout","checkoutService","checkoutState","statuses","isInitializingPayment","deinitializeCustomer","deinitializePayment","initializeCustomer","integrations","isInitializing","memo","props","PaymentMethodId","Braintree","Suspense","Humm","Laybuy","PaymentMethodType","PaypalCredit","PaymentMethodProviderType","Hosted","CreditCard","Api"],"sourceRoot":""}