{"version":3,"file":"adyen-v2-payment-method-68ad58a3.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv2/adyenv2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-card-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-invalid-form-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-account-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv2/create-adyenv2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/adyenv3/adyenv3-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/adyenv3-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-utils/src/utils/is-boleto-state.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/adyen-integration/src/adyenv3/create-adyenv3-payment-strategy.ts","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv2/AdyenV2PaymentMethod.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3CardValidation.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3Form.tsx","webpack://checkout/./packages/adyen-integration/src/adyenv3/AdyenV3PaymentMethod.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","export enum AdyenV3ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2 = 'threeDS2',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n\n    /*\n     * The Component displays the widget which the shopper uses to complete the payment.\n     * */\n    Sdk = 'sdk',\n}\n\nexport enum AdyenV2ActionType {\n    /*\n     * The payment qualifies for 3D Secure 2, and will go through either the frictionless\n     * or the challenge flow.\n     * */\n    ThreeDS2Fingerprint = 'threeDS2Fingerprint',\n\n    /*\n     * The payment qualifies for 3D Secure 2, and the issuer is initiating a challenge flow.\n     * */\n    ThreeDS2Challenge = 'threeDS2Challenge',\n\n    /*\n     * We will initiate a 3D Secure 1 fallback, because the issuer does not support 3D Secure 2.\n     * */\n    Redirect = 'redirect',\n\n    /*\n     * The Component presents the QR code and calls the onAdditionalDetails event.\n     * */\n    QRCode = 'qrCode',\n\n    /*\n     * The Component displays the voucher which the shopper uses to complete the payment.\n     * */\n    Voucher = 'voucher',\n}\n\nexport enum AdyenComponentType {\n    SecuredFields = 'securedfields',\n}\n\nexport enum AdyenPaymentMethodType {\n    ACH = 'ach',\n    AliPay = 'alipay',\n    Bancontact = 'bcmc',\n    CreditCard = 'scheme',\n    Klarna = 'klarna',\n    KlarnaPayNow = 'klarna_paynow',\n    KlarnaAccount = 'klarna_account',\n    IDEAL = 'ideal',\n    GiroPay = 'giropay',\n    GooglePay = 'paywithgoogle',\n    SEPA = 'sepadirectdebit',\n    Sofort = 'directEbanking',\n    Vipps = 'vipps',\n    WeChatPayQR = 'wechatpayQR',\n}\n\nexport enum HTTPMethod {\n    POST = 'POST',\n}\n\nexport enum ResultCode {\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n}\n\ninterface AdyenPaymentMethodState {\n    type: string;\n}\n\ninterface WechatDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\ninterface BoletoDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n    shopperName?: {\n        firstName?: string;\n        lastName?: string;\n    };\n    socialSecurityNumber?: string;\n}\n\ninterface CardPaymentMethodState extends AdyenPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenV2Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV2ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport interface AdyenV3Action {\n    method: HTTPMethod;\n\n    /**\n     * Value that you need to submit in your /payments/details request when handling\n     * the redirect.\n     */\n    paymentData: string;\n\n    paymentMethodType: AdyenPaymentMethodType;\n\n    /*\n     * The Component performs additional front-end actions depending on the action.type.\n     * Your next steps depend on the type of action that the Component performs.\n     */\n    type: AdyenV3ActionType;\n\n    /**\n     * The HTTP request method that you should use. After the shopper completes the payment,\n     * they will be redirected back to your returnURL using the same method.\n     */\n    url: string;\n}\n\nexport type AdyenAction = AdyenV2Action | AdyenV3Action;\n\nexport interface AdyenAdditionalAction {\n    resultCode: ResultCode;\n    action: string;\n}\n\nexport interface AdyenAdditionalActionCallbacks {\n    /**\n     * A callback that gets called before adyen component is loaded\n     */\n    onBeforeLoad?(shopperInteraction?: boolean): void;\n\n    /**\n     * A callback that gets called when adyen component is loaded\n     */\n    onLoad?(cancel?: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete?(): void;\n\n    /**\n     * A callback that gets called when an action, for example a QR code or 3D Secure 2 authentication screen, is shown to the shopper\n     */\n    onActionHandled?(): void;\n}\n\nexport interface AdyenAdditionalActionErrorResponse {\n    provider_data: AdyenAdditionalAction;\n    errors: [{ code: string }];\n}\n\nexport interface AdyenAdditionalActionOptions extends AdyenAdditionalActionCallbacks {\n    /**\n     * The location to insert the additional action component.\n     */\n    containerId: string;\n\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface AdyenAdditionalActionState {\n    data: AdyenAdditionalAction;\n    isValid?: boolean;\n}\n\nexport interface AdyenBaseCardComponentOptions {\n    /**\n     * Array of card brands that will be recognized by the component.\n     *\n     */\n    brands?: string[];\n\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: StyleOptions;\n\n    showBrandsUnderCardNumber?: boolean;\n}\n\nexport interface AdyenComponentEvents {\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called when the shopper selects the Pay button and payment details are valid.\n     */\n    onSubmit?(state: AdyenComponentEventState, component: AdyenComponent): void;\n\n    /**\n     * Called in case of an invalid card number, invalid expiry date, or\n     *  incomplete field. Called again when errors are cleared.\n     */\n    onError?(state: AdyenValidationState, component: AdyenComponent): void;\n\n    onFieldValid?(state: AdyenValidationState, component: AdyenComponent): void;\n}\n\nexport interface AdyenClient {\n    create(type: string, componentOptions?: AdyenComponentOptions): AdyenComponent;\n\n    createFromAction(\n        action: AdyenV2Action | AdyenV3Action,\n        componentOptions?:\n            | ThreeDS2DeviceFingerprintComponentOptions\n            | AdyenV3ThreeDS2ChallengeComponentOptions\n            | AdyenV2ThreeDS2ChallengeComponentOptions,\n    ): AdyenComponent;\n}\n\nexport interface AdyenComponent {\n    componentRef?: {\n        showValidation(): void;\n    };\n    props?: {\n        type?: string;\n    };\n    state?: AdyenComponentState;\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n    submit(): void;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey?: string;\n\n    /*\n     * The Client Key of your Adyen account.\n     */\n    clientKey?: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /**\n     * Configuration for specific payment methods.\n     */\n    paymentMethodsConfiguration?: {\n        klarna: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_account: {\n            useKlarnaWidget: boolean;\n        };\n        klarna_paynow: {\n            useKlarnaWidget: boolean;\n        };\n        card?: {\n            installmentOptions?: {\n                card?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                visa?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                mc?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                diners?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                jcb?: {\n                    values: number[];\n                    plans?: string[];\n                };\n                showInstallmentAmounts?: boolean;\n            };\n        };\n    };\n\n    showPayButton?: boolean;\n\n    /**\n     * If your shoppers use a language that isn't supported by the Components, you can create your own localization.\n     * To create a localization:\n     * Add a translations object to your payment page, specifying:\n     * The localization you want to create.\n     * An object containing the fields that are used in the Components, as well as the text you want displayed for each field.\n     *\n     * \"en\": {\n     *  \"paymentMethods.moreMethodsButton\": \"More payment methods\",\n     *  \"payButton\": \"Pay\",\n     *  \"storeDetails\": \"Save for my next payment\",\n     *   ...\n     * }\n     */\n    translations?: {\n        [index: string]: {\n            [index: string]: string;\n        };\n    };\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n\n    onAdditionalDetails?(state: AdyenComponentEventState, component?: AdyenComponent): void;\n}\n\nexport interface AdyenPlaceholderData {\n    firstName?: string;\n    lastName?: string;\n    holderName?: string;\n    prefillCardHolderName?: boolean;\n    billingAddress?: {\n        street: string;\n        houseNumberOrName: string;\n        postalCode: string;\n        city: string;\n        stateOrProvince: string;\n        country: string;\n    };\n}\n\nexport interface AdyenCreditCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Information to prefill fields.\n     */\n    data?: AdyenPlaceholderData;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n}\n\nexport interface AdyenCustomCardComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Specify aria attributes for the input fields for web accessibility.\n     */\n    ariaLabels?: CustomCardAriaLabels;\n\n    /**\n     * Automatically shift the focus from date field to the CVC field.\n     */\n    autofocus?: boolean;\n}\n\ntype AdyenClientConstructor = (configuration: AdyenConfiguration) => Promise<AdyenClient>;\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface AdyenV3HostWindow extends Window {\n    AdyenCheckout?: AdyenClientConstructor;\n}\n\nexport interface AdyenV2HostWindow extends Window {\n    AdyenCheckout?: new (configuration: AdyenConfiguration) => AdyenClient;\n}\n\nexport interface AdyenIdealComponentOptions\n    extends AdyenBaseCardComponentOptions,\n        AdyenComponentEvents {\n    /**\n     * Optional. Set to **false** to remove the bank logos from the iDEAL form.\n     */\n    showImage?: boolean;\n}\n\nexport interface AdyenBoletoComponentOptions extends AdyenComponentEvents {\n    personalDetailsRequired?: boolean;\n    billingAddressRequired?: boolean;\n    showEmailAddress?: boolean;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface AdyenThreeDS2Options extends AdyenAdditionalActionCallbacks {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     *\n     * Values\n     * '01' = 250px x 400px\n     * '02' = 390px x 400px\n     * '03' = 500px x 600px\n     * '04' = 600px x 400px\n     * '05' = 100% x 100%\n     */\n    widgetSize?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CardState {\n    data: CardDataPaymentMethodState;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface IdealStateData {\n    issuer: string;\n}\n\ninterface SepaStateData {\n    ownerName: string;\n    ibanNumber: string;\n}\n\ninterface CardStateData {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName: string;\n}\n\nexport interface AdyenComponentState {\n    data?: CardStateData | IdealStateData | SepaStateData;\n    issuer?: string;\n    isValid?: boolean;\n    valid?: { [key: string]: boolean };\n    errors?: CardStateErrors;\n}\n\ninterface CardDataPaymentMethodState {\n    paymentMethod: CardPaymentMethodState;\n    installments?: { value: number; plan?: 'string' };\n}\n\nexport interface CardStateErrors {\n    [key: string]: string;\n}\n\nexport interface WechatState {\n    data: WechatDataPaymentMethodState;\n}\n\nexport interface BoletoState {\n    data: BoletoDataPaymentMethodState;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\ninterface AccountDataPaymentMethodState {\n    paymentMethod: AdyenPaymentMethodState;\n}\n\nexport interface AccountState {\n    data: AccountDataPaymentMethodState;\n}\n\nexport interface CssProperties {\n    background?: string;\n    caretColor?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface CustomCardAriaLabel {\n    label?: string;\n    iframeTitle?: string;\n}\n\nexport interface CustomCardAriaLabels {\n    lang?: string;\n    encryptedCardNumber?: CustomCardAriaLabel;\n    encryptedExpiryDate?: CustomCardAriaLabel;\n    encryptedSecurityCode?: CustomCardAriaLabel;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface PaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface PaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: PaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: PaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface RecurringDetail extends PaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface StyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenV3ThreeDS2ChallengeComponentOptions {\n    challengeWindowSize?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenV2ThreeDS2ChallengeComponentOptions {\n    size?: string;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface ActionHandledReturnObject {\n    componentType: string;\n    actionDescription: string;\n}\n\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    onActionHandled?(rtnObj: ActionHandledReturnObject): void;\n    onAdditionalDetails?(state: AdyenAdditionalActionState, component?: AdyenComponent): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenValidationState {\n    valid: boolean;\n    fieldType?: AdyenCardFields;\n    endDigits?: string;\n    encryptedFieldName?: string;\n    i18n?: string;\n    error?: string;\n    errorKey?: string;\n}\n\nexport enum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport type AdyenComponentEventState = CardState | BoletoState | WechatState;\n\nexport type AdyenComponentOptions =\n    | AdyenCreditCardComponentOptions\n    | AdyenIdealComponentOptions\n    | AdyenBoletoComponentOptions\n    | AdyenCustomCardComponentOptions;\n\nexport interface AdyenV3PaymentMethodInitializationData {\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n    installmentOptions?: null | {\n        card?: {\n            values: number[];\n            plans?: string[];\n        };\n        visa?: {\n            values: number[];\n            plans?: string[];\n        };\n        mc?: {\n            values: number[];\n            plans?: string[];\n        };\n        diners?: {\n            values: number[];\n            plans?: string[];\n        };\n        jcb?: {\n            values: number[];\n            plans?: string[];\n        };\n    };\n}\n\nexport interface AdyenV2PaymentMethodInitializationData {\n    originKey?: string;\n    clientKey?: string;\n    environment?: string;\n    paymentMethodsResponse?: PaymentMethodsResponse;\n    prefillCardHolderName?: boolean;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV2HostWindow } from '../types';\n\nexport default class AdyenV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV2HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return new this._window.AdyenCheckout(configuration);\n    }\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { AdyenComponentEventState, CardState } from '../types';\n\nexport default function isCardState(param: AdyenComponentEventState): param is CardState {\n    return (\n        (typeof param === 'object' &&\n            typeof (param as CardState).data.paymentMethod.encryptedSecurityCode === 'string') ||\n        typeof (param as CardState).data.paymentMethod.encryptedExpiryMonth === 'string'\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\nexport interface PaymentInvalidFormErrorDetails {\n    [key: string]: Array<{ message: string; type: string }>;\n}\n\nexport default class PaymentInvalidFormError extends StandardError {\n    constructor(public details: PaymentInvalidFormErrorDetails, message?: string) {\n        super(message || 'Unable to proceed because the payment form contains invalid data.');\n\n        this.name = 'PaymentInvalidFormError';\n        this.type = 'payment_invalid_form';\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV2ActionType,\n    AdyenV2PaymentInitializeOptions,\n    AdyenV2PaymentMethodInitializationData,\n    AdyenV2ScriptLoader,\n    CardStateErrors,\n    isAccountState,\n    isCardState,\n    WithAdyenV2PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    HostedInstrument,\n    InvalidArgumentError,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV2PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV2ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv2\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv2;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV2PaymentMethodInitializationData>(options.methodId);\n        const { originKey, clientKey, environment, paymentMethodsResponse } =\n            paymentMethod.initializationData || {};\n        const clientSideAuthentication = {\n            key: '',\n            value: '',\n        };\n\n        if (originKey) {\n            clientSideAuthentication.key = 'originKey';\n            clientSideAuthentication.value = originKey;\n        } else {\n            clientSideAuthentication.key = 'clientKey';\n            clientSideAuthentication.value = clientKey || '';\n        }\n\n        this._adyenClient = await this._scriptLoader.load({\n            environment,\n            locale: this._paymentIntegrationService.getState().getLocale(),\n            [clientSideAuthentication.key]: clientSideAuthentication.value,\n            paymentMethodsResponse,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n        const shouldSetAsDefaultInstrument =\n            paymentData && (paymentData as HostedInstrument).shouldSetAsDefaultInstrument;\n\n        if (!payment) {\n            return Promise.reject(new PaymentArgumentInvalidError(['payment']));\n        }\n\n        this._validateCardData();\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState;\n\n        if (!componentState) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            if (isCardState(componentState) || isAccountState(componentState)) {\n                try {\n                    await this._paymentIntegrationService.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            formattedPayload: {\n                                bigpay_token: {\n                                    ...bigpayToken,\n                                    token: paymentData.instrumentId,\n                                },\n                                origin: window.location.origin,\n                                browser_info: getBrowserInfo(),\n                                set_as_default_stored_instrument:\n                                    shouldSetAsDefaultInstrument || null,\n                            },\n                        },\n                    });\n\n                    return;\n                } catch (error) {\n                    await this._processAdditionalAction(\n                        error,\n                        shouldSaveInstrument,\n                        shouldSetAsDefaultInstrument,\n                    );\n\n                    return;\n                }\n            }\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: JSON.stringify({\n                                ...componentState.data.paymentMethod,\n                                origin: window.location.origin,\n                            }),\n                        },\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv2\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { additionalActionOptions, threeDS2Options } = this._getPaymentInitializeOptions();\n        const widgetSize = additionalActionOptions.widgetSize || threeDS2Options?.widgetSize;\n\n        if (!widgetSize) {\n            return '05';\n        }\n\n        return widgetSize;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { threeDS2ContainerId, additionalActionOptions } =\n                this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete } = additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete) {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                size: this._getThreeDS2ChallengeWidgetSize(),\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad) {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV2ActionType.ThreeDS2Challenge ||\n                        adyenAction.type === AdyenV2ActionType.QRCode,\n                );\n            }\n\n            additionalActionComponent.mount(`#${containerId || threeDS2ContainerId}`);\n\n            if (onLoad) {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv2.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv2.options,\n                    styles: {\n                        ...adyenv2.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv2.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv2.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv2.validateCardFields(validateState),\n                });\n\n                try {\n                    cardVerificationComponent.mount(`#${adyenv2.cardVerificationContainerId}`);\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            switch (paymentMethod.method) {\n                case AdyenPaymentMethodType.CreditCard:\n                case AdyenPaymentMethodType.ACH:\n                case AdyenPaymentMethodType.Bancontact: {\n                    const billingAddress = this._paymentIntegrationService\n                        .getState()\n                        .getBillingAddress();\n                    const { prefillCardHolderName } = paymentMethod.initializationData;\n\n                    paymentComponent = adyenClient.create(paymentMethod.method, {\n                        ...adyenv2.options,\n                        onChange: (componentState) => this._updateComponentState(componentState),\n                        data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName),\n                    });\n\n                    try {\n                        paymentComponent.mount(`#${adyenv2.containerId}`);\n                    } catch (error) {\n                        reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    break;\n                }\n\n                case AdyenPaymentMethodType.IDEAL:\n                case AdyenPaymentMethodType.SEPA:\n                    if (!adyenv2.hasVaultedInstruments) {\n                        paymentComponent = adyenClient.create(paymentMethod.method, {\n                            ...adyenv2.options,\n                            onChange: (componentState) =>\n                                this._updateComponentState(componentState),\n                        });\n\n                        try {\n                            paymentComponent.mount(`#${adyenv2.containerId}`);\n                        } catch (error) {\n                            reject(\n                                new NotInitializedError(\n                                    NotInitializedErrorType.PaymentNotInitialized,\n                                ),\n                            );\n                        }\n                    } else {\n                        this._updateComponentState({\n                            data: {\n                                paymentMethod: {\n                                    type: paymentMethod.method,\n                                },\n                            },\n                        });\n                    }\n\n                    break;\n\n                case AdyenPaymentMethodType.AliPay:\n                case AdyenPaymentMethodType.GiroPay:\n                case AdyenPaymentMethodType.Sofort:\n                case AdyenPaymentMethodType.Klarna:\n                case AdyenPaymentMethodType.KlarnaPayNow:\n                case AdyenPaymentMethodType.KlarnaAccount:\n                case AdyenPaymentMethodType.Vipps:\n                case AdyenPaymentMethodType.WeChatPayQR:\n                    this._updateComponentState({\n                        data: {\n                            paymentMethod: {\n                                type: paymentMethod.method,\n                            },\n                        },\n                    });\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _validateCardData(): void {\n        const adyenv2 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv2.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n        const isEmptyString = (value: string) => value.toString().trim().length === 0;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        /**\n         * For some reason adyen sdk doesn't return isValid for payment methods with select field in form(iDeal for example)\n         * so we need to check state issuer field\n         */\n        if (\n            Object.keys(cardComponent.state).length === 0 ||\n            (!cardComponent.state.isValid && !cardComponent.state.issuer) ||\n            // prevent empty sepa fields from being sent\n            (cardComponent.props?.type === 'sepadirectdebit' &&\n                cardComponent.state.data &&\n                Object.values(cardComponent.state.data).some(isEmptyString))\n        ) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n}\n","import { AccountState, AdyenComponentEventState } from '../types';\n\nexport default function isAccountState(param: AdyenComponentEventState): param is AccountState {\n    const bankSupported = ['ideal', 'sepadirectdebit', 'directEbanking', 'giropay'];\n\n    return bankSupported.indexOf((param as AccountState).data.paymentMethod.type) !== -1;\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV2ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV2PaymentStrategy from './adyenv2-payment-strategy';\n\nconst createAdyenV2PaymentStrategy: PaymentStrategyFactory<AdyenV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV2PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV2ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV2PaymentStrategy, [{ gateway: 'adyenv2' }]);\n","import { ScriptLoader, StylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdyenClient, AdyenConfiguration, AdyenV3HostWindow } from '../types';\n\nexport default class AdyenV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _stylesheetLoader: StylesheetLoader,\n        private _window: AdyenV3HostWindow = window,\n    ) {}\n\n    async load(configuration: AdyenConfiguration): Promise<AdyenClient> {\n        await Promise.all([\n            this._stylesheetLoader.loadStylesheet(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,\n                {\n                    prepend: false,\n                    attributes: {\n                        integrity:\n                            'sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n            this._scriptLoader.loadScript(\n                `https://checkoutshopper-${\n                    configuration.environment ?? ''\n                }.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity:\n                            'sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf',\n                        crossorigin: 'anonymous',\n                    },\n                },\n            ),\n        ]);\n\n        if (!this._window.AdyenCheckout) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const checkout = await this._window.AdyenCheckout(configuration);\n\n        return checkout;\n    }\n}\n","import { some } from 'lodash';\n\nimport {\n    AdyenAction,\n    AdyenAdditionalAction,\n    AdyenAdditionalActionState,\n    AdyenClient,\n    AdyenComponent,\n    AdyenComponentEventState,\n    AdyenComponentType,\n    AdyenError,\n    AdyenPaymentMethodType,\n    AdyenPlaceholderData,\n    AdyenV3ActionType,\n    AdyenV3PaymentInitializeOptions,\n    AdyenV3PaymentMethodInitializationData,\n    AdyenV3ScriptLoader,\n    CardStateErrors,\n    isBoletoState,\n    isCardState,\n    WithAdyenV3PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    BillingAddress,\n    getBrowserInfo,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentInvalidFormError,\n    PaymentInvalidFormErrorDetails,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class Adyenv3PaymentStrategy implements PaymentStrategy {\n    private _adyenClient?: AdyenClient;\n    private _cardVerificationComponent?: AdyenComponent;\n    private _componentState?: AdyenComponentEventState;\n    private _paymentComponent?: AdyenComponent;\n    private _paymentInitializeOptions?: AdyenV3PaymentInitializeOptions;\n\n    constructor(\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _scriptLoader: AdyenV3ScriptLoader,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAdyenV3PaymentInitializeOptions,\n    ): Promise<void> {\n        const { adyenv3 } = options;\n\n        if (!adyenv3) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.adyenv3\" argument is not provided.',\n            );\n        }\n\n        this._paymentInitializeOptions = adyenv3;\n\n        const paymentMethod = this._paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<AdyenV3PaymentMethodInitializationData>(options.methodId);\n        const { environment, clientKey, paymentMethodsResponse, installmentOptions } =\n            paymentMethod.initializationData || {};\n\n        this._adyenClient = await this._scriptLoader.load({\n            paymentMethodsConfiguration: {\n                klarna: {\n                    useKlarnaWidget: true,\n                },\n                klarna_account: {\n                    useKlarnaWidget: true,\n                },\n                klarna_paynow: {\n                    useKlarnaWidget: true,\n                },\n                ...(installmentOptions\n                    ? {\n                          card: {\n                              installmentOptions: {\n                                  showInstallmentAmounts: true,\n                                  ...installmentOptions,\n                              },\n                          },\n                      }\n                    : {}),\n            },\n            environment,\n            locale: this._getLocale(),\n            clientKey,\n            paymentMethodsResponse,\n            showPayButton: false,\n            translations: {\n                es: { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-AR': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-ES': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-MX': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CL': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-CO': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n                'es-PE': { 'creditCard.expiryDateField.title': 'Fecha de caducidad' },\n            },\n        });\n\n        this._paymentComponent = await this._mountPaymentComponent(paymentMethod);\n\n        if (\n            paymentMethod.method === AdyenPaymentMethodType.CreditCard ||\n            paymentMethod.method === AdyenPaymentMethodType.Bancontact\n        ) {\n            this._cardVerificationComponent = await this._mountCardVerificationComponent();\n        }\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument, shouldSetAsDefaultInstrument } = isHostedInstrumentLike(\n            paymentData,\n        )\n            ? paymentData\n            : { shouldSaveInstrument: false, shouldSetAsDefaultInstrument: false };\n\n        this._validateCardData();\n\n        if (\n            payment.methodId === 'klarna' ||\n            payment.methodId === 'klarna_account' ||\n            payment.methodId === 'klarna_paynow'\n        ) {\n            this._paymentComponent?.submit();\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        const componentState = this._componentState || {\n            data: { paymentMethod: { type: payment.methodId } },\n        };\n\n        if (paymentData && isVaultedInstrument(paymentData)) {\n            let bigpayToken = {};\n\n            if (isCardState(componentState)) {\n                const {\n                    encryptedCardNumber,\n                    encryptedSecurityCode,\n                    encryptedExpiryMonth,\n                    encryptedExpiryYear,\n                } = componentState.data.paymentMethod;\n\n                bigpayToken = {\n                    credit_card_number_confirmation: encryptedCardNumber,\n                    expiry_month: encryptedExpiryMonth,\n                    expiry_year: encryptedExpiryYear,\n                    verification_value: encryptedSecurityCode,\n                };\n            }\n\n            try {\n                await this._paymentIntegrationService.submitPayment({\n                    ...payment,\n                    paymentData: {\n                        formattedPayload: {\n                            bigpay_token: {\n                                ...bigpayToken,\n                                token: paymentData.instrumentId,\n                            },\n                            origin: window.location.origin,\n                            browser_info: getBrowserInfo(),\n                            set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                        },\n                    },\n                });\n\n                return;\n            } catch (error) {\n                await this._processAdditionalAction(\n                    error,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                );\n\n                return;\n            }\n        }\n\n        let paymentToken = JSON.stringify({\n            ...componentState.data.paymentMethod,\n            type: payment.methodId,\n            origin: window.location.origin,\n        });\n\n        if (payment.methodId === 'boletobancario' && isBoletoState(componentState)) {\n            paymentToken = JSON.stringify({\n                socialSecurityNumber: componentState.data.socialSecurityNumber,\n                ...componentState.data.shopperName,\n                type: payment.methodId,\n                origin: window.location.origin,\n            });\n        }\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n                paymentData: {\n                    formattedPayload: {\n                        credit_card_token: {\n                            token: paymentToken,\n                        },\n                        ...(isCardState(componentState) && componentState.data.installments\n                            ? {\n                                  installments: {\n                                      value: componentState.data.installments.value,\n                                      plan: componentState.data.installments.plan || 'regular',\n                                  },\n                              }\n                            : {}),\n                        browser_info: getBrowserInfo(),\n                        vault_payment_instrument: shouldSaveInstrument || null,\n                        set_as_default_stored_instrument: shouldSetAsDefaultInstrument || null,\n                    },\n                },\n            });\n        } catch (error) {\n            await this._processAdditionalAction(\n                error,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        this._componentState = undefined;\n\n        if (this._paymentComponent) {\n            this._paymentComponent.unmount();\n            this._paymentComponent = undefined;\n        }\n\n        if (this._cardVerificationComponent) {\n            this._cardVerificationComponent.unmount();\n            this._cardVerificationComponent = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _updateComponentState(componentState: AdyenComponentEventState) {\n        this._componentState = componentState;\n    }\n\n    private _getLocale(): string | undefined {\n        const locale = this._paymentIntegrationService.getState().getLocale();\n\n        if (locale && locale.substring(0, 2) === 'es') {\n            return 'es';\n        }\n\n        return locale;\n    }\n\n    private _getAdyenClient(): AdyenClient {\n        if (!this._adyenClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._adyenClient;\n    }\n\n    private _getPaymentInitializeOptions(): AdyenV3PaymentInitializeOptions {\n        if (!this._paymentInitializeOptions) {\n            throw new InvalidArgumentError(\n                '\"options.adyenv3\" argument was not provided during initialization.',\n            );\n        }\n\n        return this._paymentInitializeOptions;\n    }\n\n    private _handleAction(additionalAction: AdyenAdditionalAction): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            const { additionalActionOptions } = this._getPaymentInitializeOptions();\n            const { onBeforeLoad, containerId, onLoad, onComplete, widgetSize, onActionHandled } =\n                additionalActionOptions;\n            const adyenAction: AdyenAction = JSON.parse(additionalAction.action);\n\n            const additionalActionComponent = this._getAdyenClient().createFromAction(adyenAction, {\n                onActionHandled: (additionalActionState) => {\n                    if (\n                        onActionHandled &&\n                        typeof onActionHandled === 'function' &&\n                        additionalActionState.componentType !== '3DS2Fingerprint'\n                    ) {\n                        onActionHandled();\n                    }\n                },\n                onAdditionalDetails: (additionalActionState: AdyenAdditionalActionState) => {\n                    const paymentPayload = {\n                        methodId: adyenAction.paymentMethodType,\n                        paymentData: {\n                            nonce: JSON.stringify(additionalActionState.data),\n                        },\n                    };\n\n                    if (onComplete && typeof onComplete === 'function') {\n                        onComplete();\n                    }\n\n                    resolve(paymentPayload);\n                },\n                challengeWindowSize: widgetSize || '05',\n                onError: (error: AdyenError) => reject(error),\n            });\n\n            if (onBeforeLoad && typeof onBeforeLoad === 'function') {\n                onBeforeLoad(\n                    adyenAction.type === AdyenV3ActionType.ThreeDS2 ||\n                        adyenAction.type === AdyenV3ActionType.QRCode ||\n                        adyenAction.type === AdyenV3ActionType.Sdk,\n                );\n            }\n\n            this._mountElement(additionalActionComponent, containerId);\n\n            if (onLoad && typeof onLoad === 'function') {\n                onLoad(() => {\n                    reject(new PaymentMethodCancelledError());\n                    additionalActionComponent.unmount();\n                });\n            }\n        });\n    }\n\n    private _mapAdyenPlaceholderData(\n        billingAddress?: BillingAddress,\n        prefillCardHolderName?: boolean,\n    ): AdyenPlaceholderData {\n        if (!billingAddress) {\n            return {};\n        }\n\n        const {\n            firstName,\n            lastName,\n            address1: street,\n            address2: houseNumberOrName,\n            postalCode,\n            city,\n            stateOrProvinceCode: stateOrProvince,\n            countryCode: country,\n        } = billingAddress;\n\n        return {\n            holderName: prefillCardHolderName ? `${firstName} ${lastName}` : '',\n            firstName: prefillCardHolderName ? firstName : '',\n            lastName: prefillCardHolderName ? lastName : '',\n            billingAddress: {\n                street,\n                houseNumberOrName,\n                postalCode,\n                city,\n                stateOrProvince,\n                country,\n            },\n        };\n    }\n\n    private _mountCardVerificationComponent(): Promise<AdyenComponent> {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n        let cardVerificationComponent: AdyenComponent;\n\n        return new Promise((resolve, reject) => {\n            if (adyenv3.cardVerificationContainerId) {\n                cardVerificationComponent = adyenClient.create(AdyenComponentType.SecuredFields, {\n                    ...adyenv3.options,\n                    styles: {\n                        ...adyenv3.options?.styles,\n                        placeholder: {\n                            color: 'transparent',\n                            caretColor: '#000',\n                            ...adyenv3.options?.styles?.placeholder,\n                        },\n                    },\n                    onChange: (componentState) => this._updateComponentState(componentState),\n                    onError: (validateState) => adyenv3.validateCardFields(validateState),\n                    onFieldValid: (validateState) => adyenv3.validateCardFields(validateState),\n                });\n\n                try {\n                    this._mountElement(\n                        cardVerificationComponent,\n                        adyenv3.cardVerificationContainerId,\n                    );\n                } catch (error) {\n                    reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n                }\n            }\n\n            resolve(cardVerificationComponent);\n        });\n    }\n\n    private _mountPaymentComponent(paymentMethod: PaymentMethod): Promise<AdyenComponent> {\n        let paymentComponent: AdyenComponent;\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const adyenClient = this._getAdyenClient();\n\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._paymentIntegrationService.getState().getBillingAddress();\n\n            const { prefillCardHolderName } = paymentMethod.initializationData;\n\n            paymentComponent = adyenClient.create(paymentMethod.method, {\n                ...adyenv3.options,\n                showBrandsUnderCardNumber: false,\n                billingAddressRequired: false,\n                showEmailAddress: false,\n                onChange: (componentState) => this._updateComponentState(componentState),\n                onSubmit: (componentState) => this._updateComponentState(componentState),\n                ...(billingAddress\n                    ? { data: this._mapAdyenPlaceholderData(billingAddress, prefillCardHolderName) }\n                    : {}),\n            });\n\n            try {\n                this._mountElement(paymentComponent, adyenv3.containerId);\n            } catch (error) {\n                reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            resolve(paymentComponent);\n        });\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        shouldSaveInstrument?: boolean,\n        shouldSetAsDefaultInstrument?: boolean,\n    ): Promise<PaymentIntegrationSelectors | void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            throw error;\n        }\n\n        const payment = await this._handleAction(error.body.provider_data);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({\n                ...payment,\n                paymentData: {\n                    ...payment.paymentData,\n                    shouldSaveInstrument,\n                    shouldSetAsDefaultInstrument,\n                },\n            });\n        } catch (paymentError) {\n            return this._processAdditionalAction(\n                paymentError,\n                shouldSaveInstrument,\n                shouldSetAsDefaultInstrument,\n            );\n        }\n    }\n\n    private _validateCardData(): void {\n        const adyenv3 = this._getPaymentInitializeOptions();\n        const cardComponent = adyenv3.hasVaultedInstruments\n            ? this._cardVerificationComponent\n            : this._paymentComponent;\n\n        if (!cardComponent?.componentRef?.showValidation || !cardComponent.state) {\n            return;\n        }\n\n        cardComponent.componentRef.showValidation();\n\n        if (Object.keys(cardComponent.state).length === 0 || !cardComponent.state.isValid) {\n            throw new PaymentInvalidFormError(this._mapCardErrors(cardComponent.state.errors));\n        }\n    }\n\n    private _mapCardErrors(cardStateErrors: CardStateErrors = {}): PaymentInvalidFormErrorDetails {\n        const errors: PaymentInvalidFormErrorDetails = {};\n\n        Object.keys(cardStateErrors).forEach((key) => {\n            errors[key] = [\n                {\n                    message: cardStateErrors[key],\n                    type: key,\n                },\n            ];\n        });\n\n        return errors;\n    }\n\n    private _mountElement(adyenComponent: AdyenComponent, containerId: string): void {\n        if (!document.getElementById(containerId)) {\n            return;\n        }\n\n        adyenComponent.mount(`#${containerId}`);\n    }\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import { AdyenComponentEventState, BoletoState } from '../types';\n\nexport default function isBoletoState(param: AdyenComponentEventState): param is BoletoState {\n    return (\n        (typeof param === 'object' && typeof (param as BoletoState).data.socialSecurityNumber) ===\n            'string' &&\n        typeof (param as BoletoState).data.shopperName?.firstName === 'string' &&\n        typeof (param as BoletoState).data.shopperName?.lastName === 'string'\n    );\n}\n","import { getScriptLoader, getStylesheetLoader } from '@bigcommerce/script-loader';\n\nimport { AdyenV3ScriptLoader } from '@bigcommerce/checkout-sdk/adyen-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AdyenV3PaymentStrategy from './adyenv3-payment-strategy';\n\nconst createAdyenV3PaymentStrategy: PaymentStrategyFactory<AdyenV3PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AdyenV3PaymentStrategy(\n        paymentIntegrationService,\n        new AdyenV3ScriptLoader(getScriptLoader(), getStylesheetLoader()),\n    );\n};\n\nexport default toResolvableModule(createAdyenV3PaymentStrategy, [{ gateway: 'adyenv3' }]);\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type LanguageService,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n    language?: LanguageService;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV2CardValidation: FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n    language,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        {language?.translate(\n                            'payment.instrument_trusted_shipping_address_title_text',\n                        )}\n                    </strong>\n\n                    <br />\n\n                    {language?.translate('payment.instrument_trusted_shipping_address_text')}\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            {language?.translate('payment.credit_card_number_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            {language?.translate('payment.credit_card_cvv_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            {language?.translate('payment.credit_card_expiration_label')}\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV2CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport type AdyenV2FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    showAdditionalActionContent: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV2Form: FunctionComponent<AdyenV2FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    showAdditionalActionContent,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    onUnhandledError,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    ...rest\n}) => {\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired },\n        },\n    } = useCheckout();\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={showAdditionalActionContent}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!showAdditionalActionContent && (\n                <div id={additionalActionContainerId} style={{ display: 'none' }} />\n            )}\n        </>\n    );\n};\n\nexport default AdyenV2Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenIdealComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createAdyenV2PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/adyen';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport AdyenV2Form from './AdyenV2Form';\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n    ideal: AdyenIdealComponentOptions;\n}\n\nexport enum AdyenV2PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    ideal = 'ideal',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n    const [showAdditionalActionContent, setShowAdditionalActionContent] = useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const threeDS2ContainerId = `adyen-${method.id}-additional-action-component-field`;\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const component = method.id as AdyenV2PaymentMethodType;\n    const shouldHideInstrumentExpiryDate = component === AdyenV2PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShowAdditionalActionContent(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setShowAdditionalActionContent(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setShowAdditionalActionContent(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n            const adyenOptions: AdyenOptions = {\n                [AdyenV2PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n                [AdyenV2PaymentMethodType.bcmc]: {\n                    hasHolderName: false,\n                },\n                [AdyenV2PaymentMethodType.ideal]: {\n                    showImage: true,\n                },\n            };\n\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createAdyenV2PaymentStrategy],\n                adyenv2: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    threeDS2ContainerId,\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            threeDS2ContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV2CardValidation\n                cardValidationState={cardValidationState}\n                language={language}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV2Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                language={language}\n                                method={method}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                showAdditionalActionContent={showAdditionalActionContent}\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV2PaymentMethod,\n    [{ gateway: 'adyenv2' }],\n);\n","import {\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport type FieldsValidation = { [key in AdyenCardFields]?: AdyenValidationState };\n\nenum AdyenCardFields {\n    CardNumber = 'encryptedCardNumber',\n    SecurityCode = 'encryptedSecurityCode',\n    ExpiryDate = 'encryptedExpiryDate',\n}\n\nexport interface AdyenV3CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n    paymentMethod: PaymentMethod;\n    cardValidationState?: AdyenValidationState;\n    selectedInstrument?: CardInstrument;\n}\n\nconst getInitialValidationState = ({\n    shouldShowNumberField,\n    method,\n}: {\n    shouldShowNumberField: boolean;\n    method: string;\n}) => {\n    const validationState: FieldsValidation = {};\n\n    if (shouldShowNumberField) {\n        validationState[AdyenCardFields.CardNumber] = { valid: false };\n    }\n\n    if (method === 'scheme') {\n        validationState[AdyenCardFields.SecurityCode] = { valid: false };\n    }\n\n    if (method === 'bcmc') {\n        validationState[AdyenCardFields.ExpiryDate] = { valid: false };\n    }\n\n    return validationState;\n};\n\nconst isFieldInvalid = (fieldKey: AdyenCardFields, fieldsValidation: FieldsValidation): boolean =>\n    !!fieldsValidation[fieldKey] && !fieldsValidation[fieldKey].valid;\n\nconst AdyenV3CardValidation: FunctionComponent<AdyenV3CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n    selectedInstrument,\n    paymentMethod,\n    cardValidationState,\n}) => {\n    const [fieldsValidation, setFieldsValidation] = useState<FieldsValidation>(\n        getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n    );\n\n    useEffect(() => {\n        if (!cardValidationState) {\n            return;\n        }\n\n        if (\n            cardValidationState.fieldType &&\n            (!fieldsValidation[cardValidationState.fieldType] ||\n                fieldsValidation[cardValidationState.fieldType]?.valid !==\n                    cardValidationState.valid)\n        ) {\n            if (cardValidationState.fieldType === AdyenCardFields.CardNumber) {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [AdyenCardFields.CardNumber]:\n                        cardValidationState.endDigits !== selectedInstrument?.last4\n                            ? { ...cardValidationState, valid: false }\n                            : { ...cardValidationState },\n                });\n            } else {\n                setFieldsValidation({\n                    ...fieldsValidation,\n                    [cardValidationState.fieldType]: cardValidationState,\n                });\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [cardValidationState, setFieldsValidation, selectedInstrument?.last4]);\n\n    useEffect(() => {\n        if (selectedInstrument?.bigpayToken) {\n            setFieldsValidation(\n                getInitialValidationState({ shouldShowNumberField, method: paymentMethod.method }),\n            );\n        }\n    }, [selectedInstrument?.bigpayToken, paymentMethod.method, shouldShowNumberField]);\n\n    const showValidationIcon = (key: AdyenCardFields) =>\n        isFieldInvalid(key, fieldsValidation) && (\n            <span\n                className=\"adyen-checkout-input__inline-validation adyen-checkout-input__inline-validation--invalid\"\n                style={{ transform: 'none', right: '20px' }}\n            >\n                <img\n                    alt=\"adyen-checkout-icon\"\n                    className=\"adyen-checkout__icon\"\n                    src=\"https://checkoutshopper-test.adyen.com/checkoutshopper/images/components/field_error.svg\"\n                />\n            </span>\n        );\n\n    return (\n        <div>\n            {shouldShowNumberField && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            <div className=\"form-ccFields\" id={verificationFieldsContainerId}>\n                {shouldShowNumberField && (\n                    <div\n                        className={classNames(\n                            'form-field',\n                            'form-field--ccNumber',\n                            {\n                                'form-field--ccNumber--hasExpiryDate':\n                                    paymentMethod.method === 'bcmc',\n                            },\n                            // This div is hiding by CSS because there is an Adyen library in\n                            // checkout-sdk which mounts verification fields and if is removed with JS this mounting event will be thrown an error\n                            { 'form-field-ccNumber--hide': !shouldShowNumberField },\n                        )}\n                    >\n                        <label htmlFor={AdyenCardFields.CardNumber}>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.CardNumber,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.CardNumber}\n                            id={AdyenCardFields.CardNumber}\n                        />\n                        {showValidationIcon(AdyenCardFields.CardNumber)}\n                    </div>\n                )}\n                {paymentMethod.method === 'scheme' && (\n                    <div className=\"form-field form-ccFields-field--ccCvv\">\n                        <label htmlFor={AdyenCardFields.SecurityCode}>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.SecurityCode,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.SecurityCode}\n                            id={AdyenCardFields.SecurityCode}\n                        />\n                        {showValidationIcon(AdyenCardFields.SecurityCode)}\n                    </div>\n                )}\n                {paymentMethod.method === 'bcmc' && (\n                    <div className=\"form-field form-field--ccExpiry\">\n                        <label htmlFor={AdyenCardFields.ExpiryDate}>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </label>\n                        <div\n                            className={classNames(\n                                'form-input',\n                                'optimizedCheckout-form-input',\n                                'has-icon',\n                                'adyen-checkout__input-wrapper',\n                                {\n                                    'adyen-checkout__input--error': isFieldInvalid(\n                                        AdyenCardFields.ExpiryDate,\n                                        fieldsValidation,\n                                    ),\n                                },\n                            )}\n                            data-cse={AdyenCardFields.ExpiryDate}\n                            id={AdyenCardFields.ExpiryDate}\n                        />\n                        {showValidationIcon(AdyenCardFields.ExpiryDate)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default AdyenV3CardValidation;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\nimport { type Omit } from 'utility-types';\n\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan',\n}\n\nexport type AdyenV3FormProps = Omit<\n    HostedWidgetComponentProps,\n    | 'onSignOut'\n    | 'isInstrumentFeatureAvailable'\n    | 'instruments'\n    | 'isLoadingInstruments'\n    | 'isPaymentDataRequired'\n    | 'isSignedIn'\n    | 'isInstrumentCardCodeRequired'\n    | 'isInstrumentCardNumberRequired'\n    | 'loadInstruments'\n    | 'signOut'\n    | 'deinitializePayment'\n> & {\n    containerId: string;\n    isAccountInstrument: boolean;\n    shouldHideInstrumentExpiryDate: boolean;\n    validateInstrument: (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => ReactNode;\n    shouldRenderAdditionalActionContentModal: boolean;\n    isModalVisible: boolean;\n    cancelAdditionalActionModalFlow: () => void;\n    additionalActionContainerId: string;\n};\n\nconst AdyenV3Form: FunctionComponent<AdyenV3FormProps & PaymentMethodProps> = ({\n    method,\n    containerId,\n    initializePayment,\n    isAccountInstrument,\n    shouldHideInstrumentExpiryDate,\n    validateInstrument,\n    language,\n    shouldRenderAdditionalActionContentModal,\n    isModalVisible,\n    cancelAdditionalActionModalFlow,\n    additionalActionContainerId,\n    checkoutState,\n    checkoutService,\n    onUnhandledError,\n    ...rest\n}) => {\n    const { paymentForm } = usePaymentFormContext();\n    const customer = checkoutState.data.getCustomer();\n    const { isLoadingInstruments } = checkoutState.statuses;\n    const { isPaymentDataRequired } = checkoutState.data;\n    const instruments = checkoutState.data.getInstruments(method) || [];\n    const isSignedIn = customer?.isGuest;\n    const isInstrumentFeatureAvailable = !isSignedIn && Boolean(method.config.isVaultingEnabled);\n    const isInstrumentCardCodeRequired = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequired = isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    return (\n        <>\n            <HostedWidgetPaymentComponent\n                {...rest}\n                containerId={containerId}\n                deinitializePayment={checkoutService.deinitializePayment}\n                disableSubmit={disableSubmit}\n                hideContentWhenSignedOut\n                hidePaymentSubmitButton={hidePaymentSubmitButton}\n                initializePayment={initializePayment}\n                instruments={instruments}\n                isAccountInstrument={isAccountInstrument}\n                isInstrumentCardCodeRequired={isInstrumentCardCodeRequired}\n                isInstrumentCardNumberRequired={isInstrumentCardNumberRequired}\n                isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                isLoadingInstruments={isLoadingInstruments()}\n                isPaymentDataRequired={isPaymentDataRequired()}\n                isSignedIn={!isSignedIn}\n                loadInstruments={checkoutService.loadInstruments}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                setFieldValue={setFieldValue}\n                setSubmit={setSubmit}\n                setValidationSchema={setValidationSchema}\n                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                shouldRenderCustomInstrument\n                signOut={checkoutService.signOutCustomer}\n                validateInstrument={validateInstrument}\n            />\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={language.translate('common.close_action')}\n                isOpen={shouldRenderAdditionalActionContentModal}\n                onRequestClose={cancelAdditionalActionModalFlow}\n                shouldShowCloseButton={true}\n                style={\n                    !isModalVisible && method.id === 'scheme'\n                        ? {\n                              overlay: {\n                                  display: 'none',\n                              },\n                          }\n                        : {}\n                }\n            >\n                <div id={additionalActionContainerId} style={{ width: '100%' }} />\n            </Modal>\n            {!shouldRenderAdditionalActionContentModal && <div id={additionalActionContainerId} />}\n        </>\n    );\n};\n\nexport default AdyenV3Form;\n","import {\n    type AdyenCreditCardComponentOptions,\n    type AdyenValidationState,\n    type CardInstrument,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createAdyenV3PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/adyen';\nimport React, { type FunctionComponent, useCallback, useRef, useState } from 'react';\n\nimport { type HostedWidgetComponentProps } from '@bigcommerce/checkout/hosted-widget-integration';\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport AdyenV3CardValidation from './AdyenV3CardValidation';\nimport AdyenV3Form from './AdyenV3Form';\n\nexport interface AdyenOptions {\n    [key: string]: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenV3PaymentMethodType {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    scheme = 'scheme',\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    shouldShowModal: boolean;\n    shouldShowNumberField?: boolean;\n    cancelAdditionalAction?(): void;\n}\n\nconst AdyenV3PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    language,\n    onUnhandledError,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        shouldShowModal: true,\n    });\n\n    const [shouldRenderAdditionalActionContentModal, setShouldRenderAdditionalActionContentModal] =\n        useState<boolean>(false);\n    const [isAdditionalActionContentModalVisible, setIsAdditionalActionContentModalVisible] =\n        useState<boolean>(false);\n    const [cardValidationState, setCardValidationState] = useState<AdyenValidationState>();\n    const containerId = `adyen-${method.id}-component-field`;\n    const additionalActionContainerId = `adyen-${method.id}-additional-action-component-field`;\n    const cardVerificationContainerId = `adyen-${method.id}-tsv-component-field`;\n    const component = method.id;\n    const shouldHideInstrumentExpiryDate = component === AdyenV3PaymentMethodType.bcmc;\n\n    const onBeforeLoad = useCallback((shopperInteraction: boolean) => {\n        ref.current.shouldShowModal = shopperInteraction;\n\n        setShouldRenderAdditionalActionContentModal(ref.current.shouldShowModal);\n    }, []);\n\n    const onComplete = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n        ref.current.cancelAdditionalAction = undefined;\n    }, []);\n\n    const onActionHandled = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(true);\n    }, []);\n\n    const onLoad = useCallback((cancel?: any) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        ref.current.cancelAdditionalAction = cancel;\n    }, []);\n\n    const cancelAdditionalActionModalFlow = useCallback(() => {\n        setIsAdditionalActionContentModalVisible(false);\n        setShouldRenderAdditionalActionContentModal(false);\n\n        if (ref.current.cancelAdditionalAction) {\n            ref.current.cancelAdditionalAction();\n            ref.current.cancelAdditionalAction = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            const adyenOptions: AdyenOptions = {\n                [AdyenV3PaymentMethodType.scheme]: {\n                    hasHolderName: true,\n                    holderNameRequired: true,\n                },\n            };\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            const selectedInstrumentId = selectedInstrument?.bigpayToken;\n\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createAdyenV3PaymentStrategy],\n                adyenv3: {\n                    cardVerificationContainerId:\n                        selectedInstrumentId && cardVerificationContainerId,\n                    containerId,\n                    hasVaultedInstruments: !!selectedInstrumentId,\n                    options: adyenOptions[component],\n                    additionalActionOptions: {\n                        widgetSize: '05',\n                        containerId: additionalActionContainerId,\n                        onBeforeLoad,\n                        onComplete,\n                        onLoad,\n                        onActionHandled,\n                    },\n                    shouldShowNumberField: ref.current.shouldShowNumberField,\n                    validateCardFields: (state: AdyenValidationState) => {\n                        setCardValidationState(state);\n                    },\n                },\n            });\n        },\n        [\n            component,\n            cardVerificationContainerId,\n            containerId,\n            additionalActionContainerId,\n            onBeforeLoad,\n            onComplete,\n            onLoad,\n            onActionHandled,\n            checkoutService,\n        ],\n    );\n\n    const validateInstrument = (\n        shouldShowNumberField: boolean,\n        selectedInstrument: CardInstrument,\n    ) => {\n        ref.current.shouldShowNumberField = shouldShowNumberField;\n\n        return (\n            <AdyenV3CardValidation\n                cardValidationState={cardValidationState}\n                paymentMethod={method}\n                selectedInstrument={selectedInstrument}\n                shouldShowNumberField={shouldShowNumberField}\n                verificationFieldsContainerId={cardVerificationContainerId}\n            />\n        );\n    };\n\n    const isAccountInstrument = () => {\n        switch (method.method) {\n            case 'directEbanking':\n            case 'giropay':\n            case 'ideal':\n            case 'sepadirectdebit':\n                return true;\n\n            default:\n                return false;\n        }\n    };\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <AdyenV3Form\n                                {...rest}\n                                additionalActionContainerId={additionalActionContainerId}\n                                cancelAdditionalActionModalFlow={cancelAdditionalActionModalFlow}\n                                checkoutService={checkoutService}\n                                checkoutState={checkoutState}\n                                containerId={containerId}\n                                hideContentWhenSignedOut\n                                initializePayment={initializeAdyenPayment}\n                                isAccountInstrument={isAccountInstrument()}\n                                isModalVisible={isAdditionalActionContentModalVisible}\n                                language={language}\n                                method={method}\n                                onUnhandledError={onUnhandledError}\n                                paymentForm={paymentForm}\n                                shouldHideInstrumentExpiryDate={shouldHideInstrumentExpiryDate}\n                                shouldRenderAdditionalActionContentModal={\n                                    shouldRenderAdditionalActionContentModal\n                                }\n                                validateInstrument={validateInstrument}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AdyenV3PaymentMethod,\n    [{ gateway: 'adyenv3' }],\n);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","PROVIDERS_WITHOUT_CARD_CODE","method","config","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","InstrumentMenuItem","className","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","id","expiryDate","InstrumentOption","noop","handleClick","useCallback","bigpayToken","InstrumentUseNewButton","InstrumentMenu","instruments","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","setFieldValue","name","useEffect","setTimeout","value","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","props","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","AdyenV3ActionType","AdyenV2ActionType","AdyenComponentType","AdyenPaymentMethodType","HTTPMethod","ResultCode","AdyenCardFields","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","PaymentMethodClientUnavailableError","AdyenV2ScriptLoader","_scriptLoader","_stylesheetLoader","_window","window","load","configuration","Promise","all","loadStylesheet","environment","prepend","attributes","integrity","crossorigin","loadScript","async","AdyenCheckout","toResolvableModule","module","resolveIds","assign","isCardState","param","encryptedSecurityCode","encryptedExpiryMonth","ThreeDS2Fingerprint","ThreeDS2","Redirect","QRCode","Voucher","Sdk","ThreeDS2Challenge","SecuredFields","ACH","AliPay","Bancontact","CreditCard","Klarna","KlarnaPayNow","KlarnaAccount","IDEAL","GiroPay","GooglePay","SEPA","Sofort","Vipps","WeChatPayQR","POST","ChallengeShopper","IdentifyShopper","CardNumber","SecurityCode","ExpiryDate","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","isVaultedInstrument","Boolean","getBrowserInfo","navigator","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","OrderFinalizationNotRequiredError","PaymentMethodCancelledError","error","PaymentInvalidFormError","details","AdyenV2PaymentStrategy","_paymentIntegrationService","initialize","options","adyenv2","_paymentInitializeOptions","getState","getPaymentMethodOrThrow","methodId","originKey","clientKey","paymentMethodsResponse","clientSideAuthentication","_adyenClient","locale","getLocale","translations","es","_paymentComponent","_mountPaymentComponent","_cardVerificationComponent","_mountCardVerificationComponent","resolve","execute","payload","payment","order","paymentData","shouldSaveInstrument","shouldSetAsDefaultInstrument","reject","_validateCardData","submitOrder","componentState","_componentState","encryptedCardNumber","encryptedExpiryYear","credit_card_number_confirmation","expiry_month","expiry_year","verification_value","indexOf","submitPayment","formattedPayload","bigpay_token","token","origin","location","browser_info","set_as_default_stored_instrument","_processAdditionalAction","credit_card_token","JSON","stringify","vault_payment_instrument","finalize","deinitialize","unmount","_getAdyenClient","_getPaymentInitializeOptions","_getThreeDS2ChallengeWidgetSize","additionalActionOptions","threeDS2Options","widgetSize","_handleAction","additionalAction","threeDS2ContainerId","onBeforeLoad","containerId","onLoad","onComplete","adyenAction","parse","action","additionalActionComponent","createFromAction","onAdditionalDetails","additionalActionState","paymentPayload","paymentMethodType","nonce","size","onError","mount","_mapAdyenPlaceholderData","billingAddress","prefillCardHolderName","firstName","lastName","address1","street","address2","houseNumberOrName","postalCode","city","stateOrProvinceCode","stateOrProvince","countryCode","country","holderName","adyenClient","cardVerificationComponent","cardVerificationContainerId","create","styles","placeholder","color","caretColor","onChange","_updateComponentState","validateState","validateCardFields","onFieldValid","paymentComponent","getBillingAddress","hasVaultedInstruments","some","body","errors","code","provider_data","paymentError","cardComponent","componentRef","showValidation","state","keys","issuer","values","trim","_mapCardErrors","cardStateErrors","forEach","paymentIntegrationService","getScriptLoader","getStylesheetLoader","gateway","AdyenV3ScriptLoader","Adyenv3PaymentStrategy","adyenv3","installmentOptions","paymentMethodsConfiguration","klarna","useKlarnaWidget","klarna_account","klarna_paynow","card","showInstallmentAmounts","_getLocale","showPayButton","submit","paymentToken","socialSecurityNumber","shopperName","installments","plan","substring","onActionHandled","componentType","challengeWindowSize","_mountElement","showBrandsUnderCardNumber","billingAddressRequired","showEmailAddress","onSubmit","adyenComponent","document","getElementById","getInitialValidationState","shouldShowNumberField","validationState","valid","isFieldInvalid","fieldKey","fieldsValidation","verificationFieldsContainerId","cardValidationState","setFieldsValidation","useState","fieldType","endDigits","showValidationIcon","transform","right","alt","src","translate","htmlFor","initializePayment","isAccountInstrument","shouldHideInstrumentExpiryDate","showAdditionalActionContent","cancelAdditionalActionModalFlow","additionalActionContainerId","onUnhandledError","checkoutService","checkoutState","paymentForm","rest","hidePaymentSubmitButton","disableSubmit","setSubmit","setValidationSchema","customer","getCustomer","isLoadingInstruments","statuses","getInstruments","isPaymentDataRequired","isSignedIn","isGuest","isInstrumentFeatureAvailable","isVaultingEnabled","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","HostedWidgetPaymentComponent","deinitializePayment","hideContentWhenSignedOut","loadInstruments","shouldRenderCustomInstrument","signOut","signOutCustomer","Modal","additionalBodyClassName","closeButtonLabel","isOpen","onRequestClose","shouldShowCloseButton","AdyenV2PaymentMethodType","toResolvableComponent","ref","shouldShowModal","setShowAdditionalActionContent","setCardValidationState","component","bcmc","shopperInteraction","cancelAdditionalAction","cancel","initializeAdyenPayment","adyenOptions","scheme","hasHolderName","holderNameRequired","ideal","showImage","integrations","isLoading","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","hideContentWhenLoading","UntrustedShippingCardVerificationType","shouldRenderAdditionalActionContentModal","isModalVisible","overlay","AdyenV3PaymentMethodType","setShouldRenderAdditionalActionContentModal","isAdditionalActionContentModalVisible","setIsAdditionalActionContentModalVisible","EditButton","buttonId","shouldShowEditButton","translatedString","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideWidget","isSignInRequired","renderCustomPaymentForm","shouldShowCreditCardFieldset","tabIndex","isInitializing","isInstrumentFeatureAvailableProp","shouldShow","hideVerificationFields","storedCardValidationSchema","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","gatewayId","handleSelectInstrument","getValidateInstrument","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset"],"sourceRoot":""}