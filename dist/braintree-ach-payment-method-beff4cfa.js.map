{"version":3,"file":"braintree-ach-payment-method-beff4cfa.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/constants.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/hooks/useBraintreeAchValidation.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchFormFields.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchMandateText.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/components/BraintreeAchPaymentForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeAch/BraintreeAchPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/hooks/useBraintreeFastlaneInstruments.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneCreditCardForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/components/BraintreeFastlaneForm.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/index.ts","webpack://checkout/./packages/braintree-integration/src/BraintreeFastlane/BraintreeFastlanePaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeLocalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreePaypalPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/VisaCheckout/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./packages/braintree-integration/src/BraintreeVenmo/BraintreeVenmoPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts","webpack://checkout/./packages/wallet-button-integration/src/normalizeWalletPaymentData.ts","webpack://checkout/./packages/payment-integration-api/src/PaymentMethodType.ts","webpack://checkout/./packages/payment-integration-api/src/getPaymentMethodName.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/SignOutLink/SignOutLink.tsx","webpack://checkout/./packages/wallet-button-integration/src/PaymentView.tsx","webpack://checkout/./packages/wallet-button-integration/src/SignInView.tsx","webpack://checkout/./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx"],"sourcesContent":["import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type FormField } from '@bigcommerce/checkout-sdk';\n\nimport { DynamicFormFieldType } from '@bigcommerce/checkout/ui';\n\nexport enum BraintreeAchFieldType {\n    BusinessName = 'businessName',\n    AccountType = 'accountType',\n    AccountNumber = 'accountNumber',\n    RoutingNumber = 'routingNumber',\n    OwnershipType = 'ownershipType',\n    FirstName = 'firstName',\n    LastName = 'lastName',\n}\n\nexport enum OwnershipTypes {\n    Personal = 'Personal',\n    Business = 'Business',\n}\n\nexport enum AccountTypes {\n    Savings = 'Savings',\n    Checking = 'Checking',\n}\n\nconst accountTypeOptions = [\n    {\n        value: AccountTypes.Savings,\n        label: AccountTypes.Savings,\n    },\n    {\n        value: AccountTypes.Checking,\n        label: AccountTypes.Checking,\n    },\n];\n\nexport const ownershipTypeOptions = [\n    {\n        value: OwnershipTypes.Personal,\n        label: OwnershipTypes.Personal,\n    },\n    {\n        value: OwnershipTypes.Business,\n        label: OwnershipTypes.Business,\n    },\n];\n\nexport const defaultBraintreeAchFormFields: FormField[] = [\n    {\n        name: BraintreeAchFieldType.AccountType,\n        custom: false,\n        id: BraintreeAchFieldType.AccountType,\n        label: 'Account Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: accountTypeOptions,\n        },\n    },\n    {\n        name: BraintreeAchFieldType.AccountNumber,\n        custom: false,\n        id: BraintreeAchFieldType.AccountNumber,\n        label: 'Account Number',\n        required: true,\n        max: 9,\n        min: 8,\n    },\n    {\n        name: BraintreeAchFieldType.RoutingNumber,\n        custom: false,\n        id: BraintreeAchFieldType.RoutingNumber,\n        label: 'Routing Number',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.OwnershipType,\n        custom: false,\n        id: BraintreeAchFieldType.OwnershipType,\n        label: 'Ownership Type',\n        required: true,\n        fieldType: DynamicFormFieldType.DROPDOWM,\n        options: {\n            items: ownershipTypeOptions,\n        },\n    },\n];\n\nexport const personalBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.FirstName,\n        custom: false,\n        id: BraintreeAchFieldType.FirstName,\n        label: 'First Name',\n        required: true,\n    },\n    {\n        name: BraintreeAchFieldType.LastName,\n        custom: false,\n        id: BraintreeAchFieldType.LastName,\n        label: 'Last Name',\n        required: true,\n    },\n];\n\nexport const businessBraintreeAchFormFields: FormField[] = [\n    ...defaultBraintreeAchFormFields,\n    {\n        name: BraintreeAchFieldType.BusinessName,\n        custom: false,\n        id: BraintreeAchFieldType.BusinessName,\n        label: 'Business Name',\n        required: true,\n    },\n];\n","import { type AchInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAchInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBraintreeAchInstruments = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AchInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(() => instruments.filter(isAchInstrument), [instruments]);\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest && Boolean(method.config.isVaultingEnabled);\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailable && accountInstruments.length > 0;\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset &&\n        !!currentInstrument &&\n        !currentInstrument.trustedShippingAddress;\n\n    const getDefaultInstrument = useCallback((): AchInstrument | undefined => {\n        if (!accountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = accountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || accountInstruments[0];\n    }, [accountInstruments]);\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, getDefaultInstrument]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(accountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [accountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBraintreeAchInstruments;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { useCallback } from 'react';\nimport { object, string, type StringSchema } from 'yup';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentFormValues,\n    usePaymentFormContext,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst useBraintreeAchValidation = (method: PaymentMethod) => {\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const getValidationSchema = () => {\n        const ownershipType = paymentForm.getFieldValue('ownershipType');\n        const formFields =\n            ownershipType === OwnershipTypes.Business\n                ? businessBraintreeAchFormFields\n                : personalBraintreeAchFormFields;\n\n        const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n            [BraintreeAchFieldType.FirstName]: 'address.first_name',\n            [BraintreeAchFieldType.LastName]: 'address.last_name',\n            [BraintreeAchFieldType.AccountNumber]: 'payment.errors.account_number',\n            [BraintreeAchFieldType.RoutingNumber]: 'payment.errors.routing_number',\n            [BraintreeAchFieldType.BusinessName]: 'payment.errors.business_name',\n        };\n\n        return object(\n            formFields.reduce(\n                (schema, { id, required }) => {\n                    if (required) {\n                        if (requiredFieldErrorTranslationIds[id]) {\n                            schema[id] = string().required(\n                                language.translate(\n                                    `${requiredFieldErrorTranslationIds[id]}_required_error`,\n                                ),\n                            );\n\n                            if (id === BraintreeAchFieldType.AccountNumber) {\n                                schema[id] = schema[id].matches(\n                                    /^\\d+$/,\n                                    language.translate('payment.errors.only_numbers_error', {\n                                        label: language.translate('payment.account_number_label'),\n                                    }),\n                                );\n                            }\n\n                            if (id === BraintreeAchFieldType.RoutingNumber) {\n                                schema[id] = schema[id]\n                                    .matches(\n                                        /^\\d+$/,\n                                        language.translate('payment.errors.only_numbers_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                        }),\n                                    )\n                                    .min(\n                                        8,\n                                        language.translate('customer.min_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            min: 8,\n                                        }),\n                                    )\n                                    .max(\n                                        9,\n                                        language.translate('customer.max_error', {\n                                            label: language.translate(\n                                                'payment.account_routing_label',\n                                            ),\n                                            max: 9,\n                                        }),\n                                    );\n                            }\n                        }\n                    }\n\n                    return schema;\n                },\n                // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter\n                {} as { [key: string]: StringSchema },\n            ),\n        );\n    };\n\n    const validateBraintreeAchForm = useCallback(\n        async (braintreeAchFormValues: PaymentFormValues): Promise<boolean> => {\n            const {\n                accountNumber,\n                businessName,\n                routingNumber,\n                ownershipType,\n                firstName,\n                lastName,\n            } = braintreeAchFormValues;\n\n            const validationSchema = getValidationSchema();\n\n            paymentForm.setValidationSchema(method, validationSchema);\n\n            const [\n                isValidAccountNumber,\n                isValidRoutingNumber,\n                isValidFirstName,\n                isValidLastName,\n                isValidBusinessName,\n            ] = await Promise.all([\n                await validationSchema.fields.accountNumber?.isValid(accountNumber),\n                await validationSchema.fields.routingNumber?.isValid(routingNumber),\n                await validationSchema.fields.firstName?.isValid(firstName),\n                await validationSchema.fields.lastName?.isValid(lastName),\n                await validationSchema.fields.businessName?.isValid(businessName),\n            ]);\n\n            const isValidDepositoryName =\n                ownershipType === OwnershipTypes.Business\n                    ? isValidBusinessName\n                    : isValidFirstName && isValidLastName;\n\n            return isValidRoutingNumber && isValidAccountNumber && isValidDepositoryName;\n        },\n        [getValidationSchema],\n    );\n\n    const resetFormValidation = useCallback(() => {\n        paymentForm.setValidationSchema(method, null);\n    }, [paymentForm, method]);\n\n    return {\n        validateBraintreeAchForm,\n        resetFormValidation,\n    };\n};\n\nexport default useBraintreeAchValidation;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField } from '@bigcommerce/checkout/ui';\n\nimport {\n    BraintreeAchFieldType,\n    businessBraintreeAchFormFields,\n    OwnershipTypes,\n    personalBraintreeAchFormFields,\n} from '../constants';\n\nconst isBraintreeAchFormFieldName = (fieldName: string): fieldName is BraintreeAchFieldType => {\n    return Object.values(BraintreeAchFieldType).includes(fieldName as BraintreeAchFieldType);\n};\n\nconst getTranslatedLabelByFieldName = (fieldName: string, language: LanguageService) => {\n    const braintreeAchFormLabelsMap = {\n        firstName: language.translate('address.first_name_label'),\n        lastName: language.translate('address.last_name_label'),\n        accountNumber: language.translate('payment.account_number_label'),\n        routingNumber: language.translate('payment.account_routing_label'),\n        businessName: language.translate('payment.business_name_label'),\n        ownershipType: language.translate('payment.ownership_type_label'),\n        accountType: language.translate('payment.account_type_label'),\n    };\n\n    return isBraintreeAchFormFieldName(fieldName)\n        ? braintreeAchFormLabelsMap[fieldName]\n        : fieldName;\n};\n\nconst BraintreeAchFormFields: FunctionComponent = () => {\n    const { language } = useLocale();\n    const { paymentForm } = usePaymentFormContext();\n    const { getFieldValue, setFieldValue } = paymentForm;\n\n    const ownershipTypeValue = getFieldValue(BraintreeAchFieldType.OwnershipType);\n    const fieldValues =\n        ownershipTypeValue === OwnershipTypes.Business\n            ? businessBraintreeAchFormFields\n            : personalBraintreeAchFormFields;\n\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n        },\n        [setFieldValue],\n    );\n\n    return (\n        <>\n            {fieldValues.map((field) => (\n                <DynamicFormField\n                    extraClass={`dynamic-form-field--${field.id}`}\n                    field={field}\n                    key={field.id}\n                    label={getTranslatedLabelByFieldName(field.name, language)}\n                    onChange={handleChange(field.id)}\n                />\n            ))}\n        </>\n    );\n};\n\nexport default BraintreeAchFormFields;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { useLocale } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nimport { OwnershipTypes } from '../constants';\n\nexport interface BraintreeAchMandateTextProps {\n    isInstrumentFeatureAvailable?: boolean;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchMandateText: FunctionComponent<BraintreeAchMandateTextProps> = ({\n    isInstrumentFeatureAvailable,\n    updateMandateText,\n}) => {\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { language } = useLocale();\n\n    const {\n        businessName,\n        accountType,\n        accountNumber,\n        routingNumber,\n        ownershipType,\n        firstName,\n        lastName,\n    } = paymentForm.getFormValues();\n\n    const fullName = `${String(firstName)} ${String(lastName)}`;\n\n    const depositoryName = ownershipType === OwnershipTypes.Business ? businessName : fullName;\n    const outstandingBalance = checkoutState.data.getCheckout()?.outstandingBalance;\n    const storeName = checkoutState.data.getConfig()?.storeProfile.storeName;\n    const symbol = checkoutState.data.getCart()?.currency.symbol;\n\n    const mandateTextTranslationKey = isInstrumentFeatureAvailable\n        ? 'payment.braintreeach_vaulting_mandate_text'\n        : 'payment.braintreeach_mandate_text';\n\n    const currentDate = new Date(Date.now()).toJSON().slice(0, 10); // yyyy-mm-dd\n    const formattedDate = currentDate.split('-').reverse().join('.'); // dd.mm.yyyy\n\n    const mandateTextTranslationProps = {\n        accountType: String(accountType).toLowerCase(),\n        accountNumber: String(accountNumber),\n        currentDate: formattedDate,\n        depositoryName: String(depositoryName),\n        routingNumber: String(routingNumber),\n        outstandingBalance: `${symbol || ''}${outstandingBalance || ''}`,\n        storeName: String(storeName),\n    };\n\n    const mandateText = language.translate(mandateTextTranslationKey, mandateTextTranslationProps);\n\n    useEffect(() => {\n        updateMandateText(mandateText);\n    }, [mandateText, updateMandateText]);\n\n    const handleChange = (value: boolean) => {\n        paymentForm.setFieldValue('orderConsent', value);\n    };\n\n    return (\n        <div className=\"mandate-text\" data-test=\"mandate-text\">\n            <CheckboxFormField\n                labelContent={mandateText}\n                name=\"orderConsent\"\n                onChange={handleChange}\n            />\n        </div>\n    );\n};\n\nexport default BraintreeAchMandateText;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { AccountTypes, OwnershipTypes } from '../constants';\nimport useBraintreeAchInstruments from '../hooks/useBraintreeAchInstruments';\nimport useBraintreeAchValidation from '../hooks/useBraintreeAchValidation';\n\nimport BraintreeAchFormFields from './BraintreeAchFormFields';\nimport BraintreeAchMandateText from './BraintreeAchMandateText';\n\nexport interface BraintreeAchPaymentFormProps {\n    method: PaymentMethod;\n    updateMandateText: (mandateText: string) => void;\n}\n\nconst BraintreeAchPaymentForm: FunctionComponent<BraintreeAchPaymentFormProps> = ({\n    method,\n    updateMandateText,\n}) => {\n    const [isValidForm, setIsValidForm] = useState(false);\n    const { checkoutState } = useCheckout();\n    const { paymentForm } = usePaymentFormContext();\n    const { disableSubmit, getFieldValue, getFormValues, setFieldValue } = paymentForm;\n    const {\n        accountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    } = useBraintreeAchInstruments(method);\n    const { validateBraintreeAchForm, resetFormValidation } = useBraintreeAchValidation(method);\n\n    const resetFormValues = () => {\n        const { firstName, lastName } = checkoutState.data.getBillingAddress() || {};\n\n        const defaultFormValues = {\n            ownershipType: OwnershipTypes.Personal,\n            accountType: AccountTypes.Savings,\n            accountNumber: '',\n            routingNumber: '',\n            businessName: '',\n            firstName: firstName || '',\n            lastName: lastName || '',\n            shouldSaveInstrument: false,\n            shouldSetAsDefaultInstrument: false,\n            instrumentId: currentInstrument?.bigpayToken || '',\n            orderConsent: false,\n        };\n\n        for (const [key, value] of Object.entries(defaultFormValues)) {\n            setFieldValue(key, value);\n        }\n    };\n\n    useEffect(() => {\n        resetFormValues();\n    }, [currentInstrument?.bigpayToken]);\n\n    const shouldShowForm =\n        !shouldShowInstrumentFieldset || shouldCreateNewInstrument || shouldConfirmInstrument;\n    const shouldShowMandateTextCheckbox = shouldShowForm && isValidForm && !shouldConfirmInstrument;\n\n    useEffect(() => {\n        if (shouldShowForm) {\n            const validate = async () => {\n                const braintreeAchFormValues = getFormValues();\n                const isValid = await validateBraintreeAchForm(braintreeAchFormValues);\n\n                if (!isValid && getFieldValue('orderConsent')) {\n                    setFieldValue('orderConsent', false);\n                }\n\n                setIsValidForm(isValid);\n            };\n\n            void validate();\n        } else {\n            resetFormValidation();\n        }\n    }, [\n        getFormValues,\n        setFieldValue,\n        setIsValidForm,\n        shouldShowForm,\n        validateBraintreeAchForm,\n        resetFormValidation,\n    ]);\n\n    useEffect(() => {\n        const mandateTextConfirmationCheckboxValue = getFieldValue('orderConsent');\n\n        const inValidForInstrumentConfirmation = shouldConfirmInstrument && !isValidForm;\n        const inValidForDefaultTransactions =\n            shouldShowMandateTextCheckbox && !mandateTextConfirmationCheckboxValue;\n\n        const shouldDisableSubmit = shouldShowForm\n            ? inValidForInstrumentConfirmation || inValidForDefaultTransactions\n            : false;\n\n        disableSubmit(method, shouldDisableSubmit);\n    }, [disableSubmit, getFieldValue, isValidForm, method, shouldShowMandateTextCheckbox]);\n\n    return (\n        <div className=\"checkout-ach-form\" data-test=\"checkout-ach-form\">\n            {shouldShowInstrumentFieldset && (\n                <div className=\"checkout-ach-form__instrument\">\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                </div>\n            )}\n\n            {shouldConfirmInstrument && (\n                <p>\n                    <strong>\n                        <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_title_text\" />\n                    </strong>\n\n                    <br />\n\n                    <TranslatedString id=\"payment.bank_account_instrument_trusted_shipping_address_text\" />\n                </p>\n            )}\n\n            {shouldShowForm && <BraintreeAchFormFields />}\n\n            {isInstrumentFeatureAvailable && (\n                <StoreInstrumentFieldset\n                    instrumentId={currentInstrument?.bigpayToken}\n                    instruments={accountInstruments}\n                    isAccountInstrument\n                />\n            )}\n\n            {shouldShowMandateTextCheckbox && (\n                <BraintreeAchMandateText\n                    isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n                    updateMandateText={updateMandateText}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeAchPaymentForm;\n","import { createBraintreeAchPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeAchPaymentForm from './components/BraintreeAchPaymentForm';\n\nconst BraintreeAchPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const currentMandateTextRef = useRef('');\n    const updateMandateText = (currentMandateText: string) => {\n        currentMandateTextRef.current = currentMandateText;\n    };\n\n    useEffect(() => {\n        const initializePaymentOrThrow = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    integrations: [createBraintreeAchPaymentStrategy],\n                    braintreeach: {\n                        getMandateText: () => currentMandateTextRef.current,\n                    },\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePaymentOrThrow();\n\n        return () => {\n            const deinitializePaymentOrThrow = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePaymentOrThrow();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = checkoutState.data.getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && method.config.isVaultingEnabled;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    }, []);\n\n    const isLoading =\n        checkoutState.statuses.isLoadingInstruments() ||\n        checkoutState.statuses.isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeAchPaymentForm\n                                method={method}\n                                updateMandateText={updateMandateText}\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeAchPaymentMethod,\n    [{ id: 'braintreeach' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBraintreeFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n    const paymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneCreditCardForm.scss';\n\ninterface BraintreeFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n}\n\nconst BraintreeFastlaneCreditCardForm: FunctionComponent<BraintreeFastlaneCreditCardFormProps> = ({\n    renderPayPalCardComponent,\n}) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#braintree-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"braintree-fastlane-cc-form-container\"\n            data-test=\"braintree-fastlane-cc-form-container\"\n            id=\"braintree-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BraintreeFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\n\nimport './BraintreeFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BraintreeFastlaneInstrumentsFormProps {\n    onChange: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n    selectedInstrument: CardInstrument;\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BraintreeFastlaneInstrumentsForm: FunctionComponent<\n    BraintreeFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"braintree-fastlane-instrument\"\n            data-test=\"braintree-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"braintree-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"braintree-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"braintree-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"braintree-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"braintree-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BraintreeFastlaneComponentRef } from '../BraintreeFastlanePaymentMethod';\nimport { useBraintreeFastlaneInstruments } from '../hooks/useBraintreeFastlaneInstruments';\n\nimport BraintreFastlaneCreditCardForm from './BraintreeFastlaneCreditCardForm';\nimport BraintreeFastlaneInstrumentsForm from './BraintreeFastlaneInstrumentsForm';\n\ninterface BraintreeFastlaneFormProps {\n    renderPayPalCardComponent?: BraintreeFastlaneComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BraintreeFastlaneComponentRef['showPayPalCardSelector'];\n}\n\nconst BraintreeFastlaneForm: FunctionComponent<BraintreeFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBraintreeFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\" id=\"braintree-fastlane\">\n            {shouldShowInstrumentsForm && (\n                <BraintreeFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BraintreFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BraintreeFastlaneForm;\n","import BraintreeFastlanePaymentMethod from './BraintreeFastlanePaymentMethod';\n\nexport default BraintreeFastlanePaymentMethod;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { createBraintreeFastlanePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BraintreeFastlaneForm from './components/BraintreeFastlaneForm';\n\nimport './BraintreeFastlanePaymentMethod.scss';\n\nexport interface BraintreeFastlaneComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BraintreeFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n}) => {\n    const paypalFastlaneComponentRef = useRef<BraintreeFastlaneComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                integrations: [createBraintreeFastlanePaymentStrategy],\n                braintreefastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalFastlaneComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalFastlaneComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: Error) => {\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BraintreeFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalFastlaneComponentRef?.current?.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalFastlaneComponentRef.current?.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeFastlanePaymentMethod,\n    [{ id: 'braintreeacceleratedcheckout' }],\n);\n","import { createBraintreeLocalMethodsPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreeLocalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const methodId = method.id;\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [createBraintreeLocalMethodsPaymentStrategy],\n                braintreelocalmethods: {\n                    container: '#checkout-payment-continue',\n                    buttonText: language.translate('payment.continue_with_brand', {\n                        brandName: methodId,\n                    }),\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return <></>;\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeLocalPaymentMethod,\n    [{ gateway: 'braintreelocalmethods' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createBraintreePaypalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/braintree';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BraintreePaypalPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const initializeBraintreePaypalPaymentMethod = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const { onUnhandledError, language, method, paymentForm } = rest;\n\n            return checkoutService.initializePayment({\n                ...defaultOptions,\n                integrations: [createBraintreePaypalPaymentStrategy],\n                braintree: {\n                    containerId: '#checkout-payment-continue',\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError?.(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError?.(error);\n                        }\n                    },\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                },\n            });\n        },\n        [rest, checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBraintreePaypalPaymentMethod}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreePaypalPaymentMethod,\n    [{ id: 'braintreepaypal' }],\n);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport {\n    type CheckoutButtonResolveId,\n    PaymentMethodId,\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { WalletButtonPaymentMethodComponent } from '@bigcommerce/checkout/wallet-button-integration';\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    method,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback(\n        (defaultOptions: PaymentInitializeOptions) => {\n            const reinitializePayment = async (options: PaymentInitializeOptions) => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n\n                    await checkoutService.initializePayment({\n                        ...options,\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            const mergedOptions = {\n                ...defaultOptions,\n                braintreevisacheckout: {\n                    onError: onUnhandledError,\n                    onPaymentSelect: () => reinitializePayment(mergedOptions),\n                },\n            };\n\n            return checkoutService.initializePayment(mergedOptions);\n        },\n        [checkoutService, method, onUnhandledError],\n    );\n\n    return (\n        <WalletButtonPaymentMethodComponent\n            {...rest}\n            buttonId=\"visaCheckoutWalletButton\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            editButtonClassName=\"v-button\"\n            initializePayment={initializeVisaCheckoutPayment}\n            method={method}\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n            signOutCustomer={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, CheckoutButtonResolveId>(\n    VisaCheckoutPaymentMethod,\n    [{ id: PaymentMethodId.BraintreeVisaCheckout }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\n\nconst BraintreeVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    language,\n    method,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BraintreeVenmoPaymentMethod,\n    [{ id: 'braintreevenmo' }],\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { number } from 'card-validator';\n\nimport { type WalletButtonInitializationData } from './types';\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\nconst formatAccountMask = (accountMask = '', padding = '****'): string =>\n    accountMask.includes('*') ? accountMask : `${padding} ${accountMask}`;\n\nconst isWalletButtonInitializationData = (\n    object: unknown,\n): object is WalletButtonInitializationData => {\n    if (typeof object === 'object' && object !== null) {\n        if (\n            'card_information' in object &&\n            typeof object.card_information === 'object' &&\n            object.card_information !== null &&\n            'number' in object.card_information &&\n            'type' in object.card_information\n        ) {\n            return true;\n        }\n\n        if (\n            'cardData' in object &&\n            typeof object.cardData === 'object' &&\n            object.cardData !== null &&\n            'accountMask' in object.cardData &&\n            'cardType' in object.cardData &&\n            'expMonth' in object.cardData &&\n            'expYear' in object.cardData\n        ) {\n            return true;\n        }\n\n        if ('accountNum' in object && 'accountMask' in object && 'expDate' in object) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nconst normalizeWalletPaymentData = (data: unknown): WalletPaymentData | undefined => {\n    if (isWalletButtonInitializationData(data)) {\n        if (data.card_information) {\n            return {\n                accountMask: formatAccountMask(data.card_information.number),\n                cardType: data.card_information.type,\n            };\n        }\n\n        if (data.cardData) {\n            return {\n                accountMask: formatAccountMask(data.cardData.accountMask),\n                cardType: data.cardData.cardType,\n                expiryMonth: data.cardData.expMonth,\n                expiryYear: data.cardData.expYear,\n            };\n        }\n\n        if (data.accountNum) {\n            const { card } = number(data.accountNum);\n\n            return {\n                accountMask: formatAccountMask(data.accountMask),\n                expiryMonth: data.expDate && data.expDate.substr(0, 2),\n                expiryYear: data.expDate && data.expDate.substr(2, 2),\n                cardType: card ? card.niceType : '',\n            };\n        }\n    }\n\n    return undefined;\n};\n\nexport default normalizeWalletPaymentData;\n","enum PaymentMethodType {\n    ApplePay = 'applepay',\n    Barclaycard = 'barclaycard',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    PayWithGoogle = 'paywithgoogle',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    PaypalVenmo = 'paypal-venmo',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { type LanguageService, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string {\n    return (method) => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                    method.method ||\n                    method.id,\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService,\n): (method: PaymentMethod) => string | undefined {\n    return (method) => {\n        const translations: { [key: string]: string } = {\n            [PaymentMethodId.Affirm]: language.translate('payment.affirm_name_text'),\n            [PaymentMethodId.Afterpay]: language.translate('payment.afterpay_name_text'),\n            [PaymentMethodId.AmazonPay]: language.translate('payment.amazon_name_text'),\n            [PaymentMethodId.Bolt]: language.translate('payment.bolt_name_text'),\n            [PaymentMethodId.Clearpay]: language.translate('payment.clearpay_name_text'),\n            [PaymentMethodType.GooglePay]: language.translate('payment.google_pay_name_text'),\n            [PaymentMethodId.Klarna]: language.translate('payment.klarna_name_text'),\n            [PaymentMethodType.Paypal]: language.translate('payment.paypal_name_text'),\n            [PaymentMethodType.PaypalCredit]: language.translate('payment.paypal_credit_name_text'),\n            [PaymentMethodType.VisaCheckout]: language.translate('payment.vco_name_text'),\n        };\n\n        return translations[method.id] || translations[method.method];\n    };\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignOutLinkProps {\n    method: PaymentMethod;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps> = ({ method, onSignOut }) => {\n    const { language } = useLocale();\n\n    return (\n        <div className=\"signout-link\">\n            <TranslatedString id=\"remote.sign_out_before_action\" />{' '}\n            {\n                // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                <a href=\"#\" onClick={preventDefault(onSignOut)}>\n                    <TranslatedString\n                        data={{ providerName: getPaymentMethodName(language)(method) }}\n                        id=\"remote.sign_out_action\"\n                    />\n                </a>\n            }{' '}\n            <TranslatedString id=\"remote.sign_out_after_action\" />\n        </div>\n    );\n};\n\nexport default SignOutLink;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { SignOutLink } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nexport interface PaymentViewProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    shouldShowEditButton?: boolean;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    buttonId: string;\n    method: PaymentMethod;\n    onSignOut: () => void;\n}\n\nconst PaymentView: React.FC<PaymentViewProps> = ({\n    accountMask,\n    cardName,\n    cardType,\n    expiryMonth,\n    expiryYear,\n    shouldShowEditButton,\n    editButtonClassName,\n    editButtonLabel,\n    buttonId,\n    method,\n    onSignOut,\n}) => {\n    return (\n        <>\n            {!!cardName && (\n                <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />:\n                    </strong>{' '}\n                    {cardName}\n                </p>\n            )}\n\n            {!!accountMask && !!cardType && (\n                <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>{`${cardType}:`}</strong> {accountMask}\n                </p>\n            )}\n\n            {!!expiryMonth && !!expiryYear && (\n                <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />:\n                    </strong>{' '}\n                    {`${expiryMonth}/${expiryYear}`}\n                </p>\n            )}\n\n            {!!shouldShowEditButton && (\n                <p>\n                    {\n                        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n                        <a\n                            className={editButtonClassName}\n                            href=\"#\"\n                            id={buttonId}\n                            onClick={preventDefault()}\n                        >\n                            {editButtonLabel || (\n                                <TranslatedString id=\"remote.select_different_card_action\" />\n                            )}\n                        </a>\n                    }\n                </p>\n            )}\n\n            <SignOutLink method={method} onSignOut={onSignOut} />\n        </>\n    );\n};\n\nexport default PaymentView;\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString, useLocale } from '@bigcommerce/checkout/locale';\nimport { getPaymentMethodName } from '@bigcommerce/checkout/payment-integration-api';\n\nexport interface SignInViewProps {\n    buttonId: string;\n    method: PaymentMethod;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n}\n\nconst SignInView: React.FC<SignInViewProps> = ({\n    buttonId,\n    method,\n    signInButtonClassName,\n    signInButtonLabel,\n}) => {\n    const { language } = useLocale();\n\n    return (\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\n        <a className={signInButtonClassName} href=\"#\" id={buttonId} onClick={preventDefault()}>\n            {signInButtonLabel || (\n                <TranslatedString\n                    data={{ providerName: getPaymentMethodName(language)(method) }}\n                    id=\"remote.sign_in_action\"\n                />\n            )}\n        </a>\n    );\n};\n\nexport default SignInView;\n","import {\n    type CheckoutSelectors,\n    type CustomerRequestOptions,\n    type PaymentInitializeOptions,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop, some } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect } from 'react';\n\nimport {\n    type PaymentFormService,\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport normalizeWalletPaymentData from './normalizeWalletPaymentData';\nimport PaymentView from './PaymentView';\nimport SignInView from './SignInView';\n\nexport interface WalletButtonPaymentMethodProps {\n    paymentForm: PaymentFormService;\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    signOutCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nconst WalletButtonPaymentMethodComponent: React.FC<WalletButtonPaymentMethodProps> = ({\n    paymentForm,\n    buttonId,\n    editButtonClassName,\n    editButtonLabel,\n    isInitializing = false,\n    method,\n    shouldShowEditButton,\n    signInButtonClassName,\n    signInButtonLabel,\n    signOutCustomer,\n    deinitializePayment,\n    initializePayment,\n    onSignOut = noop,\n    onSignOutError = noop,\n    onUnhandledError = noop,\n}) => {\n    const {\n        checkoutState: {\n            data: { getBillingAddress, getCheckout, isPaymentDataRequired },\n        },\n    } = useCheckout();\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n    const isPaymentSelected = some(checkout.payments, { providerId: method.id });\n    // FIXME: I'm not sure how this would work for non-English names.\n    const cardName =\n        walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' ');\n\n    const toggleSubmit = () => {\n        const { disableSubmit } = paymentForm;\n        const currentIsPaymentDataRequired = isPaymentDataRequired();\n\n        if (\n            normalizeWalletPaymentData(method.initializationData) ||\n            !currentIsPaymentDataRequired\n        ) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    };\n\n    const handleSignOut = useCallback(async () => {\n        try {\n            await signOutCustomer({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    }, [signOutCustomer, method.id, onSignOut, onSignOutError]);\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            toggleSubmit();\n\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                const { disableSubmit } = paymentForm;\n\n                disableSubmit(method, false);\n\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        toggleSubmit();\n    });\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isInitializing}>\n            <div className=\"paymentMethod paymentMethod--walletButton\">\n                {isPaymentSelected ? (\n                    <PaymentView\n                        {...walletPaymentData}\n                        buttonId={buttonId}\n                        cardName={cardName}\n                        editButtonClassName={editButtonClassName}\n                        editButtonLabel={editButtonLabel}\n                        method={method}\n                        onSignOut={handleSignOut}\n                        shouldShowEditButton={shouldShowEditButton}\n                    />\n                ) : (\n                    <SignInView\n                        buttonId={buttonId}\n                        method={method}\n                        signInButtonClassName={signInButtonClassName}\n                        signInButtonLabel={signInButtonLabel}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default WalletButtonPaymentMethodComponent;\n"],"names":["props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","id","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","BraintreeAchFieldType","OwnershipTypes","AccountTypes","accountTypeOptions","value","Savings","label","Checking","ownershipTypeOptions","Personal","Business","defaultBraintreeAchFormFields","name","AccountType","custom","required","fieldType","DynamicFormFieldType","DROPDOWM","options","items","AccountNumber","max","min","RoutingNumber","OwnershipType","personalBraintreeAchFormFields","FirstName","LastName","businessBraintreeAchFormFields","BusinessName","currentInstrument","setCurrentInstrument","paymentForm","setFieldValue","accountInstruments","useMemo","isAchInstrument","isGuest","Boolean","isVaultingEnabled","shouldCreateNewInstrument","shouldConfirmInstrument","language","getValidationSchema","formFields","getFieldValue","requiredFieldErrorTranslationIds","reduce","schema","translate","matches","validateBraintreeAchForm","braintreeAchFormValues","accountNumber","businessName","routingNumber","ownershipType","firstName","lastName","validationSchema","setValidationSchema","isValidAccountNumber","isValidRoutingNumber","isValidFirstName","isValidLastName","isValidBusinessName","Promise","all","fields","isValid","isValidDepositoryName","resetFormValidation","getTranslatedLabelByFieldName","fieldName","braintreeAchFormLabelsMap","accountType","Object","values","includes","isBraintreeAchFormFieldName","fieldValues","handleChange","fieldId","map","field","DynamicFormField","extraClass","key","onChange","updateMandateText","getFormValues","fullName","String","depositoryName","outstandingBalance","getCheckout","storeName","storeProfile","symbol","currency","mandateTextTranslationKey","formattedDate","Date","now","toJSON","slice","split","reverse","join","mandateTextTranslationProps","toLowerCase","currentDate","mandateText","CheckboxFormField","labelContent","isValidForm","setIsValidForm","disableSubmit","getBillingAddress","defaultFormValues","shouldSaveInstrument","shouldSetAsDefaultInstrument","orderConsent","entries","resetFormValues","shouldShowForm","shouldShowMandateTextCheckbox","validate","mandateTextConfirmationCheckboxValue","AccountInstrumentFieldset","TranslatedString","StoreInstrumentFieldset","toResolvableComponent","currentMandateTextRef","useRef","integrations","braintreeach","getMandateText","current","isLoadingPaymentMethod","formContextProps","isSubmitted","setSubmitted","FormContext","Provider","CheckoutContext","LocaleProvider","PaymentFormContext","LoadingOverlay","currentMandateText","renderPayPalCardComponent","cardType","type","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","showPayPalCardSelector","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","instrument","useBraintreeFastlaneInstruments","shouldShowInstrumentsForm","paypalFastlaneComponentRef","isInitializingPayment","braintreefastlane","onInit","onError","braintreelocalmethods","container","buttonText","brandName","onRenderButton","hidePaymentSubmitButton","submitForm","rest","initializeBraintreePaypalPaymentMethod","defaultOptions","braintree","containerId","message","HostedPaymentComponent","initializeVisaCheckoutPayment","mergedOptions","braintreevisacheckout","onPaymentSelect","reinitializePayment","WalletButtonPaymentMethodComponent","buttonId","editButtonClassName","shouldShowEditButton","signInButtonClassName","signOutCustomer","PaymentMethodId","BraintreeVisaCheckout","checkoutSettings","isCardVaultingEnabled","formatAccountMask","accountMask","padding","object","card_information","cardData","isWalletButtonInitializationData","number","expiryMonth","expMonth","expiryYear","expYear","accountNum","card","expDate","substr","niceType","PaymentMethodType","getPaymentMethodName","translations","Affirm","Afterpay","AmazonPay","Bolt","Clearpay","GooglePay","Klarna","Paypal","PaypalCredit","VisaCheckout","getTranslatedPaymentMethodName","MultiOption","displayName","capitalize","get","onSignOut","href","preventDefault","providerName","cardName","editButtonLabel","signInButtonLabel","onSignOutError","billingAddress","checkout","walletPaymentData","initializationData","isPaymentSelected","some","payments","providerId","toggleSubmit","currentIsPaymentDataRequired","handleSignOut","window","location","reload"],"sourceRoot":""}