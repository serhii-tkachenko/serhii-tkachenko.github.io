{"version":3,"file":"6968-dc93326f.js","mappings":"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","sources":["webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/utility/src/is-experiment-enabled/is-experiment-enabled.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-verison.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-version-manager.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/unsupported-browser-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/types.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/utils/is-braintree-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-sdk-scripts-integrity.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/braintree-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/braintree-utils/src/isManageableBraintreeSDKVersion.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-session-factory.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/apple-pay-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/apple-pay-integration/src/create-apple-pay-customer-strategy.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export interface Features {\n    [featureName: string]: boolean | undefined;\n}\n\nexport default function isExperimentEnabled(\n    features: Features,\n    experimentName: string,\n    fallbackValue = true,\n): boolean {\n    return features[experimentName] ?? fallbackValue;\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export const BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION = '3.128.0';\nexport const BRAINTREE_SDK_DEFAULT_VERSION = '3.123.2';\nexport const BRAINTREE_SDK_STABLE_VERSION = '3.106.0';\n","import { find } from 'lodash';\n\nimport { PaymentIntegrationService } from '@bigcommerce/checkout-sdk/payment-integration-api';\nimport { isExperimentEnabled } from '@bigcommerce/checkout-sdk/utility';\n\nimport { BraintreeHostWindow } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport default class BraintreeSDKVersionManager {\n    private braintreeWindow: BraintreeHostWindow = window;\n\n    constructor(private paymentIntegrationService: PaymentIntegrationService) {}\n\n    getSDKVersion() {\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfig();\n        const features = storeConfig?.checkoutSettings.features || {};\n\n        const preloadedVersion = this.getPreloadedSDKVersion();\n\n        if (preloadedVersion) {\n            return preloadedVersion;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5809.braintree_hosted_fields_fix_version')) {\n            return BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION;\n        }\n\n        if (isExperimentEnabled(features, 'PAYPAL-5636.update_braintree_sdk_version')) {\n            return BRAINTREE_SDK_DEFAULT_VERSION;\n        }\n\n        return BRAINTREE_SDK_STABLE_VERSION;\n    }\n\n    private getPreloadedSDKVersion(): void | string {\n        const braintree = this.braintreeWindow.braintree;\n\n        if (braintree) {\n            const preloadedVersion = find<{ VERSION?: string }>(\n                Object.values(braintree),\n                (module) => !!module.VERSION,\n            );\n\n            return preloadedVersion?.VERSION;\n        }\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { StandardError } from './index';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport * from './braintree';\nexport * from './paypal';\nexport * from './visacheckout';\n\n/**\n *\n * Braintree Module\n *\n */\nexport interface BraintreeModuleCreator<\n    TInstance,\n    TOptions = BraintreeModuleCreatorConfig,\n    TError = BraintreeError,\n> {\n    create(\n        config: TOptions,\n        callback?: (error: TError, instance: TInstance) => void,\n    ): Promise<TInstance>;\n}\n\nexport interface BraintreeModuleCreatorConfig {\n    client?: BraintreeClient;\n    authorization?: string; // Info: authorization uses clientToken as a value\n}\n\nexport interface BraintreeModule {\n    teardown(): Promise<void>;\n}\n\n/**\n *\n * Braintree Window\n *\n */\nexport interface BraintreeWindow extends Window {\n    client?: BraintreeClientCreator;\n    braintreeFastlane?: BraintreeFastlane;\n}\n\n/**\n *\n * Braintree Client\n *\n */\nexport type BraintreeClientCreator = BraintreeModuleCreator<BraintreeClient>;\n\nexport interface BraintreeClient {\n    request(payload: BraintreeClientRequestPayload): Promise<BraintreeClientRequestResponse>;\n}\n\nexport interface BraintreeClientRequestPayload {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n\nexport interface BraintreeHostedFieldsTokenizePayload {\n    nonce: string;\n    details: {\n        bin: string;\n        cardType: string;\n        expirationMonth: string;\n        expirationYear: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    type: string;\n    binData: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface BraintreeClientRequestResponse {\n    creditCards: BraintreeHostedFieldsTokenizePayload[];\n}\n\n/**\n *\n * Braintree Data Collector\n *\n */\nexport type BraintreeDataCollectorCreator = BraintreeModuleCreator<\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig\n>;\n\nexport interface BraintreeDataCollectorCreatorConfig extends BraintreeModuleCreatorConfig {\n    kount?: boolean; // Info: this param is needed for fraud detection (should always be 'true')\n    paypal?: boolean; // TODO: based on braintree documentation, this param is deprecated, so we dont need it anymore\n    riskCorrelationId?: string; // Info: the option is needed for PayPal Analytics\n}\n\nexport interface BraintreeDataCollector extends BraintreeModule {\n    deviceData?: string;\n}\n\n// TODO: remove this interface when BraintreeIntegrationService will be removed\nexport interface BraintreeDataCollectors {\n    default?: BraintreeDataCollector;\n    paypal?: BraintreeDataCollector;\n}\n\n/**\n *\n * Braintree Google Payment\n *\n */\ntype BraintreeGooglePaymentAddressFormat = 'FULL' | 'MIN';\n\nexport enum TotalPriceStatusType {\n    ESTIMATED = 'ESTIMATED',\n    FINAL = 'FINAL',\n    NOT_CURRENTLY_KNOWN = 'NOT_CURRENTLY_KNOWN',\n}\n\nexport interface BraintreeGooglePaymentDataRequestOptions {\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: TotalPriceStatusType;\n        totalPrice: string;\n    };\n    cardRequirements: {\n        billingAddressRequired: boolean;\n        billingAddressFormat: BraintreeGooglePaymentAddressFormat;\n    };\n    emailRequired?: boolean;\n    phoneNumberRequired?: boolean;\n    shippingAddressRequired?: boolean;\n}\n\nexport interface BraintreeGooglePaymentDataRequest {\n    allowedPaymentMethods: string[];\n    apiVersion: number;\n    cardRequirements: {\n        allowedCardNetworks: string[];\n        billingAddressFormat: string;\n        billingAddressRequired: boolean;\n    };\n    environment: string;\n    i: {\n        googleTransactionId: string;\n        startTimeMs: number;\n    };\n    merchantInfo: {\n        merchantId: string;\n        merchantName: string;\n        authJwt?: string;\n    };\n    paymentMethodTokenizationParameters: {\n        parameters: {\n            'braintree:apiVersion': string;\n            'braintree:authorizationFingerprint': string;\n            'braintree:merchantId': string;\n            'braintree:metadata': string;\n            'braintree:sdkVersion': string;\n            gateway: string;\n        };\n        tokenizationType: string;\n    };\n    shippingAddressRequired: boolean;\n    phoneNumberRequired: boolean;\n    transactionInfo: {\n        currencyCode: string;\n        totalPrice: string;\n        totalPriceStatus: TotalPriceStatusType;\n    };\n}\n\nexport type BraintreeGooglePaymentCreator = BraintreeModuleCreator<BraintreeGooglePayment>;\n\nexport interface BraintreeGooglePayment extends BraintreeModule {\n    createPaymentDataRequest(\n        options?: BraintreeGooglePaymentDataRequestOptions,\n    ): BraintreeGooglePaymentDataRequest;\n}\n\nexport interface BraintreeGooglePayThreeDSecure {\n    verifyCard(options: BraintreeGooglePayThreeDSecureOptions): Promise<BraintreeVerifyPayload>;\n}\n\nexport interface BraintreeGooglePayThreeDSecureOptions {\n    nonce: string;\n    amount: number;\n    bin: string;\n    showLoader?: boolean;\n    onLookupComplete(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\n/**\n *\n * Braintree 3D Secure\n *\n */\nexport type BraintreeThreeDSecureCreator = BraintreeModuleCreator<\n    BraintreeThreeDSecure,\n    BraintreeThreeDSecureCreatorConfig\n>;\n\nexport interface BraintreeThreeDSecure extends BraintreeModule {\n    verifyCard(\n        options: BraintreeThreeDSecureOptions,\n        callback?: Braintree3DSVerifyCardCallback,\n    ): Promise<BraintreeVerifyPayload>;\n    cancelVerifyCard(): Promise<BraintreeVerifyPayload>;\n    on<K extends keyof BraintreeThreeDSecureEventMap>(\n        event: K,\n        handler: BraintreeThreeDSecureEventMap[K],\n    ): void;\n}\n\nexport type Braintree3DSVerifyCardCallback = (\n    verifyError: Braintree3DSVerifyCardError,\n    payload: Braintree3DSVerifyCardPayload,\n) => void;\n\nexport interface BraintreeThreeDSecureEventMap {\n    'customer-canceled': () => void;\n}\n\nexport interface Braintree3DSVerifyCardError {\n    code: string;\n}\n\nexport interface Braintree3DSVerifyCardPayload {\n    nonce: string;\n}\n\nexport interface BraintreeThreeDSecureCreatorConfig extends BraintreeModuleCreatorConfig {\n    version?: number;\n}\n\nexport interface BraintreeThreeDSecureOptions {\n    nonce: string;\n    amount: number | string;\n    challengeRequested?: boolean;\n    showLoader?: boolean;\n    bin?: string;\n    additionalInformation?: {\n        acsWindowSize?: '01' | '02' | '03' | '04' | '05';\n    };\n    collectDeviceData?: boolean;\n    addFrame?(\n        error: Error | undefined,\n        iframe: HTMLIFrameElement,\n        cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n    ): void;\n    removeFrame?(): void;\n    onLookupComplete?(data: BraintreeThreeDSecureVerificationData, next: () => void): void;\n}\n\nexport interface BraintreeThreeDSecureVerificationData {\n    lookup: {\n        threeDSecureVersion: string;\n    };\n    paymentMethod: BraintreeVerifyPayload;\n    requiresUserAuthentication: boolean;\n    threeDSecureInfo: {\n        liabilityShiftPossible: boolean;\n        liabilityShifted: boolean;\n    };\n}\n\nexport enum BraintreeOrderStatus {\n    Completed = 'COMPLETED',\n    Pending = 'PENDING',\n    Failed = 'FAILED',\n}\n\nexport interface BraintreeOrderStatusData {\n    status: BraintreeOrderStatus;\n}\n\n/**\n *\n * Braintree US Bank Account (ACH)\n *\n */\nexport type BraintreeUsBankAccountCreator = BraintreeModuleCreator<BraintreeUsBankAccount>;\n\nexport interface BraintreeUsBankAccount {\n    tokenize(\n        options: BraintreeUsBankAccountTokenizationOptions,\n    ): Promise<BraintreeUsBankAccountTokenizationResponse>;\n}\n\nexport interface BraintreeUsBankAccountTokenizationOptions {\n    bankDetails: BraintreeUsBankAccountDetails;\n    mandateText: string;\n}\n\nexport interface BraintreeUsBankAccountTokenizationResponse {\n    nonce: string;\n    details: BraintreeTokenizationDetails;\n}\n\nexport interface BraintreeUsBankAccountDetails {\n    accountNumber: string;\n    routingNumber: string;\n    ownershipType: string;\n    accountType: string;\n    firstName?: string;\n    lastName?: string;\n    businessName?: string;\n    billingAddress: {\n        streetAddress: string;\n        extendedAddress: string;\n        locality: string;\n        region: string;\n        postalCode: string;\n    };\n}\n\n// TODO: move this interface in separate types group if it will be used in another (not ACH) strategies\n// This seems to be an interface which will be used in different places\nexport interface BraintreeTokenizationDetails {\n    username?: string;\n    email?: string;\n    payerId?: string;\n    firstName?: string;\n    lastName?: string;\n    countryCode?: string;\n    phone?: string;\n    shippingAddress?: BraintreeShippingAddress;\n    billingAddress?: BraintreeAddress;\n}\n\nexport interface BraintreeAddress {\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n}\n\nexport interface BraintreeShippingAddress extends BraintreeAddress {\n    recipientName: string;\n}\n\n/**\n *\n * Braintree non-instant payment methods\n *\n */\nexport enum NonInstantLocalPaymentMethods {\n    TRUSTLY = 'trustly',\n}\n\nexport interface BraintreeLocalPaymentMethodRedirectAction {\n    body: {\n        additional_action_required: {\n            type: 'offsite_redirect';\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport interface BraintreeOrderSavedResponse {\n    body: {\n        additional_action_required: {\n            data: {\n                order_id_saved_successfully: string;\n            };\n        };\n    };\n}\n\n/**\n *\n * Braintree Fastlane\n *\n */\nexport type BraintreeFastlaneCreator = BraintreeModuleCreator<\n    BraintreeFastlane,\n    BraintreeFastlaneConfig\n>;\n\nexport interface BraintreeFastlaneConfig {\n    authorization: string;\n    client: BraintreeClient;\n    deviceData?: string;\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlane {\n    identity: BraintreeFastlaneIdentity;\n    profile: BraintreeFastlaneProfile;\n    FastlaneCardComponent: (\n        options: BraintreeFastlaneCardComponentOptions,\n    ) => Promise<BraintreeFastlaneCardComponent>;\n    events: BraintreeFastlaneEvents;\n}\n\nexport interface BraintreeFastlaneProfile {\n    showCardSelector(): Promise<BraintreeFastlaneCardSelectorResponse>;\n    showShippingAddressSelector(): Promise<BraintreeFastlaneShippingAddressSelectorResponse>;\n}\n\nexport interface BraintreeFastlaneShippingAddressSelectorResponse {\n    selectionChanged: boolean;\n    selectedAddress: BraintreeFastlaneShippingAddress;\n}\n\nexport interface BraintreeFastlaneShippingAddress {\n    name: BraintreeFastlaneProfileName;\n    phoneNumber: string;\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n}\n\nexport interface BraintreeFastlaneProfileName {\n    fullName: string;\n    firstName?: string;\n    lastName?: string;\n}\n\nexport interface BraintreeFastlaneCardSelectorResponse {\n    selectionChanged: boolean;\n    selectedCard: BraintreeFastlaneVaultedInstrument;\n}\n\nexport interface BraintreeFastlaneWindow extends Window {\n    braintreeFastlane: BraintreeFastlane;\n}\n\nexport interface BraintreeFastlaneIdentity {\n    lookupCustomerByEmail(email: string): Promise<BraintreeFastlaneLookupCustomerByEmailResult>;\n    triggerAuthenticationFlow(\n        customerId: string,\n        options?: BraintreeFastlaneAuthenticationOptions,\n    ): Promise<BraintreeFastlaneAuthenticationCustomerResult>;\n}\n\nexport interface BraintreeFastlaneLookupCustomerByEmailResult {\n    customerContextId?: string;\n}\n\nexport interface BraintreeFastlaneAuthenticationOptions {\n    styles?: BraintreeFastlaneStylesOption;\n}\n\nexport interface BraintreeFastlaneStylesOption {\n    root?: {\n        backgroundColorPrimary?: string;\n        errorColor?: string;\n        fontFamily?: string;\n        fontSizeBase?: string;\n        padding?: string;\n        primaryColor?: string;\n    };\n    input?: {\n        borderRadius?: string;\n        borderColor?: string;\n        focusBorderColor?: string;\n        backgroundColor?: string;\n        borderWidth?: string;\n        textColorBase?: string;\n    };\n    toggle?: {\n        colorPrimary?: string;\n        colorSecondary?: string;\n    };\n    text?: {\n        body?: {\n            color?: string;\n            fontSize?: string;\n        };\n        caption?: {\n            color?: string;\n            fontSize?: string;\n        };\n    };\n    branding?: string; // 'light' | 'dark'\n}\n\nexport enum BraintreeFastlaneAuthenticationState {\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n    CANCELED = 'cancelled',\n    UNRECOGNIZED = 'unrecognized',\n}\n\nexport interface BraintreeFastlaneAuthenticationCustomerResult {\n    authenticationState: BraintreeFastlaneAuthenticationState;\n    profileData: BraintreeFastlaneProfileData;\n}\n\nexport interface BraintreeFastlaneProfileData {\n    fastlaneCustomerAuthAssertionToken: string;\n    fastlaneCustomerId: string;\n    shippingAddress: BraintreeFastlaneAddress;\n    card: BraintreeFastlaneVaultedInstrument;\n    name: BraintreeFastlaneName;\n}\n\nexport interface BraintreeFastlaneName {\n    firstName: string;\n    lastName: string;\n}\n\nexport interface BraintreeFastlaneAddress {\n    id?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress: string;\n    extendedAddress?: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    countryCodeNumeric?: number;\n    countryCodeAlpha2: string;\n    countryCodeAlpha3?: string;\n    phoneNumber?: string;\n}\n\nexport interface BraintreeFastlaneCardPaymentSource {\n    brand: string;\n    expiry: string;\n    lastDigits: string;\n    name?: string;\n    billingAddress: BraintreeFastlaneAddress;\n    binDetails?: {\n        bin: string;\n    };\n}\n\nexport interface BraintreeFastlanePaymentSource {\n    card: BraintreeFastlaneCardPaymentSource;\n}\n\nexport interface BraintreeFastlaneVaultedInstrument {\n    id: string; // This is the nonce / token\n    paymentSource: BraintreeFastlanePaymentSource;\n}\n\nexport interface BraintreeFastlaneCardComponentOptions {\n    styles: BraintreeFastlaneStylesOption;\n    fields: BraintreeFastlaneCardComponentFields;\n}\n\nexport interface BraintreeFastlaneCardComponentFields {\n    cardholderName?: {\n        enabled?: boolean;\n        prefill?: string;\n    };\n    phoneNumber?: {\n        placeholder?: string;\n        prefill?: string;\n    };\n}\n\nexport interface FastlaneStylesSettings {\n    fastlaneRootSettingsBackgroundColor?: string;\n    fastlaneRootSettingsErrorColor?: string;\n    fastlaneRootSettingsFontFamily?: string;\n    fastlaneRootSettingsPadding?: string;\n    fastlaneRootSettingsPrimaryColor?: string;\n    fastlaneRootSettingsFontSize?: string;\n    fastlaneInputSettingsBackgroundColor?: string;\n    fastlaneInputSettingsBorderRadius?: string;\n    fastlaneInputSettingsBorderWidth?: string;\n    fastlaneInputSettingsBorderColor?: string;\n    fastlaneInputSettingsFocusBorderBase?: string;\n    fastlaneInputSettingsTextColorBase?: string;\n    fastlaneToggleSettingsColorPrimary?: string;\n    fastlaneToggleSettingsColorSecondary?: string;\n    fastlaneTextBodySettingsColor?: string;\n    fastlaneTextBodySettingsFontSize?: string;\n    fastlaneTextCaptionSettingsFontSize?: string;\n    fastlaneTextCaptionSettingsColor?: string;\n    fastlaneBrandingSettings?: string;\n}\n\nexport interface BraintreeFastlaneTokenizeOptions {\n    name?: {\n        fullName: string;\n    };\n    billingAddress?: BraintreeFastlaneAddress;\n    shippingAddress?: BraintreeFastlaneAddress;\n}\n\nexport interface BraintreeFastlaneEvents {\n    apmSelected: (options: BraintreeFastlaneApmSelectedEventOptions) => void;\n    emailSubmitted: (options: BraintreeFastlaneEmailEnteredEventOptions) => void;\n    orderPlaced: (options: BraintreeFastlaneOrderPlacedEventOptions) => void;\n}\n\nexport interface BraintreeFastlaneEventCommonOptions {\n    context_type: 'cs_id';\n    context_id: string; // checkout session id\n    page_type: 'checkout_page';\n    page_name: string; // title of the checkout initiation page\n    partner_name: 'bigc';\n    user_type: 'store_member' | 'store_guest'; // type of the user on the merchant site\n    store_id: string;\n    merchant_name: string;\n    experiment: string; // stringify JSON object \"[{ treatment_group: 'test' | 'control' }]\"\n}\n\nexport interface BraintreeFastlaneApmSelectedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page\n    apm_selected: string; // alternate payment method selected / methodId\n    apm_location: 'pre-email section' | 'payment section'; // placement of APM, whether it be above the email entry or in the radio buttons\n}\n\nexport interface BraintreeFastlaneEmailEnteredEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    user_email_saved: boolean; // shows whether checkout was loaded with or without a saved email\n    apm_shown: '0' | '1'; // alternate payment shown on the checkout page\n    apm_list: string; // list of alternate payment shown on checkout page 'applepay,googlepay,paypal'\n}\n\nexport interface BraintreeFastlaneOrderPlacedEventOptions\n    extends BraintreeFastlaneEventCommonOptions {\n    selected_payment_method: string;\n    currency_code: string;\n}\n\nexport interface BraintreeFastlaneCardComponent {\n    (options: BraintreeFastlaneCardComponentOptions): BraintreeFastlaneCardComponent;\n    getPaymentToken(\n        options: BraintreeFastlaneTokenizeOptions,\n    ): Promise<BraintreeFastlaneVaultedInstrument>;\n    render(element: string): void;\n}\n\n/**\n *\n * Braintree Payload Verification\n *\n */\nexport interface BraintreeVerifyPayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo: string;\n    };\n    description: string;\n    liabilityShiftPossible: boolean;\n    liabilityShifted: boolean;\n}\n\n/**\n *\n * Braintree Errors\n *\n */\nexport enum BraintreeErrorType {\n    Customer = 'CUSTOMER',\n    Merchant = 'MERCHANT',\n    Network = 'NETWORK',\n    Internal = 'INTERNAL',\n    Unknown = 'UNKNOWN',\n}\n\nexport enum BraintreeErrorCode {\n    KountNotEnabled = 'DATA_COLLECTOR_KOUNT_NOT_ENABLED',\n}\n\nexport interface BraintreeError extends Error {\n    type: BraintreeErrorType;\n    code: string | BraintreeErrorCode.KountNotEnabled;\n    details?: unknown;\n}\n\nexport interface BraintreeRedirectError {\n    body: {\n        additional_action_required: {\n            data: {\n                redirect_url: string;\n            };\n        };\n    };\n}\n\nexport default interface BillingAddress extends Address {\n    id: string;\n    email?: string;\n}\n\nexport enum BraintreeSupportedCardBrands {\n    Visa = 'visa',\n    Mastercard = 'mastercard',\n    AmericanExpress = 'american-express',\n    DinersClub = 'diners-club',\n    Discover = 'discover',\n    Jcb = 'jcb',\n    UnionPay = 'union-pay',\n    Maestro = 'maestro',\n    Elo = 'elo',\n    Mir = 'mir',\n    Hiper = 'hiper',\n    Hipercard = 'hipercard',\n}\n\nexport interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport interface BraintreeRequestData {\n    data: {\n        creditCard: {\n            billingAddress?: {\n                countryCodeAlpha2: string;\n                locality: string;\n                countryName: string;\n                postalCode: string;\n                streetAddress: string;\n            };\n            cardholderName: string;\n            cvv?: string;\n            expirationDate: string;\n            number: string;\n            options: {\n                validate: boolean;\n            };\n        };\n    };\n    endpoint: string;\n    method: string;\n}\n","import { Omit } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    PaypalAuthorizeData,\n    PaypalButtonOptions,\n    PaypalButtonRender,\n    PaypalSDK,\n    PaypalStyleOptions,\n} from './paypal';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeError,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsTokenizePayload,\n    BraintreeModule,\n    BraintreeModuleCreator,\n    BraintreeModuleCreatorConfig,\n    BraintreeThreeDSecureCreator,\n    BraintreeTokenizationDetails,\n    BraintreeUsBankAccountCreator,\n    BraintreeWindow,\n    FastlaneStylesSettings,\n    VisaCheckoutSDK,\n} from './types';\nimport {\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\n/**\n *\n * Constants\n *\n */\nexport enum BraintreeEnv {\n    Sandbox = 'sandbox',\n    Production = 'production',\n}\n\n/**\n *\n * Common\n *\n */\nexport enum BraintreeModuleName {\n    Client = 'client',\n    DataCollector = 'dataCollector',\n    Fastlane = 'fastlane',\n    GooglePayment = 'googlePayment',\n    HostedFields = 'hostedFields',\n    LocalPayment = 'localPayment',\n    Paypal = 'paypal',\n    PaypalCheckout = 'paypalCheckout',\n    ThreeDSecure = 'threeDSecure',\n    UsBankAccount = 'usBankAccount',\n    Venmo = 'venmo',\n    VisaCheckout = 'visaCheckout',\n}\n\nexport type BraintreeModuleCreators =\n    | BraintreeClientCreator\n    | BraintreeFastlaneCreator\n    | BraintreeDataCollectorCreator\n    | BraintreeGooglePaymentCreator\n    | BraintreeHostedFieldsCreator\n    | BraintreePaypalCreator\n    | BraintreePaypalCheckoutCreator\n    | BraintreeThreeDSecureCreator\n    | BraintreeVenmoCheckoutCreator\n    | BraintreeVisaCheckoutCreator\n    | BraintreeUsBankAccountCreator\n    | BraintreeLocalPaymentCreator;\n\n// TODO: rename to BraintreeSdkModules\nexport interface BraintreeSDK {\n    [BraintreeModuleName.Client]?: BraintreeClientCreator;\n    [BraintreeModuleName.Fastlane]?: BraintreeFastlaneCreator;\n    [BraintreeModuleName.DataCollector]?: BraintreeDataCollectorCreator;\n    [BraintreeModuleName.GooglePayment]?: BraintreeGooglePaymentCreator;\n    [BraintreeModuleName.HostedFields]?: BraintreeHostedFieldsCreator;\n    [BraintreeModuleName.Paypal]?: BraintreePaypalCreator;\n    [BraintreeModuleName.PaypalCheckout]?: BraintreePaypalCheckoutCreator;\n    [BraintreeModuleName.ThreeDSecure]?: BraintreeThreeDSecureCreator;\n    [BraintreeModuleName.Venmo]?: BraintreeVenmoCheckoutCreator;\n    [BraintreeModuleName.VisaCheckout]?: BraintreeVisaCheckoutCreator;\n    [BraintreeModuleName.UsBankAccount]?: BraintreeUsBankAccountCreator;\n    [BraintreeModuleName.LocalPayment]?: BraintreeLocalPaymentCreator;\n}\n\nexport type BraintreeLocalPaymentCreator = BraintreeModuleCreator<\n    BraintreeLocalPayment,\n    BraintreeLocalPaymentCreateConfig,\n    BraintreeError | undefined\n>;\n\nexport interface BraintreeLocalPaymentCreateConfig extends BraintreeModuleCreatorConfig {\n    merchantAccountId: string;\n}\n\nexport interface BraintreeInitializationData {\n    clientToken: string;\n    enableCheckoutPaywallBanner?: boolean;\n    intent?: 'authorize' | 'order' | 'sale';\n    isCreditEnabled?: boolean;\n    isAcceleratedCheckoutEnabled?: boolean;\n    isFastlaneStylingEnabled?: boolean;\n    isFastlaneEnabled?: boolean;\n    isFastlaneShippingOptionAutoSelectEnabled?: boolean;\n    fastlaneStyles?: FastlaneStylesSettings;\n    isBraintreeAnalyticsV2Enabled?: boolean;\n    shouldRunAcceleratedCheckout?: boolean; // TODO: only for BT AXO A/B testing purposes, hence should be removed after testing\n    paymentButtonStyles?: Record<string, PaypalStyleOptions>;\n    paypalBNPLConfiguration?: PayPalBNPLConfigurationItem[] | null;\n    nonce?: string;\n}\n\nexport interface BraintreePaypalRequest {\n    amount: string | number;\n    billingAgreementDescription?: string;\n    currency?: string;\n    displayName?: string;\n    enableShippingAddress: true;\n    flow: 'checkout' | 'vault';\n    intent?: 'authorize' | 'order' | 'sale';\n    landingPageType?: 'login' | 'billing';\n    locale?: string;\n    offerCredit?: boolean;\n    shippingAddressEditable?: boolean;\n    shippingAddressOverride?: BraintreeShippingAddressOverride;\n    useraction?: 'commit';\n}\n\nexport interface BraintreeShippingAddressOverride {\n    line1: string;\n    line2?: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    countryCode: string;\n    phone?: string;\n    recipientName?: string;\n}\n\nexport interface BraintreeTokenizePayload {\n    nonce: string;\n    type: 'PaypalAccount' | 'VenmoAccount';\n    details: BraintreeTokenizationDetails;\n    creditFinancingOffered?: {\n        totalCost: {\n            value: string;\n            currency: string;\n        };\n        term: number;\n        monthlyPayment: {\n            value: string;\n            currency: string;\n        };\n        totalInsterest: {\n            value: string;\n            currency: string;\n        };\n        payerAcceptance: boolean;\n        cartAmountImmutable: boolean;\n    };\n}\n\nexport type BraintreeFormErrorData = Omit<BraintreeFormFieldState, 'isFocused'>;\n\nexport type BraintreeFormErrorDataKeys =\n    | 'number'\n    | 'expirationDate'\n    | 'expirationMonth'\n    | 'expirationYear'\n    | 'cvv'\n    | 'postalCode';\n\nexport type BraintreeFormErrorsData = Partial<\n    Record<BraintreeFormErrorDataKeys, BraintreeFormErrorData>\n>;\n\n/**\n *\n * Braintree Hosted Fields\n *\n */\nexport type BraintreeHostedFieldsCreator = BraintreeModuleCreator<\n    BraintreeHostedFields,\n    BraintreeHostedFieldsCreatorConfig\n>;\n\nexport interface BraintreeHostedFields {\n    getState(): BraintreeHostedFieldsState;\n    teardown(): Promise<void>;\n    tokenize(\n        options?: BraintreeHostedFieldsTokenizeOptions,\n    ): Promise<BraintreeHostedFieldsTokenizePayload>;\n    on(eventName: string, callback: (event: BraintreeHostedFieldsState) => void): void;\n}\n\nexport interface BraintreeHostedFieldsCreatorConfig extends BraintreeModuleCreatorConfig {\n    fields: {\n        number?: BraintreeHostedFieldOption;\n        expirationDate?: BraintreeHostedFieldOption;\n        expirationMonth?: BraintreeHostedFieldOption;\n        expirationYear?: BraintreeHostedFieldOption;\n        cvv?: BraintreeHostedFieldOption;\n        postalCode?: BraintreeHostedFieldOption;\n        cardholderName?: BraintreeHostedFieldOption;\n    };\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    preventCursorJumps?: boolean;\n}\n\nexport interface BraintreeHostedFieldOption {\n    container: string | HTMLElement;\n    placeholder?: string;\n    type?: string;\n    formatInput?: boolean;\n    maskInput?: boolean | { character?: string; showLastFour?: string };\n    select?: boolean | { options?: string[] };\n    maxCardLength?: number;\n    maxlength?: number;\n    minlength?: number;\n    prefill?: string;\n    rejectUnsupportedCards?: boolean;\n    supportedCardBrands?: { [key: string]: boolean };\n}\n\nexport interface BraintreeHostedFieldsState {\n    cards: BraintreeHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: BraintreeHostedFieldsFieldData;\n        expirationDate?: BraintreeHostedFieldsFieldData;\n        expirationMonth?: BraintreeHostedFieldsFieldData;\n        expirationYear?: BraintreeHostedFieldsFieldData;\n        cvv?: BraintreeHostedFieldsFieldData;\n        postalCode?: BraintreeHostedFieldsFieldData;\n    };\n}\n\nexport interface BraintreeHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface BraintreeHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface BraintreeHostedFieldsTokenizeOptions {\n    vault?: boolean;\n    fieldsToTokenize?: string[];\n    cardholderName?: string;\n    billingAddress?: BraintreeBillingAddressRequestData;\n}\n\nexport interface BraintreeBillingAddressRequestData {\n    postalCode?: string;\n    firstName?: string;\n    lastName?: string;\n    company?: string;\n    streetAddress?: string;\n    extendedAddress?: string;\n    locality?: string;\n    region?: string;\n    countryCodeNumeric?: string;\n    countryCodeAlpha2?: string;\n    countryCodeAlpha3?: string;\n    countryName?: string;\n}\n\nexport interface BraintreeHostedFormError extends BraintreeError {\n    details?: {\n        invalidFieldKeys?: string[];\n    };\n}\n\nexport interface BraintreeFormFieldState {\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface TokenizationPayload {\n    nonce: string;\n    bin: string;\n}\n\n/**\n *\n * Braintree PayPal\n *\n */\nexport type BraintreePaypalCreator = BraintreeModuleCreator<BraintreePaypal>;\n\nexport interface BraintreePaypal {\n    closeWindow(): void;\n    focusWindow(): void;\n    tokenize(options: BraintreePaypalRequest): Promise<BraintreeTokenizePayload>;\n    Buttons?(options: PaypalButtonOptions): PaypalButtonRender;\n}\n\n/**\n * A set of options that are required to support 3D Secure authentication flow.\n *\n * If the customer uses a credit card that has 3D Secure enabled, they will be\n * asked to verify their identity when they pay. The verification is done\n * through a web page via an iframe provided by the card issuer.\n */\n// export interface BraintreeThreeDSecureOptions {\n//     /**\n//      * A callback that gets called when the iframe is ready to be added to the\n//      * current page. It is responsible for determining where the iframe should\n//      * be inserted in the DOM.\n//      *\n//      * @param error - Any error raised during the verification process;\n//      * undefined if there is none.\n//      * @param iframe - The iframe element containing the verification web page\n//      * provided by the card issuer.\n//      * @param cancel - A function, when called, will cancel the verification\n//      * process and remove the iframe.\n//      */\n//     addFrame(\n//         error: Error | undefined,\n//         iframe: HTMLIFrameElement,\n//         cancel: () => Promise<BraintreeVerifyPayload> | undefined,\n//     ): void;\n//\n//     /**\n//      * A callback that gets called when the iframe is about to be removed from\n//      * the current page.\n//      */\n//     removeFrame(): void;\n// }\n\nexport interface BraintreeFormOptions {\n    fields: BraintreeFormFieldsMap | BraintreeStoredCardFieldsMap;\n    styles?: BraintreeFormFieldStylesMap;\n    onBlur?(data: BraintreeFormFieldBlurEventData): void;\n    onCardTypeChange?(data: BraintreeFormFieldCardTypeChangeEventData): void;\n    onFocus?(data: BraintreeFormFieldFocusEventData): void;\n    onValidate?(data: BraintreeFormFieldValidateEventData): void;\n    onEnter?(data: BraintreeFormFieldEnterEventData): void;\n}\n\nexport enum BraintreeFormFieldType {\n    CardCode = 'cardCode',\n    CardCodeVerification = 'cardCodeVerification',\n    CardExpiry = 'cardExpiry',\n    CardName = 'cardName',\n    CardNumber = 'cardNumber',\n    CardNumberVerification = 'cardNumberVerification',\n}\n\nexport interface BraintreeFormFieldsMap {\n    [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardExpiry]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardName]: BraintreeFormFieldOptions;\n    [BraintreeFormFieldType.CardNumber]: BraintreeFormFieldOptions;\n}\n\nexport interface BraintreeStoredCardFieldsMap {\n    [BraintreeFormFieldType.CardCodeVerification]?: BraintreeStoredCardFieldOptions;\n    [BraintreeFormFieldType.CardNumberVerification]?: BraintreeStoredCardFieldOptions;\n}\n\nexport interface BraintreeFormFieldOptions {\n    accessibilityLabel?: string;\n    containerId: string;\n    placeholder?: string;\n}\n\nexport interface BraintreeStoredCardFieldOptions extends BraintreeFormFieldOptions {\n    instrumentId: string;\n}\n\nexport interface BraintreeFormFieldStylesMap {\n    default?: BraintreeFormFieldStyles;\n    error?: BraintreeFormFieldStyles;\n    focus?: BraintreeFormFieldStyles;\n}\n\nexport type BraintreeFormFieldStyles = Partial<\n    Pick<CSSStyleDeclaration, 'color' | 'fontFamily' | 'fontSize' | 'fontWeight'>\n>;\n\nexport interface BraintreeFormFieldKeyboardEventData {\n    fieldType: string;\n    errors?: BraintreeFormErrorsData;\n}\n\nexport type BraintreeFormFieldBlurEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldEnterEventData = BraintreeFormFieldKeyboardEventData;\nexport type BraintreeFormFieldFocusEventData = BraintreeFormFieldKeyboardEventData;\n\nexport interface BraintreeFormFieldCardTypeChangeEventData {\n    cardType?: string;\n}\n\nexport interface BraintreeFormFieldValidateEventData {\n    errors: {\n        [BraintreeFormFieldType.CardCode]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardExpiry]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardName]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumber]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardCodeVerification]?: BraintreeFormFieldValidateErrorData[];\n        [BraintreeFormFieldType.CardNumberVerification]?: BraintreeFormFieldValidateErrorData[];\n    };\n    isValid: boolean;\n}\n\nexport interface BraintreeFormFieldValidateErrorData {\n    fieldType: string;\n    message: string;\n    type: string;\n}\n\n/**\n *\n * Braintree PayPal Checkout\n *\n */\nexport type BraintreePaypalCheckoutCreator = BraintreeModuleCreator<BraintreePaypalCheckout>;\n\nexport interface BraintreePaypalCheckout {\n    loadPayPalSDK(\n        config: BraintreePaypalSdkCreatorConfig,\n        callback: (instance: BraintreePaypalCheckout) => void,\n    ): void;\n    createPayment(options: BraintreePaypalRequest): Promise<string>;\n    teardown(): Promise<void>;\n    tokenizePayment(options: PaypalAuthorizeData): Promise<BraintreeTokenizePayload>;\n}\n\nexport interface BraintreePaypalSdkCreatorConfig {\n    components?: string;\n    currency?: string;\n    intent?: string;\n    isCreditEnabled?: boolean;\n    commit?: boolean;\n}\n\n/**\n *\n * Braintree Venmo\n *\n */\nexport type BraintreeVenmoCheckoutCreator = BraintreeModuleCreator<\n    BraintreeVenmoCheckout,\n    BraintreeVenmoCreatorConfig\n>;\n\nexport interface BraintreeVenmoCheckout extends BraintreeModule {\n    tokenize(callback: (error: BraintreeError, payload: BraintreeTokenizePayload) => unknown): void;\n    isBrowserSupported(): boolean;\n}\n\nexport interface BraintreeVenmoCreatorConfig extends BraintreeModuleCreatorConfig {\n    allowDesktop?: boolean;\n    paymentMethodUsage?: string;\n}\n\n/**\n *\n * Braintree Visa Checkout\n *\n */\nexport type BraintreeVisaCheckoutCreator = BraintreeModuleCreator<BraintreeVisaCheckout>;\n\nexport interface BraintreeVisaCheckout extends BraintreeModule {\n    tokenize(payment: VisaCheckoutPaymentSuccessPayload): Promise<VisaCheckoutTokenizedPayload>;\n    createInitOptions(options: Partial<VisaCheckoutInitOptions>): VisaCheckoutInitOptions;\n}\n\n/**\n *\n * Braintree BNPL Configurator related types\n *\n */\nexport interface PayPalBNPLConfigurationItem {\n    id: string;\n    name: string;\n    status: boolean;\n    styles: Record<string, string>;\n}\n\n/**\n *\n * Braintree Local Methods\n *\n */\nexport interface BraintreeLocalPaymentConfig {\n    paymentType: string;\n    amount: number;\n    fallback: {\n        url: string;\n        buttonText: string;\n    };\n    currencyCode: string;\n    shippingAddressRequired: boolean;\n    email: string;\n    givenName: string;\n    surname: string;\n    address: {\n        countryCode: string;\n    };\n    onPaymentStart(data: BraintreeLPMPaymentStartData, start: () => Promise<void>): Promise<void>;\n}\n\nexport interface BraintreeLPMStartPaymentError {\n    code: string;\n}\n\nexport interface BraintreeLPMPaymentStartData {\n    paymentId: string;\n}\n\nexport interface BraintreeLocalPaymentsPayload {\n    nonce: string;\n}\n\nexport interface BraintreeLocalPayment extends BraintreeModule {\n    startPayment(\n        config: BraintreeLocalPaymentConfig,\n        callback: (\n            startPaymentError: BraintreeLPMStartPaymentError | undefined,\n            payload: BraintreeLocalPaymentsPayload,\n        ) => Promise<void>,\n    ): void;\n}\n\n/**\n *\n * Other\n *\n */\nexport interface BraintreeHostWindow extends BraintreeWindow {\n    braintree?: BraintreeSDK;\n    paypal?: PaypalSDK;\n    V?: VisaCheckoutSDK;\n}\n","import {\n    NotInitializedError,\n    NotInitializedErrorType,\n    UnsupportedBrowserError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeDataCollectorCreatorConfig,\n    BraintreeError,\n    BraintreeErrorCode,\n    BraintreeGooglePayment,\n    BraintreeLocalPayment,\n    BraintreeModule,\n    BraintreeThreeDSecure,\n    BraintreeUsBankAccount,\n    BraintreeVenmoCheckout,\n    BraintreeVisaCheckout,\n} from './types';\nimport isBraintreeError from './utils/is-braintree-error';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeSdk {\n    private braintreeVenmo?: BraintreeVenmoCheckout;\n    private braintreeLocalPayment?: BraintreeLocalPayment;\n    private client?: BraintreeClient;\n    private clientToken?: string;\n    private dataCollector?: BraintreeDataCollector;\n    private googlePayment?: BraintreeGooglePayment;\n    private threeDS?: BraintreeThreeDSecure;\n    private visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private visaCheckoutSDK?: VisaCheckoutSDK;\n    private usBankAccount?: BraintreeUsBankAccount;\n\n    constructor(private braintreeScriptLoader: BraintreeScriptLoader) {}\n\n    initialize(clientToken: string): void {\n        this.setClientToken(clientToken);\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.teardownModule(this.dataCollector);\n\n        this.dataCollector = undefined;\n    }\n\n    /**\n     *\n     * Braintree Client\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_client.html\n     *\n     */\n    async getClient(): Promise<BraintreeClient> {\n        if (!this.client) {\n            const clientToken = this.getClientTokenOrThrow();\n            const clientCreator = await this.braintreeScriptLoader.loadClient();\n\n            this.client = await clientCreator.create({ authorization: clientToken });\n        }\n\n        return this.client;\n    }\n\n    /**\n     *\n     * Braintree Data collector\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_data-collector.html\n     *\n     */\n    async getDataCollectorOrThrow(\n        options?: Partial<BraintreeDataCollectorCreatorConfig>,\n    ): Promise<BraintreeDataCollector> {\n        const emptyDataCollector = {\n            deviceData: undefined,\n            teardown: () => Promise.resolve(),\n        };\n\n        if (!this.dataCollector) {\n            try {\n                const client = await this.getClient();\n                const dataCollector = await this.braintreeScriptLoader.loadDataCollector();\n\n                const dataCollectorConfig: BraintreeDataCollectorCreatorConfig = {\n                    client,\n                    kount: true,\n                    ...options,\n                };\n\n                this.dataCollector = await dataCollector.create(dataCollectorConfig);\n            } catch (error) {\n                if (isBraintreeError(error) && error.code === BraintreeErrorCode.KountNotEnabled) {\n                    return emptyDataCollector;\n                }\n\n                throw error;\n            }\n        }\n\n        return this.dataCollector;\n    }\n\n    /**\n     *\n     * Braintree Google Payment\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_google-payment.html\n     *\n     */\n    async getBraintreeGooglePayment(): Promise<BraintreeGooglePayment> {\n        if (!this.googlePayment) {\n            const [client, braintreeGooglePayment] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadGooglePayment(),\n            ]);\n\n            this.googlePayment = await braintreeGooglePayment.create({ client });\n        }\n\n        return this.googlePayment;\n    }\n\n    /**\n     *\n     * Braintree 3DS\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_three-d-secure.html\n     *\n     */\n    async getBraintreeThreeDS(): Promise<BraintreeThreeDSecure> {\n        if (!this.threeDS) {\n            const [client, threeDSecure] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.load3DS(),\n            ]);\n\n            this.threeDS = await threeDSecure.create({ client, version: 2 });\n        }\n\n        return this.threeDS;\n    }\n\n    /**\n     *\n     * Braintree Local Payment Methods\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_local-payment.html\n     *\n     */\n    async getBraintreeLocalPayment(\n        merchantAccountId: string,\n    ): Promise<BraintreeLocalPayment | undefined> {\n        if (!this.braintreeLocalPayment) {\n            const [client, localPaymentCreator] = await Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadLocalPayment(),\n            ]);\n\n            this.braintreeLocalPayment = await new Promise(\n                (\n                    resolve: (braintreeLocalPayment: BraintreeLocalPayment) => void,\n                    reject: (error: BraintreeError) => void,\n                ) => {\n                    void localPaymentCreator.create(\n                        { client, merchantAccountId },\n                        (\n                            error: BraintreeError | undefined,\n                            braintreeLocalPayment: BraintreeLocalPayment,\n                        ) => {\n                            if (error) {\n                                reject(error);\n                            }\n\n                            resolve(braintreeLocalPayment);\n                        },\n                    );\n                },\n            );\n        }\n\n        return this.braintreeLocalPayment;\n    }\n\n    /**\n     *\n     * Braintree UsBankAccount\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_us-bank-account.html\n     *\n     */\n    async getUsBankAccount() {\n        if (!this.usBankAccount) {\n            const client = await this.getClient();\n            const usBankAccount = await this.braintreeScriptLoader.loadUsBankAccount();\n\n            this.usBankAccount = await usBankAccount.create({ client });\n        }\n\n        return this.usBankAccount;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout\n     * braintree doc: https://braintree.github.io/braintree-web/current/module-braintree-web_visa-checkout.html\n     *\n     */\n    getBraintreeVisaCheckout() {\n        if (!this.visaCheckout) {\n            this.visaCheckout = Promise.all([\n                this.getClient(),\n                this.braintreeScriptLoader.loadVisaCheckout(),\n            ]).then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this.visaCheckout;\n    }\n\n    /**\n     *\n     * Braintree Visa Checkout SDK\n     * visa checkout doc: https://developer.visa.com/capabilities/visa_checkout/docs-how-to\n     *\n     */\n    async getVisaCheckoutSdk(testMode?: boolean) {\n        if (!this.visaCheckoutSDK) {\n            this.visaCheckoutSDK = await this.braintreeScriptLoader.loadVisaCheckoutSdk(testMode);\n        }\n\n        return this.visaCheckoutSDK;\n    }\n\n    /**\n     *\n     * Braintree Venmo Checkout\n     * braintree venmo checkout doc: https://braintree.github.io/braintree-web/current/module-braintree-web_venmo.html\n     *\n     */\n    async getVenmoCheckoutOrThrow() {\n        if (!this.braintreeVenmo) {\n            const client = await this.getClient();\n            const venmoCheckout = await this.braintreeScriptLoader.loadVenmoCheckout();\n\n            const venmoCheckoutConfig = {\n                client,\n                allowDesktop: true,\n                paymentMethodUsage: 'multi_use',\n            };\n\n            const braintreeVenmoCheckout = await venmoCheckout.create(venmoCheckoutConfig);\n\n            if (braintreeVenmoCheckout.isBrowserSupported()) {\n                this.braintreeVenmo = braintreeVenmoCheckout;\n            } else {\n                throw new UnsupportedBrowserError();\n            }\n        }\n\n        return this.braintreeVenmo;\n    }\n\n    /**\n     *\n     * Private methods\n     *\n     */\n    private setClientToken(clientToken: string): void {\n        this.clientToken = clientToken;\n    }\n\n    private getClientTokenOrThrow(): string {\n        if (!this.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.clientToken;\n    }\n\n    private teardownModule(module?: BraintreeModule): Promise<void> {\n        return module ? module.teardown() : Promise.resolve();\n    }\n}\n","import { BraintreeError } from '../types';\n\nexport default function isBraintreeError(error: unknown): error is BraintreeError {\n    return Boolean(\n        typeof error === 'object' &&\n            error !== null &&\n            ('type' in error || 'message' in error || 'code' in error),\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { BraintreeModuleName } from './braintree';\nimport {\n    BRAINTREE_SDK_DEFAULT_VERSION,\n    BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION,\n    BRAINTREE_SDK_STABLE_VERSION,\n} from './braintree-sdk-verison';\n\nexport const BRAINTREE_SDK_SCRIPTS_INTEGRITY = {\n    [BRAINTREE_SDK_STABLE_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O',\n        [BraintreeModuleName.Paypal]:\n            'sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT',\n        [BraintreeModuleName.Venmo]:\n            'sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa',\n    },\n    [BRAINTREE_SDK_DEFAULT_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/',\n        [BraintreeModuleName.Paypal]:\n            'sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS',\n        [BraintreeModuleName.Venmo]:\n            'sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y',\n    },\n    [BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION]: {\n        [BraintreeModuleName.Client]:\n            'sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq',\n        [BraintreeModuleName.PaypalCheckout]:\n            'sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh',\n        [BraintreeModuleName.Paypal]:\n            'sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH',\n        [BraintreeModuleName.LocalPayment]:\n            'sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC',\n        [BraintreeModuleName.DataCollector]:\n            'sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc',\n        [BraintreeModuleName.UsBankAccount]:\n            'sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F',\n        [BraintreeModuleName.GooglePayment]:\n            'sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i',\n        [BraintreeModuleName.ThreeDSecure]:\n            'sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D',\n        [BraintreeModuleName.VisaCheckout]:\n            'sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv',\n        [BraintreeModuleName.Venmo]:\n            'sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz',\n        [BraintreeModuleName.HostedFields]:\n            'sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z',\n        [BraintreeModuleName.Fastlane]:\n            'sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr',\n    },\n};\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","export enum ApplePayGatewayType {\n    BRAINTREE = 'braintree',\n    BRAINTREE_FASTLANE = 'braintreeacceleratedcheckout',\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\nimport BraintreeSDKVersionManager from './braintree-sdk-version-manager';\nimport isManageableBraintreeSDKVersion from './isManageableBraintreeSDKVersion';\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeFastlaneCreator,\n    BraintreeGooglePaymentCreator,\n    BraintreeHostedFieldsCreator,\n    BraintreeHostWindow,\n    BraintreeLocalPaymentCreator,\n    BraintreeModuleCreators,\n    BraintreeModuleName,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeUsBankAccountCreator,\n    BraintreeVenmoCheckoutCreator,\n    BraintreeVisaCheckoutCreator,\n} from './types';\nimport { VisaCheckoutSDK } from './visacheckout';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private braintreeHostWindow: BraintreeHostWindow,\n        private braintreeSDKVersionManager: BraintreeSDKVersionManager,\n    ) {}\n\n    async loadClient(): Promise<BraintreeClientCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeClientCreator>(\n            BraintreeModuleName.Client,\n            'client.min.js',\n        );\n    }\n\n    async loadFastlane(): Promise<BraintreeFastlaneCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeFastlaneCreator>(\n            BraintreeModuleName.Fastlane,\n            'fastlane.min.js',\n        );\n    }\n\n    async loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCheckoutCreator>(\n            BraintreeModuleName.PaypalCheckout,\n            'paypal-checkout.min.js',\n        );\n    }\n\n    async loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreePaypalCreator>(\n            BraintreeModuleName.Paypal,\n            'paypal.min.js',\n        );\n    }\n\n    async loadLocalPayment(): Promise<BraintreeLocalPaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeLocalPaymentCreator>(\n            BraintreeModuleName.LocalPayment,\n            'local-payment.min.js',\n        );\n    }\n\n    async loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeDataCollectorCreator>(\n            BraintreeModuleName.DataCollector,\n            'data-collector.min.js',\n        );\n    }\n\n    async loadUsBankAccount(): Promise<BraintreeUsBankAccountCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeUsBankAccountCreator>(\n            BraintreeModuleName.UsBankAccount,\n            'us-bank-account.min.js',\n        );\n    }\n\n    async loadGooglePayment(): Promise<BraintreeGooglePaymentCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeGooglePaymentCreator>(\n            BraintreeModuleName.GooglePayment,\n            'google-payment.min.js',\n        );\n    }\n\n    async load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeThreeDSecureCreator>(\n            BraintreeModuleName.ThreeDSecure,\n            'three-d-secure.min.js',\n        );\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVisaCheckoutCreator>(\n            BraintreeModuleName.VisaCheckout,\n            'visa-checkout.min.js',\n        );\n    }\n\n    loadVenmoCheckout(): Promise<BraintreeVenmoCheckoutCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeVenmoCheckoutCreator>(\n            BraintreeModuleName.Venmo,\n            'venmo.min.js',\n        );\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        return this.loadBraintreeModuleOrThrow<BraintreeHostedFieldsCreator>(\n            BraintreeModuleName.HostedFields,\n            'hosted-fields.min.js',\n        );\n    }\n\n    async loadVisaCheckoutSdk(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        if (this.braintreeHostWindow.V) {\n            return this.braintreeHostWindow.V;\n        }\n\n        const hash = testMode\n            ? 'sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm'\n            : 'sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6';\n\n        return this.scriptLoader\n            .loadScript(\n                `//${\n                    testMode ? 'sandbox-' : ''\n                }assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,\n                {\n                    async: true,\n                    attributes: {\n                        integrity: hash,\n                        crossorigin: 'anonymous',\n                    },\n                },\n            )\n            .then(() => {\n                if (!this.braintreeHostWindow.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this.braintreeHostWindow.V;\n            });\n    }\n\n    private async loadBraintreeModuleOrThrow<T extends BraintreeModuleCreators>(\n        braintreeModuleName: BraintreeModuleName,\n        fileName: string,\n    ): Promise<T> {\n        let module = this.getBraintreeModule(braintreeModuleName);\n\n        if (module) {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return module as T;\n        }\n\n        const braintreeSdkVersion = this.braintreeSDKVersionManager.getSDKVersion();\n\n        const scriptPath = `//js.braintreegateway.com/web/${braintreeSdkVersion}/js/${fileName}`;\n\n        const integrity = isManageableBraintreeSDKVersion(braintreeSdkVersion)\n            ? this.getIntegrityValuesByModuleName(braintreeModuleName, braintreeSdkVersion)\n            : undefined;\n\n        await this.scriptLoader.loadScript(\n            scriptPath,\n            integrity\n                ? {\n                      async: true,\n                      attributes: {\n                          integrity,\n                          crossorigin: 'anonymous',\n                      },\n                  }\n                : undefined,\n        );\n\n        module = this.getBraintreeModule(braintreeModuleName);\n\n        if (!module) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return module as T;\n    }\n\n    private getBraintreeModule(\n        braintreeModuleName: BraintreeModuleName,\n    ): BraintreeModuleCreators | undefined {\n        return this.braintreeHostWindow.braintree?.[braintreeModuleName];\n    }\n\n    private getIntegrityValuesByModuleName(\n        moduleName: BraintreeModuleName,\n        version: keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY,\n    ): string {\n        const integrity = BRAINTREE_SDK_SCRIPTS_INTEGRITY[version][moduleName];\n\n        if (!integrity) {\n            throw new Error('Unexpected fileName value');\n        }\n\n        return integrity;\n    }\n}\n","import { BRAINTREE_SDK_SCRIPTS_INTEGRITY } from './braintree-sdk-scripts-integrity';\n\nfunction isManageableBraintreeSDKVersion(\n    version: string,\n): version is keyof typeof BRAINTREE_SDK_SCRIPTS_INTEGRITY {\n    return version in BRAINTREE_SDK_SCRIPTS_INTEGRITY;\n}\n\nexport default isManageableBraintreeSDKVersion;\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    BuyNowCartCreationError,\n    Cart,\n    Checkout,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport ApplePayButtonInitializeOptions, {\n    WithApplePayButtonInitializeOptions,\n} from './apple-pay-button-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nexport enum ButtonStyleOption {\n    Black = 'black',\n    White = 'white',\n    WhiteBorder = 'white-border',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nconst getButtonStyle = (buttonStyle?: ButtonStyleOption): string => {\n    switch (buttonStyle) {\n        case ButtonStyleOption.White:\n            return 'white';\n\n        case ButtonStyleOption.WhiteBorder:\n            return 'white-outline';\n\n        case ButtonStyleOption.Black:\n        default:\n            return 'black';\n    }\n};\n\nexport default class ApplePayButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _requiresShipping?: boolean;\n    private _buyNowInitializeOptions?: ApplePayButtonInitializeOptions['buyNowInitializeOptions'];\n    private _onAuthorizeCallback = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithApplePayButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        await this._applePayScriptLoader.loadSdk();\n\n        const { onPaymentAuthorize, buyNowInitializeOptions, requiresShipping } = applepay;\n\n        this._requiresShipping = requiresShipping;\n\n        this._buyNowInitializeOptions = buyNowInitializeOptions;\n\n        this._onAuthorizeCallback = onPaymentAuthorize;\n\n        if (!buyNowInitializeOptions) {\n            await this._paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const state = this._paymentIntegrationService.getState();\n\n        this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const cart = state.getCart();\n\n        if (cart) {\n            await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n        }\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n\n        this._applePayButton = this._createButton(\n            containerId,\n            this._paymentMethod.initializationData?.styleOption,\n        );\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string, styleOption?: ButtonStyleOption): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create wallet button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement(styleOption);\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(styleOption?: ButtonStyleOption): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', getButtonStyle(styleOption));\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 40px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private async _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this._buyNowInitializeOptions &&\n            typeof this._buyNowInitializeOptions.getBuyNowCartRequestBody === 'function'\n        ) {\n            const {\n                countryCode,\n                currencyCode,\n                merchantCapabilities,\n                supportedNetworks,\n                storeName,\n            } = this._paymentMethod.initializationData;\n\n            const request = this._getRequestWithEmptyTotal(\n                countryCode,\n                currencyCode,\n                supportedNetworks,\n                merchantCapabilities,\n            );\n\n            if (this._requiresShipping) {\n                request.requiredShippingContactFields?.push('postalAddress');\n            }\n\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(applePaySession, this._paymentMethod, storeName);\n\n            applePaySession.begin();\n        } else {\n            const state = this._paymentIntegrationService.getState();\n            const cart = state.getCartOrThrow();\n            const config = state.getStoreConfigOrThrow();\n            const checkout = state.getCheckoutOrThrow();\n            const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n            const applePaySession = this._sessionFactory.create(request);\n\n            this._handleApplePayEvents(\n                applePaySession,\n                this._paymentMethod,\n                config.storeProfile.storeName,\n            );\n\n            applePaySession.begin();\n        }\n    }\n\n    private _getRequestWithEmptyTotal(\n        countryCode: string,\n        currencyCode: string,\n        supportedNetworks: string[],\n        merchantCapabilities: ApplePayJS.ApplePayMerchantCapability[],\n    ): ApplePayJS.ApplePayPaymentRequest {\n        return {\n            countryCode,\n            currencyCode,\n            supportedNetworks,\n            merchantCapabilities,\n            total: { label: '', amount: '0', type: 'pending' },\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n        };\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        storeName: string,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (error) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        if (this._buyNowInitializeOptions && !this._requiresShipping) {\n            applePaySession.onpaymentmethodselected = async () => {\n                await this._createBuyNowCart();\n                this._handlePaymentMethodSelected(applePaySession);\n            };\n        }\n\n        applePaySession.onshippingcontactselected = async (event) => {\n            if (this._buyNowInitializeOptions && this._requiresShipping) {\n                await this._createBuyNowCart();\n            }\n\n            await this._handleShippingContactSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.onshippingmethodselected = async (event) => {\n            await this._handleShippingMethodSelected(applePaySession, storeName, event);\n        };\n\n        applePaySession.oncancel = async () => {\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                throw new PaymentMethodCancelledError();\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _createBuyNowCart() {\n        try {\n            const cartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n            if (!cartRequestBody) {\n                throw new MissingDataError(MissingDataErrorType.MissingCart);\n            }\n\n            const buyNowCart = await this._paymentIntegrationService.createBuyNowCart(\n                cartRequestBody,\n            );\n\n            await this._paymentIntegrationService.loadCheckout(buyNowCart.id);\n\n            const state = this._paymentIntegrationService.getState();\n            const { shouldExecuteSpamCheck } = state.getCheckoutOrThrow();\n\n            if (shouldExecuteSpamCheck) {\n                await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n            }\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private _handlePaymentMethodSelected(applePaySession: ApplePaySession) {\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n\n        delete request.total.type;\n\n        applePaySession.completePaymentMethodSelection({\n            newTotal: request.total,\n            newLineItems: request.lineItems,\n        });\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping address update failed');\n        }\n\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            throw new Error('Shipping options update failed');\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        storeName: string,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n\n            throw new Error('Shipping option selection update failed.');\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n            throw new Error('Payment cannot complete');\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","interface ApplePayWindow extends Window {\n    ApplePaySession: ApplePaySession;\n}\n\nfunction isApplePayWindow(window: Window): window is ApplePayWindow {\n    return 'ApplePaySession' in window;\n}\n\nexport function assertApplePayWindow(window: Window): asserts window is ApplePayWindow {\n    if (!isApplePayWindow(window)) {\n        throw new Error('Apple pay is not supported');\n    }\n}\n\nexport default class ApplePaySessionFactory {\n    create(request: ApplePayJS.ApplePayPaymentRequest): ApplePaySession {\n        assertApplePayWindow(window);\n\n        return new ApplePaySession(1, request);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { assertApplePayWindow } from './apple-pay-session-factory';\n\nexport default class ApplePayScriptLoader {\n    private sdkVersion = '1.latest';\n\n    constructor(private scriptLoader: ScriptLoader) {}\n\n    async loadSdk() {\n        await this.scriptLoader.loadScript(\n            `https://applepay.cdn-apple.com/jsapi/${this.sdkVersion}/apple-pay-sdk.js`,\n        );\n\n        assertApplePayWindow(window);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayButtonStrategy from './apple-pay-button-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayButtonStrategy: CheckoutButtonStrategyFactory<ApplePayButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayButtonStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayButtonStrategy, [{ id: 'applepay' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    Payment,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationSelectors,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayPaymentInitializeOptions } from './apple-pay-payment-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\ninterface ApplePayPromise {\n    resolve(): void;\n    reject(reason?: Error): void;\n}\n\nenum DefaultLabels {\n    Shipping = 'Shipping',\n    Subtotal = 'Subtotal',\n    StoreCredit = 'Store Credit',\n}\n\nexport default class ApplePayPaymentStrategy implements PaymentStrategy {\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _storeCreditLabel: string = DefaultLabels.StoreCredit;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithApplePayPaymentInitializeOptions,\n    ): Promise<void> {\n        if (!options?.methodId) {\n            throw new InvalidArgumentError(\n                'Unable to submit payment because \"options.methodId\" argument is not provided.',\n            );\n        }\n\n        const { methodId } = options;\n\n        await this._applePayScriptLoader.loadSdk();\n\n        this._shippingLabel = options.applepay?.shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = options.applepay?.subtotalLabel || DefaultLabels.Subtotal;\n        this._storeCreditLabel = options.applepay?.storeCreditLabel || DefaultLabels.StoreCredit;\n\n        const state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n\n        const paymentMethod: PaymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n        const state = this._paymentIntegrationService.getState();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId);\n\n        const request = this._getBaseRequest(state, paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        await this._paymentIntegrationService.submitOrder(\n            {\n                useStoreCredit: payload.useStoreCredit,\n            },\n            options,\n        );\n\n        applePaySession.begin();\n\n        return new Promise((resolve, reject) => {\n            this._handleApplePayEvents(applePaySession, paymentMethod, {\n                resolve,\n                reject,\n            });\n        });\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _getBaseRequest(\n        state: PaymentIntegrationSelectors,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const checkout = state.getCheckoutOrThrow();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const { grandTotal, isStoreCreditApplied, outstandingBalance } = checkout;\n\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        if (isStoreCreditApplied) {\n            const { storeCredit } = state.getCustomerOrThrow();\n\n            lineItems.push({\n                label: this._storeCreditLabel,\n                amount: `-${Math.min(grandTotal, storeCredit).toFixed(decimalPlaces)}`,\n            });\n        }\n\n        return {\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems,\n            total: {\n                label: storeName,\n                amount: `${outstandingBalance.toFixed(decimalPlaces)}`,\n                type: 'final',\n            },\n        };\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                throw new Error('Merchant validation failed');\n            }\n        };\n\n        applePaySession.oncancel = async () =>\n            promise.reject(new PaymentMethodCancelledError('Continue with applepay'));\n\n        applePaySession.onpaymentauthorized = (event: ApplePayJS.ApplePayPaymentAuthorizedEvent) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod, promise);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        promise: ApplePayPromise,\n    ) {\n        const { token } = event.payment;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        try {\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return promise.resolve();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return promise.reject(\n                new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n            );\n        }\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        const state = this._paymentIntegrationService.getState();\n        let braintreePaymentMethod =\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE_FASTLANE) ||\n            state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (!braintreePaymentMethod) {\n            await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n            braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n        }\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayPaymentStrategy from './apple-pay-payment-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayPaymentStrategy: PaymentStrategyFactory<ApplePayPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayPaymentStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayPaymentStrategy, [{ id: 'applepay' }]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { noop } from 'lodash';\n\nimport { BraintreeSdk } from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    AddressRequestBody,\n    Cart,\n    Checkout,\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError,\n    Payment,\n    PaymentIntegrationService,\n    PaymentMethod,\n    PaymentMethodCancelledError,\n    ShippingOption,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { ApplePayGatewayType } from './apple-pay';\nimport { WithApplePayCustomerInitializeOptions } from './apple-pay-customer-initialize-options';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst validationEndpoint = (bigPayEndpoint: string) =>\n    `${bigPayEndpoint}/api/public/v1/payments/applepay/validate_merchant`;\n\nenum DefaultLabels {\n    Subtotal = 'Subtotal',\n    Shipping = 'Shipping',\n}\n\nfunction isShippingOptions(options: ShippingOption[] | undefined): options is ShippingOption[] {\n    return options instanceof Array;\n}\n\nexport default class ApplePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _applePayButton?: HTMLElement;\n    private _onAuthorizeCallback = noop;\n    private _onError = noop;\n    private _onClick = noop;\n    private _subTotalLabel: string = DefaultLabels.Subtotal;\n    private _shippingLabel: string = DefaultLabels.Shipping;\n    private _hasApplePaySession = false;\n\n    constructor(\n        private _requestSender: RequestSender,\n        private _paymentIntegrationService: PaymentIntegrationService,\n        private _sessionFactory: ApplePaySessionFactory,\n        private _braintreeSdk: BraintreeSdk,\n        private _applePayScriptLoader: ApplePayScriptLoader,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithApplePayCustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, applepay } = options;\n\n        if (!methodId || !applepay) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            container,\n            shippingLabel,\n            subtotalLabel,\n            onError = noop,\n            onClick = noop,\n            onPaymentAuthorize,\n        } = applepay;\n\n        this._shippingLabel = shippingLabel || DefaultLabels.Shipping;\n        this._subTotalLabel = subtotalLabel || DefaultLabels.Subtotal;\n        this._onAuthorizeCallback = onPaymentAuthorize;\n        this._onError = onError;\n        this._onClick = onClick;\n\n        let state = this._paymentIntegrationService.getState();\n\n        await this._applePayScriptLoader.loadSdk();\n\n        try {\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            state = await this._paymentIntegrationService.loadPaymentMethod(methodId);\n            this._paymentMethod = state.getPaymentMethodOrThrow(methodId);\n        }\n\n        await this._paymentIntegrationService.verifyCheckoutSpamProtection();\n\n        this._applePayButton = this._createButton(container);\n        this._applePayButton.addEventListener('click', this._handleWalletButtonClick.bind(this));\n\n        if (this._paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            await this._initializeBraintreeSdk();\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Apple, the shopper must click on \"Apple Pay\" button.',\n        );\n    }\n\n    signOut(): Promise<void> {\n        throw new NotImplementedError('Need to do signout via apple.');\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n\n    private _createButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError(\n                'Unable to create sign-in button without valid container ID.',\n            );\n        }\n\n        const applePayButton = this._createApplePayButtonElement();\n\n        container.appendChild(applePayButton);\n\n        return applePayButton;\n    }\n\n    private _createApplePayButtonElement(): HTMLElement {\n        const applePayButton = document.createElement('apple-pay-button');\n\n        applePayButton.setAttribute('buttonstyle', 'black');\n        applePayButton.setAttribute('type', 'plain');\n        applePayButton.setAttribute(\n            'style',\n            '--apple-pay-button-width: 100%; --apple-pay-button-height: 36px; --apple-pay-button-border-radius: 4px;',\n        );\n\n        return applePayButton;\n    }\n\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (this._hasApplePaySession) {\n            return;\n        }\n\n        this._onClick();\n\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const config = state.getStoreConfigOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const request = this._getBaseRequest(cart, checkout, config, this._paymentMethod);\n        const applePaySession = this._sessionFactory.create(request);\n\n        this._handleApplePayEvents(applePaySession, this._paymentMethod, config);\n\n        applePaySession.begin();\n        this._hasApplePaySession = true;\n    }\n\n    private _getBaseRequest(\n        cart: Cart,\n        checkout: Checkout,\n        config: StoreConfig,\n        paymentMethod: PaymentMethod,\n    ): ApplePayJS.ApplePayPaymentRequest {\n        const {\n            storeProfile: { storeCountryCode, storeName },\n        } = config;\n        const {\n            currency: { code, decimalPlaces },\n        } = cart;\n\n        const {\n            initializationData: { merchantCapabilities, supportedNetworks },\n        } = paymentMethod;\n\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n        const total: ApplePayJS.ApplePayLineItem = requiresShipping\n            ? {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'pending',\n              }\n            : {\n                  label: storeName,\n                  amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                  type: 'final',\n              };\n\n        const request: ApplePayJS.ApplePayPaymentRequest = {\n            requiredBillingContactFields: ['postalAddress'],\n            requiredShippingContactFields: ['email', 'phone'],\n            countryCode: storeCountryCode,\n            currencyCode: code,\n            merchantCapabilities,\n            supportedNetworks,\n            lineItems: [],\n            total,\n        };\n\n        if (requiresShipping) {\n            request.requiredShippingContactFields?.push('postalAddress');\n        } else {\n            const lineItems: ApplePayJS.ApplePayLineItem[] = [\n                {\n                    label: this._subTotalLabel,\n                    amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n                },\n            ];\n\n            checkout.taxes.forEach((tax) =>\n                lineItems.push({\n                    label: tax.name,\n                    amount: `${tax.amount.toFixed(decimalPlaces)}`,\n                }),\n            );\n\n            request.lineItems = lineItems;\n        }\n\n        return request;\n    }\n\n    private _handleApplePayEvents(\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n        config: StoreConfig,\n    ) {\n        applePaySession.onvalidatemerchant = async (event) => {\n            try {\n                const { body: merchantSession } = await this._onValidateMerchant(\n                    paymentMethod,\n                    event,\n                );\n\n                applePaySession.completeMerchantValidation(merchantSession);\n            } catch (err) {\n                this._onError(err);\n            }\n        };\n\n        applePaySession.onshippingcontactselected = async (event) =>\n            this._handleShippingContactSelected(applePaySession, config, event);\n\n        applePaySession.onshippingmethodselected = async (event) =>\n            this._handleShippingMethodSelected(applePaySession, config, event);\n\n        applePaySession.oncancel = async () => {\n            this._hasApplePaySession = false;\n\n            try {\n                const url = `/remote-checkout/${paymentMethod.id}/signout`;\n\n                await this._requestSender.get(url);\n\n                return await this._paymentIntegrationService.loadCheckout();\n            } catch (error) {\n                return this._onError(new PaymentMethodCancelledError());\n            }\n        };\n\n        applePaySession.onpaymentauthorized = async (event) =>\n            this._onPaymentAuthorized(event, applePaySession, paymentMethod);\n    }\n\n    private async _handleShippingContactSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingContactSelectedEvent,\n    ) {\n        const shippingAddress = this._transformContactToAddress(event.shippingContact);\n\n        try {\n            await this._paymentIntegrationService.updateShippingAddress(shippingAddress);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const {\n            storeProfile: { storeName },\n        } = config;\n        let state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        let checkout = state.getCheckoutOrThrow();\n        const selectionShippingOptionId = checkout.consignments[0].selectedShippingOption?.id;\n        const availableOptions = checkout.consignments[0].availableShippingOptions;\n        const selectedOption = availableOptions?.find(({ id }) => id === selectionShippingOptionId);\n        const unselectedOptions = availableOptions?.filter(\n            (option) => option.id !== selectionShippingOptionId,\n        );\n        const shippingOptions: ApplePayJS.ApplePayShippingMethod[] = selectedOption\n            ? [\n                  {\n                      label: selectedOption.description,\n                      amount: `${selectedOption.cost.toFixed(decimalPlaces)}`,\n                      detail: selectedOption.additionalDescription,\n                      identifier: selectedOption.id,\n                  },\n              ]\n            : [];\n\n        if (unselectedOptions) {\n            [\n                ...unselectedOptions.filter((option) => option.isRecommended),\n                ...unselectedOptions.filter((option) => !option.isRecommended),\n            ].forEach((option) =>\n                shippingOptions.push({\n                    label: option.description,\n                    amount: `${option.cost.toFixed(decimalPlaces)}`,\n                    detail: option.additionalDescription,\n                    identifier: option.id,\n                }),\n            );\n        }\n\n        if (!isShippingOptions(availableOptions)) {\n            throw new Error('Shipping options not available.');\n        }\n\n        if (availableOptions.length === 0) {\n            applePaySession.completeShippingContactSelection(\n                ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS,\n                [],\n                {\n                    type: 'pending',\n                    label: storeName,\n                    amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n                },\n                [],\n            );\n\n            return;\n        }\n\n        const recommendedOption = availableOptions.find((option) => option.isRecommended);\n\n        const optionId = recommendedOption ? recommendedOption.id : availableOptions[0].id;\n        const selectedOptionId = selectedOption ? selectedOption.id : optionId;\n\n        try {\n            await this._updateShippingOption(selectedOptionId);\n        } catch (error) {\n            return this._onError(error);\n        }\n\n        state = this._paymentIntegrationService.getState();\n        checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingContactSelection({\n            newShippingMethods: shippingOptions,\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private async _handleShippingMethodSelected(\n        applePaySession: ApplePaySession,\n        config: StoreConfig,\n        event: ApplePayJS.ApplePayShippingMethodSelectedEvent,\n    ) {\n        const {\n            storeProfile: { storeName },\n        } = config;\n        const {\n            shippingMethod: { identifier: optionId },\n        } = event;\n\n        try {\n            await this._updateShippingOption(optionId);\n        } catch (error) {\n            applePaySession.abort();\n            this._hasApplePaySession = false;\n\n            return this._onError(error);\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const {\n            currency: { decimalPlaces },\n        } = state.getCartOrThrow();\n        const checkout = state.getCheckoutOrThrow();\n\n        applePaySession.completeShippingMethodSelection({\n            newTotal: {\n                type: 'final',\n                label: storeName,\n                amount: `${checkout.grandTotal.toFixed(decimalPlaces)}`,\n            },\n            newLineItems: this._getUpdatedLineItems(checkout, decimalPlaces),\n        });\n    }\n\n    private _getUpdatedLineItems(\n        checkout: Checkout,\n        decimalPlaces: number,\n    ): ApplePayJS.ApplePayLineItem[] {\n        const lineItems: ApplePayJS.ApplePayLineItem[] = [\n            {\n                label: this._subTotalLabel,\n                amount: `${checkout.subtotal.toFixed(decimalPlaces)}`,\n            },\n        ];\n\n        checkout.taxes.forEach((tax) =>\n            lineItems.push({\n                label: tax.name,\n                amount: `${tax.amount.toFixed(decimalPlaces)}`,\n            }),\n        );\n        lineItems.push({\n            label: this._shippingLabel,\n            amount: `${checkout.shippingCostTotal.toFixed(decimalPlaces)}`,\n        });\n\n        return lineItems;\n    }\n\n    private async _updateShippingOption(optionId: string) {\n        return this._paymentIntegrationService.selectShippingOption(optionId);\n    }\n\n    private async _onValidateMerchant(\n        paymentData: PaymentMethod,\n        event: ApplePayJS.ApplePayValidateMerchantEvent,\n    ) {\n        const body = [\n            `validationUrl=${event.validationURL}`,\n            `merchantIdentifier=${paymentData.initializationData.merchantId}`,\n            `displayName=${paymentData.initializationData.storeName}`,\n            `domainName=${window.location.hostname}`,\n        ].join('&');\n\n        return this._requestSender.post(\n            validationEndpoint(paymentData.initializationData.paymentsUrl),\n            {\n                credentials: false,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-XSRF-TOKEN': null,\n                },\n                body,\n            },\n        );\n    }\n\n    private async _onPaymentAuthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        applePaySession: ApplePaySession,\n        paymentMethod: PaymentMethod,\n    ) {\n        const { token, billingContact, shippingContact } = event.payment;\n        const state = this._paymentIntegrationService.getState();\n        const cart = state.getCartOrThrow();\n        const requiresShipping = cart.lineItems.physicalItems.length > 0;\n\n        let deviceSessionId: string | undefined;\n\n        if (paymentMethod.initializationData?.gateway === ApplePayGatewayType.BRAINTREE) {\n            deviceSessionId = await this._getBraintreeDeviceData();\n        }\n\n        const payment: Payment = {\n            methodId: paymentMethod.id,\n            paymentData: {\n                deviceSessionId,\n                formattedPayload: {\n                    apple_pay_token: {\n                        payment_data: token.paymentData,\n                        payment_method: token.paymentMethod,\n                        transaction_id: token.transactionIdentifier,\n                    },\n                },\n            },\n        };\n\n        const transformedBillingAddress = this._transformContactToAddress(billingContact);\n        const transformedShippingAddress = this._transformContactToAddress(shippingContact);\n        const emailAddress = shippingContact?.emailAddress;\n        const phone = shippingContact?.phoneNumber || '';\n\n        try {\n            await this._paymentIntegrationService.updateBillingAddress({\n                ...transformedBillingAddress,\n                email: emailAddress,\n                phone,\n            });\n\n            if (requiresShipping) {\n                await this._paymentIntegrationService.updateShippingAddress(\n                    transformedShippingAddress,\n                );\n            }\n\n            await this._paymentIntegrationService.submitOrder({\n                useStoreCredit: false,\n            });\n\n            await this._paymentIntegrationService.submitPayment(payment);\n            applePaySession.completePayment(ApplePaySession.STATUS_SUCCESS);\n\n            return this._onAuthorizeCallback();\n        } catch (error) {\n            applePaySession.completePayment(ApplePaySession.STATUS_FAILURE);\n\n            return this._onError(error);\n        }\n    }\n\n    private _transformContactToAddress(\n        contact?: ApplePayJS.ApplePayPaymentContact,\n    ): AddressRequestBody {\n        return {\n            firstName: contact?.givenName || '',\n            lastName: contact?.familyName || '',\n            city: contact?.locality || '',\n            company: '',\n            address1: (contact?.addressLines && contact.addressLines[0]) || '',\n            address2: (contact?.addressLines && contact.addressLines[1]) || '',\n            postalCode: contact?.postalCode || '',\n            countryCode: contact?.countryCode || '',\n            phone: contact?.phoneNumber || '',\n            stateOrProvince: contact?.administrativeArea || '',\n            stateOrProvinceCode: contact?.administrativeArea || '',\n            customFields: [],\n        };\n    }\n\n    private async _getBraintreeDeviceData(): Promise<string | undefined> {\n        try {\n            const { deviceData } = await this._braintreeSdk.getDataCollectorOrThrow();\n\n            return deviceData;\n        } catch (_) {\n            // Don't throw an error to avoid breaking checkout flow\n        }\n    }\n\n    private async _initializeBraintreeSdk(): Promise<void> {\n        // TODO: This is a temporary solution when we load braintree to get client token (should be fixed after PAYPAL-4122)\n        await this._paymentIntegrationService.loadPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        const state = this._paymentIntegrationService.getState();\n        const braintreePaymentMethod = state.getPaymentMethod(ApplePayGatewayType.BRAINTREE);\n\n        if (\n            !braintreePaymentMethod ||\n            !braintreePaymentMethod.clientToken ||\n            !braintreePaymentMethod.initializationData\n        ) {\n            return;\n        }\n\n        this._braintreeSdk.initialize(braintreePaymentMethod.clientToken);\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    BraintreeScriptLoader,\n    BraintreeSdk,\n    BraintreeSDKVersionManager,\n} from '@bigcommerce/checkout-sdk/braintree-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ApplePayCustomerStrategy from './apple-pay-customer-strategy';\nimport ApplePayScriptLoader from './apple-pay-script-loader';\nimport ApplePaySessionFactory from './apple-pay-session-factory';\n\nconst createApplePayCustomerStrategy: CustomerStrategyFactory<ApplePayCustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    const { getHost } = paymentIntegrationService.getState();\n\n    const braintreeSDKVersionManager = new BraintreeSDKVersionManager(paymentIntegrationService);\n\n    return new ApplePayCustomerStrategy(\n        createRequestSender({ host: getHost() }),\n        paymentIntegrationService,\n        new ApplePaySessionFactory(),\n        new BraintreeSdk(\n            new BraintreeScriptLoader(getScriptLoader(), window, braintreeSDKVersionManager),\n        ),\n        new ApplePayScriptLoader(new ScriptLoader()),\n    );\n};\n\nexport default toResolvableModule(createApplePayCustomerStrategy, [{ id: 'applepay' }]);\n"],"names":["__webpack_require__","isExperimentEnabled","features","experimentName","fallbackValue","d","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","BRAINTREE_SDK_HOSTED_FIELDS_FIX_VERSION","BRAINTREE_SDK_DEFAULT_VERSION","BRAINTREE_SDK_STABLE_VERSION","BraintreeSDKVersionManager","constructor","paymentIntegrationService","braintreeWindow","window","getSDKVersion","storeConfig","this","getState","getStoreConfig","checkoutSettings","getPreloadedSDKVersion","braintree","preloadedVersion","find","values","module","VERSION","StandardError","Error","message","super","name","type","setPrototypeOf","__proto__","captureStackTrace","stack","UnsupportedBrowserError","NotInitializedErrorType","TotalPriceStatusType","BraintreeOrderStatus","NonInstantLocalPaymentMethods","BraintreeFastlaneAuthenticationState","BraintreeErrorType","BraintreeErrorCode","BraintreeSupportedCardBrands","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","ESTIMATED","FINAL","NOT_CURRENTLY_KNOWN","Completed","Pending","Failed","TRUSTLY","SUCCEEDED","FAILED","CANCELED","UNRECOGNIZED","Customer","Merchant","Network","Internal","Unknown","KountNotEnabled","Visa","Mastercard","AmericanExpress","DinersClub","Discover","Jcb","UnionPay","Maestro","Elo","Mir","Hiper","Hipercard","BraintreeEnv","BraintreeModuleName","BraintreeFormFieldType","BraintreeSdk","braintreeScriptLoader","initialize","clientToken","setClientToken","deinitialize","teardownModule","dataCollector","getClient","client","getClientTokenOrThrow","clientCreator","loadClient","create","authorization","getDataCollectorOrThrow","options","emptyDataCollector","deviceData","teardown","Promise","resolve","loadDataCollector","dataCollectorConfig","kount","error","Boolean","code","getBraintreeGooglePayment","googlePayment","braintreeGooglePayment","all","loadGooglePayment","getBraintreeThreeDS","threeDS","threeDSecure","load3DS","version","getBraintreeLocalPayment","merchantAccountId","braintreeLocalPayment","localPaymentCreator","loadLocalPayment","reject","getUsBankAccount","usBankAccount","loadUsBankAccount","getBraintreeVisaCheckout","visaCheckout","loadVisaCheckout","then","paypal","getVisaCheckoutSdk","testMode","visaCheckoutSDK","loadVisaCheckoutSdk","getVenmoCheckoutOrThrow","braintreeVenmo","venmoCheckout","loadVenmoCheckout","venmoCheckoutConfig","allowDesktop","paymentMethodUsage","braintreeVenmoCheckout","isBrowserSupported","PaymentMethodClientUnavailableError","Sandbox","Production","Client","DataCollector","Fastlane","GooglePayment","HostedFields","LocalPayment","Paypal","PaypalCheckout","ThreeDSecure","UsBankAccount","Venmo","VisaCheckout","CardCode","CardCodeVerification","CardExpiry","CardName","CardNumber","CardNumberVerification","BRAINTREE_SDK_SCRIPTS_INTEGRITY","MissingDataErrorType","ApplePayGatewayType","BraintreeScriptLoader","scriptLoader","braintreeHostWindow","braintreeSDKVersionManager","loadBraintreeModuleOrThrow","loadFastlane","loadPaypalCheckout","loadPaypal","loadHostedFields","V","hash","loadScript","async","attributes","integrity","crossorigin","braintreeModuleName","fileName","getBraintreeModule","braintreeSdkVersion","scriptPath","getIntegrityValuesByModuleName","t","moduleName","toResolvableModule","resolveIds","assign","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","InvalidArgumentError","PaymentMethodCancelledError","BuyNowCartCreationError","BRAINTREE","BRAINTREE_FASTLANE","DefaultLabels","ButtonStyleOption","Subtotal","Shipping","Black","White","WhiteBorder","ApplePayButtonStrategy","_requestSender","_paymentIntegrationService","_sessionFactory","_braintreeSdk","_applePayScriptLoader","_onAuthorizeCallback","noop","_subTotalLabel","_shippingLabel","methodId","containerId","applepay","loadSdk","onPaymentAuthorize","buyNowInitializeOptions","requiresShipping","_requiresShipping","_buyNowInitializeOptions","loadDefaultCheckout","loadPaymentMethod","state","_paymentMethod","getPaymentMethodOrThrow","getCart","verifyCheckoutSpamProtection","initializationData","gateway","_initializeBraintreeSdk","_applePayButton","_createButton","styleOption","addEventListener","_handleWalletButtonClick","bind","container","document","getElementById","applePayButton","_createApplePayButtonElement","appendChild","createElement","setAttribute","buttonStyle","event","preventDefault","getBuyNowCartRequestBody","countryCode","currencyCode","merchantCapabilities","supportedNetworks","storeName","request","_getRequestWithEmptyTotal","requiredShippingContactFields","push","applePaySession","_handleApplePayEvents","begin","cart","getCartOrThrow","config","getStoreConfigOrThrow","checkout","getCheckoutOrThrow","_getBaseRequest","storeProfile","total","label","amount","requiredBillingContactFields","paymentMethod","storeCountryCode","currency","decimalPlaces","lineItems","physicalItems","length","grandTotal","toFixed","subtotal","taxes","forEach","tax","onvalidatemerchant","body","merchantSession","_onValidateMerchant","completeMerchantValidation","onpaymentmethodselected","_createBuyNowCart","_handlePaymentMethodSelected","onshippingcontactselected","_handleShippingContactSelected","onshippingmethodselected","_handleShippingMethodSelected","oncancel","url","id","loadCheckout","onpaymentauthorized","_onPaymentAuthorized","cartRequestBody","buyNowCart","createBuyNowCart","shouldExecuteSpamCheck","completePaymentMethodSelection","newTotal","newLineItems","shippingAddress","_transformContactToAddress","shippingContact","updateShippingAddress","abort","selectionShippingOptionId","consignments","selectedShippingOption","availableOptions","availableShippingOptions","selectedOption","unselectedOptions","filter","option","shippingOptions","description","cost","detail","additionalDescription","identifier","isRecommended","Array","completeShippingContactSelection","ApplePaySession","STATUS_INVALID_SHIPPING_POSTAL_ADDRESS","recommendedOption","optionId","selectedOptionId","_updateShippingOption","newShippingMethods","_getUpdatedLineItems","shippingMethod","completeShippingMethodSelection","shippingCostTotal","selectShippingOption","paymentData","validationURL","merchantId","location","hostname","join","post","paymentsUrl","credentials","headers","Accept","token","billingContact","payment","deviceSessionId","_getBraintreeDeviceData","formattedPayload","apple_pay_token","payment_data","payment_method","transaction_id","transactionIdentifier","transformedBillingAddress","transformedShippingAddress","emailAddress","phone","phoneNumber","updateBillingAddress","email","submitOrder","useStoreCredit","submitPayment","completePayment","STATUS_SUCCESS","STATUS_FAILURE","contact","firstName","givenName","lastName","familyName","city","locality","company","address1","addressLines","address2","postalCode","stateOrProvince","administrativeArea","stateOrProvinceCode","customFields","_","braintreePaymentMethod","getPaymentMethod","assertApplePayWindow","ApplePaySessionFactory","ApplePayScriptLoader","sdkVersion","getHost","createRequestSender","host","getScriptLoader","ScriptLoader","PaymentArgumentInvalidError","invalidFields","OrderFinalizationNotRequiredError","StoreCredit","ApplePayPaymentStrategy","_storeCreditLabel","shippingLabel","subtotalLabel","storeCreditLabel","execute","payload","finalize","isStoreCreditApplied","outstandingBalance","storeCredit","getCustomerOrThrow","Math","min","promise","err","NotImplementedError","ApplePayCustomerStrategy","_onError","_onClick","_hasApplePaySession","onError","onClick","_e","signIn","signOut","executePaymentMethodCheckout","continueWithCheckoutCallback"],"sourceRoot":""}