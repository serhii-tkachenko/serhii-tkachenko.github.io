{"version":3,"file":"1084-32662b27.js","mappings":"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","sources":["webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsButton.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/components/BigCommercePaymentsPaymentMethodComponent.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/hooks/useBigCommercePaymentsInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePayments/BigCommercePaymentsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsAPMs/BigCommercePaymentsAPMsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentCreditCards/BigCommercePaymentsCreditCardsPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/hooks/useBigCommercePaymentsFastlaneInstruments.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneCreditCardForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneInstrumentsForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/components/BigCommercePaymentsFastlaneForm.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/BigCommercePaymentsFastlanePaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsFastlane/index.ts","webpack://checkout/./packages/utility/src/is-error-with-translation-key.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigcommercePaymentsPayLaterButton.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsPayLater/BigCommercePaymentsPayLaterPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsVenmo/BigCommercePaymentsVenmoPaymentMethod.tsx","webpack://checkout/./packages/bigcommerce-payments-integration/src/validation-schemas/getBigCommercePaymentsRatePayValidationSchema.ts","webpack://checkout/./packages/bigcommerce-payments-integration/src/BigCommercePaymentsRatePay/BigCommercePaymentsRatePayPaymentMethod.tsx"],"sourcesContent":["import { createBigCommercePaymentsCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nconst BigCommercePaymentsButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const additionalInitializationOptions = {\n        onComplete: navigateToOrderConfirmation,\n        onError: props.onUnhandledError,\n    };\n\n    return (\n        <CheckoutButton\n            additionalInitializationOptions={additionalInitializationOptions}\n            integrations={[createBigCommercePaymentsCustomerStrategy]}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    BigCommercePaymentsButton,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import {\n    type AccountInstrument,\n    type HostedInstrument,\n    type BigCommercePaymentsPaymentInitializeOptions,\n    type BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions,\n    type BigCommercePaymentsCreditCardsPaymentInitializeOptions,\n    type BigCommercePaymentsVenmoPaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport {\n    createBigCommercePaymentsPaymentStrategy,\n    createBigCommercePaymentsAlternativeMethodsPaymentStrategy,\n    createBigCommercePaymentsPayLaterPaymentStrategy,\n    createBigCommercePaymentsVenmoPaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\ntype BigCommercePaymentsProvidersPaymentInitializeOptions =\n    BigCommercePaymentsAlternativeMethodsPaymentInitializeOptions &\n        BigCommercePaymentsCreditCardsPaymentInitializeOptions &\n        BigCommercePaymentsPaymentInitializeOptions &\n        BigCommercePaymentsVenmoPaymentInitializeOptions;\n\ninterface BigCommercePaymentsPaymentMethodComponentProps {\n    providerOptionsKey: string;\n    providerOptionsData?: Partial<BigCommercePaymentsProvidersPaymentInitializeOptions>;\n    currentInstrument?: AccountInstrument;\n    shouldConfirmInstrument?: boolean;\n}\n\ninterface ButtonActions {\n    disable: () => void;\n    enable: () => void;\n}\n\nconst BigCommercePaymentsPaymentMethodComponent: FunctionComponent<\n    PaymentMethodProps & BigCommercePaymentsPaymentMethodComponentProps\n> = ({\n    method,\n    checkoutService,\n    paymentForm,\n    onUnhandledError,\n    providerOptionsKey,\n    providerOptionsData,\n    children,\n    currentInstrument,\n    language,\n    shouldConfirmInstrument,\n}) => {\n    const buttonActionsRef = useRef<ButtonActions | null>(null);\n    const fieldsValuesRef = useRef<HostedInstrument | null>(null);\n    const renderButtonRef = useRef<(() => void) | null>(null);\n    const hasPayPalButton = useRef(false);\n\n    const termsValue = paymentForm.getFieldValue('terms');\n    const shouldSaveInstrument = paymentForm.getFieldValue('shouldSaveInstrument');\n\n    const validateForm = async () => {\n        const validationErrors = await paymentForm.validateForm();\n\n        return Object.keys(validationErrors);\n    };\n\n    const validateButton = async () => {\n        if (!buttonActionsRef.current) return;\n\n        const keysValidation = await validateForm();\n\n        if (keysValidation.length) {\n            buttonActionsRef.current.disable();\n        } else {\n            buttonActionsRef.current.enable();\n        }\n    };\n\n    const togglePaypalButton = useCallback(() => {\n        if (currentInstrument && !shouldConfirmInstrument) {\n            paymentForm.hidePaymentSubmitButton(method, false);\n            hasPayPalButton.current = false;\n        } else if (!hasPayPalButton.current && renderButtonRef.current) {\n            paymentForm.hidePaymentSubmitButton(method, true);\n\n            setTimeout(() => {\n                renderButtonRef.current?.();\n\n                hasPayPalButton.current = true;\n            }, 0);\n        }\n    }, [currentInstrument]);\n\n    useEffect(() => {\n        togglePaypalButton();\n    }, [togglePaypalButton, renderButtonRef.current]);\n\n    useEffect(() => {\n        void validateButton();\n    }, [termsValue]);\n\n    useEffect(() => {\n        fieldsValuesRef.current = {\n            shouldSaveInstrument: shouldConfirmInstrument || Boolean(shouldSaveInstrument),\n        };\n    }, [shouldSaveInstrument, shouldConfirmInstrument]);\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [\n                    createBigCommercePaymentsPaymentStrategy,\n                    createBigCommercePaymentsAlternativeMethodsPaymentStrategy,\n                    createBigCommercePaymentsPayLaterPaymentStrategy,\n                    createBigCommercePaymentsVenmoPaymentStrategy,\n                ],\n                [providerOptionsKey]: {\n                    container: '#checkout-payment-continue',\n                    shouldRenderPayPalButtonOnInitialization: false,\n                    onRenderButton: () => {\n                        paymentForm.hidePaymentSubmitButton(method, true);\n                    },\n                    onInit: (onRenderButton: () => void) => {\n                        renderButtonRef.current = onRenderButton;\n                    },\n                    submitForm: () => {\n                        paymentForm.setSubmitted(true);\n                        paymentForm.submitForm();\n                    },\n                    onError: (error: Error) => {\n                        paymentForm.disableSubmit(method, true);\n\n                        if (error.message === 'INSTRUMENT_DECLINED') {\n                            onUnhandledError(\n                                new Error(language.translate('payment.errors.instrument_declined')),\n                            );\n                        } else {\n                            onUnhandledError(error);\n                        }\n                    },\n                    onValidate: async (resolve: () => void, reject: () => void): Promise<void> => {\n                        const keysValidation = await validateForm();\n\n                        if (keysValidation.length) {\n                            paymentForm.setSubmitted(true);\n                            keysValidation.forEach((key) => paymentForm.setFieldTouched(key));\n\n                            return reject();\n                        }\n\n                        return resolve();\n                    },\n                    onInitButton: async (actions: ButtonActions) => {\n                        buttonActionsRef.current = actions;\n                        await validateButton();\n                    },\n                    getFieldsValues: () => fieldsValuesRef.current,\n                    ...(providerOptionsData || {}),\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    return children ? <>{children}</> : <></>;\n};\n\nexport default BigCommercePaymentsPaymentMethodComponent;\n","import { type AccountInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { isAccountInstrument } from '@bigcommerce/checkout/instrument-utils';\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\n\nconst useBigCommercePaymentsInstrument = (method: PaymentMethod) => {\n    const [currentInstrument, setCurrentInstrument] = useState<AccountInstrument | undefined>();\n\n    const { checkoutState } = useCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const { paymentForm } = usePaymentFormContext();\n    const { setFieldValue } = paymentForm;\n\n    const accountInstruments = useMemo(\n        () => instruments.filter(isAccountInstrument),\n        [instruments],\n    );\n\n    const trustedAccountInstruments = useMemo(\n        () => accountInstruments.filter((instrument) => instrument.trustedShippingAddress),\n        [accountInstruments],\n    );\n\n    const hasAccountInstruments = accountInstruments.length > 0;\n\n    const isInstrumentFeatureAvailable =\n        !customer?.isGuest &&\n        Boolean(method.config.isVaultingEnabled) &&\n        !method.initializationData.isComplete;\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailable && hasAccountInstruments;\n\n    const shouldCreateNewInstrument = shouldShowInstrumentFieldset && !currentInstrument;\n    const shouldConfirmInstrument =\n        shouldShowInstrumentFieldset && !!currentInstrument && !trustedAccountInstruments.length;\n\n    const getDefaultInstrument = (): AccountInstrument | undefined => {\n        if (!trustedAccountInstruments.length) {\n            return;\n        }\n\n        const defaultAccountInstrument = trustedAccountInstruments.filter(\n            ({ defaultInstrument }) => defaultInstrument,\n        );\n\n        return defaultAccountInstrument[0] || trustedAccountInstruments[0];\n    };\n\n    useEffect(() => {\n        setCurrentInstrument(isInstrumentFeatureAvailable ? getDefaultInstrument() : undefined);\n    }, [isInstrumentFeatureAvailable, trustedAccountInstruments]);\n\n    useEffect(() => {\n        if (!shouldShowInstrumentFieldset) {\n            setFieldValue('instrumentId', '');\n        }\n    }, [setFieldValue, shouldShowInstrumentFieldset]);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setCurrentInstrument(find(trustedAccountInstruments, { bigpayToken: id }));\n            setFieldValue('instrumentId', id);\n            setFieldValue('shouldSetAsDefaultInstrument', false);\n        },\n        [trustedAccountInstruments, setFieldValue],\n    );\n\n    const handleUseNewInstrument = useCallback(() => {\n        setCurrentInstrument(undefined);\n        setFieldValue('instrumentId', '');\n        setFieldValue('shouldSaveInstrument', false);\n        setFieldValue('shouldSetAsDefaultInstrument', false);\n    }, [setFieldValue]);\n\n    return {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldCreateNewInstrument,\n        shouldConfirmInstrument,\n    };\n};\n\nexport default useBigCommercePaymentsInstrument;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedHtml } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\nimport useBigCommercePaymentsInstrument from '../hooks/useBigCommercePaymentsInstruments';\n\nconst BigCommercePaymentsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const {\n        checkoutState: {\n            data: { isPaymentDataRequired, getCustomer, getInstruments },\n            statuses: { isLoadingInstruments, isLoadingPaymentMethod },\n        },\n        method: {\n            config: { isVaultingEnabled },\n            initializationData: { ...isComplete },\n        },\n        method,\n        checkoutService,\n        onUnhandledError,\n    } = props;\n\n    const {\n        trustedAccountInstruments,\n        currentInstrument,\n        handleSelectInstrument,\n        handleUseNewInstrument,\n        isInstrumentFeatureAvailable,\n        shouldShowInstrumentFieldset,\n        shouldConfirmInstrument,\n    } = useBigCommercePaymentsInstrument(method);\n\n    useEffect(() => {\n        const loadInstrumentsOrThrow = async () => {\n            try {\n                await checkoutService.loadInstruments();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        const { isGuest } = getCustomer() || {};\n\n        const shouldLoadInstruments = !isGuest && isVaultingEnabled && !isComplete;\n\n        if (shouldLoadInstruments) {\n            void loadInstrumentsOrThrow();\n        }\n    });\n\n    if (!isPaymentDataRequired()) {\n        return null;\n    }\n\n    const isLoading = isLoadingInstruments() || isLoadingPaymentMethod(method.id);\n    const allInstruments = getInstruments() || [];\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <BigCommercePaymentsPaymentMethodComponent\n                currentInstrument={currentInstrument}\n                providerOptionsKey=\"bigcommerce_payments\"\n                shouldConfirmInstrument={shouldConfirmInstrument}\n                {...props}\n            >\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={trustedAccountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentInstrument}\n                    />\n                )}\n\n                {shouldConfirmInstrument && (\n                    <div>\n                        <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                    </div>\n                )}\n\n                {isInstrumentFeatureAvailable && (\n                    <StoreInstrumentFieldset\n                        instrumentId={currentInstrument?.bigpayToken}\n                        instruments={allInstruments}\n                        isAccountInstrument\n                    />\n                )}\n            </BigCommercePaymentsPaymentMethodComponent>\n        </LoadingOverlay>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPaymentMethod,\n    [{ id: 'bigcommerce_payments' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    getUniquePaymentMethodId,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsAPMsPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const widgetContainerId = getUniquePaymentMethodId(method.id, method.gateway);\n    const extraOptions = {\n        apmFieldsContainer: `#${widgetContainerId}`,\n        apmFieldsStyles: {\n            variables: {\n                fontFamily: 'Open Sans, Helvetica Neue, Arial, sans-serif',\n                colorBackground: 'transparent',\n                textColor: 'black',\n                fontSizeBase: '16px',\n                spacingUnit: '1rem',\n                borderColor: '#d9d9d9',\n                borderRadius: '4px',\n                borderWidth: '1px',\n            },\n            rules: {\n                '.Input': {\n                    backgroundColor: 'white',\n                    color: '#333',\n                    fontSize: '1rem',\n                },\n                '.Input:active': {\n                    color: '#4496f6',\n                },\n                '.Input--invalid': {\n                    color: '#ed6a6a',\n                },\n            },\n        },\n    };\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsData={extraOptions}\n            providerOptionsKey=\"bigcommerce_payments_apms\"\n            {...props}\n        >\n            <div className={`widget widget--${method.id} payment-widget`} id={widgetContainerId} />\n        </BigCommercePaymentsPaymentMethodComponent>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsAPMsPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms' }],\n);\n","import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { createBigCommercePaymentsCreditCardsPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport { compact, forIn } from 'lodash';\nimport React, { type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst BigCommercePaymentsCreditCardsPaymentMethod: FunctionComponent<PaymentMethodProps> = (\n    props,\n) => {\n    const { checkoutService, checkoutState, paymentForm, language, method } = props;\n\n    const { cardCode, showCardHolderName, isHostedFormEnabled, requireCustomerCode } =\n        method.config;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    // TODO: update checkout-sdk cardCode inteface with null value or check if it is possible to get cardCode as null at all\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            let styleContainerId;\n\n            if (selectedInstrument && shouldRenderHostedFields) {\n                styleContainerId = getHostedFieldId('ccCvv');\n            }\n\n            if (!selectedInstrument) {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardExpiryVerification: shouldRenderHostedFields\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_expiry_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccExpiry'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors, fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(\n                            errorKey,\n                            fieldErrors && fieldErrors[0].type ? fieldErrors[0].type : '',\n                        );\n\n                        if (fieldErrors && fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const getHostedStoredCardValidationFieldset: (\n        selectedInstrument?: CardInstrument,\n    ) => ReactNode = useCallback(\n        (selectedInstrument) => {\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n\n            // Info: to generate valid nonce for vaulted instrument with untrusted shipping address, all hosted fields must be rendered\n            const shouldRenderHostedFields =\n                isInstrumentCardNumberRequired || isInstrumentCardCodeRequired;\n\n            return (\n                <HostedCreditCardValidation\n                    cardCodeId={\n                        isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                    }\n                    cardExpiryId={\n                        shouldRenderHostedFields ? getHostedFieldId('ccExpiry') : undefined\n                    }\n                    cardNumberId={\n                        isInstrumentCardNumberRequired ? getHostedFieldId('ccNumber') : undefined\n                    }\n                    focusedFieldType={focusedFieldType}\n                />\n            );\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            method,\n        ],\n    );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeBigCommercePaymentsCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    integrations: [createBigCommercePaymentsCreditCardsPaymentStrategy],\n                    bigcommerce_payments_creditcards: {\n                        form: isHostedFormEnabled\n                            ? await getHostedFormOptions(selectedInstrument)\n                            : undefined,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    // Info: isHostedFormEnabled is an option in store config which responsible for switching BigCommercePayments Credit Card form\n    // rendering between Hosted Form and default BC fields (non-hosted)\n    return isHostedFormEnabled ? (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={\n                <HostedCreditCardFieldset\n                    additionalFields={\n                        requireCustomerCode && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                    }\n                    cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                    cardExpiryId={getHostedFieldId('ccExpiry')}\n                    cardNameId={getHostedFieldId('ccName')}\n                    cardNumberId={getHostedFieldId('ccNumber')}\n                    focusedFieldType={focusedFieldType}\n                />\n            }\n            cardValidationSchema={getHostedCreditCardValidationSchema({ language })}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({\n                language,\n                isCardExpiryRequired: true,\n            })}\n        />\n    ) : (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBigCommercePaymentsCreditCardPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsCreditCardsPaymentMethod,\n    [{ id: 'bigcommerce_payments_creditcards' }],\n);\n","import { type CardInstrument, type PaymentProviderCustomer } from '@bigcommerce/checkout-sdk';\nimport { useState } from 'react';\n\nimport { useCheckout, usePaymentFormContext } from '@bigcommerce/checkout/payment-integration-api';\nimport { isPayPalFastlaneCustomer } from '@bigcommerce/checkout/paypal-fastlane-integration';\n\nexport const useBigCommercePaymentsFastlaneInstruments = () => {\n    const [selectedInstrument, setSelectedInstrument] = useState<CardInstrument>();\n\n    const { getPaymentProviderCustomer } = useCheckout().checkoutState.data;\n\n    const paymentProviderCustomer: PaymentProviderCustomer = getPaymentProviderCustomer();\n    const paypalFastlaneCustomer = isPayPalFastlaneCustomer(paymentProviderCustomer)\n        ? paymentProviderCustomer\n        : {};\n\n    const { paymentForm } = usePaymentFormContext();\n\n    const handleSelectInstrument = (instrument: CardInstrument): void => {\n        setSelectedInstrument(instrument);\n        paymentForm.setFieldValue('instrumentId', instrument.bigpayToken);\n    };\n\n    return {\n        instruments: paypalFastlaneCustomer.instruments || [],\n        handleSelectInstrument,\n        selectedInstrument,\n    };\n};\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneCreditCardForm.scss';\n\ninterface BigCommercePaymentsFastlaneCreditCardFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n}\n\nconst BigCommercePaymentsFastlaneCreditCardForm: FunctionComponent<\n    BigCommercePaymentsFastlaneCreditCardFormProps\n> = ({ renderPayPalCardComponent }) => {\n    useEffect(() => {\n        if (typeof renderPayPalCardComponent === 'function') {\n            renderPayPalCardComponent('#big-commerce-payments-fastlane-cc-form-container');\n        }\n    }, [renderPayPalCardComponent]);\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-cc-form-container\"\n            data-test=\"big-commerce-payments-fastlane-cc-form-container\"\n            id=\"big-commerce-payments-fastlane-cc-form-container\"\n        />\n    );\n};\n\nexport default BigCommercePaymentsFastlaneCreditCardForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { PoweredByPayPalFastlaneLabel } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { Button, ButtonSize, ButtonVariant, CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { type BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\n\nimport './BigCommercePaymentsFastlaneInstrumentsForm.scss';\n\nfunction mapFromInstrumentCardType(type: string): string {\n    switch (type.toLowerCase()) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n            return 'diners-club';\n\n        case 'master_card':\n            return 'mastercard';\n\n        default:\n            return type;\n    }\n}\n\ninterface BigCommercePaymentsFastlaneInstrumentsFormProps {\n    selectedInstrument: CardInstrument;\n    onChange: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n    handleSelectInstrument(instrument: CardInstrument): void;\n}\n\nconst BigCommercePaymentsFastlaneInstrumentsForm: FunctionComponent<\n    BigCommercePaymentsFastlaneInstrumentsFormProps\n> = ({ onChange, handleSelectInstrument, selectedInstrument }) => {\n    const cardType = mapFromInstrumentCardType(selectedInstrument.brand).toLowerCase();\n\n    const handleChange = async () => {\n        if (typeof onChange === 'function') {\n            const result = await onChange();\n\n            if (result) {\n                handleSelectInstrument(result);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"big-commerce-payments-fastlane-instrument\"\n            data-test=\"big-commerce-payments-fastlane-instrument-form\"\n        >\n            <div>\n                <div className=\"big-commerce-payments-fastlane-instrument-details\">\n                    <CreditCardIcon cardType={cardType} />\n\n                    <div\n                        className=\"instrumentSelect-card\"\n                        data-test=\"big-commerce-fastlane-instrument-last4\"\n                    >\n                        {/* &#9679; is a ● */}\n                        <span>&#9679;&#9679;&#9679;&#9679; {selectedInstrument.last4}</span>\n                    </div>\n                </div>\n                <div className=\"big-commerce-payments-fastlane-instrument-branding\">\n                    <PoweredByPayPalFastlaneLabel />\n                </div>\n            </div>\n\n            <div className=\"big-commerce-payments-fastlane-instrument-change-action\">\n                <Button\n                    onClick={handleChange}\n                    size={ButtonSize.Tiny}\n                    testId=\"big-commerce-payments-fastlane-instrument-change\"\n                    variant={ButtonVariant.Secondary}\n                >\n                    <TranslatedString id=\"common.change_action\" />\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneInstrumentsForm;\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport { type BigCommercePaymentsFastlaneCardComponentRef } from '../BigCommercePaymentsFastlanePaymentMethod';\nimport { useBigCommercePaymentsFastlaneInstruments } from '../hooks/useBigCommercePaymentsFastlaneInstruments';\n\nimport BigCommercePaymentsFastlaneCreditCardForm from './BigCommercePaymentsFastlaneCreditCardForm';\nimport BigCommercePaymentsFastlaneInstrumentsForm from './BigCommercePaymentsFastlaneInstrumentsForm';\n\ninterface BigCommercePaymentsFastlaneFormProps {\n    renderPayPalCardComponent?: BigCommercePaymentsFastlaneCardComponentRef['renderPayPalCardComponent'];\n    showPayPalCardSelector?: BigCommercePaymentsFastlaneCardComponentRef['showPayPalCardSelector'];\n}\n\nconst BigCommercePaymentsFastlaneForm: FunctionComponent<BigCommercePaymentsFastlaneFormProps> = ({\n    renderPayPalCardComponent,\n    showPayPalCardSelector,\n}) => {\n    const { instruments, handleSelectInstrument, selectedInstrument } =\n        useBigCommercePaymentsFastlaneInstruments();\n\n    const shouldShowInstrumentsForm = instruments.length > 0;\n\n    useEffect(() => {\n        if (!selectedInstrument && instruments.length > 0) {\n            handleSelectInstrument(instruments[0]);\n        }\n    }, [instruments, selectedInstrument, handleSelectInstrument]);\n\n    return (\n        <div className=\"paymentMethod paymentMethod--creditCard\">\n            {shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneInstrumentsForm\n                    handleSelectInstrument={handleSelectInstrument}\n                    onChange={showPayPalCardSelector}\n                    selectedInstrument={selectedInstrument || instruments[0]}\n                />\n            )}\n\n            {!shouldShowInstrumentsForm && (\n                <BigCommercePaymentsFastlaneCreditCardForm\n                    renderPayPalCardComponent={renderPayPalCardComponent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default BigCommercePaymentsFastlaneForm;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { createBigCommercePaymentsFastlanePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent, useEffect, useRef } from 'react';\n\nimport { LocaleProvider } from '@bigcommerce/checkout/locale';\nimport {\n    CheckoutContext,\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { FormContext, LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport BigCommercePaymentsFastlaneForm from './components/BigCommercePaymentsFastlaneForm';\n\nimport './BigCommercePaymentsFastlanePaymentMethod.scss';\nimport { isErrorWithTranslationKey } from '@bigcommerce/checkout/utility';\n\nexport interface BigCommercePaymentsFastlaneCardComponentRef {\n    renderPayPalCardComponent?: (container: string) => void;\n    showPayPalCardSelector?: () => Promise<CardInstrument | undefined>;\n}\n\nconst BigCommercePaymentsFastlanePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    onUnhandledError,\n    paymentForm,\n    language,\n}) => {\n    const paypalCardComponentRef = useRef<BigCommercePaymentsFastlaneCardComponentRef>({});\n\n    const { isLoadingPaymentMethod, isInitializingPayment } = checkoutState.statuses;\n\n    const initializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.initializePayment({\n                methodId: method.id,\n                integrations: [createBigCommercePaymentsFastlanePaymentStrategy],\n                bigcommerce_payments_fastlane: {\n                    onInit: (renderPayPalCardComponent) => {\n                        paypalCardComponentRef.current.renderPayPalCardComponent =\n                            renderPayPalCardComponent;\n                    },\n                    onChange: (showPayPalCardSelector) => {\n                        paypalCardComponentRef.current.showPayPalCardSelector =\n                            showPayPalCardSelector;\n                    },\n                    onError: (error: unknown) => {\n                        let finalError: Error;\n\n                        if (isErrorWithTranslationKey(error)) {\n                            finalError = new Error(language.translate(error.translationKey));\n                        } else if (error instanceof Error) {\n                            finalError = error;\n                        } else {\n                            finalError = new Error(\n                                language.translate('payment.errors.general_error'),\n                            );\n                        }\n\n                        return onUnhandledError(finalError);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePaymentOrThrow = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializePaymentOrThrow();\n\n        return () => {\n            void deinitializePaymentOrThrow();\n        };\n    }, []);\n\n    const isLoading = isInitializingPayment() || isLoadingPaymentMethod(method.id);\n\n    const formContextProps = {\n        isSubmitted: paymentForm.isSubmitted(),\n        setSubmitted: paymentForm.setSubmitted,\n    };\n\n    return (\n        <FormContext.Provider value={formContextProps}>\n            <CheckoutContext.Provider value={{ checkoutState, checkoutService }}>\n                <LocaleProvider checkoutService={checkoutService}>\n                    <PaymentFormContext.Provider value={{ paymentForm }}>\n                        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                            <BigCommercePaymentsFastlaneForm\n                                renderPayPalCardComponent={\n                                    paypalCardComponentRef.current.renderPayPalCardComponent\n                                }\n                                showPayPalCardSelector={\n                                    paypalCardComponentRef.current.showPayPalCardSelector\n                                }\n                            />\n                        </LoadingOverlay>\n                    </PaymentFormContext.Provider>\n                </LocaleProvider>\n            </CheckoutContext.Provider>\n        </FormContext.Provider>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsFastlanePaymentMethod,\n    [{ id: 'bigcommerce_payments_fastlane' }],\n);\n","import BigCommercePaymentsFastlanePaymentMethod from './BigCommercePaymentsFastlanePaymentMethod';\n\nexport default BigCommercePaymentsFastlanePaymentMethod;\n","export interface ErrorWithTranslationKey {\n    translationKey: string;\n}\n\nexport default function isErrorWithTranslationKey(\n    error: unknown,\n): error is ErrorWithTranslationKey {\n    return typeof error === 'object' && error !== null && 'translationKey' in error;\n}\n","import { createBigCommercePaymentsPayLaterCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nconst BigcommercePaymentsPayLaterButton: FunctionComponent<CheckoutButtonProps> = (props) => {\n    const additionalInitializationOptions = {\n        onComplete: navigateToOrderConfirmation,\n        onError: props.onUnhandledError,\n    };\n\n    return (\n        <CheckoutButton\n            additionalInitializationOptions={additionalInitializationOptions}\n            integrations={[createBigCommercePaymentsPayLaterCustomerStrategy]}\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    BigcommercePaymentsPayLaterButton,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsPayLaterPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { checkoutState } = props;\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_paylater\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsPayLaterPaymentMethod,\n    [{ id: 'bigcommerce_payments_paylater' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BigCommercePaymentsPaymentMethodComponent from '../components/BigCommercePaymentsPaymentMethodComponent';\n\nconst BigCommercePaymentsVenmoPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const isPaymentDataRequired = props.checkoutState.data.isPaymentDataRequired();\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    return (\n        <BigCommercePaymentsPaymentMethodComponent\n            providerOptionsKey=\"bigcommerce_payments_venmo\"\n            {...props}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsVenmoPaymentMethod,\n    [{ id: 'bigcommerce_payments_venmo' }],\n);\n","import { type FormField, type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, string, type StringSchema } from 'yup';\n\nexport default memoize(function getBigCommercePaymentsRatePayValidationSchema({\n    formFieldData,\n    language,\n}: {\n    formFieldData: FormField[];\n    language: LanguageService;\n}) {\n    const requiredFieldErrorTranslationIds: { [fieldName: string]: string } = {\n        ratepayPhoneCountryCode: 'payment.ratepay.phone_country_code',\n        ratepayPhoneNumber: 'payment.ratepay.phone_number',\n        ratepayBirthDate: 'payment.ratepay.birth_date',\n    };\n\n    return object(\n        formFieldData.reduce(\n            (schema, { id, required }) => {\n                if (required) {\n                    if (requiredFieldErrorTranslationIds[id]) {\n                        schema[id] = string()\n                            .nullable()\n                            .required(\n                                language.translate(`payment.ratepay.errors.isRequired`, {\n                                    fieldName: language.translate(\n                                        requiredFieldErrorTranslationIds[id],\n                                    ),\n                                }),\n                            );\n\n                        if (id === 'ratepayPhoneCountryCode') {\n                            schema[id] = schema[id].matches(\n                                /^\\+\\d{2,}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate(\n                                        'payment.ratepay.phone_country_code',\n                                    ),\n                                }),\n                            );\n                        }\n\n                        if (id === 'ratepayPhoneNumber') {\n                            schema[id] = schema[id].matches(\n                                /^\\d{7,11}$/,\n                                language.translate('payment.ratepay.errors.isInvalid', {\n                                    fieldName: language.translate('payment.ratepay.phone_number'),\n                                }),\n                            );\n                        }\n                    }\n                }\n\n                return schema;\n            },\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions, @typescript-eslint/prefer-reduce-type-parameter\n            {} as { [key: string]: StringSchema<string | null> },\n        ),\n    );\n});\n","import { type FormField } from '@bigcommerce/checkout-sdk';\nimport { createBigCommercePaymentsRatePayPayPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bigcommerce-payments';\nimport React, { type FunctionComponent, useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n    CustomError,\n    type SpecificError,\n    type CountryData,\n    getCountryData,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { DynamicFormField, DynamicFormFieldType, FormContext } from '@bigcommerce/checkout/ui';\n\nimport getBigCommercePaymentsRatePayValidationSchema from '../validation-schemas/getBigCommercePaymentsRatePayValidationSchema';\n\nconst PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED = 'PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED';\nconst PAYMENT_SOURCE_DECLINED_BY_PROCESSOR = 'PAYMENT_SOURCE_DECLINED_BY_PROCESSOR';\nconst ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE =\n    'ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE';\n\ninterface RatePayFieldValues {\n    ratepayBirthDate: {\n        getDate(): number;\n        getMonth(): number;\n        getFullYear(): number;\n    };\n    ratepayPhoneCountryCode: string;\n    ratepayPhoneNumber: string;\n}\n\nconst formFieldData: FormField[] = [\n    {\n        name: 'ratepayBirthDate',\n        custom: false,\n        id: 'ratepayBirthDate',\n        label: 'payment.ratepay.birth_date',\n        required: true,\n        fieldType: DynamicFormFieldType.DATE,\n        inputDateFormat: 'dd.MM.yyyy',\n    },\n    {\n        name: 'ratepayPhoneCountryCode',\n        custom: false,\n        id: 'ratepayPhoneCountryCode',\n        label: 'payment.ratepay.phone_country_code',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n        type: 'string',\n    },\n    {\n        name: 'ratepayPhoneNumber',\n        custom: false,\n        id: 'ratepayPhoneNumber',\n        label: 'payment.ratepay.phone_number',\n        required: true,\n        fieldType: DynamicFormFieldType.TEXT,\n    },\n];\n\nconst BigCommercePaymentsRatePayPaymentMethod: FunctionComponent<any> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n    paymentForm: { isSubmitted, setFieldValue, setValidationSchema, setSubmitted },\n    language,\n    checkoutState,\n}) => {\n    const fieldsValues = useRef<Partial<RatePayFieldValues>>({});\n    const isPaymentDataRequired = checkoutState.data.isPaymentDataRequired();\n    const getCountryInfo = (): CountryData => {\n        const billing = checkoutState.data.getBillingAddress();\n\n        return getCountryData(billing.country)[0] || '';\n    };\n\n    if (!isPaymentDataRequired) {\n        return null;\n    }\n\n    const initializePayment = async () => {\n        try {\n            await checkoutService.initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [createBigCommercePaymentsRatePayPayPaymentStrategy],\n                bigcommerce_payments_ratepay: {\n                    container: '#checkout-payment-continue',\n                    legalTextContainer: 'legal-text-container',\n                    loadingContainerId: 'checkout-page-container',\n                    getFieldsValues: () => fieldsValues.current,\n                    onError: (error: SpecificError) => {\n                        const ratepaySpecificError = error.errors?.filter((e) => e.provider_error);\n\n                        if (ratepaySpecificError?.length) {\n                            let translationCode;\n                            let ratepayError;\n                            const ratepaySpecificErrorCode =\n                                ratepaySpecificError[0].provider_error?.code;\n\n                            switch (ratepaySpecificErrorCode) {\n                                case PAYMENT_SOURCE_DECLINED_BY_PROCESSOR:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceDeclinedByProcessor';\n                                    break;\n\n                                case PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED:\n                                    translationCode =\n                                        'payment.ratepay.errors.paymentSourceInfoCannotBeVerified';\n                                    break;\n\n                                case ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE:\n                                    translationCode =\n                                        'payment.ratepay.errors.itemCategoryNotSupportedByPaymentSource';\n                                    break;\n\n                                default:\n                                    translationCode = 'common.error_heading';\n                            }\n\n                            if (\n                                ratepaySpecificErrorCode !==\n                                ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE\n                            ) {\n                                ratepayError = new CustomError({\n                                    data: {\n                                        shouldBeTranslatedAsHtml: true,\n                                        translationKey: translationCode,\n                                    },\n                                });\n                            } else {\n                                ratepayError = new Error(language.translate(translationCode));\n                            }\n\n                            return onUnhandledError(ratepayError);\n                        }\n\n                        onUnhandledError(error);\n                    },\n                },\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializePayment = async () => {\n        try {\n            await checkoutService.deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        void initializePayment();\n\n        return () => {\n            void deinitializePayment();\n        };\n    }, []);\n\n    const updateFieldValues = (field: { [key: string]: string }) => {\n        fieldsValues.current = { ...fieldsValues.current, ...field };\n    };\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const handleChange = useCallback(\n        (fieldId: string) => (value: string) => {\n            setFieldValue(fieldId, value);\n            updateFieldValues({ [fieldId]: value });\n        },\n        [setFieldValue],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const validationSchema = useMemo(\n        () =>\n            getBigCommercePaymentsRatePayValidationSchema({\n                formFieldData,\n                language,\n            }),\n        [language, formFieldData],\n    );\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setSubmitted(false);\n        setValidationSchema(method, validationSchema);\n    }, [validationSchema, method, setValidationSchema, setSubmitted]);\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n        setFieldValue('ratepayPhoneCountryCode', getCountryInfo().dialCode);\n    }, []);\n\n    return (\n        <div style={{ marginBottom: '20px' }}>\n            <FormContext.Provider value={{ isSubmitted, setSubmitted }}>\n                {formFieldData.map((field) => {\n                    return (\n                        <DynamicFormField\n                            extraClass={`dynamic-form-field--${field.id}`}\n                            field={field}\n                            key={field.id}\n                            label={language.translate(field.label)}\n                            onChange={handleChange(field.id)}\n                        />\n                    );\n                })}\n            </FormContext.Provider>\n        </div>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BigCommercePaymentsRatePayPaymentMethod,\n    [{ gateway: 'bigcommerce_payments_apms', id: 'ratepay' }],\n);\n"],"names":["toResolvableComponent","props","additionalInitializationOptions","onComplete","navigateToOrderConfirmation","onError","onUnhandledError","CheckoutButton","integrations","id","method","checkoutService","paymentForm","providerOptionsKey","providerOptionsData","children","currentInstrument","language","shouldConfirmInstrument","buttonActionsRef","useRef","fieldsValuesRef","renderButtonRef","hasPayPalButton","termsValue","getFieldValue","shouldSaveInstrument","validateForm","validationErrors","Object","keys","validateButton","current","length","disable","enable","togglePaypalButton","useCallback","hidePaymentSubmitButton","setTimeout","useEffect","Boolean","initializePayment","gatewayId","gateway","methodId","container","shouldRenderPayPalButtonOnInitialization","onRenderButton","onInit","submitForm","setSubmitted","error","disableSubmit","message","Error","translate","onValidate","resolve","reject","keysValidation","forEach","key","setFieldTouched","onInitButton","actions","getFieldsValues","deinitializePayment","setCurrentInstrument","useState","checkoutState","customer","data","getCustomer","instruments","getInstruments","setFieldValue","accountInstruments","useMemo","filter","isAccountInstrument","trustedAccountInstruments","instrument","trustedShippingAddress","hasAccountInstruments","isInstrumentFeatureAvailable","isGuest","config","isVaultingEnabled","initializationData","isComplete","shouldShowInstrumentFieldset","shouldCreateNewInstrument","defaultInstrument","getDefaultInstrument","undefined","handleSelectInstrument","find","bigpayToken","handleUseNewInstrument","isPaymentDataRequired","statuses","isLoadingInstruments","isLoadingPaymentMethod","loadInstruments","isLoading","allInstruments","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","selectedInstrument","TranslatedHtml","StoreInstrumentFieldset","instrumentId","widgetContainerId","getUniquePaymentMethodId","extraOptions","apmFieldsContainer","apmFieldsStyles","variables","fontFamily","colorBackground","textColor","fontSizeBase","spacingUnit","borderColor","borderRadius","borderWidth","rules","backgroundColor","color","fontSize","className","cardCode","showCardHolderName","isHostedFormEnabled","requireCustomerCode","focusedFieldType","setFocusedFieldType","isInstrumentCardCodeRequiredProp","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredProp","isInstrumentCardNumberRequiredSelector","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","name","compact","join","getHostedFormOptions","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","shouldRenderHostedFields","styleContainerId","fields","cardCodeVerification","accessibilityLabel","containerId","cardNumberVerification","cardExpiryVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","getCreditCardInputStyles","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","errors","forIn","fieldErrors","errorKey","type","getHostedStoredCardValidationFieldset","HostedCreditCardValidation","cardCodeId","cardExpiryId","cardNumberId","initializeBigCommercePaymentsCreditCardPayment","options","bigcommerce_payments_creditcards","form","cardFieldset","HostedCreditCardFieldset","additionalFields","CreditCardCustomerCodeField","cardNameId","cardValidationSchema","getHostedCreditCardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","getHostedInstrumentValidationSchema","isCardExpiryRequired","renderPayPalCardComponent","onChange","toLowerCase","mapFromInstrumentCardType","brand","CreditCardIcon","last4","PoweredByPayPalFastlaneLabel","Button","onClick","result","size","Tiny","testId","variant","Secondary","TranslatedString","showPayPalCardSelector","setSelectedInstrument","getPaymentProviderCustomer","paymentProviderCustomer","paypalFastlaneCustomer","useBigCommercePaymentsFastlaneInstruments","shouldShowInstrumentsForm","paypalCardComponentRef","isInitializingPayment","bigcommerce_payments_fastlane","finalError","isErrorWithTranslationKey","translationKey","formContextProps","isSubmitted","FormContext","Provider","value","CheckoutContext","LocaleProvider","PaymentFormContext","formFieldData","requiredFieldErrorTranslationIds","ratepayPhoneCountryCode","ratepayPhoneNumber","ratepayBirthDate","reduce","schema","required","nullable","fieldName","matches","ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE","custom","label","DynamicFormFieldType","DATE","inputDateFormat","TEXT","setValidationSchema","fieldsValues","bigcommerce_payments_ratepay","legalTextContainer","loadingContainerId","ratepaySpecificError","e","provider_error","translationCode","ratepayError","ratepaySpecificErrorCode","code","CustomError","shouldBeTranslatedAsHtml","handleChange","fieldId","field","validationSchema","getBigCommercePaymentsRatePayValidationSchema","billing","getBillingAddress","country","getCountryInfo","dialCode","style","marginBottom","map","DynamicFormField","extraClass"],"sourceRoot":""}