{"version":3,"file":"7610-65aee57c.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconLock.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardInputStyles.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/form/TextInputIframeContainer.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/HostedCreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/hostedCreditCard/withHostedCreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/legacy-integration/src/legacy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/legacy-integration/src/create-legacy-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./packages/core/src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./packages/core/src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./packages/core/src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconHelp.tsx"],"sourcesContent":["import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, PureComponent, type ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon } from '@bigcommerce/checkout/ui';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate = false,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                            shouldHideExpiryDate={shouldHideExpiryDate}\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={selectedInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" {...field} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{ cardTitle: cardInfo.niceType, endingIn: instrument.last4 }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, type ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport enum UntrustedShippingCardVerificationType {\n    CVV = 'cvv',\n    PAN = 'pan'\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path\n                d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\"\n                fill=\"#636363\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text\n                fill=\"#979BA1\"\n                fontFamily=\"Avenir Next\"\n                fontSize=\"6\"\n                fontWeight=\"420\"\n                letterSpacing=\".2\"\n            >\n                <tspan x=\"11\" y=\"35\">\n                    3712 567890 374\n                </tspan>\n                <tspan x=\"70.21\" y=\"35\">\n                    5\n                </tspan>\n            </text>\n            <path\n                d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\"\n                fill=\"#636363\"\n                opacity=\".9\"\n            />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={IconSize.Large} />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={IconSize.Large} />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext } from '@bigcommerce/checkout/ui';\n\nimport { FormFieldContainer, TextInput } from '../../ui/form';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedCreditCardValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCode: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardExpiry: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n\n                cardName: string()\n                    .test({\n                        message: language.translate('payment.credit_card_name_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_name_invalid_error'),\n                        test: (value) => value !== 'invalid_card_name',\n                    }),\n\n                cardNumber: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    }),\n            }),\n        }),\n    });\n});\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"]>({\n            errors: object().required().shape<HostedInstrumentValidationSchemaShape[\"hostedForm\"][\"errors\"]>({\n                cardCodeVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_cvv_invalid_error'),\n                        test: (value) => value !== 'invalid_card_code',\n                    }),\n\n                cardNumberVerification: string()\n                    .test({\n                        message: language.translate('payment.credit_card_number_required_error'),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_invalid_error'),\n                        test: (value) => value !== 'invalid_card_number',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_number_mismatch_error'),\n                        test: (value) => value !== 'mismatched_card_number',\n                    }),\n\n            ...(isCardExpiryRequired ? {\n                cardExpiryVerification: string()\n                    .test({\n                        message: language.translate(\n                            'payment.credit_card_expiration_required_error',\n                        ),\n                        test: (value) => value !== 'required',\n                    })\n                    .test({\n                        message: language.translate('payment.credit_card_expiration_invalid_error'),\n                        test: (value) => value !== 'invalid_card_expiry',\n                    }),\n            } : {})\n            }),\n        }),\n    });\n});\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\nimport { CreditCardCodeTooltip } from '../creditCard';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInputIframeContainer } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from './HostedCreditCardExpiryField';\nimport HostedCreditCardNameField from './HostedCreditCardNameField';\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {cardNameId && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport HostedCreditCardCodeField from './HostedCreditCardCodeField';\nimport HostedCreditCardExpiryField from \"./HostedCreditCardExpiryField\";\nimport HostedCreditCardNumberField from './HostedCreditCardNumberField';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n","import {\n    type CardInstrument,\n    type Instrument,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ComponentType, type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { withForm, type WithFormProps } from '../../ui/form';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n} from '../creditCard';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\n\nimport getHostedCreditCardValidationSchema, {\n    type HostedCreditCardValidationSchemaShape,\n} from './getHostedCreditCardValidationSchema';\nimport getHostedInstrumentValidationSchema, {\n    type HostedInstrumentValidationSchemaShape,\n} from './getHostedInstrumentValidationSchema';\nimport HostedCreditCardFieldset from './HostedCreditCardFieldset';\nimport HostedCreditCardValidation from './HostedCreditCardValidation';\n\nexport interface WithHostedCreditCardFieldsetProps {\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n}\n\nexport interface WithInjectedHostedCreditCardFieldsetProps {\n    hostedFieldset: ReactNode;\n    hostedStoredCardValidationSchema: ObjectSchema<HostedInstrumentValidationSchemaShape>;\n    hostedValidationSchema: ObjectSchema<HostedCreditCardValidationSchemaShape>;\n    getHostedFormOptions(selectedInstrument?: CardInstrument): Promise<LegacyHostedFormOptions>;\n    getHostedStoredCardValidationFieldset(selectedInstrument?: CardInstrument): ReactNode;\n}\n\ninterface WithCheckoutContextProps {\n    isCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n}\n\nexport default function withHostedCreditCardFieldset<\n    TProps extends WithHostedCreditCardFieldsetProps,\n>(\n    OriginalComponent: ComponentType<TProps & Partial<WithInjectedHostedCreditCardFieldsetProps>>,\n): ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>> {\n    const Component: FunctionComponent<\n        WithHostedCreditCardFieldsetProps &\n            WithCheckoutContextProps &\n            WithLanguageProps &\n            WithFormProps &\n            ConnectFormikProps<PaymentFormValues>\n    > = ({\n        formik: { setFieldValue, setFieldTouched, submitForm },\n        isCardCodeRequired,\n        isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n        isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        isSubmitted,\n        language,\n        method,\n        setSubmitted,\n        ...rest\n    }) => {\n        const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n        const getHostedFieldId: (name: string) => string = useCallback(\n            (name) => {\n                return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n            },\n            [method],\n        );\n\n        const getHostedFormOptions: (\n            selectedInstrument?: CardInstrument,\n        ) => Promise<LegacyHostedFormOptions> = useCallback(\n            async (selectedInstrument) => {\n                const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n                const styleContainerId = selectedInstrument\n                    ? isInstrumentCardCodeRequired\n                        ? getHostedFieldId('ccCvv')\n                        : undefined\n                    : getHostedFieldId('ccNumber');\n\n                return {\n                    fields: selectedInstrument\n                        ? {\n                              cardCodeVerification:\n                                  isInstrumentCardCodeRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_cvv_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccCvv'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                              cardNumberVerification:\n                                  isInstrumentCardNumberRequired && selectedInstrument\n                                      ? {\n                                            accessibilityLabel: language.translate(\n                                                'payment.credit_card_number_label',\n                                            ),\n                                            containerId: getHostedFieldId('ccNumber'),\n                                            instrumentId: selectedInstrument.bigpayToken,\n                                        }\n                                      : undefined,\n                          }\n                        : {\n                              cardCode: isCardCodeRequired\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                    }\n                                  : undefined,\n                              cardExpiry: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_expiration_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccExpiry'),\n                                  placeholder: language.translate(\n                                      'payment.credit_card_expiration_placeholder_text',\n                                  ),\n                              },\n                              cardName: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_name_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccName'),\n                              },\n                              cardNumber: {\n                                  accessibilityLabel: language.translate(\n                                      'payment.credit_card_number_label',\n                                  ),\n                                  containerId: getHostedFieldId('ccNumber'),\n                              },\n                          },\n                    styles: styleContainerId\n                        ? {\n                              default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                              error: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Error,\n                              ),\n                              focus: await getCreditCardInputStyles(\n                                  styleContainerId,\n                                  styleProps,\n                                  CreditCardInputStylesType.Focus,\n                              ),\n                          }\n                        : {},\n                    onBlur: ({ fieldType }) => {\n                        if (focusedFieldType === fieldType) {\n                            setFocusedFieldType(undefined);\n                        }\n                    },\n                    onCardTypeChange: ({ cardType }) => {\n                        setFieldValue('hostedForm.cardType', cardType);\n                    },\n                    onEnter: () => {\n                        setSubmitted(true);\n                        submitForm();\n                    },\n                    onFocus: ({ fieldType }) => {\n                        setFocusedFieldType(fieldType);\n                    },\n                    onValidate: ({ errors = {} }) => {\n                        forIn(errors, (fieldErrors = [], fieldType) => {\n                            const errorKey = `hostedForm.errors.${fieldType}`;\n\n                            setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                            if (fieldErrors[0]) {\n                                setFieldTouched(errorKey);\n                            }\n                        });\n                    },\n                };\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isCardCodeRequired,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                language,\n                method,\n                setFieldValue,\n                setFieldTouched,\n                setFocusedFieldType,\n                setSubmitted,\n                submitForm,\n            ],\n        );\n\n        const getHostedStoredCardValidationFieldset: (\n            selectedInstrument: CardInstrument,\n        ) => ReactNode = useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n        if (!method.config.isHostedFormEnabled) {\n            return <OriginalComponent {...(rest as TProps)} method={method} />;\n        }\n\n        return (\n            <OriginalComponent\n                {...(rest as TProps)}\n                getHostedFormOptions={getHostedFormOptions}\n                getHostedStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                hostedFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                hostedStoredCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n                hostedValidationSchema={getHostedCreditCardValidationSchema({ language })}\n                method={method}\n            />\n        );\n    };\n\n    return connectFormik(\n        withForm(withLanguage(withCheckout(mapFromCheckoutProps)(Component))),\n    ) as ComponentType<Omit<TProps, keyof WithInjectedHostedCreditCardFieldsetProps>>;\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutContextProps,\n    WithHostedCreditCardFieldsetProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    return ({ checkoutState }, { method }) => {\n        const {\n            data: { getConfig, getCustomer },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer) {\n            return null;\n        }\n\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            method,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        };\n    };\n};\n","import { type CheckoutSelectors, type Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    if (instrument.trustedShippingAddress) {\n        return false;\n    }  \n    \n    return !(instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV);\n}\n","import { type LineItemMap, type PaymentInstrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nimport { UntrustedShippingCardVerificationType } from './CardInstrumentFieldset';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider)) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!paymentMethod.config.isVaultingCvvEnabled;\n    }\n\n    // If the shipping address is untrusted, card verficiation mode has set with cvv, card code is required\n    if ('untrustedShippingCardVerificationMode' in instrument && instrument.untrustedShippingCardVerificationMode === UntrustedShippingCardVerificationType.CVV) {\n        return true;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(paymentMethod.config.isVaultingCvvEnabled || paymentMethod.config.cardCode);\n}\n","import { type CheckoutSelectors, type Instrument, type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(payload, options);\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport LegacyPaymentStrategy from './legacy-payment-strategy';\n\nconst createLegacyPaymentStrategy: PaymentStrategyFactory<LegacyPaymentStrategy> = (\n    paymentIntegrationService,\n) => new LegacyPaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createLegacyPaymentStrategy, [{ id: 'testgateway' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <TextInput\n                    {...field}\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-csc\"\n                    id={field.name}\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { type FieldProps } from 'formik';\nimport React, { type ChangeEvent, type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n}) => {\n    const handleChange = useCallback(\n        memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n            return (event: ChangeEvent<any>) => {\n                form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n            };\n        }),\n        [],\n    );\n\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps) => (\n            <TextInput\n                {...field}\n                autoComplete=\"cc-exp\"\n                id={field.name}\n                onChange={handleChange(field, form)}\n                placeholder={language.translate('payment.credit_card_expiration_placeholder_text')}\n                type=\"tel\"\n            />\n        ),\n        [handleChange, language],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_expiration_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(withLanguage(CreditCardExpiryField));\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear =\n        year.length === 4 ? year.slice(-2) : year ? year.slice(0, 2) : month.slice(2);\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} autoComplete=\"cc-name\" id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_name_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default memo(CreditCardNameField);\n","import creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, {\n    type ChangeEventHandler,\n    type FunctionComponent,\n    memo,\n    type ReactElement,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(\n        ({ field, form }: FieldProps<string>) => (\n            <CreditCardNumberInput field={field} form={form} />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"payment.credit_card_number_label\" />,\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\ninterface CreditCardNumberInputProps {\n    field: FieldProps<string>['field'];\n    form: FieldProps<string>['form'];\n}\n\nconst CreditCardNumberInput: FunctionComponent<CreditCardNumberInputProps> = ({ field, form }): ReactElement => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const nextSelectionEndRef = useRef(0);\n\n    useEffect(() => {\n        if (inputRef.current && inputRef.current.selectionEnd !== nextSelectionEndRef.current) {\n            inputRef.current.setSelectionRange(nextSelectionEndRef.current, nextSelectionEndRef.current);\n        }\n    });\n\n    const handleChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n        (event) => {\n            const separator = ' ';\n            const { value = '' } = event.target;\n            const { name, value: previousValue = '' } = field;\n            const selectionEnd = inputRef.current && inputRef.current.selectionEnd;\n\n            // Only allow digits and spaces\n            if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n                return form.setFieldValue(name, previousValue);\n            }\n\n            const maxLength = max(creditCardType(value).map((info) => max(info.lengths)));\n\n            const formattedValue = formatCreditCardNumber(\n                value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n                separator,\n            );\n\n            if (selectionEnd === value.length && value.length < formattedValue.length) {\n                nextSelectionEndRef.current = formattedValue.length;\n            } else {\n                nextSelectionEndRef.current = selectionEnd || 0;\n            }\n\n            void form.setFieldValue(name, formattedValue);\n        },\n        [field, form],\n    );\n\n    return (\n        <>\n            <TextInput\n                {...field}\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-number\"\n                id={field.name}\n                onChange={handleChange}\n                ref={inputRef}\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </>\n    );\n};\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter((gapIndex) => unformattedValue.length > gapIndex)\n        .reduce(\n            (output, gapIndex, index) =>\n                [output.slice(0, gapIndex + index), output.slice(gapIndex + index)].join(separator),\n            unformattedValue,\n        );\n}\n","import React, { type FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n\n            {shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" />}\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, type ObjectSchema, string } from 'yup';\n\nimport { type CreditCardFieldsetValues } from '../paymentMethod';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: (value) => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value) => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import React from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <>\n        {shouldShowNumberField && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" />}\n\n            {shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" />}\n        </div>\n    </>\n);\n\nexport default CreditCardValidation;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, type ObjectSchema, string, type StringSchema } from 'yup';\n\nimport type CardInstrumentFieldsetValues from './CardInstrumentFieldsetValues';\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string().required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined)\n                        .isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type HostedFieldType,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createLegacyPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/legacy';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport { withForm, type WithFormProps } from '../../ui/form';\nimport {\n    configureCardValidator,\n    CreditCardFieldset,\n    getCreditCardValidationSchema,\n} from '../creditCard';\nimport {\n    CardInstrumentFieldset,\n    type CardInstrumentFieldsetValues,\n    CreditCardValidation,\n    getInstrumentValidationSchema,\n    isCardInstrument,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nimport type CreditCardFieldsetValues from './CreditCardFieldsetValues';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    cardFieldset?: ReactNode;\n    cardValidationSchema?: ObjectSchema;\n    storedCardValidationSchema?: ObjectSchema;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    getStoredCardValidationFieldset?(selectedInstrument?: CardInstrument): ReactNode;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isCardCodeRequired: boolean;\n    isCustomerCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    shouldShowInstrumentFieldset: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    focusedHostedFieldType?: HostedFieldType;\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n    isPreloaderOn: boolean;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithFormProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n        isPreloaderOn: true,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await initializePayment(\n                {\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    integrations: [createLegacyPaymentStrategy],\n                },\n                this.getSelectedInstrument(),\n            ).then(() => this.setState({ isPreloaderOn: false }));\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(\n        _prevProps: Readonly<CreditCardPaymentMethodProps>,\n        prevState: Readonly<CreditCardPaymentMethodState>,\n    ): Promise<void> {\n        const {\n            deinitializePayment,\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        const { isAddingNewCard, selectedInstrumentId } = this.state;\n\n        setValidationSchema(method, this.getValidationSchema());\n\n        if (\n            selectedInstrumentId !== prevState.selectedInstrumentId ||\n            isAddingNewCard !== prevState.isAddingNewCard\n        ) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment(\n                    {\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                        integrations: [createLegacyPaymentStrategy],\n                    },\n                    this.getSelectedInstrument(),\n                );\n\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardFieldset,\n            getStoredCardValidationFieldset,\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            shouldShowInstrumentFieldset,\n            method,\n        } = this.props;\n\n        const { isAddingNewCard, isPreloaderOn } = this.state;\n\n        const selectedInstrument = this.getSelectedInstrument();\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments || isPreloaderOn;\n        const shouldShowNumberField = selectedInstrument\n            ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n            : false;\n        const shouldShowCardCodeField = selectedInstrument\n            ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n            : false;\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--creditCard\" data-test='credit-cart-payment-method'>\n                    {shouldShowInstrumentFieldset && (\n                        <CardInstrumentFieldset\n                            instruments={instruments}\n                            onDeleteInstrument={this.handleDeleteInstrument}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewCard}\n                            selectedInstrumentId={\n                                selectedInstrument && selectedInstrument.bigpayToken\n                            }\n                            validateInstrument={\n                                getStoredCardValidationFieldset ? (\n                                    getStoredCardValidationFieldset(selectedInstrument)\n                                ) : (\n                                    <CreditCardValidation\n                                        shouldShowCardCodeField={shouldShowCardCodeField}\n                                        shouldShowNumberField={shouldShowNumberField}\n                                    />\n                                )\n                            }\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && !cardFieldset && (\n                        <CreditCardFieldset\n                            shouldShowCardCodeField={\n                                method.config.cardCode || method.config.cardCode === null\n                            }\n                            shouldShowCustomerCodeField={method.config.requireCustomerCode}\n                        />\n                    )}\n\n                    {shouldShowCreditCardFieldset && cardFieldset}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getSelectedInstrument(): CardInstrument | undefined {\n        const { instruments } = this.props;\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        return find(instruments, { bigpayToken: selectedInstrumentId });\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument =\n            instruments.find((instrument) => instrument.defaultInstrument) || instruments[0];\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema | null {\n        const {\n            cardValidationSchema,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n            storedCardValidationSchema,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const selectedInstrument = this.getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && selectedInstrument) {\n            return (\n                storedCardValidationSchema ||\n                getInstrumentValidationSchema({\n                    instrumentBrand: selectedInstrument.brand,\n                    instrumentLast4: selectedInstrument.last4,\n                    isCardCodeRequired: isInstrumentCardCodeRequiredProp(\n                        selectedInstrument,\n                        method,\n                    ),\n                    isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                    language,\n                })\n            );\n        }\n\n        return (\n            cardValidationSchema ||\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            })\n        );\n    }\n\n    private handleUseNewCard: () => void = () => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const {\n            formik: { setFieldValue },\n        } = this.props;\n\n        setFieldValue('hostedForm.cardType', '');\n\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleDeleteInstrument: (id: string) => void = (id) => {\n        const {\n            instruments,\n            formik: { setFieldValue },\n        } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (instruments.length === 0) {\n            this.setState({\n                isAddingNewCard: true,\n                selectedInstrumentId: undefined,\n            });\n\n            setFieldValue('instrumentId', '');\n        } else if (selectedInstrumentId === id) {\n            this.setState({\n                selectedInstrumentId: this.getDefaultInstrumentId(),\n            });\n\n            setFieldValue('instrumentId', this.getDefaultInstrumentId());\n        }\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isCardInstrument),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: { getConfig, getCustomer, getInstruments, isPaymentDataRequired },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !customer || !method) {\n            return null;\n        }\n\n        const instruments = filterInstruments(getInstruments(method));\n        const isInstrumentFeatureAvailableProp = isInstrumentFeatureAvailable({\n            config,\n            customer,\n            paymentMethod: method,\n        });\n\n        return {\n            instruments,\n            isCardCodeRequired: method.config.cardCode || method.config.cardCode === null,\n            isCustomerCodeRequired: !!method.config.requireCustomerCode,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredSelector(checkoutState),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n            shouldShowInstrumentFieldset:\n                isInstrumentFeatureAvailableProp && instruments.length > 0,\n        };\n    };\n};\n\nexport default connectFormik(\n    withForm(\n        withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))),\n    ),\n);\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [...(discoverInfo.patterns || []), [810, 817]],\n    });\n\n    // Add support for Mada-BIN Cards.\n    creditCardType.addCard({\n        niceType: 'Mada',\n        type: 'mada',\n        patterns: [\n            400861, 401757, 407197, 407395, 409201, 410685, 412565, 417633, 419593, 422817, 422818,\n            422819, 428331, 428671, 428672, 428673, 431361, 432328, 434107, 439954, 440533, 440647,\n            440795, 445564, 446393, 446404, 446672, 455036, 455708, 457865, 458456, 462220, 468540,\n            468541, 468542, 468543, 483010, 483011, 483012, 484783, 486094, 486095, 486096, 489317,\n            489318, 489319, 493428, 504300, 506968, 508160, 513213, 520058, 521076, 524130, 524514,\n            529415, 529741, 530060, 530906, 531095, 531196, 532013, 535825, 535989, 536023, 537767,\n            539931, 543085, 543357, 549760, 554180, 557606, 558848, 585265, 588845, 588846, 588847,\n            588848, 588849, 588850, 588851, 588982, 588983, 589005, 589206, 604906, 605141, 636120,\n            968201, 968202, 968203, 968204, 968205, 968206, 968207, 968208, 968209, 968210, 968211,\n        ],\n        gaps: [4, 8, 12],\n        lengths: [16, 18, 19],\n        code: {\n            name: 'CVV',\n            size: 3,\n        },\n    });\n}\n","import { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({\n    name,\n}) => {\n    const renderInput = useCallback(\n        ({ field }: FieldProps) => <TextInput {...field} id={field.name} />,\n        [],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_customer_code_label\" />{' '}\n                <small className=\"optimizedCheckout-contentSecondary\">\n                    <TranslatedString id=\"common.optional_text\" />\n                </small>\n            </>\n        ),\n        [],\n    );\n\n    return <FormField input={renderInput} labelContent={labelContent} name={name} />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n"],"names":["InstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","this","props","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","value","undefined","render","instruments","onSelectInstrument","onUseNewInstrument","shouldHideExpiryDate","selectedInstrument","find","bigpayToken","className","DropdownTrigger","dropdown","InstrumentMenu","InstrumentSelectButton","instrument","testId","type","instrumentId","form","setFieldValue","name","map","key","InstrumentOption","onClick","InstrumentUseNewButton","InstrumentMenuItem","noop","handleClick","useCallback","cardType","mapFromInstrumentCardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","data","cardTitle","niceType","endingIn","last4","id","expiryDate","UntrustedShippingCardVerificationType","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","style","display","withIconContainer","height","viewBox","width","xmlns","fill","fillRule","rx","d","stroke","strokeWidth","x","y","fontFamily","fontSize","fontWeight","letterSpacing","opacity","size","Large","CreditCardInputStylesType","getCreditCardInputStyles","containerId","properties","Default","container","document","createElement","parentContainer","getElementById","Error","appendChild","Promise","resolve","FormContext","Provider","isSubmitted","setSubmitted","FormFieldContainer","hasError","TextInput","appearFocused","Focus","ref","element","getAppliedStyles","parentElement","removeChild","language","shape","hostedForm","required","errors","cardCode","test","message","translate","cardExpiry","cardName","cardNumber","isCardExpiryRequired","cardCodeVerification","cardNumberVerification","cardExpiryVerification","IconLock","labelContent","useMemo","TooltipTrigger","placement","tooltip","CreditCardCodeTooltip","IconHelp","FormField","input","additionalFields","cardCodeId","cardExpiryId","cardNameId","cardNumberId","focusedFieldType","withHostedCreditCardFieldset","OriginalComponent","connectFormik","withForm","withLanguage","withCheckout","mapFromCheckoutProps","formik","setFieldTouched","submitForm","isCardCodeRequired","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequired","isInstrumentCardNumberRequiredProp","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","method","rest","setFocusedFieldType","useState","getHostedFieldId","compact","gateway","join","getHostedFormOptions","styleProps","styleContainerId","fields","accessibilityLabel","placeholder","styles","default","error","focus","onBlur","fieldType","onCardTypeChange","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","config","isHostedFormEnabled","hostedFieldset","requireCustomerCode","CreditCardCustomerCodeField","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","hostedValidationSchema","getHostedCreditCardValidationSchema","checkoutState","getConfig","getCustomer","customer","paymentMethod","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","cart","getCart","lineItems","physicalItems","length","trustedShippingAddress","untrustedShippingCardVerificationMode","CVV","PROVIDERS_WITHOUT_CARD_CODE","includes","provider","digitalItems","giftCertificates","isVaultingCvvEnabled","StandardError","constructor","prototype","super","Object","setPrototypeOf","__proto__","captureStackTrace","stack","OrderFinalizationNotRequiredError","LegacyPaymentStrategy","_paymentIntegrationService","execute","payload","options","submitOrder","finalize","reject","initialize","deinitialize","module","paymentIntegrationService","resolveIds","assign","autoComplete","handleChange","event","split","RegExp","trimmedMonth","slice","trimmedYear","formatCreditCardExpiryDate","target","onChange","CreditCardNumberInput","inputRef","useRef","nextSelectionEndRef","useEffect","current","selectionEnd","setSelectionRange","previousValue","maxLength","max","info","lengths","formattedValue","separator","card","number","unformattedValue","unformatCreditCardNumber","gaps","filter","gapIndex","reduce","output","index","formatCreditCardNumber","replace","shouldShowCardCodeField","shouldShowCustomerCodeField","schema","ccCustomerCode","ccCvv","ccExpiry","ccName","ccNumber","parent","cvv","code","shouldShowNumberField","instrumentBrand","instrumentLast4","isCardNumberRequired","CreditCardPaymentMethod","Component","state","isAddingNewCard","isPreloaderOn","handleUseNewCard","setState","handleSelectInstrument","handleDeleteInstrument","getDefaultInstrumentId","initializePayment","loadInstruments","onUnhandledError","setValidationSchema","getValidationSchema","discoverInfo","creditCardType","getTypeInfo","visaInfo","updateCard","patterns","addCard","configureCardValidator","gatewayId","methodId","integrations","getSelectedInstrument","then","deinitializePayment","_prevProps","prevState","cardFieldset","getStoredCardValidationFieldset","isInitializing","isLoadingInstruments","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","isLoading","LoadingOverlay","hideContentWhenLoading","CardInstrumentFieldset","StoreInstrumentFieldset","defaultInstrument","cardValidationSchema","isPaymentDataRequired","storedCardValidationSchema","getInstrumentValidationSchema","getCreditCardValidationSchema","withPayment","filterInstruments","isCardInstrument","context","checkoutService","getInstruments","statuses","isCustomerCodeRequired"],"sourceRoot":""}