{"version":3,"file":"checkout-button-4d7aa64b.js","mappings":"qIAIe,SAASA,EAEpBC,EACAC,GAEA,OAAOC,OAAOC,QAAQC,GAAkB,gBAACJ,EAAS,iBAAKI,KAAW,CAAEH,cACxE,C,6HCFA,MAqDA,GAAe,E,SAAA,IArDgD,EAC3DI,iBAAmBC,uBAAsBC,sBACzCC,+BACAC,cACAC,WACAC,mBACAC,sBACAC,kCACAC,oBA+BA,IAAAC,YAAU,MA7B4C,iDAClD,UACUR,EAAmB,CACrBG,WACAI,eACA,CAACJ,GAAW,OAAF,QACNM,UAAWP,EACXE,mBACAM,QAAS,IAAML,EAAoBF,IAChCG,IAGf,CAAE,MAAOK,GAC2B,mBAArBP,GAAmCO,aAAiBC,OAC3DR,EAAiBO,EAEzB,CACJ,IAeW,MAb6C,iDACpD,UACUZ,EAAqB,CAAEI,YACjC,CAAE,MAAOQ,GAC2B,mBAArBP,GAAmCO,aAAiBC,OAC3DR,EAAiBO,EAEzB,CACJ,OASG,IAGC,uBAAKE,UAAWZ,EAA4B,YAAaC,EAAaY,GAAIZ,MAM9E,G","sources":["webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx"],"sourcesContent":["import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n"],"names":["toResolvableComponent","Component","resolveIds","Object","assign","props","checkoutService","deinitializeCustomer","initializeCustomer","checkoutButtonContainerClass","containerId","methodId","onUnhandledError","onWalletButtonClick","additionalInitializationOptions","integrations","useEffect","container","onClick","error","Error","className","id"],"sourceRoot":""}