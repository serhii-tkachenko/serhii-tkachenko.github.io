{"version":3,"file":"offline-payment-method-2435c189.js","mappings":"qIAIe,SAASA,EAEpBC,EACAC,GAEA,OAAOC,OAAOC,QAAQC,GAAkB,gBAACJ,EAAS,iBAAKI,KAAW,CAAEH,cACxE,C,qECHe,MAAeI,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAAC,KAAO,WCTyCH,aDcZA,UCbhCP,OAAOW,eACPX,OAAOW,eDYQC,KCZeL,GDYfK,KCVRC,UAAYN,EDYoB,mBAA5BH,MAAMU,kBACbV,MAAMU,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIX,MAAMQ,KAAKN,SAASS,KAE7C,EEfW,MAAMC,UAA0Cb,EAC3D,WAAAE,GACIG,MAAM,kEAENI,KAAKH,KAAO,oCACZG,KAAKF,KAAO,iCAChB,ECJW,MAAMO,EACjB,WAAAZ,CAAoBa,GAAA,KAAAA,2BAAAA,CAAwD,CAEtE,OAAAC,CAAQC,EAA2BC,G,4BASrC,aARMT,KAAKM,2BAA2BI,YAAY,OAAD,wBAEtCF,GAAO,CACVG,QAASH,EAAQG,QAAU,CAAEC,SAAUJ,EAAQG,QAAQC,eAAAA,IAE3DH,GAGGI,QAAQC,SACnB,E,0RAEA,QAAAC,GACI,OAAOF,QAAQG,OAAO,IAAIZ,EAC9B,CAEA,UAAAa,GACI,OAAOJ,QAAQC,SACnB,CAEA,YAAAI,GACI,OAAOL,QAAQC,SACnB,EC1BJ,MAIA,GCRIK,EDKAC,GACC,IAAIf,EAAuBe,GCL5BjC,EDO4D,CAAC,CAAEW,KAAM,yBCL9DV,OAAOC,OAAO8B,EAAQ,CAAEhC,WAAAA,KAJpB,IACXgC,EACAhC,E,WCIJ,MA2CA,GAAe,E,SAAA,IA3CqD,EAChEkC,SACAC,kBACAC,wBAEA,IAAAC,YAAU,MACgC,iDAClC,UACUF,EAAgBG,kBAAkB,CACpCC,UAAWL,EAAOM,QAClBf,SAAUS,EAAOO,GACjBC,aAAc,CAAC,IAEvB,CAAE,MAAOC,GACDA,aAAiBtC,OACjB+B,EAAiBO,EAEzB,CACJ,IAIO,MACqC,iDACpC,UACUR,EAAgBS,oBAAoB,CACtCL,UAAWL,EAAOM,QAClBf,SAAUS,EAAOO,IAEzB,CAAE,MAAOE,GACDA,aAAiBtC,OACjB+B,EAAiBO,EAEzB,CACJ,OAIL,CAACR,EAAiBD,EAAOM,QAASN,EAAOO,GAAIL,IAEzC,OAGgD,CACvD,CACIzB,KAAM,yB","sources":["webpack://checkout/./packages/payment-integration-api/src/toResolvableComponent.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offline-integration/src/offline-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offline-integration/src/create-offline-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/offline-payment-integration/src/OfflinePaymentMethod.tsx"],"sourcesContent":["import React, { type ComponentType } from 'react';\n\nimport type ResolvableComponent from './ResolvableComponent';\n\nexport default function toResolvableComponent<TProps extends Record<string, any>, TIdentifier>(\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Component: ComponentType<TProps>,\n    resolveIds: TIdentifier[],\n): ResolvableComponent<TProps, TIdentifier> {\n    return Object.assign((props: TProps) => <Component {...props} />, { resolveIds });\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        await this._paymentIntegrationService.submitOrder(\n            {\n                ...payload,\n                payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n            },\n            options,\n        );\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OfflinePaymentStrategy from './offline-payment-strategy';\n\nconst createOfflinePaymentStrategy: PaymentStrategyFactory<OfflinePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OfflinePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOfflinePaymentStrategy, [{ type: 'PAYMENT_TYPE_OFFLINE' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { createOfflinePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/offline';\nimport { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst OfflinePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    onUnhandledError,\n}) => {\n    useEffect(() => {\n        const initializePayment = async () => {\n            try {\n                await checkoutService.initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    integrations: [createOfflinePaymentStrategy],\n                });\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void initializePayment();\n\n        return () => {\n            const deinitializePayment = async () => {\n                try {\n                    await checkoutService.deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deinitializePayment();\n        };\n    }, [checkoutService, method.gateway, method.id, onUnhandledError]);\n\n    return null;\n};\n\nexport default toResolvableComponent(OfflinePaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_OFFLINE',\n    },\n]);\n"],"names":["toResolvableComponent","Component","resolveIds","Object","assign","props","StandardError","Error","constructor","message","prototype","super","name","type","setPrototypeOf","this","__proto__","captureStackTrace","stack","OrderFinalizationNotRequiredError","OfflinePaymentStrategy","_paymentIntegrationService","execute","payload","options","submitOrder","payment","methodId","Promise","resolve","finalize","reject","initialize","deinitialize","module","paymentIntegrationService","method","checkoutService","onUnhandledError","useEffect","initializePayment","gatewayId","gateway","id","integrations","error","deinitializePayment"],"sourceRoot":""}