{"version":3,"file":"worldpay-credit-card-payment-method-138b5ab8.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/hooks/useHostedCreditCard.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/worldpayaccess-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/worldpayaccess-integration/src/create-worldpayaccess-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/worldpay-access-integration/src/WorldpayCreditCardPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import {\n    type CardInstrument,\n    type CheckoutSelectors,\n    type LanguageService,\n    type LegacyHostedFormOptions,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { compact, forIn } from 'lodash';\nimport React, { type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardValidation } from '../components';\n\nexport interface UseHostedFormOptions {\n    checkoutState: CheckoutSelectors;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n}\n\nexport const useHostedCreditCard = ({\n    checkoutState,\n    method,\n    language,\n    paymentForm,\n}: UseHostedFormOptions) => {\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const { config } = method;\n    const { cardCode: requireCardCode } = config;\n\n    const isCardCodeRequired = requireCardCode || requireCardCode === null;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const getHostedFormOptions = useCallback(\n        async (selectedInstrument: CardInstrument): Promise<LegacyHostedFormOptions> => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId;\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    return { getHostedStoredCardValidationFieldset, getHostedFormOptions };\n};\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { merge, some } from 'lodash';\n\nimport { CreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/credit-card-integration';\nimport {\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithWorldpayAccessPaymentInitializeOptions,\n    WorldpayAccess3DSOptions,\n    WorldpayAccessAdditionalAction,\n    WorldpayAccessPaymentInitializeOptions,\n} from './worldpayaccess-payment-options';\n\nconst IFRAME_NAME = 'worldpay_hosted_payment_page';\nconst IFRAME_HIDDEN_NAME = 'worldpay_hosted_hidden_payment_page';\nconst PAYMENT_CANNOT_CONTINUE = 'Payment cannot continue';\n\nlet submit: (paymentPayload: OrderPaymentRequestBody) => Promise<void>;\n\nexport default class WorldpayAccessPaymentStrategy extends CreditCardPaymentStrategy {\n    private _initializeOptions?: WorldpayAccessPaymentInitializeOptions;\n\n    async initialize(\n        options?: PaymentInitializeOptions & WithWorldpayAccessPaymentInitializeOptions,\n    ): Promise<void> {\n        this._initializeOptions = options && options.worldpay;\n\n        if (!this._initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return super.initialize(options);\n    }\n\n    async execute(\n        orderRequest: OrderRequestBody,\n        options?: PaymentInitializeOptions,\n    ): Promise<void> {\n        const { payment } = orderRequest;\n\n        submit = this._submitAdditionalAction();\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        try {\n            return await super.execute(orderRequest, options);\n        } catch (error) {\n            return this._processAdditionalAction(error, payment);\n        }\n    }\n\n    private async _processAdditionalAction(\n        error: unknown,\n        payment: OrderPaymentRequestBody,\n    ): Promise<void> {\n        if (\n            !isRequestError(error) ||\n            !some(error.body.errors, { code: 'additional_action_required' })\n        ) {\n            return Promise.reject(error);\n        }\n\n        return new Promise((resolve, reject) => {\n            const messageEvent = async (event: MessageEvent) => {\n                if (typeof event.data !== 'string' || !this._isValidJsonWithSessionId(event.data)) {\n                    return reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                }\n\n                window.removeEventListener('message', messageEvent);\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                iframeHidden.remove();\n\n                const data = JSON.parse(event.data);\n                const paymentPayload = merge({}, payment, {\n                    paymentData: { threeDSecure: { token: data.SessionId } },\n                });\n\n                try {\n                    resolve(await submit(paymentPayload));\n                } catch (submitError) {\n                    if (\n                        !isRequestError(submitError) ||\n                        !some(submitError.body.errors, { code: 'three_d_secure_required' })\n                    ) {\n                        return reject(submitError);\n                    }\n\n                    if (!this._initializeOptions) {\n                        return reject(\n                            new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n                        );\n                    }\n\n                    const { onLoad } = this._initializeOptions;\n\n                    const frame = this._createIframe(submitError.body.three_ds_result);\n\n                    try {\n                        onLoad(frame, () => reject(new Error('Payment was cancelled')));\n                    } catch (onLoadError) {\n                        reject(new Error(PAYMENT_CANNOT_CONTINUE));\n                    }\n                }\n            };\n\n            window.addEventListener('message', messageEvent);\n\n            let iframeHidden: HTMLIFrameElement;\n\n            try {\n                iframeHidden = this._createHiddenIframe(error.body);\n            } catch (e) {\n                window.removeEventListener('message', messageEvent);\n                throw new Error(PAYMENT_CANNOT_CONTINUE);\n            }\n        });\n    }\n\n    private _createHiddenIframe(body: WorldpayAccessAdditionalAction): HTMLIFrameElement {\n        const iframe = document.createElement('iframe');\n\n        document.body.appendChild(iframe);\n\n        if (!iframe.contentWindow) {\n            throw new Error();\n        }\n\n        iframe.id = IFRAME_HIDDEN_NAME;\n        iframe.height = '0px';\n        iframe.width = '0px';\n\n        const form = document.createElement('form');\n        const formId = 'collectionForm';\n\n        form.id = formId;\n        form.name = 'devicedata';\n        form.method = 'post';\n\n        const url = body.additional_action_required.data.redirect_url;\n\n        form.action = url;\n\n        const inputBin = document.createElement('input');\n\n        inputBin.name = 'Bin';\n        inputBin.type = 'hidden';\n        inputBin.value = body.provider_data.source_id;\n        form.appendChild(inputBin);\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = body.provider_data.data;\n        form.appendChild(inputJWT);\n\n        const button = document.createElement('button');\n\n        button.type = 'submit';\n        button.id = 'btnsubmit';\n        form.appendChild(button);\n\n        if (navigator.userAgent.match('Firefox')) {\n            iframe.srcdoc = form.outerHTML;\n        } else {\n            iframe.contentWindow.document.body.appendChild(form);\n        }\n\n        const script = document.createElement('script');\n\n        script.innerHTML = `\n            document.getElementById('${formId}').submit();\n        `;\n        iframe.contentWindow.document.body.appendChild(script);\n\n        return iframe;\n    }\n\n    private _createIframe(data: WorldpayAccess3DSOptions): HTMLIFrameElement {\n        const form = document.createElement('form');\n\n        form.id = 'challengeForm';\n        form.method = 'POST';\n        form.action = data.acs_url;\n\n        const inputJWT = document.createElement('input');\n\n        inputJWT.name = 'JWT';\n        inputJWT.type = 'hidden';\n        inputJWT.value = data.payer_auth_request;\n        form.appendChild(inputJWT);\n\n        const merchant = document.createElement('input');\n\n        merchant.name = 'MD';\n        merchant.type = 'hidden';\n        merchant.value = `merchantSessionId=${data.merchant_data}`;\n        form.appendChild(merchant);\n\n        const script = document.createElement('script');\n\n        script.type = 'text/javascript';\n        script.innerHTML =\n            \"window.onload = function() { document.getElementById('challengeForm').submit(); }\";\n\n        const iframe = document.createElement('iframe');\n\n        iframe.name = IFRAME_NAME;\n        iframe.height = '400';\n        iframe.width = '100%';\n        iframe.srcdoc = `${form.outerHTML} ${script.outerHTML}`;\n\n        return iframe;\n    }\n\n    private _submitAdditionalAction() {\n        if (this._shouldRenderHostedForm) {\n            if (!this._hostedForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const hostedForm = this._hostedForm;\n\n            return async (paymentPayload: OrderPaymentRequestBody) => {\n                await hostedForm.submit(paymentPayload);\n            };\n        }\n\n        return async (paymentPayload: OrderPaymentRequestBody) => {\n            await this._paymentIntegrationService.submitPayment(paymentPayload);\n        };\n    }\n\n    private _isValidJsonWithSessionId(str: string) {\n        try {\n            const data = JSON.parse(str);\n\n            if (data.SessionId) {\n                return true;\n            }\n\n            return false;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport WorldpayAccessPaymetStrategy from './worldpayaccess-payment-strategy';\n\nconst createWorldpayAccessPaymentStrategy: PaymentStrategyFactory<WorldpayAccessPaymetStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new WorldpayAccessPaymetStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createWorldpayAccessPaymentStrategy, [{ id: 'worldpayaccess' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createWorldpayAccessPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/worldpayaccess';\nimport { compact, forIn } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { CreditCardPaymentMethodComponent } from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    getHostedCreditCardValidationSchema,\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardFieldset,\n    useHostedCreditCard,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { Modal } from '@bigcommerce/checkout/ui';\n\ninterface WorldpayPaymentMethodRef {\n    paymentPageContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst WorldpayCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    language,\n    paymentForm,\n    checkoutState,\n    checkoutService,\n    method,\n    ...rest\n}) => {\n    const [threeDSecureVerification, setThreeDSecureVerification] = useState<HTMLElement>();\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const { getHostedStoredCardValidationFieldset } = useHostedCreditCard({\n        checkoutState,\n        method,\n        language,\n        paymentForm,\n    });\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const ref = useRef<WorldpayPaymentMethodRef>({\n        paymentPageContentRef: createRef(),\n    });\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const cancelWorldpayModalFlow = useCallback(() => {\n        setThreeDSecureVerification(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n    const initializeWorldpayPayment = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument: CardInstrument) => {\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createWorldpayAccessPaymentStrategy],\n                creditCard: {\n                    form: getHostedFormOptions && (await getHostedFormOptions(selectedInstrument)),\n                },\n                worldpay: {\n                    onLoad(content: HTMLIFrameElement, cancel: () => void) {\n                        setThreeDSecureVerification(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                },\n            });\n        },\n        [checkoutService, getHostedFormOptions],\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const appendPaymentPageContent = useCallback(() => {\n        if (threeDSecureVerification) {\n            ref.current.paymentPageContentRef.current?.appendChild(threeDSecureVerification);\n        }\n    }, [threeDSecureVerification]);\n\n    return (\n        <>\n            <CreditCardPaymentMethodComponent\n                {...rest}\n                cardFieldset={\n                    <HostedCreditCardFieldset\n                        additionalFields={\n                            method.config.requireCustomerCode && (\n                                <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                            )\n                        }\n                        cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n                        cardExpiryId={getHostedFieldId('ccExpiry')}\n                        cardNameId={getHostedFieldId('ccName')}\n                        cardNumberId={getHostedFieldId('ccNumber')}\n                        focusedFieldType={focusedFieldType}\n                    />\n                }\n                cardValidationSchema={hostedValidationSchema}\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeWorldpayPayment}\n                language={language}\n                method={method}\n                paymentForm={paymentForm}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n            <Modal\n                isOpen={!!threeDSecureVerification}\n                onAfterOpen={appendPaymentPageContent}\n                onRequestClose={cancelWorldpayModalFlow}\n                shouldShowCloseButton={true}\n            >\n                <div ref={ref.current.paymentPageContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    WorldpayCreditCardPaymentMethod,\n    [{ id: 'worldpayaccess' }],\n);\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","TextInputIframeContainer","FormField","TranslatedString","additionalFields","cardCodeId","cardExpiryId","cardNameId","cardNumberId","focusedFieldType","Fieldset","legend","Legend","hidden","className","HostedCreditCardNumberField","HostedCreditCardExpiryField","Boolean","HostedCreditCardCodeField","language","shape","hostedForm","required","errors","cardCode","test","message","translate","value","cardExpiry","cardName","cardNumber","useHostedCreditCard","checkoutState","method","paymentForm","setFieldTouched","setFieldValue","setSubmitted","submitForm","config","requireCardCode","isCardCodeRequired","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","getHostedFieldId","compact","gateway","join","setFocusedFieldType","useState","getHostedStoredCardValidationFieldset","selectedInstrument","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","undefined","getHostedFormOptions","styleProps","styleContainerId","fields","cardCodeVerification","accessibilityLabel","containerId","instrumentId","bigpayToken","cardNumberVerification","placeholder","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","type","useMemo","placement","tooltip","isCardExpiryRequired","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Promise","resolve","Provider","isSubmitted","noop","hasError","ref","element","parentElement","removeChild","testId","props","NotInitializedErrorType","StandardError","constructor","prototype","super","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","options","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","formOptions","creditCard","form","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","isHostedFormEnabled","values","every","isNil","PAYMENT_CANNOT_CONTINUE","WorldpayAccessPaymentStrategy","_initializeOptions","worldpay","orderRequest","_submitAdditionalAction","_processAdditionalAction","some","body","code","messageEvent","event","data","_isValidJsonWithSessionId","window","removeEventListener","iframeHidden","remove","JSON","parse","paymentPayload","merge","threeDSecure","token","SessionId","submitError","onLoad","frame","_createIframe","three_ds_result","onLoadError","addEventListener","_createHiddenIframe","e","iframe","contentWindow","height","width","formId","url","additional_action_required","redirect_url","action","inputBin","provider_data","source_id","inputJWT","button","navigator","userAgent","match","srcdoc","outerHTML","script","innerHTML","acs_url","payer_auth_request","merchant","merchant_data","str","module","paymentIntegrationService","resolveIds","assign","toResolvableComponent","checkoutService","rest","threeDSecureVerification","setThreeDSecureVerification","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","hostedStoredCardValidationSchema","getHostedInstrumentValidationSchema","useRef","paymentPageContentRef","createRef","cancelWorldpayModalFlow","current","cancelThreeDSecureVerification","initializeWorldpayPayment","initializePayment","integrations","content","cancel","hostedValidationSchema","getHostedCreditCardValidationSchema","appendPaymentPageContent","cardFieldset","HostedCreditCardFieldset","requireCustomerCode","CreditCardCustomerCodeField","cardValidationSchema","deinitializePayment","getStoredCardValidationFieldset","storedCardValidationSchema","Modal","isOpen","onAfterOpen","onRequestClose","shouldShowCloseButton"],"sourceRoot":""}