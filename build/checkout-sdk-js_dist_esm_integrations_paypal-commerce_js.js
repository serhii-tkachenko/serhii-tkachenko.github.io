"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_paypal-commerce_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js":
/*!*******************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPayPalCommerceAlternativeMethodsButtonStrategy: () => (/* binding */ Oe),\n/* harmony export */   createPayPalCommerceAlternativeMethodsPaymentStrategy: () => (/* binding */ Je),\n/* harmony export */   createPayPalCommerceButtonStrategy: () => (/* binding */ ye),\n/* harmony export */   createPayPalCommerceCreditButtonStrategy: () => (/* binding */ Se),\n/* harmony export */   createPayPalCommerceCreditCardsPaymentStrategy: () => (/* binding */ st),\n/* harmony export */   createPayPalCommerceCreditCustomerStrategy: () => (/* binding */ $),\n/* harmony export */   createPayPalCommerceCreditPaymentStrategy: () => (/* binding */ Le),\n/* harmony export */   createPayPalCommerceCustomerStrategy: () => (/* binding */ V),\n/* harmony export */   createPayPalCommerceFastlaneCustomerStrategy: () => (/* binding */ ue),\n/* harmony export */   createPayPalCommerceFastlanePaymentStrategy: () => (/* binding */ mt),\n/* harmony export */   createPayPalCommercePaymentStrategy: () => (/* binding */ je),\n/* harmony export */   createPayPalCommerceRatePayPaymentStrategy: () => (/* binding */ ct),\n/* harmony export */   createPayPalCommerceVenmoButtonStrategy: () => (/* binding */ be),\n/* harmony export */   createPayPalCommerceVenmoCustomerStrategy: () => (/* binding */ G),\n/* harmony export */   createPayPalCommerceVenmoPaymentStrategy: () => (/* binding */ He)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);\nvar l,c={};function p(e,t){return Object.assign(e,{resolveIds:t})}c.d=(e,t)=>{for(var i in t)c.o(t,i)&&!c.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class u extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class h extends u{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(l||(l={}));class m extends u{constructor(e){super(function(e){switch(e){case l.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case l.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case l.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case l.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case l.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case l.MissingCheckoutConfig:case l.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case l.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case l.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case l.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case l.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case l.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case l.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class y extends u{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}const g={body:{},headers:{},status:0};class v extends u{constructor(e,{message:t,errors:i}={}){const{body:n,headers:o,status:r}=e||g;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=o,this.status=r,this.errors=i||[]}}var f,S,I,C,b,w,P,O;!function(e){e.BuyNow=\"BUY_NOW\"}(f||(f={})),function(e){e.Possible=\"POSSIBLE\",e.No=\"NO\",e.Unknown=\"UNKNOWN\",e.Yes=\"YES\"}(S||(S={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(I||(I={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(C||(C={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(b||(b={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(w||(w={})),function(e){e.OXXO=\"oxxo\"}(P||(P={})),function(e){e.Approved=\"APPROVED\",e.Created=\"CREATED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\",e.PollingStop=\"POLLING_STOP\",e.PollingError=\"POLLING_ERROR\"}(O||(O={}));var k=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class A{constructor(e,t,i,n){this.formPoster=e,this.paymentIntegrationService=t,this.paypalCommerceRequestSender=i,this.paypalCommerceScriptLoader=n}loadPayPalSdk(e,t,i,n){return k(this,void 0,void 0,function*(){const o=this.paymentIntegrationService.getState(),r=t||o.getCartOrThrow().currency.code,a=o.getPaymentMethodOrThrow(e);return this.paypalSdk=yield this.paypalCommerceScriptLoader.getPayPalSDK(a,r,i,n),this.paypalSdk})}getPayPalSdkOrThrow(){if(!this.paypalSdk)throw new h;return this.paypalSdk}createBuyNowCartOrThrow(e){return k(this,void 0,void 0,function*(){const t=e.getBuyNowCartRequestBody();if(!t)throw new m(l.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(t)}catch(e){throw new y}})}createOrder(e,t){return k(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getCartOrThrow().id,{orderId:n}=yield this.paypalCommerceRequestSender.createOrder(e,Object.assign({cartId:i},t));return n})}createOrderCardFields(e,t){return k(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getCartOrThrow().id,{orderId:n,setupToken:o}=yield this.paypalCommerceRequestSender.createOrder(e,Object.assign({cartId:i},t));return Object.assign({orderId:n},o?{setupToken:o}:{})})}updateOrder(){return k(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getConsignmentsOrThrow()[0];try{yield this.paypalCommerceRequestSender.updateOrder({availableShippingOptions:i.availableShippingOptions,cartId:t.id,selectedShippingOption:i.selectedShippingOption})}catch(e){throw new v}})}getOrderStatus(e,t){return k(this,void 0,void 0,function*(){try{const{status:i}=yield this.paypalCommerceRequestSender.getOrderStatus(e,t);return i}catch(e){throw new v}})}tokenizePayment(e,t){const i=this.paymentIntegrationService.getState().getCartOrThrow();if(!t)throw new m(l.MissingOrderId);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",action:\"set_external_checkout\",provider:e,order_id:t},i.source===f.BuyNow&&{cart_id:i.id}))}submitPayment(e,t,i){return k(this,void 0,void 0,function*(){const n={formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:null,method_id:e,paypal_account:{order_id:t}}};yield this.paymentIntegrationService.submitPayment(Object.assign({methodId:e,paymentData:n},i?{gatewayId:i}:{}))})}getShippingOptionOrThrow(e){const t=this.paymentIntegrationService.getState().getConsignmentsOrThrow()[0],i=t.availableShippingOptions||[],n=i.find(e=>e.isRecommended),o=(e?i.find(t=>t.id===e):i.find(e=>{var i;return e.id===(null===(i=t.selectedShippingOption)||void 0===i?void 0:i.id)}))||n||i[0];if(!o)throw new Error(\"Your order can't be shipped to this address\");return o}getAddress(e){return{firstName:(null==e?void 0:e.firstName)||\"\",lastName:(null==e?void 0:e.lastName)||\"\",email:(null==e?void 0:e.email)||\"\",phone:(null==e?void 0:e.phone)||\"\",company:\"\",address1:(null==e?void 0:e.address1)||\"\",address2:(null==e?void 0:e.address2)||\"\",city:(null==e?void 0:e.city)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",stateOrProvince:\"\",stateOrProvinceCode:(null==e?void 0:e.stateOrProvinceCode)||\"\",customFields:[]}}getBillingAddressFromOrderDetails({payer:e}){var t,i;return this.getAddress({firstName:e.name.given_name,lastName:e.name.surname,email:e.email_address,address1:e.address.address_line_1,address2:e.address.address_line_2,city:e.address.admin_area_2,countryCode:e.address.country_code,postalCode:e.address.postal_code,stateOrProvinceCode:e.address.admin_area_1,phone:null===(i=null===(t=e.phone)||void 0===t?void 0:t.phone_number)||void 0===i?void 0:i.national_number})}getShippingAddressFromOrderDetails(e){const{payer:t,purchase_units:i}=e,{address:n,name:{full_name:o}}=i[0].shipping,[r,...a]=o.split(\" \");return this.getAddress({firstName:r,lastName:a.join(\" \"),email:t.email_address,address1:n.address_line_1,address2:n.address_line_2,city:n.admin_area_2,countryCode:n.country_code,postalCode:n.postal_code,stateOrProvinceCode:n.admin_area_1})}getValidButtonStyle(e){const{color:t,height:i,label:n,shape:o}=e||{},a={color:t&&b[t]?t:void 0,height:this.getValidHeight(i),label:n&&C[n]?n:void 0,shape:o&&w[o]?o:void 0};return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(a,lodash__WEBPACK_IMPORTED_MODULE_3__.isNil)}getValidHeight(e){return e&&\"number\"==typeof e?e>55?55:e<25?25:e:40}removeElement(e){const t=e&&document.getElementById(e);t&&(t.style.display=\"none\")}}const E=\"This API endpoint is for internal use only and may change in the future\";var T;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(T||(T={}));const z=T,F={\"X-Checkout-SDK-Version\":\"1.819.0\"};var B=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class D{constructor(e){this.requestSender=e}createOrder(e,t){return B(this,void 0,void 0,function*(){const i=`/api/storefront/payment/${e}`,n=t,o=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.post(i,{headers:o,body:n})).body})}updateOrder(e){return B(this,void 0,void 0,function*(){const t=e,i=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.put(\"/api/storefront/initialization/paypalcommerce\",{headers:i,body:t})).body})}getOrderStatus(e=\"paypalcommerce\",t){return B(this,void 0,void 0,function*(){const i=`/api/storefront/initialization/${e}`,n=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.get(i,Object.assign({headers:n},t))).body})}}var M=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class x{constructor(e){this.scriptLoader=e,this.window=window}getPayPalSDK(e,t,i,n){return M(this,void 0,void 0,function*(){const o=this.getPayPalSdkScriptConfigOrThrow(e,t,i);return this.loadPayPalSDK(o,n)})}loadPayPalSDK(e,t=!1){return M(this,void 0,void 0,function*(){if(!this.window.paypal||t){const t=this.transformConfig(e.options),i=this.transformConfig(e.attributes),n=`https://www.paypal.com/sdk/js?${new URLSearchParams(t).toString()}`;yield this.scriptLoader.loadScript(n,{async:!0,attributes:i})}if(!this.window.paypal)throw new h;return this.window.paypal})}getPayPalSdkScriptConfigOrThrow(e,t,i=!0){const{id:n,clientToken:o,initializationData:r}=e;if(!(null==r?void 0:r.clientId))throw new m(l.MissingPaymentMethod);const{intent:a,clientId:s,merchantId:d,buyerCountry:c,attributionId:p,isVenmoEnabled:u,isHostedCheckoutEnabled:h,isPayPalCreditAvailable:y,isDeveloperModeApplicable:g,availableAlternativePaymentMethods:v=[],enabledAlternativePaymentMethods:f=[],isGooglePayEnabled:S}=r,I=h||i,C=\"paypalcommercecreditcards\"===n,b=C?[\"card\"]:[],w=y?[\"credit\",\"paylater\"]:[],P=i||!I,O=u?[\"venmo\"]:[],k=P?f:[],A=S?[\"googlepay\"]:[],E=i?[\"card-fields\"]:[],T=[...C?[]:[\"card\"],...y?[]:[\"credit\",\"paylater\"],...u?[]:[\"venmo\"],...P?v.filter(e=>!f.includes(e)):v],z=[...b,...w,...O,...k];return{options:Object.assign({\"client-id\":s,\"merchant-id\":d,\"enable-funding\":z.length>0?z:void 0,\"disable-funding\":T.length>0?T:void 0,commit:I,components:[\"buttons\",\"hosted-fields\",\"payment-fields\",\"legal\",...A,...E],currency:t,intent:a},g&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":p,\"data-client-token\":o}}}transformConfig(e){let t={};return Object.keys(e).forEach(i=>{const n=e[i];null==n||\"\"===n||Array.isArray(n)&&0===n.length||(t=Object.assign(Object.assign({},t),{[i]:Array.isArray(n)?n.join(\",\"):n}))}),t}}const N=i=>{const{getHost:o}=i.getState();return new A((0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),i,new D((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)({host:o()})),new x((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)()))};class U extends u{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}var j=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class _{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.onError=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return j(this,void 0,void 0,function*(){const{paypalcommerce:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.');this.onError=t.onError||lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return j(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signInCustomer(e,t),Promise.resolve()})}signOut(e){return j(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){var i,n;const{container:o,onClick:r,onComplete:a}=t,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{isHostedCheckoutEnabled:l,paymentButtonStyles:c,isAppSwitchEnabled:p}=d.initializationData||{},{checkoutTopButtonStyles:u}=c||{},h=Object.assign(Object.assign(Object.assign({},this.isPaypalCommerceAppSwitchEnabled(e)&&{appSwitchWhenAvailable:!0}),{createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommerce\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)}),r&&{onClick:()=>r()}),m=Object.assign(Object.assign({},!p&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(t,i)=>this.onHostedCheckoutApprove(t,i,e,a)}),y=Object.assign(Object.assign({fundingSource:s.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},u),{height:36}))},h),l&&m),g=s.Buttons(y);g.isEligible()?(null===(i=g.hasReturned)||void 0===i?void 0:i.call(g))&&this.isPaypalCommerceAppSwitchEnabled(e)?null===(n=g.resume)||void 0===n||n.call(g):g.render(`#${o}`):this.paypalCommerceIntegrationService.removeElement(o)}onHostedCheckoutApprove(e,t,i,n){return j(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n()}catch(e){this.handleError(e)}})}onShippingAddressChange(e){return j(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}onShippingOptionsChange(e){return j(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const V=p(e=>new _(e,N(e)),[{id:\"paypalcommerce\"}]);var R=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class L{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.onError=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return R(this,void 0,void 0,function*(){const{paypalcommercecredit:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.');this.onError=t.onError||lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return R(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return R(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){const{container:i,onComplete:n,onClick:o}=t,r=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),a=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{isHostedCheckoutEnabled:s,paymentButtonStyles:d,isAppSwitchEnabled:l}=a.initializationData||{},{checkoutTopButtonStyles:c}=d||{},p=Object.assign({createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecredit\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)},o&&{onClick:()=>o()}),u=Object.assign(Object.assign({},!l&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(t,i)=>this.onHostedCheckoutApprove(t,i,e,n)}),h=[r.FUNDING.PAYLATER,r.FUNDING.CREDIT];let m=!1;h.forEach(e=>{if(!m){const t=Object.assign(Object.assign({fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},c),{height:36}))},p),s&&u),n=r.Buttons(t);n.isEligible()&&(n.render(`#${i}`),m=!0)}}),m||this.paypalCommerceIntegrationService.removeElement(i)}onHostedCheckoutApprove(e,t,i,n){return R(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n()}catch(e){this.handleError(e)}})}onShippingAddressChange(e){return R(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}onShippingOptionsChange(e){return R(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}}const $=p(e=>new L(e,N(e)),[{id:\"paypalcommercecredit\"}]);var q=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class H{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return q(this,void 0,void 0,function*(){const{paypalcommercevenmo:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.');this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return q(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return q(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){const{container:i,onClick:n}=t,o=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:a}=r.initializationData||{},{checkoutTopButtonStyles:s}=a||{},d=Object.assign({fundingSource:o.FUNDING.VENMO,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},s),{height:36})),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmo\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)},n&&{onClick:()=>n()}),l=o.Buttons(d);l.isEligible()?l.render(`#${i}`):this.paypalCommerceIntegrationService.removeElement(i)}}const G=p(e=>new H(e,N(e)),[{id:\"paypalcommercevenmo\"}]);var Y,W,K,J,X,Z,Q,ee,te=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ie{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,i){return te(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const n=this.getPayPalFastlaneSdkConfiguration(e,t,i);if(yield this.loadPayPalSdk(n),!this.window.paypalFastlaneSdk)throw new h}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,i,n){return te(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||n){const n=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,i);yield this.loadPayPalSdk(n)}if(!this.window.paypalGooglePay)throw new h;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return te(this,void 0,void 0,function*(){if(!this.window.paypalApms){const i=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(i),!this.window.paypalApms)throw new h}return this.window.paypalApms})}getPayPalMessages(e,t){return te(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const i=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(i)}if(!this.window.paypalMessages)throw new h;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return te(this,void 0,void 0,function*(){const i=this.transformConfig(e),n=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(i).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:n})})}getPayPalFastlaneSdkConfiguration(e,t,i){const{clientToken:n,initializationData:o}=e;if(!o||!o.clientId)throw new m(l.MissingPaymentMethod);const{intent:r,clientId:a,merchantId:s,attributionId:d}=o;return{options:{\"client-id\":a,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"buttons\",\"payment-fields\",\"hosted-fields\",\"three-domain-secure\"],currency:t,intent:r},attributes:{\"data-client-metadata-id\":i.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":d,\"data-sdk-client-token\":n}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,i=!0){const{clientToken:n,initializationData:o}=e;if(!o||!o.clientId)throw new m(l.MissingPaymentMethod);const{intent:r,clientId:a,merchantId:s,buyerCountry:d,attributionId:c,isHostedCheckoutEnabled:p,isDeveloperModeApplicable:u}=o,h=p||i;return{options:Object.assign({\"client-id\":a,\"merchant-id\":s,commit:h,components:[\"googlepay\"],currency:t,intent:r},u&&{\"buyer-country\":d}),attributes:{\"data-partner-attribution-id\":c,\"data-client-token\":n,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:i}=e;if(!i||!i.clientId)throw new m(l.MissingPaymentMethod);const{intent:n,clientId:o,merchantId:r,buyerCountry:a,attributionId:s,isDeveloperModeApplicable:d,availableAlternativePaymentMethods:c=[],enabledAlternativePaymentMethods:p=[]}=i,u=p,h=c.filter(e=>!p.includes(e));return{options:Object.assign({\"client-id\":o,\"merchant-id\":r,\"enable-funding\":u.length>0?u:void 0,\"disable-funding\":h.length>0?h:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:n},d&&{\"buyer-country\":a}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:i}=e;if(!i||!i.clientId)throw new m(l.MissingPaymentMethod);const{clientId:n,merchantId:o,attributionId:r,isDeveloperModeApplicable:a,buyerCountry:s}=i;return{options:Object.assign({\"client-id\":n,\"merchant-id\":o,components:[\"messages\"],currency:t},a&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":r}}}transformConfig(e){let t={};return Object.keys(e).forEach(i=>{const n=e[i];null==n||\"\"===n||Array.isArray(n)&&0===n.length||(t=Object.assign(Object.assign({},t),{[i]:Array.isArray(n)?n.join(\",\"):n}))}),t}}function ne(){return new ie((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.createScriptLoader)())}!function(e){e.CVV=\"cvv\",e.PAN=\"pan\"}(Y||(Y={}));class oe{static get(e){const t=`${encodeURIComponent(`${e}`)}=`,i=document.cookie;let n=null;const o=i.indexOf(t);if(o>-1){let e=i.indexOf(\";\",o);-1===e&&(e=i.length),n=decodeURIComponent(i.substring(o+t.length,e))}return n}static set(e,t,i={secure:!0}){let n=`${encodeURIComponent(e)}=${encodeURIComponent(t)}`;const{expires:o,path:r,domain:a,secure:s}=i;if(o)n+=`; expires=${o.toUTCString()}`;else{const e=new Date,t=60;e.setTime(e.getTime()+60*t*1e3),n+=`; expires=${e.toUTCString()}`}r&&(n+=`; path=${r}`),a&&(n+=`; domain=${a}`),s&&(n+=\"; secure\"),document.cookie=n}static remove(e,t){oe.set(e,\"\",Object.assign({expires:new Date(0)},t))}}!function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(W||(W={})),function(e){e.Succeeded=\"succeeded\",e.Cancelled=\"cancelled\",e.Errored=\"errored\"}(K||(K={})),function(e){e.Possible=\"POSSIBLE\",e.No=\"NO\",e.Unknown=\"UNKNOWN\",e.Yes=\"YES\"}(J||(J={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(X||(X={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(Z||(Z={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(Q||(Q={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"canceled\",e.UNRECOGNIZED=\"unrecognized\"}(ee||(ee={}));var re=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ae{constructor(){this.window=window}initializePayPalFastlane(e,t,i){return re(this,void 0,void 0,function*(){if(t&&(window.localStorage.setItem(\"fastlaneEnv\",\"sandbox\"),window.localStorage.setItem(\"axoEnv\",\"sandbox\")),!this.window.paypalFastlane){const t={root:{backgroundColorPrimary:\"transparent\"}};this.window.paypalFastlane=yield e.Fastlane({styles:i||t})}return this.window.paypalFastlane})}getPayPalFastlaneOrThrow(){if(!this.window.paypalFastlane)throw new h;return this.window.paypalFastlane}lookupCustomerOrThrow(e){return re(this,void 0,void 0,function*(){return this.getPayPalFastlaneOrThrow().identity.lookupCustomerByEmail(e)})}triggerAuthenticationFlowOrThrow(e){return re(this,void 0,void 0,function*(){return e?this.getPayPalFastlaneOrThrow().identity.triggerAuthenticationFlow(e):{}})}updateStorageSessionId(e){const t=new Date;t.setDate(t.getDate()+14);const i={expires:t,secure:!0};oe.set(\"bc-fastlane-sessionId\",e,i)}removeStorageSessionId(){oe.remove(\"bc-fastlane-sessionId\")}getStorageSessionId(){return oe.get(\"bc-fastlane-sessionId\")||\"\"}mapPayPalFastlaneProfileToBcCustomerData(e,t){var i,n,o;const{authenticationState:r,profileData:a}=t,s=null===(o=null===(n=null===(i=null==a?void 0:a.card)||void 0===i?void 0:i.paymentSource)||void 0===n?void 0:n.card)||void 0===o?void 0:o.billingAddress,d=null==a?void 0:a.shippingAddress,l=null==a?void 0:a.name,c=null==a?void 0:a.card,p=d?this.mapPayPalToBcAddress(d.address,d.name,d.phoneNumber):void 0,u=s&&l?this.mapPayPalToBcAddress(s,l,null==d?void 0:d.phoneNumber):void 0,h=c?this.mapPayPalToBcInstrument(e,c):[],m=this.filterAddresses([p,u]);return{authenticationState:r||ee.UNRECOGNIZED,addresses:m,billingAddress:u,shippingAddress:p,instruments:h}}mapPayPalToBcInstrument(e,t){const{id:i,paymentSource:n}=t,{brand:o,expiry:r,lastDigits:a}=n.card,[s,d]=r.split(\"-\");return[{bigpayToken:i,brand:o,defaultInstrument:!1,expiryMonth:d,expiryYear:s,iin:\"\",last4:a,method:e,provider:e,trustedShippingAddress:!1,untrustedShippingCardVerificationMode:Y.PAN,type:\"card\"}]}mapBcToPayPalAddress(e){return{company:(null==e?void 0:e.company)||\"\",addressLine1:(null==e?void 0:e.address1)||\"\",addressLine2:(null==e?void 0:e.address2)||\"\",adminArea1:(null==e?void 0:e.stateOrProvinceCode)||(null==e?void 0:e.stateOrProvince)||\"\",adminArea2:(null==e?void 0:e.city)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\"}}mapPayPalToBcAddress(e,t,i,n){const[o,r]=t.fullName.split(\" \"),a=(null==i?void 0:i.nationalNumber)||\"\",s=(null==i?void 0:i.countryCode)||\"\";return{id:Date.now(),type:\"paypal-address\",firstName:t.firstName||o||\"\",lastName:t.lastName||r||\"\",company:e.company||\"\",address1:e.addressLine1,address2:e.addressLine2||\"\",city:e.adminArea2,stateOrProvince:e.adminArea1,stateOrProvinceCode:e.adminArea1,country:e.countryCode||\"\",countryCode:e.countryCode||\"\",postalCode:e.postalCode,phone:s+a,customFields:n||[]}}filterAddresses(e){return e.reduce((e,t)=>t?e.some(e=>this.isEqualAddresses(e,t))?e:[...e,t]:e,[])}isEqualAddresses(e,t){return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.isEqual)(this.normalizeAddress(e),this.normalizeAddress(t))}normalizeAddress(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.omit)(e,[\"id\",\"phone\"])}}function se(){return new ae}function de(e){return\"string\"!=typeof e}function le(e,t){if(t||e)return function(e){var t,i;const n={},o=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.root,de),r=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.input,de),a=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.toggle,de),s=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(null===(t=e.text)||void 0===t?void 0:t.body,de),l=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(null===(i=e.text)||void 0===i?void 0:i.caption,de),c=e.branding;return Object.keys(o).length&&(n.root=o),Object.keys(r).length&&(n.input=r),Object.keys(a).length&&(n.toggle=a),Object.keys(s).length&&(n.text={},n.text.body=s),Object.keys(l).length&&(n.text=Object.assign({},n.text),n.text.caption=l),c&&(n.branding=c),n}(function(e,t){var i,n,o,r,a,s,d,l,c,p,u,h,m,y,g,v,f,S,I,C,b,w;return{root:{backgroundColorPrimary:(null==e?void 0:e.fastlaneRootSettingsBackgroundColor)||(null===(i=null==t?void 0:t.root)||void 0===i?void 0:i.backgroundColorPrimary),errorColor:(null==e?void 0:e.fastlaneRootSettingsErrorColor)||(null===(n=null==t?void 0:t.root)||void 0===n?void 0:n.errorColor),fontFamily:(null==e?void 0:e.fastlaneRootSettingsFontFamily)||(null===(o=null==t?void 0:t.root)||void 0===o?void 0:o.fontFamily),fontSizeBase:(null==e?void 0:e.fastlaneRootSettingsFontSize)||(null===(r=null==t?void 0:t.root)||void 0===r?void 0:r.fontSizeBase),padding:(null==e?void 0:e.fastlaneRootSettingsPadding)||(null===(a=null==t?void 0:t.root)||void 0===a?void 0:a.padding),primaryColor:(null==e?void 0:e.fastlaneRootSettingsPrimaryColor)||(null===(s=null==t?void 0:t.root)||void 0===s?void 0:s.primaryColor)},input:{borderRadius:(null==e?void 0:e.fastlaneInputSettingsBorderRadius)||(null===(d=null==t?void 0:t.input)||void 0===d?void 0:d.borderRadius),borderColor:(null==e?void 0:e.fastlaneInputSettingsBorderColor)||(null===(l=null==t?void 0:t.input)||void 0===l?void 0:l.borderColor),focusBorderColor:(null==e?void 0:e.fastlaneInputSettingsFocusBorderBase)||(null===(c=null==t?void 0:t.input)||void 0===c?void 0:c.focusBorderColor),backgroundColor:(null==e?void 0:e.fastlaneInputSettingsBackgroundColor)||(null===(p=null==t?void 0:t.input)||void 0===p?void 0:p.backgroundColor),borderWidth:(null==e?void 0:e.fastlaneInputSettingsBorderWidth)||(null===(u=null==t?void 0:t.input)||void 0===u?void 0:u.borderWidth),textColorBase:(null==e?void 0:e.fastlaneInputSettingsTextColorBase)||(null===(h=null==t?void 0:t.input)||void 0===h?void 0:h.textColorBase)},toggle:{colorPrimary:(null==e?void 0:e.fastlaneToggleSettingsColorPrimary)||(null===(m=null==t?void 0:t.toggle)||void 0===m?void 0:m.colorPrimary),colorSecondary:(null==e?void 0:e.fastlaneToggleSettingsColorSecondary)||(null===(y=null==t?void 0:t.toggle)||void 0===y?void 0:y.colorSecondary)},text:{body:{color:(null==e?void 0:e.fastlaneTextBodySettingsColor)||(null===(v=null===(g=null==t?void 0:t.text)||void 0===g?void 0:g.body)||void 0===v?void 0:v.color),fontSize:(null==e?void 0:e.fastlaneTextBodySettingsFontSize)||(null===(S=null===(f=null==t?void 0:t.text)||void 0===f?void 0:f.body)||void 0===S?void 0:S.fontSize)},caption:{color:(null==e?void 0:e.fastlaneTextCaptionSettingsColor)||(null===(C=null===(I=null==t?void 0:t.text)||void 0===I?void 0:I.caption)||void 0===C?void 0:C.color),fontSize:(null==e?void 0:e.fastlaneTextCaptionSettingsFontSize)||(null===(w=null===(b=null==t?void 0:t.text)||void 0===b?void 0:b.caption)||void 0===w?void 0:w.fontSize)}},branding:(null==e?void 0:e.fastlaneBrandingSettings)||(null==t?void 0:t.branding)}}(e,t))}var ce=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class pe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceSdk=t,this.paypalCommerceFastlaneUtils=i}initialize(e){var t;return ce(this,void 0,void 0,function*(){const{methodId:i,paypalcommercefastlane:n}=e;if(!i)throw new U('Unable to proceed because \"methodId\" argument is not provided.');try{yield this.paymentIntegrationService.loadPaymentMethod(i);const e=this.paymentIntegrationService.getState(),o=e.getCartOrThrow(),r=e.getPaymentMethodOrThrow(i),a=!!(null===(t=r.initializationData)||void 0===t?void 0:t.isDeveloperModeApplicable),s=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(r,o.currency.code,o.id);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(s,a,this.getFastlaneStyles(i,n))}catch(e){}return Promise.resolve()})}deinitialize(){return ce(this,void 0,void 0,function*(){return Promise.resolve()})}signIn(e,t){return ce(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return ce(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){return ce(this,void 0,void 0,function*(){const{checkoutPaymentMethodExecuted:t,continueWithCheckoutCallback:i,methodId:n}=e||{};if(!n)throw new U('Unable to proceed because \"methodId\" argument is not provided.');if(\"function\"!=typeof i)throw new U('Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.');if(this.paymentIntegrationService.getState().getCustomerOrThrow().isGuest){t&&\"function\"==typeof t&&t();try{yield this.runPayPalAuthenticationFlowOrThrow(n)}catch(e){}}i()})}runPayPalAuthenticationFlowOrThrow(e){return ce(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow().id,n=t.getCustomer(),o=t.getBillingAddress(),r=(null==n?void 0:n.email)||(null==o?void 0:o.email)||\"\",{customerContextId:a}=yield this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(r),s=yield this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(a),d=s.authenticationState===ee.CANCELED;yield this.updateCustomerDataState(e,s),d?this.paypalCommerceFastlaneUtils.removeStorageSessionId():this.paypalCommerceFastlaneUtils.updateStorageSessionId(i)})}updateCustomerDataState(e,t){var i;return ce(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState().getCartOrThrow(),{authenticationState:o,addresses:r,billingAddress:a,shippingAddress:s,instruments:d}=this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(e,t);if(yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:o,addresses:r,instruments:d}),a&&(yield this.paymentIntegrationService.updateBillingAddress(a)),s&&n.lineItems.physicalItems.length>0){const t=yield this.paymentIntegrationService.updateShippingAddress(s),n=t.getPaymentMethodOrThrow(e),{isFastlaneShippingOptionAutoSelectEnabled:o}=n.initializationData||{},r=t.getConsignments()||[],a=(null===(i=r[0])||void 0===i?void 0:i.availableShippingOptions)||[],d=a[0],l=a.find(e=>e.isRecommended);if((l||d)&&o){const e=(null==l?void 0:l.id)||d.id;yield this.paymentIntegrationService.selectShippingOption(e)}}})}getFastlaneStyles(e,t){const i=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{fastlaneStyles:n,isFastlaneStylingEnabled:o}=i.initializationData||{};return le(o?n:{},null==t?void 0:t.styles)}}const ue=p(e=>new pe(e,ne(),se()),[{id:\"paypalcommerceacceleratedcheckout\"},{id:\"paypalcommercecreditcards\"}]);var he=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class me{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){var t;return he(this,void 0,void 0,function*(){const{paypalcommerce:i,containerId:n,methodId:o}=e,r=Boolean(null==i?void 0:i.buyNowInitializeOptions);if(!o)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');if(r&&!i.currencyCode)throw new U('Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.');if(r&&\"function\"!=typeof(null===(t=i.buyNowInitializeOptions)||void 0===t?void 0:t.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');r||(yield this.paymentIntegrationService.loadDefaultCheckout());const a=r?i.currencyCode:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(o,a,!1),this.renderButton(n,o,i,r)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i,n){var o,r;const{buyNowInitializeOptions:a,style:s,onComplete:d,onEligibilityFailure:l}=i,c=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),p=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{isHostedCheckoutEnabled:u,isAppSwitchEnabled:h}=p.initializationData||{},m=Object.assign(Object.assign({},!n&&this.isPaypalCommerceAppSwitchEnabled(t)&&{appSwitchWhenAvailable:!0}),{createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommerce\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)}),y={onClick:()=>this.handleClick(a),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},g=Object.assign(Object.assign({},!h&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(e,i)=>this.onHostedCheckoutApprove(e,i,t,d)}),v=Object.assign(Object.assign(Object.assign({fundingSource:c.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(s)},m),a&&y),u&&g),f=c.Buttons(v);f.isEligible()?(null===(o=f.hasReturned)||void 0===o?void 0:o.call(f))&&this.isPaypalCommerceAppSwitchEnabled(t)?null===(r=f.resume)||void 0===r||r.call(f):f.render(`#${e}`):l&&\"function\"==typeof l?l():this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return he(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}onHostedCheckoutApprove(e,t,i,n){return he(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}return yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n(),!0}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingAddressChange(e){return he(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingOptionsChange(e){return he(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const ye=p(e=>new me(e,N(e)),[{id:\"paypalcommerce\"}]),ge=function({styles:e}){const t={};return e.color&&(t.color=e.color),e.layout&&(t.layout=e.layout),(e[\"logo-type\"]||e[\"logo-position\"])&&(t.logo={},e[\"logo-type\"]&&(t.logo.type=e[\"logo-type\"]),e[\"logo-position\"]&&(t.logo.position=e[\"logo-position\"])),e.ratio&&(t.ratio=e.ratio),(e[\"text-color\"]||e[\"text-size\"])&&(t.text={},e[\"text-color\"]&&(t.text.color=e[\"text-color\"]),e[\"text-size\"]&&(t.text.size=+e[\"text-size\"])),t};var ve=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class fe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i}initialize(e){var t;return ve(this,void 0,void 0,function*(){const{paypalcommercecredit:i,containerId:n,methodId:o}=e,{buyNowInitializeOptions:r,currencyCode:a,messagingContainerId:s}=i||{},d=!!r;if(!o)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.');if(d&&!a)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.');if(d&&\"function\"!=typeof(null==r?void 0:r.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');d||(yield this.paymentIntegrationService.loadDefaultCheckout());const l=this.paymentIntegrationService.getState(),c=d?a:l.getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(o,c,!1),this.renderButton(n,o,i);const p=l.getStoreConfigOrThrow().checkoutSettings.features;if(null!==(t=p[\"PAYPAL-5557.Hide_ppc_banner_implementation\"])&&void 0!==t&&t)return;const u=s&&document.getElementById(s);if(c&&u){const e=l.getPaymentMethodOrThrow(o),{paypalBNPLConfiguration:t=[]}=e.initializationData||{},i=t&&t.find(({id:e})=>\"cart\"===e);if(!(null==i?void 0:i.status))return;u.removeAttribute(\"data-pp-style-logo-type\"),u.removeAttribute(\"data-pp-style-logo-position\"),u.removeAttribute(\"data-pp-style-text-color\"),u.removeAttribute(\"data-pp-style-text-size\");const n=yield this.paypalCommerceSdk.getPayPalMessages(e,c);this.renderMessages(n,s,i)}})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{buyNowInitializeOptions:n,style:o,onComplete:r,onEligibilityFailure:a}=i,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{isHostedCheckoutEnabled:l,isAppSwitchEnabled:c}=d.initializationData||{},p={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecredit\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},u={onClick:()=>this.handleClick(n),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},h=Object.assign(Object.assign({},!c&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(e,i)=>this.onHostedCheckoutApprove(e,i,t,r)}),m=[s.FUNDING.PAYLATER,s.FUNDING.CREDIT];let y=!1;m.forEach(t=>{if(!y){const i=Object.assign(Object.assign(Object.assign({fundingSource:t,style:this.paypalCommerceIntegrationService.getValidButtonStyle(o)},p),n&&u),l&&h),r=s.Buttons(i);r.isEligible()?(r.render(`#${e}`),y=!0):a&&\"function\"==typeof a&&a()}}),y||this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return ve(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}onHostedCheckoutApprove(e,t,i,n){return ve(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}return yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n(),!0}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingAddressChange(e){return ve(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingOptionsChange(e){return ve(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"cart\",style:ge(i)};e.Messages(n).render(`#${t}`)}}const Se=p(e=>new fe(e,N(e),ne()),[{id:\"paypalcommercecredit\"}]);var Ie=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ce{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return Ie(this,void 0,void 0,function*(){const{paypalcommercevenmo:t,containerId:i,methodId:n}=e,{buyNowInitializeOptions:o,currencyCode:r}=t||{},a=!!o;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');if(a&&!r)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.');if(a&&\"function\"!=typeof(null==o?void 0:o.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');a||(yield this.paymentIntegrationService.loadDefaultCheckout());const s=a?r:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(n,s,!1),this.renderButton(i,n,t)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{buyNowInitializeOptions:n,style:o,onEligibilityFailure:r}=i,a=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),s=a.FUNDING.VENMO,d={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmo\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},l={onClick:()=>this.handleClick(n),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},c=Object.assign(Object.assign({fundingSource:s,style:this.getValidVenmoButtonStyles(o)},d),n&&l),p=a.Buttons(c);p.isEligible()?p.render(`#${e}`):r&&\"function\"==typeof r?r():this.paypalCommerceIntegrationService.removeElement(e)}getValidVenmoButtonStyles(e){const t=this.paypalCommerceIntegrationService.getValidButtonStyle(e);return t.color===b.gold?Object.assign(Object.assign({},t),{color:void 0}):t}handleClick(e){return Ie(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}}const be=p(e=>new Ce(e,N(e)),[{id:\"paypalcommercevenmo\"}]);var we=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Pe{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return we(this,void 0,void 0,function*(){const{paypalcommercealternativemethods:t,containerId:i,methodId:n}=e,{apm:o,buyNowInitializeOptions:r,currencyCode:a}=t||{},s=!!r;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.');if(s&&!a)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.');if(s&&\"function\"!=typeof(null==r?void 0:r.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');s||(yield this.paymentIntegrationService.loadDefaultCheckout());const d=s?a:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(n,d,!1),this.renderButton(i,n,t)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{apm:n,buyNowInitializeOptions:o,style:r,onEligibilityFailure:a}=i,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();if(!Object.values(s.FUNDING).includes(n))throw new U('Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.');const d={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethod\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},l={onClick:()=>this.handleClick(o),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},c=Object.assign(Object.assign({fundingSource:n,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r)},d),o&&l),p=s.Buttons(c);p.isEligible()?p.render(`#${e}`):a&&\"function\"==typeof a?a():this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return we(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}}const Oe=p(e=>new Pe(e,N(e)),[{id:\"paypalcommercealternativemethods\"}]),ke={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},Ae=\"embedded-checkout-loading-indicator-rotation\";class Ee{constructor(e){this.styles=Object.assign(Object.assign({},ke),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${Ae} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(Ae))return;const t=document.createElement(\"style\");t.id=Ae,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${Ae} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}const Te={\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"};class ze extends U{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class Fe extends v{constructor(e){super(e,{message:\"There is a problem processing your payment. Please try again later.\"}),this.name=\"PaymentMethodInvalidError\",this.type=\"payment_method_invalid\"}}class Be extends u{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function De(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function Me(e){return Boolean(e.instrumentId)}function xe(e){return\"object\"==typeof e&&null!==e&&\"bigpayToken\"in e&&\"defaultInstrument\"in e&&\"provider\"in e&&\"trustedShippingAddress\"in e&&\"method\"in e&&\"type\"in e}var Ne=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ue{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.loadingIndicator=n}initialize(e){var t;return Ne(this,void 0,void 0,function*(){const{methodId:i,paypalcommerce:n}=e||{};if(this.paypalcommerce=n,!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const o=this.paymentIntegrationService.getState(),r=o.getPaymentMethodOrThrow(i),{container:a,bannerContainerId:s}=n,{orderId:d,paypalBNPLConfiguration:l=[],isPayPalCreditAvailable:c}=r.initializationData||{};if(void 0!==s){if(!document.getElementById(s))return void console.error(\"Unable to create banner without valid banner container ID.\");const e=null==l?void 0:l.find(({id:e})=>\"checkout\"===e);if(c||!(null==e?void 0:e.status))return;const t=yield this.paypalCommerceSdk.getPayPalMessages(r,o.getCartOrThrow().currency.code);return t&&\"function\"==typeof(null==t?void 0:t.Messages)?this.renderMessages(t,s,e):void console.error(\"[BC PayPalCommerce PayLater]: banner could not be rendered, due to issues with loading PayPal SDK\")}d?this.orderId=null===(t=r.initializationData)||void 0===t?void 0:t.orderId:(this.loadingIndicatorContainer=null==a?void 0:a.split(\"#\")[1],yield this.paypalCommerceIntegrationService.loadPayPalSdk(i),n.onInit&&\"function\"==typeof n.onInit&&n.onInit(()=>this.renderButton(i,n)),(void 0===n.shouldRenderPayPalButtonOnInitialization||n.shouldRenderPayPalButtonOnInitialization)&&this.renderButton(i,n))})}execute(e,t){var i,n;return Ne(this,void 0,void 0,function*(){const{payment:o}=e,r=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{onError:a}=this.paypalcommerce||{};if(!o)throw new ze([\"payment\"]);const{methodId:s,paymentData:d}=o;if(this.isPayPalVaultedInstrumentPaymentData(d)&&!this.orderId&&(this.orderId=yield this.createOrder()),!this.orderId)throw new Fe;const l=this.isPayPalVaultedInstrumentPaymentData(d)?this.prepareVaultedInstrumentPaymentPayload(s,this.orderId,d):this.preparePaymentPayload(s,this.orderId,d);try{yield this.paymentIntegrationService.submitOrder(r,t),yield this.paymentIntegrationService.submitPayment(l)}catch(e){if(function(e){var t;return(e=>\"object\"==typeof e&&null!==e&&\"body\"in e)(e)&&\"offsite_redirect\"===(null===(t=e.body.additional_action_required)||void 0===t?void 0:t.type)}(e)){const t=null===(n=null===(i=e.body.additional_action_required)||void 0===i?void 0:i.data)||void 0===n?void 0:n.redirect_url;return new Promise(()=>window.location.replace(t))}return this.isProviderError(e)&&(yield this.paypalCommerceIntegrationService.loadPayPalSdk(o.methodId),yield new Promise((e,t)=>{var i;this.paypalcommerce&&(null===(i=this.paypalButton)||void 0===i||i.close(),this.renderButton(o.methodId,this.paypalcommerce),this.handleError(new Error(\"INSTRUMENT_DECLINED\"),a)),t()})),this.handleError(e,a),Promise.reject()}})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}prepareVaultedInstrumentPaymentPayload(e,t,i){const{instrumentId:n,shouldSetAsDefaultInstrument:o}=i,r=!this.isTrustedVaultingFlow(i);return r?{methodId:e,paymentData:{shouldSaveInstrument:r,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t}}}}:{methodId:e,paymentData:{instrumentId:n,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t},bigpay_token:{token:n}}}}}preparePaymentPayload(e,t,i){const{shouldSaveInstrument:n=!1,shouldSetAsDefaultInstrument:o=!1}=De(i)?i:{};return{methodId:e,paymentData:{shouldSaveInstrument:n,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t}}}}}renderButton(e,t){var i,n,o,r;const a=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:d}=s.initializationData||{},{checkoutPaymentButtonStyles:l}=d||{},{container:c,onError:p,onRenderButton:u,onValidate:h,submitForm:m}=t;if(!c)throw new U('Unable to initialize payment because \"container\" argument is not provided.');const y=Object.assign(Object.assign({},this.isPaypalCommerceAppSwitchEnabled(e)&&{appSwitchWhenAvailable:!0}),{fundingSource:a.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(l),createOrder:()=>this.createOrder(),onClick:(e,t)=>this.handleClick(t,h),onApprove:e=>this.handleApprove(e,m),onError:e=>this.handleError(e,p),onCancel:()=>this.toggleLoadingIndicator(!1)});this.paypalButton=a.Buttons(y),this.paypalButton.isEligible()&&(u&&\"function\"==typeof u&&u(),(null===(n=(i=this.paypalButton).hasReturned)||void 0===n?void 0:n.call(i))&&this.isPaypalCommerceAppSwitchEnabled(e)?null===(r=(o=this.paypalButton).resume)||void 0===r||r.call(o):this.paypalButton.render(c))}handleClick(e,t){return Ne(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;return null==t?void 0:t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,null==t||t()}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}createOrder(){return Ne(this,void 0,void 0,function*(){const e=this.getFieldsValues();return this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecheckout\",{shouldSaveInstrument:(null==e?void 0:e.shouldSaveInstrument)||!1})})}getFieldsValues(){const{getFieldsValues:e}=this.paypalcommerce||{};return\"function\"==typeof e?e():void 0}isTrustedVaultingFlow(e){if(e&&Me(e)){const t=this.paymentIntegrationService.getState().getInstruments(),i=null==t?void 0:t.find(t=>xe(t)&&t.bigpayToken===e.instrumentId);return!(xe(i)&&!i.trustedShippingAddress)}return!1}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}isPayPalVaultedInstrumentPaymentData(e){return!!e&&Me(e)&&De(e)}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"payment\",style:ge(i)};e.Messages(n).render(`#${t}`)}isProviderError(e){var t,i,n;return!!function(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e}(e)&&\"INSTRUMENT_DECLINED\"===(null===(n=null===(i=((null===(t=null==e?void 0:e.errors)||void 0===t?void 0:t.filter(e=>e.provider_error))||[])[0])||void 0===i?void 0:i.provider_error)||void 0===n?void 0:n.code)}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const je=p(e=>new Ue(e,N(e),new ie((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)()),new Ee({containerStyles:Te})),[{id:\"paypalcommerce\"}]);class _e extends u{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}var Ve=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Re{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i,this.paypalCommerceSdk=n}initialize(e){return Ve(this,void 0,void 0,function*(){const{methodId:t,paypalcommerce:i,paypalcommercecredit:n}=e||{},o=n||i;if(!t)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState(),a=r.getPaymentMethodOrThrow(t),{paypalBNPLConfiguration:s=[],orderId:d}=a.initializationData||{},{bannerContainerId:l,container:c}=o;if(void 0!==l){if(!document.getElementById(l))return void console.error(\"Unable to create banner without valid banner container ID.\");const e=s&&s.find(({id:e})=>\"checkout\"===e);if(!(null==e?void 0:e.status))return;const t=yield this.paypalCommerceSdk.getPayPalMessages(a,r.getCartOrThrow().currency.code);return this.renderMessages(t,l,e)}d?this.orderId=d:(yield this.paypalCommerceIntegrationService.loadPayPalSdk(t),this.loadingIndicatorContainer=null==c?void 0:c.split(\"#\")[1],this.renderButton(t,o))})}execute(e,t){return Ve(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);if(!this.orderId)throw new Fe;yield this.paymentIntegrationService.submitOrder(n,t),yield this.paypalCommerceIntegrationService.submitPayment(i.methodId,this.orderId)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}renderButton(e,t){if(!(null==t?void 0:t.container))throw new U('Unable to initialize payment because \"container\" argument is not provided.');const i=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:o}=n.initializationData||{},{checkoutPaymentButtonStyles:r}=o||{},{container:a,onError:s,onRenderButton:d,onValidate:l,submitForm:c}=t,p=[i.FUNDING.PAYLATER,i.FUNDING.CREDIT];let u=!1;p.forEach(e=>{if(u)return;const t={fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecreditcheckout\"),onClick:(e,t)=>this.handleClick(t,l),onApprove:e=>this.handleApprove(e,c),onCancel:()=>this.toggleLoadingIndicator(!1),onError:e=>this.handleError(e,s)};if(this.paypalButton=i.Buttons(t),this.paypalButton.isEligible()||e!==i.FUNDING.PAYLATER){if(!this.paypalButton.isEligible()&&e===i.FUNDING.CREDIT)throw new _e(`PayPal ${e} is not available for your region. Please use PayPal Checkout instead.`);d&&\"function\"==typeof d&&d(),this.paypalButton.render(a),u=!0}})}handleClick(e,t){return Ve(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;if(t&&\"function\"==typeof t)return t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,t&&\"function\"==typeof t&&t()}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"payment\",style:ge(i)};e.Messages(n).render(`#${t}`)}}const Le=p(e=>new Re(e,N(e),new Ee({containerStyles:Te}),ne()),[{id:\"paypalcommercecredit\"}]);var $e=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class qe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i}initialize(e){var t,i;return $e(this,void 0,void 0,function*(){const{methodId:n,paypalcommerce:o,paypalcommercevenmo:r}=e||{},a=r||o;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!a)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(n);const s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(n);(null===(t=s.initializationData)||void 0===t?void 0:t.orderId)?this.orderId=null===(i=s.initializationData)||void 0===i?void 0:i.orderId:(yield this.paypalCommerceIntegrationService.loadPayPalSdk(n),this.loadingIndicatorContainer=a.container.split(\"#\")[1],this.renderButton(n,a))})}execute(e,t){return $e(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);if(!this.orderId)throw new Fe;yield this.paymentIntegrationService.submitOrder(n,t),yield this.paypalCommerceIntegrationService.submitPayment(i.methodId,this.orderId)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}renderButton(e,t){const i=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:o}=n.initializationData||{},{checkoutPaymentButtonStyles:r}=o||{},{container:a,onError:s,onRenderButton:d,onValidate:l,submitForm:c}=t,p={fundingSource:i.FUNDING.VENMO,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmocheckout\"),onClick:(e,t)=>this.handleClick(t,l),onApprove:e=>this.handleApprove(e,c),onCancel:()=>this.toggleLoadingIndicator(!1),onError:e=>this.handleError(e,s)};if(this.paypalButton=i.Buttons(p),!this.paypalButton.isEligible())throw new _e(\"PayPal Venmo is not available for your region. Please use PayPal Checkout instead.\");d&&\"function\"==typeof d&&d(),this.paypalButton.render(a)}handleClick(e,t){return $e(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;return t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,t(),this.toggleLoadingIndicator(!1)}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const He=p(e=>new qe(e,N(e),new Ee({styles:{backgroundColor:\"black\"}})),[{id:\"paypalcommercevenmo\"}]);class Ge extends v{constructor(e){super(e,{message:\"The request has timed out or aborted.\"}),this.name=\"TimeoutError\",this.type=\"timeout\"}}function Ye(e,t,i=!0){var n;return null!==(n=e[t])&&void 0!==n?n:i}var We=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ke{constructor(e,t,i,n,o=3e3,r=3e5){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.loadingIndicator=n,this.pollingInterval=o,this.maxPollingIntervalTime=r,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.isPollingEnabled=!1}initialize(e){return We(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,paypalcommerce:n,paypalcommercealternativemethods:o}=e,r=o||n;if(this.paypalcommercealternativemethods=o,!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!r)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.');const a=this.paymentIntegrationService.getState(),s=a.getPaymentMethodOrThrow(i,t),{orderId:d,shouldRenderFields:l}=s.initializationData||{},c=a.getStoreConfigOrThrow().checkoutSettings.features;this.isPollingEnabled=Ye(c,\"PAYPAL-5192.paypal_commerce_ideal_polling\"),d?this.orderId=d:(this.paypalApms=yield this.paypalCommerceSdk.getPayPalApmsSdk(s,a.getCartOrThrow().currency.code),this.loadingIndicatorContainer=r.container.split(\"#\")[1],this.renderButton(i,t,r),l&&this.renderFields(i,r))})}execute(e,t){return We(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);const{methodId:o,gatewayId:r}=i;if(!this.orderId)throw new Fe;this.isPollingEnabled&&\"ideal\"===o&&(yield new Promise((e,t)=>{this.initializePollingMechanism(o,e,t,r)})),this.isNonInstantPaymentMethod(o)||(yield this.paymentIntegrationService.submitOrder(n,t)),yield this.paypalCommerceIntegrationService.submitPayment(o,this.orderId,r)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,this.isPollingEnabled&&this.resetPollingMechanism(),null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}initializePollingMechanism(e,t,i,n){return We(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const o=yield this.paypalCommerceIntegrationService.getOrderStatus(n),r=o===O.Approved,a=o===O.PollingError;if(r)return this.deinitializePollingMechanism(),t();if(a)return i();if(!r&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,paypalcommercealternativemethods:this.paypalcommercealternativemethods}),this.handleError(new Ge)}catch(e){i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}reinitializeStrategy(e){return We(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}handleError(e){const{onError:t}=this.paypalcommercealternativemethods||{};this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}renderButton(e,t,i){const n=this.getPaypalAmpsSdkOrThrow(),o=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e,t),{buttonStyle:r}=o.initializationData||{},{container:a,onError:s,onRenderButton:d,submitForm:l}=i,c={fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),onInit:(e,t)=>i.onInitButton(t),createOrder:()=>this.onCreateOrder(e,t,i),onApprove:e=>this.handleApprove(e,l),onCancel:()=>{this.toggleLoadingIndicator(!1),this.deinitializePollingMechanism()},onError:e=>{this.deinitializePollingMechanism(),this.handleFailure(e,s)},onClick:(e,t)=>We(this,void 0,void 0,function*(){return i.onValidate(t.resolve,t.reject)})};this.paypalButton=n.Buttons(c),this.paypalButton.isEligible()&&(d&&\"function\"==typeof d&&d(),this.paypalButton.render(a))}onCreateOrder(e,t,i){return We(this,void 0,void 0,function*(){const{onValidate:n}=i;yield n(()=>(this.toggleLoadingIndicator(!0),()=>Promise.resolve()),lodash__WEBPACK_IMPORTED_MODULE_3__.noop);const o=yield this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethodscheckout\");if(this.isNonInstantPaymentMethod(e)){const i={useStoreCredit:!1},n={params:{methodId:e,gatewayId:t}};yield this.paymentIntegrationService.submitOrder(i,n),yield this.paypalCommerceIntegrationService.submitPayment(e,o,t)}return o})}handleApprove({orderID:e},t){this.orderId=e,t()}handleFailure(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}renderFields(e,t){const i=this.getPaypalAmpsSdkOrThrow(),n=this.paymentIntegrationService.getState(),{firstName:o,lastName:r,email:a}=n.getBillingAddressOrThrow(),{apmFieldsContainer:s,apmFieldsStyles:d}=t;if(!s)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".');const l=document.querySelector(s);l&&(l.innerHTML=\"\");const c={fundingSource:e,style:d||{},fields:{name:{value:`${o} ${r}`},email:{value:a}}};i.PaymentFields(c).render(s)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}isNonInstantPaymentMethod(e){return e.toUpperCase()in P}getPaypalAmpsSdkOrThrow(){if(!this.paypalApms)throw new h;return this.paypalApms}}const Je=p(e=>new Ke(e,N(e),ne(),new Ee({containerStyles:Te})),[{gateway:\"paypalcommercealternativemethods\"}]);var Xe;!function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\",e.CardExpiryVerification=\"cardExpiryVerification\"}(Xe||(Xe={}));const Ze=Xe;function Qe(e){return Ze.CardNumber in e&&Ze.CardName in e&&Ze.CardExpiry in e}function et(e){return Ze.CardNumberVerification in e&&Ze.CardCodeVerification in e&&Ze.CardExpiryVerification in e}class tt extends u{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}var it;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(it||(it={}));class nt extends u{constructor(e){super(function(e){switch(e){case it.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case it.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case it.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case it.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}class ot extends u{constructor(e,t){super(t||\"Unable to proceed because the payment form contains invalid data.\"),this.details=e,this.name=\"PaymentInvalidFormError\",this.type=\"payment_invalid_form\"}}var rt=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class at{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.paypalCommerceFastlaneUtils=n}initialize(e){return rt(this,void 0,void 0,function*(){const{methodId:t,paypalcommercecreditcards:i,paypalcommerce:n}=e,o=i||n,{form:r,onCreditCardFieldsRenderingError:a,onLoadComplete:s}=o||{};if(!t)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!r)throw new U('Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.');this.hostedFormOptions=r,this.isCreditCardForm=Qe(r.fields),this.isCreditCardVaultedForm=et(r.fields)&&!this.hasUndefinedValues(),yield this.paymentIntegrationService.loadPaymentMethod(t),yield this.paypalCommerceIntegrationService.loadPayPalSdk(t,void 0,!0,!0),null==s||s(),(this.isCreditCardForm||this.isCreditCardVaultedForm)&&(yield this.initializeFields(r,a)),this.shouldInitializePayPalFastlane(t)&&(yield this.initializePayPalFastlaneOrThrow(t))})}execute(e,t){return rt(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{methodId:o,paymentData:r}=i||{};if(!i||!o)throw new ze([\"payment\"]);if(this.executionPaymentData=r,this.isCreditCardForm||this.isCreditCardVaultedForm)yield this.validateHostedFormOrThrow(),yield this.submitHostedForm();else{const{orderId:e}=yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",this.getInstrumentParams());this.returnedOrderId=e}const a=this.preparePaymentPayload(o,r,this.returnedOrderId,this.returnedVaultedToken);yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment(a)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e,t,i,n;return rt(this,void 0,void 0,function*(){return yield null===(e=this.cvvField)||void 0===e?void 0:e.close(),yield null===(t=this.expiryField)||void 0===t?void 0:t.close(),yield null===(i=this.numberField)||void 0===i?void 0:i.close(),yield null===(n=this.nameField)||void 0===n?void 0:n.close(),Promise.resolve()})}preparePaymentPayload(e,t,i,n){const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=De(t)?t:{},s=t&&Me(t)?t.instrumentId:void 0,l=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)({verification_nonce:n,token:s},lodash__WEBPACK_IMPORTED_MODULE_3__.isNil);return{methodId:e,paymentData:{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,instrumentId:s,formattedPayload:Object.assign(Object.assign({},n||s?{bigpay_token:l}:{}),i?{card_with_order:{order_id:i}}:{})}}}initializeFields(e,t){return rt(this,void 0,void 0,function*(){const{fields:i,styles:n}=e,o=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),r=this.getExecuteCallback(i),a=Object.assign({style:this.getInputStyles(n),onApprove:({orderID:e,vaultSetupToken:t,liabilityShift:i})=>{if(i===S.No||i===S.Unknown)throw new Error;return this.handleApprove({orderID:e,vaultSetupToken:t})},onError:()=>{throw new tt},inputEvents:{onChange:t=>this.onChangeHandler(e,t),onFocus:t=>this.onFocusHandler(e,t),onBlur:t=>this.onBlurHandler(e,t),onInputSubmitRequest:t=>this.onInputSubmitRequest(e,t)}},r);if(this.cardFields=yield o.CardFields(a),!this.cardFields.isEligible())throw new nt(it.PaymentNotInitialized);try{this.stylizeInputContainers(i),Qe(i)&&(yield this.renderFields(i)),et(i)&&(yield this.renderVaultedFields(i))}catch(e){\"function\"==typeof t&&t(e)}})}getExecuteCallback(e){return et(e)?this.createVaultSetupTokenCallback():this.createOrderCallback()}createVaultSetupTokenCallback(){return{createVaultSetupToken:()=>rt(this,void 0,void 0,function*(){const{setupToken:e}=(yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",Object.assign(Object.assign({},this.getInstrumentParams()),{setupToken:!0})))||{};return e})}}createOrderCallback(){return{createOrder:()=>rt(this,void 0,void 0,function*(){const{orderId:e}=(yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",this.getInstrumentParams()))||{};return e})}}handleApprove({orderID:e,vaultSetupToken:t}){e&&(this.returnedOrderId=e),t&&(this.returnedVaultedToken=t)}renderFields(e){var t,i,n,o;return rt(this,void 0,void 0,function*(){const r=this.getCardFieldsOrThrow();(null===(t=e.cardCode)||void 0===t?void 0:t.containerId)&&(this.cvvField=r.CVVField({placeholder:\"\"}),yield this.cvvField.render(`#${e.cardCode.containerId}`)),(null===(i=e.cardExpiry)||void 0===i?void 0:i.containerId)&&(this.expiryField=r.ExpiryField(),yield this.expiryField.render(`#${e.cardExpiry.containerId}`)),(null===(n=e.cardName)||void 0===n?void 0:n.containerId)&&(this.nameField=r.NameField({placeholder:\"\"}),yield this.nameField.render(`#${e.cardName.containerId}`)),(null===(o=e.cardNumber)||void 0===o?void 0:o.containerId)&&(this.numberField=r.NumberField({placeholder:\"\"}),yield this.numberField.render(`#${e.cardNumber.containerId}`))})}renderVaultedFields(e){var t,i,n;return rt(this,void 0,void 0,function*(){const o=this.getCardFieldsOrThrow();(null===(t=e.cardCodeVerification)||void 0===t?void 0:t.containerId)&&(this.cvvField=o.CVVField({placeholder:\"\"}),yield this.cvvField.render(`#${e.cardCodeVerification.containerId}`)),(null===(i=e.cardExpiryVerification)||void 0===i?void 0:i.containerId)&&(this.expiryField=o.ExpiryField(),yield this.expiryField.render(`#${e.cardExpiryVerification.containerId}`)),(null===(n=e.cardNumberVerification)||void 0===n?void 0:n.containerId)&&(this.numberField=o.NumberField({placeholder:\"\"}),yield this.numberField.render(`#${e.cardNumberVerification.containerId}`))})}getInstrumentParams(){if(!this.executionPaymentData)return{};if(De(this.executionPaymentData)){const{shouldSaveInstrument:e,shouldSetAsDefaultInstrument:t}=this.executionPaymentData;return{shouldSaveInstrument:e,shouldSetAsDefaultInstrument:t}}if(Me(this.executionPaymentData)){const{instrumentId:e}=this.executionPaymentData;return{instrumentId:e}}return{}}getFieldTypeByEmittedField({emittedBy:e}){return{fieldType:this.mapFieldType(e)}}submitHostedForm(){return rt(this,void 0,void 0,function*(){const e=this.getCardFieldsOrThrow(),t=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),i={billingAddress:{company:t.company,addressLine1:t.address1,addressLine2:t.address2,adminArea1:t.stateOrProvinceCode,adminArea2:t.city,postalCode:t.postalCode,countryCode:t.countryCode}};try{this.isCreditCardVaultedForm?yield e.submit():yield e.submit(i)}catch(e){throw new tt(\"Failed authentication. Please try to authorize again.\")}})}validateHostedFormOrThrow(){var e,t;return rt(this,void 0,void 0,function*(){const i=this.getCardFieldsOrThrow(),n=yield i.getState().then(e=>e),o=this.getValidityData(n);if(!o.isValid)throw null===(t=null===(e=this.hostedFormOptions)||void 0===e?void 0:e.onValidate)||void 0===t||t.call(e,o),new ot(this.mapValidationErrors(o.errors))})}getValidityData({fields:e}){const t=Object.assign({},e);delete t.cardNameField;const i=Object.keys(t);return{isValid:i.every(e=>{var i;return null===(i=t[e])||void 0===i?void 0:i.isValid}),errors:i.reduce((e,i)=>{var n;const o=this.mapFieldType(i);return Object.assign(Object.assign({},e),{[o]:(null===(n=t[i])||void 0===n?void 0:n.isValid)?void 0:[this.getInvalidErrorByFieldType(o)]})},{})}}getInvalidErrorByFieldType(e){switch(e){case Ze.CardCode:case Ze.CardCodeVerification:return{fieldType:e,message:\"Invalid card code\",type:\"invalid_card_code\"};case Ze.CardNumber:case Ze.CardNumberVerification:return{fieldType:e,message:\"Invalid card number\",type:\"invalid_card_number\"};case Ze.CardExpiry:case Ze.CardExpiryVerification:return{fieldType:e,message:\"Invalid card expiry\",type:\"invalid_card_expiry\"};default:return{fieldType:e,message:\"Invalid field\",type:\"invalid\"}}}mapValidationErrors(e={}){const t={};return Object.keys(e).forEach(i=>{var n,o;t[i]=[{message:(null===(o=null===(n=e[i])||void 0===n?void 0:n[0])||void 0===o?void 0:o.message)||\"\",type:i}]}),t}mapFieldType(e){switch(e){case\"name\":return Ze.CardName;case\"cardNumberField\":case\"number\":return this.isCreditCardForm?Ze.CardNumber:Ze.CardNumberVerification;case\"cardExpiryField\":case\"expiry\":return this.isCreditCardForm?Ze.CardExpiry:Ze.CardExpiryVerification;case\"cardCvvField\":case\"cvv\":return this.isCreditCardForm?Ze.CardCode:Ze.CardCodeVerification;default:throw new Error(\"Unexpected field type\")}}getCardFieldsOrThrow(){if(!this.cardFields)throw new nt(it.PaymentNotInitialized);return this.cardFields}getInputStyles(e){var t,i,n;const o={\"font-size\":(null===(t=null==e?void 0:e.default)||void 0===t?void 0:t.fontSize)||\"1rem\",\"font-family\":(null===(i=null==e?void 0:e.default)||void 0===i?void 0:i.fontFamily)||\"Montserrat, Arial, Helvetica, sans-serif\",\"font-weight\":(null===(n=null==e?void 0:e.default)||void 0===n?void 0:n.fontWeight)||\"400\",outline:\"none\",padding:\"9px 13px\"},r=Object.assign(Object.assign({},o),{color:\"#333333\"});return{input:r,\".invalid\":Object.assign(Object.assign({},o),{color:\"red\"}),\".valid\":r,\":focus\":r}}stylizeInputContainers(e){Object.values(e||{}).forEach(e=>{const t=document.getElementById(`${(null==e?void 0:e.containerId)||\"\"}`);t&&(t.style.padding=\"0px\",t.style.boxShadow=\"none\",t.style.border=\"none\",t.style.background=\"transparent\",t.style.marginBottom=\"10px\",t.style.marginLeft=\"-5px\")})}hasUndefinedValues(){return!this.hostedFormOptions||Object.values(this.hostedFormOptions.fields).some(e=>void 0===e)}onChangeHandler(e,t){var i;null===(i=null==e?void 0:e.onValidate)||void 0===i||i.call(e,this.getValidityData(t))}onFocusHandler(e,t){var i;null===(i=null==e?void 0:e.onFocus)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}onBlurHandler(e,t){var i;null===(i=null==e?void 0:e.onBlur)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}onInputSubmitRequest(e,t){var i;null===(i=null==e?void 0:e.onEnter)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}shouldInitializePayPalFastlane(e){var t,i;const n=this.paymentIntegrationService.getState(),o=n.getPaymentMethodOrThrow(e),r=n.getPaymentProviderCustomer(),a=(s=r)&&(\"authenticationState\"in s||\"addresses\"in s||\"instruments\"in s)?r:{};var s;return(null===(t=null==o?void 0:o.initializationData)||void 0===t?void 0:t.isAcceleratedCheckoutEnabled)&&(null===(i=null==o?void 0:o.initializationData)||void 0===i?void 0:i.isPayPalCommerceAnalyticsV2Enabled)&&!(null==a?void 0:a.authenticationState)}initializePayPalFastlaneOrThrow(e){return rt(this,void 0,void 0,function*(){try{const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getPaymentMethodOrThrow(e),{initializationData:o}=n;if(!(null==o?void 0:o.connectClientToken))return;const r=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(n,i.currency.code,i.id);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(r,!!(null==o?void 0:o.isDeveloperModeApplicable))}catch(e){}})}}const st=p(e=>new at(e,N(e),ne(),se()),[{id:\"paypalcommercecreditcards\"}]);var dt=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class lt{constructor(e,t,i,n=3e3,o=3e5){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i,this.pollingInterval=n,this.maxPollingIntervalTime=o,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return dt(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,paypalcommerceratepay:n}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.');const{legalTextContainer:o,container:r,loadingContainerId:a}=n;if(!r)throw new U('Unable to initialize payment because \"options.container\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.');if(!a)throw new U('Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.');this.loadingIndicatorContainer=a;const s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i,t),{merchantId:d}=s.initializationData||{};if(!d)throw new U(\"Unable to initialize payment because merchantId argument is not provided.\");this.paypalcommerceratepay=n,yield this.paypalCommerceIntegrationService.loadPayPalSdk(i),this.createFraudNetScript(d,i,t),this.loadFraudnetConfig(),this.renderLegalText(o,r)})}execute(e,t){return dt(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{getFieldsValues:o}=this.paypalcommerceratepay||{};if(!i)throw new ze([\"payment\"]);if(!o||\"function\"!=typeof o)throw new U('Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.');this.toggleLoadingIndicator(!0);try{const e=yield this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethodscheckout\",{metadataId:this.guid}),{ratepayBirthDate:r,ratepayPhoneNumber:a,ratepayPhoneCountryCode:s}=o(),d={formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:null,method_id:i.methodId,rate_pay:{birth_date:this.normalizeDate(r),phone:{national_number:a,country_code:s.split(\"+\")[1]}},paypal_account:{order_id:e}}};return yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment({methodId:i.methodId,paymentData:d}),yield new Promise((e,t)=>{this.initializePollingMechanism(i.methodId,e,t,i.gatewayId)})}catch(e){return this.handleError(e),new Promise((e,t)=>t())}})}finalize(){return Promise.reject(new Be)}deinitialize(){const{legalTextContainer:e}=this.paypalcommerceratepay||{},t=document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0],i=document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];if(this.deinitializePollingMechanism(),t.remove(),i.remove(),e){const t=document.getElementById(e);null==t||t.remove()}return Promise.resolve()}normalizeDate(e){const t=this.formatDate(e.getDate()),i=this.formatDate(e.getMonth()+1);return`${e.getFullYear()}-${i}-${t}`}formatDate(e){return`${e<10?0:\"\"}${e}`}renderLegalText(e,t){const i=e,n=t.split(\"#\")[1],o=document.getElementById(n),r=null==o?void 0:o.parentNode,a=document.createElement(\"div\");a.style.marginBottom=\"20px\",a.setAttribute(\"id\",i),null==r||r.prepend(a);const s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=s.Legal({fundingSource:s.Legal.FUNDING.PAY_UPON_INVOICE});if(!document.getElementById(i))throw new U('Unable to initialize payment because \"legalTextContainerElement\" argument is not found.');d.render(`#${i}`)}handleError(e){const{onError:t}=this.paypalcommerceratepay||{};this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}createFraudNetScript(e,t,i){const n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t,i),{testMode:o}=n.config,r=document.createElement(\"script\");r.setAttribute(\"type\",\"application/json\"),r.setAttribute(\"fncls\",\"fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99\"),r.setAttribute(\"data-id\",\"fraudnetScript\"),this.guid=this.generateGUID();const a={f:this.guid,s:`${e}_checkout-page`,sandbox:o};r.innerHTML=JSON.stringify(a),document.body.appendChild(r)}generateGUID(){let e=\"\";for(let t=0;t<32;t+=1)e+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"[Math.floor(62*Math.random())];return e}loadFraudnetConfig(){const e=document.createElement(\"script\");e.setAttribute(\"data-id\",\"fraudnetConfig\"),e.src=\"https://c.paypal.com/da/r/fb.js\",document.body.appendChild(e)}reinitializeStrategy(e){return dt(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}initializePollingMechanism(e,t,i,n){return dt(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const o=yield this.paypalCommerceIntegrationService.getOrderStatus(\"paypalcommercealternativemethods\",{params:{useMetadata:!0}}),r=o===O.PollingStop,a=o===O.PollingError;if(r)return this.deinitializePollingMechanism(),t();if(a)return i();if(!r&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,paypalcommerceratepay:this.paypalcommerceratepay}),this.handleError(new Ge)}catch(e){this.handleError(e),i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const ct=p(e=>new lt(e,N(e),new Ee({containerStyles:Object.assign(Object.assign({},Te),{position:\"fixed\"})})),[{gateway:\"paypalcommercealternativemethods\",id:\"ratepay\"}]);function pt(e){return!!e&&(\"authenticationState\"in e||\"addresses\"in e||\"instruments\"in e)}var ut=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ht{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceRequestSender=t,this.paypalCommerceSdk=i,this.paypalCommerceFastlaneUtils=n}initialize(e){var t,i;return ut(this,void 0,void 0,function*(){const{methodId:n,paypalcommercefastlane:o}=e;if(this.methodId=n,this.paypalcommercefastlane=o,!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.');if(!o.onInit||\"function\"!=typeof o.onInit)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.');if(!o.onChange||\"function\"!=typeof o.onChange)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.');yield this.paymentIntegrationService.loadPaymentMethod(n);const r=this.paymentIntegrationService.getState(),a=r.getCartOrThrow(),s=r.getPaymentMethodOrThrow(n),{isDeveloperModeApplicable:d,isFastlaneStylingEnabled:l}=s.initializationData||{};this.threeDSVerificationMethod=null===(t=s.initializationData)||void 0===t?void 0:t.threeDSVerificationMethod,this.paypalFastlaneSdk=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(s,a.currency.code,a.id);const c=le(l?null===(i=null==s?void 0:s.initializationData)||void 0===i?void 0:i.fastlaneStyles:{},null==o?void 0:o.styles);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(this.paypalFastlaneSdk,!!d,c),this.shouldRunAuthenticationFlow()&&(yield this.runPayPalAuthenticationFlowOrThrow(n)),yield this.initializePayPalPaymentComponent(),o.onInit(e=>this.renderPayPalPaymentComponent(e)),o.onChange(()=>this.handlePayPalStoredInstrumentChange(n))})}execute(e,t){return ut(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);const{paymentData:o,methodId:r}=i,a=o&&Me(o);try{yield this.paymentIntegrationService.submitOrder(n,t);const e=a?yield this.prepareVaultedInstrumentPaymentPayload(r,o):yield this.preparePaymentPayload(r,o);yield this.paymentIntegrationService.submitPayment(e),this.paypalCommerceFastlaneUtils.removeStorageSessionId()}catch(e){if(function(e){return\"object\"==typeof e&&null!==e&&\"message\"in e&&\"response\"in e&&\"body\"in e.response&&\"name\"in e.response.body}(e)&&\"INVALID_REQUEST\"===e.response.body.name){const e={translationKey:\"payment.errors.invalid_request_error\"};return this.handleError(e),Promise.reject()}if(e instanceof Error&&\"FastlaneError\"!==e.name)throw e;return Promise.reject()}})}finalize(){return Promise.reject(new Be)}deinitialize(){return ut(this,void 0,void 0,function*(){return Promise.resolve()})}shouldRunAuthenticationFlow(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getCustomerOrThrow(),n=e.getPaymentProviderCustomer(),o=pt(n)?n:{},r=this.paypalCommerceFastlaneUtils.getStorageSessionId();return!(!i.isGuest||(null==o?void 0:o.authenticationState)===ee.CANCELED||(null==o?void 0:o.authenticationState)||r!==t.id)}runPayPalAuthenticationFlowOrThrow(e){return ut(this,void 0,void 0,function*(){try{const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getCustomer(),o=t.getBillingAddress(),r=(null==n?void 0:n.email)||(null==o?void 0:o.email)||\"\",{customerContextId:a}=yield this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(r),s=yield this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(a),{authenticationState:d,addresses:l,instruments:c}=this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(e,s);yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:d,addresses:l,instruments:c}),s.authenticationState===ee.CANCELED?this.paypalCommerceFastlaneUtils.removeStorageSessionId():this.paypalCommerceFastlaneUtils.updateStorageSessionId(i.id)}catch(e){}})}initializePayPalPaymentComponent(){return ut(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),t=e.phone,i=`${e.firstName} ${e.lastName}`.trim(),n=this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow(),o={fields:Object.assign({cardholderName:{prefill:i,enabled:!0}},t&&{phoneNumber:{prefill:t}})};this.paypalComponentMethods=yield n.FastlaneCardComponent(o)})}renderPayPalPaymentComponent(e){const t=this.getPayPalComponentMethodsOrThrow();if(!e)throw new U('Unable to render card component because \"container\" argument is not provided.');t.render(e)}getPayPalComponentMethodsOrThrow(){if(!this.paypalComponentMethods)throw new h;return this.paypalComponentMethods}prepareVaultedInstrumentPaymentPayload(e,t){return ut(this,void 0,void 0,function*(){const{instrumentId:i}=t,n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),o=this.isPaypalCommerceFastlaneThreeDSAvailable()&&n.config.is3dsEnabled;o||(yield this.createOrder(i));const r=o?yield this.get3DSNonce(i):i;return{methodId:e,paymentData:{formattedPayload:{paypal_fastlane_token:{order_id:this.orderId,token:r}}}}})}preparePaymentPayload(e,t){return ut(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getBillingAddressOrThrow(),o=i.getPaymentMethodOrThrow(e),r=`${n.firstName} ${n.lastName}`.trim(),{getPaymentToken:a}=this.getPayPalComponentMethodsOrThrow(),{id:s}=yield a({name:{fullName:r},billingAddress:this.paypalCommerceFastlaneUtils.mapBcToPayPalAddress(n)}),d=this.isPaypalCommerceFastlaneThreeDSAvailable()&&o.config.is3dsEnabled;d||(yield this.createOrder(s));const l=d?yield this.get3DSNonce(s):s,{shouldSaveInstrument:c=!1,shouldSetAsDefaultInstrument:p=!1}=De(t)?t:{};return{methodId:e,paymentData:Object.assign(Object.assign({},t),{shouldSaveInstrument:c,shouldSetAsDefaultInstrument:p,formattedPayload:{paypal_fastlane_token:{order_id:this.orderId,token:l}}})}})}createOrder(e){return ut(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getCartOrThrow().id;if(this.methodId){const{orderId:i}=yield this.paypalCommerceRequestSender.createOrder(this.methodId,{cartId:t,fastlaneToken:e});this.orderId=i}})}get3DSNonce(e){var t;return ut(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getCartOrThrow(),o=i.getOrderOrThrow(),r=i.getStoreConfigOrThrow().links.checkoutLink,a=null===(t=this.paypalFastlaneSdk)||void 0===t?void 0:t.ThreeDomainSecureClient;if(!a)throw new h;const s={amount:o.orderAmount.toFixed(2),currency:n.currency.code,nonce:e,threeDSRequested:\"SCA_ALWAYS\"===this.threeDSVerificationMethod,transactionContext:{experience_context:{locale:\"en-US\",return_url:r,cancel_url:r}}};if(yield a.isEligible(s)){const{liabilityShift:e,authenticationState:t,nonce:i}=yield a.show();if(e===S.No||e===S.Unknown||t===K.Errored||t===K.Cancelled)throw new Fe;if(t===K.Succeeded)return yield this.createOrder(i),i}return e})}handlePayPalStoredInstrumentChange(e){return ut(this,void 0,void 0,function*(){const t=this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow(),{selectionChanged:i,selectedCard:n}=yield t.profile.showCardSelector();if(i){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomer(),i=pt(t)?t:{},o=this.paypalCommerceFastlaneUtils.mapPayPalToBcInstrument(e,n)[0];return yield this.paymentIntegrationService.updatePaymentProviderCustomer(Object.assign(Object.assign({},i),{instruments:[o]})),o}})}isPaypalCommerceFastlaneThreeDSAvailable(){return Ye(this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.paypalcommerce_fastlane_three_ds\")}handleError(e){var t;(null===(t=this.paypalcommercefastlane)||void 0===t?void 0:t.onError)&&\"function\"==typeof this.paypalcommercefastlane.onError&&this.paypalcommercefastlane.onError(e)}}const mt=p(e=>{const{getHost:i}=e.getState();return new ht(e,new D((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)({host:i()})),ne(),se())},[{id:\"paypalcommerceacceleratedcheckout\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2hlY2tvdXQtc2RrLWpzL2Rpc3QvZXNtL2ludGVncmF0aW9ucy9wYXlwYWwtY29tbWVyY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQ0NZQSxFRERSQyxFQUFzQixDQUFDLEVFQ1osU0FBU0MsRUFDcEJDLEVBQ0FDLEdBRUEsT0FBT0MsT0FBT0MsT0FBT0gsRUFBUSxDQUFFQyxjQUNuQyxDQ05BSCxFQUFvQk0sRUFBSSxDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hSLEVBQW9CVSxFQUFFRixFQUFZQyxLQUFTVCxFQUFvQlUsRUFBRUgsRUFBU0UsSUFDNUVMLE9BQU9PLGVBQWVKLEVBQVNFLEVBQUssQ0FBRUcsWUFBWSxFQUFNQyxJQUFLTCxFQUFXQyxNQ0ozRVQsRUFBb0JVLEVBQUksQ0FBQ0ksRUFBS0MsSUFBVVgsT0FBT1ksVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NPbkUsTUFBZUksVUFBc0JDLE1BSWhELFdBQUFDLENBQVlDLEdDWEQsSUFBcUNOLEVEWTVDTyxNQUFNRCxHQUFXLHFDQUpyQixLQUFBRSxLQUFPLGdCQUNQLEtBQUFDLEtBQU8sV0NUeUNULGFEY1pBLFVDYmhDWixPQUFPc0IsZUFDUHRCLE9BQU9zQixlRFlRQyxLQ1plWCxHRFlmVyxLQ1ZSQyxVQUFZWixFRFlvQixtQkFBNUJJLE1BQU1TLGtCQUNiVCxNQUFNUyxrQkFBa0JGLGlCQUV4QkEsS0FBS0csTUFBUSxJQUFJVixNQUFNTyxLQUFLTCxTQUFTUSxLQUU3QyxFRWZXLE1BQU1DLFVBQTRDWixFQUM3RCxXQUFBRSxDQUFZQyxHQUNSQyxNQUNJRCxHQUNJLHVHQUdSSyxLQUFLSCxLQUFPLHNDQUNaRyxLQUFLRixLQUFPLG1DQUNoQixHTmJKLFNBQVkxQixHQUNSLHFEQUNBLGlDQUNBLHlDQUNBLGlEQUNBLHlDQUNBLHFEQUNBLG1DQUNBLCtDQUNBLHVDQUNBLHVDQUNBLDRDQUNBLDREQUNBLG9EQUNBLDhEQUNBLG9E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QixDQUFFQyxLQUFNSCxPQUM1RGtHLEtBQ0FvRyxPQUl1RSxDQUMzRSxDQUFFNVYsR0FBSSx1QyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvd2VicGFjay9ib290c3RyYXA/ZmZjYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9taXNzaW5nLWRhdGEtZXJyb3IudHM/YjdkYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3RvLXJlc29sdmFibGUtbW9kdWxlLnRzP2Q1MjAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnM/OTk0YyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQ/OWVhNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9zdGFuZGFyZC1lcnJvci50cz84YTAzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3NldC1wcm90b3R5cGUtb2YudHM/ODQ1YSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1jbGllbnQtdW5hdmFpbGFibGUtZXJyb3IudHM/ZjhlYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9idXktbm93LWNhcnQtY3JlYXRpb24tZXJyb3IudHM/ZDYwNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9yZXF1ZXN0LWVycm9yLnRzP2M4NDAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9jYXJ0L2NhcnQtc291cmNlLnRzPzM4OGEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLXR5cGVzLnRzPzM1NjAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UudHM/NjM1YyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9odHRwLXJlcXVlc3QvaW50ZXJuYWwtYXBpLWhlYWRlcnMudHM/NDExMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9odHRwLXJlcXVlc3QvY29udGVudC10eXBlLnRzPzUwNGQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9jb21tb24vaHR0cC1yZXF1ZXN0L3Nkay12ZXJzaW9uLWhlYWRlcnMudHM/N2JmMCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtcmVxdWVzdC1zZW5kZXIudHM/ZDdhOSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2Utc2NyaXB0LWxvYWRlci50cz82NGU4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZS50cz8zZjk4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2ludmFsaWQtYXJndW1lbnQtZXJyb3IudHM/MzkyMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UvcGF5cGFsLWNvbW1lcmNlLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzRlNTMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9jaGVja291dC1idXR0b25zL2RlZmF1bHQtY2hlY2tvdXQtYnV0dG9uLWhlaWdodC50cz9kNDI1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzMwODAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzRkNjAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1jdXN0b21lci1zdHJhdGVneS50cz8zNWFlIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9wYXlwYWwtY29tbWVyY2UtdmVubW8tY3VzdG9tZXItc3RyYXRlZ3kudHM/Y2RiZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtdmVubW8vY3JlYXRlLXBheXBhbC1jb21tZXJjZS12ZW5tby1jdXN0b21lci1zdHJhdGVneS50cz82YWQ4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvcGF5bWVudC9pbnN0cnVtZW50LnRzP2YyYjYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvcGF5cGFsLWNvbW1lcmNlLXR5cGVzLnRzPzEzZWIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvcGF5cGFsLWNvbW1lcmNlLXNkay50cz9mY2U4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2Utc2RrLnRzPzFkNTYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3N0b3JhZ2Uvc3JjL2Nvb2tpZS1zdG9yYWdlLnRzPzE1M2MiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLXV0aWxzLnRzP2ZlN2MiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1mYXN0bGFuZS11dGlscy50cz81OWEzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2dldC1mYXN0bGFuZS1zdHlsZXMudHM/OWZlNSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUvcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzk5NmUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3kudHM/MmZhNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UvcGF5cGFsLWNvbW1lcmNlLWJ1dHRvbi1zdHJhdGVneS50cz80YzlkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWJ1dHRvbi1zdHJhdGVneS50cz9hZjVkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2dldC1wYXlwYWwtbWVzc2FnZXMtc3R5bGVzLWZyb20tYm5wbC1jb25maWcudHM/MDUwOCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L3BheXBhbC1jb21tZXJjZS1jcmVkaXQtYnV0dG9uLXN0cmF0ZWd5LnRzPzE4Y2UiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1idXR0b24tc3RyYXRlZ3kudHM/NmVlMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtdmVubW8vcGF5cGFsLWNvbW1lcmNlLXZlbm1vLWJ1dHRvbi1zdHJhdGVneS50cz9mZTIyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLXZlbm1vLWJ1dHRvbi1zdHJhdGVneS50cz8xMzEwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzLWJ1dHRvbi1zdHJhdGVneS50cz81ZjI3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1idXR0b24tc3RyYXRlZ3kudHM/ZjJmMiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvdWkvc3JjL2xvYWRpbmctaW5kaWNhdG9yL2xvYWRpbmctaW5kaWNhdG9yLnRzP2IwODciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNvbnN0YW50cy50cz83ZDQ5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtYXJndW1lbnQtaW52YWxpZC1lcnJvci50cz9hNTAxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWludmFsaWQtZXJyb3IudHM/M2FkZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9vcmRlci1maW5hbGl6YXRpb24tbm90LXJlcXVpcmVkLWVycm9yLnRzP2I1YTEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9wYXltZW50L2lzLWhvc3RlZC1pbnRydW1lbnQtbGlrZS50cz84NzYzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvcGF5bWVudC9pcy12YXVsdGVkLWluc3RydW1lbnQudHM/MTgwZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvdXRpbGl0eS9zcmMvaXMtYmFzZS1pbnN0cnVtZW50L2lzLWJhc2UtaW5zdHJ1bWVudC50cz9lOTJmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9wYXlwYWwtY29tbWVyY2UtcGF5bWVudC1zdHJhdGVneS50cz8xZjJiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2lzLXJlZGlyZWN0LWFjdGlvbi1lcnJvci50cz81NTIzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2lzLXJlcXVlc3QtZXJyb3IudHM/YjQzZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy91dGlscy9pcy1wYXlwYWwtY29tbWVyY2UtcHJvdmlkZXItZXJyb3IudHM/Yzc0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1wYXltZW50LXN0cmF0ZWd5LnRzPzI3NmIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvbm90LWltcGxlbWVudGVkLWVycm9yLnRzPzNhMzUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LXBheW1lbnQtc3RyYXRlZ3kudHM/N2FmNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtY3JlZGl0LXBheW1lbnQtc3RyYXRlZ3kudHM/ODk2YSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtdmVubW8vcGF5cGFsLWNvbW1lcmNlLXZlbm1vLXBheW1lbnQtc3RyYXRlZ3kudHM/ODhmZSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtdmVubW8vY3JlYXRlLXBheXBhbC1jb21tZXJjZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5LnRzPzc4OTciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvdGltZW91dC1lcnJvci50cz8wODBkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy91dGlsaXR5L3NyYy9pcy1leHBlcmltZW50LWVuYWJsZWQvaXMtZXhwZXJpbWVudC1lbmFibGVkLnRzP2M5YTQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMtcGF5bWVudC1zdHJhdGVneS50cz9kNzM3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1wYXltZW50LXN0cmF0ZWd5LnRzP2VhZDkiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9ob3N0ZWQtZm9ybS9ob3N0ZWQtZmllbGQtdHlwZS50cz82NWQ4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvaG9zdGVkLWZvcm0vaXMtY3JlZGl0LWNhcmQtZm9ybS1maWVsZHMudHM/MGZhYSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2hvc3RlZC1mb3JtL2lzLWNyZWRpdC1jYXJkLXZhdWx0ZWQtZm9ybS1maWVsZHMudHM/ZjNiMyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1mYWlsZWQtZXJyb3IudHM/MDdkZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9ub3QtaW5pdGlhbGl6ZWQtZXJyb3IudHM/OGI0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LWludmFsaWQtZm9ybS1lcnJvci50cz9jMGZiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZC9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWNhcmRzLXBheW1lbnQtc3RyYXRlZ3kudHM/MTBlNiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy91dGlscy9pcy1wYXlwYWwtY29tbWVyY2UtYWNjZWxlcmF0ZWQtY2hlY2tvdXQtY3VzdG9tZXIudHM/NzNmMyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWNhcmQvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1zdHJhdGVneS50cz82N2VjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1yYXRlcGF5L3BheXBhbC1jb21tZXJjZS1yYXRlcGF5LXBheW1lbnQtc3RyYXRlZ3kudHM/MjIwMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtcmF0ZXBheS9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLXJhdGVwYXktcGF5bWVudC1zdHJhdGVneS50cz83MDRlIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2lzLXBheXBhbC1mYXN0bGFuZS1jdXN0b21lci50cz83MDM1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1mYXN0bGFuZS9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneS50cz9kMTVmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2lzLXBheXBhbC1mYXN0bGFuZS1yZXF1ZXN0LWVycm9yLnRzP2E4OTAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneS50cz80MDBmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuZXhwb3J0IGVudW0gTWlzc2luZ0RhdGFFcnJvclR5cGUge1xuICAgIE1pc3NpbmdCaWxsaW5nQWRkcmVzcyxcbiAgICBNaXNzaW5nQ2FydCxcbiAgICBNaXNzaW5nQ2hlY2tvdXQsXG4gICAgTWlzc2luZ0NvbnNpZ25tZW50cyxcbiAgICBNaXNzaW5nQ3VzdG9tZXIsXG4gICAgTWlzc2luZ0NoZWNrb3V0Q29uZmlnLFxuICAgIE1pc3NpbmdPcmRlcixcbiAgICBNaXNzaW5nT3JkZXJDb25maWcsXG4gICAgTWlzc2luZ09yZGVySWQsXG4gICAgTWlzc2luZ1BheW1lbnQsXG4gICAgTWlzc2luZ1BheW1lbnRJZCxcbiAgICBNaXNzaW5nUGF5bWVudEluc3RydW1lbnQsXG4gICAgTWlzc2luZ1BheW1lbnRNZXRob2QsXG4gICAgTWlzc2luZ1BheW1lbnRSZWRpcmVjdFVybCxcbiAgICBNaXNzaW5nUGF5bWVudFN0YXR1cyxcbiAgICBNaXNzaW5nUGF5bWVudFRva2VuLFxuICAgIE1pc3NpbmdTaGlwcGluZ0FkZHJlc3MsXG59XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciB3aGVuIGRhdGEgdGhhdCBpcyBleHBlY3RlZCB0byBleGlzdCBpcyBtaXNzaW5nLiBVc3VhbGx5IGl0XG4gKiBpcyBkdWUgdG8gdGhlIGZhY3QgdGhhdCBjZXJ0YWluIGRhdGEgaGFzIG5vdCBiZWVuIHJldHJpZXZlZCBmcm9tIG9yIHNhdmVkIHRvXG4gKiB0aGUgc2VydmVyIHlldC4gQW5kIHN1Y2ggZGF0YSBpcyByZXF1aXJlZCB0byBwZXJmb3JtIGNlcnRhaW4gYWN0aW9ucy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWlzc2luZ0RhdGFFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdWJ0eXBlOiBNaXNzaW5nRGF0YUVycm9yVHlwZSkge1xuICAgICAgICBzdXBlcihnZXRFcnJvck1lc3NhZ2Uoc3VidHlwZSkpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdNaXNzaW5nRGF0YUVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ21pc3NpbmdfZGF0YSc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UodHlwZTogTWlzc2luZ0RhdGFFcnJvclR5cGUpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdCaWxsaW5nQWRkcmVzczpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBiaWxsaW5nIGFkZHJlc3MgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NhcnQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY2FydCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ29uc2lnbm1lbnRzOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGNvbnNpZ25tZW50cyBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2hlY2tvdXQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY2hlY2tvdXQgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0N1c3RvbWVyOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGN1c3RvbWVyIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDaGVja291dENvbmZpZzpcbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJDb25maWc6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY29uZmlndXJhdGlvbiBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXI6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2Ugb3JkZXIgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2Ugb3JkZXIgSUQgaXMgdW5hdmFpbGFibGUgb3Igbm90IGdlbmVyYXRlZCB5ZXQuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50OlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHBheW1lbnQgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRUb2tlbjpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgdG9rZW4gcmVxdWlyZWQgdG8gc3VibWl0IGEgcGF5bWVudCBpcyBtaXNzaW5nLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBwYXltZW50IG1ldGhvZCBkYXRhIGlzIHVuYXZhaWxhYmxlIG9yIG5vdCBwcm9wZXJseSBjb25maWd1cmVkLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nU2hpcHBpbmdBZGRyZXNzOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHNoaXBwaW5nIGFkZHJlc3MgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHJlcXVpcmVkIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcbiAgICB9XG59XG4iLCJpbXBvcnQgUmVzb2x2YWJsZU1vZHVsZSBmcm9tICcuL3Jlc29sdmFibGUtbW9kdWxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9SZXNvbHZhYmxlTW9kdWxlPFRNb2R1bGUsIFRJZGVudGlmaWVyPihcbiAgICBtb2R1bGU6IFRNb2R1bGUsXG4gICAgcmVzb2x2ZUlkczogVElkZW50aWZpZXJbXSxcbik6IFJlc29sdmFibGVNb2R1bGU8VE1vZHVsZSwgVElkZW50aWZpZXI+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihtb2R1bGUsIHsgcmVzb2x2ZUlkcyB9KTtcbn1cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgQ3VzdG9tRXJyb3IgZnJvbSAnLi9jdXN0b20tZXJyb3InO1xuaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gJy4vc2V0LXByb3RvdHlwZS1vZic7XG5cbi8qKlxuICogVGhpcyBlcnJvciB0eXBlIHNob3VsZCBub3QgYmUgY29uc3RydWN0ZWQgZGlyZWN0bHkuIEl0IGlzIGEgYmFzZSBjbGFzcyBmb3JcbiAqIGFsbCBjdXN0b20gZXJyb3JzIHRocm93biBpbiB0aGlzIGxpYnJhcnkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkRXJyb3IgZXh0ZW5kcyBFcnJvciBpbXBsZW1lbnRzIEN1c3RvbUVycm9yIHtcbiAgICBuYW1lID0gJ1N0YW5kYXJkRXJyb3InO1xuICAgIHR5cGUgPSAnc3RhbmRhcmQnO1xuXG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdBbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZC4nKTtcblxuICAgICAgICBzZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgbmV3LnRhcmdldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKHRoaXMubWVzc2FnZSkuc3RhY2s7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihvYmplY3Q6IGFueSwgcHJvdG90eXBlOiBvYmplY3QpIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmplY3QsIHByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0O1xufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gdGhlIGNsaWVudCBsaWJyYXJ5IG9mIGEgcGF5bWVudCBtZXRob2QgZmFpbHNcbiAqIHRvIGxvYWQsIG9yIGZvciBzb21lIHJlYXNvbiwgaXQgaXMgaW5hY2Nlc3NpYmxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBtZXNzYWdlIHx8XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIGNsaWVudCBsaWJyYXJ5IG9mIGEgcGF5bWVudCBtZXRob2QgaXMgbm90IGxvYWRlZCBvciByZWFkeSB0byBiZSB1c2VkLicsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2NsaWVudF91bmF2YWlsYWJsZSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gYSBzaG9wcGVyIHRyaWVzIHRvIHNpZ24gaW4gYXMgYSBndWVzdCBidXRcbiAqIHRoZXkgYXJlIGFscmVhZHkgc2lnbmVkIGluIGFzIGEgcmVnaXN0ZXJlZCBjdXN0b21lci5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgbWVzc2FnZSB8fFxuICAgICAgICAgICAgICAgICdBbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZCBkdXJpbmcgYnV5IG5vdyBjYXJ0IGNyZWF0aW9uIHByb2Nlc3MuIFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnQnV5Tm93Q2FydENyZWF0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnYnV5X25vd19jYXJ0X2NyZWF0aW9uX2Vycm9yJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5jb25zdCBERUZBVUxUX1JFU1BPTlNFID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGhlYWRlcnM6IHt9LFxuICAgIHN0YXR1czogMCxcbn07XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiB3ZSBhcmUgdW5hYmxlIHRvIG1ha2UgYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIuIEl0IHdyYXBzXG4gKiBhbnkgc2VydmVyIHJlc3BvbnNlIGludG8gYSBKUyBlcnJvciBvYmplY3QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcXVlc3RFcnJvcjxUQm9keSA9IGFueT4gZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBib2R5OiBUQm9keSB8IHt9O1xuICAgIGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgZXJyb3JzOiBBcnJheTx7IGNvZGU6IHN0cmluZzsgbWVzc2FnZT86IHN0cmluZyB9PjtcbiAgICBzdGF0dXM6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZXNwb25zZT86IFJlc3BvbnNlPFRCb2R5IHwge30+LFxuICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgZXJyb3JzLFxuICAgICAgICB9OiB7XG4gICAgICAgICAgICBtZXNzYWdlPzogc3RyaW5nO1xuICAgICAgICAgICAgZXJyb3JzPzogQXJyYXk8eyBjb2RlOiBzdHJpbmc7IG1lc3NhZ2U/OiBzdHJpbmcgfT47XG4gICAgICAgIH0gPSB7fSxcbiAgICApIHtcbiAgICAgICAgY29uc3QgeyBib2R5LCBoZWFkZXJzLCBzdGF0dXMgfSA9IHJlc3BvbnNlIHx8IERFRkFVTFRfUkVTUE9OU0U7XG5cbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJyZWQuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1JlcXVlc3RFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyZXF1ZXN0JztcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgIH1cbn1cbiIsImV4cG9ydCBlbnVtIENhcnRTb3VyY2Uge1xuICAgIEJ1eU5vdyA9ICdCVVlfTk9XJyxcbn1cbiIsImltcG9ydCB7XG4gICAgQnV5Tm93Q2FydFJlcXVlc3RCb2R5LFxuICAgIEhvc3RlZEluc3RydW1lbnQsXG4gICAgU2hpcHBpbmdPcHRpb24sXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgRnVuZGluZyBzb3VyY2VzXG4gKlxuICovXG5leHBvcnQgdHlwZSBGdW5kaW5nVHlwZSA9IHN0cmluZ1tdO1xuZXhwb3J0IHR5cGUgRW5hYmxlRnVuZGluZ1R5cGUgPSBGdW5kaW5nVHlwZSB8IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZVNES0Z1bmRpbmcge1xuICAgIENBUkQ6IHN0cmluZztcbiAgICBQQVlQQUw6IHN0cmluZztcbiAgICBDUkVESVQ6IHN0cmluZztcbiAgICBQQVlMQVRFUjogc3RyaW5nO1xuICAgIE9YWE86IHN0cmluZztcbiAgICBTRVBBOiBzdHJpbmc7XG4gICAgVkVOTU86IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIFNES1xuICpcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NvbmZpZyB7XG4gICAgaW5wdXRFdmVudHM6IHtcbiAgICAgICAgb25DaGFuZ2UoZGF0YTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiB2b2lkO1xuICAgICAgICBvbkZvY3VzKGRhdGE6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlKTogdm9pZDtcbiAgICAgICAgb25CbHVyKGRhdGE6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlKTogdm9pZDtcbiAgICAgICAgb25JbnB1dFN1Ym1pdFJlcXVlc3QoZGF0YTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiB2b2lkO1xuICAgIH07XG4gICAgY3JlYXRlVmF1bHRTZXR1cFRva2VuPzogKGRhdGE6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlKSA9PiB2b2lkO1xuICAgIGNyZWF0ZU9yZGVyPzogKCkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICAgIHN0eWxlOiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc1JlbmRlck9wdGlvbnNbJ3N0eWxlcyddO1xuICAgIG9uQXBwcm92ZShkYXRhOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNPbkFwcHJvdmVEYXRhKTogdm9pZDtcbiAgICBvbkVycm9yKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzT25BcHByb3ZlRGF0YSB7XG4gICAgdmF1bHRTZXR1cFRva2VuPzogc3RyaW5nO1xuICAgIG9yZGVySUQ6IHN0cmluZztcbiAgICBsaWFiaWxpdHlTaGlmdD86IExpYWJpbGl0eVNoaWZ0RW51bTtcbn1cblxuZXhwb3J0IGVudW0gTGlhYmlsaXR5U2hpZnRFbnVtIHtcbiAgICBQb3NzaWJsZSA9ICdQT1NTSUJMRScsXG4gICAgTm8gPSAnTk8nLFxuICAgIFVua25vd24gPSAnVU5LTk9XTicsXG4gICAgWWVzID0gJ1lFUycsXG59XG5cbmludGVyZmFjZSBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNGaWVsZERhdGEge1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICBpc0VtcHR5OiBib29sZWFuO1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG4gICAgaXNQb3RlbnRpYWxseVZhbGlkOiBib29sZWFuO1xufVxuXG50eXBlIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NhcmQgPSBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0NhcmQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUge1xuICAgIGNhcmRzOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNDYXJkW107XG4gICAgZW1pdHRlZEJ5OiBzdHJpbmc7XG4gICAgaXNGb3JtVmFsaWQ6IGJvb2xlYW47XG4gICAgZXJyb3JzOiBzdHJpbmdbXTtcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgY2FyZEN2dkZpZWxkOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGNhcmROdW1iZXJGaWVsZDogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBjYXJkTmFtZUZpZWxkPzogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBjYXJkRXhwaXJ5RmllbGQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlRmllbGRzIHtcbiAgICByZW5kZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICByZW1vdmVDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gICAgY2xvc2UoKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlRmllbGRzSW5pdGlhbGl6YXRpb25EYXRhIHtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHMge1xuICAgIGlzRWxpZ2libGUoKTogYm9vbGVhbjtcbiAgICBDVlZGaWVsZChjb25maWc/OiBQYXlQYWxDb21tZXJjZUZpZWxkc0luaXRpYWxpemF0aW9uRGF0YSk6IFBheVBhbENvbW1lcmNlRmllbGRzO1xuICAgIEV4cGlyeUZpZWxkKGNvbmZpZz86IFBheVBhbENvbW1lcmNlRmllbGRzSW5pdGlhbGl6YXRpb25EYXRhKTogUGF5UGFsQ29tbWVyY2VGaWVsZHM7XG4gICAgTmFtZUZpZWxkKGNvbmZpZz86IFBheVBhbENvbW1lcmNlRmllbGRzSW5pdGlhbGl6YXRpb25EYXRhKTogUGF5UGFsQ29tbWVyY2VGaWVsZHM7XG4gICAgTnVtYmVyRmllbGQoY29uZmlnPzogUGF5UGFsQ29tbWVyY2VGaWVsZHNJbml0aWFsaXphdGlvbkRhdGEpOiBQYXlQYWxDb21tZXJjZUZpZWxkcztcbiAgICBzdWJtaXQoY29uZmlnPzogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3VibWl0Q29uZmlnKTogUHJvbWlzZTx2b2lkPjtcbiAgICBnZXRTdGF0ZSgpOiBQcm9taXNlPFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdWJtaXRDb25maWcge1xuICAgIGJpbGxpbmdBZGRyZXNzOiB7XG4gICAgICAgIGNvbXBhbnk/OiBzdHJpbmc7XG4gICAgICAgIGFkZHJlc3NMaW5lMTogc3RyaW5nO1xuICAgICAgICBhZGRyZXNzTGluZTI/OiBzdHJpbmc7XG4gICAgICAgIGFkbWluQXJlYTE6IHN0cmluZzsgLy8gU3RhdGVcbiAgICAgICAgYWRtaW5BcmVhMjogc3RyaW5nOyAvLyBDaXR5XG4gICAgICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICAgICAgY291bnRyeUNvZGU/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxTREsge1xuICAgIENhcmRGaWVsZHM6IChkYXRhOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNDb25maWcpID0+IFByb21pc2U8UGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzPjtcbiAgICBHb29nbGVwYXk6ICgpID0+IHtcbiAgICAgICAgY29uZmlnOiAoKSA9PiBQcm9taXNlPEdvb2dsZVBheUNvbmZpZz47XG4gICAgICAgIGNvbmZpcm1PcmRlcjogKGFyZzA6IHtcbiAgICAgICAgICAgIG9yZGVySWQ6IHN0cmluZztcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2REYXRhOiBDb25maXJtT3JkZXJEYXRhO1xuICAgICAgICB9KSA9PiBQcm9taXNlPHsgc3RhdHVzOiBzdHJpbmcgfT47XG4gICAgICAgIGluaXRpYXRlUGF5ZXJBY3Rpb246ICgpID0+IHZvaWQ7XG4gICAgfTtcbiAgICBGVU5ESU5HOiBQYXlQYWxDb21tZXJjZVNES0Z1bmRpbmc7XG4gICAgSG9zdGVkRmllbGRzOiB7XG4gICAgICAgIGlzRWxpZ2libGUoKTogYm9vbGVhbjtcbiAgICAgICAgcmVuZGVyKGRhdGE6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzUmVuZGVyT3B0aW9ucyk6IFByb21pc2U8UGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHM+O1xuICAgIH07XG4gICAgTGVnYWw6IFBheVBhbExlZ2FsICYgTGVnYWxGdW5kaW5nO1xuICAgIEJ1dHRvbnMob3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyk6IFBheVBhbENvbW1lcmNlQnV0dG9ucztcbiAgICBQYXltZW50RmllbGRzKG9wdGlvbnM6IFBheVBhbENvbW1lcmNlUGF5bWVudEZpZWxkc09wdGlvbnMpOiBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHM7XG4gICAgTWVzc2FnZXMob3B0aW9uczogUGF5UGFsQ29tbWVyY2VNZXNzYWdlc09wdGlvbnMpOiBQYXlQYWxDb21tZXJjZU1lc3NhZ2VzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpcm1PcmRlckRhdGEge1xuICAgIHRva2VuaXphdGlvbkRhdGE6IHtcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICB0b2tlbjogc3RyaW5nO1xuICAgIH07XG4gICAgaW5mbzoge1xuICAgICAgICBjYXJkTmV0d29yazogc3RyaW5nO1xuICAgICAgICBjYXJkRGV0YWlsczogc3RyaW5nO1xuICAgIH07XG4gICAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZVBheUNvbmZpZyB7XG4gICAgYWxsb3dlZFBheW1lbnRNZXRob2RzOiBBbGxvd2VkUGF5bWVudE1ldGhvZHNbXTtcbiAgICBhcGlWZXJzaW9uOiBudW1iZXI7XG4gICAgYXBpVmVyc2lvbk1pbm9yOiBudW1iZXI7XG4gICAgY291bnRyeUNvZGU6IHN0cmluZztcbiAgICBpc0VsaWdpYmxlOiBib29sZWFuO1xuICAgIG1lcmNoYW50SW5mbzoge1xuICAgICAgICBtZXJjaGFudElkOiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50T3JpZ2luOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbGxvd2VkUGF5bWVudE1ldGhvZHMge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIGFsbG93ZWRBdXRoTWV0aG9kczogc3RyaW5nW107XG4gICAgICAgIGFsbG93ZWRDYXJkTmV0d29ya3M6IHN0cmluZ1tdO1xuICAgICAgICBiaWxsaW5nQWRkcmVzc1JlcXVpcmVkOiBib29sZWFuO1xuICAgICAgICBhc3N1cmFuY2VEZXRhaWxzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgICAgIGJpbGxpbmdBZGRyZXNzUGFyYW1ldGVyczoge1xuICAgICAgICAgICAgZm9ybWF0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB0b2tlbml6YXRpb25TcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgZ2F0ZXdheTogc3RyaW5nO1xuICAgICAgICAgICAgZ2F0ZXdheU1lcmNoYW50SWQ6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgdHlwZSBQYXlQYWxMZWdhbCA9IChwYXJhbXM6IHsgZnVuZGluZ1NvdXJjZTogc3RyaW5nIH0pID0+IHtcbiAgICByZW5kZXIoY29udGFpbmVyOiBzdHJpbmcpOiB2b2lkO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBMZWdhbEZ1bmRpbmcge1xuICAgIEZVTkRJTkc6IHtcbiAgICAgICAgUEFZX1VQT05fSU5WT0lDRTogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmlydGhEYXRlIHtcbiAgICBnZXRGdWxsWWVhcigpOiBudW1iZXI7XG4gICAgZ2V0RGF0ZSgpOiBudW1iZXI7XG4gICAgZ2V0TW9udGgoKTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlU2NyaXB0UGFyYW1zIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgICdjbGllbnQtaWQnPzogc3RyaW5nO1xuICAgICAgICAnbWVyY2hhbnQtaWQnPzogc3RyaW5nO1xuICAgICAgICAnYnV5ZXItY291bnRyeSc/OiBzdHJpbmc7XG4gICAgICAgICdkaXNhYmxlLWZ1bmRpbmcnPzogRnVuZGluZ1R5cGU7XG4gICAgICAgICdlbmFibGUtZnVuZGluZyc/OiBFbmFibGVGdW5kaW5nVHlwZTtcbiAgICAgICAgY3VycmVuY3k/OiBzdHJpbmc7XG4gICAgICAgIGNvbW1pdD86IGJvb2xlYW47XG4gICAgICAgIGludGVudD86IFBheVBhbENvbW1lcmNlSW50ZW50O1xuICAgICAgICBjb21wb25lbnRzPzogQ29tcG9uZW50c1NjcmlwdFR5cGU7XG4gICAgfTtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICdkYXRhLWNsaWVudC10b2tlbic/OiBzdHJpbmc7XG4gICAgICAgICdkYXRhLWNsaWVudC1tZXRhZGF0YS1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnPzogc3RyaW5nO1xuICAgICAgICAnZGF0YS11c2VyLWlkLXRva2VuJz86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgZW51bSBQYXlQYWxDb21tZXJjZUludGVudCB7XG4gICAgQVVUSE9SSVpFID0gJ2F1dGhvcml6ZScsXG4gICAgQ0FQVFVSRSA9ICdjYXB0dXJlJyxcbn1cblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50c1NjcmlwdFR5cGUgPSBBcnJheTxcbiAgICB8ICdidXR0b25zJ1xuICAgIHwgJ2Z1bmRpbmctZWxpZ2liaWxpdHknXG4gICAgfCAnaG9zdGVkLWZpZWxkcydcbiAgICB8ICdtZXNzYWdlcydcbiAgICB8ICdwYXltZW50LWZpZWxkcydcbiAgICB8ICdsZWdhbCdcbiAgICB8ICdnb29nbGVwYXknXG4gICAgfCAnY29ubmVjdCdcbiAgICB8ICdjYXJkLWZpZWxkcydcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgICBwYXlwYWw/OiBQYXlQYWxTREs7XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBJbml0aWFsaXphdGlvbiBEYXRhXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhIHtcbiAgICBhdHRyaWJ1dGlvbklkPzogc3RyaW5nO1xuICAgIGF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM6IEZ1bmRpbmdUeXBlO1xuICAgIGJ1dHRvblN0eWxlPzogUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zO1xuICAgIGJ1eWVyQ291bnRyeT86IHN0cmluZztcbiAgICBjbGllbnRJZDogc3RyaW5nO1xuICAgIGNsaWVudFRva2VuPzogc3RyaW5nO1xuICAgIGVuYWJsZWRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzOiBGdW5kaW5nVHlwZTtcbiAgICBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlPzogYm9vbGVhbjtcbiAgICBpbnRlbnQ/OiBQYXlQYWxDb21tZXJjZUludGVudDtcbiAgICBpc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkPzogYm9vbGVhbjtcbiAgICBpc0hvc3RlZENoZWNrb3V0RW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNQYXlQYWxDcmVkaXRBdmFpbGFibGU/OiBib29sZWFuO1xuICAgIGlzVmVubW9FbmFibGVkPzogYm9vbGVhbjtcbiAgICBpc0dvb2dsZVBheUVuYWJsZWQ/OiBib29sZWFuO1xuICAgIG1lcmNoYW50SWQ/OiBzdHJpbmc7XG4gICAgb3JkZXJJZD86IHN0cmluZztcbiAgICBzaG91bGRSZW5kZXJGaWVsZHM/OiBib29sZWFuO1xuICAgIHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQ/OiBib29sZWFuO1xuICAgIHBheW1lbnRCdXR0b25TdHlsZXM/OiBSZWNvcmQ8c3RyaW5nLCBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM+O1xuICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uPzogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtW107XG4gICAgaXNBcHBTd2l0Y2hFbmFibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHN0YXR1czogYm9vbGVhbjtcbiAgICBzdHlsZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBCdXlOb3dcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMge1xuICAgIGdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSgpOiBCdXlOb3dDYXJ0UmVxdWVzdEJvZHk7XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBIb3N0ZWQgRmllbGRzXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzUmVuZGVyT3B0aW9ucyB7XG4gICAgZmllbGRzPzoge1xuICAgICAgICBudW1iZXI/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkT3B0aW9uO1xuICAgICAgICBjdnY/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkT3B0aW9uO1xuICAgICAgICBleHBpcmF0aW9uRGF0ZT86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRPcHRpb247XG4gICAgfTtcbiAgICBwYXltZW50c1NESz86IGJvb2xlYW47XG4gICAgc3R5bGVzPzoge1xuICAgICAgICBpbnB1dD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgICAgICcuaW52YWxpZCc/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgICAnLnZhbGlkJz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgICAgICc6Zm9jdXMnPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICB9O1xuICAgIGNyZWF0ZU9yZGVyKCk6IFByb21pc2U8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkT3B0aW9uIHtcbiAgICBzZWxlY3Rvcjogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzIHtcbiAgICBzdWJtaXQoXG4gICAgICAgIG9wdGlvbnM/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc1N1Ym1pdE9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0FwcHJvdmU+O1xuICAgIGdldFN0YXRlKCk6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzU3RhdGU7XG4gICAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzU3RhdGUpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzU3VibWl0T3B0aW9ucyB7XG4gICAgY29udGluZ2VuY2llcz86IEFycmF5PCczRF9TRUNVUkUnPjtcbiAgICBjYXJkaG9sZGVyTmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0FwcHJvdmUge1xuICAgIG9yZGVySWQ6IHN0cmluZztcbiAgICBsaWFiaWxpdHlTaGlmdD86ICdQT1NTSUJMRScgfCAnTk8nIHwgJ1VOS05PV04nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzU3RhdGUge1xuICAgIGNhcmRzOiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0NhcmRbXTtcbiAgICBlbWl0dGVkQnk6IHN0cmluZztcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgbnVtYmVyPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGV4cGlyYXRpb25EYXRlPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGV4cGlyYXRpb25Nb250aD86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBleHBpcmF0aW9uWWVhcj86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBjdnY/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgcG9zdGFsQ29kZT86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNDYXJkIHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgbmljZVR5cGU6IHN0cmluZztcbiAgICBjb2RlOiB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgc2l6ZTogbnVtYmVyO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGEge1xuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIGlzRW1wdHk6IGJvb2xlYW47XG4gICAgaXNQb3RlbnRpYWxseVZhbGlkOiBib29sZWFuO1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBCdXR0b25zXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQnV0dG9ucyB7XG4gICAgcmVuZGVyKGlkOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgaXNFbGlnaWJsZSgpOiBib29sZWFuO1xuICAgIGhhc1JldHVybmVkPygpOiBib29sZWFuO1xuICAgIHJlc3VtZT8oKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zIHtcbiAgICBleHBlcmllbmNlPzogc3RyaW5nO1xuICAgIHN0eWxlPzogUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zO1xuICAgIGZ1bmRpbmdTb3VyY2U6IHN0cmluZztcbiAgICBjcmVhdGVPcmRlcigpOiBQcm9taXNlPHN0cmluZz47XG4gICAgb25BcHByb3ZlKFxuICAgICAgICBkYXRhOiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICAgICBhY3Rpb25zOiBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbiB8IHZvaWQ+IHwgdm9pZDtcbiAgICBvbkluaXQ/KGRhdGE6IEluaXRDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IEluaXRDYWxsYmFja0FjdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIG9uQ29tcGxldGU/KGRhdGE6IENvbXBsZXRlQ2FsbGJhY2tEYXRhUGF5bG9hZCk6IFByb21pc2U8dm9pZD47XG4gICAgb25DbGljaz8oZGF0YTogQ2xpY2tDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IENsaWNrQ2FsbGJhY2tBY3Rpb25zKTogUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gICAgb25FcnJvcj8oZXJyb3I6IEVycm9yKTogdm9pZDtcbiAgICBvbkNhbmNlbD8oKTogdm9pZDtcbiAgICBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZT8oZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKTogUHJvbWlzZTx2b2lkPjtcbiAgICBvblNoaXBwaW5nT3B0aW9uc0NoYW5nZT8oZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkIHtcbiAgICBvcmRlcklkOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWRTaGlwcGluZ09wdGlvbjogUGF5UGFsU2VsZWN0ZWRTaGlwcGluZ09wdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQge1xuICAgIG9yZGVySWQ6IHN0cmluZztcbiAgICBzaGlwcGluZ0FkZHJlc3M6IFBheVBhbEFkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpY2tDYWxsYmFja1BheWxvYWQge1xuICAgIGZ1bmRpbmdTb3VyY2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbGlja0NhbGxiYWNrQWN0aW9ucyB7XG4gICAgcmVqZWN0KCk6IHZvaWQ7XG4gICAgcmVzb2x2ZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRDYWxsYmFja1BheWxvYWQge1xuICAgIGNvcnJlbGF0aW9uSUQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbml0Q2FsbGJhY2tBY3Rpb25zIHtcbiAgICBkaXNhYmxlKCk6IHZvaWQ7XG4gICAgZW5hYmxlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQWRkcmVzcyB7XG4gICAgY2l0eTogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsQWRkcmVzc0NhbGxiYWNrRGF0YSB7XG4gICAgY2l0eTogc3RyaW5nO1xuICAgIGNvdW50cnlfY29kZTogc3RyaW5nO1xuICAgIHBvc3RhbF9jb2RlOiBzdHJpbmc7XG4gICAgc3RhdGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxTZWxlY3RlZFNoaXBwaW5nT3B0aW9uIHtcbiAgICBhbW91bnQ6IHtcbiAgICAgICAgY3VycmVuY3lfY29kZTogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH07XG4gICAgaWQ6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkIHtcbiAgICBvcmRlcklEPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcHJvdmVDYWxsYmFja0FjdGlvbnMge1xuICAgIG9yZGVyOiB7XG4gICAgICAgIGdldDogKCkgPT4gUHJvbWlzZTxQYXlQYWxPcmRlckRldGFpbHM+O1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJEZXRhaWxzIHtcbiAgICBwYXllcjoge1xuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnaXZlbl9uYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICBzdXJuYW1lOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGVtYWlsX2FkZHJlc3M6IHN0cmluZztcbiAgICAgICAgYWRkcmVzczogUGF5UGFsT3JkZXJBZGRyZXNzO1xuICAgICAgICBwaG9uZT86IHtcbiAgICAgICAgICAgIHBob25lX251bWJlcjoge1xuICAgICAgICAgICAgICAgIG5hdGlvbmFsX251bWJlcjogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHB1cmNoYXNlX3VuaXRzOiBBcnJheTx7XG4gICAgICAgIHNoaXBwaW5nOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBQYXlQYWxPcmRlckFkZHJlc3M7XG4gICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgZnVsbF9uYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbE9yZGVyQWRkcmVzcyB7XG4gICAgYWRkcmVzc19saW5lXzE6IHN0cmluZztcbiAgICBhZGRyZXNzX2xpbmVfMjogc3RyaW5nO1xuICAgIGFkbWluX2FyZWFfMjogc3RyaW5nO1xuICAgIGFkbWluX2FyZWFfMT86IHN0cmluZztcbiAgICBwb3N0YWxfY29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlfY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlQ2FsbGJhY2tEYXRhUGF5bG9hZCB7XG4gICAgaW50ZW50OiBzdHJpbmc7XG4gICAgb3JkZXJJRDogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvbkxhYmVsIHtcbiAgICBwYXlwYWwgPSAncGF5cGFsJyxcbiAgICBjaGVja291dCA9ICdjaGVja291dCcsXG4gICAgYnV5bm93ID0gJ2J1eW5vdycsXG4gICAgcGF5ID0gJ3BheScsXG4gICAgaW5zdGFsbG1lbnQgPSAnaW5zdGFsbG1lbnQnLFxufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvbkNvbG9yIHtcbiAgICBnb2xkID0gJ2dvbGQnLFxuICAgIGJsdWUgPSAnYmx1ZScsXG4gICAgc2lsdmVyID0gJ3NpbHZlcicsXG4gICAgYmxhY2sgPSAnYmxhY2snLFxuICAgIHdoaXRlID0gJ3doaXRlJyxcbn1cblxuZXhwb3J0IGVudW0gU3R5bGVCdXR0b25TaGFwZSB7XG4gICAgcGlsbCA9ICdwaWxsJyxcbiAgICByZWN0ID0gJ3JlY3QnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyB7XG4gICAgY29sb3I/OiBTdHlsZUJ1dHRvbkNvbG9yO1xuICAgIHNoYXBlPzogU3R5bGVCdXR0b25TaGFwZTtcbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gICAgbGFiZWw/OiBTdHlsZUJ1dHRvbkxhYmVsO1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgUGF5bWVudCBmaWVsZHNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzIHtcbiAgICByZW5kZXIoaWQ6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzT3B0aW9ucyB7XG4gICAgc3R5bGU/OiBQYXlQYWxDb21tZXJjZUZpZWxkc1N0eWxlT3B0aW9ucztcbiAgICBmdW5kaW5nU291cmNlOiBzdHJpbmc7XG4gICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU/OiB7XG4gICAgICAgICAgICB2YWx1ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgZW1haWw/OiB7XG4gICAgICAgICAgICB2YWx1ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlRmllbGRzU3R5bGVPcHRpb25zIHtcbiAgICB2YXJpYWJsZXM/OiB7XG4gICAgICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplQmFzZT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVTbT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVNPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZUxnPzogc3RyaW5nO1xuICAgICAgICB0ZXh0Q29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9yVGV4dFBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgICAgICBjb2xvckJhY2tncm91bmQ/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9ySW5mbz86IHN0cmluZztcbiAgICAgICAgY29sb3JEYW5nZXI/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICAgICAgYm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlcldpZHRoPzogc3RyaW5nO1xuICAgICAgICBib3JkZXJGb2N1c0NvbG9yPzogc3RyaW5nO1xuICAgICAgICBzcGFjaW5nVW5pdD86IHN0cmluZztcbiAgICB9O1xuICAgIHJ1bGVzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsQ29tbWVyY2UgTWVzc2FnZXNcbiAqL1xuLy8gVE9ETzogVGhpcyBpbnRlcmZhY2UgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgUGF5UGF5U0RLIGludGVyZmFjZSBpcyByZW1vdmVkXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlTWVzc2FnZXMge1xuICAgIHJlbmRlcihpZDogc3RyaW5nKTogdm9pZDtcbn1cblxuLy8gVE9ETzogVGhpcyBpbnRlcmZhY2UgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgUGF5UGF5U0RLIGludGVyZmFjZSBpcyByZW1vdmVkXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlTWVzc2FnZXNPcHRpb25zIHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBwbGFjZW1lbnQ6IHN0cmluZztcbiAgICBzdHlsZT86IFBheVBhbENvbW1lcmNlTWVzc2FnZXNTdHlsZU9wdGlvbnM7XG4gICAgZnVuZGluZ1NvdXJjZT86IHN0cmluZztcbn1cblxuLy8gVE9ETzogVGhpcyBpbnRlcmZhY2UgY2FuIGJlIHJlbW92ZWQgb25jZSB0aGUgUGF5UGF5U0RLIGludGVyZmFjZSBpcyByZW1vdmVkXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlTWVzc2FnZXNTdHlsZU9wdGlvbnMge1xuICAgIGxheW91dD86IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogT3RoZXJcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIE5vbkluc3RhbnRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzIHtcbiAgICBPWFhPID0gJ294eG8nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbE9yZGVyRGF0YSB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xuICAgIHNldHVwVG9rZW4/OiBzdHJpbmc7XG4gICAgYXBwcm92ZVVybDogc3RyaW5nO1xuICAgIGZhc3RsYW5lVG9rZW4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsVXBkYXRlT3JkZXJSZXF1ZXN0Qm9keSB7XG4gICAgYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zPzogU2hpcHBpbmdPcHRpb25bXTtcbiAgICBjYXJ0SWQ6IHN0cmluZztcbiAgICBzZWxlY3RlZFNoaXBwaW5nT3B0aW9uPzogU2hpcHBpbmdPcHRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsVXBkYXRlT3JkZXJSZXNwb25zZSB7XG4gICAgc3RhdHVzQ29kZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENyZWF0ZU9yZGVyUmVxdWVzdEJvZHkgZXh0ZW5kcyBIb3N0ZWRJbnN0cnVtZW50LCBWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgY2FydElkOiBzdHJpbmc7XG4gICAgbWV0YWRhdGFJZD86IHN0cmluZztcbiAgICBzZXR1cFRva2VuPzogYm9vbGVhbjtcbiAgICBmYXN0bGFuZVRva2VuPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBQYXlQYWxPcmRlclN0YXR1cyB7XG4gICAgQXBwcm92ZWQgPSAnQVBQUk9WRUQnLFxuICAgIENyZWF0ZWQgPSAnQ1JFQVRFRCcsXG4gICAgUGF5ZXJBY3Rpb25SZXF1aXJlZCA9ICdQQVlFUl9BQ1RJT05fUkVRVUlSRUQnLFxuICAgIFBvbGxpbmdTdG9wID0gJ1BPTExJTkdfU1RPUCcsXG4gICAgUG9sbGluZ0Vycm9yID0gJ1BPTExJTkdfRVJST1InLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbE9yZGVyU3RhdHVzRGF0YSB7XG4gICAgc3RhdHVzOiBQYXlQYWxPcmRlclN0YXR1cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDcmVhdGVPcmRlckNhcmRGaWVsZHNSZXNwb25zZSB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xuICAgIHNldHVwVG9rZW4/OiBzdHJpbmc7XG59XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGlzTmlsLCBvbWl0QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJpbGxpbmdBZGRyZXNzUmVxdWVzdEJvZHksXG4gICAgQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IsXG4gICAgQ2FydCxcbiAgICBDYXJ0U291cmNlLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbiAgICBSZXF1ZXN0RXJyb3IsXG4gICAgUmVxdWVzdE9wdGlvbnMsXG4gICAgU2hpcHBpbmdPcHRpb24sXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyIGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXJlcXVlc3Qtc2VuZGVyJztcbmltcG9ydCBQYXlQYWxDb21tZXJjZVNjcmlwdExvYWRlciBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1zY3JpcHQtbG9hZGVyJztcbmltcG9ydCB7XG4gICAgUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zLFxuICAgIFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENyZWF0ZU9yZGVyQ2FyZEZpZWxkc1Jlc3BvbnNlLFxuICAgIFBheVBhbENyZWF0ZU9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5UGFsT3JkZXJEZXRhaWxzLFxuICAgIFBheVBhbE9yZGVyU3RhdHVzLFxuICAgIFBheVBhbFNESyxcbiAgICBTdHlsZUJ1dHRvbkNvbG9yLFxuICAgIFN0eWxlQnV0dG9uTGFiZWwsXG4gICAgU3R5bGVCdXR0b25TaGFwZSxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBwYXlwYWxTZGs/OiBQYXlQYWxTREs7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyOiBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VTY3JpcHRMb2FkZXI6IFBheVBhbENvbW1lcmNlU2NyaXB0TG9hZGVyLFxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5UGFsU0RLIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGxvYWRQYXlQYWxTZGsoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHByb3ZpZGVkQ3VycmVuY3lDb2RlPzogc3RyaW5nLFxuICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlPzogYm9vbGVhbixcbiAgICAgICAgZm9yY2VMb2FkPzogYm9vbGVhbixcbiAgICApOiBQcm9taXNlPFBheVBhbFNESyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBwcm92aWRlZEN1cnJlbmN5Q29kZSB8fCBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICB0aGlzLnBheXBhbFNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTY3JpcHRMb2FkZXIuZ2V0UGF5UGFsU0RLKFxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2UsXG4gICAgICAgICAgICBmb3JjZUxvYWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGF5cGFsU2RrO1xuICAgIH1cblxuICAgIGdldFBheVBhbFNka09yVGhyb3coKTogUGF5UGFsU0RLIHtcbiAgICAgICAgaWYgKCF0aGlzLnBheXBhbFNkaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxTZGs7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCdXkgTm93IGNhcnQgY3JlYXRpb24gbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgY3JlYXRlQnV5Tm93Q2FydE9yVGhyb3coXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zOiBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPENhcnQ+IHtcbiAgICAgICAgY29uc3QgY2FydFJlcXVlc3RCb2R5ID0gYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMuZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5KCk7XG5cbiAgICAgICAgaWYgKCFjYXJ0UmVxdWVzdEJvZHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDYXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnQoY2FydFJlcXVlc3RCb2R5KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBPcmRlciBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVPcmRlcihcbiAgICAgICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0Qm9keT86IFBhcnRpYWw8UGF5UGFsQ3JlYXRlT3JkZXJSZXF1ZXN0Qm9keT4sXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgY2FydElkID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2FydE9yVGhyb3coKS5pZDtcblxuICAgICAgICBjb25zdCB7IG9yZGVySWQgfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLmNyZWF0ZU9yZGVyKHByb3ZpZGVySWQsIHtcbiAgICAgICAgICAgIGNhcnRJZCxcbiAgICAgICAgICAgIC4uLnJlcXVlc3RCb2R5LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb3JkZXJJZDtcbiAgICB9XG5cbiAgICBhc3luYyBjcmVhdGVPcmRlckNhcmRGaWVsZHMoXG4gICAgICAgIHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICAgICAgcmVxdWVzdEJvZHk/OiBQYXJ0aWFsPFBheVBhbENyZWF0ZU9yZGVyUmVxdWVzdEJvZHk+LFxuICAgICk6IFByb21pc2U8UGF5UGFsQ3JlYXRlT3JkZXJDYXJkRmllbGRzUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgY2FydElkID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2FydE9yVGhyb3coKS5pZDtcblxuICAgICAgICBjb25zdCB7IG9yZGVySWQsIHNldHVwVG9rZW4gfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLmNyZWF0ZU9yZGVyKFxuICAgICAgICAgICAgcHJvdmlkZXJJZCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjYXJ0SWQsXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdEJvZHksXG4gICAgICAgICAgICB9LFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7IG9yZGVySWQsIC4uLihzZXR1cFRva2VuID8geyBzZXR1cFRva2VuIH0gOiB7fSkgfTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVPcmRlcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGNvbnNpZ25tZW50ID0gc3RhdGUuZ2V0Q29uc2lnbm1lbnRzT3JUaHJvdygpWzBdO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlUmVxdWVzdFNlbmRlci51cGRhdGVPcmRlcih7XG4gICAgICAgICAgICAgICAgYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zOiBjb25zaWdubWVudC5hdmFpbGFibGVTaGlwcGluZ09wdGlvbnMsXG4gICAgICAgICAgICAgICAgY2FydElkOiBjYXJ0LmlkLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hpcHBpbmdPcHRpb246IGNvbnNpZ25tZW50LnNlbGVjdGVkU2hpcHBpbmdPcHRpb24sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoX2Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVxdWVzdEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRPcmRlclN0YXR1cyhtZXRob2RJZD86IHN0cmluZywgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTxQYXlQYWxPcmRlclN0YXR1cz4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0dXMgfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLmdldE9yZGVyU3RhdHVzKFxuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5bWVudCBzdWJtaXR0aW5nIGFuZCB0b2tlbml6aW5nIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHRva2VuaXplUGF5bWVudChtZXRob2RJZDogc3RyaW5nLCBvcmRlcklkPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNhcnQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpO1xuXG4gICAgICAgIGlmICghb3JkZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgIHBheW1lbnRfdHlwZTogJ3BheXBhbCcsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgcHJvdmlkZXI6IG1ldGhvZElkLFxuICAgICAgICAgICAgb3JkZXJfaWQ6IG9yZGVySWQsXG4gICAgICAgICAgICAuLi4oY2FydC5zb3VyY2UgPT09IENhcnRTb3VyY2UuQnV5Tm93ICYmIHsgY2FydF9pZDogY2FydC5pZCB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3VibWl0UGF5bWVudChtZXRob2RJZDogc3RyaW5nLCBvcmRlcklkOiBzdHJpbmcsIGdhdGV3YXlJZD86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICB2YXVsdF9wYXltZW50X2luc3RydW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2luZm86IG51bGwsXG4gICAgICAgICAgICAgICAgbWV0aG9kX2lkOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwYXlwYWxfYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcl9pZDogb3JkZXJJZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudCh7XG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhLFxuICAgICAgICAgICAgLi4uKGdhdGV3YXlJZCA/IHsgZ2F0ZXdheUlkIH0gOiB7fSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogU2hpcHBpbmcgb3B0aW9ucyBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRTaGlwcGluZ09wdGlvbk9yVGhyb3coc2VsZWN0ZWRTaGlwcGluZ09wdGlvbklkPzogc3RyaW5nKTogU2hpcHBpbmdPcHRpb24ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjb25zaWdubWVudCA9IHN0YXRlLmdldENvbnNpZ25tZW50c09yVGhyb3coKVswXTtcblxuICAgICAgICBjb25zdCBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMgPSBjb25zaWdubWVudC5hdmFpbGFibGVTaGlwcGluZ09wdGlvbnMgfHwgW107XG5cbiAgICAgICAgY29uc3QgcmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiA9IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucy5maW5kKFxuICAgICAgICAgICAgKG9wdGlvbikgPT4gb3B0aW9uLmlzUmVjb21tZW5kZWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRTaGlwcGluZ09wdGlvbiA9IHNlbGVjdGVkU2hpcHBpbmdPcHRpb25JZFxuICAgICAgICAgICAgPyBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMuZmluZCgob3B0aW9uKSA9PiBvcHRpb24uaWQgPT09IHNlbGVjdGVkU2hpcHBpbmdPcHRpb25JZClcbiAgICAgICAgICAgIDogYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zLmZpbmQoXG4gICAgICAgICAgICAgICAgICAob3B0aW9uKSA9PiBvcHRpb24uaWQgPT09IGNvbnNpZ25tZW50LnNlbGVjdGVkU2hpcHBpbmdPcHRpb24/LmlkLFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHNoaXBwaW5nT3B0aW9uVG9TZWxlY3QgPVxuICAgICAgICAgICAgc2VsZWN0ZWRTaGlwcGluZ09wdGlvbiB8fCByZWNvbW1lbmRlZFNoaXBwaW5nT3B0aW9uIHx8IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9uc1swXTtcblxuICAgICAgICBpZiAoIXNoaXBwaW5nT3B0aW9uVG9TZWxlY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdXIgb3JkZXIgY2FuJ3QgYmUgc2hpcHBlZCB0byB0aGlzIGFkZHJlc3NcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2hpcHBpbmdPcHRpb25Ub1NlbGVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEFkZHJlc3MgdHJhbnNmb3JtaW5nIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIGdldEFkZHJlc3MoYWRkcmVzcz86IFBhcnRpYWw8QmlsbGluZ0FkZHJlc3NSZXF1ZXN0Qm9keT4pOiBCaWxsaW5nQWRkcmVzc1JlcXVlc3RCb2R5IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogYWRkcmVzcz8uZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGFkZHJlc3M/Lmxhc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgZW1haWw6IGFkZHJlc3M/LmVtYWlsIHx8ICcnLFxuICAgICAgICAgICAgcGhvbmU6IGFkZHJlc3M/LnBob25lIHx8ICcnLFxuICAgICAgICAgICAgY29tcGFueTogJycsXG4gICAgICAgICAgICBhZGRyZXNzMTogYWRkcmVzcz8uYWRkcmVzczEgfHwgJycsXG4gICAgICAgICAgICBhZGRyZXNzMjogYWRkcmVzcz8uYWRkcmVzczIgfHwgJycsXG4gICAgICAgICAgICBjaXR5OiBhZGRyZXNzPy5jaXR5IHx8ICcnLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3M/LmNvdW50cnlDb2RlIHx8ICcnLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogYWRkcmVzcz8ucG9zdGFsQ29kZSB8fCAnJyxcbiAgICAgICAgICAgIHN0YXRlT3JQcm92aW5jZTogJycsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBhZGRyZXNzPy5zdGF0ZU9yUHJvdmluY2VDb2RlIHx8ICcnLFxuICAgICAgICAgICAgY3VzdG9tRmllbGRzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXRCaWxsaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoeyBwYXllciB9OiBQYXlQYWxPcmRlckRldGFpbHMpOiBCaWxsaW5nQWRkcmVzc1JlcXVlc3RCb2R5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWRkcmVzcyh7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IHBheWVyLm5hbWUuZ2l2ZW5fbmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBwYXllci5uYW1lLnN1cm5hbWUsXG4gICAgICAgICAgICBlbWFpbDogcGF5ZXIuZW1haWxfYWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3MxOiBwYXllci5hZGRyZXNzLmFkZHJlc3NfbGluZV8xLFxuICAgICAgICAgICAgYWRkcmVzczI6IHBheWVyLmFkZHJlc3MuYWRkcmVzc19saW5lXzIsXG4gICAgICAgICAgICBjaXR5OiBwYXllci5hZGRyZXNzLmFkbWluX2FyZWFfMixcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBwYXllci5hZGRyZXNzLmNvdW50cnlfY29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IHBheWVyLmFkZHJlc3MucG9zdGFsX2NvZGUsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBwYXllci5hZGRyZXNzLmFkbWluX2FyZWFfMSxcbiAgICAgICAgICAgIHBob25lOiBwYXllci5waG9uZT8ucGhvbmVfbnVtYmVyPy5uYXRpb25hbF9udW1iZXIsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFNoaXBwaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgIG9yZGVyRGV0YWlsczogUGF5UGFsT3JkZXJEZXRhaWxzLFxuICAgICk6IEJpbGxpbmdBZGRyZXNzUmVxdWVzdEJvZHkge1xuICAgICAgICBjb25zdCB7IHBheWVyLCBwdXJjaGFzZV91bml0cyB9ID0gb3JkZXJEZXRhaWxzO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgbmFtZTogeyBmdWxsX25hbWUgfSxcbiAgICAgICAgfSA9IHB1cmNoYXNlX3VuaXRzWzBdLnNoaXBwaW5nO1xuXG4gICAgICAgIGNvbnN0IFtmaXJzdE5hbWUsIC4uLmxhc3ROYW1lXSA9IGZ1bGxfbmFtZS5zcGxpdCgnICcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEFkZHJlc3Moe1xuICAgICAgICAgICAgZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGxhc3ROYW1lLmpvaW4oJyAnKSxcbiAgICAgICAgICAgIGVtYWlsOiBwYXllci5lbWFpbF9hZGRyZXNzLFxuICAgICAgICAgICAgYWRkcmVzczE6IGFkZHJlc3MuYWRkcmVzc19saW5lXzEsXG4gICAgICAgICAgICBhZGRyZXNzMjogYWRkcmVzcy5hZGRyZXNzX2xpbmVfMixcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MuYWRtaW5fYXJlYV8yLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeV9jb2RlLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogYWRkcmVzcy5wb3N0YWxfY29kZSxcbiAgICAgICAgICAgIHN0YXRlT3JQcm92aW5jZUNvZGU6IGFkZHJlc3MuYWRtaW5fYXJlYV8xLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJ1dHRvbnMgc3R5bGUgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZT86IFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyk6IFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyB7XG4gICAgICAgIGNvbnN0IHsgY29sb3IsIGhlaWdodCwgbGFiZWwsIHNoYXBlIH0gPSBzdHlsZSB8fCB7fTtcblxuICAgICAgICBjb25zdCB2YWxpZFN0eWxlcyA9IHtcbiAgICAgICAgICAgIGNvbG9yOiBjb2xvciAmJiBTdHlsZUJ1dHRvbkNvbG9yW2NvbG9yXSA/IGNvbG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmdldFZhbGlkSGVpZ2h0KGhlaWdodCksXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwgJiYgU3R5bGVCdXR0b25MYWJlbFtsYWJlbF0gPyBsYWJlbCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNoYXBlOiBzaGFwZSAmJiBTdHlsZUJ1dHRvblNoYXBlW3NoYXBlXSA/IHNoYXBlIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBvbWl0QnkodmFsaWRTdHlsZXMsIGlzTmlsKTtcbiAgICB9XG5cbiAgICBnZXRWYWxpZEhlaWdodChoZWlnaHQ/OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBkZWZhdWx0SGVpZ2h0ID0gNDA7XG4gICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IDI1O1xuICAgICAgICBjb25zdCBtYXhIZWlnaHQgPSA1NTtcblxuICAgICAgICBpZiAoIWhlaWdodCB8fCB0eXBlb2YgaGVpZ2h0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gbWF4SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlaWdodCA8IG1pbkhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbkhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBVdGlscyBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICByZW1vdmVFbGVtZW50KGVsZW1lbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEZvciBub3cgdGhpcyBpcyBhIHRlbXBvcmFyeSBzb2x1dGlvbiwgZnVydGhlciByZW1vdmVFbGVtZW50IG1ldGhvZCB3aWxsIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBJTlRFUk5BTF9VU0VfT05MWSA9XG4gICAgJ1RoaXMgQVBJIGVuZHBvaW50IGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seSBhbmQgbWF5IGNoYW5nZSBpbiB0aGUgZnV0dXJlJztcbiIsImVudW0gQ29udGVudFR5cGUge1xuICAgIEpzb24gPSAnYXBwbGljYXRpb24vanNvbicsXG4gICAgSnNvblYxID0gJ2FwcGxpY2F0aW9uL3ZuZC5iYy52MStqc29uJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udGVudFR5cGU7XG4iLCJleHBvcnQgY29uc3QgU0RLX1ZFUlNJT05fSEVBREVSUyA9IHsgJ1gtQ2hlY2tvdXQtU0RLLVZlcnNpb24nOiBMSUJSQVJZX1ZFUlNJT04gfTtcbiIsImltcG9ydCB7IFJlcXVlc3RTZW5kZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQge1xuICAgIENvbnRlbnRUeXBlLFxuICAgIElOVEVSTkFMX1VTRV9PTkxZLFxuICAgIFJlcXVlc3RPcHRpb25zLFxuICAgIFNES19WRVJTSU9OX0hFQURFUlMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQge1xuICAgIFBheVBhbENyZWF0ZU9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5UGFsT3JkZXJEYXRhLFxuICAgIFBheVBhbE9yZGVyU3RhdHVzRGF0YSxcbiAgICBQYXlQYWxVcGRhdGVPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheVBhbFVwZGF0ZU9yZGVyUmVzcG9uc2UsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlcXVlc3RTZW5kZXI6IFJlcXVlc3RTZW5kZXIpIHt9XG5cbiAgICBhc3luYyBjcmVhdGVPcmRlcihcbiAgICAgICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0Qm9keTogUGFydGlhbDxQYXlQYWxDcmVhdGVPcmRlclJlcXVlc3RCb2R5PixcbiAgICApOiBQcm9taXNlPFBheVBhbE9yZGVyRGF0YT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L3BheW1lbnQvJHtwcm92aWRlcklkfWA7XG4gICAgICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0Qm9keTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdYLUFQSS1JTlRFUk5BTCc6IElOVEVSTkFMX1VTRV9PTkxZLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlLkpzb24sXG4gICAgICAgICAgICAuLi5TREtfVkVSU0lPTl9IRUFERVJTLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdFNlbmRlci5wb3N0PFBheVBhbE9yZGVyRGF0YT4odXJsLCB7IGhlYWRlcnMsIGJvZHkgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZU9yZGVyKFxuICAgICAgICByZXF1ZXN0Qm9keTogUGF5UGFsVXBkYXRlT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICApOiBQcm9taXNlPFBheVBhbFVwZGF0ZU9yZGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvc3RvcmVmcm9udC9pbml0aWFsaXphdGlvbi9wYXlwYWxjb21tZXJjZWA7XG4gICAgICAgIGNvbnN0IGJvZHkgPSByZXF1ZXN0Qm9keTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdYLUFQSS1JTlRFUk5BTCc6IElOVEVSTkFMX1VTRV9PTkxZLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlLkpzb24sXG4gICAgICAgICAgICAuLi5TREtfVkVSU0lPTl9IRUFERVJTLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdFNlbmRlci5wdXQ8UGF5UGFsVXBkYXRlT3JkZXJSZXNwb25zZT4odXJsLCB7IGhlYWRlcnMsIGJvZHkgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcy5ib2R5O1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZGVyU3RhdHVzKFxuICAgICAgICBtZXRob2RJZCA9ICdwYXlwYWxjb21tZXJjZScsXG4gICAgICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPFBheVBhbE9yZGVyU3RhdHVzRGF0YT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L2luaXRpYWxpemF0aW9uLyR7bWV0aG9kSWR9YDtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdYLUFQSS1JTlRFUk5BTCc6IElOVEVSTkFMX1VTRV9PTkxZLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlLkpzb24sXG4gICAgICAgICAgICAuLi5TREtfVkVSU0lPTl9IRUFERVJTLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdFNlbmRlci5nZXQ8UGF5UGFsT3JkZXJTdGF0dXNEYXRhPih1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7XG4gICAgQ29tcG9uZW50c1NjcmlwdFR5cGUsXG4gICAgRnVuZGluZ1R5cGUsXG4gICAgUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93LFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENvbW1lcmNlU2NyaXB0UGFyYW1zLFxuICAgIFBheVBhbFNESyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVNjcmlwdExvYWRlciB7XG4gICAgcHJpdmF0ZSB3aW5kb3c6IFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NyaXB0TG9hZGVyOiBTY3JpcHRMb2FkZXIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cgPSB3aW5kb3c7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGF5UGFsU0RLKFxuICAgICAgICBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPixcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmcsXG4gICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2U/OiBib29sZWFuLFxuICAgICAgICBmb3JjZUxvYWQ/OiBib29sZWFuLFxuICAgICk6IFByb21pc2U8UGF5UGFsU0RLPiB7XG4gICAgICAgIGNvbnN0IHBheXBhbFNka1NjcmlwdENvbmZpZyA9IHRoaXMuZ2V0UGF5UGFsU2RrU2NyaXB0Q29uZmlnT3JUaHJvdyhcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRQYXlQYWxTREsocGF5cGFsU2RrU2NyaXB0Q29uZmlnLCBmb3JjZUxvYWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZFBheVBhbFNESyhcbiAgICAgICAgcGF5cGFsU2RrU2NyaXB0Q29uZmlnOiBQYXlQYWxDb21tZXJjZVNjcmlwdFBhcmFtcyxcbiAgICAgICAgZm9yY2VMb2FkID0gZmFsc2UsXG4gICAgKTogUHJvbWlzZTxQYXlQYWxTREs+IHtcbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWwgfHwgZm9yY2VMb2FkKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy50cmFuc2Zvcm1Db25maWc8UGF5UGFsQ29tbWVyY2VTY3JpcHRQYXJhbXNbJ29wdGlvbnMnXT4oXG4gICAgICAgICAgICAgICAgcGF5cGFsU2RrU2NyaXB0Q29uZmlnLm9wdGlvbnMsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHRoaXMudHJhbnNmb3JtQ29uZmlnPFBheVBhbENvbW1lcmNlU2NyaXB0UGFyYW1zWydhdHRyaWJ1dGVzJ10+KFxuICAgICAgICAgICAgICAgIHBheXBhbFNka1NjcmlwdENvbmZpZy5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsU2RrVXJsID0gJ2h0dHBzOi8vd3d3LnBheXBhbC5jb20vc2RrL2pzJztcbiAgICAgICAgICAgIGNvbnN0IHNjcmlwdFF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRpb25zKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0U3JjID0gYCR7cGF5cGFsU2RrVXJsfT8ke3NjcmlwdFF1ZXJ5fWA7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2NyaXB0TG9hZGVyLmxvYWRTY3JpcHQoc2NyaXB0U3JjLCB7IGFzeW5jOiB0cnVlLCBhdHRyaWJ1dGVzIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnBheXBhbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheVBhbFNka1NjcmlwdENvbmZpZ09yVGhyb3coXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICAgICAgaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZSA9IHRydWUsXG4gICAgKTogUGF5UGFsQ29tbWVyY2VTY3JpcHRQYXJhbXMge1xuICAgICAgICBjb25zdCB7IGlkLCBjbGllbnRUb2tlbiwgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghaW5pdGlhbGl6YXRpb25EYXRhPy5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgY2xpZW50SWQsXG4gICAgICAgICAgICBtZXJjaGFudElkLFxuICAgICAgICAgICAgYnV5ZXJDb3VudHJ5LFxuICAgICAgICAgICAgYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgIGlzVmVubW9FbmFibGVkLFxuICAgICAgICAgICAgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQsXG4gICAgICAgICAgICBpc1BheVBhbENyZWRpdEF2YWlsYWJsZSxcbiAgICAgICAgICAgIGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUsXG4gICAgICAgICAgICBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzID0gW10sXG4gICAgICAgICAgICBlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyA9IFtdLFxuICAgICAgICAgICAgaXNHb29nbGVQYXlFbmFibGVkLFxuICAgICAgICB9ID0gaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIGNvbnN0IGNvbW1pdCA9IGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkIHx8IGluaXRpYWxpemVzT25DaGVja291dFBhZ2U7XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkRW5hYmxlQ2FyZCA9IGlkID09PSAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcyc7XG4gICAgICAgIGNvbnN0IGVuYWJsZUNhcmRGdW5kaW5nID0gc2hvdWxkRW5hYmxlQ2FyZCA/IFsnY2FyZCddIDogW107XG4gICAgICAgIGNvbnN0IGRpc2FibGVDYXJkRnVuZGluZyA9ICFzaG91bGRFbmFibGVDYXJkID8gWydjYXJkJ10gOiBbXTtcblxuICAgICAgICBjb25zdCBlbmFibGVDcmVkaXRGdW5kaW5nID0gaXNQYXlQYWxDcmVkaXRBdmFpbGFibGUgPyBbJ2NyZWRpdCcsICdwYXlsYXRlciddIDogW107XG4gICAgICAgIGNvbnN0IGRpc2FibGVDcmVkaXRGdW5kaW5nID0gIWlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlID8gWydjcmVkaXQnLCAncGF5bGF0ZXInXSA6IFtdO1xuXG4gICAgICAgIGNvbnN0IHNob3VsZEVuYWJsZUFQTXMgPSBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlIHx8ICFjb21taXQ7XG4gICAgICAgIGNvbnN0IGVuYWJsZVZlbm1vRnVuZGluZyA9IGlzVmVubW9FbmFibGVkID8gWyd2ZW5tbyddIDogW107XG4gICAgICAgIGNvbnN0IGRpc2FibGVWZW5tb0Z1bmRpbmcgPSAhaXNWZW5tb0VuYWJsZWQgPyBbJ3Zlbm1vJ10gOiBbXTtcbiAgICAgICAgY29uc3QgZW5hYmxlQVBNc0Z1bmRpbmcgPSBzaG91bGRFbmFibGVBUE1zID8gZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMgOiBbXTtcbiAgICAgICAgY29uc3QgZGlzYWJsZUFQTXNGdW5kaW5nID0gc2hvdWxkRW5hYmxlQVBNc1xuICAgICAgICAgICAgPyBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgIChhcG06IHN0cmluZykgPT4gIWVuYWJsZWRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzLmluY2x1ZGVzKGFwbSksXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogYXZhaWxhYmxlQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcztcbiAgICAgICAgY29uc3QgZ29vZ2xlUGF5Q29tcG9uZW50OiBDb21wb25lbnRzU2NyaXB0VHlwZSA9IGlzR29vZ2xlUGF5RW5hYmxlZCA/IFsnZ29vZ2xlcGF5J10gOiBbXTtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkc0NvbXBvbmVudDogQ29tcG9uZW50c1NjcmlwdFR5cGUgPSBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlXG4gICAgICAgICAgICA/IFsnY2FyZC1maWVsZHMnXVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgY29uc3QgZGlzYWJsZUZ1bmRpbmc6IEZ1bmRpbmdUeXBlID0gW1xuICAgICAgICAgICAgLi4uZGlzYWJsZUNhcmRGdW5kaW5nLFxuICAgICAgICAgICAgLi4uZGlzYWJsZUNyZWRpdEZ1bmRpbmcsXG4gICAgICAgICAgICAuLi5kaXNhYmxlVmVubW9GdW5kaW5nLFxuICAgICAgICAgICAgLi4uZGlzYWJsZUFQTXNGdW5kaW5nLFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBlbmFibGVGdW5kaW5nOiBGdW5kaW5nVHlwZSA9IFtcbiAgICAgICAgICAgIC4uLmVuYWJsZUNhcmRGdW5kaW5nLFxuICAgICAgICAgICAgLi4uZW5hYmxlQ3JlZGl0RnVuZGluZyxcbiAgICAgICAgICAgIC4uLmVuYWJsZVZlbm1vRnVuZGluZyxcbiAgICAgICAgICAgIC4uLmVuYWJsZUFQTXNGdW5kaW5nLFxuICAgICAgICBdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgJ2NsaWVudC1pZCc6IGNsaWVudElkLFxuICAgICAgICAgICAgICAgICdtZXJjaGFudC1pZCc6IG1lcmNoYW50SWQsXG4gICAgICAgICAgICAgICAgJ2VuYWJsZS1mdW5kaW5nJzogZW5hYmxlRnVuZGluZy5sZW5ndGggPiAwID8gZW5hYmxlRnVuZGluZyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAnZGlzYWJsZS1mdW5kaW5nJzogZGlzYWJsZUZ1bmRpbmcubGVuZ3RoID4gMCA/IGRpc2FibGVGdW5kaW5nIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbW1pdCxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgICAgICAgICdidXR0b25zJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hvc3RlZC1maWVsZHMnLFxuICAgICAgICAgICAgICAgICAgICAncGF5bWVudC1maWVsZHMnLFxuICAgICAgICAgICAgICAgICAgICAnbGVnYWwnLFxuICAgICAgICAgICAgICAgICAgICAuLi5nb29nbGVQYXlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgICAgIC4uLmNhcmRGaWVsZHNDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgICAgIGludGVudCxcbiAgICAgICAgICAgICAgICAuLi4oaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSAmJiB7ICdidXllci1jb3VudHJ5JzogYnV5ZXJDb3VudHJ5IH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1wYXJ0bmVyLWF0dHJpYnV0aW9uLWlkJzogYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1jbGllbnQtdG9rZW4nOiBjbGllbnRUb2tlbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1Db25maWc8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+Pihjb25maWc6IFQpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICAgICAgbGV0IHRyYW5zZm9ybWVkQ29uZmlnID0ge307XG5cbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZykgYXMgQXJyYXk8a2V5b2YgVD47XG5cbiAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW2tleV07XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PT0gJycgfHxcbiAgICAgICAgICAgICAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICAuLi50cmFuc2Zvcm1lZENvbmZpZyxcbiAgICAgICAgICAgICAgICBba2V5XTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsJykgOiB2YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZENvbmZpZztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGNyZWF0ZVJlcXVlc3RTZW5kZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQgeyBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7XG4gICAgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLFxuICAgIFBheVBhbENvbW1lcmNlU2NyaXB0TG9hZGVyLFxufSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgPSAoXG4gICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbikgPT4ge1xuICAgIGNvbnN0IHsgZ2V0SG9zdCB9ID0gcGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgcmV0dXJuIG5ldyBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBuZXcgUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyKGNyZWF0ZVJlcXVlc3RTZW5kZXIoeyBob3N0OiBnZXRIb3N0KCkgfSkpLFxuICAgICAgICBuZXcgUGF5UGFsQ29tbWVyY2VTY3JpcHRMb2FkZXIoZ2V0U2NyaXB0TG9hZGVyKCkpLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTtcbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIGEgbWV0aG9kIGlzIHVuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlXG4gKiBjYWxsZXIgaGFzIG5vdCBwcm92aWRlZCBhbGwgdGhlIGFyZ3VtZW50cyBhY2NvcmRpbmcgdG8gdGhlaXIgcmVxdWlyZW1lbnRzLFxuICogaS5lLjogaWYgYW4gYXJndW1lbnQgaXMgbWlzc2luZyBvciBpdCBpcyBub3QgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0ludmFsaWQgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZC4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnSW52YWxpZEFyZ3VtZW50RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnaW52YWxpZF9hcmd1bWVudCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgQ3VzdG9tZXJDcmVkZW50aWFscyxcbiAgICBDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgIEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0LFxuICAgIEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zLFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQ3VzdG9tZXJTdHJhdGVneSBpbXBsZW1lbnRzIEN1c3RvbWVyU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgb25FcnJvciA9IG5vb3A7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXlwYWxjb21tZXJjZSwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZS5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZS5jb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF5cGFsY29tbWVyY2Uub25DbGljayAmJiB0eXBlb2YgcGF5cGFsY29tbWVyY2Uub25DbGljayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlLm9uQ2xpY2tcIiBhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25FcnJvciA9IHBheXBhbGNvbW1lcmNlLm9uRXJyb3IgfHwgbm9vcDtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFwYXltZW50TWV0aG9kKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAoIXBheXBhbFNkayB8fCAhcGF5cGFsU2RrLkJ1dHRvbnMgfHwgdHlwZW9mIHBheXBhbFNkay5CdXR0b25zICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICdbQkMgUGF5UGFsXTogUGF5UGFsIEJ1dHRvbiBjb3VsZCBub3QgYmUgcmVuZGVyZWQsIGR1ZSB0byBpc3N1ZXMgd2l0aCBsb2FkaW5nIFBheVBhbCBTREsnLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBleGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0KG9wdGlvbnM/OiBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBvcHRpb25zPy5jb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrPy4oKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNlOiBQYXlQYWxDb21tZXJjZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkNsaWNrLCBvbkNvbXBsZXRlIH0gPSBwYXlwYWxjb21tZXJjZTtcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkLCBwYXltZW50QnV0dG9uU3R5bGVzLCBpc0FwcFN3aXRjaEVuYWJsZWQgfSA9XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFRvcEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgLi4uKHRoaXMuaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQpICYmIHtcbiAgICAgICAgICAgICAgICBhcHBTd2l0Y2hXaGVuQXZhaWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT4gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcigncGF5cGFsY29tbWVyY2UnKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgICAgIC4uLihvbkNsaWNrICYmIHsgb25DbGljazogKCkgPT4gb25DbGljaygpIH0pLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgLi4uKCFpc0FwcFN3aXRjaEVuYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5vbkhvc3RlZENoZWNrb3V0QXBwcm92ZShkYXRhLCBhY3Rpb25zLCBtZXRob2RJZCwgb25Db21wbGV0ZSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbFNkay5GVU5ESU5HLlBBWVBBTCxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoe1xuICAgICAgICAgICAgICAgIC4uLmNoZWNrb3V0VG9wQnV0dG9uU3R5bGVzLFxuICAgICAgICAgICAgICAgIGhlaWdodDogRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0LFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAuLi5kZWZhdWx0Q2FsbGJhY2tzLFxuICAgICAgICAgICAgLi4uKGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkICYmIGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxCdXR0b24gPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25SZW5kZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAocGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgaWYgKHBheXBhbEJ1dHRvbi5oYXNSZXR1cm5lZD8uKCkgJiYgdGhpcy5pc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZCkpIHtcbiAgICAgICAgICAgICAgICBwYXlwYWxCdXR0b24ucmVzdW1lPy4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uSG9zdGVkQ2hlY2tvdXRBcHByb3ZlKFxuICAgICAgICBkYXRhOiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICAgICBhY3Rpb25zOiBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvbkNvbXBsZXRlPzogKCkgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFkYXRhLm9yZGVySUQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhcnQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICBjb25zdCBvcmRlckRldGFpbHMgPSBhd2FpdCBhY3Rpb25zLm9yZGVyLmdldCgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRCaWxsaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyRGV0YWlscyxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYmlsbGluZ0FkZHJlc3MpO1xuXG4gICAgICAgICAgICBpZiAoY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRTaGlwcGluZ0FkZHJlc3NGcm9tT3JkZXJEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlT3JkZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKHt9LCB7IHBhcmFtczogeyBtZXRob2RJZCB9IH0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KG1ldGhvZElkLCBkYXRhLm9yZGVySUQpO1xuXG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSAmJiB0eXBlb2Ygb25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRBZGRyZXNzKHtcbiAgICAgICAgICAgIGNpdHk6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLmNpdHksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3Muc3RhdGUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSB1c2UgdGhlIHNhbWUgYWRkcmVzcyB0byBmaWxsIGJpbGxpbmcgYW5kIHNoaXBwaW5nIGFkZHJlc3NlcyB0byBoYXZlIHZhbGlkIHF1b3RhIG9uIEJFIGZvciBvcmRlciB1cGRhdGluZyBwcm9jZXNzXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHN0YWdlIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHZhbGlkIGN1c3RvbWVyJ3MgYWRkcmVzcyBleGNlcHQgc2hpcHBpbmcgZGF0YVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhhZGRyZXNzKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdygpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdyhcbiAgICAgICAgICAgIGRhdGEuc2VsZWN0ZWRTaGlwcGluZ09wdGlvbi5pZCxcbiAgICAgICAgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNlbGVjdFNoaXBwaW5nT3B0aW9uKHNoaXBwaW5nT3B0aW9uLmlkKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlT3JkZXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bikge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgQXBwU3dpdGNoIGVuYWJsaW5nIGhhbmRsaW5nXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUGF5cGFsQ29tbWVyY2VBcHBTd2l0Y2hFbmFibGVkKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaXNBcHBTd2l0Y2hFbmFibGVkIHx8IGZhbHNlO1xuICAgIH1cbn1cbiIsImNvbnN0IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCA9IDM2O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQ7XG4iLCJpbXBvcnQge1xuICAgIEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5OiBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5LCBbeyBpZDogJ3BheXBhbGNvbW1lcmNlJyB9XSk7XG4iLCJpbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBDdXN0b21lckNyZWRlbnRpYWxzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQsXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSBpbXBsZW1lbnRzIEN1c3RvbWVyU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgb25FcnJvciA9IG5vb3A7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXlwYWxjb21tZXJjZWNyZWRpdCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZWNyZWRpdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZWNyZWRpdC5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZWNyZWRpdC5jb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF5cGFsY29tbWVyY2VjcmVkaXQub25DbGljayAmJiB0eXBlb2YgcGF5cGFsY29tbWVyY2VjcmVkaXQub25DbGljayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0Lm9uQ2xpY2tcIiBhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25FcnJvciA9IHBheXBhbGNvbW1lcmNlY3JlZGl0Lm9uRXJyb3IgfHwgbm9vcDtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFwYXltZW50TWV0aG9kKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAoIXBheXBhbFNkayB8fCAhcGF5cGFsU2RrLkJ1dHRvbnMgfHwgdHlwZW9mIHBheXBhbFNkay5CdXR0b25zICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICdbQkMgUGF5UGFsXTogUGF5UGFsIEJ1dHRvbiBjb3VsZCBub3QgYmUgcmVuZGVyZWQsIGR1ZSB0byBpc3N1ZXMgd2l0aCBsb2FkaW5nIFBheVBhbCBTREsnLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlY3JlZGl0KTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChvcHRpb25zPzogRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgb3B0aW9ucz8uY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjaz8uKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxDb21tZXJjZUNyZWRpdDogUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25Db21wbGV0ZSwgb25DbGljayB9ID0gcGF5cGFsQ29tbWVyY2VDcmVkaXQ7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCwgcGF5bWVudEJ1dHRvblN0eWxlcywgaXNBcHBTd2l0Y2hFbmFibGVkIH0gPVxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNlY3JlZGl0JyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6ICh7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnRva2VuaXplUGF5bWVudChtZXRob2RJZCwgb3JkZXJJRCksXG4gICAgICAgICAgICAuLi4ob25DbGljayAmJiB7IG9uQ2xpY2s6ICgpID0+IG9uQ2xpY2soKSB9KSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBob3N0ZWRDaGVja291dENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIC4uLighaXNBcHBTd2l0Y2hFbmFibGVkICYmIHtcbiAgICAgICAgICAgICAgICBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZTogKGRhdGE6IFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNoaXBwaW5nQWRkcmVzc0NoYW5nZShkYXRhKSxcbiAgICAgICAgICAgICAgICBvblNoaXBwaW5nT3B0aW9uc0NoYW5nZTogKGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhOiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLCBhY3Rpb25zOiBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMub25Ib3N0ZWRDaGVja291dEFwcHJvdmUoZGF0YSwgYWN0aW9ucywgbWV0aG9kSWQsIG9uQ29tcGxldGUpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGZ1bmRpbmdTb3VyY2VzID0gW3BheXBhbFNkay5GVU5ESU5HLlBBWUxBVEVSLCBwYXlwYWxTZGsuRlVORElORy5DUkVESVRdO1xuICAgICAgICBsZXQgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmRpbmdTb3VyY2VzLmZvckVhY2goKGZ1bmRpbmdTb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvblJlbmRlck9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRDYWxsYmFja3MsXG4gICAgICAgICAgICAgICAgICAgIC4uLihpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCAmJiBob3N0ZWRDaGVja291dENhbGxiYWNrcyksXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvbiA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvblJlbmRlck9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgICAgICAgICBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uSG9zdGVkQ2hlY2tvdXRBcHByb3ZlKFxuICAgICAgICBkYXRhOiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICAgICBhY3Rpb25zOiBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvbkNvbXBsZXRlPzogKCkgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFkYXRhLm9yZGVySUQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhcnQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICBjb25zdCBvcmRlckRldGFpbHMgPSBhd2FpdCBhY3Rpb25zLm9yZGVyLmdldCgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRCaWxsaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyRGV0YWlscyxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYmlsbGluZ0FkZHJlc3MpO1xuXG4gICAgICAgICAgICBpZiAoY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRTaGlwcGluZ0FkZHJlc3NGcm9tT3JkZXJEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3MpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlT3JkZXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKHt9LCB7IHBhcmFtczogeyBtZXRob2RJZCB9IH0pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KG1ldGhvZElkLCBkYXRhLm9yZGVySUQpO1xuXG4gICAgICAgICAgICBpZiAob25Db21wbGV0ZSAmJiB0eXBlb2Ygb25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRBZGRyZXNzKHtcbiAgICAgICAgICAgIGNpdHk6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLmNpdHksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3Muc3RhdGUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSB1c2UgdGhlIHNhbWUgYWRkcmVzcyB0byBmaWxsIGJpbGxpbmcgYW5kIHNoaXBwaW5nIGFkZHJlc3NlcyB0byBoYXZlIHZhbGlkIHF1b3RhIG9uIEJFIGZvciBvcmRlciB1cGRhdGluZyBwcm9jZXNzXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHN0YWdlIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHZhbGlkIGN1c3RvbWVyJ3MgYWRkcmVzcyBleGNlcHQgc2hpcHBpbmcgZGF0YVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhhZGRyZXNzKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdygpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdyhcbiAgICAgICAgICAgIGRhdGEuc2VsZWN0ZWRTaGlwcGluZ09wdGlvbi5pZCxcbiAgICAgICAgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNlbGVjdFNoaXBwaW5nT3B0aW9uKHNoaXBwaW5nT3B0aW9uLmlkKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlT3JkZXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bikge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY3VzdG9tZXItc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVyU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVyU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXQnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgQ3VzdG9tZXJDcmVkZW50aWFscyxcbiAgICBDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgIEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0LFxuICAgIEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zLFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUmVxdWVzdE9wdGlvbnMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdmVubW8tY3VzdG9tZXItaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VWZW5tb0N1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNldmVubW8sIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2V2ZW5tbykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNldmVubW9cIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNldmVubW8uY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2V2ZW5tby5jb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF5cGFsY29tbWVyY2V2ZW5tby5vbkNsaWNrICYmIHR5cGVvZiBwYXlwYWxjb21tZXJjZXZlbm1vLm9uQ2xpY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZXZlbm1vLm9uQ2xpY2tcIiBhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmICghcGF5cGFsU2RrIHx8ICFwYXlwYWxTZGsuQnV0dG9ucyB8fCB0eXBlb2YgcGF5cGFsU2RrLkJ1dHRvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ1tCQyBQYXlQYWxdOiBQYXlQYWwgQnV0dG9uIGNvdWxkIG5vdCBiZSByZW5kZXJlZCwgZHVlIHRvIGlzc3VlcyB3aXRoIGxvYWRpbmcgUGF5UGFsIFNESycsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgcGF5cGFsY29tbWVyY2V2ZW5tbyk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2V2ZW5tbzogUGF5UGFsQ29tbWVyY2VWZW5tb0N1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkNsaWNrIH0gPSBwYXlwYWxjb21tZXJjZXZlbm1vO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG5cbiAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbFNkay5GVU5ESU5HLlZFTk1PLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZSh7XG4gICAgICAgICAgICAgICAgLi4uY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNldmVubW8nKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgICAgIC4uLihvbkNsaWNrICYmIHsgb25DbGljazogKCkgPT4gb25DbGljaygpIH0pLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvblJlbmRlciA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvblJlbmRlck9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICBwYXlwYWxCdXR0b25SZW5kZXIucmVuZGVyKGAjJHtjb250YWluZXJ9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ3VzdG9tZXJTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1jdXN0b21lci1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lclN0cmF0ZWd5OiBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNldmVubW8nIH0sXG5dKTtcbiIsImltcG9ydCB7IEhvc3RlZEluc3RydW1lbnQsIE5vbmNlSW5zdHJ1bWVudCB9IGZyb20gJy4vcGF5bWVudCc7XG5cbnR5cGUgUGF5bWVudEluc3RydW1lbnQgPSBDYXJkSW5zdHJ1bWVudCB8IEFjY291bnRJbnN0cnVtZW50IHwgSG9zdGVkSW5zdHJ1bWVudCB8IE5vbmNlSW5zdHJ1bWVudDtcblxuZXhwb3J0IGRlZmF1bHQgUGF5bWVudEluc3RydW1lbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUluc3RydW1lbnQge1xuICAgIGJpZ3BheVRva2VuOiBzdHJpbmc7XG4gICAgZGVmYXVsdEluc3RydW1lbnQ6IGJvb2xlYW47XG4gICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzOiBib29sZWFuO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSB7XG4gICAgQ1ZWID0gJ2N2dicsXG4gICAgUEFOID0gJ3BhbicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlSW5zdHJ1bWVudCB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnlNb250aDogc3RyaW5nO1xuICAgIGV4cGlyeVllYXI6IHN0cmluZztcbiAgICBpaW46IHN0cmluZztcbiAgICBsYXN0NDogc3RyaW5nO1xuICAgIHR5cGU6ICdjYXJkJztcbiAgICB1bnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25Nb2RlOiBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlO1xufVxuXG5pbnRlcmZhY2UgQmFzZUFjY291bnRJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUluc3RydW1lbnQge1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6ICdhY2NvdW50JyB8ICdiYW5rJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XG4gICAgbWV0aG9kOiAncGF5cGFsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2hJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBpc3N1ZXI6IHN0cmluZztcbiAgICBhY2NvdW50TnVtYmVyOiBzdHJpbmc7XG4gICAgdHlwZTogJ2JhbmsnO1xuICAgIG1ldGhvZDogJ2FjaCcgfCAnZWNwJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYW5rSW5zdHJ1bWVudCBleHRlbmRzIEJhc2VBY2NvdW50SW5zdHJ1bWVudCB7XG4gICAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICAgIGlzc3Vlcjogc3RyaW5nO1xuICAgIGliYW46IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICB0eXBlOiAnYmFuayc7XG59XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJbnN0cnVtZW50ID0gUGF5UGFsSW5zdHJ1bWVudCB8IEJhbmtJbnN0cnVtZW50IHwgQWNoSW5zdHJ1bWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBWYXVsdEFjY2Vzc1Rva2VuIHtcbiAgICB2YXVsdEFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gICAgdmF1bHRBY2Nlc3NFeHBpcnk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uQ29udGV4dCB7XG4gICAgY3VzdG9tZXJJZDogbnVtYmVyO1xuICAgIHN0b3JlSWQ6IHN0cmluZztcbiAgICBjdXJyZW5jeUNvZGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdHJ1bWVudFJlcXVlc3RDb250ZXh0IGV4dGVuZHMgU2Vzc2lvbkNvbnRleHQge1xuICAgIGF1dGhUb2tlbjogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgQ2FyZEluc3RydW1lbnQsIEN1c3RvbWVyQWRkcmVzcyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgRnVuZGluZyBzb3VyY2VzXG4gKlxuICovXG5leHBvcnQgdHlwZSBGdW5kaW5nVHlwZSA9IHN0cmluZ1tdO1xuZXhwb3J0IHR5cGUgRW5hYmxlRnVuZGluZ1R5cGUgPSBGdW5kaW5nVHlwZSB8IHN0cmluZztcblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEluaXRpYWxpemF0aW9uIERhdGFcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEge1xuICAgIGF0dHJpYnV0aW9uSWQ/OiBzdHJpbmc7XG4gICAgYXZhaWxhYmxlQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kczogRnVuZGluZ1R5cGU7XG4gICAgYnV0dG9uU3R5bGU/OiBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM7XG4gICAgYnV5ZXJDb3VudHJ5Pzogc3RyaW5nO1xuICAgIGNsaWVudElkOiBzdHJpbmc7XG4gICAgY2xpZW50VG9rZW4/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVTdHlsZXM/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzO1xuICAgIGNvbm5lY3RDbGllbnRUb2tlbj86IHN0cmluZzsgLy8gVE9ETzogcmVtb3ZlIHdoZW4gUFBDUCBGYXN0bGFuZSBBL0IgdGVzdCB3aWxsIGJlIGZpbmlzaGVkXG4gICAgZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM6IEZ1bmRpbmdUeXBlO1xuICAgIGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGU/OiBib29sZWFuO1xuICAgIGludGVudD86IFBheVBhbENvbW1lcmNlSW50ZW50O1xuICAgIGlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ/OiBib29sZWFuOyAvLyBQYXlQYWwgRmFzdGxhbmUgcmVsYXRlZFxuICAgIGlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkPzogYm9vbGVhbjsgLy8gUGF5UGFsIEZhc3RsYW5lIHJlbGF0ZWRcbiAgICBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkPzogYm9vbGVhbjtcbiAgICBpc1BheVBhbENvbW1lcmNlQW5hbHl0aWNzVjJFbmFibGVkPzogYm9vbGVhbjsgLy8gUGF5UGFsIEZhc3RsYW5lIHJlbGF0ZWRcbiAgICBpc1BheVBhbENyZWRpdEF2YWlsYWJsZT86IGJvb2xlYW47XG4gICAgaXNWZW5tb0VuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzR29vZ2xlUGF5RW5hYmxlZD86IGJvb2xlYW47XG4gICAgbWVyY2hhbnRJZD86IHN0cmluZztcbiAgICBvcmRlcklkPzogc3RyaW5nO1xuICAgIHNob3VsZFJlbmRlckZpZWxkcz86IGJvb2xlYW47XG4gICAgc2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dD86IGJvb2xlYW47IC8vIFRPRE86IHJlbW92ZSB3aGVuIFBQQ1AgRmFzdGxhbmUgQS9CIHRlc3Qgd2lsbCBiZSBmaW5pc2hlZFxuICAgIHBheW1lbnRCdXR0b25TdHlsZXM/OiBSZWNvcmQ8c3RyaW5nLCBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM+O1xuICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uPzogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtW107XG4gICAgdGhyZWVEU1ZlcmlmaWNhdGlvbk1ldGhvZD86IHN0cmluZztcbiAgICBpc0FwcFN3aXRjaEVuYWJsZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWxDb21tZXJjZUhvc3RXaW5kb3cgY29udGFpbnMgZGlmZmVyZW50XG4gKiBQYXlQYWwgU2RrIGluc3RhbmNlcyBmb3IgZGlmZmVyZW50IHB1cnBvc2VzXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gICAgcGF5cGFsRmFzdGxhbmU/OiBQYXlQYWxGYXN0bGFuZTtcbiAgICBwYXlwYWxGYXN0bGFuZVNkaz86IFBheVBhbEZhc3RsYW5lU2RrO1xuICAgIHBheXBhbE1lc3NhZ2VzPzogUGF5UGFsTWVzc2FnZXNTZGs7XG4gICAgcGF5cGFsQXBtcz86IFBheVBhbEFwbVNkaztcbiAgICBwYXlwYWxHb29nbGVQYXk/OiBQYXlQYWxHb29nbGVQYXlTZGs7XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBTREsgY29uZmlnXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbFNka0NvbmZpZyB7XG4gICAgb3B0aW9uczoge1xuICAgICAgICAnY2xpZW50LWlkJz86IHN0cmluZztcbiAgICAgICAgJ21lcmNoYW50LWlkJz86IHN0cmluZztcbiAgICAgICAgJ2J1eWVyLWNvdW50cnknPzogc3RyaW5nO1xuICAgICAgICAnZW5hYmxlLWZ1bmRpbmcnPzogRW5hYmxlRnVuZGluZ1R5cGU7XG4gICAgICAgICdkaXNhYmxlLWZ1bmRpbmcnPzogRnVuZGluZ1R5cGU7XG4gICAgICAgIGN1cnJlbmN5Pzogc3RyaW5nO1xuICAgICAgICBjb21taXQ/OiBib29sZWFuO1xuICAgICAgICBpbnRlbnQ/OiBQYXlQYWxDb21tZXJjZUludGVudDtcbiAgICAgICAgY29tcG9uZW50cz86IFBheVBhbFNka0NvbXBvbmVudHM7XG4gICAgfTtcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICdkYXRhLWNsaWVudC1tZXRhZGF0YS1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnPzogc3RyaW5nO1xuICAgICAgICAnZGF0YS1zZGstY2xpZW50LXRva2VuJz86IHN0cmluZztcbiAgICAgICAgJ2RhdGEtbmFtZXNwYWNlJz86IHN0cmluZztcbiAgICAgICAgJ2RhdGEtY2xpZW50LXRva2VuJz86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgZW51bSBQYXlQYWxDb21tZXJjZUludGVudCB7XG4gICAgQVVUSE9SSVpFID0gJ2F1dGhvcml6ZScsXG4gICAgQ0FQVFVSRSA9ICdjYXB0dXJlJyxcbn1cblxuZXhwb3J0IHR5cGUgUGF5UGFsU2RrQ29tcG9uZW50cyA9IEFycmF5PFxuICAgIHwgJ2Zhc3RsYW5lJ1xuICAgIHwgJ21lc3NhZ2VzJ1xuICAgIHwgJ2J1dHRvbnMnXG4gICAgfCAncGF5bWVudC1maWVsZHMnXG4gICAgfCAndGhyZWUtZG9tYWluLXNlY3VyZSdcbiAgICB8ICdob3N0ZWQtZmllbGRzJ1xuICAgIHwgJ2dvb2dsZXBheSdcbj47XG5cbi8qKlxuICpcbiAqIFBheVBhbCBTZGsgaW5zdGFuY2VzXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lU2RrIHtcbiAgICBUaHJlZURvbWFpblNlY3VyZUNsaWVudDoge1xuICAgICAgICBpc0VsaWdpYmxlKHBhcmFtczogdGhyZWVEU2VjdXJlUGFyYW1ldGVycyk6IFByb21pc2U8Ym9vbGVhbj47XG4gICAgICAgIHNob3coKTogUHJvbWlzZTxUaHJlZURvbWFpblNlY3VyZUNsaWVudFNob3dSZXNwb25zZT47XG4gICAgfTtcbiAgICBGYXN0bGFuZShvcHRpb25zPzogUGF5UGFsRmFzdGxhbmVPcHRpb25zKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZT47XG59XG5cbmludGVyZmFjZSBUaHJlZURvbWFpblNlY3VyZUNsaWVudFNob3dSZXNwb25zZSB7XG4gICAgbGlhYmlsaXR5U2hpZnQ6IExpYWJpbGl0eVNoaWZ0RW51bTtcbiAgICBhdXRoZW50aWNhdGlvblN0YXRlOiBURFNlY3VyZUF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgbm9uY2U6IHN0cmluZzsgLy8gRW5yaWNoZWQgbm9uY2Ugb3IgdGhlIG9yaWdpbmFsIG5vbmNlXG59XG5cbmV4cG9ydCBlbnVtIFREU2VjdXJlQXV0aGVudGljYXRpb25TdGF0ZSB7XG4gICAgU3VjY2VlZGVkID0gJ3N1Y2NlZWRlZCcsXG4gICAgQ2FuY2VsbGVkID0gJ2NhbmNlbGxlZCcsXG4gICAgRXJyb3JlZCA9ICdlcnJvcmVkJyxcbn1cblxuZXhwb3J0IGVudW0gTGlhYmlsaXR5U2hpZnRFbnVtIHtcbiAgICBQb3NzaWJsZSA9ICdQT1NTSUJMRScsXG4gICAgTm8gPSAnTk8nLFxuICAgIFVua25vd24gPSAnVU5LTk9XTicsXG4gICAgWWVzID0gJ1lFUycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgdGhyZWVEU2VjdXJlUGFyYW1ldGVycyB7XG4gICAgYW1vdW50OiBzdHJpbmc7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgICBub25jZTogc3RyaW5nO1xuICAgIHRocmVlRFNSZXF1ZXN0ZWQ6IGJvb2xlYW47XG4gICAgdHJhbnNhY3Rpb25Db250ZXh0OiB7XG4gICAgICAgIGV4cGVyaWVuY2VfY29udGV4dDoge1xuICAgICAgICAgICAgYnJhbmRfbmFtZT86IHN0cmluZztcbiAgICAgICAgICAgIGxvY2FsZTogc3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuX3VybDogc3RyaW5nO1xuICAgICAgICAgICAgY2FuY2VsX3VybDogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsTWVzc2FnZXNTZGsge1xuICAgIE1lc3NhZ2VzKG9wdGlvbnM6IE1lc3NhZ2luZ09wdGlvbnMpOiBNZXNzYWdpbmdSZW5kZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQXBtU2RrIHtcbiAgICBCdXR0b25zKG9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMpOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnM7XG4gICAgUGF5bWVudEZpZWxkcyhvcHRpb25zOiBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHNPcHRpb25zKTogUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEdvb2dsZVBheVNkayB7XG4gICAgR29vZ2xlcGF5KCk6IEdvb2dsZVBheTtcbn1cblxuLyoqXG4gKlxuICogR29vZ2xlIFBheSByZWxhdGVkIHR5cGVzXG4gKlxuICovXG5cbmludGVyZmFjZSBHb29nbGVQYXkge1xuICAgIGNvbmZpZzogKCkgPT4gUHJvbWlzZTxHb29nbGVQYXlDb25maWc+O1xuICAgIGNvbmZpcm1PcmRlcjogKGNvbmZpcm1PcmRlckNvbmZpZzogQ29uZmlybU9yZGVyQ29uZmlnKSA9PiBQcm9taXNlPHsgc3RhdHVzOiBzdHJpbmcgfT47XG4gICAgaW5pdGlhdGVQYXllckFjdGlvbjogKHBheWVyQWN0aW9uQ29uZmlnOiBQYXllckFjdGlvbkNvbmZpZykgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIENvbmZpcm1PcmRlckNvbmZpZyB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xuICAgIHBheW1lbnRNZXRob2REYXRhOiBDb25maXJtT3JkZXJEYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpcm1PcmRlckRhdGEge1xuICAgIHRva2VuaXphdGlvbkRhdGE6IHtcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICB0b2tlbjogc3RyaW5nO1xuICAgIH07XG4gICAgaW5mbzoge1xuICAgICAgICBjYXJkTmV0d29yazogc3RyaW5nO1xuICAgICAgICBjYXJkRGV0YWlsczogc3RyaW5nO1xuICAgIH07XG4gICAgdHlwZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUGF5ZXJBY3Rpb25Db25maWcge1xuICAgIG9yZGVySWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHb29nbGVQYXlDb25maWcge1xuICAgIGFsbG93ZWRQYXltZW50TWV0aG9kczogQWxsb3dlZFBheW1lbnRNZXRob2RzW107XG4gICAgYXBpVmVyc2lvbjogbnVtYmVyO1xuICAgIGFwaVZlcnNpb25NaW5vcjogbnVtYmVyO1xuICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG4gICAgaXNFbGlnaWJsZTogYm9vbGVhbjtcbiAgICBtZXJjaGFudEluZm86IHtcbiAgICAgICAgbWVyY2hhbnRJZDogc3RyaW5nO1xuICAgICAgICBtZXJjaGFudE9yaWdpbjogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxsb3dlZFBheW1lbnRNZXRob2RzIHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgICBhbGxvd2VkQXV0aE1ldGhvZHM6IHN0cmluZ1tdO1xuICAgICAgICBhbGxvd2VkQ2FyZE5ldHdvcmtzOiBzdHJpbmdbXTtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICAgICAgYXNzdXJhbmNlRGV0YWlsc1JlcXVpcmVkOiBib29sZWFuO1xuICAgICAgICBiaWxsaW5nQWRkcmVzc1BhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIGZvcm1hdDogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgdG9rZW5pemF0aW9uU3BlY2lmaWNhdGlvbjoge1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIGdhdGV3YXk6IHN0cmluZztcbiAgICAgICAgICAgIGdhdGV3YXlNZXJjaGFudElkOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEJ1dHRvbnNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VCdXR0b25zIHtcbiAgICByZW5kZXIoaWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBpc0VsaWdpYmxlKCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyB7XG4gICAgc3R5bGU/OiBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM7XG4gICAgZnVuZGluZ1NvdXJjZTogc3RyaW5nO1xuICAgIGNyZWF0ZU9yZGVyKCk6IFByb21pc2U8c3RyaW5nPjtcbiAgICBvbkFwcHJvdmUoXG4gICAgICAgIGRhdGE6IFBheVBhbEJ1dHRvbkFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IFBheVBhbEJ1dHRvbkFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuIHwgdm9pZD4gfCB2b2lkO1xuICAgIG9uSW5pdD8oXG4gICAgICAgIGRhdGE6IFBheVBhbEJ1dHRvbkluaXRDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IFBheVBhbEJ1dHRvbkluaXRDYWxsYmFja0FjdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPjtcbiAgICBvbkNsaWNrPyhcbiAgICAgICAgZGF0YTogUGF5UGFsQnV0dG9uQ2xpY2tDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IFBheVBhbEJ1dHRvbkNsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuICAgIG9uRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XG4gICAgb25DYW5jZWw/KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV0dG9uQ2xpY2tDYWxsYmFja1BheWxvYWQge1xuICAgIGZ1bmRpbmdTb3VyY2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXR0b25DbGlja0NhbGxiYWNrQWN0aW9ucyB7XG4gICAgcmVqZWN0KCk6IHZvaWQ7XG4gICAgcmVzb2x2ZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvbkluaXRDYWxsYmFja1BheWxvYWQge1xuICAgIGNvcnJlbGF0aW9uSUQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXR0b25Jbml0Q2FsbGJhY2tBY3Rpb25zIHtcbiAgICBkaXNhYmxlKCk6IHZvaWQ7XG4gICAgZW5hYmxlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV0dG9uQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCB7XG4gICAgb3JkZXJJRD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXR0b25BcHByb3ZlQ2FsbGJhY2tBY3Rpb25zIHtcbiAgICBvcmRlcjoge1xuICAgICAgICBnZXQ6ICgpID0+IFByb21pc2U8UGF5UGFsT3JkZXJEZXRhaWxzPjtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbE9yZGVyRGV0YWlscyB7XG4gICAgcGF5ZXI6IHtcbiAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgZ2l2ZW5fbmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgc3VybmFtZTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBlbWFpbF9hZGRyZXNzOiBzdHJpbmc7XG4gICAgICAgIGFkZHJlc3M6IFBheVBhbE9yZGVyQWRkcmVzcztcbiAgICB9O1xuICAgIHB1cmNoYXNlX3VuaXRzOiBBcnJheTx7XG4gICAgICAgIHNoaXBwaW5nOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBQYXlQYWxPcmRlckFkZHJlc3M7XG4gICAgICAgIH07XG4gICAgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJBZGRyZXNzIHtcbiAgICBhZGRyZXNzX2xpbmVfMTogc3RyaW5nO1xuICAgIGFkbWluX2FyZWFfMjogc3RyaW5nO1xuICAgIGFkbWluX2FyZWFfMT86IHN0cmluZztcbiAgICBwb3N0YWxfY29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlfY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvbkxhYmVsIHtcbiAgICBwYXlwYWwgPSAncGF5cGFsJyxcbiAgICBjaGVja291dCA9ICdjaGVja291dCcsXG4gICAgYnV5bm93ID0gJ2J1eW5vdycsXG4gICAgcGF5ID0gJ3BheScsXG4gICAgaW5zdGFsbG1lbnQgPSAnaW5zdGFsbG1lbnQnLFxufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvbkNvbG9yIHtcbiAgICBnb2xkID0gJ2dvbGQnLFxuICAgIGJsdWUgPSAnYmx1ZScsXG4gICAgc2lsdmVyID0gJ3NpbHZlcicsXG4gICAgYmxhY2sgPSAnYmxhY2snLFxuICAgIHdoaXRlID0gJ3doaXRlJyxcbn1cblxuZXhwb3J0IGVudW0gU3R5bGVCdXR0b25TaGFwZSB7XG4gICAgcGlsbCA9ICdwaWxsJyxcbiAgICByZWN0ID0gJ3JlY3QnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyB7XG4gICAgY29sb3I/OiBTdHlsZUJ1dHRvbkNvbG9yO1xuICAgIHNoYXBlPzogU3R5bGVCdXR0b25TaGFwZTtcbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gICAgbGFiZWw/OiBTdHlsZUJ1dHRvbkxhYmVsO1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgUGF5bWVudCBmaWVsZHNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzIHtcbiAgICByZW5kZXIoaWQ6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzT3B0aW9ucyB7XG4gICAgc3R5bGU/OiBQYXlQYWxDb21tZXJjZUZpZWxkc1N0eWxlT3B0aW9ucztcbiAgICBmdW5kaW5nU291cmNlOiBzdHJpbmc7XG4gICAgZmllbGRzOiB7XG4gICAgICAgIG5hbWU/OiB7XG4gICAgICAgICAgICB2YWx1ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgZW1haWw/OiB7XG4gICAgICAgICAgICB2YWx1ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlRmllbGRzU3R5bGVPcHRpb25zIHtcbiAgICB2YXJpYWJsZXM/OiB7XG4gICAgICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplQmFzZT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVTbT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVNPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZUxnPzogc3RyaW5nO1xuICAgICAgICB0ZXh0Q29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9yVGV4dFBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgICAgICBjb2xvckJhY2tncm91bmQ/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9ySW5mbz86IHN0cmluZztcbiAgICAgICAgY29sb3JEYW5nZXI/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICAgICAgYm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlcldpZHRoPzogc3RyaW5nO1xuICAgICAgICBib3JkZXJGb2N1c0NvbG9yPzogc3RyaW5nO1xuICAgICAgICBzcGFjaW5nVW5pdD86IHN0cmluZztcbiAgICB9O1xuICAgIHJ1bGVzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbn1cblxuLyoqXG4gKlxuICogUGF5TGF0ZXIgTWVzc2FnZXMgcmVsYXRlZCB0eXBlc1xuICogZG9jOiBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RvY3MvY2hlY2tvdXQvcGF5LWxhdGVyL3VzL2ludGVncmF0ZS9yZWZlcmVuY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdpbmdSZW5kZXIge1xuICAgIHJlbmRlcihjb250YWluZXI6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZXNTdHlsZU9wdGlvbnMge1xuICAgIGNvbG9yPzogc3RyaW5nOyAvLyAnYmx1ZScgfCAnYmxhY2snIHwgJ3doaXRlJyB8ICd3aGl0ZS1uby1ib3JkZXInIHwgJ2dyYXknIHwgJ21vbm9jaHJvbWUnIHwgJ2dyYXlzY2FsZSdcbiAgICBsYXlvdXQ/OiBzdHJpbmc7IC8vICd0ZXh0JyB8ICdmbGV4J1xuICAgIGxvZ28/OiB7XG4gICAgICAgIHR5cGU/OiBzdHJpbmc7IC8vICdwcmltYXJ5JyB8ICdhbHRlcm5hdGl2ZScgfCAnaW5saW5lJyB8ICdub25lJ1xuICAgICAgICBwb3NpdGlvbj86IHN0cmluZzsgLy8gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICd0b3AnXG4gICAgfTtcbiAgICByYXRpbz86IHN0cmluZzsgLy8gJzF4MScgfCAnMXg0JyB8ICc4eDEnIHwgJzIweDEnXG4gICAgdGV4dD86IHtcbiAgICAgICAgYWxpZ24/OiBzdHJpbmc7IC8vICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJ1xuICAgICAgICBjb2xvcj86IHN0cmluZzsgLy8gJ2JsYWNrJyB8ICd3aGl0ZScgfCAnbW9ub2Nocm9tZScgfCAnZ3JheXNjYWxlJ1xuICAgICAgICBzaXplPzogbnVtYmVyOyAvLyBmcm9tIDEwIHRvIDE2XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdpbmdPcHRpb25zIHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBwbGFjZW1lbnQ6IHN0cmluZztcbiAgICBzdHlsZT86IE1lc3NhZ2VzU3R5bGVPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBib29sZWFuO1xuICAgIHN0eWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIEZhc3RsYW5lIHJlbGF0ZWQgdHlwZXNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmUge1xuICAgIGlkZW50aXR5OiBQYXlQYWxGYXN0bGFuZUlkZW50aXR5O1xuICAgIGV2ZW50czogUGF5UGFsRmFzdGxhbmVFdmVudHM7XG4gICAgcHJvZmlsZTogUGF5UGFsRmFzdGxhbmVQcm9maWxlO1xuICAgIEZhc3RsYW5lQ2FyZENvbXBvbmVudChcbiAgICAgICAgb3B0aW9uczogUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHM+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lT3B0aW9ucyB7XG4gICAgc3R5bGVzPzogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVJZGVudGl0eSB7XG4gICAgbG9va3VwQ3VzdG9tZXJCeUVtYWlsKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lTG9va3VwQ3VzdG9tZXJCeUVtYWlsUmVzdWx0PjtcbiAgICB0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93KFxuICAgICAgICBjdXN0b21lckNvbnRleHRJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblJlc3VsdD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVMb29rdXBDdXN0b21lckJ5RW1haWxSZXN1bHQge1xuICAgIGN1c3RvbWVyQ29udGV4dElkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25SZXN1bHQge1xuICAgIGF1dGhlbnRpY2F0aW9uU3RhdGU/OiBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgcHJvZmlsZURhdGE/OiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVEYXRhO1xufVxuXG5leHBvcnQgZW51bSBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUge1xuICAgIFNVQ0NFRURFRCA9ICdzdWNjZWVkZWQnLFxuICAgIEZBSUxFRCA9ICdmYWlsZWQnLFxuICAgIENBTkNFTEVEID0gJ2NhbmNlbGVkJyxcbiAgICBVTlJFQ09HTklaRUQgPSAndW5yZWNvZ25pemVkJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGVEYXRhIHtcbiAgICBuYW1lOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVOYW1lO1xuICAgIHNoaXBwaW5nQWRkcmVzczogUGF5UGFsRmFzdGxhbmVTaGlwcGluZ0FkZHJlc3M7XG4gICAgY2FyZDogUGF5UGFsRmFzdGxhbmVQcm9maWxlQ2FyZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGVOYW1lIHtcbiAgICBmdWxsTmFtZTogc3RyaW5nO1xuICAgIGZpcnN0TmFtZT86IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGVQaG9uZSB7XG4gICAgY291bnRyeUNvZGU6IHN0cmluZztcbiAgICBuYXRpb25hbE51bWJlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzIHtcbiAgICBuYW1lOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVOYW1lO1xuICAgIHBob25lTnVtYmVyOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVQaG9uZTtcbiAgICBhZGRyZXNzOiBQYXlQYWxGYXN0bGFuZUFkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVQcm9maWxlQ2FyZCB7XG4gICAgaWQ6IHN0cmluZzsgLy8gbm9uY2UgLyB0b2tlblxuICAgIHBheW1lbnRTb3VyY2U6IFBheVBhbEZhc3RsYW5lUGF5bWVudFNvdXJjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVBheW1lbnRTb3VyY2Uge1xuICAgIGNhcmQ6IFBheVBhbEZhc3RsYW5lQ2FyZFNvdXJjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUNhcmRTb3VyY2Uge1xuICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgZXhwaXJ5OiBzdHJpbmc7IC8vIFwiWVlZWS1NTVwiXG4gICAgbGFzdERpZ2l0czogc3RyaW5nOyAvLyBcIjExMTFcIlxuICAgIG5hbWU6IHN0cmluZztcbiAgICBiaWxsaW5nQWRkcmVzczogUGF5UGFsRmFzdGxhbmVBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQWRkcmVzcyB7XG4gICAgY29tcGFueT86IHN0cmluZztcbiAgICBhZGRyZXNzTGluZTE6IHN0cmluZztcbiAgICBhZGRyZXNzTGluZTI/OiBzdHJpbmc7XG4gICAgYWRtaW5BcmVhMTogc3RyaW5nOyAvLyBTdGF0ZVxuICAgIGFkbWluQXJlYTI6IHN0cmluZzsgLy8gQ2l0eVxuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGVUb0JjQ3VzdG9tZXJEYXRhTWFwcGluZ1Jlc3VsdCB7XG4gICAgYXV0aGVudGljYXRpb25TdGF0ZTogUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlO1xuICAgIGFkZHJlc3NlczogQ3VzdG9tZXJBZGRyZXNzW107XG4gICAgYmlsbGluZ0FkZHJlc3M/OiBDdXN0b21lckFkZHJlc3M7XG4gICAgc2hpcHBpbmdBZGRyZXNzPzogQ3VzdG9tZXJBZGRyZXNzO1xuICAgIGluc3RydW1lbnRzOiBDYXJkSW5zdHJ1bWVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uIHtcbiAgICByb290Pzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JQcmltYXJ5Pzogc3RyaW5nO1xuICAgICAgICBlcnJvckNvbG9yPzogc3RyaW5nO1xuICAgICAgICBmb250RmFtaWx5Pzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZUJhc2U/OiBzdHJpbmc7XG4gICAgICAgIHBhZGRpbmc/OiBzdHJpbmc7XG4gICAgICAgIHByaW1hcnlDb2xvcj86IHN0cmluZztcbiAgICB9O1xuICAgIGlucHV0Pzoge1xuICAgICAgICBib3JkZXJSYWRpdXM/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlckNvbG9yPzogc3RyaW5nO1xuICAgICAgICBmb2N1c0JvcmRlckNvbG9yPzogc3RyaW5nO1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlcldpZHRoPzogc3RyaW5nO1xuICAgICAgICB0ZXh0Q29sb3JCYXNlPzogc3RyaW5nO1xuICAgIH07XG4gICAgdG9nZ2xlPzoge1xuICAgICAgICBjb2xvclByaW1hcnk/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9yU2Vjb25kYXJ5Pzogc3RyaW5nO1xuICAgIH07XG4gICAgdGV4dD86IHtcbiAgICAgICAgYm9keT86IHtcbiAgICAgICAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgICAgICAgZm9udFNpemU/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGNhcHRpb24/OiB7XG4gICAgICAgICAgICBjb2xvcj86IHN0cmluZztcbiAgICAgICAgICAgIGZvbnRTaXplPzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgYnJhbmRpbmc/OiBzdHJpbmc7IC8vICdsaWdodCcgfCAnZGFyaydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGUge1xuICAgIHNob3dDYXJkU2VsZWN0b3IoKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZUNhcmRTZWxlY3RvclJlc3BvbnNlPjtcbiAgICBzaG93U2hpcHBpbmdBZGRyZXNzU2VsZWN0b3IoKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZVNoaXBwaW5nQWRkcmVzc1NlbGVjdG9yUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzU2VsZWN0b3JSZXNwb25zZSB7XG4gICAgc2VsZWN0aW9uQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBzZWxlY3RlZEFkZHJlc3M6IFBheVBhbEZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQ2FyZFNlbGVjdG9yUmVzcG9uc2Uge1xuICAgIHNlbGVjdGlvbkNoYW5nZWQ6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWRDYXJkOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHMge1xuICAgIGdldFBheW1lbnRUb2tlbihcbiAgICAgICAgb3B0aW9uczogUGF5UGFsRmFzdGxhbmVHZXRQYXltZW50VG9rZW5PcHRpb25zLFxuICAgICk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmVQcm9maWxlQ2FyZD47XG4gICAgcmVuZGVyKGVsZW1lbnQ6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVHZXRQYXltZW50VG9rZW5PcHRpb25zIHtcbiAgICBuYW1lPzogUGF5UGFsRmFzdGxhbmVQcm9maWxlTmFtZTtcbiAgICBiaWxsaW5nQWRkcmVzcz86IFBheVBhbEZhc3RsYW5lQWRkcmVzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUNhcmRDb21wb25lbnRPcHRpb25zIHtcbiAgICBmaWVsZHM/OiBQYXlQYWxGYXN0bGFuZUNhcmRDb21wb25lbnRGaWVsZHM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50RmllbGRzIHtcbiAgICBjYXJkaG9sZGVyTmFtZT86IHtcbiAgICAgICAgZW5hYmxlZD86IGJvb2xlYW47XG4gICAgICAgIHByZWZpbGw/OiBzdHJpbmc7XG4gICAgfTtcbiAgICBwaG9uZU51bWJlcj86IHtcbiAgICAgICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgICAgIHByZWZpbGw/OiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUV2ZW50cyB7XG4gICAgYXBtU2VsZWN0ZWQ6IChvcHRpb25zOiBQYXlQYWxGYXN0bGFuZUFwbVNlbGVjdGVkRXZlbnRPcHRpb25zKSA9PiB2b2lkO1xuICAgIGVtYWlsU3VibWl0dGVkOiAob3B0aW9uczogUGF5UGFsRmFzdGxhbmVFbWFpbEVudGVyZWRFdmVudE9wdGlvbnMpID0+IHZvaWQ7XG4gICAgb3JkZXJQbGFjZWQ6IChvcHRpb25zOiBQYXlQYWxGYXN0bGFuZU9yZGVyUGxhY2VkRXZlbnRPcHRpb25zKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICBjb250ZXh0X3R5cGU6ICdjc19pZCc7XG4gICAgY29udGV4dF9pZDogc3RyaW5nOyAvLyBjaGVja291dCBzZXNzaW9uIGlkXG4gICAgcGFnZV90eXBlOiAnY2hlY2tvdXRfcGFnZSc7XG4gICAgcGFnZV9uYW1lOiBzdHJpbmc7IC8vIHRpdGxlIG9mIHRoZSBjaGVja291dCBpbml0aWF0aW9uIHBhZ2VcbiAgICBwYXJ0bmVyX25hbWU6ICdiaWdjJztcbiAgICB1c2VyX3R5cGU6ICdzdG9yZV9tZW1iZXInIHwgJ3N0b3JlX2d1ZXN0JzsgLy8gdHlwZSBvZiB0aGUgdXNlciBvbiB0aGUgbWVyY2hhbnQgc2l0ZVxuICAgIHN0b3JlX2lkOiBzdHJpbmc7XG4gICAgbWVyY2hhbnRfbmFtZTogc3RyaW5nO1xuICAgIGV4cGVyaW1lbnQ6IHN0cmluZzsgLy8gc3RyaW5naWZ5IEpTT04gb2JqZWN0IFwiW3sgdHJlYXRtZW50X2dyb3VwOiAndGVzdCcgfCAnY29udHJvbCcgfV1cIlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQXBtU2VsZWN0ZWRFdmVudE9wdGlvbnMgZXh0ZW5kcyBQYXlQYWxGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgYXBtX3Nob3duOiAnMCcgfCAnMSc7IC8vIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIHRoZSBjaGVja291dCBwYWdlXG4gICAgYXBtX2xpc3Q6IHN0cmluZzsgLy8gbGlzdCBvZiBhbHRlcm5hdGUgcGF5bWVudCBzaG93biBvbiBjaGVja291dCBwYWdlXG4gICAgYXBtX3NlbGVjdGVkOiBzdHJpbmc7IC8vIGFsdGVybmF0ZSBwYXltZW50IG1ldGhvZCBzZWxlY3RlZCAvIG1ldGhvZElkXG4gICAgYXBtX2xvY2F0aW9uOiAncHJlLWVtYWlsIHNlY3Rpb24nIHwgJ3BheW1lbnQgc2VjdGlvbic7IC8vIHBsYWNlbWVudCBvZiBBUE0sIHdoZXRoZXIgaXQgYmUgYWJvdmUgdGhlIGVtYWlsIGVudHJ5IG9yIGluIHRoZSByYWRpbyBidXR0b25zXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVFbWFpbEVudGVyZWRFdmVudE9wdGlvbnMgZXh0ZW5kcyBQYXlQYWxGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgdXNlcl9lbWFpbF9zYXZlZDogYm9vbGVhbjsgLy8gc2hvd3Mgd2hldGhlciBjaGVja291dCB3YXMgbG9hZGVkIHdpdGggb3Igd2l0aG91dCBhIHNhdmVkIGVtYWlsXG4gICAgYXBtX3Nob3duOiAnMCcgfCAnMSc7IC8vIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIHRoZSBjaGVja291dCBwYWdlXG4gICAgYXBtX2xpc3Q6IHN0cmluZzsgLy8gbGlzdCBvZiBhbHRlcm5hdGUgcGF5bWVudCBzaG93biBvbiBjaGVja291dCBwYWdlICdhcHBsZXBheSxnb29nbGVwYXkscGF5cGFsJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lT3JkZXJQbGFjZWRFdmVudE9wdGlvbnMgZXh0ZW5kcyBQYXlQYWxGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgc2VsZWN0ZWRfcGF5bWVudF9tZXRob2Q6IHN0cmluZztcbiAgICBjdXJyZW5jeV9jb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVQYXltZW50Rm9ybWF0dGVkUGF5bG9hZCB7XG4gICAgcGF5cGFsX2Nvbm5lY3RfdG9rZW4/OiB7XG4gICAgICAgIG9yZGVyX2lkPzogc3RyaW5nO1xuICAgICAgICB0b2tlbjogc3RyaW5nO1xuICAgIH07XG4gICAgcGF5cGFsX2Zhc3RsYW5lX3Rva2VuPzoge1xuICAgICAgICBvcmRlcl9pZD86IHN0cmluZztcbiAgICAgICAgdG9rZW46IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhc3RsYW5lU3R5bGVzU2V0dGluZ3Mge1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NQYWRkaW5nPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemU/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJXaWR0aD86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NUZXh0Q29sb3JCYXNlPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlckNvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0ZvY3VzQm9yZGVyQmFzZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5Pzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZUJyYW5kaW5nU2V0dGluZ3M/OiBzdHJpbmc7XG59XG4iLCJpbXBvcnQgeyBTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHtcbiAgICBQYXlQYWxDb21tZXJjZUhvc3RXaW5kb3csXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsRmFzdGxhbmVTZGssXG4gICAgUGF5UGFsR29vZ2xlUGF5U2RrLFxuICAgIFBheVBhbE1lc3NhZ2VzU2RrLFxuICAgIFBheVBhbFNka0NvbmZpZyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVNkayB7XG4gICAgcHJpdmF0ZSB3aW5kb3c6IFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2NyaXB0TG9hZGVyOiBTY3JpcHRMb2FkZXIpIHtcbiAgICAgICAgdGhpcy53aW5kb3cgPSB3aW5kb3c7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGF5UGFsRmFzdGxhbmVTZGsoXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICAgICAgc2Vzc2lvbklkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZVNkaz4ge1xuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lU2RrKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldFBheVBhbEZhc3RsYW5lU2RrQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlQYWxTZGsoY29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxGYXN0bGFuZVNkaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lU2RrO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBheVBhbEdvb2dsZVBheVNkayhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlPzogYm9vbGVhbixcbiAgICAgICAgZm9yY2VMb2FkPzogYm9vbGVhbixcbiAgICApOiBQcm9taXNlPFBheVBhbEdvb2dsZVBheVNkaz4ge1xuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEdvb2dsZVBheSB8fCBmb3JjZUxvYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbFNka1NjcmlwdENvbmZpZyA9IHRoaXMuZ2V0UGF5UGFsR29vZ2xlUGF5U2RrU2NyaXB0Q29uZmlnT3JUaHJvdyhcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5UGFsU2RrKHBheXBhbFNka1NjcmlwdENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEdvb2dsZVBheSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucGF5cGFsR29vZ2xlUGF5O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBheVBhbEFwbXNTZGsoXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxBcG1zKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmdldFBheVBhbEFwbVNka0NvbmZpZ3VyYXRpb24ocGF5bWVudE1ldGhvZCwgY3VycmVuY3lDb2RlKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5UGFsU2RrKGNvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsQXBtcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnBheXBhbEFwbXM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGF5UGFsTWVzc2FnZXMoXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPFBheVBhbE1lc3NhZ2VzU2RrPiB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsTWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbFNka01lc3NhZ2VzQ29uZmlnID0gdGhpcy5nZXRQYXlQYWxTZGtNZXNzYWdlc0NvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlQYWxTZGsocGF5cGFsU2RrTWVzc2FnZXNDb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxNZXNzYWdlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucGF5cGFsTWVzc2FnZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiAgbG9hZFBheVBhbFNkayBpcyBhIHBheXBhbCBzZGsgc2NyaXB0IGxvYWRlclxuICAgICAqICB3aGljaCBsb2FkcyBwYXlwYWwgc2RrIGJhc2VkIG9uIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb25cbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgbG9hZFBheVBhbFNkayh7IG9wdGlvbnMsIGF0dHJpYnV0ZXMgfTogUGF5UGFsU2RrQ29uZmlnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHNjcmlwdE9wdGlvbnMgPSB0aGlzLnRyYW5zZm9ybUNvbmZpZzxQYXlQYWxTZGtDb25maWdbJ29wdGlvbnMnXT4ob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHNjcmlwdEF0dHJpYnV0ZXMgPSB0aGlzLnRyYW5zZm9ybUNvbmZpZzxQYXlQYWxTZGtDb25maWdbJ2F0dHJpYnV0ZXMnXT4oYXR0cmlidXRlcyk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrVXJsID0gJ2h0dHBzOi8vd3d3LnBheXBhbC5jb20vc2RrL2pzJztcbiAgICAgICAgY29uc3Qgc2NyaXB0UXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNjcmlwdE9wdGlvbnMpLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHNjcmlwdFNyYyA9IGAke3BheXBhbFNka1VybH0/JHtzY3JpcHRRdWVyeX1gO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuc2NyaXB0TG9hZGVyLmxvYWRTY3JpcHQoc2NyaXB0U3JjLCB7XG4gICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHNjcmlwdEF0dHJpYnV0ZXMsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ29uZmlndXJhdGlvbnMgc2VjdGlvblxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRQYXlQYWxGYXN0bGFuZVNka0NvbmZpZ3VyYXRpb24oXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICAgICAgc2Vzc2lvbklkOiBzdHJpbmcsXG4gICAgKTogUGF5UGFsU2RrQ29uZmlnIHtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghaW5pdGlhbGl6YXRpb25EYXRhIHx8ICFpbml0aWFsaXphdGlvbkRhdGEuY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgaW50ZW50LCBjbGllbnRJZCwgbWVyY2hhbnRJZCwgYXR0cmlidXRpb25JZCB9ID0gaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgJ2NsaWVudC1pZCc6IGNsaWVudElkLFxuICAgICAgICAgICAgICAgICdtZXJjaGFudC1pZCc6IG1lcmNoYW50SWQsXG4gICAgICAgICAgICAgICAgY29tbWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2Zhc3RsYW5lJyxcbiAgICAgICAgICAgICAgICAgICAgJ2J1dHRvbnMnLFxuICAgICAgICAgICAgICAgICAgICAncGF5bWVudC1maWVsZHMnLFxuICAgICAgICAgICAgICAgICAgICAnaG9zdGVkLWZpZWxkcycsXG4gICAgICAgICAgICAgICAgICAgICd0aHJlZS1kb21haW4tc2VjdXJlJyxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1jbGllbnQtbWV0YWRhdGEtaWQnOiBzZXNzaW9uSWQucmVwbGFjZSgvLS9nLCAnJyksXG4gICAgICAgICAgICAgICAgJ2RhdGEtbmFtZXNwYWNlJzogJ3BheXBhbEZhc3RsYW5lU2RrJyxcbiAgICAgICAgICAgICAgICAnZGF0YS1wYXJ0bmVyLWF0dHJpYnV0aW9uLWlkJzogYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1zZGstY2xpZW50LXRva2VuJzogY2xpZW50VG9rZW4sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGF5UGFsR29vZ2xlUGF5U2RrU2NyaXB0Q29uZmlnT3JUaHJvdyhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlID0gdHJ1ZSxcbiAgICApOiBQYXlQYWxTZGtDb25maWcge1xuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXphdGlvbkRhdGEgfHwgIWluaXRpYWxpemF0aW9uRGF0YS5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgY2xpZW50SWQsXG4gICAgICAgICAgICBtZXJjaGFudElkLFxuICAgICAgICAgICAgYnV5ZXJDb3VudHJ5LFxuICAgICAgICAgICAgYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgIGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkLFxuICAgICAgICAgICAgaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSxcbiAgICAgICAgfSA9IGluaXRpYWxpemF0aW9uRGF0YTtcblxuICAgICAgICBjb25zdCBjb21taXQgPSBpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCB8fCBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgJ2NsaWVudC1pZCc6IGNsaWVudElkLFxuICAgICAgICAgICAgICAgICdtZXJjaGFudC1pZCc6IG1lcmNoYW50SWQsXG4gICAgICAgICAgICAgICAgY29tbWl0LFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFsnZ29vZ2xlcGF5J10sXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICAgICAgLi4uKGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUgJiYgeyAnYnV5ZXItY291bnRyeSc6IGJ1eWVyQ291bnRyeSB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgJ2RhdGEtcGFydG5lci1hdHRyaWJ1dGlvbi1pZCc6IGF0dHJpYnV0aW9uSWQsXG4gICAgICAgICAgICAgICAgJ2RhdGEtY2xpZW50LXRva2VuJzogY2xpZW50VG9rZW4sXG4gICAgICAgICAgICAgICAgJ2RhdGEtbmFtZXNwYWNlJzogJ3BheXBhbEdvb2dsZVBheScsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGF5UGFsQXBtU2RrQ29uZmlndXJhdGlvbihcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICk6IFBheVBhbFNka0NvbmZpZyB7XG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghaW5pdGlhbGl6YXRpb25EYXRhIHx8ICFpbml0aWFsaXphdGlvbkRhdGEuY2xpZW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGludGVudCxcbiAgICAgICAgICAgIGNsaWVudElkLFxuICAgICAgICAgICAgbWVyY2hhbnRJZCxcbiAgICAgICAgICAgIGJ1eWVyQ291bnRyeSxcbiAgICAgICAgICAgIGF0dHJpYnV0aW9uSWQsXG4gICAgICAgICAgICBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlLFxuICAgICAgICAgICAgYXZhaWxhYmxlQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyA9IFtdLFxuICAgICAgICAgICAgZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMgPSBbXSxcbiAgICAgICAgfSA9IGluaXRpYWxpemF0aW9uRGF0YTtcblxuICAgICAgICBjb25zdCBlbmFibGVBUE1zRnVuZGluZyA9IGVuYWJsZWRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzO1xuICAgICAgICBjb25zdCBkaXNhYmxlQVBNc0Z1bmRpbmcgPSBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzLmZpbHRlcihcbiAgICAgICAgICAgIChhcG06IHN0cmluZykgPT4gIWVuYWJsZWRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzLmluY2x1ZGVzKGFwbSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnY2xpZW50LWlkJzogY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50LWlkJzogbWVyY2hhbnRJZCxcbiAgICAgICAgICAgICAgICAnZW5hYmxlLWZ1bmRpbmcnOiBlbmFibGVBUE1zRnVuZGluZy5sZW5ndGggPiAwID8gZW5hYmxlQVBNc0Z1bmRpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgJ2Rpc2FibGUtZnVuZGluZyc6IGRpc2FibGVBUE1zRnVuZGluZy5sZW5ndGggPiAwID8gZGlzYWJsZUFQTXNGdW5kaW5nIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbW1pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbJ2J1dHRvbnMnLCAncGF5bWVudC1maWVsZHMnXSxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgICAgIGludGVudCxcbiAgICAgICAgICAgICAgICAuLi4oaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSAmJiB7ICdidXllci1jb3VudHJ5JzogYnV5ZXJDb3VudHJ5IH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1wYXJ0bmVyLWF0dHJpYnV0aW9uLWlkJzogYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1uYW1lc3BhY2UnOiAncGF5cGFsQXBtcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGF5UGFsU2RrTWVzc2FnZXNDb25maWd1cmF0aW9uKFxuICAgICAgICBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPixcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmcsXG4gICAgKTogUGF5UGFsU2RrQ29uZmlnIHtcbiAgICAgICAgY29uc3QgeyBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXphdGlvbkRhdGEgfHwgIWluaXRpYWxpemF0aW9uRGF0YS5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRJZCwgbWVyY2hhbnRJZCwgYXR0cmlidXRpb25JZCwgaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSwgYnV5ZXJDb3VudHJ5IH0gPVxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgJ2NsaWVudC1pZCc6IGNsaWVudElkLFxuICAgICAgICAgICAgICAgICdtZXJjaGFudC1pZCc6IG1lcmNoYW50SWQsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogWydtZXNzYWdlcyddLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgLi4uKGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUgJiYgeyAnYnV5ZXItY291bnRyeSc6IGJ1eWVyQ291bnRyeSB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgJ2RhdGEtbmFtZXNwYWNlJzogJ3BheXBhbE1lc3NhZ2VzJyxcbiAgICAgICAgICAgICAgICAnZGF0YS1wYXJ0bmVyLWF0dHJpYnV0aW9uLWlkJzogYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBVdGlscyBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHRyYW5zZm9ybUNvbmZpZzxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KGNvbmZpZzogVCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgICBsZXQgdHJhbnNmb3JtZWRDb25maWcgPSB7fTtcblxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY29uZmlnKSBhcyBBcnJheTxrZXlvZiBUPjtcblxuICAgICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWdba2V5XTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHZhbHVlID09PSAnJyB8fFxuICAgICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIC4uLnRyYW5zZm9ybWVkQ29uZmlnLFxuICAgICAgICAgICAgICAgIFtrZXldOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkQ29uZmlnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZVNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlU2RrIGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXNkayc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrKCk6IFBheVBhbENvbW1lcmNlU2RrIHtcbiAgICByZXR1cm4gbmV3IFBheVBhbENvbW1lcmNlU2RrKGNyZWF0ZVNjcmlwdExvYWRlcigpKTtcbn1cbiIsImludGVyZmFjZSBDb29raWVPcHRpb25zIHtcbiAgICBleHBpcmVzPzogRGF0ZTtcbiAgICBwYXRoPzogc3RyaW5nO1xuICAgIGRvbWFpbj86IHN0cmluZztcbiAgICBzZWN1cmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29raWVTdG9yYWdlIHtcbiAgICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCBjb29raWVLZXkgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoYCR7bmFtZX1gKX09YDtcbiAgICAgICAgY29uc3QgY29va2llID0gZG9jdW1lbnQuY29va2llO1xuXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKGNvb2tpZUtleSk7XG5cbiAgICAgICAgaWYgKGZpcnN0SW5kZXggPiAtMSkge1xuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKCc7JywgZmlyc3RJbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gY29va2llLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZyhmaXJzdEluZGV4ICsgY29va2llS2V5Lmxlbmd0aCwgbGFzdEluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7IHNlY3VyZTogdHJ1ZSB9KSB7XG4gICAgICAgIGxldCBjb29raWVUZXh0ID0gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcblxuICAgICAgICBjb25zdCB7IGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmIChleHBpcmVzKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtleHBpcmVzLnRvVVRDU3RyaW5nKCl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAvLyBpbmZvOiBkZWZhdWx0IGNvb2tpZSBleHBpcmF0aW9uIHRpbWUgYWZ0ZXIgc2V0dXBcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSA2MDtcblxuICAgICAgICAgICAgbm93LnNldFRpbWUobm93LmdldFRpbWUoKSArIG1pbnV0ZXMgKiA2MCAqIDEwMDApO1xuXG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtub3cudG9VVENTdHJpbmcoKX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgcGF0aD0ke3BhdGh9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgZG9tYWluPSR7ZG9tYWlufWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9ICc7IHNlY3VyZSc7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWVUZXh0O1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zPzogQ29va2llT3B0aW9ucykge1xuICAgICAgICBDb29raWVTdG9yYWdlLnNldChuYW1lLCAnJywgeyBleHBpcmVzOiBuZXcgRGF0ZSgwKSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc0VxdWFsLCBvbWl0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBBZGRyZXNzLFxuICAgIENhcmRJbnN0cnVtZW50LFxuICAgIEN1c3RvbWVyQWRkcmVzcyxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbiAgICBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IENvb2tpZVN0b3JhZ2UgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3N0b3JhZ2UnO1xuXG5pbXBvcnQge1xuICAgIFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdyxcbiAgICBQYXlQYWxGYXN0bGFuZSxcbiAgICBQYXlQYWxGYXN0bGFuZUFkZHJlc3MsXG4gICAgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblJlc3VsdCxcbiAgICBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUsXG4gICAgUGF5UGFsRmFzdGxhbmVMb29rdXBDdXN0b21lckJ5RW1haWxSZXN1bHQsXG4gICAgUGF5UGFsRmFzdGxhbmVQcm9maWxlQ2FyZCxcbiAgICBQYXlQYWxGYXN0bGFuZVByb2ZpbGVOYW1lLFxuICAgIFBheVBhbEZhc3RsYW5lUHJvZmlsZVBob25lLFxuICAgIFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGFNYXBwaW5nUmVzdWx0LFxuICAgIFBheVBhbEZhc3RsYW5lU2RrLFxuICAgIFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyB7XG4gICAgcHJpdmF0ZSB3aW5kb3c6IFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgICB9XG5cbiAgICBhc3luYyBpbml0aWFsaXplUGF5UGFsRmFzdGxhbmUoXG4gICAgICAgIHBheXBhbEZhc3RsYW5lU2RrOiBQYXlQYWxGYXN0bGFuZVNkayxcbiAgICAgICAgaXNUZXN0TW9kZUVuYWJsZWQ6IGJvb2xlYW4sXG4gICAgICAgIHN0eWxlcz86IFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uLFxuICAgICk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmU+IHtcbiAgICAgICAgaWYgKGlzVGVzdE1vZGVFbmFibGVkKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zhc3RsYW5lRW52JywgJ3NhbmRib3gnKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYXhvRW52JywgJ3NhbmRib3gnKTsgLy8gVE9ETzogcmVtb3ZlIGlmIHRoaXMga2V5IGRvZXMgbm90IHVzZSBvbiBQYXlQYWwgc2lkZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxGYXN0bGFuZSkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFN0eWxlcyA9IHtcbiAgICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lID0gYXdhaXQgcGF5cGFsRmFzdGxhbmVTZGsuRmFzdGxhbmUoe1xuICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzIHx8IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvdy5wYXlwYWxGYXN0bGFuZTtcbiAgICB9XG5cbiAgICBnZXRQYXlQYWxGYXN0bGFuZU9yVGhyb3coKTogUGF5UGFsRmFzdGxhbmUge1xuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvdy5wYXlwYWxGYXN0bGFuZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERldGVjdHMgdGhlIGN1c3RvbWVyIHRvIFBheVBhbCBGYXN0bGFuZSByZWxhdGlvbiBhbmRcbiAgICAgKiByZXR1cm5zIGN1c3RvbWVyQ29udGV4dElkIHRvIHVzZSBpdCBmb3IgYXV0aGVudGljYXRpb25cbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGxvb2t1cEN1c3RvbWVyT3JUaHJvdyhlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZUxvb2t1cEN1c3RvbWVyQnlFbWFpbFJlc3VsdD4ge1xuICAgICAgICBjb25zdCBwYXlwYWxGYXN0bGFuZSA9IHRoaXMuZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgcmV0dXJuIHBheXBhbEZhc3RsYW5lLmlkZW50aXR5Lmxvb2t1cEN1c3RvbWVyQnlFbWFpbChlbWFpbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBUcmlnZ2VycyBhdXRoZW50aWNhdGlvbiBmbG93IChzaG93cyBPVFAgcG9wdXApIGlmIHRoZSBjdXN0b21lciByZWNvZ25pc2VkIGFzIFBheVBhbCBGYXN0bGFuZSB1c2VyXG4gICAgICogYW5kIHJldHVybnMgUGF5UGFsIEZhc3RsYW5lIFByb2ZpbGUgZGF0YSB0byB1c2UgaXQgaW4gQkMgY2hlY2tvdXRcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIHRyaWdnZXJBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KFxuICAgICAgICBjdXN0b21lckNvbnRleHRJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25SZXN1bHQ+IHtcbiAgICAgICAgaWYgKCFjdXN0b21lckNvbnRleHRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsRmFzdGxhbmUgPSB0aGlzLmdldFBheVBhbEZhc3RsYW5lT3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBwYXlwYWxGYXN0bGFuZS5pZGVudGl0eS50cmlnZ2VyQXV0aGVudGljYXRpb25GbG93KGN1c3RvbWVyQ29udGV4dElkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqICd1cGRhdGVTdG9yYWdlU2Vzc2lvbklkJyBtZXRob2QgaXMgdXNlZCB0bzpcbiAgICAgKiAtIHNldCBzZXNzaW9uIGlkIGFmdGVyIHVzZXIgd2FzIGF1dGhlbnRpY2F0ZWQgKG9yIHVucmVjb2duaXNlZCkgdG8gdHJpZ2dlciBhdXRoZW50aWNhdGlvbiBhZnRlciBwYWdlIHJlZnJlc2hcbiAgICAgKlxuICAgICAqIEZsb3cgaW5mbzpcbiAgICAgKiBJZiB1c2VyIHVucmVjb2duaXNlZCB0aGVuIHRoZSBsb29rdXAgbWV0aG9kIHdpbGwgYmUgd29ya2luZyBidXQgdGhlIE9UUCB3aWxsIG5vdCBiZSBzaG93blxuICAgICAqIElmIHVzZXIgcmVjb2duaXNlZCBhbmQgbm90IGNhbmNlbGVkIHRoZW4gdGhlIGxvb2t1cCBtZXRob2Qgd2lsbCBiZSB3b3JraW5nIGFuZCB0aGUgT1RQIHdpbGwgYmUgc2hvd24gb25seSBpZiBuZWVkZWRcbiAgICAgKiBJZiB1c2VyIGNhbmNlbHMgdGhlIE9QVCB0aGVuIE9UUCB3aWxsIG5vdCBiZSB0cmlnZ2VyZWQgYWZ0ZXIgcGFnZSByZWZyZXNoXG4gICAgICpcbiAgICAgKi9cbiAgICB1cGRhdGVTdG9yYWdlU2Vzc2lvbklkKHNlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGV4cGlyZXMgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBleHBpcmVzLnNldERhdGUoZXhwaXJlcy5nZXREYXRlKCkgKyAxNCk7IC8vIDIgd2Vla3MgZXhwaXJ5XG5cbiAgICAgICAgY29uc3QgY29va2llc09wdGlvbiA9IHtcbiAgICAgICAgICAgIGV4cGlyZXMsXG4gICAgICAgICAgICBzZWN1cmU6IHRydWUsXG4gICAgICAgIH07XG5cbiAgICAgICAgQ29va2llU3RvcmFnZS5zZXQoJ2JjLWZhc3RsYW5lLXNlc3Npb25JZCcsIHNlc3Npb25JZCwgY29va2llc09wdGlvbik7XG4gICAgfVxuXG4gICAgcmVtb3ZlU3RvcmFnZVNlc3Npb25JZCgpOiB2b2lkIHtcbiAgICAgICAgQ29va2llU3RvcmFnZS5yZW1vdmUoJ2JjLWZhc3RsYW5lLXNlc3Npb25JZCcpO1xuICAgIH1cblxuICAgIGdldFN0b3JhZ2VTZXNzaW9uSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIENvb2tpZVN0b3JhZ2UuZ2V0KCdiYy1mYXN0bGFuZS1zZXNzaW9uSWQnKSB8fCAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqICdtYXBQYXlQYWxGYXN0bGFuZVByb2ZpbGVUb0JjQ3VzdG9tZXJEYXRhJyBtZXRob2QgaXMgcmVzcG9uc2libGUgZm9yOlxuICAgICAqIC0gbWFwcGluZyBQYXlQYWwgRmFzdGxhbmUgUHJvZmlsZSBkYXRhIHRvIEJDIGRhdGEgc2hhcGVcbiAgICAgKiAtIHJldHVybmluZyBtYXBwZWQgZGF0YSB0byB1c2UgZm9yIHVwZGF0aW5nIFBheW1lbnRQcm92aWRlckN1c3RvbWVyIHN0YXRlIGFuZFxuICAgICAqIHVwZGF0ZSBzaGlwcGluZyBhbmQgYmlsbGluZyBhZGRyZXNzZXNcbiAgICAgKlxuICAgICAqL1xuICAgIG1hcFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGEoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uUmVzdWx0LFxuICAgICk6IFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGFNYXBwaW5nUmVzdWx0IHtcbiAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvblN0YXRlLCBwcm9maWxlRGF0YSB9ID0gYXV0aGVudGljYXRpb25SZXN1bHQ7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQmlsbGluZ0FkZHJlc3MgPSBwcm9maWxlRGF0YT8uY2FyZD8ucGF5bWVudFNvdXJjZT8uY2FyZD8uYmlsbGluZ0FkZHJlc3M7XG4gICAgICAgIGNvbnN0IHBheXBhbFNoaXBwaW5nQWRkcmVzcyA9IHByb2ZpbGVEYXRhPy5zaGlwcGluZ0FkZHJlc3M7XG4gICAgICAgIGNvbnN0IHBheXBhbFByb2ZpbGVOYW1lID0gcHJvZmlsZURhdGE/Lm5hbWU7XG4gICAgICAgIGNvbnN0IHBheXBhbEluc3RydW1lbnQgPSBwcm9maWxlRGF0YT8uY2FyZDtcblxuICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPSBwYXlwYWxTaGlwcGluZ0FkZHJlc3NcbiAgICAgICAgICAgID8gdGhpcy5tYXBQYXlQYWxUb0JjQWRkcmVzcyhcbiAgICAgICAgICAgICAgICAgIHBheXBhbFNoaXBwaW5nQWRkcmVzcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgcGF5cGFsU2hpcHBpbmdBZGRyZXNzLm5hbWUsXG4gICAgICAgICAgICAgICAgICBwYXlwYWxTaGlwcGluZ0FkZHJlc3MucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICBwYXlwYWxCaWxsaW5nQWRkcmVzcyAmJiBwYXlwYWxQcm9maWxlTmFtZVxuICAgICAgICAgICAgICAgID8gdGhpcy5tYXBQYXlQYWxUb0JjQWRkcmVzcyhcbiAgICAgICAgICAgICAgICAgICAgICBwYXlwYWxCaWxsaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICBwYXlwYWxQcm9maWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXlwYWxTaGlwcGluZ0FkZHJlc3M/LnBob25lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBpbnN0cnVtZW50cyA9IHBheXBhbEluc3RydW1lbnRcbiAgICAgICAgICAgID8gdGhpcy5tYXBQYXlQYWxUb0JjSW5zdHJ1bWVudChtZXRob2RJZCwgcGF5cGFsSW5zdHJ1bWVudClcbiAgICAgICAgICAgIDogW107XG5cbiAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gdGhpcy5maWx0ZXJBZGRyZXNzZXMoW3NoaXBwaW5nQWRkcmVzcywgYmlsbGluZ0FkZHJlc3NdKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb25TdGF0ZTpcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlIHx8IFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5VTlJFQ09HTklaRUQsXG4gICAgICAgICAgICBhZGRyZXNzZXMsXG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzcyxcbiAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgIGluc3RydW1lbnRzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG1hcFBheVBhbFRvQmNJbnN0cnVtZW50KFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBpbnN0cnVtZW50OiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkLFxuICAgICk6IENhcmRJbnN0cnVtZW50W10ge1xuICAgICAgICBjb25zdCB7IGlkLCBwYXltZW50U291cmNlIH0gPSBpbnN0cnVtZW50O1xuICAgICAgICBjb25zdCB7IGJyYW5kLCBleHBpcnksIGxhc3REaWdpdHMgfSA9IHBheW1lbnRTb3VyY2UuY2FyZDtcblxuICAgICAgICBjb25zdCBbZXhwaXJ5WWVhciwgZXhwaXJ5TW9udGhdID0gZXhwaXJ5LnNwbGl0KCctJyk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiaWdwYXlUb2tlbjogaWQsXG4gICAgICAgICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEluc3RydW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGV4cGlyeU1vbnRoLFxuICAgICAgICAgICAgICAgIGV4cGlyeVllYXIsXG4gICAgICAgICAgICAgICAgaWluOiAnJyxcbiAgICAgICAgICAgICAgICBsYXN0NDogbGFzdERpZ2l0cyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25Nb2RlOiBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlLlBBTixcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2FyZCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdO1xuICAgIH1cblxuICAgIG1hcEJjVG9QYXlQYWxBZGRyZXNzKGFkZHJlc3M/OiBBZGRyZXNzKTogUGF5UGFsRmFzdGxhbmVBZGRyZXNzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBhbnk6IGFkZHJlc3M/LmNvbXBhbnkgfHwgJycsXG4gICAgICAgICAgICBhZGRyZXNzTGluZTE6IGFkZHJlc3M/LmFkZHJlc3MxIHx8ICcnLFxuICAgICAgICAgICAgYWRkcmVzc0xpbmUyOiBhZGRyZXNzPy5hZGRyZXNzMiB8fCAnJyxcbiAgICAgICAgICAgIGFkbWluQXJlYTE6IGFkZHJlc3M/LnN0YXRlT3JQcm92aW5jZUNvZGUgfHwgYWRkcmVzcz8uc3RhdGVPclByb3ZpbmNlIHx8ICcnLFxuICAgICAgICAgICAgYWRtaW5BcmVhMjogYWRkcmVzcz8uY2l0eSB8fCAnJyxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3M/LnBvc3RhbENvZGUgfHwgJycsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcz8uY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbWFwUGF5UGFsVG9CY0FkZHJlc3MoXG4gICAgICAgIGFkZHJlc3M6IFBheVBhbEZhc3RsYW5lQWRkcmVzcyxcbiAgICAgICAgcHJvZmlsZU5hbWU6IFBheVBhbEZhc3RsYW5lUHJvZmlsZU5hbWUsXG4gICAgICAgIHBob25lPzogUGF5UGFsRmFzdGxhbmVQcm9maWxlUGhvbmUsXG4gICAgICAgIGN1c3RvbUZpZWxkcz86IEN1c3RvbWVyQWRkcmVzc1snY3VzdG9tRmllbGRzJ10sXG4gICAgKTogQ3VzdG9tZXJBZGRyZXNzIHtcbiAgICAgICAgY29uc3QgW2ZpcnN0TmFtZSwgbGFzdE5hbWVdID0gcHJvZmlsZU5hbWUuZnVsbE5hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgICBjb25zdCBwaG9uZURhdGEgPSB7XG4gICAgICAgICAgICBuYXRpb25hbE51bWJlcjogcGhvbmU/Lm5hdGlvbmFsTnVtYmVyIHx8ICcnLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IHBob25lPy5jb3VudHJ5Q29kZSB8fCAnJyxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICB0eXBlOiAncGF5cGFsLWFkZHJlc3MnLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBwcm9maWxlTmFtZS5maXJzdE5hbWUgfHwgZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHByb2ZpbGVOYW1lLmxhc3ROYW1lIHx8IGxhc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgY29tcGFueTogYWRkcmVzcy5jb21wYW55IHx8ICcnLFxuICAgICAgICAgICAgYWRkcmVzczE6IGFkZHJlc3MuYWRkcmVzc0xpbmUxLFxuICAgICAgICAgICAgYWRkcmVzczI6IGFkZHJlc3MuYWRkcmVzc0xpbmUyIHx8ICcnLFxuICAgICAgICAgICAgY2l0eTogYWRkcmVzcy5hZG1pbkFyZWEyLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlOiBhZGRyZXNzLmFkbWluQXJlYTEsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBhZGRyZXNzLmFkbWluQXJlYTEsXG4gICAgICAgICAgICBjb3VudHJ5OiBhZGRyZXNzLmNvdW50cnlDb2RlIHx8ICcnLCAvLyBUT0RPOiB1cGRhdGUgY291bnRyeSB3aXRoIHZhbGlkIG5hbWluZ1xuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBwaG9uZTogcGhvbmVEYXRhLmNvdW50cnlDb2RlICsgcGhvbmVEYXRhLm5hdGlvbmFsTnVtYmVyLFxuICAgICAgICAgICAgY3VzdG9tRmllbGRzOiBjdXN0b21GaWVsZHMgfHwgW10sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3IgZmlsdGVyaW5nIFBheVBhbCBGYXN0bGFuZSBhZGRyZXNzZXMgaWYgdGhleSBhcmUgdGhlIHNhbWVcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhZGRyZXNzZXMgdG8gdXNlIHRoZW0gZm9yIHNoaXBwaW5nIGFuZC9vciBiaWxsaW5nIGFkZHJlc3Mgc2VsZWN0aW9uc1xuICAgICAqIHNvIHRoZSBjdXN0b21lciB3aWxsIGJlIGFibGUgdG8gdXNlIGFkZHJlc3NlcyBmcm9tIFBheVBhbCBGYXN0bGFuZSBpbiBjaGVja291dCBmbG93XG4gICAgICpcbiAgICAgKi9cbiAgICBmaWx0ZXJBZGRyZXNzZXMoYWRkcmVzc2VzOiBBcnJheTxDdXN0b21lckFkZHJlc3MgfCB1bmRlZmluZWQ+KTogQ3VzdG9tZXJBZGRyZXNzW10ge1xuICAgICAgICByZXR1cm4gYWRkcmVzc2VzLnJlZHVjZShcbiAgICAgICAgICAgIChjdXN0b21lckFkZHJlc3NlczogQ3VzdG9tZXJBZGRyZXNzW10sIGN1cnJlbnRBZGRyZXNzOiBDdXN0b21lckFkZHJlc3MgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21lckFkZHJlc3NlcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzYW1lQWRkcmVzc0luVGhlQXJyYXkgPSBjdXN0b21lckFkZHJlc3Nlcy5zb21lKChjdXN0b21lckFkZHJlc3MpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFcXVhbEFkZHJlc3NlcyhjdXN0b21lckFkZHJlc3MsIGN1cnJlbnRBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNhbWVBZGRyZXNzSW5UaGVBcnJheVxuICAgICAgICAgICAgICAgICAgICA/IGN1c3RvbWVyQWRkcmVzc2VzXG4gICAgICAgICAgICAgICAgICAgIDogWy4uLmN1c3RvbWVyQWRkcmVzc2VzLCBjdXJyZW50QWRkcmVzc107XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW10sXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0VxdWFsQWRkcmVzc2VzKFxuICAgICAgICBmaXJzdEFkZHJlc3M6IEN1c3RvbWVyQWRkcmVzcyxcbiAgICAgICAgc2Vjb25kQWRkcmVzczogQ3VzdG9tZXJBZGRyZXNzLFxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNFcXVhbCh0aGlzLm5vcm1hbGl6ZUFkZHJlc3MoZmlyc3RBZGRyZXNzKSwgdGhpcy5ub3JtYWxpemVBZGRyZXNzKHNlY29uZEFkZHJlc3MpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzczogQ3VzdG9tZXJBZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBvbWl0KGFkZHJlc3MsIFsnaWQnLCAncGhvbmUnXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1mYXN0bGFuZS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscygpOiBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMge1xuICAgIHJldHVybiBuZXcgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzKCk7XG59XG4iLCJpbXBvcnQgeyBvbWl0QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLCBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbiB9IGZyb20gJy4uL2luZGV4JztcblxuZnVuY3Rpb24gaXNJbnZhbGlkU3R5bGVPcHRpb24oc3R5bGVPcHRpb246IHVua25vd24pIHtcbiAgICByZXR1cm4gdHlwZW9mIHN0eWxlT3B0aW9uICE9PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RmFzdGxhbmVTdHlsZXMoXG4gICAgc3R5bGVTZXR0aW5ncz86IEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MsXG4gICAgdWlTdHlsZXM/OiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbixcbikge1xuICAgIGlmICghdWlTdHlsZXMgJiYgIXN0eWxlU2V0dGluZ3MpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xlYW5VcEZhc3RsYW5lU3R5bGVzKG1lcmdlRmFzdGxhbmVTdHlsZXMoc3R5bGVTZXR0aW5ncywgdWlTdHlsZXMpKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VGYXN0bGFuZVN0eWxlcyhcbiAgICBzdHlsZVNldHRpbmdzPzogRmFzdGxhbmVTdHlsZXNTZXR0aW5ncyxcbiAgICB1aVN0eWxlcz86IFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uLFxuKTogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk6XG4gICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8ucm9vdD8uYmFja2dyb3VuZENvbG9yUHJpbWFyeSxcbiAgICAgICAgICAgIGVycm9yQ29sb3I6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvciB8fCB1aVN0eWxlcz8ucm9vdD8uZXJyb3JDb2xvcixcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzRm9udEZhbWlseSB8fCB1aVN0eWxlcz8ucm9vdD8uZm9udEZhbWlseSxcbiAgICAgICAgICAgIGZvbnRTaXplQmFzZTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRTaXplIHx8IHVpU3R5bGVzPy5yb290Py5mb250U2l6ZUJhc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc1BhZGRpbmcgfHwgdWlTdHlsZXM/LnJvb3Q/LnBhZGRpbmcsXG4gICAgICAgICAgICBwcmltYXJ5Q29sb3I6XG4gICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NQcmltYXJ5Q29sb3IgfHwgdWlTdHlsZXM/LnJvb3Q/LnByaW1hcnlDb2xvcixcbiAgICAgICAgfSxcbiAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJSYWRpdXMgfHwgdWlTdHlsZXM/LmlucHV0Py5ib3JkZXJSYWRpdXMsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvciB8fCB1aVN0eWxlcz8uaW5wdXQ/LmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgZm9jdXNCb3JkZXJDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2UgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8uaW5wdXQ/LmZvY3VzQm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6XG4gICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVJbnB1dFNldHRpbmdzQmFja2dyb3VuZENvbG9yIHx8XG4gICAgICAgICAgICAgICAgdWlTdHlsZXM/LmlucHV0Py5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJXaWR0aCB8fCB1aVN0eWxlcz8uaW5wdXQ/LmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgdGV4dENvbG9yQmFzZTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NUZXh0Q29sb3JCYXNlIHx8IHVpU3R5bGVzPy5pbnB1dD8udGV4dENvbG9yQmFzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiB7XG4gICAgICAgICAgICBjb2xvclByaW1hcnk6XG4gICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUb2dnbGVTZXR0aW5nc0NvbG9yUHJpbWFyeSB8fCB1aVN0eWxlcz8udG9nZ2xlPy5jb2xvclByaW1hcnksXG4gICAgICAgICAgICBjb2xvclNlY29uZGFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JTZWNvbmRhcnkgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8udG9nZ2xlPy5jb2xvclNlY29uZGFyeSxcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvciB8fCB1aVN0eWxlcz8udGV4dD8uYm9keT8uY29sb3IsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0ZvbnRTaXplIHx8XG4gICAgICAgICAgICAgICAgICAgIHVpU3R5bGVzPy50ZXh0Py5ib2R5Py5mb250U2l6ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0NvbG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIHVpU3R5bGVzPy50ZXh0Py5jYXB0aW9uPy5jb2xvcixcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzRm9udFNpemUgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmNhcHRpb24/LmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgYnJhbmRpbmc6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lQnJhbmRpbmdTZXR0aW5ncyB8fCB1aVN0eWxlcz8uYnJhbmRpbmcsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY2xlYW5VcEZhc3RsYW5lU3R5bGVzKHN0eWxlczogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24pIHtcbiAgICBjb25zdCBmYXN0bGFuZVN0eWxlczogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24gPSB7fTtcblxuICAgIGNvbnN0IHJvb3QgPSBvbWl0Qnkoc3R5bGVzLnJvb3QsIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCBpbnB1dCA9IG9taXRCeShzdHlsZXMuaW5wdXQsIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCB0b2dnbGUgPSBvbWl0Qnkoc3R5bGVzLnRvZ2dsZSwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IHRleHRCb2R5ID0gb21pdEJ5KHN0eWxlcy50ZXh0Py5ib2R5LCBpc0ludmFsaWRTdHlsZU9wdGlvbik7XG4gICAgY29uc3QgdGV4dENhcHRpb24gPSBvbWl0Qnkoc3R5bGVzLnRleHQ/LmNhcHRpb24sIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCBicmFuZGluZyA9IHN0eWxlcy5icmFuZGluZztcblxuICAgIGlmIChPYmplY3Qua2V5cyhyb290KS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMucm9vdCA9IHJvb3Q7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKGlucHV0KS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMuaW5wdXQgPSBpbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModG9nZ2xlKS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudG9nZ2xlID0gdG9nZ2xlO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0ZXh0Qm9keSkubGVuZ3RoKSB7XG4gICAgICAgIGZhc3RsYW5lU3R5bGVzLnRleHQgPSB7fTtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dC5ib2R5ID0gdGV4dEJvZHk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRleHRDYXB0aW9uKS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dCA9IHtcbiAgICAgICAgICAgIC4uLmZhc3RsYW5lU3R5bGVzLnRleHQsXG4gICAgICAgIH07XG4gICAgICAgIGZhc3RsYW5lU3R5bGVzLnRleHQuY2FwdGlvbiA9IHRleHRDYXB0aW9uO1xuICAgIH1cblxuICAgIGlmIChicmFuZGluZykge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5icmFuZGluZyA9IGJyYW5kaW5nO1xuICAgIH1cblxuICAgIHJldHVybiBmYXN0bGFuZVN0eWxlcztcbn1cbiIsImltcG9ydCB7XG4gICAgQ3VzdG9tZXJDcmVkZW50aWFscyxcbiAgICBDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgIEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQge1xuICAgIGdldEZhc3RsYW5lU3R5bGVzLFxuICAgIFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBQYXlQYWxDb21tZXJjZVNkayxcbiAgICBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uUmVzdWx0LFxuICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZSxcbiAgICBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5IGltcGxlbWVudHMgQ3VzdG9tZXJTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzOiBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VmYXN0bGFuZSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgXCJtZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBjb25zdCBpc1Rlc3RNb2RlRW5hYmxlZCA9ICEhcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGU7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU2RrID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVNkay5nZXRQYXlQYWxGYXN0bGFuZVNkayhcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIGNhcnQuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICAgICBjYXJ0LmlkLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMuaW5pdGlhbGl6ZVBheVBhbEZhc3RsYW5lKFxuICAgICAgICAgICAgICAgIHBheXBhbEZhc3RsYW5lU2RrLFxuICAgICAgICAgICAgICAgIGlzVGVzdE1vZGVFbmFibGVkLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmFzdGxhbmVTdHlsZXMobWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlZmFzdGxhbmUpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgLy8gVE9ETzogYWRkIGxvZ2dlciB0byBiZSBhYmxlIHRvIGRlYnVnIGlzc3VlcyBpZiB0aGVyZSBhbnlcbiAgICAgICAgICAgIC8vIEluZm86IERvIG5vdCB0aHJvdyBhbnl0aGluZyBoZXJlIHRvIGF2b2lkIGJsb2NraW5nIGN1c3RvbWVyIGZyb20gcGFzc2luZyBjaGVja291dCBmbG93XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQoXG4gICAgICAgIG9wdGlvbnM/OiBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCwgY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjaywgbWV0aG9kSWQgfSA9XG4gICAgICAgICAgICBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgXCJjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkIGFuZCBpdCBtdXN0IGJlIGEgZnVuY3Rpb24uJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyT3JUaHJvdygpO1xuXG4gICAgICAgIGlmIChjdXN0b21lci5pc0d1ZXN0KSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5ydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgbG9nZ2VyIHRvIGJlIGFibGUgdG8gZGVidWcgaXNzdWVzIGlmIHRoZXJlIGFueVxuICAgICAgICAgICAgICAgIC8vIEluZm86IERvIG5vdCB0aHJvdyBhbnl0aGluZyBoZXJlIHRvIGF2b2lkIGJsb2NraW5nIGN1c3RvbWVyIGZyb20gcGFzc2luZyBjaGVja291dCBmbG93XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBBdXRoZW50aWNhdGlvbiBmbG93IG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgcnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyhtZXRob2RJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnRJZCA9IHN0YXRlLmdldENhcnRPclRocm93KCkuaWQ7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXIoKTtcbiAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuICAgICAgICBjb25zdCBjdXN0b21lckVtYWlsID0gY3VzdG9tZXI/LmVtYWlsIHx8IGJpbGxpbmdBZGRyZXNzPy5lbWFpbCB8fCAnJztcblxuICAgICAgICBjb25zdCB7IGN1c3RvbWVyQ29udGV4dElkIH0gPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5sb29rdXBDdXN0b21lck9yVGhyb3coXG4gICAgICAgICAgICBjdXN0b21lckVtYWlsLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uUmVzdWx0ID1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLnRyaWdnZXJBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KFxuICAgICAgICAgICAgICAgIGN1c3RvbWVyQ29udGV4dElkLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBpc0F1dGhlbnRpY2F0aW9uRmxvd0NhbmNlbGVkID1cbiAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uUmVzdWx0LmF1dGhlbnRpY2F0aW9uU3RhdGUgPT09IFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRDtcblxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUN1c3RvbWVyRGF0YVN0YXRlKG1ldGhvZElkLCBhdXRoZW50aWNhdGlvblJlc3VsdCk7XG5cbiAgICAgICAgaWYgKGlzQXV0aGVudGljYXRpb25GbG93Q2FuY2VsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLnJlbW92ZVN0b3JhZ2VTZXNzaW9uSWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLnVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQoY2FydElkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlQ3VzdG9tZXJEYXRhU3RhdGUoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uUmVzdWx0OiBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uUmVzdWx0LFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uU3RhdGUsIGFkZHJlc3NlcywgYmlsbGluZ0FkZHJlc3MsIHNoaXBwaW5nQWRkcmVzcywgaW5zdHJ1bWVudHMgfSA9XG4gICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5tYXBQYXlQYWxGYXN0bGFuZVByb2ZpbGVUb0JjQ3VzdG9tZXJEYXRhKFxuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uUmVzdWx0LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoe1xuICAgICAgICAgICAgYXV0aGVudGljYXRpb25TdGF0ZSxcbiAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgIGluc3RydW1lbnRzLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYmlsbGluZ0FkZHJlc3MpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVCaWxsaW5nQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hpcHBpbmdBZGRyZXNzICYmIGNhcnQubGluZUl0ZW1zLnBoeXNpY2FsSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZFN0YXRlID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgICAgICB1cGRhdGVkU3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQgfSA9XG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgICAgICBjb25zdCBjb25zaWdubWVudHMgPSB1cGRhdGVkU3RhdGUuZ2V0Q29uc2lnbm1lbnRzKCkgfHwgW107XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMgPSBjb25zaWdubWVudHNbMF0/LmF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0U2hpcHBpbmdPcHRpb24gPSBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnNbMF07XG4gICAgICAgICAgICBjb25zdCByZWNvbW1lbmRlZFNoaXBwaW5nT3B0aW9uID0gYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zLmZpbmQoXG4gICAgICAgICAgICAgICAgKG9wdGlvbikgPT4gb3B0aW9uLmlzUmVjb21tZW5kZWQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24gfHwgZmlyc3RTaGlwcGluZ09wdGlvbikgJiZcbiAgICAgICAgICAgICAgICBpc0Zhc3RsYW5lU2hpcHBpbmdPcHRpb25BdXRvU2VsZWN0RW5hYmxlZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb25JZCA9IHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24/LmlkIHx8IGZpcnN0U2hpcHBpbmdPcHRpb24uaWQ7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb25JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEZhc3RsYW5lIHN0eWxpbmcgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRGYXN0bGFuZVN0eWxlcyhcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZTogUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgfCB1bmRlZmluZWQsXG4gICAgKTogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24gfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3QgeyBmYXN0bGFuZVN0eWxlcywgaXNGYXN0bGFuZVN0eWxpbmdFbmFibGVkIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcblxuICAgICAgICByZXR1cm4gZ2V0RmFzdGxhbmVTdHlsZXMoXG4gICAgICAgICAgICBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQgPyBmYXN0bGFuZVN0eWxlcyA6IHt9LFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZT8uc3R5bGVzLFxuICAgICAgICApO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ3VzdG9tZXJTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1mYXN0bGFuZS1jdXN0b21lci1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5OiBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsoKSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzKCksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNlYWNjZWxlcmF0ZWRjaGVja291dCcgfSwgLy8gdGhpcyBtZXRob2QgaWQgd2lsbCBiZSBwcm92aWRlZCBmb3IgdXNlcnMgZnJvbSB0ZXN0IGdyb3VwXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNlY3JlZGl0Y2FyZHMnIH0sIC8vIHRoaXMgbWV0aG9kIGlkIHdpbGwgYmUgcHJvdmlkZWQgZm9yIHVzZXJzIGZyb20gY29udHJvbCBncm91cFxuXSk7XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zLFxuICAgIEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUJ1dHRvbkluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5IGltcGxlbWVudHMgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZUJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNlLCBjb250YWluZXJJZCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgaXNCdXlOb3dGbG93ID0gQm9vbGVhbihwYXlwYWxjb21tZXJjZT8uYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5jb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0J1eU5vd0Zsb3cgJiYgIXBheXBhbGNvbW1lcmNlLmN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlLmN1cnJlbmN5Q29kZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzQnV5Tm93RmxvdyAmJlxuICAgICAgICAgICAgdHlwZW9mIHBheXBhbGNvbW1lcmNlLmJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2UuYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMuZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkIG9yIGl0IGlzIG5vdCBhIGZ1bmN0aW9uLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0J1eU5vd0Zsb3cpIHtcbiAgICAgICAgICAgIC8vIEluZm86IGRlZmF1bHQgY2hlY2tvdXQgc2hvdWxkIG5vdCBiZSBsb2FkZWQgZm9yIEJ1eU5vdyBmbG93LFxuICAgICAgICAgICAgLy8gc2luY2UgdGhlcmUgaXMgbm8gY2hlY2tvdXQgc2Vzc2lvbiBhdmFpbGFibGUgZm9yIHRoYXQuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5mbzogd2UgYXJlIHVzaW5nIHByb3ZpZGVkIGN1cnJlbmN5IGNvZGUgZm9yIGJ1eSBub3cgY2FydCxcbiAgICAgICAgLy8gYmVjYXVzZSBjaGVja291dCBzZXNzaW9uIGlzIG5vdCBhdmFpbGFibGUgYmVmb3JlIGJ1eSBub3cgY2FydCBjcmVhdGlvbixcbiAgICAgICAgLy8gaGVuY2UgYXBwbGljYXRpb24gd2lsbCB0aHJvdyBhbiBlcnJvciBvbiBnZXRDYXJ0T3JUaHJvdyBtZXRob2QgY2FsbFxuICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBpc0J1eU5vd0Zsb3dcbiAgICAgICAgICAgID8gcGF5cGFsY29tbWVyY2UuY3VycmVuY3lDb2RlXG4gICAgICAgICAgICA6IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQsIGN1cnJlbmN5Q29kZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKGNvbnRhaW5lcklkLCBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UsIGlzQnV5Tm93Rmxvdyk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNlOiBQYXlQYWxDb21tZXJjZUJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBpc0J1eU5vd0Zsb3c/OiBib29sZWFuLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLCBzdHlsZSwgb25Db21wbGV0ZSwgb25FbGlnaWJpbGl0eUZhaWx1cmUgfSA9IHBheXBhbGNvbW1lcmNlO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQsIGlzQXBwU3dpdGNoRW5hYmxlZCB9ID1cbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAuLi4oIWlzQnV5Tm93RmxvdyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQpICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwU3dpdGNoV2hlbkF2YWlsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKCdwYXlwYWxjb21tZXJjZScpLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS50b2tlbml6ZVBheW1lbnQobWV0aG9kSWQsIG9yZGVySUQpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJ1eU5vd0Zsb3dDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgLi4uKCFpc0FwcFN3aXRjaEVuYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5vbkhvc3RlZENoZWNrb3V0QXBwcm92ZShkYXRhLCBhY3Rpb25zLCBtZXRob2RJZCwgb25Db21wbGV0ZSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbFNkay5GVU5ESU5HLlBBWVBBTCxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgLi4uZGVmYXVsdENhbGxiYWNrcyxcbiAgICAgICAgICAgIC4uLihidXlOb3dJbml0aWFsaXplT3B0aW9ucyAmJiBidXlOb3dGbG93Q2FsbGJhY2tzKSxcbiAgICAgICAgICAgIC4uLihpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCAmJiBob3N0ZWRDaGVja291dENhbGxiYWNrcyksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIGlmIChwYXlwYWxCdXR0b24uaGFzUmV0dXJuZWQ/LigpICYmIHRoaXMuaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQpKSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uLnJlc3VtZT8uKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBheXBhbEJ1dHRvbi5yZW5kZXIoYCMke2NvbnRhaW5lcklkfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9uRWxpZ2liaWxpdHlGYWlsdXJlICYmIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXJJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucz86IFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1eU5vd0NhcnQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnRPclRocm93KFxuICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRDaGVja291dChidXlOb3dDYXJ0LmlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25Ib3N0ZWRDaGVja291dEFwcHJvdmUoXG4gICAgICAgIGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9uQ29tcGxldGU/OiAoKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAoIWRhdGEub3JkZXJJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyRGV0YWlscyA9IGF3YWl0IGFjdGlvbnMub3JkZXIuZ2V0KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVCaWxsaW5nQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgICAgIGlmIChjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKHNoaXBwaW5nQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIoe30sIHsgcGFyYW1zOiB7IG1ldGhvZElkIH0gfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQobWV0aG9kSWQsIGRhdGEub3JkZXJJRCk7XG5cbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlICYmIHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRklYTUU6IERvIHdlIHJlYWxseSBuZWVkIHRvIHJldHVybiB0cnVlIGhlcmU/XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRBZGRyZXNzKHtcbiAgICAgICAgICAgIGNpdHk6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLmNpdHksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3Muc3RhdGUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSB1c2UgdGhlIHNhbWUgYWRkcmVzcyB0byBmaWxsIGJpbGxpbmcgYW5kIHNoaXBwaW5nIGFkZHJlc3NlcyB0byBoYXZlIHZhbGlkIHF1b3RhIG9uIEJFIGZvciBvcmRlciB1cGRhdGluZyBwcm9jZXNzXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHN0YWdlIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHZhbGlkIGN1c3RvbWVyJ3MgYWRkcmVzcyBhY2NlcHQgc2hpcHBpbmcgZGF0YVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhhZGRyZXNzKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdygpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KFxuICAgICAgICAgICAgZGF0YS5zZWxlY3RlZFNoaXBwaW5nT3B0aW9uLmlkLFxuICAgICAgICApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5UGFsIEFwcFN3aXRjaCBlbmFibGluZyBoYW5kbGluZ1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICByZXR1cm4gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmlzQXBwU3dpdGNoRW5hYmxlZCB8fCBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VCdXR0b25TdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1idXR0b24tc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlQnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5LCBbeyBpZDogJ3BheXBhbGNvbW1lcmNlJyB9XSk7XG4iLCJpbXBvcnQgeyBNZXNzYWdlc1N0eWxlT3B0aW9ucywgUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtIH0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuZnVuY3Rpb24gZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyh7XG4gICAgc3R5bGVzLFxufTogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtKTogTWVzc2FnZXNTdHlsZU9wdGlvbnMge1xuICAgIGNvbnN0IG1lc3NhZ2VzU3R5bGVzOiBNZXNzYWdlc1N0eWxlT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKHN0eWxlcy5jb2xvcikge1xuICAgICAgICBtZXNzYWdlc1N0eWxlcy5jb2xvciA9IHN0eWxlcy5jb2xvcjtcbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzLmxheW91dCkge1xuICAgICAgICBtZXNzYWdlc1N0eWxlcy5sYXlvdXQgPSBzdHlsZXMubGF5b3V0O1xuICAgIH1cblxuICAgIGlmIChzdHlsZXNbJ2xvZ28tdHlwZSddIHx8IHN0eWxlc1snbG9nby1wb3NpdGlvbiddKSB7XG4gICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxvZ28gPSB7fTtcblxuICAgICAgICBpZiAoc3R5bGVzWydsb2dvLXR5cGUnXSkge1xuICAgICAgICAgICAgbWVzc2FnZXNTdHlsZXMubG9nby50eXBlID0gc3R5bGVzWydsb2dvLXR5cGUnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZXNbJ2xvZ28tcG9zaXRpb24nXSkge1xuICAgICAgICAgICAgbWVzc2FnZXNTdHlsZXMubG9nby5wb3NpdGlvbiA9IHN0eWxlc1snbG9nby1wb3NpdGlvbiddO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlcy5yYXRpbykge1xuICAgICAgICBtZXNzYWdlc1N0eWxlcy5yYXRpbyA9IHN0eWxlcy5yYXRpbztcbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzWyd0ZXh0LWNvbG9yJ10gfHwgc3R5bGVzWyd0ZXh0LXNpemUnXSkge1xuICAgICAgICBtZXNzYWdlc1N0eWxlcy50ZXh0ID0ge307XG5cbiAgICAgICAgaWYgKHN0eWxlc1sndGV4dC1jb2xvciddKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy50ZXh0LmNvbG9yID0gc3R5bGVzWyd0ZXh0LWNvbG9yJ107XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGVzWyd0ZXh0LXNpemUnXSkge1xuICAgICAgICAgICAgbWVzc2FnZXNTdHlsZXMudGV4dC5zaXplID0gK3N0eWxlc1sndGV4dC1zaXplJ107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWVzc2FnZXNTdHlsZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWc7XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHtcbiAgICBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnLFxuICAgIE1lc3NhZ2luZ09wdGlvbnMsXG4gICAgUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENvbW1lcmNlU2RrLFxuICAgIFBheVBhbE1lc3NhZ2VzU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5IGltcGxlbWVudHMgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VTZGs6IFBheVBhbENvbW1lcmNlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXlwYWxjb21tZXJjZWNyZWRpdCwgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogcHJvdmlkZWRDdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXJJZCxcbiAgICAgICAgfSA9IHBheXBhbGNvbW1lcmNlY3JlZGl0IHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IGlzQnV5Tm93RmxvdyA9ICEhYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmNvbnRhaW5lcklkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZWNyZWRpdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnV5Tm93RmxvdyAmJiAhcHJvdmlkZWRDdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZWNyZWRpdC5jdXJyZW5jeUNvZGVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBpc0J1eU5vd0Zsb3cgJiZcbiAgICAgICAgICAgIHR5cGVvZiBidXlOb3dJbml0aWFsaXplT3B0aW9ucz8uZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0LmJ1eU5vd0luaXRpYWxpemVPcHRpb25zLmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNCdXlOb3dGbG93KSB7XG4gICAgICAgICAgICAvLyBJbmZvOiBkZWZhdWx0IGNoZWNrb3V0IHNob3VsZCBub3QgYmUgbG9hZGVkIGZvciBCdXlOb3cgZmxvdyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXJlIGlzIG5vIGNoZWNrb3V0IHNlc3Npb24gYXZhaWxhYmxlIGZvciB0aGF0LlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgLy8gSW5mbzogd2UgYXJlIHVzaW5nIHByb3ZpZGVkIGN1cnJlbmN5IGNvZGUgZm9yIGJ1eSBub3cgY2FydCxcbiAgICAgICAgLy8gYmVjYXVzZSBjaGVja291dCBzZXNzaW9uIGlzIG5vdCBhdmFpbGFibGUgYmVmb3JlIGJ1eSBub3cgY2FydCBjcmVhdGlvbixcbiAgICAgICAgLy8gaGVuY2UgYXBwbGljYXRpb24gd2lsbCB0aHJvdyBhbiBlcnJvciBvbiBnZXRDYXJ0T3JUaHJvdyBtZXRob2QgY2FsbFxuICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBpc0J1eU5vd0Zsb3dcbiAgICAgICAgICAgID8gcHJvdmlkZWRDdXJyZW5jeUNvZGVcbiAgICAgICAgICAgIDogc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCwgY3VycmVuY3lDb2RlLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24oY29udGFpbmVySWQsIG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZWNyZWRpdCk7XG5cbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGJhbm5lciByZW5kZXJpbmcgaW1wbGVtZW50YXRpb24gaW4gdGhpcyBmaWxlIHdoZW4gUEFZUEFMLTU1NTcuSGlkZV9wcGNfYmFubmVyX2ltcGxlbWVudGF0aW9uIHdpbGwgYmUgcm9sbGVkIG91dCB0byAxMDAlXG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcbiAgICAgICAgY29uc3QgaXNCYW5uZXJJbXBsZW1lbnRhdGlvbkRpc2FibGVkID1cbiAgICAgICAgICAgIGZlYXR1cmVzWydQQVlQQUwtNTU1Ny5IaWRlX3BwY19iYW5uZXJfaW1wbGVtZW50YXRpb24nXSA/PyBmYWxzZTtcblxuICAgICAgICBpZiAoaXNCYW5uZXJJbXBsZW1lbnRhdGlvbkRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdpbmdDb250YWluZXIgPVxuICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVySWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWVzc2FnaW5nQ29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChjdXJyZW5jeUNvZGUgJiYgbWVzc2FnaW5nQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBjb25zdCB7IHBheXBhbEJOUExDb25maWd1cmF0aW9uID0gW10gfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICAgICAgY29uc3QgYmFubmVyQ29uZmlndXJhdGlvbiA9XG4gICAgICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gJiYgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24uZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gJ2NhcnQnKTtcblxuICAgICAgICAgICAgaWYgKCFiYW5uZXJDb25maWd1cmF0aW9uPy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGNvZGUgd2hlbiBkYXRhIGF0dHJpYnV0ZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGJhbm5lciBjb250YWluZXIgaW4gY29udGVudCBzZXJ2aWNlXG4gICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBwLXN0eWxlLWxvZ28tdHlwZScpO1xuICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcC1zdHlsZS1sb2dvLXBvc2l0aW9uJyk7XG4gICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBwLXN0eWxlLXRleHQtY29sb3InKTtcbiAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtdGV4dC1zaXplJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheXBhbFNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsTWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlck1lc3NhZ2VzKHBheXBhbFNkaywgbWVzc2FnaW5nQ29udGFpbmVySWQsIGJhbm5lckNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNlY3JlZGl0OiBQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLCBzdHlsZSwgb25Db21wbGV0ZSwgb25FbGlnaWJpbGl0eUZhaWx1cmUgfSA9XG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZWNyZWRpdDtcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkLCBpc0FwcFN3aXRjaEVuYWJsZWQgfSA9XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcigncGF5cGFsY29tbWVyY2VjcmVkaXQnKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXlOb3dGbG93Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4gdGhpcy5oYW5kbGVDbGljayhidXlOb3dJbml0aWFsaXplT3B0aW9ucyksXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBob3N0ZWRDaGVja291dENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIC4uLighaXNBcHBTd2l0Y2hFbmFibGVkICYmIHtcbiAgICAgICAgICAgICAgICBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZTogKGRhdGE6IFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNoaXBwaW5nQWRkcmVzc0NoYW5nZShkYXRhKSxcbiAgICAgICAgICAgICAgICBvblNoaXBwaW5nT3B0aW9uc0NoYW5nZTogKGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhOiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLCBhY3Rpb25zOiBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMub25Ib3N0ZWRDaGVja291dEFwcHJvdmUoZGF0YSwgYWN0aW9ucywgbWV0aG9kSWQsIG9uQ29tcGxldGUpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGZ1bmRpbmdTb3VyY2VzID0gW3BheXBhbFNkay5GVU5ESU5HLlBBWUxBVEVSLCBwYXlwYWxTZGsuRlVORElORy5DUkVESVRdO1xuICAgICAgICBsZXQgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmRpbmdTb3VyY2VzLmZvckVhY2goKGZ1bmRpbmdTb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvblJlbmRlck9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICAuLi5kZWZhdWx0Q2FsbGJhY2tzLFxuICAgICAgICAgICAgICAgICAgICAuLi4oYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMgJiYgYnV5Tm93Rmxvd0NhbGxiYWNrcyksXG4gICAgICAgICAgICAgICAgICAgIC4uLihpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCAmJiBob3N0ZWRDaGVja291dENhbGxiYWNrcyksXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvbiA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvblJlbmRlck9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc1JlbmRlcmVkU21hcnRCdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob25FbGlnaWJpbGl0eUZhaWx1cmUgJiYgdHlwZW9mIG9uRWxpZ2liaWxpdHlGYWlsdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRWxpZ2liaWxpdHlGYWlsdXJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWhhc1JlbmRlcmVkU21hcnRCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXJJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucz86IFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1eU5vd0NhcnQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnRPclRocm93KFxuICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRDaGVja291dChidXlOb3dDYXJ0LmlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25Ib3N0ZWRDaGVja291dEFwcHJvdmUoXG4gICAgICAgIGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9uQ29tcGxldGU/OiAoKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAoIWRhdGEub3JkZXJJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyRGV0YWlscyA9IGF3YWl0IGFjdGlvbnMub3JkZXIuZ2V0KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVCaWxsaW5nQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgICAgIGlmIChjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKHNoaXBwaW5nQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIoe30sIHsgcGFyYW1zOiB7IG1ldGhvZElkIH0gfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQobWV0aG9kSWQsIGRhdGEub3JkZXJJRCk7XG5cbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlICYmIHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRklYTUU6IERvIHdlIHJlYWxseSBuZWVkIHRvIHJldHVybiB0cnVlIGhlcmU/XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nQWRkcmVzc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRBZGRyZXNzKHtcbiAgICAgICAgICAgIGNpdHk6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLmNpdHksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogZGF0YS5zaGlwcGluZ0FkZHJlc3Muc3RhdGUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSB1c2UgdGhlIHNhbWUgYWRkcmVzcyB0byBmaWxsIGJpbGxpbmcgYW5kIHNoaXBwaW5nIGFkZHJlc3NlcyB0byBoYXZlIHZhbGlkIHF1b3RhIG9uIEJFIGZvciBvcmRlciB1cGRhdGluZyBwcm9jZXNzXG4gICAgICAgICAgICAvLyBvbiB0aGlzIHN0YWdlIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHZhbGlkIGN1c3RvbWVyJ3MgYWRkcmVzcyBhY2NlcHQgc2hpcHBpbmcgZGF0YVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhhZGRyZXNzKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb24gPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdygpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KFxuICAgICAgICAgICAgZGF0YS5zZWxlY3RlZFNoaXBwaW5nT3B0aW9uLmlkLFxuICAgICAgICApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyTWVzc2FnZXMoXG4gICAgICAgIHBheXBhbE1lc3NhZ2VzU2RrOiBQYXlQYWxNZXNzYWdlc1NkayxcbiAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgYmFubmVyQ29uZmlndXJhdGlvbjogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCBjaGVja291dCA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENoZWNrb3V0T3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbE1lc3NhZ2VzT3B0aW9uczogTWVzc2FnaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFtb3VudDogY2hlY2tvdXQub3V0c3RhbmRpbmdCYWxhbmNlLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAnY2FydCcsXG4gICAgICAgICAgICBzdHlsZTogZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyhiYW5uZXJDb25maWd1cmF0aW9uKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxNZXNzYWdlcyA9IHBheXBhbE1lc3NhZ2VzU2RrLk1lc3NhZ2VzKHBheXBhbE1lc3NhZ2VzT3B0aW9ucyk7XG5cbiAgICAgICAgcGF5cGFsTWVzc2FnZXMucmVuZGVyKGAjJHttZXNzYWdpbmdDb250YWluZXJJZH1gKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBjcmVhdGVQYXlQYWxDb21tZXJjZVNkayB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1idXR0b24tc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZVNkaygpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNlY3JlZGl0JyB9LFxuXSk7XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnMsXG4gICAgUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBTdHlsZUJ1dHRvbkNvbG9yLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvbkluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlVmVubW9CdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdmVubW8tYnV0dG9uLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlVmVubW9CdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNldmVubW8sIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBidXlOb3dJbml0aWFsaXplT3B0aW9ucywgY3VycmVuY3lDb2RlOiBwcm92aWRlZEN1cnJlbmN5Q29kZSB9ID1cbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNldmVubW8gfHwge307XG5cbiAgICAgICAgY29uc3QgaXNCdXlOb3dGbG93ID0gISFidXlOb3dJbml0aWFsaXplT3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNldmVubW8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZXZlbm1vXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnV5Tm93RmxvdyAmJiAhcHJvdmlkZWRDdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZXZlbm1vLmN1cnJlbmN5Q29kZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzQnV5Tm93RmxvdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2V2ZW5tby5idXlOb3dJbml0aWFsaXplT3B0aW9ucy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHlcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQnV5Tm93Rmxvdykge1xuICAgICAgICAgICAgLy8gSW5mbzogZGVmYXVsdCBjaGVja291dCBzaG91bGQgbm90IGJlIGxvYWRlZCBmb3IgQnV5Tm93IGZsb3csXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGVyZSBpcyBubyBjaGVja291dCBzZXNzaW9uIGF2YWlsYWJsZSBmb3IgdGhhdC5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmZvOiB3ZSBhcmUgdXNpbmcgcHJvdmlkZWQgY3VycmVuY3kgY29kZSBmb3IgYnV5IG5vdyBjYXJ0LFxuICAgICAgICAvLyBiZWNhdXNlIGNoZWNrb3V0IHNlc3Npb24gaXMgbm90IGF2YWlsYWJsZSBiZWZvcmUgYnV5IG5vdyBjYXJ0IGNyZWF0aW9uLFxuICAgICAgICAvLyBoZW5jZSBhcHBsaWNhdGlvbiB3aWxsIHRocm93IGFuIGVycm9yIG9uIGdldENhcnRPclRocm93IG1ldGhvZCBjYWxsXG4gICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGlzQnV5Tm93Rmxvd1xuICAgICAgICAgICAgPyBwcm92aWRlZEN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgOiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkLCBjdXJyZW5jeUNvZGUsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihjb250YWluZXJJZCwgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNldmVubW8pO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxjb21tZXJjZXZlbm1vOiBQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsIHN0eWxlLCBvbkVsaWdpYmlsaXR5RmFpbHVyZSB9ID0gcGF5cGFsY29tbWVyY2V2ZW5tbztcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZSA9IHBheXBhbFNkay5GVU5ESU5HLlZFTk1PO1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKCdwYXlwYWxjb21tZXJjZXZlbm1vJyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6ICh7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnRva2VuaXplUGF5bWVudChtZXRob2RJZCwgb3JkZXJJRCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYnV5Tm93Rmxvd0NhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpLFxuICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5nZXRWYWxpZFZlbm1vQnV0dG9uU3R5bGVzKHN0eWxlKSxcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDYWxsYmFja3MsXG4gICAgICAgICAgICAuLi4oYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMgJiYgYnV5Tm93Rmxvd0NhbGxiYWNrcyksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uUmVuZGVyID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHBheXBhbEJ1dHRvblJlbmRlci5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIHBheXBhbEJ1dHRvblJlbmRlci5yZW5kZXIoYCMke2NvbnRhaW5lcklkfWApO1xuICAgICAgICB9IGVsc2UgaWYgKG9uRWxpZ2liaWxpdHlGYWlsdXJlICYmIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXJJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFZhbGlkVmVubW9CdXR0b25TdHlsZXMoc3R5bGU6IFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyB8IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB2YWxpZEJ1dHRvblN0eWxlID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKTtcblxuICAgICAgICBpZiAodmFsaWRCdXR0b25TdHlsZS5jb2xvciA9PT0gU3R5bGVCdXR0b25Db2xvci5nb2xkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnZhbGlkQnV0dG9uU3R5bGUsXG4gICAgICAgICAgICAgICAgY29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsaWRCdXR0b25TdHlsZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucz86IFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1eU5vd0NhcnQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnRPclRocm93KFxuICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRDaGVja291dChidXlOb3dDYXJ0LmlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdmVubW8tYnV0dG9uLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvblN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvblN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNldmVubW8nIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvbk9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1idXR0b24taW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneVxuICAgIGltcGxlbWVudHMgQ2hlY2tvdXRCdXR0b25TdHJhdGVneVxue1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMgJlxuICAgICAgICAgICAgV2l0aFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMsIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYXBtLFxuICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGU6IHByb3ZpZGVkQ3VycmVuY3lDb2RlLFxuICAgICAgICB9ID0gcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMgfHwge307XG5cbiAgICAgICAgY29uc3QgaXNCdXlOb3dGbG93ID0gISFidXlOb3dJbml0aWFsaXplT3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHNcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFwbSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzLmFwbVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0J1eU5vd0Zsb3cgJiYgIXByb3ZpZGVkQ3VycmVuY3lDb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMuY3VycmVuY3lDb2RlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNCdXlOb3dGbG93ICYmXG4gICAgICAgICAgICB0eXBlb2YgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcy5idXlOb3dJbml0aWFsaXplT3B0aW9ucy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHlcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQnV5Tm93Rmxvdykge1xuICAgICAgICAgICAgLy8gSW5mbzogZGVmYXVsdCBjaGVja291dCBzaG91bGQgbm90IGJlIGxvYWRlZCBmb3IgQnV5Tm93IGZsb3csXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGVyZSBpcyBubyBjaGVja291dCBzZXNzaW9uIGF2YWlsYWJsZSBmb3IgdGhhdC5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmZvOiB3ZSBhcmUgdXNpbmcgcHJvdmlkZWQgY3VycmVuY3kgY29kZSBmb3IgYnV5IG5vdyBjYXJ0LFxuICAgICAgICAvLyBiZWNhdXNlIGNoZWNrb3V0IHNlc3Npb24gaXMgbm90IGF2YWlsYWJsZSBiZWZvcmUgYnV5IG5vdyBjYXJ0IGNyZWF0aW9uLFxuICAgICAgICAvLyBoZW5jZSBhcHBsaWNhdGlvbiB3aWxsIHRocm93IGFuIGVycm9yIG9uIGdldENhcnRPclRocm93IG1ldGhvZCBjYWxsXG4gICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGlzQnV5Tm93Rmxvd1xuICAgICAgICAgICAgPyBwcm92aWRlZEN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgOiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkLCBjdXJyZW5jeUNvZGUsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihjb250YWluZXJJZCwgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgY29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHM6IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBhcG0sIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLCBzdHlsZSwgb25FbGlnaWJpbGl0eUZhaWx1cmUgfSA9XG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcztcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGVGdW5kaW5nU291cmNlID0gT2JqZWN0LnZhbHVlcyhwYXlwYWxTZGsuRlVORElORykuaW5jbHVkZXMoYXBtKTtcblxuICAgICAgICBpZiAoIWlzQXZhaWxhYmxlRnVuZGluZ1NvdXJjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBQYXlQYWwgYnV0dG9uIGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzLmFwbVwiIGFyZ3VtZW50IGlzIG5vdCB2YWxpZCBmdW5kaW5nIHNvdXJjZS5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKFxuICAgICAgICAgICAgICAgICAgICAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZCcsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXlOb3dGbG93Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4gdGhpcy5oYW5kbGVDbGljayhidXlOb3dJbml0aWFsaXplT3B0aW9ucyksXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXR0b25SZW5kZXJPcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogYXBtLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZSksXG4gICAgICAgICAgICAuLi5kZWZhdWx0Q2FsbGJhY2tzLFxuICAgICAgICAgICAgLi4uKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zICYmIGJ1eU5vd0Zsb3dDYWxsYmFja3MpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvblJlbmRlciA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvblJlbmRlck9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICBwYXlwYWxCdXR0b25SZW5kZXIucmVuZGVyKGAjJHtjb250YWluZXJJZH1gKTtcbiAgICAgICAgfSBlbHNlIGlmIChvbkVsaWdpYmlsaXR5RmFpbHVyZSAmJiB0eXBlb2Ygb25FbGlnaWJpbGl0eUZhaWx1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uRWxpZ2liaWxpdHlGYWlsdXJlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVySWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDbGljayhcbiAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/OiBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBidXlOb3dDYXJ0ID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVCdXlOb3dDYXJ0T3JUaHJvdyhcbiAgICAgICAgICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkQ2hlY2tvdXQoYnV5Tm93Q2FydC5pZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzLWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uU3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcyxcbiAgICBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzLFxufSBmcm9tICcuL2xvYWRpbmctaW5kaWNhdG9yLXN0eWxlcyc7XG5cbmNvbnN0IERFRkFVTFRfU1RZTEVTOiBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzID0ge1xuICAgIHNpemU6IDcwLFxuICAgIGNvbG9yOiAnI2Q5ZDlkOScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT05UQUlORVJfU1RZTEVTID0ge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJ3JnYmEoMCwgMCwgMCwgMC40KScsXG4gICAgJ3otaW5kZXgnOiAnMTAwMCcsXG59O1xuXG5jb25zdCBST1RBVElPTl9BTklNQVRJT04gPSAnZW1iZWRkZWQtY2hlY2tvdXQtbG9hZGluZy1pbmRpY2F0b3Itcm90YXRpb24nO1xuXG5pbnRlcmZhY2UgTG9hZGluZ0luZGljYXRvck9wdGlvbnMge1xuICAgIHN0eWxlcz86IExvYWRpbmdJbmRpY2F0b3JTdHlsZXM7XG4gICAgY29udGFpbmVyU3R5bGVzPzogTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ0luZGljYXRvciB7XG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgaW5kaWNhdG9yOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHN0eWxlczogTG9hZGluZ0luZGljYXRvclN0eWxlcztcbiAgICBwcml2YXRlIGNvbnRhaW5lclN0eWxlczogTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBMb2FkaW5nSW5kaWNhdG9yT3B0aW9ucykge1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHsgLi4uREVGQVVMVF9TVFlMRVMsIC4uLihvcHRpb25zICYmIG9wdGlvbnMuc3R5bGVzKSB9O1xuICAgICAgICB0aGlzLmNvbnRhaW5lclN0eWxlcyA9IHsgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5jb250YWluZXJTdHlsZXMpIH07XG5cbiAgICAgICAgdGhpcy5kZWZpbmVBbmltYXRpb24oKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuYnVpbGRDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3IgPSB0aGlzLmJ1aWxkSW5kaWNhdG9yKCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5pbmRpY2F0b3IpO1xuICAgIH1cblxuICAgIHNob3cocGFyZW50SWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHBhcmVudElkKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnRJZCk7XG5cbiAgICAgICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGF0dGFjaCB0aGUgbG9hZGluZyBpbmRpY2F0b3IgYmVjYXVzZSB0aGUgcGFyZW50IElEIGlzIG5vdCB2YWxpZC4nLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIH1cblxuICAgIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYW5zaXRpb25FbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgaGFuZGxlVHJhbnNpdGlvbkVuZCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYm90dG9tID0gJzAnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUucmlnaHQgPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAyNTBtcyBlYXNlLW91dCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXG4gICAgICAgIHRoaXMuc2V0U3R5bGVBdHRyaWJ1dGUoY29udGFpbmVyLCB0aGlzLmNvbnRhaW5lclN0eWxlcyk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkSW5kaWNhdG9yKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUud2lkdGggPSBgJHt0aGlzLnN0eWxlcy5zaXplfXB4YDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuc3R5bGVzLnNpemV9cHhgO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuYm9yZGVyUmFkaXVzID0gYCR7dGhpcy5zdHlsZXMuc2l6ZX1weGA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5ib3JkZXIgPSAnc29saWQgMXB4JztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlckNvbG9yID0gYCR7dGhpcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfSAke3RoaXMuc3R5bGVzLmJhY2tncm91bmRDb2xvcn0gJHt0aGlzLnN0eWxlcy5jb2xvcn0gJHt0aGlzLnN0eWxlcy5jb2xvcn1gO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUubWFyZ2luID0gJzAgYXV0byc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUucmlnaHQgPSAnMCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS50b3AgPSAnNTAlJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC01MCUpIHJvdGF0ZSgwZGVnKSc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5hbmltYXRpb24gPSBgJHtST1RBVElPTl9BTklNQVRJT059IDUwMG1zIGluZmluaXRlIGN1YmljLWJlemllcigwLjY5LCAwLjMxLCAwLjU2LCAwLjgzKWA7XG5cbiAgICAgICAgcmV0dXJuIGluZGljYXRvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0eWxlQXR0cmlidXRlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhdHRyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShrLCBhdHRyc1trXSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVmaW5lQW5pbWF0aW9uKCk6IHZvaWQge1xuICAgICAgICAvLyBJbiBvcmRlciB0byBkZWZpbmUgQ1NTIGFuaW1hdGlvbiwgd2UgbmVlZCB0byBpbnNlcnQgYSBzdHlsZXNoZWV0IGludG8gdGhlIGhvc3QgZnJhbWUuXG4gICAgICAgIC8vIFdlIG9ubHkgaGF2ZSB0byBkbyBpdCBvbmNlLlxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUk9UQVRJT05fQU5JTUFUSU9OKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgIHN0eWxlLmlkID0gUk9UQVRJT05fQU5JTUFUSU9OO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICAgIGRvY3VtZW50LmhlYWQ/LmFwcGVuZENoaWxkKHN0eWxlKTtcblxuICAgICAgICBpZiAoc3R5bGUuc2hlZXQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHByb3ZpZGUgdGhlIDJuZCBwYXJhbWV0ZXIgZm9yIElFMTEsIGV2ZW4gdGhvdWdoIGl0IGlzXG4gICAgICAgICAgICAvLyAwIGJ5IGRlZmF1bHQgZm9yIGFsbCBvdGhlciBicm93c2Vycy5cbiAgICAgICAgICAgIHN0eWxlLnNoZWV0Lmluc2VydFJ1bGUoXG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIEBrZXlmcmFtZXMgJHtST1RBVElPTl9BTklNQVRJT059IHtcbiAgICAgICAgICAgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDBkZWcpOyB9XG4gICAgICAgICAgICAgICAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDM2MGRlZyk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyA9IHtcbiAgICAnYmFja2dyb3VuZC1jb2xvcic6ICdyZ2JhKDAsIDAsIDAsIDAuNCknLFxuICAgICd6LWluZGV4JzogJzEwMDAnLFxufTtcbiIsImltcG9ydCBJbnZhbGlkQXJndW1lbnRFcnJvciBmcm9tICcuL2ludmFsaWQtYXJndW1lbnQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIHdlIGFyZSB1bmFibGUgdG8gc3VibWl0IGEgcGF5bWVudCBiZWNhdXNlXG4gKiB0aGUgY2FsbGVyIGhhcyBub3QgcHJvdmlkZWQgYWxsIHRoZSByZXF1aXJlZCBmaWVsZHMsIGkuZS46IGlmIGFuIGFyZ3VtZW50IGlzXG4gKiBtaXNzaW5nIG9yIGl0IGlzIG5vdCB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IgZXh0ZW5kcyBJbnZhbGlkQXJndW1lbnRFcnJvciB7XG4gICAgY29uc3RydWN0b3IoaW52YWxpZEZpZWxkcz86IHN0cmluZ1tdKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gJ1VuYWJsZSB0byBzdWJtaXQgcGF5bWVudCBmb3IgdGhlIG9yZGVyIGJlY2F1c2UgdGhlIHBheWxvYWQgaXMgaW52YWxpZC4nO1xuXG4gICAgICAgIGlmIChpbnZhbGlkRmllbGRzKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYCR7bWVzc2FnZX0gTWFrZSBzdXJlIHRoZSBmb2xsb3dpbmcgZmllbGRzIGFyZSBwcm92aWRlZCBjb3JyZWN0bHk6ICR7aW52YWxpZEZpZWxkcy5qb2luKFxuICAgICAgICAgICAgICAgICcsICcsXG4gICAgICAgICAgICApfS5gO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcic7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQgUmVxdWVzdEVycm9yIGZyb20gJy4vcmVxdWVzdC1lcnJvcic7XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiB3ZSBhcmUgdW5hYmxlIHRvIHN1Y2Nlc3NmdWxseSBzdWJtaXQgYSBzZXJ2ZXIgcmVxdWVzdFxuICogdXNpbmcgYSBwYXltZW50IG1ldGhvZCBiZWNhdXNlIHRoZSBtZXRob2QgaGFzIGludmFsaWQgY29uZmlndXJhdGlvbiBvciBpcyBpblxuICogYW4gaW52YWxpZCBzdGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcjxUID0gYW55PiBleHRlbmRzIFJlcXVlc3RFcnJvcjxUPiB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBSZXNwb25zZTxUPikge1xuICAgICAgICBzdXBlcihyZXNwb25zZSwge1xuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZXJlIGlzIGEgcHJvYmxlbSBwcm9jZXNzaW5nIHlvdXIgcGF5bWVudC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X21ldGhvZF9pbnZhbGlkJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB0cnlpbmcgdG8gbWFrZSBhbiBvcmRlciBmaW5hbGl6YXRpb24gcmVxdWVzdCBmb3IgYVxuICogcGF5bWVudCBtZXRob2QgdGhhdCBkb2VzIG5vdCByZXF1aXJlIHN1Y2ggcHJvY2VkdXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1RoZSBjdXJyZW50IG9yZGVyIGRvZXMgbm90IG5lZWQgdG8gYmUgZmluYWxpemVkIGF0IHRoaXMgc3RhZ2UuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ09yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdvcmRlcl9maW5hbGl6YXRpb25fbm90X3JlcXVpcmVkJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBIb3N0ZWRJbnN0cnVtZW50IH0gZnJvbSAnLi9wYXltZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShcbiAgICBpbnN0cnVtZW50OiB1bmtub3duLFxuKTogaW5zdHJ1bWVudCBpcyBIb3N0ZWRJbnN0cnVtZW50IHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgaW5zdHJ1bWVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5zdHJ1bWVudCAhPT0gbnVsbCAmJlxuICAgICAgICAodHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNhdmVJbnN0cnVtZW50ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgdHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNhdmVJbnN0cnVtZW50ID09PSAnYm9vbGVhbicpICYmXG4gICAgICAgICh0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiAoaW5zdHJ1bWVudCBhcyBIb3N0ZWRJbnN0cnVtZW50KS5zaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID09PSAnYm9vbGVhbicpXG4gICAgKTtcbn1cbiIsImltcG9ydCB7XG4gICAgRm9ybWF0dGVkUGF5bG9hZCxcbiAgICBGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJy4vcGF5bWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGluc3RydW1lbnQgYXMgVmF1bHRlZEluc3RydW1lbnQpLmluc3RydW1lbnRJZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RlZFZhdWx0ZWRJbnN0cnVtZW50KFxuICAgIGluc3RydW1lbnQ6IFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbik6IGluc3RydW1lbnQgaXMgSG9zdGVkVmF1bHRlZEluc3RydW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICAgIEJvb2xlYW4oKGluc3RydW1lbnQgYXMgSG9zdGVkVmF1bHRlZEluc3RydW1lbnQpLmluc3RydW1lbnRJZCkgJiZcbiAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0cnVtZW50LCAnY2NOdW1iZXInKSAmJlxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RydW1lbnQsICdjY0N2dicpXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBGb3JtYXR0ZWRQYXlsb2FkPEZvcm1hdHRlZFZhdWx0ZWRJbnN0cnVtZW50PiB7XG4gICAgY29uc3QgZm9ybWF0dGVkSW5zdHJ1bWVudCA9IChpbnN0cnVtZW50IGFzIEZvcm1hdHRlZFBheWxvYWQ8Rm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQ+KVxuICAgICAgICAuZm9ybWF0dGVkUGF5bG9hZDtcblxuICAgIGlmICghZm9ybWF0dGVkSW5zdHJ1bWVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuID09PSAnc3RyaW5nJyB8fFxuICAgICAgICBCb29sZWFuKGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuICYmIGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuLnRva2VuKVxuICAgICk7XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIEJhc2VJbnN0cnVtZW50IHtcbiAgICBiaWdwYXlUb2tlbjogc3RyaW5nO1xuICAgIGRlZmF1bHRJbnN0cnVtZW50OiBib29sZWFuO1xuICAgIHByb3ZpZGVyOiBzdHJpbmc7XG4gICAgdHJ1c3RlZFNoaXBwaW5nQWRkcmVzczogYm9vbGVhbjtcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jhc2VJbnN0cnVtZW50KGluc3RydW1lbnQ6IHVua25vd24pOiBpbnN0cnVtZW50IGlzIEJhc2VJbnN0cnVtZW50IHtcbiAgICBpZiAodHlwZW9mIGluc3RydW1lbnQgIT09ICdvYmplY3QnIHx8IGluc3RydW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgICdiaWdwYXlUb2tlbicgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAnZGVmYXVsdEluc3RydW1lbnQnIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ3Byb3ZpZGVyJyBpbiBpbnN0cnVtZW50ICYmXG4gICAgICAgICd0cnVzdGVkU2hpcHBpbmdBZGRyZXNzJyBpbiBpbnN0cnVtZW50ICYmXG4gICAgICAgICdtZXRob2QnIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ3R5cGUnIGluIGluc3RydW1lbnRcbiAgICApO1xufVxuIiwiaW1wb3J0IHtcbiAgICBIb3N0ZWRJbnN0cnVtZW50LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcixcbiAgICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxuICAgIFZhdWx0ZWRJbnN0cnVtZW50LFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyxcbiAgICBpc1BheXBhbENvbW1lcmNlUHJvdmlkZXJFcnJvcixcbiAgICBpc1JlZGlyZWN0QWN0aW9uRXJyb3IsXG4gICAgTWVzc2FnaW5nT3B0aW9ucyxcbiAgICBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgUGF5UGFsTWVzc2FnZXNTZGssXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcbmltcG9ydCB7IGlzQmFzZUluc3RydW1lbnQgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3V0aWxpdHknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXBheW1lbnQtaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VQYXltZW50U3RyYXRlZ3kgaW1wbGVtZW50cyBQYXltZW50U3RyYXRlZ3kge1xuICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvckNvbnRhaW5lcj86IHN0cmluZztcbiAgICBwcml2YXRlIG9yZGVySWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXlwYWxCdXR0b24/OiBQYXlQYWxDb21tZXJjZUJ1dHRvbnM7XG4gICAgcHJpdmF0ZSBwYXlwYWxjb21tZXJjZT86IFBheVBhbENvbW1lcmNlUGF5bWVudEluaXRpYWxpemVPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VTZGs6IFBheVBhbENvbW1lcmNlU2RrLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9ucz86IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdGhpcy5wYXlwYWxjb21tZXJjZSA9IHBheXBhbGNvbW1lcmNlO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBiYW5uZXJDb250YWluZXJJZCB9ID0gcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgb3JkZXJJZCxcbiAgICAgICAgICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uID0gW10sXG4gICAgICAgICAgICBpc1BheVBhbENyZWRpdEF2YWlsYWJsZSxcbiAgICAgICAgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGlmIChiYW5uZXJDb250YWluZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJhbm5lckNvbnRhaW5lcklkKSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGNyZWF0ZSBiYW5uZXIgd2l0aG91dCB2YWxpZCBiYW5uZXIgY29udGFpbmVyIElELicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBiYW5uZXJDb25maWd1cmF0aW9uID0gcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24/LmZpbmQoXG4gICAgICAgICAgICAgICAgKHsgaWQgfSkgPT4gaWQgPT09ICdjaGVja291dCcsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoaXNQYXlQYWxDcmVkaXRBdmFpbGFibGUgfHwgIWJhbm5lckNvbmZpZ3VyYXRpb24/LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsTWVzc2FnZXMgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlU2RrLmdldFBheVBhbE1lc3NhZ2VzKFxuICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCFwYXlwYWxNZXNzYWdlcyB8fCB0eXBlb2YgcGF5cGFsTWVzc2FnZXM/Lk1lc3NhZ2VzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgJ1tCQyBQYXlQYWxDb21tZXJjZSBQYXlMYXRlcl06IGJhbm5lciBjb3VsZCBub3QgYmUgcmVuZGVyZWQsIGR1ZSB0byBpc3N1ZXMgd2l0aCBsb2FkaW5nIFBheVBhbCBTREsnLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlck1lc3NhZ2VzKHBheXBhbE1lc3NhZ2VzLCBiYW5uZXJDb250YWluZXJJZCwgYmFubmVyQ29uZmlndXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmZvOlxuICAgICAgICAvLyBUaGUgUGF5UGFsIGJ1dHRvbiBhbmQgZmllbGRzIHNob3VsZCBub3QgYmUgcmVuZGVyZWQgd2hlbiBzaG9wcGVyIHdhcyByZWRpcmVjdGVkIHRvIENoZWNrb3V0IHBhZ2VcbiAgICAgICAgLy8gYWZ0ZXIgdXNpbmcgc21hcnQgcGF5bWVudCBidXR0b24gb24gUERQIG9yIENhcnQgcGFnZS4gSW4gdGhpcyBjYXNlIGJhY2tlbmQgcmV0dXJucyBvcmRlciBpZCBpZlxuICAgICAgICAvLyBpdCBpcyBhdmFpbGFibGUgaW4gY2hlY2tvdXQgc2Vzc2lvbi4gVGhlcmVmb3JlLCBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHJlbmRlciBQYXlQYWwgYnV0dG9uLlxuICAgICAgICBpZiAob3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/Lm9yZGVySWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IGNvbnRhaW5lcj8uc3BsaXQoJyMnKVsxXTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmIChwYXlwYWxjb21tZXJjZS5vbkluaXQgJiYgdHlwZW9mIHBheXBhbGNvbW1lcmNlLm9uSW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2Uub25Jbml0KCgpID0+IHRoaXMucmVuZGVyQnV0dG9uKG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2Uuc2hvdWxkUmVuZGVyUGF5UGFsQnV0dG9uT25Jbml0aWFsaXphdGlvbiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZS5zaG91bGRSZW5kZXJQYXlQYWxCdXR0b25PbkluaXRpYWxpemF0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuICAgICAgICBjb25zdCB7IG9uRXJyb3IgfSA9IHRoaXMucGF5cGFsY29tbWVyY2UgfHwge307XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheW1lbnREYXRhIH0gPSBwYXltZW50O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUGF5UGFsVmF1bHRlZEluc3RydW1lbnRQYXltZW50RGF0YShwYXltZW50RGF0YSkgJiYgIXRoaXMub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gYXdhaXQgdGhpcy5jcmVhdGVPcmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9yZGVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXltZW50UGF5bG9hZCA9IHRoaXMuaXNQYXlQYWxWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnREYXRhKHBheW1lbnREYXRhKVxuICAgICAgICAgICAgPyB0aGlzLnByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCB0aGlzLm9yZGVySWQsIHBheW1lbnREYXRhKVxuICAgICAgICAgICAgOiB0aGlzLnByZXBhcmVQYXltZW50UGF5bG9hZChtZXRob2RJZCwgdGhpcy5vcmRlcklkLCBwYXltZW50RGF0YSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChwYXltZW50UGF5bG9hZCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICBpZiAoaXNSZWRpcmVjdEFjdGlvbkVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VXJsID0gZXJyb3IuYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZD8uZGF0YT8ucmVkaXJlY3RfdXJsO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpID0+IHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0VXJsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvdmlkZXJFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsocGF5bWVudC5tZXRob2RJZCk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXlwYWxjb21tZXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24/LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihwYXltZW50Lm1ldGhvZElkLCB0aGlzLnBheXBhbGNvbW1lcmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IobmV3IEVycm9yKCdJTlNUUlVNRU5UX0RFQ0xJTkVEJyksIG9uRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIG9uRXJyb3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbj8uY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwYXJlVmF1bHRlZEluc3RydW1lbnRQYXltZW50UGF5bG9hZChcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsT3JkZXJJZDogc3RyaW5nLFxuICAgICAgICBwYXltZW50RGF0YTogVmF1bHRlZEluc3RydW1lbnQgJiBIb3N0ZWRJbnN0cnVtZW50LFxuICAgICk6IFBheW1lbnQge1xuICAgICAgICBjb25zdCB7IGluc3RydW1lbnRJZCwgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCB9ID0gcGF5bWVudERhdGE7XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkQ29uZmlybUluc3RydW1lbnQgPSAhdGhpcy5pc1RydXN0ZWRWYXVsdGluZ0Zsb3cocGF5bWVudERhdGEpO1xuXG4gICAgICAgIGlmIChzaG91bGRDb25maXJtSW5zdHJ1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwYXltZW50RGF0YToge1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudDogc2hvdWxkQ29uZmlybUluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHBheXBhbE9yZGVySWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9pZDogcGF5cGFsT3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmlncGF5X3Rva2VuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogaW5zdHJ1bWVudElkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJlcGFyZVBheW1lbnRQYXlsb2FkKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxPcmRlcklkOiBzdHJpbmcsXG4gICAgICAgIHBheW1lbnREYXRhOiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keVsncGF5bWVudERhdGEnXSxcbiAgICApOiBQYXltZW50IHtcbiAgICAgICAgY29uc3QgeyBzaG91bGRTYXZlSW5zdHJ1bWVudCA9IGZhbHNlLCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID0gZmFsc2UgfSA9XG4gICAgICAgICAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlKHBheW1lbnREYXRhKSA/IHBheW1lbnREYXRhIDoge307XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcGF5cGFsX2FjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2lkOiBwYXlwYWxPcmRlcklkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnV0dG9uIG1ldGhvZHMvY2FsbGJhY2tzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxjb21tZXJjZTogUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yLCBvblJlbmRlckJ1dHRvbiwgb25WYWxpZGF0ZSwgc3VibWl0Rm9ybSB9ID0gcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnV0dG9uT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLih0aGlzLmlzUGF5cGFsQ29tbWVyY2VBcHBTd2l0Y2hFbmFibGVkKG1ldGhvZElkKSAmJiB7XG4gICAgICAgICAgICAgICAgYXBwU3dpdGNoV2hlbkF2YWlsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkZVTkRJTkcuUEFZUEFMLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShcbiAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+IHRoaXMuY3JlYXRlT3JkZXIoKSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IChfLCBhY3Rpb25zKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGFjdGlvbnMsIG9uVmFsaWRhdGUpLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoZGF0YSkgPT4gdGhpcy5oYW5kbGVBcHByb3ZlKGRhdGEsIHN1Ym1pdEZvcm0pLFxuICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBvbkVycm9yKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvblJlbmRlckJ1dHRvbiAmJiB0eXBlb2Ygb25SZW5kZXJCdXR0b24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXlwYWxCdXR0b24uaGFzUmV0dXJuZWQ/LigpICYmIHRoaXMuaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQpKSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbi5yZXN1bWU/LigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24ucmVuZGVyKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBhY3Rpb25zOiBDbGlja0NhbGxiYWNrQWN0aW9ucyxcbiAgICAgICAgb25WYWxpZGF0ZTogUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uVmFsaWRhdGUnXSxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyByZXNvbHZlLCByZWplY3QgfSA9IGFjdGlvbnM7XG5cbiAgICAgICAgY29uc3Qgb25WYWxpZGF0aW9uUGFzc2VkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBvblZhbGlkYXRlPy4ob25WYWxpZGF0aW9uUGFzc2VkLCByZWplY3QpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQXBwcm92ZShcbiAgICAgICAgeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIHN1Ym1pdEZvcm06IFBheVBhbENvbW1lcmNlUGF5bWVudEluaXRpYWxpemVPcHRpb25zWydzdWJtaXRGb3JtJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySUQ7XG5cbiAgICAgICAgc3VibWl0Rm9ybT8uKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihcbiAgICAgICAgZXJyb3I6IHVua25vd24sXG4gICAgICAgIG9uRXJyb3I6IFBheVBhbENvbW1lcmNlUGF5bWVudEluaXRpYWxpemVPcHRpb25zWydvbkVycm9yJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3IgJiYgdHlwZW9mIG9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVPcmRlcigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBmaWVsZHNWYWx1ZXMgPSB0aGlzLmdldEZpZWxkc1ZhbHVlcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKCdwYXlwYWxjb21tZXJjZWNoZWNrb3V0Jywge1xuICAgICAgICAgICAgc2hvdWxkU2F2ZUluc3RydW1lbnQ6IGZpZWxkc1ZhbHVlcz8uc2hvdWxkU2F2ZUluc3RydW1lbnQgfHwgZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVmF1bHRpbmcgZmxvdyBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgZ2V0RmllbGRzVmFsdWVzKCk6IEhvc3RlZEluc3RydW1lbnQgfCB1bmRlZmluZWQge1xuICAgICAgICBjb25zdCB7IGdldEZpZWxkc1ZhbHVlcyB9ID0gdGhpcy5wYXlwYWxjb21tZXJjZSB8fCB7fTtcblxuICAgICAgICByZXR1cm4gdHlwZW9mIGdldEZpZWxkc1ZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyA/IGdldEZpZWxkc1ZhbHVlcygpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNUcnVzdGVkVmF1bHRpbmdGbG93KHBheW1lbnREYXRhPzogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChwYXltZW50RGF0YSAmJiBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICAgICAgY29uc3QgaW5zdHJ1bWVudHMgPSBzdGF0ZS5nZXRJbnN0cnVtZW50cygpO1xuICAgICAgICAgICAgY29uc3QgZmluZEluc3RydW1lbnQgPSBpbnN0cnVtZW50cz8uZmluZChcbiAgICAgICAgICAgICAgICAoaW5zdHJ1bWVudCkgPT5cbiAgICAgICAgICAgICAgICAgICAgaXNCYXNlSW5zdHJ1bWVudChpbnN0cnVtZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50LmJpZ3BheVRva2VuID09PSBwYXltZW50RGF0YS5pbnN0cnVtZW50SWQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgdHJ1c3RlZFNoaXBwaW5nQWRkcmVzcyA9IGlzQmFzZUluc3RydW1lbnQoZmluZEluc3RydW1lbnQpXG4gICAgICAgICAgICAgICAgPyBmaW5kSW5zdHJ1bWVudC50cnVzdGVkU2hpcHBpbmdBZGRyZXNzXG4gICAgICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICAgICAgcmV0dXJuICEhdHJ1c3RlZFNoaXBwaW5nQWRkcmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIExvYWRpbmcgSW5kaWNhdG9yIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGlzTG9hZGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoaXNMb2FkaW5nICYmIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLnNob3codGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEd1YXJkc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1BheVBhbFZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudERhdGEoXG4gICAgICAgIHBheW1lbnREYXRhPzogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuICAgICk6IHBheW1lbnREYXRhIGlzIFZhdWx0ZWRJbnN0cnVtZW50ICYgSG9zdGVkSW5zdHJ1bWVudCB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAhIXBheW1lbnREYXRhICYmIGlzVmF1bHRlZEluc3RydW1lbnQocGF5bWVudERhdGEpICYmIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZW5kZXIgUGF5IExhdGVyIE1lc3NhZ2VzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgcmVuZGVyTWVzc2FnZXMoXG4gICAgICAgIHBheXBhbE1lc3NhZ2VzOiBQYXlQYWxNZXNzYWdlc1NkayxcbiAgICAgICAgYmFubmVyQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgYmFubmVyQ29uZmlndXJhdGlvbjogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCBjaGVja291dCA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENoZWNrb3V0T3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbE1lc3NhZ2VzT3B0aW9uczogTWVzc2FnaW5nT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFtb3VudDogY2hlY2tvdXQub3V0c3RhbmRpbmdCYWxhbmNlLFxuICAgICAgICAgICAgcGxhY2VtZW50OiAncGF5bWVudCcsXG4gICAgICAgICAgICBzdHlsZTogZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyhiYW5uZXJDb25maWd1cmF0aW9uKSxcbiAgICAgICAgfTtcblxuICAgICAgICBwYXlwYWxNZXNzYWdlcy5NZXNzYWdlcyhwYXlwYWxNZXNzYWdlc09wdGlvbnMpLnJlbmRlcihgIyR7YmFubmVyQ29udGFpbmVySWR9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBFcnJvciBoYW5kbGluZ1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1Byb3ZpZGVyRXJyb3IoZXJyb3I6IHVua25vd24pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGlzUGF5cGFsQ29tbWVyY2VQcm92aWRlckVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgY29uc3QgcGF5cGFsUHJvdmlkZXJFcnJvciA9IGVycm9yPy5lcnJvcnM/LmZpbHRlcigoZSkgPT4gZS5wcm92aWRlcl9lcnJvcikgfHwgW107XG5cbiAgICAgICAgICAgIHJldHVybiBwYXlwYWxQcm92aWRlckVycm9yWzBdPy5wcm92aWRlcl9lcnJvcj8uY29kZSA9PT0gJ0lOU1RSVU1FTlRfREVDTElORUQnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5UGFsIEFwcFN3aXRjaCBlbmFibGluZyBoYW5kbGluZ1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICByZXR1cm4gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmlzQXBwU3dpdGNoRW5hYmxlZCB8fCBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc1JlcXVlc3RFcnJvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgeyBQcm92aWRlckVycm9yIH0gZnJvbSAnLi9pcy1wYXlwYWwtY29tbWVyY2UtcHJvdmlkZXItZXJyb3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlZGlyZWN0QWN0aW9uRXJyb3IgZXh0ZW5kcyBQcm92aWRlckVycm9yIHtcbiAgICBib2R5OiB7XG4gICAgICAgIGFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkOiB7XG4gICAgICAgICAgICB0eXBlOiAnb2Zmc2l0ZV9yZWRpcmVjdCc7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJsOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUmVkaXJlY3RBY3Rpb25FcnJvcihlcnJvcjogdW5rbm93bik6IGVycm9yIGlzIFJlZGlyZWN0QWN0aW9uRXJyb3Ige1xuICAgIHJldHVybiAoXG4gICAgICAgIGlzUmVxdWVzdEVycm9yKGVycm9yKSAmJiBlcnJvci5ib2R5LmFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkPy50eXBlID09PSAnb2Zmc2l0ZV9yZWRpcmVjdCdcbiAgICApO1xufVxuIiwiaW1wb3J0IFJlcXVlc3RFcnJvciBmcm9tICcuL3JlcXVlc3QtZXJyb3InO1xuXG4vLyBIYXZlIHRvIHVzZSBgYXNgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczOTg3MDQ0L3R5cGVndWFyZGluZy1hbi11bmtub3duLW5lc3RlZC1vYmplY3Qgc2hvdWxkIGJlIGZpeGVkIGluIDQuOCtcbmNvbnN0IGlzUmVxdWVzdEVycm9yID0gKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgUmVxdWVzdEVycm9yID0+IHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnYm9keScgaW4gZXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc1JlcXVlc3RFcnJvcjtcbiIsImV4cG9ydCBpbnRlcmZhY2UgUHJvdmlkZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBlcnJvcnM/OiBFcnJvckVsZW1lbnRbXTtcbiAgICBzdGF0dXM/OiBzdHJpbmc7XG4gICAgdGhyZWVfZHNfcmVzdWx0Pzoge1xuICAgICAgICBhY3NfdXJsOiB1bmtub3duO1xuICAgICAgICBwYXllcl9hdXRoX3JlcXVlc3Q6IHVua25vd247XG4gICAgICAgIG1lcmNoYW50X2RhdGE6IHVua25vd247XG4gICAgICAgIGNhbGxiYWNrX3VybDogdW5rbm93bjtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yRWxlbWVudCB7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICBwcm92aWRlcl9lcnJvcj86IHtcbiAgICAgICAgY29kZTogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGF5cGFsQ29tbWVyY2VQcm92aWRlckVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgUHJvdmlkZXJFcnJvciB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwgJiYgJ2Vycm9ycycgaW4gZXJyb3I7XG59XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgUGF5UGFsQ29tbWVyY2VTZGsgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIH0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWNvbnN0YW50cyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVBheW1lbnRTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8UGF5UGFsQ29tbWVyY2VQYXltZW50U3RyYXRlZ3k+ID0gKFxuICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4pID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlUGF5bWVudFN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICAgICAgbmV3IFBheVBhbENvbW1lcmNlU2RrKGdldFNjcmlwdExvYWRlcigpKSxcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3Ioe1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzOiBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMsXG4gICAgICAgIH0pLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZVBheW1lbnRTdHJhdGVneSwgW3sgaWQ6ICdwYXlwYWxjb21tZXJjZScgfV0pO1xuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiB3ZSB0cnkgdG8gY2FsbCBhIG1ldGhvZCB0aGF0IGlzIG9ubHkgYSBzdHViIGFuZCBoYXMgbm90XG4gKiBiZWVuIGZ1bGx5IGltcGxlbWVudGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RJbXBsZW1lbnRlZEVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdOb3QgaW1wbGVtZW50ZWQuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ05vdEltcGxlbWVudGVkRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbm90X2ltcGxlbWVudGVkJztcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE5vdEltcGxlbWVudGVkRXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQge1xuICAgIGdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWcsXG4gICAgTWVzc2FnaW5nT3B0aW9ucyxcbiAgICBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgUGF5UGFsTWVzc2FnZXNTZGssXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBDbGlja0NhbGxiYWNrQWN0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudEluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgb3JkZXJJZD86IHN0cmluZztcbiAgICBwcml2YXRlIHBheXBhbEJ1dHRvbj86IFBheVBhbENvbW1lcmNlQnV0dG9ucztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VTZGs6IFBheVBhbENvbW1lcmNlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM/OiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlLCBwYXlwYWxjb21tZXJjZWNyZWRpdCB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBjb25zdCBwYXlwYWxPcHRpb25zID0gcGF5cGFsY29tbWVyY2VjcmVkaXQgfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxPcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCB7IHBheXBhbEJOUExDb25maWd1cmF0aW9uID0gW10sIG9yZGVySWQgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGJhbm5lckNvbnRhaW5lcklkLCBjb250YWluZXIgfSA9IHBheXBhbE9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGJhbm5lckNvbnRhaW5lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYmFubmVyQ29udGFpbmVySWQpKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGJhbm5lciB3aXRob3V0IHZhbGlkIGJhbm5lciBjb250YWluZXIgSUQuJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJhbm5lckNvbmZpZ3VyYXRpb24gPVxuICAgICAgICAgICAgICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uICYmXG4gICAgICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24uZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gJ2NoZWNrb3V0Jyk7XG5cbiAgICAgICAgICAgIGlmICghYmFubmVyQ29uZmlndXJhdGlvbj8uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwYXlwYWxNZXNzYWdlcyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsTWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJNZXNzYWdlcyhwYXlwYWxNZXNzYWdlcywgYmFubmVyQ29udGFpbmVySWQsIGJhbm5lckNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5mbzpcbiAgICAgICAgLy8gVGhlIFBheVBhbCBidXR0b24gYW5kIGZpZWxkcyBzaG91bGQgbm90IGJlIHJlbmRlcmVkIHdoZW4gc2hvcHBlciB3YXMgcmVkaXJlY3RlZCB0byBDaGVja291dCBwYWdlXG4gICAgICAgIC8vIGFmdGVyIHVzaW5nIHNtYXJ0IHBheW1lbnQgYnV0dG9uIG9uIFBEUCBvciBDYXJ0IHBhZ2UuIEluIHRoaXMgY2FzZSBiYWNrZW5kIHJldHVybnMgb3JkZXIgaWQgaWZcbiAgICAgICAgLy8gaXQgaXMgYXZhaWxhYmxlIGluIGNoZWNrb3V0IHNlc3Npb24uIFRoZXJlZm9yZSwgaXQgaXMgbm90IG5lY2Vzc2FyeSB0byByZW5kZXIgUGF5UGFsIGJ1dHRvbi5cbiAgICAgICAgaWYgKG9yZGVySWQpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyID0gY29udGFpbmVyPy5zcGxpdCgnIycpWzFdO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKG1ldGhvZElkLCBwYXlwYWxPcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKHBheWxvYWQ6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gcGF5bG9hZDtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLm9yZGVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQocGF5bWVudC5tZXRob2RJZCwgdGhpcy5vcmRlcklkKTtcbiAgICB9XG5cbiAgICBmaW5hbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IoKSk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLm9yZGVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24/LmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnV0dG9uIG1ldGhvZHMvY2FsbGJhY2tzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxPcHRpb25zOiBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKCFwYXlwYWxPcHRpb25zPy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IHBheW1lbnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25FcnJvciwgb25SZW5kZXJCdXR0b24sIG9uVmFsaWRhdGUsIHN1Ym1pdEZvcm0gfSA9IHBheXBhbE9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZXMgPSBbcGF5cGFsU2RrLkZVTkRJTkcuUEFZTEFURVIsIHBheXBhbFNkay5GVU5ESU5HLkNSRURJVF07XG4gICAgICAgIGxldCBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gZmFsc2U7XG5cbiAgICAgICAgZnVuZGluZ1NvdXJjZXMuZm9yRWFjaCgoZnVuZGluZ1NvdXJjZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhc1JlbmRlcmVkU21hcnRCdXR0b24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbk9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICBzdHlsZTogdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKFxuICAgICAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWNyZWRpdGNoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiAoXywgYWN0aW9ucykgPT4gdGhpcy5oYW5kbGVDbGljayhhY3Rpb25zLCBvblZhbGlkYXRlKSxcbiAgICAgICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhKSA9PiB0aGlzLmhhbmRsZUFwcHJvdmUoZGF0YSwgc3VibWl0Rm9ybSksXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSksXG4gICAgICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBvbkVycm9yKSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5wYXlwYWxCdXR0b24uaXNFbGlnaWJsZSgpICYmIGZ1bmRpbmdTb3VyY2UgPT09IHBheXBhbFNkay5GVU5ESU5HLlBBWUxBVEVSKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMucGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSAmJiBmdW5kaW5nU291cmNlID09PSBwYXlwYWxTZGsuRlVORElORy5DUkVESVQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFBheVBhbCAke2Z1bmRpbmdTb3VyY2V9IGlzIG5vdCBhdmFpbGFibGUgZm9yIHlvdXIgcmVnaW9uLiBQbGVhc2UgdXNlIFBheVBhbCBDaGVja291dCBpbnN0ZWFkLmAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uLnJlbmRlcihjb250YWluZXIpO1xuICAgICAgICAgICAgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGFjdGlvbnM6IENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgICAgICBvblZhbGlkYXRlOiBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25WYWxpZGF0ZSddLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHJlc29sdmUsIHJlamVjdCB9ID0gYWN0aW9ucztcblxuICAgICAgICBjb25zdCBvblZhbGlkYXRpb25QYXNzZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9uVmFsaWRhdGUgJiYgdHlwZW9mIG9uVmFsaWRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvblZhbGlkYXRlKG9uVmFsaWRhdGlvblBhc3NlZCwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQXBwcm92ZShcbiAgICAgICAgeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIHN1Ym1pdEZvcm06IFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudEluaXRpYWxpemVPcHRpb25zWydzdWJtaXRGb3JtJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySUQ7XG5cbiAgICAgICAgaWYgKHN1Ym1pdEZvcm0gJiYgdHlwZW9mIHN1Ym1pdEZvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN1Ym1pdEZvcm0oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoXG4gICAgICAgIGVycm9yOiBFcnJvcixcbiAgICAgICAgb25FcnJvcjogUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uRXJyb3InXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICBpZiAob25FcnJvciAmJiB0eXBlb2Ygb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIExvYWRpbmcgSW5kaWNhdG9yIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGlzTG9hZGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoaXNMb2FkaW5nICYmIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLnNob3codGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFJlbmRlciBQYXkgTGF0ZXIgTWVzc2FnZXNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSByZW5kZXJNZXNzYWdlcyhcbiAgICAgICAgcGF5cGFsTWVzc2FnZXM6IFBheVBhbE1lc3NhZ2VzU2RrLFxuICAgICAgICBiYW5uZXJDb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBiYW5uZXJDb25maWd1cmF0aW9uOiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsTWVzc2FnZXNPcHRpb25zOiBNZXNzYWdpbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgYW1vdW50OiBjaGVja291dC5vdXRzdGFuZGluZ0JhbGFuY2UsXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdwYXltZW50JyxcbiAgICAgICAgICAgIHN0eWxlOiBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnKGJhbm5lckNvbmZpZ3VyYXRpb24pLFxuICAgICAgICB9O1xuXG4gICAgICAgIHBheXBhbE1lc3NhZ2VzLk1lc3NhZ2VzKHBheXBhbE1lc3NhZ2VzT3B0aW9ucykucmVuZGVyKGAjJHtiYW5uZXJDb250YWluZXJJZH1gKTtcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyB9IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1jb25zdGFudHMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneTogUGF5bWVudFN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgICAgIG5ldyBMb2FkaW5nSW5kaWNhdG9yKHtcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlczogTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTLFxuICAgICAgICB9KSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsoKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXQnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTm90SW1wbGVtZW50ZWRFcnJvcixcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcixcbiAgICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBDbGlja0NhbGxiYWNrQWN0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdmVubW8tcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsQnV0dG9uPzogUGF5UGFsQ29tbWVyY2VCdXR0b25zO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zPzogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlLCBwYXlwYWxjb21tZXJjZXZlbm1vIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbE9wdGlvbnMgPSBwYXlwYWxjb21tZXJjZXZlbm1vIHx8IHBheXBhbGNvbW1lcmNlO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsT3B0aW9ucykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNldmVubW9cIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICAvLyBJbmZvOlxuICAgICAgICAvLyBUaGUgUGF5UGFsIGJ1dHRvbiBhbmQgZmllbGRzIHNob3VsZCBub3QgYmUgcmVuZGVyZWQgd2hlbiBzaG9wcGVyIHdhcyByZWRpcmVjdGVkIHRvIENoZWNrb3V0IHBhZ2VcbiAgICAgICAgLy8gYWZ0ZXIgdXNpbmcgc21hcnQgcGF5bWVudCBidXR0b24gb24gUERQIG9yIENhcnQgcGFnZS4gSW4gdGhpcyBjYXNlIGJhY2tlbmQgcmV0dXJucyBvcmRlciBpZCBpZlxuICAgICAgICAvLyBpdCBpcyBhdmFpbGFibGUgaW4gY2hlY2tvdXQgc2Vzc2lvbi4gVGhlcmVmb3JlLCBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHJlbmRlciBQYXlQYWwgYnV0dG9uLlxuICAgICAgICBpZiAocGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/Lm9yZGVySWQpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhPy5vcmRlcklkO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQpO1xuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IHBheXBhbE9wdGlvbnMuY29udGFpbmVyLnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbE9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChwYXltZW50Lm1ldGhvZElkLCB0aGlzLm9yZGVySWQpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbj8uY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCdXR0b24gbWV0aG9kcy9jYWxsYmFja3NcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNldmVubW86IFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG5cbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IsIG9uUmVuZGVyQnV0dG9uLCBvblZhbGlkYXRlLCBzdWJtaXRGb3JtIH0gPSBwYXlwYWxjb21tZXJjZXZlbm1vO1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbk9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMgPSB7XG4gICAgICAgICAgICBmdW5kaW5nU291cmNlOiBwYXlwYWxTZGsuRlVORElORy5WRU5NTyxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoXG4gICAgICAgICAgICAgICAgY2hlY2tvdXRQYXltZW50QnV0dG9uU3R5bGVzLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNldmVubW9jaGVja291dCcpLFxuICAgICAgICAgICAgb25DbGljazogKF8sIGFjdGlvbnMpID0+IHRoaXMuaGFuZGxlQ2xpY2soYWN0aW9ucywgb25WYWxpZGF0ZSksXG4gICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhKSA9PiB0aGlzLmhhbmRsZUFwcHJvdmUoZGF0YSwgc3VibWl0Rm9ybSksXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKSxcbiAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgb25FcnJvciksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24gPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25PcHRpb25zKTtcblxuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXJyb3IoXG4gICAgICAgICAgICAgICAgYFBheVBhbCBWZW5tbyBpcyBub3QgYXZhaWxhYmxlIGZvciB5b3VyIHJlZ2lvbi4gUGxlYXNlIHVzZSBQYXlQYWwgQ2hlY2tvdXQgaW5zdGVhZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvblJlbmRlckJ1dHRvbiAmJiB0eXBlb2Ygb25SZW5kZXJCdXR0b24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbi5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBhY3Rpb25zOiBDbGlja0NhbGxiYWNrQWN0aW9ucyxcbiAgICAgICAgb25WYWxpZGF0ZTogUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25WYWxpZGF0ZSddLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHJlc29sdmUsIHJlamVjdCB9ID0gYWN0aW9ucztcblxuICAgICAgICBjb25zdCBvblZhbGlkYXRpb25QYXNzZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG9uVmFsaWRhdGUob25WYWxpZGF0aW9uUGFzc2VkLCByZWplY3QpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQXBwcm92ZShcbiAgICAgICAgeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIHN1Ym1pdEZvcm06IFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ3N1Ym1pdEZvcm0nXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJRDtcblxuICAgICAgICBzdWJtaXRGb3JtKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihcbiAgICAgICAgZXJyb3I6IEVycm9yLFxuICAgICAgICBvbkVycm9yOiBQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudEluaXRpYWxpemVPcHRpb25zWydvbkVycm9yJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3IgJiYgdHlwZW9mIG9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRTdHJhdGVneTogUGF5bWVudFN0cmF0ZWd5RmFjdG9yeTxcbiAgICBQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7IHN0eWxlczogeyBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycgfSB9KSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZXZlbm1vJyB9LFxuXSk7XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIGEgcmVxdWVzdCBmYWlscyB0byBjb21wbGV0ZSB3aXRoaW4gaXRzIHJlcXVpcmVkIHRpbWVmcmFtZVxuICogYmVjYXVzZSBvZiBhIG5ldHdvcmsgaXNzdWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVvdXRFcnJvcjxUID0gYW55PiBleHRlbmRzIFJlcXVlc3RFcnJvcjxUPiB7XG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBSZXNwb25zZTxUPikge1xuICAgICAgICBzdXBlcihyZXNwb25zZSwge1xuICAgICAgICAgICAgbWVzc2FnZTogJ1RoZSByZXF1ZXN0IGhhcyB0aW1lZCBvdXQgb3IgYWJvcnRlZC4nLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnVGltZW91dEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3RpbWVvdXQnO1xuICAgIH1cbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZXMge1xuICAgIFtmZWF0dXJlTmFtZTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFeHBlcmltZW50RW5hYmxlZChcbiAgICBmZWF0dXJlczogRmVhdHVyZXMsXG4gICAgZXhwZXJpbWVudE5hbWU6IHN0cmluZyxcbiAgICBmYWxsYmFja1ZhbHVlID0gdHJ1ZSxcbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmZWF0dXJlc1tleHBlcmltZW50TmFtZV0gPz8gZmFsbGJhY2tWYWx1ZTtcbn1cbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbiAgICBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVGltZW91dEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IFBheVBhbEFwbVNkaywgUGF5UGFsQ29tbWVyY2VTZGsgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5pbXBvcnQgeyBpc0V4cGVyaW1lbnRFbmFibGVkIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91dGlsaXR5JztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBOb25JbnN0YW50QWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBQYXlQYWxPcmRlclN0YXR1cyxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5jb25zdCBQT0xMSU5HX0lOVEVSVkFMID0gMzAwMDtcbmNvbnN0IE1BWF9QT0xMSU5HX1RJTUUgPSAzMDAwMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsQnV0dG9uPzogUGF5UGFsQ29tbWVyY2VCdXR0b25zO1xuICAgIHByaXZhdGUgcGF5cGFsQXBtcz86IFBheVBhbEFwbVNkaztcbiAgICBwcml2YXRlIHBvbGxpbmdUaW1lciA9IDA7XG4gICAgcHJpdmF0ZSBzdG9wUG9sbGluZyA9IG5vb3A7XG4gICAgcHJpdmF0ZSBpc1BvbGxpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcz86IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgICAgICAgcHJpdmF0ZSBwb2xsaW5nSW50ZXJ2YWw6IG51bWJlciA9IFBPTExJTkdfSU5URVJWQUwsXG4gICAgICAgIHByaXZhdGUgbWF4UG9sbGluZ0ludGVydmFsVGltZTogbnVtYmVyID0gTUFYX1BPTExJTkdfVElNRSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJlxuICAgICAgICAgICAgV2l0aFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlLCAvLyBGSVhNRTogdGhpcyBvcHRpb24gaXMgZGVwcmVjYXRlZFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMsXG4gICAgICAgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBwYXlwYWxPcHRpb25zID0gcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMgfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcyA9IHBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2F0ZXdheUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuZ2F0ZXdheUlkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxPcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHNcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KFxuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgb3JkZXJJZCwgc2hvdWxkUmVuZGVyRmllbGRzIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuXG4gICAgICAgIHRoaXMuaXNQb2xsaW5nRW5hYmxlZCA9IGlzRXhwZXJpbWVudEVuYWJsZWQoXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgICdQQVlQQUwtNTE5Mi5wYXlwYWxfY29tbWVyY2VfaWRlYWxfcG9sbGluZycsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gSW5mbzpcbiAgICAgICAgLy8gVGhlIFBheVBhbCBidXR0b24gYW5kIGZpZWxkcyBzaG91bGQgbm90IGJlIHJlbmRlcmVkIHdoZW4gc2hvcHBlciB3YXMgcmVkaXJlY3RlZCB0byBDaGVja291dCBwYWdlXG4gICAgICAgIC8vIGFmdGVyIHVzaW5nIHNtYXJ0IHBheW1lbnQgYnV0dG9uIG9uIFBEUCBvciBDYXJ0IHBhZ2UuIEluIHRoaXMgY2FzZSBiYWNrZW5kIHJldHVybnMgb3JkZXIgaWQgaWZcbiAgICAgICAgLy8gaXQgaXMgYXZhaWxhYmxlIGluIGNoZWNrb3V0IHNlc3Npb24uIFRoZXJlZm9yZSwgaXQgaXMgbm90IG5lY2Vzc2FyeSB0byByZW5kZXIgUGF5UGFsIGJ1dHRvbi5cbiAgICAgICAgaWYgKG9yZGVySWQpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsQXBtcyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsQXBtc1NkayhcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGUsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyID0gcGF5cGFsT3B0aW9ucy5jb250YWluZXIuc3BsaXQoJyMnKVsxXTtcblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgZ2F0ZXdheUlkLCBwYXlwYWxPcHRpb25zKTtcblxuICAgICAgICBpZiAoc2hvdWxkUmVuZGVyRmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckZpZWxkcyhtZXRob2RJZCwgcGF5cGFsT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKHBheWxvYWQ6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gcGF5bG9hZDtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgZ2F0ZXdheUlkIH0gPSBwYXltZW50O1xuXG4gICAgICAgIGlmICghdGhpcy5vcmRlcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQb2xsaW5nRW5hYmxlZCAmJiBtZXRob2RJZCA9PT0gJ2lkZWFsJykge1xuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHZvaWQgdGhpcy5pbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShtZXRob2RJZCwgcmVzb2x2ZSwgcmVqZWN0LCBnYXRld2F5SWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaXNOb25JbnN0YW50UGF5bWVudE1ldGhvZChtZXRob2RJZCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoXG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCxcbiAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmaW5hbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IoKSk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLm9yZGVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQb2xsaW5nRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldFBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uPy5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBvbGxpbmcgbWVjaGFuaXNtXG4gICAgICpcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcmVzb2x2ZVByb21pc2U6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQsXG4gICAgICAgIHJlamVjdFByb21pc2U6ICh2YWx1ZT86IHVua25vd24pID0+IHZvaWQsXG4gICAgICAgIGdhdGV3YXlJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucG9sbGluZ1RpbWVyICs9IHRoaXMucG9sbGluZ0ludGVydmFsO1xuXG4gICAgICAgICAgICBjb25zdCBvcmRlclN0YXR1cyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgaXNPcmRlckFwcHJvdmVkID0gb3JkZXJTdGF0dXMgPT09IFBheVBhbE9yZGVyU3RhdHVzLkFwcHJvdmVkO1xuICAgICAgICAgICAgY29uc3QgaXNQb2xsaW5nRXJyb3IgPSBvcmRlclN0YXR1cyA9PT0gUGF5UGFsT3JkZXJTdGF0dXMuUG9sbGluZ0Vycm9yO1xuXG4gICAgICAgICAgICBpZiAoaXNPcmRlckFwcHJvdmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVByb21pc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzUG9sbGluZ0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdFByb21pc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFpc09yZGVyQXBwcm92ZWQgJiYgdGhpcy5wb2xsaW5nVGltZXIgPCB0aGlzLm1heFBvbGxpbmdJbnRlcnZhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICByZWplY3RQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWluaXRpYWxpemVTdHJhdGVneSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzOiB0aGlzLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IobmV3IFRpbWVvdXRFcnJvcigpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdFByb21pc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9wUG9sbGluZygpO1xuICAgICAgICB0aGlzLnBvbGxpbmdUaW1lciA9IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldFBvbGxpbmdNZWNoYW5pc20oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVpbml0aWFsaXplU3RyYXRlZ3koXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmXG4gICAgICAgICAgICBXaXRoUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVpbml0aWFsaXplKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGNvbnN0IHsgb25FcnJvciB9ID0gdGhpcy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcyB8fCB7fTtcblxuICAgICAgICBpZiAodGhpcy5pc1BvbGxpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UG9sbGluZ01lY2hhbmlzbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICBpZiAob25FcnJvciAmJiB0eXBlb2Ygb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJ1dHRvbiBtZXRob2RzL2NhbGxiYWNrc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgZ2F0ZXdheUlkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbE9wdGlvbnM6IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBheXBhbEFtcHNTZGsgPSB0aGlzLmdldFBheXBhbEFtcHNTZGtPclRocm93KCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCB7IGJ1dHRvblN0eWxlIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcblxuICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25FcnJvciwgb25SZW5kZXJCdXR0b24sIHN1Ym1pdEZvcm0gfSA9IHBheXBhbE9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgYnV0dG9uT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IG1ldGhvZElkLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShidXR0b25TdHlsZSksXG4gICAgICAgICAgICBvbkluaXQ6IChfLCBhY3Rpb25zKSA9PiBwYXlwYWxPcHRpb25zLm9uSW5pdEJ1dHRvbihhY3Rpb25zKSxcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PiB0aGlzLm9uQ3JlYXRlT3JkZXIobWV0aG9kSWQsIGdhdGV3YXlJZCwgcGF5cGFsT3B0aW9ucyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhKSA9PiB0aGlzLmhhbmRsZUFwcHJvdmUoZGF0YSwgc3VibWl0Rm9ybSksXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVGYWlsdXJlKGVycm9yLCBvbkVycm9yKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNsaWNrOiBhc3luYyAoXywgYWN0aW9ucykgPT5cbiAgICAgICAgICAgICAgICBwYXlwYWxPcHRpb25zLm9uVmFsaWRhdGUoYWN0aW9ucy5yZXNvbHZlLCBhY3Rpb25zLnJlamVjdCksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24gPSBwYXlwYWxBbXBzU2RrLkJ1dHRvbnMoYnV0dG9uT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvblJlbmRlckJ1dHRvbiAmJiB0eXBlb2Ygb25SZW5kZXJCdXR0b24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbi5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uQ3JlYXRlT3JkZXIoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGdhdGV3YXlJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxPcHRpb25zOiBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRPcHRpb25zLFxuICAgICk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHsgb25WYWxpZGF0ZSB9ID0gcGF5cGFsT3B0aW9ucztcblxuICAgICAgICBjb25zdCBvblZhbGlkYXRpb25QYXNzZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBvblZhbGlkYXRlKG9uVmFsaWRhdGlvblBhc3NlZCwgbm9vcCk7XG5cbiAgICAgICAgY29uc3Qgb3JkZXJJZCA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoXG4gICAgICAgICAgICAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHNjaGVja291dCcsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNOb25JbnN0YW50UGF5bWVudE1ldGhvZChtZXRob2RJZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVyID0geyB1c2VTdG9yZUNyZWRpdDogZmFsc2UgfTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQobWV0aG9kSWQsIG9yZGVySWQsIGdhdGV3YXlJZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JkZXJJZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUFwcHJvdmUoXG4gICAgICAgIHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICAgICBzdWJtaXRGb3JtOiBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRPcHRpb25zWydzdWJtaXRGb3JtJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySUQ7XG5cbiAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRmFpbHVyZShcbiAgICAgICAgZXJyb3I6IEVycm9yLFxuICAgICAgICBvbkVycm9yOiBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRPcHRpb25zWydvbkVycm9yJ10sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3IgJiYgdHlwZW9mIG9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBGaWVsZHMgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHJlbmRlckZpZWxkcyhcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsT3B0aW9uczogUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50T3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF5cGFsQW1wc1NkayA9IHRoaXMuZ2V0UGF5cGFsQW1wc1Nka09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lLCBlbWFpbCB9ID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBhcG1GaWVsZHNDb250YWluZXIsIGFwbUZpZWxkc1N0eWxlcyB9ID0gcGF5cGFsT3B0aW9ucztcblxuICAgICAgICBpZiAoIWFwbUZpZWxkc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzXCIgYXJndW1lbnQgc2hvdWxkIGNvbnRhaW4gXCJhcG1GaWVsZHNDb250YWluZXJcIi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpZWxkQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXBtRmllbGRzQ29udGFpbmVyKTtcblxuICAgICAgICBpZiAoZmllbGRDb250YWluZXJFbGVtZW50KSB7XG4gICAgICAgICAgICBmaWVsZENvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWVsZHNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogbWV0aG9kSWQsXG4gICAgICAgICAgICBzdHlsZTogYXBtRmllbGRzU3R5bGVzIHx8IHt9LFxuICAgICAgICAgICAgZmllbGRzOiB7XG4gICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lfWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbWFpbDoge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW1haWwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGF5cGFsUGF5bWVudEZpZWxkcyA9IHBheXBhbEFtcHNTZGsuUGF5bWVudEZpZWxkcyhmaWVsZHNPcHRpb25zKTtcblxuICAgICAgICBwYXlwYWxQYXltZW50RmllbGRzLnJlbmRlcihhcG1GaWVsZHNDb250YWluZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogTG9hZGluZyBJbmRpY2F0b3IgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoaXNMb2FkaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0xvYWRpbmcgJiYgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3Iuc2hvdyh0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBpc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZElkLnRvVXBwZXJDYXNlKCkgaW4gTm9uSW5zdGFudEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQYXlwYWxBbXBzU2RrT3JUaHJvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBheXBhbEFwbXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGF5cGFsQXBtcztcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyB9IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1jb25zdGFudHMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZVNkaygpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZXM6IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyxcbiAgICAgICAgfSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBnYXRld2F5OiAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMnIH0sXG5dKTtcbiIsIi8vIGNvcGllZCBmcm9tIHBhY2thZ2VzL2NvcmUvc3JjL2hvc3RlZC1mb3JtL2hvc3RlZC1maWVsZC10eXBlLnRzXG5cbmVudW0gSG9zdGVkRmllbGRUeXBlIHtcbiAgICBDYXJkQ29kZSA9ICdjYXJkQ29kZScsXG4gICAgQ2FyZENvZGVWZXJpZmljYXRpb24gPSAnY2FyZENvZGVWZXJpZmljYXRpb24nLFxuICAgIENhcmRFeHBpcnkgPSAnY2FyZEV4cGlyeScsXG4gICAgQ2FyZE5hbWUgPSAnY2FyZE5hbWUnLFxuICAgIENhcmROdW1iZXIgPSAnY2FyZE51bWJlcicsXG4gICAgQ2FyZE51bWJlclZlcmlmaWNhdGlvbiA9ICdjYXJkTnVtYmVyVmVyaWZpY2F0aW9uJyxcbiAgICBDYXJkRXhwaXJ5VmVyaWZpY2F0aW9uID0gJ2NhcmRFeHBpcnlWZXJpZmljYXRpb24nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3N0ZWRGaWVsZFR5cGU7XG4iLCJpbXBvcnQgSG9zdGVkRmllbGRUeXBlIGZyb20gJy4vaG9zdGVkLWZpZWxkLXR5cGUnO1xuaW1wb3J0IHsgSG9zdGVkQ2FyZEZpZWxkT3B0aW9uc01hcCwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCB9IGZyb20gJy4vaG9zdGVkLWZvcm0tb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ3JlZGl0Q2FyZEZvcm1GaWVsZHMoXG4gICAgZmllbGRzOiBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbik6IGZpZWxkcyBpcyBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZE51bWJlciBpbiBmaWVsZHMgJiZcbiAgICAgICAgSG9zdGVkRmllbGRUeXBlLkNhcmROYW1lIGluIGZpZWxkcyAmJlxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZEV4cGlyeSBpbiBmaWVsZHNcbiAgICApO1xufVxuIiwiaW1wb3J0IEhvc3RlZEZpZWxkVHlwZSBmcm9tICcuL2hvc3RlZC1maWVsZC10eXBlJztcbmltcG9ydCB7IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAsIEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXAgfSBmcm9tICcuL2hvc3RlZC1mb3JtLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NyZWRpdENhcmRWYXVsdGVkRm9ybUZpZWxkcyhcbiAgICBmaWVsZHM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAgfCBIb3N0ZWRTdG9yZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuKTogZmllbGRzIGlzIEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXAge1xuICAgIHJldHVybiAoXG4gICAgICAgIEhvc3RlZEZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uIGluIGZpZWxkcyAmJlxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb24gaW4gZmllbGRzICYmXG4gICAgICAgIEhvc3RlZEZpZWxkVHlwZS5DYXJkRXhwaXJ5VmVyaWZpY2F0aW9uIGluIGZpZWxkc1xuICAgICk7XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHNob3VsZCBiZSB0aHJvd24gd2hlbiBhIHBheW1lbnQgbWV0aG9kIGV4cGVyaWVuY2VzIHNvbWUga2luZCBvZlxuICogZmFpbHVyZSAoaS5lLjogaXRzIGNsaWVudCBsaWJyYXJ5IHJldHVybnMgYSByZWplY3RlZCBwcm9taXNlKS4gQW5kIHRoZXJlIGlzXG4gKiBubyBvdGhlciBlcnJvciB0eXBlIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0aGFuIHRoaXMgb25lLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgbWVzc2FnZSB8fFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjbGllbnQgbGlicmFyeSBvZiBhIHBheW1lbnQgbWV0aG9kIGhhcyB0aHJvd24gYW4gdW5leHBlY3RlZCBlcnJvci4nLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kRmFpbGVkRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAncGF5bWVudF9tZXRob2RfY2xpZW50X2ludmFsaWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5leHBvcnQgZW51bSBOb3RJbml0aWFsaXplZEVycm9yVHlwZSB7XG4gICAgQ2hlY2tvdXRCdXR0b25Ob3RJbml0aWFsaXplZCxcbiAgICBDdXN0b21lck5vdEluaXRpYWxpemVkLFxuICAgIFBheW1lbnROb3RJbml0aWFsaXplZCxcbiAgICBTaGlwcGluZ05vdEluaXRpYWxpemVkLFxuICAgIFNwYW1Qcm90ZWN0aW9uTm90SW5pdGlhbGl6ZWQsXG59XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiBhIG1ldGhvZCByZXF1aXJlcyBhIGNlcnRhaW4gaW5pdGlhbGl6YXRpb24gY2FsbCB0byBiZVxuICogbWFkZSBmaXJzdC4gU29tZSBvYmplY3RzIGNhbiBiZSBjb25zdHJ1Y3RlZCBidXQgdGhleSBjYW5ub3QgYmUgdXNlZCB1bnRpbCBhXG4gKiBzZXBhcmF0ZSBpbml0aWFsaXphdGlvbiBjYWxsIGlzIG1hZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdEluaXRpYWxpemVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3VidHlwZTogTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUpIHtcbiAgICAgICAgc3VwZXIoZ2V0RXJyb3JNZXNzYWdlKHN1YnR5cGUpKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnTm90SW5pdGlhbGl6ZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdub3RfaW5pdGlhbGl6ZWQnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKHR5cGU6IE5vdEluaXRpYWxpemVkRXJyb3JUeXBlKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5DdXN0b21lck5vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjdXN0b21lciBzdGVwIG9mIGNoZWNrb3V0IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBwYXltZW50IHN0ZXAgb2YgY2hlY2tvdXQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG5cbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5TaGlwcGluZ05vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBzaGlwcGluZyBzdGVwIG9mIGNoZWNrb3V0IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuU3BhbVByb3RlY3Rpb25Ob3RJbml0aWFsaXplZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgY2hlY2tvdXQgc3BhbSBwcm90ZWN0aW9uIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMge1xuICAgIFtrZXk6IHN0cmluZ106IEFycmF5PHsgbWVzc2FnZTogc3RyaW5nOyB0eXBlOiBzdHJpbmcgfT47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGRldGFpbHM6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscywgbWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBwYXltZW50IGZvcm0gY29udGFpbnMgaW52YWxpZCBkYXRhLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50SW52YWxpZEZvcm1FcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X2ludmFsaWRfZm9ybSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNOaWwsIG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgSG9zdGVkQ2FyZEZpZWxkT3B0aW9ucyxcbiAgICBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuICAgIEhvc3RlZEZpZWxkQmx1ckV2ZW50RGF0YSxcbiAgICBIb3N0ZWRGaWVsZEVudGVyRXZlbnREYXRhLFxuICAgIEhvc3RlZEZpZWxkRm9jdXNFdmVudERhdGEsXG4gICAgSG9zdGVkRmllbGRTdHlsZXNNYXAsXG4gICAgSG9zdGVkRmllbGRUeXBlLFxuICAgIEhvc3RlZEZpZWxkVmFsaWRhdGVFdmVudERhdGEsXG4gICAgSG9zdGVkRm9ybU9wdGlvbnMsXG4gICAgSG9zdGVkSW5wdXRWYWxpZGF0ZUVycm9yRGF0YSxcbiAgICBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhTWFwLFxuICAgIEhvc3RlZEluc3RydW1lbnQsXG4gICAgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBpc0NyZWRpdENhcmRGb3JtRmllbGRzLFxuICAgIGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnQsXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyxcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBWYXVsdGVkSW5zdHJ1bWVudCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQge1xuICAgIGlzUGF5UGFsQ29tbWVyY2VBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIsXG4gICAgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIExpYWJpbGl0eVNoaWZ0RW51bSxcbiAgICBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHMsXG4gICAgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzQ29uZmlnLFxuICAgIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc09uQXBwcm92ZURhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUsXG4gICAgUGF5UGFsQ29tbWVyY2VGaWVsZHMsXG4gICAgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNSZW5kZXJPcHRpb25zLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGV4ZWN1dGlvblBheW1lbnREYXRhPzogT3JkZXJQYXltZW50UmVxdWVzdEJvZHlbJ3BheW1lbnREYXRhJ107XG4gICAgcHJpdmF0ZSBpc0NyZWRpdENhcmRGb3JtPzogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtPzogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgY2FyZEZpZWxkcz86IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkcztcbiAgICBwcml2YXRlIGN2dkZpZWxkPzogUGF5UGFsQ29tbWVyY2VGaWVsZHM7XG4gICAgcHJpdmF0ZSBleHBpcnlGaWVsZD86IFBheVBhbENvbW1lcmNlRmllbGRzO1xuICAgIHByaXZhdGUgbnVtYmVyRmllbGQ/OiBQYXlQYWxDb21tZXJjZUZpZWxkcztcbiAgICBwcml2YXRlIG5hbWVGaWVsZD86IFBheVBhbENvbW1lcmNlRmllbGRzO1xuXG4gICAgcHJpdmF0ZSBob3N0ZWRGb3JtT3B0aW9ucz86IEhvc3RlZEZvcm1PcHRpb25zO1xuICAgIHByaXZhdGUgcmV0dXJuZWRPcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcmV0dXJuZWRWYXVsdGVkVG9rZW4/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzOiBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlY3JlZGl0Y2FyZHMsIHBheXBhbGNvbW1lcmNlIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBwYXlwYWxDb21tZXJjZUluaXRpYWxpemF0aW9uT3B0aW9ucyA9IHBheXBhbGNvbW1lcmNlY3JlZGl0Y2FyZHMgfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgY29uc3QgeyBmb3JtLCBvbkNyZWRpdENhcmRGaWVsZHNSZW5kZXJpbmdFcnJvciwgb25Mb2FkQ29tcGxldGUgfSA9XG4gICAgICAgICAgICBwYXlwYWxDb21tZXJjZUluaXRpYWxpemF0aW9uT3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvcm0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcy5mb3JtXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ob3N0ZWRGb3JtT3B0aW9ucyA9IGZvcm07XG5cbiAgICAgICAgdGhpcy5pc0NyZWRpdENhcmRGb3JtID0gaXNDcmVkaXRDYXJkRm9ybUZpZWxkcyhmb3JtLmZpZWxkcyk7XG4gICAgICAgIHRoaXMuaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm0gPVxuICAgICAgICAgICAgaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm1GaWVsZHMoZm9ybS5maWVsZHMpICYmICF0aGlzLmhhc1VuZGVmaW5lZFZhbHVlcygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCwgdW5kZWZpbmVkLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICBvbkxvYWRDb21wbGV0ZT8uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDcmVkaXRDYXJkRm9ybSB8fCB0aGlzLmlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVGaWVsZHMoZm9ybSwgb25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZVBheVBhbEZhc3RsYW5lKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUGF5UGFsRmFzdGxhbmVPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXltZW50RGF0YSB9ID0gcGF5bWVudCB8fCB7fTtcblxuICAgICAgICBpZiAoIXBheW1lbnQgfHwgIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXhlY3V0aW9uUGF5bWVudERhdGEgPSBwYXltZW50RGF0YTtcblxuICAgICAgICBpZiAodGhpcy5pc0NyZWRpdENhcmRGb3JtIHx8IHRoaXMuaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm0pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmFsaWRhdGVIb3N0ZWRGb3JtT3JUaHJvdygpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdWJtaXRIb3N0ZWRGb3JtKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNvbmRpdGlvbiBpcyB0cmlnZ2VyZWQgd2hlbiB3ZSBwYXkgd2l0aCB2YXVsdGVkIGluc3RydW1lbnQgYW5kIHNoaXBwaW5nIGFkZHJlc3MgaXMgdHJ1c3RlXG4gICAgICAgICAgICBjb25zdCB7IG9yZGVySWQgfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXJDYXJkRmllbGRzKFxuICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0SW5zdHJ1bWVudFBhcmFtcygpLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZE9yZGVySWQgPSBvcmRlcklkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VibWl0UGF5bWVudFBheWxvYWQgPSB0aGlzLnByZXBhcmVQYXltZW50UGF5bG9hZChcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGEsXG4gICAgICAgICAgICB0aGlzLnJldHVybmVkT3JkZXJJZCxcbiAgICAgICAgICAgIHRoaXMucmV0dXJuZWRWYXVsdGVkVG9rZW4sXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoc3VibWl0UGF5bWVudFBheWxvYWQpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhwaXJ5RmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubnVtYmVyRmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubmFtZUZpZWxkPy5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFN1Ym1pdCBQYXltZW50IFBheWxvYWQgcHJlcGFyaW5nIG1ldGhvZFxuICAgICAqXG4gICAgICogYHZhdWx0ZWRUb2tlbmAgaXMgdXNlZCB3aGVuIHdlIHBheSB3aXRoIHZhdWx0ZWQgaW5zdHJ1bWVudCAod2l0aCB0cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MgYW5kIHVudHJ1c3RlZClcbiAgICAgKiBgc2V0dXBUb2tlbmAgaXMgdXNlZCB3aGVuIHdlIHBheSB3aXRoIHZhdWx0ZWQgaW5zdHJ1bWVudCAodW50cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MpXG4gICAgICogYG9yZGVySWRgIGlzIHVzZWQgaW4gZXZlcnkgY2FzZSAoYmFzaWMgY2FyZCBwYXltZW50LCB0cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MgYW5kIHVudHJ1c3RlZClcbiAgICAgKi9cbiAgICBwcml2YXRlIHByZXBhcmVQYXltZW50UGF5bG9hZChcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5bWVudERhdGE6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5WydwYXltZW50RGF0YSddLFxuICAgICAgICBvcmRlcklkPzogc3RyaW5nLFxuICAgICAgICBub25jZT86IHN0cmluZyxcbiAgICApOiBQYXltZW50IHtcbiAgICAgICAgY29uc3QgeyBzaG91bGRTYXZlSW5zdHJ1bWVudCA9IGZhbHNlLCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID0gZmFsc2UgfSA9XG4gICAgICAgICAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlKHBheW1lbnREYXRhKSA/IHBheW1lbnREYXRhIDoge307XG5cbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudElkID1cbiAgICAgICAgICAgIHBheW1lbnREYXRhICYmIGlzVmF1bHRlZEluc3RydW1lbnQocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEuaW5zdHJ1bWVudElkIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGJpZ3BheV90b2tlbiA9IG9taXRCeShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fbm9uY2U6IG5vbmNlLFxuICAgICAgICAgICAgICAgIHRva2VuOiBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNOaWwsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIGluc3RydW1lbnRJZCxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihub25jZSB8fCBpbnN0cnVtZW50SWQgPyB7IGJpZ3BheV90b2tlbiB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICAuLi4ob3JkZXJJZCA/IHsgY2FyZF93aXRoX29yZGVyOiB7IG9yZGVyX2lkOiBvcmRlcklkIH0gfSA6IHt9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENhcmQgZmllbGRzIGluaXRpYWxpemVcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZUZpZWxkcyhcbiAgICAgICAgZm9ybU9wdGlvbnM6IEhvc3RlZEZvcm1PcHRpb25zLFxuICAgICAgICBvbkNyZWRpdENhcmRGaWVsZHNSZW5kZXJpbmdFcnJvcj86IFBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uQ3JlZGl0Q2FyZEZpZWxkc1JlbmRlcmluZ0Vycm9yJ10sXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgZmllbGRzLCBzdHlsZXMgfSA9IGZvcm1PcHRpb25zO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBleGVjdXRlQ2FsbGJhY2sgPSB0aGlzLmdldEV4ZWN1dGVDYWxsYmFjayhmaWVsZHMpO1xuXG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHNDb25maWc6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NvbmZpZyA9IHtcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLmdldElucHV0U3R5bGVzKHN0eWxlcyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6ICh7XG4gICAgICAgICAgICAgICAgb3JkZXJJRCxcbiAgICAgICAgICAgICAgICB2YXVsdFNldHVwVG9rZW4sXG4gICAgICAgICAgICAgICAgbGlhYmlsaXR5U2hpZnQsXG4gICAgICAgICAgICB9OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNPbkFwcHJvdmVEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBsaWFiaWxpdHlTaGlmdCA9PT0gTGlhYmlsaXR5U2hpZnRFbnVtLk5vIHx8XG4gICAgICAgICAgICAgICAgICAgIGxpYWJpbGl0eVNoaWZ0ID09PSBMaWFiaWxpdHlTaGlmdEVudW0uVW5rbm93blxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVBcHByb3ZlKHsgb3JkZXJJRCwgdmF1bHRTZXR1cFRva2VuIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRXJyb3I6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRFdmVudHM6IHtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiB0aGlzLm9uQ2hhbmdlSGFuZGxlcihmb3JtT3B0aW9ucywgZXZlbnQpLFxuICAgICAgICAgICAgICAgIG9uRm9jdXM6IChldmVudCkgPT4gdGhpcy5vbkZvY3VzSGFuZGxlcihmb3JtT3B0aW9ucywgZXZlbnQpLFxuICAgICAgICAgICAgICAgIG9uQmx1cjogKGV2ZW50KSA9PiB0aGlzLm9uQmx1ckhhbmRsZXIoZm9ybU9wdGlvbnMsIGV2ZW50KSxcbiAgICAgICAgICAgICAgICBvbklucHV0U3VibWl0UmVxdWVzdDogKGV2ZW50KSA9PiB0aGlzLm9uSW5wdXRTdWJtaXRSZXF1ZXN0KGZvcm1PcHRpb25zLCBldmVudCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4uZXhlY3V0ZUNhbGxiYWNrLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcyA9IGF3YWl0IHBheXBhbFNkay5DYXJkRmllbGRzKGNhcmRGaWVsZHNDb25maWcpO1xuXG4gICAgICAgIGlmICghdGhpcy5jYXJkRmllbGRzLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxpemVJbnB1dENvbnRhaW5lcnMoZmllbGRzKTtcblxuICAgICAgICAgICAgaWYgKGlzQ3JlZGl0Q2FyZEZvcm1GaWVsZHMoZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVuZGVyRmllbGRzKGZpZWxkcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0NyZWRpdENhcmRWYXVsdGVkRm9ybUZpZWxkcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZW5kZXJWYXVsdGVkRmllbGRzKGZpZWxkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uQ3JlZGl0Q2FyZEZpZWxkc1JlbmRlcmluZ0Vycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBHZXQgZXhlY3V0ZSBjYWxsYmFjayBtZXRob2RcbiAgICAgKiBEZXBlbmRzIG9uIHNoaXBwaW5nIGFkZHJlc3MgaXMgdHJ1c3RlZCBvciBub3Qgd2Ugc2hvdWxkIHBhc3MgdG8gUFBcbiAgICAgKiBgY3JlYXRlVmF1bHRTZXR1cFRva2VuYCBjYWxsYmFjayBpZiBhZGRyZXNzIGlzIHVudHJ1c3RlZCBvclxuICAgICAqIGBjcmVhdGVPcmRlcmAgaWYgYWRkcmVzcyBpcyB0cnVzdGVkXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEV4ZWN1dGVDYWxsYmFjayhcbiAgICAgICAgZmllbGRzOiBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbiAgICApIHtcbiAgICAgICAgY29uc3QgaXNWYXVsdGVkRm9ybSA9IGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzKGZpZWxkcyk7XG5cbiAgICAgICAgcmV0dXJuIGlzVmF1bHRlZEZvcm0gPyB0aGlzLmNyZWF0ZVZhdWx0U2V0dXBUb2tlbkNhbGxiYWNrKCkgOiB0aGlzLmNyZWF0ZU9yZGVyQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVZhdWx0U2V0dXBUb2tlbkNhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlVmF1bHRTZXR1cFRva2VuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzZXR1cFRva2VuIH0gPVxuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlckNhcmRGaWVsZHMoXG4gICAgICAgICAgICAgICAgICAgICAgICAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkc2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmdldEluc3RydW1lbnRQYXJhbXMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFRva2VuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKSkgfHwge307XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBUb2tlbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVPcmRlckNhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlT3JkZXI6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yZGVySWQgfSA9XG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyQ2FyZEZpZWxkcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRJbnN0cnVtZW50UGFyYW1zKCksXG4gICAgICAgICAgICAgICAgICAgICkpIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yZGVySWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogb25BcHByb3ZlIG1ldGhvZFxuICAgICAqIFdoZW4gc3VibWl0dGluZyBhIGZvcm0gd2l0aCBhIGBzdWJtaXRIb3N0ZWRGb3JtYCBtZXRob2QgaWYgdGhlcmUgaXMgbm8gZXJyb3JcbiAgICAgKiB0aGVuIG9uQXBwcm92ZSBjYWxsYmFjayBpcyB0cmlnZ2VyZWQgYW5kIGRlcGVuZHMgb24gdGhlIGZsb3dcbiAgICAgKiB3ZSB3aWxsIHJlY2VpdmUgYW4gYG9yZGVySURgIGlmIGl0J3MgYmFzaWMgcGF5aW5nIGFuZCBgdmF1bHRTZXR1cFRva2VuYCBpZiB3ZSBhcmUgcGF5aW5nXG4gICAgICogd2l0aCB2YXVsdGVkIGluc3RydW1lbnQgYW5kIHNoaXBwaW5nIGFkZHJlc3MgaXMgdW50cnVzdGVkXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUFwcHJvdmUoeyBvcmRlcklELCB2YXVsdFNldHVwVG9rZW4gfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzT25BcHByb3ZlRGF0YSkge1xuICAgICAgICBpZiAob3JkZXJJRCkge1xuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZE9yZGVySWQgPSBvcmRlcklEO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhdWx0U2V0dXBUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZFZhdWx0ZWRUb2tlbiA9IHZhdWx0U2V0dXBUb2tlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUmVuZGVyaW5nIENhcmQgRmllbGRzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgcmVuZGVyRmllbGRzKGZpZWxkc09wdGlvbnM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXApIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcblxuICAgICAgICBpZiAoZmllbGRzT3B0aW9ucy5jYXJkQ29kZT8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3Z2RmllbGQgPSBjYXJkRmllbGRzLkNWVkZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmRDb2RlLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZEV4cGlyeT8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJ5RmllbGQgPSBjYXJkRmllbGRzLkV4cGlyeUZpZWxkKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4cGlyeUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkRXhwaXJ5LmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZE5hbWU/LmNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVGaWVsZCA9IGNhcmRGaWVsZHMuTmFtZUZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubmFtZUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkTmFtZS5jb250YWluZXJJZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZHNPcHRpb25zLmNhcmROdW1iZXI/LmNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aGlzLm51bWJlckZpZWxkID0gY2FyZEZpZWxkcy5OdW1iZXJGaWVsZCh7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm51bWJlckZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkTnVtYmVyLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyByZW5kZXJWYXVsdGVkRmllbGRzKGZpZWxkc09wdGlvbnM6IEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXApIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcblxuICAgICAgICBpZiAoZmllbGRzT3B0aW9ucy5jYXJkQ29kZVZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3Z2RmllbGQgPSBjYXJkRmllbGRzLkNWVkZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmRDb2RlVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZEV4cGlyeVZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJ5RmllbGQgPSBjYXJkRmllbGRzLkV4cGlyeUZpZWxkKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4cGlyeUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkRXhwaXJ5VmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZE51bWJlclZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyRmllbGQgPSBjYXJkRmllbGRzLk51bWJlckZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubnVtYmVyRmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmROdW1iZXJWZXJpZmljYXRpb24uY29udGFpbmVySWR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEluc3RydW1lbnQgcGFyYW1zIG1ldGhvZFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbnN0cnVtZW50UGFyYW1zKCk6IEhvc3RlZEluc3RydW1lbnQgfCBWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgICAgIGlmICghdGhpcy5leGVjdXRpb25QYXltZW50RGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSG9zdGVkSW5zdHJ1bWVudExpa2UodGhpcy5leGVjdXRpb25QYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2hvdWxkU2F2ZUluc3RydW1lbnQsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgfSA9XG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRpb25QYXltZW50RGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1ZhdWx0ZWRJbnN0cnVtZW50KHRoaXMuZXhlY3V0aW9uUGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCB7IGluc3RydW1lbnRJZCB9ID0gdGhpcy5leGVjdXRpb25QYXltZW50RGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoe1xuICAgICAgICBlbWl0dGVkQnksXG4gICAgfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOlxuICAgICAgICB8IEhvc3RlZEZpZWxkQmx1ckV2ZW50RGF0YVxuICAgICAgICB8IEhvc3RlZEZpZWxkRW50ZXJFdmVudERhdGFcbiAgICAgICAgfCBIb3N0ZWRGaWVsZEZvY3VzRXZlbnREYXRhIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZW1pdHRlZEJ5KSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEZvcm0gc3VibWl0IG1ldGhvZFxuICAgICAqIFRyaWdnZXJzIGEgZm9ybSBzdWJtaXRcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgYXN5bmMgc3VibWl0SG9zdGVkRm9ybSgpIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBzdWJtaXRDb25maWcgPSB7XG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczoge1xuICAgICAgICAgICAgICAgIGNvbXBhbnk6IGJpbGxpbmdBZGRyZXNzLmNvbXBhbnksXG4gICAgICAgICAgICAgICAgYWRkcmVzc0xpbmUxOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMSxcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGluZTI6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgICAgIGFkbWluQXJlYTE6IGJpbGxpbmdBZGRyZXNzLnN0YXRlT3JQcm92aW5jZUNvZGUsXG4gICAgICAgICAgICAgICAgYWRtaW5BcmVhMjogYmlsbGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBiaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlOiBiaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FyZEZpZWxkcy5zdWJtaXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FyZEZpZWxkcy5zdWJtaXQoc3VibWl0Q29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcihcbiAgICAgICAgICAgICAgICAnRmFpbGVkIGF1dGhlbnRpY2F0aW9uLiBQbGVhc2UgdHJ5IHRvIGF1dGhvcml6ZSBhZ2Fpbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVmFsaWRhdGlvbiBhbmQgZXJyb3JzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlSG9zdGVkRm9ybU9yVGhyb3coKSB7XG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHMgPSB0aGlzLmdldENhcmRGaWVsZHNPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHNTdGF0ZSA9IGF3YWl0IGNhcmRGaWVsZHMuZ2V0U3RhdGUoKS50aGVuKChkYXRhKSA9PiBkYXRhKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbkRhdGEgPSB0aGlzLmdldFZhbGlkaXR5RGF0YShjYXJkRmllbGRzU3RhdGUpO1xuXG4gICAgICAgIGlmICh2YWxpZGF0aW9uRGF0YS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhvc3RlZEZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4odmFsaWRhdGlvbkRhdGEpO1xuXG4gICAgICAgIHRocm93IG5ldyBQYXltZW50SW52YWxpZEZvcm1FcnJvcih0aGlzLm1hcFZhbGlkYXRpb25FcnJvcnModmFsaWRhdGlvbkRhdGEuZXJyb3JzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWYWxpZGl0eURhdGEoe1xuICAgICAgICBmaWVsZHMsXG4gICAgfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiBIb3N0ZWRGaWVsZFZhbGlkYXRlRXZlbnREYXRhIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkcyA9IHsgLi4uZmllbGRzIH07XG5cbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRGaWVsZHMuY2FyZE5hbWVGaWVsZDtcblxuICAgICAgICBjb25zdCBmaWVsZHNLZXlzID0gT2JqZWN0LmtleXModXBkYXRlZEZpZWxkcykgYXMgQXJyYXk8XG4gICAgICAgICAgICBrZXlvZiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZVsnZmllbGRzJ11cbiAgICAgICAgPjtcblxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gZmllbGRzS2V5cy5ldmVyeSgoa2V5KSA9PiB1cGRhdGVkRmllbGRzW2tleV0/LmlzVmFsaWQpO1xuXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IGZpZWxkc0tleXMucmVkdWNlKChmaWVsZHNFcnJvcnMsIGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRUeXBlID0gdGhpcy5tYXBGaWVsZFR5cGUoa2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5maWVsZHNFcnJvcnMsXG4gICAgICAgICAgICAgICAgW2ZpZWxkVHlwZV06IHVwZGF0ZWRGaWVsZHNba2V5XT8uaXNWYWxpZFxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IFt0aGlzLmdldEludmFsaWRFcnJvckJ5RmllbGRUeXBlKGZpZWxkVHlwZSldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuXG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQsIGVycm9ycyB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SW52YWxpZEVycm9yQnlGaWVsZFR5cGUoZmllbGRUeXBlOiBzdHJpbmcpOiBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmRDb2RlOlxuICAgICAgICAgICAgY2FzZSBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGNvZGUnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX2NvZGUnLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmROdW1iZXI6XG4gICAgICAgICAgICBjYXNlIEhvc3RlZEZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX251bWJlcicsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2FzZSBIb3N0ZWRGaWVsZFR5cGUuQ2FyZEV4cGlyeTpcbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmRFeHBpcnlWZXJpZmljYXRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGV4cGlyeScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfZXhwaXJ5JyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZmllbGQnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZCcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbWFwVmFsaWRhdGlvbkVycm9ycyhcbiAgICAgICAgdmFsaWRhdGlvbkVycm9yczogSG9zdGVkSW5wdXRWYWxpZGF0ZUVycm9yRGF0YU1hcCA9IHt9LFxuICAgICk6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyB7XG4gICAgICAgIGNvbnN0IGVycm9yczogUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzID0ge307XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb25FcnJvcnNLZXlzID0gT2JqZWN0LmtleXModmFsaWRhdGlvbkVycm9ycykgYXMgQXJyYXk8XG4gICAgICAgICAgICBrZXlvZiBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhTWFwXG4gICAgICAgID47XG5cbiAgICAgICAgdmFsaWRhdGlvbkVycm9yc0tleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBlcnJvcnNba2V5XSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHZhbGlkYXRpb25FcnJvcnNba2V5XT8uWzBdPy5tZXNzYWdlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBrZXksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBGaWVsZHMgbWFwcGVyc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBtYXBGaWVsZFR5cGUodHlwZTogc3RyaW5nKTogSG9zdGVkRmllbGRUeXBlIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gSG9zdGVkRmllbGRUeXBlLkNhcmROYW1lO1xuXG4gICAgICAgICAgICBjYXNlICdjYXJkTnVtYmVyRmllbGQnOlxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0NyZWRpdENhcmRGb3JtXG4gICAgICAgICAgICAgICAgICAgID8gSG9zdGVkRmllbGRUeXBlLkNhcmROdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgOiBIb3N0ZWRGaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvbjtcblxuICAgICAgICAgICAgY2FzZSAnY2FyZEV4cGlyeUZpZWxkJzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGlyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNDcmVkaXRDYXJkRm9ybVxuICAgICAgICAgICAgICAgICAgICA/IEhvc3RlZEZpZWxkVHlwZS5DYXJkRXhwaXJ5XG4gICAgICAgICAgICAgICAgICAgIDogSG9zdGVkRmllbGRUeXBlLkNhcmRFeHBpcnlWZXJpZmljYXRpb247XG5cbiAgICAgICAgICAgIGNhc2UgJ2NhcmRDdnZGaWVsZCc6XG4gICAgICAgICAgICBjYXNlICdjdnYnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ3JlZGl0Q2FyZEZvcm1cbiAgICAgICAgICAgICAgICAgICAgPyBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVcbiAgICAgICAgICAgICAgICAgICAgOiBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb247XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGZpZWxkIHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhcmRGaWVsZHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbml0aWFsaXplZEVycm9yKE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jYXJkRmllbGRzO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SW5wdXRTdHlsZXMoXG4gICAgICAgIHN0eWxlcz86IEhvc3RlZEZpZWxkU3R5bGVzTWFwLFxuICAgICk6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzUmVuZGVyT3B0aW9uc1snc3R5bGVzJ10ge1xuICAgICAgICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgICAgICAgICAnZm9udC1zaXplJzogc3R5bGVzPy5kZWZhdWx0Py5mb250U2l6ZSB8fCAnMXJlbScsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOlxuICAgICAgICAgICAgICAgIHN0eWxlcz8uZGVmYXVsdD8uZm9udEZhbWlseSB8fCAnTW9udHNlcnJhdCwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAnZm9udC13ZWlnaHQnOiBzdHlsZXM/LmRlZmF1bHQ/LmZvbnRXZWlnaHQgfHwgJzQwMCcsXG4gICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICBwYWRkaW5nOiAnOXB4IDEzcHgnLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZXMgPSB7IC4uLmNvbW1vblN0eWxlcywgY29sb3I6ICcjMzMzMzMzJyB9O1xuICAgICAgICBjb25zdCBlcnJvclN0eWxlcyA9IHsgLi4uY29tbW9uU3R5bGVzLCBjb2xvcjogJ3JlZCcgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgICAnLmludmFsaWQnOiBlcnJvclN0eWxlcyxcbiAgICAgICAgICAgICcudmFsaWQnOiBkZWZhdWx0U3R5bGVzLFxuICAgICAgICAgICAgJzpmb2N1cyc6IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdHlsaXplSW5wdXRDb250YWluZXJzKFxuICAgICAgICBmaWVsZHM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAgfCBIb3N0ZWRTdG9yZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuICAgICk6IHZvaWQge1xuICAgICAgICBPYmplY3QudmFsdWVzKGZpZWxkcyB8fCB7fSkuZm9yRWFjaCgoaWQ6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpZD8uY29udGFpbmVySWQgfHwgJyd9YCk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzBweCc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5ib3hTaGFkb3cgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxMHB4JztcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAnLTVweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzVW5kZWZpbmVkVmFsdWVzKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0ZWRGb3JtT3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5ob3N0ZWRGb3JtT3B0aW9ucy5maWVsZHMpLnNvbWUoXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PiB2YWx1ZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSW5wdXQgZXZlbnRzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgb25DaGFuZ2VIYW5kbGVyKFxuICAgICAgICBmb3JtT3B0aW9uczogSG9zdGVkRm9ybU9wdGlvbnMsXG4gICAgICAgIGV2ZW50OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih0aGlzLmdldFZhbGlkaXR5RGF0YShldmVudCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Gb2N1c0hhbmRsZXIoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25Gb2N1cz8uKHRoaXMuZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoZXZlbnQpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQmx1ckhhbmRsZXIoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25CbHVyPy4odGhpcy5nZXRGaWVsZFR5cGVCeUVtaXR0ZWRGaWVsZChldmVudCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25JbnB1dFN1Ym1pdFJlcXVlc3QoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25FbnRlcj8uKHRoaXMuZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoZXZlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCBDb21tZXJjZSBBY2NlbGVyYXRlZCBjaGVja291dCByZWxhdGVkIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHBhcnQgd2hlbiBQUENQIEFYTyBBL0IgdGVzdGluZyB3aWxsIGJlIGZpbmlzaGVkXG4gICAgcHJpdmF0ZSBzaG91bGRJbml0aWFsaXplUGF5UGFsRmFzdGxhbmUobWV0aG9kSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgY29uc3QgcGF5cGFsQ29tbWVyY2VQYXltZW50UHJvdmlkZXJDdXN0b21lciA9IGlzUGF5UGFsQ29tbWVyY2VBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIoXG4gICAgICAgICAgICBwYXltZW50UHJvdmlkZXJDdXN0b21lcixcbiAgICAgICAgKVxuICAgICAgICAgICAgPyBwYXltZW50UHJvdmlkZXJDdXN0b21lclxuICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhPy5pc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkICYmXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kPy5pbml0aWFsaXphdGlvbkRhdGE/LmlzUGF5UGFsQ29tbWVyY2VBbmFseXRpY3NWMkVuYWJsZWQgJiZcbiAgICAgICAgICAgICFwYXlwYWxDb21tZXJjZVBheW1lbnRQcm92aWRlckN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgcGFydCB3aGVuIFBQQ1AgQVhPIEEvQiB0ZXN0aW5nIHdpbGwgYmUgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVQYXlQYWxGYXN0bGFuZU9yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemF0aW9uRGF0YT8uY29ubmVjdENsaWVudFRva2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwYXlQYWxGYXN0bGFuZVNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsRmFzdGxhbmVTZGsoXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBjYXJ0LmN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICAgICAgY2FydC5pZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVQYXlQYWxGYXN0bGFuZShcbiAgICAgICAgICAgICAgICBwYXlQYWxGYXN0bGFuZVNkayxcbiAgICAgICAgICAgICAgICAhIWluaXRpYWxpemF0aW9uRGF0YT8uaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKF86IHVua25vd24pIHtcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBhdm9pZCB0aHJvd2luZyBhbnkgZXJyb3IgZnJvbSB0aGlzIGZsb3cgdG8gZG8gbm8gYnJha2UgZGVmYXVsdCBmbG93XG4gICAgICAgICAgICAvLyBUaGlzIGZsb3cgaXMgb3B0aW9uYWxcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQYXlQYWxDb21tZXJjZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICBjdXN0b21lcj86IFBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuKTogY3VzdG9tZXIgaXMgUGF5UGFsQ29ubmVjdEN1c3RvbWVyIHtcbiAgICBpZiAoIWN1c3RvbWVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAnYXV0aGVudGljYXRpb25TdGF0ZScgaW4gY3VzdG9tZXIgfHwgJ2FkZHJlc3NlcycgaW4gY3VzdG9tZXIgfHwgJ2luc3RydW1lbnRzJyBpbiBjdXN0b21lclxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheXBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudFN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsoKSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzKCksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheXBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcycgfSxcbl0pO1xuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVGltZW91dEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQmlydGhEYXRlLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbE9yZGVyU3RhdHVzLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQge1xuICAgIFBheXBhbENvbW1lcmNlUmF0ZVBheSxcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VSYXRlUGF5UGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1yYXRlcGF5LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmNvbnN0IFBPTExJTkdfSU5URVJWQUwgPSAzMDAwO1xuY29uc3QgTUFYX1BPTExJTkdfVElNRSA9IDMwMDAwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGd1aWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXlwYWxjb21tZXJjZXJhdGVwYXk/OiBQYXlwYWxDb21tZXJjZVJhdGVQYXk7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcG9sbGluZ1RpbWVyID0gMDtcbiAgICBwcml2YXRlIHN0b3BQb2xsaW5nID0gbm9vcDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHByaXZhdGUgcG9sbGluZ0ludGVydmFsOiBudW1iZXIgPSBQT0xMSU5HX0lOVEVSVkFMLFxuICAgICAgICBwcml2YXRlIG1heFBvbGxpbmdJbnRlcnZhbFRpbWU6IG51bWJlciA9IE1BWF9QT0xMSU5HX1RJTUUsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlUmF0ZVBheVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBnYXRld2F5SWQsIG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZXJhdGVwYXkgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnYXRld2F5SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nYXRld2F5SWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlcmF0ZXBheSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlcmF0ZXBheVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbGVnYWxUZXh0Q29udGFpbmVyLCBjb250YWluZXIsIGxvYWRpbmdDb250YWluZXJJZCB9ID0gcGF5cGFsY29tbWVyY2VyYXRlcGF5O1xuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsZWdhbFRleHRDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5sZWdhbFRleHRDb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvYWRpbmdDb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmxvYWRpbmdDb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IGxvYWRpbmdDb250YWluZXJJZDtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KFxuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgbWVyY2hhbnRJZCB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXJjaGFudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBtZXJjaGFudElkIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5ID0gcGF5cGFsY29tbWVyY2VyYXRlcGF5O1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVGcmF1ZE5ldFNjcmlwdChtZXJjaGFudElkLCBtZXRob2RJZCwgZ2F0ZXdheUlkKTtcblxuICAgICAgICB0aGlzLmxvYWRGcmF1ZG5ldENvbmZpZygpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyTGVnYWxUZXh0KGxlZ2FsVGV4dENvbnRhaW5lciwgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKHBheWxvYWQ6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gcGF5bG9hZDtcblxuICAgICAgICBjb25zdCB7IGdldEZpZWxkc1ZhbHVlcyB9ID0gdGhpcy5wYXlwYWxjb21tZXJjZXJhdGVwYXkgfHwge307XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2V0RmllbGRzVmFsdWVzIHx8IHR5cGVvZiBnZXRGaWVsZHNWYWx1ZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nZXRGaWVsZHNWYWx1ZXNcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKFxuICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kc2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICB7IG1ldGFkYXRhSWQ6IHRoaXMuZ3VpZCB9LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgeyByYXRlcGF5QmlydGhEYXRlLCByYXRlcGF5UGhvbmVOdW1iZXIsIHJhdGVwYXlQaG9uZUNvdW50cnlDb2RlIH0gPVxuICAgICAgICAgICAgICAgIGdldEZpZWxkc1ZhbHVlcygpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWx0X3BheW1lbnRfaW5zdHJ1bWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRldmljZV9pbmZvOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RfaWQ6IHBheW1lbnQubWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIHJhdGVfcGF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaXJ0aF9kYXRlOiB0aGlzLm5vcm1hbGl6ZURhdGUocmF0ZXBheUJpcnRoRGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsX251bWJlcjogcmF0ZXBheVBob25lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlfY29kZTogcmF0ZXBheVBob25lQ291bnRyeUNvZGUuc3BsaXQoJysnKVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9pZDogb3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZDogcGF5bWVudC5tZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwYXltZW50RGF0YSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnQubWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudC5nYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT4gcmVqZWN0KCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBsZWdhbFRleHRDb250YWluZXIgfSA9IHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5IHx8IHt9O1xuICAgICAgICBjb25zdCBmcmF1ZE5ldFNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWlkPVwiZnJhdWRuZXRTY3JpcHRcIl0nKVswXTtcbiAgICAgICAgY29uc3QgZnJhdWROZXRDb25maWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1pZD1cImZyYXVkbmV0Q29uZmlnXCJdJylbMF07XG5cbiAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG5cbiAgICAgICAgZnJhdWROZXRTY3JpcHQucmVtb3ZlKCk7XG4gICAgICAgIGZyYXVkTmV0Q29uZmlnLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChsZWdhbFRleHRDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZWdhbFRleHRDb250YWluZXIpO1xuXG4gICAgICAgICAgICBsZWdhbFRleHRDb250YWluZXJFbGVtZW50Py5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vcm1hbGl6ZURhdGUoZGF0ZTogQmlydGhEYXRlKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSB0aGlzLmZvcm1hdERhdGUoZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRNb250aCA9IHRoaXMuZm9ybWF0RGF0ZShkYXRlLmdldE1vbnRoKCkgKyAxKTtcblxuICAgICAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS0ke2Zvcm1hdHRlZE1vbnRofS0ke2Zvcm1hdHRlZERhdGV9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdERhdGUoZGF0ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGUgPCAxMCA/IDAgOiAnJ30ke2RhdGV9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckxlZ2FsVGV4dChsZWdhbFRleHRDb250YWluZXJFbGVtZW50SWQ6IHN0cmluZywgY29udGFpbmVyOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbGVnYWxUZXh0Q29udGFpbmVySWQgPSBsZWdhbFRleHRDb250YWluZXJFbGVtZW50SWQ7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lcklkID0gY29udGFpbmVyLnNwbGl0KCcjJylbMV07XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbkNvbnRhaW5lcklkKTtcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyUGFyZW50ID0gYnV0dG9uQ29udGFpbmVyPy5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBsZWdhbFRleHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBsZWdhbFRleHRDb250YWluZXIuc3R5bGUubWFyZ2luQm90dG9tID0gJzIwcHgnO1xuICAgICAgICBsZWdhbFRleHRDb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsIGxlZ2FsVGV4dENvbnRhaW5lcklkKTtcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyUGFyZW50Py5wcmVwZW5kKGxlZ2FsVGV4dENvbnRhaW5lcik7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHJhdGVQYXlCdXR0b24gPSBwYXlwYWxTZGsuTGVnYWwoe1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkxlZ2FsLkZVTkRJTkcuUEFZX1VQT05fSU5WT0lDRSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZWdhbFRleHRDb250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJhdGVQYXlCdXR0b24ucmVuZGVyKGAjJHtsZWdhbFRleHRDb250YWluZXJJZH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwibGVnYWxUZXh0Q29udGFpbmVyRWxlbWVudFwiIGFyZ3VtZW50IGlzIG5vdCBmb3VuZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBvbkVycm9yIH0gPSB0aGlzLnBheXBhbGNvbW1lcmNlcmF0ZXBheSB8fCB7fTtcblxuICAgICAgICB0aGlzLnJlc2V0UG9sbGluZ01lY2hhbmlzbSgpO1xuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRnJhdWROZXRTY3JpcHQobWVyY2hhbnRJZDogc3RyaW5nLCBtZXRob2RJZDogc3RyaW5nLCBnYXRld2F5SWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQsIGdhdGV3YXlJZCk7XG4gICAgICAgIGNvbnN0IHsgdGVzdE1vZGUgfSA9IHBheW1lbnRNZXRob2QuY29uZmlnO1xuICAgICAgICBjb25zdCBzY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgICAgICAgc2NyaXB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICBzY3JpcHRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm5jbHMnLCAnZm5wYXJhbXMtZGVkZTdjYzUtMTVmZC00Yzc1LWE5ZjQtMzZjNDMwZWUzYTk5Jyk7XG4gICAgICAgIHNjcmlwdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgJ2ZyYXVkbmV0U2NyaXB0Jyk7XG4gICAgICAgIHRoaXMuZ3VpZCA9IHRoaXMuZ2VuZXJhdGVHVUlEKCk7XG5cbiAgICAgICAgY29uc3QgZnJhdWROZXRDb25maWcgPSB7XG4gICAgICAgICAgICBmOiB0aGlzLmd1aWQsXG4gICAgICAgICAgICBzOiBgJHttZXJjaGFudElkfV9jaGVja291dC1wYWdlYCxcbiAgICAgICAgICAgIHNhbmRib3g6IHRlc3RNb2RlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHNjcmlwdEVsZW1lbnQuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoZnJhdWROZXRDb25maWcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVHVUlEKCkge1xuICAgICAgICBsZXQgZ3VpZCA9ICcnO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVycy5sZW5ndGgpO1xuXG4gICAgICAgICAgICBndWlkICs9IGNoYXJhY3RlcnNbcmFuZG9tSW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGd1aWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRnJhdWRuZXRDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCAnZnJhdWRuZXRDb25maWcnKTtcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2MucGF5cGFsLmNvbS9kYS9yL2ZiLmpzJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVpbml0aWFsaXplU3RyYXRlZ3koXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZVJhdGVQYXlQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVpbml0aWFsaXplKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBvbGxpbmcgbWVjaGFuaXNtXG4gICAgICpcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcmVzb2x2ZVByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIHJlamVjdFByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIGdhdGV3YXlJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucG9sbGluZ1RpbWVyICs9IHRoaXMucG9sbGluZ0ludGVydmFsO1xuXG4gICAgICAgICAgICBjb25zdCBvcmRlclN0YXR1cyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgICAgICAgICAgJ3BheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlTWV0YWRhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzT3JkZXJBcHByb3ZlZCA9IG9yZGVyU3RhdHVzID09PSBQYXlQYWxPcmRlclN0YXR1cy5Qb2xsaW5nU3RvcDtcbiAgICAgICAgICAgIGNvbnN0IGlzUG9sbGluZ0Vycm9yID0gb3JkZXJTdGF0dXMgPT09IFBheVBhbE9yZGVyU3RhdHVzLlBvbGxpbmdFcnJvcjtcblxuICAgICAgICAgICAgaWYgKGlzT3JkZXJBcHByb3ZlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1BvbGxpbmdFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RQcm9taXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNPcmRlckFwcHJvdmVkICYmIHRoaXMucG9sbGluZ1RpbWVyIDwgdGhpcy5tYXhQb2xsaW5nSW50ZXJ2YWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVpbml0aWFsaXplU3RyYXRlZ3koe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICBwYXlwYWxjb21tZXJjZXJhdGVwYXk6IHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IobmV3IFRpbWVvdXRFcnJvcigpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgICAgIHRoaXMucG9sbGluZ1RpbWVyID0gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0UG9sbGluZ01lY2hhbmlzbSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIH0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWNvbnN0YW50cyc7XG5cbmltcG9ydCBQYXlwYWxDb21tZXJjZVJhdGVwYXlQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtcmF0ZXBheS1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheXBhbENvbW1lcmNlUmF0ZXBheVBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlwYWxDb21tZXJjZVJhdGVwYXlQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZXM6IHsgLi4uTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTLCBwb3NpdGlvbjogJ2ZpeGVkJyB9LFxuICAgICAgICB9KSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBnYXRld2F5OiAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMnLCBpZDogJ3JhdGVwYXknIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuLy8gVE9ETzogdXBkYXRlIFBheVBhbENvbm5lY3RDdXN0b21lciB3aXRoIFBheVBhbEZhc3RsYW5lQ3VzdG9tZXJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGF5UGFsRmFzdGxhbmVDdXN0b21lcihcbiAgICBjdXN0b21lcj86IFBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuKTogY3VzdG9tZXIgaXMgUGF5UGFsQ29ubmVjdEN1c3RvbWVyIHtcbiAgICBpZiAoIWN1c3RvbWVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAnYXV0aGVudGljYXRpb25TdGF0ZScgaW4gY3VzdG9tZXIgfHwgJ2FkZHJlc3NlcycgaW4gY3VzdG9tZXIgfHwgJ2luc3RydW1lbnRzJyBpbiBjdXN0b21lclxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICAgIENhcmRJbnN0cnVtZW50LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbiAgICBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHtcbiAgICBnZXRGYXN0bGFuZVN0eWxlcyxcbiAgICBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIsXG4gICAgaXNQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvcixcbiAgICBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLFxuICAgIFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHMsXG4gICAgUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICBQYXlQYWxGYXN0bGFuZVBheW1lbnRGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIFBheVBhbEZhc3RsYW5lU2RrLFxuICAgIFREU2VjdXJlQXV0aGVudGljYXRpb25TdGF0ZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXJlcXVlc3Qtc2VuZGVyJztcbmltcG9ydCB7IExpYWJpbGl0eVNoaWZ0RW51bSB9IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUZhc3RsYW5lUGF5bWVudEluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLXBheW1lbnQtaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5cGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXlwYWxDb21wb25lbnRNZXRob2RzPzogUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50TWV0aG9kcztcbiAgICBwcml2YXRlIHBheXBhbEZhc3RsYW5lU2RrPzogUGF5UGFsRmFzdGxhbmVTZGs7XG4gICAgcHJpdmF0ZSB0aHJlZURTVmVyaWZpY2F0aW9uTWV0aG9kPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsY29tbWVyY2VmYXN0bGFuZT86IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgbWV0aG9kSWQ/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlUmVxdWVzdFNlbmRlcjogUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlU2RrOiBQYXlQYWxDb21tZXJjZVNkayxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHM6IFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyxcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERlZmF1bHQgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VmYXN0bGFuZSB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5tZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VmYXN0bGFuZSA9IHBheXBhbGNvbW1lcmNlZmFzdGxhbmU7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZWZhc3RsYW5lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkluaXQgfHwgdHlwZW9mIHBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25Jbml0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkluaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZSB8fFxuICAgICAgICAgICAgdHlwZW9mIHBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25DaGFuZ2UgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlLCBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQgfSA9XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcblxuICAgICAgICB0aGlzLnRocmVlRFNWZXJpZmljYXRpb25NZXRob2QgPVxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LnRocmVlRFNWZXJpZmljYXRpb25NZXRob2Q7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxGYXN0bGFuZVNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsRmFzdGxhbmVTZGsoXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgY2FydC5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgY2FydC5pZCxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxGYXN0bGFuZVN0eWxpbmcgPSBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWRcbiAgICAgICAgICAgID8gcGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhPy5mYXN0bGFuZVN0eWxlc1xuICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICBjb25zdCBmYXN0bGFuZVN0eWxlcyA9IGdldEZhc3RsYW5lU3R5bGVzKFxuICAgICAgICAgICAgcGF5cGFsRmFzdGxhbmVTdHlsaW5nLFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZT8uc3R5bGVzLFxuICAgICAgICApO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVQYXlQYWxGYXN0bGFuZShcbiAgICAgICAgICAgIHRoaXMucGF5cGFsRmFzdGxhbmVTZGssXG4gICAgICAgICAgICAhIWlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUsXG4gICAgICAgICAgICBmYXN0bGFuZVN0eWxlcyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5zaG91bGRSdW5BdXRoZW50aWNhdGlvbkZsb3coKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5ydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVBheVBhbFBheW1lbnRDb21wb25lbnQoKTtcblxuICAgICAgICBwYXlwYWxjb21tZXJjZWZhc3RsYW5lLm9uSW5pdCgoY29udGFpbmVyOiBzdHJpbmcpID0+XG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbFBheW1lbnRDb21wb25lbnQoY29udGFpbmVyKSxcbiAgICAgICAgKTtcbiAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZSgoKSA9PiB0aGlzLmhhbmRsZVBheVBhbFN0b3JlZEluc3RydW1lbnRDaGFuZ2UobWV0aG9kSWQpKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKG9yZGVyUmVxdWVzdDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBvcmRlclJlcXVlc3Q7XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEsIG1ldGhvZElkIH0gPSBwYXltZW50O1xuXG4gICAgICAgIGNvbnN0IGlzVmF1bHRlZEZsb3cgPSBwYXltZW50RGF0YSAmJiBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgY29uc3QgcGF5bWVudFBheWxvYWQgPSBpc1ZhdWx0ZWRGbG93XG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLnByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCBwYXltZW50RGF0YSlcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCBwYXltZW50RGF0YSk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50PFBheVBhbEZhc3RsYW5lUGF5bWVudEZvcm1hdHRlZFBheWxvYWQ+KFxuICAgICAgICAgICAgICAgIHBheW1lbnRQYXlsb2FkLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMucmVtb3ZlU3RvcmFnZVNlc3Npb25JZCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3IoZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgZXJyb3IucmVzcG9uc2UuYm9keS5uYW1lID09PSAnSU5WQUxJRF9SRVFVRVNUJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZFJlcXVlc3RFcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25LZXk6ICdwYXltZW50LmVycm9ycy5pbnZhbGlkX3JlcXVlc3RfZXJyb3InLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGludmFsaWRSZXF1ZXN0RXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgIT09ICdGYXN0bGFuZUVycm9yJykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEF1dGhlbnRpY2F0aW9uIGZsb3cgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG91bGRSdW5BdXRoZW50aWNhdGlvbkZsb3coKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBwYXltZW50UHJvdmlkZXJDdXN0b21lciA9IHN0YXRlLmdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyKCk7XG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lQ3VzdG9tZXIgPSBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIocGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIpXG4gICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICA6IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID0gdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMuZ2V0U3RvcmFnZVNlc3Npb25JZCgpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFjdXN0b21lci5pc0d1ZXN0IHx8XG4gICAgICAgICAgICBwYXlwYWxGYXN0bGFuZUN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhcGF5cGFsRmFzdGxhbmVDdXN0b21lcj8uYXV0aGVudGljYXRpb25TdGF0ZSAmJiBwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCA9PT0gY2FydC5pZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJ1blBheVBhbEF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXJFbWFpbCA9IGN1c3RvbWVyPy5lbWFpbCB8fCBiaWxsaW5nQWRkcmVzcz8uZW1haWwgfHwgJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgY3VzdG9tZXJDb250ZXh0SWQgfSA9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMubG9va3VwQ3VzdG9tZXJPclRocm93KGN1c3RvbWVyRW1haWwpO1xuXG4gICAgICAgICAgICBjb25zdCBhdXRoZW50aWNhdGlvblJlc3VsdCA9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMudHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3coXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyQ29udGV4dElkLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25TdGF0ZSwgYWRkcmVzc2VzLCBpbnN0cnVtZW50cyB9ID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5tYXBQYXlQYWxGYXN0bGFuZVByb2ZpbGVUb0JjQ3VzdG9tZXJEYXRhKFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVBheW1lbnRQcm92aWRlckN1c3RvbWVyKHtcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlLFxuICAgICAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50cyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBpc0F1dGhlbnRpY2F0aW9uRmxvd0NhbmNlbGVkID1cbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlc3VsdC5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRDtcblxuICAgICAgICAgICAgaWYgKGlzQXV0aGVudGljYXRpb25GbG93Q2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5yZW1vdmVTdG9yYWdlU2Vzc2lvbklkKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLnVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQoY2FydC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBJbmZvOiBEbyBub3QgdGhyb3cgYW55dGhpbmcgaGVyZSB0byBhdm9pZCBibG9ja2luZyBjdXN0b21lciBmcm9tIHBhc3NpbmcgY2hlY2tvdXQgZmxvd1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgRmFzdGxhbmUgQ2FyZCBDb21wb25lbnQgcmVuZGVyaW5nIG1ldGhvZFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUGF5UGFsUGF5bWVudENvbXBvbmVudCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcbiAgICAgICAgY29uc3QgcGhvbmUgPSBiaWxsaW5nQWRkcmVzcy5waG9uZTtcbiAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBgJHtiaWxsaW5nQWRkcmVzcy5maXJzdE5hbWV9ICR7YmlsbGluZ0FkZHJlc3MubGFzdE5hbWV9YC50cmltKCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsRmFzdGxhbmUgPSB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5nZXRQYXlQYWxGYXN0bGFuZU9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBjYXJkQ29tcG9uZW50T3B0aW9uczogUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IGZ1bGxOYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKHBob25lICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IHBob25lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBheXBhbENvbXBvbmVudE1ldGhvZHMgPSBhd2FpdCBwYXlwYWxGYXN0bGFuZS5GYXN0bGFuZUNhcmRDb21wb25lbnQoXG4gICAgICAgICAgICBjYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbFBheW1lbnRDb21wb25lbnQoY29udGFpbmVyPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBheXBhbENvbXBvbmVudE1ldGhvZHMgPSB0aGlzLmdldFBheVBhbENvbXBvbmVudE1ldGhvZHNPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHJlbmRlciBjYXJkIGNvbXBvbmVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF5cGFsQ29tcG9uZW50TWV0aG9kcy5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheVBhbENvbXBvbmVudE1ldGhvZHNPclRocm93KCk6IFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHMge1xuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQ29tcG9uZW50TWV0aG9kcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxDb21wb25lbnRNZXRob2RzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5bWVudCBQYXlsb2FkIHByZXBhcmF0aW9uIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgcHJlcGFyZVZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudFBheWxvYWQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheW1lbnREYXRhOiBWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICApOiBQcm9taXNlPFBheW1lbnQ8UGF5UGFsRmFzdGxhbmVQYXltZW50Rm9ybWF0dGVkUGF5bG9hZD4+IHtcbiAgICAgICAgY29uc3QgeyBpbnN0cnVtZW50SWQgfSA9IHBheW1lbnREYXRhO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IGlzM0RTRW5hYmxlZCA9XG4gICAgICAgICAgICB0aGlzLmlzUGF5cGFsQ29tbWVyY2VGYXN0bGFuZVRocmVlRFNBdmFpbGFibGUoKSAmJiBwYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG5cbiAgICAgICAgaWYgKCFpczNEU0VuYWJsZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlT3JkZXIoaW5zdHJ1bWVudElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lVG9rZW4gPSBpczNEU0VuYWJsZWQgPyBhd2FpdCB0aGlzLmdldDNEU05vbmNlKGluc3RydW1lbnRJZCkgOiBpbnN0cnVtZW50SWQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9mYXN0bGFuZV90b2tlbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHRoaXMub3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBmYXN0bGFuZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcHJlcGFyZVBheW1lbnRQYXlsb2FkKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXltZW50RGF0YTogT3JkZXJQYXltZW50UmVxdWVzdEJvZHlbJ3BheW1lbnREYXRhJ10sXG4gICAgKTogUHJvbWlzZTxQYXltZW50PFBheVBhbEZhc3RsYW5lUGF5bWVudEZvcm1hdHRlZFBheWxvYWQ+PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBmdWxsTmFtZSA9IGAke2JpbGxpbmdBZGRyZXNzLmZpcnN0TmFtZX0gJHtiaWxsaW5nQWRkcmVzcy5sYXN0TmFtZX1gLnRyaW0oKTtcblxuICAgICAgICBjb25zdCB7IGdldFBheW1lbnRUb2tlbiB9ID0gdGhpcy5nZXRQYXlQYWxDb21wb25lbnRNZXRob2RzT3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IGF3YWl0IGdldFBheW1lbnRUb2tlbih7XG4gICAgICAgICAgICBuYW1lOiB7IGZ1bGxOYW1lIH0sXG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczogdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMubWFwQmNUb1BheVBhbEFkZHJlc3MoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBpczNEU0VuYWJsZWQgPVxuICAgICAgICAgICAgdGhpcy5pc1BheXBhbENvbW1lcmNlRmFzdGxhbmVUaHJlZURTQXZhaWxhYmxlKCkgJiYgcGF5bWVudE1ldGhvZC5jb25maWcuaXMzZHNFbmFibGVkO1xuXG4gICAgICAgIGlmICghaXMzRFNFbmFibGVkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZU9yZGVyKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lVG9rZW4gPSBpczNEU0VuYWJsZWQgPyBhd2FpdCB0aGlzLmdldDNEU05vbmNlKGlkKSA6IGlkO1xuXG4gICAgICAgIGNvbnN0IHsgc2hvdWxkU2F2ZUluc3RydW1lbnQgPSBmYWxzZSwgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCA9IGZhbHNlIH0gPVxuICAgICAgICAgICAgaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSkgPyBwYXltZW50RGF0YSA6IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgLi4ucGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2F2ZUluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9mYXN0bGFuZV90b2tlbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHRoaXMub3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBmYXN0bGFuZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlT3JkZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0SWQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmlkO1xuICAgICAgICBpZiAodGhpcy5tZXRob2RJZCkge1xuICAgICAgICAgICAgY29uc3QgeyBvcmRlcklkIH0gPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlUmVxdWVzdFNlbmRlci5jcmVhdGVPcmRlcih0aGlzLm1ldGhvZElkLCB7XG4gICAgICAgICAgICAgICAgY2FydElkLFxuICAgICAgICAgICAgICAgIGZhc3RsYW5lVG9rZW46IGlkLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIDNEU2VjdXJlIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBnZXQzRFNOb25jZShwYXlwYWxOb25jZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyID0gc3RhdGUuZ2V0T3JkZXJPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGNoZWNrb3V0VXJsID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkubGlua3MuY2hlY2tvdXRMaW5rO1xuXG4gICAgICAgIGNvbnN0IHRocmVlRG9tYWluU2VjdXJlQ29tcG9uZW50ID0gdGhpcy5wYXlwYWxGYXN0bGFuZVNkaz8uVGhyZWVEb21haW5TZWN1cmVDbGllbnQ7XG5cbiAgICAgICAgaWYgKCF0aHJlZURvbWFpblNlY3VyZUNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aHJlZURvbWFpblNlY3VyZVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBhbW91bnQ6IG9yZGVyLm9yZGVyQW1vdW50LnRvRml4ZWQoMiksXG4gICAgICAgICAgICBjdXJyZW5jeTogY2FydC5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgbm9uY2U6IHBheXBhbE5vbmNlLFxuICAgICAgICAgICAgdGhyZWVEU1JlcXVlc3RlZDogdGhpcy50aHJlZURTVmVyaWZpY2F0aW9uTWV0aG9kID09PSAnU0NBX0FMV0FZUycsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBleHBlcmllbmNlX2NvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiAnZW4tVVMnLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5fdXJsOiBjaGVja291dFVybCxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsX3VybDogY2hlY2tvdXRVcmwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaXNUaHJlZURvbWFpblNlY3VyZUVsaWdpYmxlID0gYXdhaXQgdGhyZWVEb21haW5TZWN1cmVDb21wb25lbnQuaXNFbGlnaWJsZShcbiAgICAgICAgICAgIHRocmVlRG9tYWluU2VjdXJlUGFyYW1ldGVycyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNUaHJlZURvbWFpblNlY3VyZUVsaWdpYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxpYWJpbGl0eVNoaWZ0LCBhdXRoZW50aWNhdGlvblN0YXRlLCBub25jZSB9ID1cbiAgICAgICAgICAgICAgICBhd2FpdCB0aHJlZURvbWFpblNlY3VyZUNvbXBvbmVudC5zaG93KCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBsaWFiaWxpdHlTaGlmdCA9PT0gTGlhYmlsaXR5U2hpZnRFbnVtLk5vIHx8XG4gICAgICAgICAgICAgICAgbGlhYmlsaXR5U2hpZnQgPT09IExpYWJpbGl0eVNoaWZ0RW51bS5Vbmtub3duIHx8XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25TdGF0ZSA9PT0gVERTZWN1cmVBdXRoZW50aWNhdGlvblN0YXRlLkVycm9yZWQgfHxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlID09PSBURFNlY3VyZUF1dGhlbnRpY2F0aW9uU3RhdGUuQ2FuY2VsbGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb25TdGF0ZSA9PT0gVERTZWN1cmVBdXRoZW50aWNhdGlvblN0YXRlLlN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlT3JkZXIobm9uY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub25jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXlwYWxOb25jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCBGYXN0bGFuZSBpbnN0cnVtZW50IGNoYW5nZVxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVQYXlQYWxTdG9yZWRJbnN0cnVtZW50Q2hhbmdlKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8Q2FyZEluc3RydW1lbnQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgcGF5cGFsQXhvU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMuZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBzZWxlY3Rpb25DaGFuZ2VkLCBzZWxlY3RlZENhcmQgfSA9IGF3YWl0IHBheXBhbEF4b1Nkay5wcm9maWxlLnNob3dDYXJkU2VsZWN0b3IoKTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lQ3VzdG9tZXIgPSBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIocGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIpXG4gICAgICAgICAgICAgICAgPyBwYXltZW50UHJvdmlkZXJDdXN0b21lclxuICAgICAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkSW5zdHJ1bWVudCA9IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLm1hcFBheVBhbFRvQmNJbnN0cnVtZW50KFxuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZCxcbiAgICAgICAgICAgIClbMF07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgLi4ucGF5cGFsRmFzdGxhbmVDdXN0b21lcixcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50czogW3NlbGVjdGVkSW5zdHJ1bWVudF0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkSW5zdHJ1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgRmFzdGxhbmUgZXhwZXJpbWVudHMgaGFuZGxpbmdcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNQYXlwYWxDb21tZXJjZUZhc3RsYW5lVGhyZWVEU0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuXG4gICAgICAgIHJldHVybiBpc0V4cGVyaW1lbnRFbmFibGVkKGZlYXR1cmVzLCAnUFJPSkVDVC03MDgwLnBheXBhbGNvbW1lcmNlX2Zhc3RsYW5lX3RocmVlX2RzJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bik6IHZvaWQge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnBheXBhbGNvbW1lcmNlZmFzdGxhbmU/Lm9uRXJyb3IgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25FcnJvciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3Ige1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcmVzcG9uc2U6IHtcbiAgICAgICAgYm9keToge1xuICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3IoXG4gICAgZXJyb3I6IHVua25vd24sXG4pOiBlcnJvciBpcyBQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxuICAgICAgICAnbWVzc2FnZScgaW4gZXJyb3IgJiZcbiAgICAgICAgJ3Jlc3BvbnNlJyBpbiBlcnJvciAmJlxuICAgICAgICAnYm9keScgaW4gKGVycm9yIGFzIFBheXBhbEZhc3RsYW5lUmVxdWVzdEVycm9yKS5yZXNwb25zZSAmJlxuICAgICAgICAnbmFtZScgaW4gKGVycm9yIGFzIFBheXBhbEZhc3RsYW5lUmVxdWVzdEVycm9yKS5yZXNwb25zZS5ib2R5XG4gICAgKTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVJlcXVlc3RTZW5kZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXJlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgeyBnZXRIb3N0IH0gPSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICByZXR1cm4gbmV3IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIG5ldyBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIoY3JlYXRlUmVxdWVzdFNlbmRlcih7IGhvc3Q6IGdldEhvc3QoKSB9KSksXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrKCksXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscygpLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZWFjY2VsZXJhdGVkY2hlY2tvdXQnIH0sIC8vIFBheVBhbCBGYXN0bGFuZSByZWxhdGVzIHRvICdwYXlwYWxjb21tZXJjZWFjY2VsZXJhdGVkY2hlY2tvdXQnIG1ldGhvZCBpZFxuXSk7XG4iXSwibmFtZXMiOlsiTWlzc2luZ0RhdGFFcnJvclR5cGUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwidG9SZXNvbHZhYmxlTW9kdWxlIiwibW9kdWxlIiwicmVzb2x2ZUlkcyIsIk9iamVjdCIsImFzc2lnbiIsImQiLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3RhbmRhcmRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwic3VwZXIiLCJuYW1lIiwidHlwZSIsInNldFByb3RvdHlwZU9mIiwidGhpcyIsIl9fcHJvdG9fXyIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2siLCJQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvciIsIk1pc3NpbmdEYXRhRXJyb3IiLCJzdWJ0eXBlIiwiTWlzc2luZ0JpbGxpbmdBZGRyZXNzIiwiTWlzc2luZ0NhcnQiLCJNaXNzaW5nQ29uc2lnbm1lbnRzIiwiTWlzc2luZ0NoZWNrb3V0IiwiTWlzc2luZ0N1c3RvbWVyIiwiTWlzc2luZ0NoZWNrb3V0Q29uZmlnIiwiTWlzc2luZ09yZGVyQ29uZmlnIiwiTWlzc2luZ09yZGVyIiwiTWlzc2luZ09yZGVySWQiLCJNaXNzaW5nUGF5bWVudCIsIk1pc3NpbmdQYXltZW50VG9rZW4iLCJNaXNzaW5nUGF5bWVudE1ldGhvZCIsIk1pc3NpbmdTaGlwcGluZ0FkZHJlc3MiLCJnZXRFcnJvck1lc3NhZ2UiLCJCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvciIsIkRFRkFVTFRfUkVTUE9OU0UiLCJib2R5IiwiaGVhZGVycyIsInN0YXR1cyIsIlJlcXVlc3RFcnJvciIsInJlc3BvbnNlIiwiZXJyb3JzIiwiQ2FydFNvdXJjZSIsIkxpYWJpbGl0eVNoaWZ0RW51bSIsIlBheVBhbENvbW1lcmNlSW50ZW50IiwiU3R5bGVCdXR0b25MYWJlbCIsIlN0eWxlQnV0dG9uQ29sb3IiLCJTdHlsZUJ1dHRvblNoYXBlIiwiTm9uSW5zdGFudEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMiLCJQYXlQYWxPcmRlclN0YXR1cyIsIlBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIiwiZm9ybVBvc3RlciIsInBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UiLCJwYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIiLCJwYXlwYWxDb21tZXJjZVNjcmlwdExvYWRlciIsImxvYWRQYXlQYWxTZGsiLCJtZXRob2RJZCIsInByb3ZpZGVkQ3VycmVuY3lDb2RlIiwiaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZSIsImZvcmNlTG9hZCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJjdXJyZW5jeUNvZGUiLCJnZXRDYXJ0T3JUaHJvdyIsImN1cnJlbmN5IiwiY29kZSIsInBheW1lbnRNZXRob2QiLCJnZXRQYXltZW50TWV0aG9kT3JUaHJvdyIsInBheXBhbFNkayIsImdldFBheVBhbFNESyIsImdldFBheVBhbFNka09yVGhyb3ciLCJjcmVhdGVCdXlOb3dDYXJ0T3JUaHJvdyIsImJ1eU5vd0luaXRpYWxpemVPcHRpb25zIiwiY2FydFJlcXVlc3RCb2R5IiwiZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5IiwiY3JlYXRlQnV5Tm93Q2FydCIsImVycm9yIiwiY3JlYXRlT3JkZXIiLCJwcm92aWRlcklkIiwicmVxdWVzdEJvZHkiLCJjYXJ0SWQiLCJpZCIsIm9yZGVySWQiLCJjcmVhdGVPcmRlckNhcmRGaWVsZHMiLCJzZXR1cFRva2VuIiwidXBkYXRlT3JkZXIiLCJjYXJ0IiwiY29uc2lnbm1lbnQiLCJnZXRDb25zaWdubWVudHNPclRocm93IiwiYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zIiwic2VsZWN0ZWRTaGlwcGluZ09wdGlvbiIsIl9lcnJvciIsImdldE9yZGVyU3RhdHVzIiwib3B0aW9ucyIsInRva2VuaXplUGF5bWVudCIsInBvc3RGb3JtIiwicGF5bWVudF90eXBlIiwiYWN0aW9uIiwicHJvdmlkZXIiLCJvcmRlcl9pZCIsInNvdXJjZSIsIkJ1eU5vdyIsImNhcnRfaWQiLCJzdWJtaXRQYXltZW50IiwiZ2F0ZXdheUlkIiwicGF5bWVudERhdGEiLCJmb3JtYXR0ZWRQYXlsb2FkIiwidmF1bHRfcGF5bWVudF9pbnN0cnVtZW50Iiwic2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQiLCJkZXZpY2VfaW5mbyIsIm1ldGhvZF9pZCIsInBheXBhbF9hY2NvdW50IiwiZ2V0U2hpcHBpbmdPcHRpb25PclRocm93Iiwic2VsZWN0ZWRTaGlwcGluZ09wdGlvbklkIiwicmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiIsImZpbmQiLCJvcHRpb24iLCJpc1JlY29tbWVuZGVkIiwic2hpcHBpbmdPcHRpb25Ub1NlbGVjdCIsImdldEFkZHJlc3MiLCJhZGRyZXNzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsInBob25lIiwiY29tcGFueSIsImFkZHJlc3MxIiwiYWRkcmVzczIiLCJjaXR5IiwiY291bnRyeUNvZGUiLCJwb3N0YWxDb2RlIiwic3RhdGVPclByb3ZpbmNlIiwic3RhdGVPclByb3ZpbmNlQ29kZSIsImN1c3RvbUZpZWxkcyIsImdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyIsInBheWVyIiwiZ2l2ZW5fbmFtZSIsInN1cm5hbWUiLCJlbWFpbF9hZGRyZXNzIiwiYWRkcmVzc19saW5lXzEiLCJhZGRyZXNzX2xpbmVfMiIsImFkbWluX2FyZWFfMiIsImNvdW50cnlfY29kZSIsInBvc3RhbF9jb2RlIiwiYWRtaW5fYXJlYV8xIiwicGhvbmVfbnVtYmVyIiwibmF0aW9uYWxfbnVtYmVyIiwiZ2V0U2hpcHBpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyIsIm9yZGVyRGV0YWlscyIsInB1cmNoYXNlX3VuaXRzIiwiZnVsbF9uYW1lIiwic2hpcHBpbmciLCJzcGxpdCIsImpvaW4iLCJnZXRWYWxpZEJ1dHRvblN0eWxlIiwic3R5bGUiLCJjb2xvciIsImhlaWdodCIsImxhYmVsIiwic2hhcGUiLCJ2YWxpZFN0eWxlcyIsInVuZGVmaW5lZCIsImdldFZhbGlkSGVpZ2h0Iiwib21pdEJ5IiwiaXNOaWwiLCJyZW1vdmVFbGVtZW50IiwiZWxlbWVudElkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkaXNwbGF5IiwiSU5URVJOQUxfVVNFX09OTFkiLCJDb250ZW50VHlwZSIsIlNES19WRVJTSU9OX0hFQURFUlMiLCJQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIiLCJyZXF1ZXN0U2VuZGVyIiwidXJsIiwiSnNvbiIsInBvc3QiLCJwdXQiLCJQYXlQYWxDb21tZXJjZVNjcmlwdExvYWRlciIsInNjcmlwdExvYWRlciIsIndpbmRvdyIsInBheXBhbFNka1NjcmlwdENvbmZpZyIsImdldFBheVBhbFNka1NjcmlwdENvbmZpZ09yVGhyb3ciLCJsb2FkUGF5UGFsU0RLIiwicGF5cGFsIiwidHJhbnNmb3JtQ29uZmlnIiwiYXR0cmlidXRlcyIsInNjcmlwdFNyYyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwibG9hZFNjcmlwdCIsImFzeW5jIiwiY2xpZW50VG9rZW4iLCJpbml0aWFsaXphdGlvbkRhdGEiLCJjbGllbnRJZCIsImludGVudCIsIm1lcmNoYW50SWQiLCJidXllckNvdW50cnkiLCJhdHRyaWJ1dGlvbklkIiwiaXNWZW5tb0VuYWJsZWQiLCJpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCIsImlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlIiwiaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSIsImF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMiLCJlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyIsImlzR29vZ2xlUGF5RW5hYmxlZCIsImNvbW1pdCIsInNob3VsZEVuYWJsZUNhcmQiLCJlbmFibGVDYXJkRnVuZGluZyIsImVuYWJsZUNyZWRpdEZ1bmRpbmciLCJzaG91bGRFbmFibGVBUE1zIiwiZW5hYmxlVmVubW9GdW5kaW5nIiwiZW5hYmxlQVBNc0Z1bmRpbmciLCJnb29nbGVQYXlDb21wb25lbnQiLCJjYXJkRmllbGRzQ29tcG9uZW50IiwiZGlzYWJsZUZ1bmRpbmciLCJmaWx0ZXIiLCJhcG0iLCJpbmNsdWRlcyIsImVuYWJsZUZ1bmRpbmciLCJsZW5ndGgiLCJjb21wb25lbnRzIiwiY29uZmlnIiwidHJhbnNmb3JtZWRDb25maWciLCJrZXlzIiwiZm9yRWFjaCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0SG9zdCIsImNyZWF0ZUZvcm1Qb3N0ZXIiLCJjcmVhdGVSZXF1ZXN0U2VuZGVyIiwiaG9zdCIsImdldFNjcmlwdExvYWRlciIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5IiwicGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UiLCJvbkVycm9yIiwibm9vcCIsImluaXRpYWxpemUiLCJwYXlwYWxjb21tZXJjZSIsImNvbnRhaW5lciIsIm9uQ2xpY2siLCJnZXRQYXltZW50TWV0aG9kIiwibG9hZFBheW1lbnRNZXRob2QiLCJCdXR0b25zIiwicmVuZGVyQnV0dG9uIiwiY29uc29sZSIsImRlaW5pdGlhbGl6ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2lnbkluIiwiY3JlZGVudGlhbHMiLCJzaWduSW5DdXN0b21lciIsInNpZ25PdXQiLCJzaWduT3V0Q3VzdG9tZXIiLCJleGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0IiwiY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjayIsIm9uQ29tcGxldGUiLCJwYXltZW50QnV0dG9uU3R5bGVzIiwiaXNBcHBTd2l0Y2hFbmFibGVkIiwiY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMiLCJkZWZhdWx0Q2FsbGJhY2tzIiwiaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQiLCJhcHBTd2l0Y2hXaGVuQXZhaWxhYmxlIiwib25BcHByb3ZlIiwib3JkZXJJRCIsImhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzIiwib25TaGlwcGluZ0FkZHJlc3NDaGFuZ2UiLCJkYXRhIiwib25TaGlwcGluZ09wdGlvbnNDaGFuZ2UiLCJhY3Rpb25zIiwib25Ib3N0ZWRDaGVja291dEFwcHJvdmUiLCJidXR0b25SZW5kZXJPcHRpb25zIiwiZnVuZGluZ1NvdXJjZSIsIkZVTkRJTkciLCJQQVlQQUwiLCJwYXlwYWxCdXR0b24iLCJpc0VsaWdpYmxlIiwiaGFzUmV0dXJuZWQiLCJyZXN1bWUiLCJyZW5kZXIiLCJvcmRlciIsImJpbGxpbmdBZGRyZXNzIiwidXBkYXRlQmlsbGluZ0FkZHJlc3MiLCJsaW5lSXRlbXMiLCJwaHlzaWNhbEl0ZW1zIiwic2hpcHBpbmdBZGRyZXNzIiwidXBkYXRlU2hpcHBpbmdBZGRyZXNzIiwic3VibWl0T3JkZXIiLCJwYXJhbXMiLCJoYW5kbGVFcnJvciIsInNoaXBwaW5nT3B0aW9uIiwic2VsZWN0U2hpcHBpbmdPcHRpb24iLCJQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVyU3RyYXRlZ3kiLCJwYXlwYWxjb21tZXJjZWNyZWRpdCIsInBheXBhbENvbW1lcmNlQ3JlZGl0IiwiZnVuZGluZ1NvdXJjZXMiLCJQQVlMQVRFUiIsIkNSRURJVCIsImhhc1JlbmRlcmVkU21hcnRCdXR0b24iLCJQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneSIsInBheXBhbGNvbW1lcmNldmVubW8iLCJWRU5NTyIsInBheXBhbEJ1dHRvblJlbmRlciIsIlVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUiLCJURFNlY3VyZUF1dGhlbnRpY2F0aW9uU3RhdGUiLCJQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUiLCJQYXlQYWxDb21tZXJjZVNkayIsImdldFBheVBhbEZhc3RsYW5lU2RrIiwic2Vzc2lvbklkIiwicGF5cGFsRmFzdGxhbmVTZGsiLCJnZXRQYXlQYWxGYXN0bGFuZVNka0NvbmZpZ3VyYXRpb24iLCJnZXRQYXlQYWxHb29nbGVQYXlTZGsiLCJwYXlwYWxHb29nbGVQYXkiLCJnZXRQYXlQYWxHb29nbGVQYXlTZGtTY3JpcHRDb25maWdPclRocm93IiwiZ2V0UGF5UGFsQXBtc1NkayIsInBheXBhbEFwbXMiLCJnZXRQYXlQYWxBcG1TZGtDb25maWd1cmF0aW9uIiwiZ2V0UGF5UGFsTWVzc2FnZXMiLCJwYXlwYWxNZXNzYWdlcyIsInBheXBhbFNka01lc3NhZ2VzQ29uZmlnIiwiZ2V0UGF5UGFsU2RrTWVzc2FnZXNDb25maWd1cmF0aW9uIiwic2NyaXB0T3B0aW9ucyIsInNjcmlwdEF0dHJpYnV0ZXMiLCJyZXBsYWNlIiwiZGlzYWJsZUFQTXNGdW5kaW5nIiwiY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsiLCJjcmVhdGVTY3JpcHRMb2FkZXIiLCJDb29raWVTdG9yYWdlIiwiY29va2llS2V5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29va2llIiwiZmlyc3RJbmRleCIsImluZGV4T2YiLCJsYXN0SW5kZXgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdWJzdHJpbmciLCJzZXQiLCJzZWN1cmUiLCJjb29raWVUZXh0IiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJ0b1VUQ1N0cmluZyIsIm5vdyIsIkRhdGUiLCJtaW51dGVzIiwic2V0VGltZSIsImdldFRpbWUiLCJyZW1vdmUiLCJQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMiLCJpbml0aWFsaXplUGF5UGFsRmFzdGxhbmUiLCJpc1Rlc3RNb2RlRW5hYmxlZCIsInN0eWxlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJwYXlwYWxGYXN0bGFuZSIsImRlZmF1bHRTdHlsZXMiLCJyb290IiwiYmFja2dyb3VuZENvbG9yUHJpbWFyeSIsIkZhc3RsYW5lIiwiZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93IiwibG9va3VwQ3VzdG9tZXJPclRocm93IiwiaWRlbnRpdHkiLCJsb29rdXBDdXN0b21lckJ5RW1haWwiLCJ0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyIsImN1c3RvbWVyQ29udGV4dElkIiwidHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyIsInVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImNvb2tpZXNPcHRpb24iLCJyZW1vdmVTdG9yYWdlU2Vzc2lvbklkIiwiZ2V0U3RvcmFnZVNlc3Npb25JZCIsIm1hcFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGEiLCJhdXRoZW50aWNhdGlvblJlc3VsdCIsImF1dGhlbnRpY2F0aW9uU3RhdGUiLCJwcm9maWxlRGF0YSIsInBheXBhbEJpbGxpbmdBZGRyZXNzIiwiY2FyZCIsInBheW1lbnRTb3VyY2UiLCJwYXlwYWxTaGlwcGluZ0FkZHJlc3MiLCJwYXlwYWxQcm9maWxlTmFtZSIsInBheXBhbEluc3RydW1lbnQiLCJtYXBQYXlQYWxUb0JjQWRkcmVzcyIsInBob25lTnVtYmVyIiwiaW5zdHJ1bWVudHMiLCJtYXBQYXlQYWxUb0JjSW5zdHJ1bWVudCIsImFkZHJlc3NlcyIsImZpbHRlckFkZHJlc3NlcyIsIlVOUkVDT0dOSVpFRCIsImluc3RydW1lbnQiLCJicmFuZCIsImV4cGlyeSIsImxhc3REaWdpdHMiLCJleHBpcnlZZWFyIiwiZXhwaXJ5TW9udGgiLCJiaWdwYXlUb2tlbiIsImRlZmF1bHRJbnN0cnVtZW50IiwiaWluIiwibGFzdDQiLCJtZXRob2QiLCJ0cnVzdGVkU2hpcHBpbmdBZGRyZXNzIiwidW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uTW9kZSIsIlBBTiIsIm1hcEJjVG9QYXlQYWxBZGRyZXNzIiwiYWRkcmVzc0xpbmUxIiwiYWRkcmVzc0xpbmUyIiwiYWRtaW5BcmVhMSIsImFkbWluQXJlYTIiLCJwcm9maWxlTmFtZSIsImZ1bGxOYW1lIiwicGhvbmVEYXRhIiwibmF0aW9uYWxOdW1iZXIiLCJjb3VudHJ5IiwicmVkdWNlIiwiY3VzdG9tZXJBZGRyZXNzZXMiLCJjdXJyZW50QWRkcmVzcyIsInNvbWUiLCJjdXN0b21lckFkZHJlc3MiLCJpc0VxdWFsQWRkcmVzc2VzIiwiZmlyc3RBZGRyZXNzIiwic2Vjb25kQWRkcmVzcyIsImlzRXF1YWwiLCJub3JtYWxpemVBZGRyZXNzIiwib21pdCIsImNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyIsImlzSW52YWxpZFN0eWxlT3B0aW9uIiwic3R5bGVPcHRpb24iLCJnZXRGYXN0bGFuZVN0eWxlcyIsInN0eWxlU2V0dGluZ3MiLCJ1aVN0eWxlcyIsImZhc3RsYW5lU3R5bGVzIiwiaW5wdXQiLCJ0b2dnbGUiLCJ0ZXh0Qm9keSIsInRleHQiLCJ0ZXh0Q2FwdGlvbiIsImNhcHRpb24iLCJicmFuZGluZyIsImNsZWFuVXBGYXN0bGFuZVN0eWxlcyIsImZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yIiwiZXJyb3JDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvciIsImZvbnRGYW1pbHkiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHkiLCJmb250U2l6ZUJhc2UiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRTaXplIiwicGFkZGluZyIsImZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyIsInByaW1hcnlDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyUmFkaXVzIiwiYm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvciIsImZvY3VzQm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIiwidGV4dENvbG9yQmFzZSIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UiLCJjb2xvclByaW1hcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JTZWNvbmRhcnkiLCJmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvciIsImZvbnRTaXplIiwiZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzRm9udFNpemUiLCJmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NDb2xvciIsImZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0ZvbnRTaXplIiwiZmFzdGxhbmVCcmFuZGluZ1NldHRpbmdzIiwibWVyZ2VGYXN0bGFuZVN0eWxlcyIsIlBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5IiwicGF5cGFsQ29tbWVyY2VTZGsiLCJwYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMiLCJwYXlwYWxjb21tZXJjZWZhc3RsYW5lIiwiXyIsImNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkIiwiZ2V0Q3VzdG9tZXJPclRocm93IiwiaXNHdWVzdCIsInJ1blBheVBhbEF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3ciLCJjdXN0b21lciIsImdldEN1c3RvbWVyIiwiZ2V0QmlsbGluZ0FkZHJlc3MiLCJjdXN0b21lckVtYWlsIiwiaXNBdXRoZW50aWNhdGlvbkZsb3dDYW5jZWxlZCIsIkNBTkNFTEVEIiwidXBkYXRlQ3VzdG9tZXJEYXRhU3RhdGUiLCJ1cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lciIsInVwZGF0ZWRTdGF0ZSIsImlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkIiwiY29uc2lnbm1lbnRzIiwiZ2V0Q29uc2lnbm1lbnRzIiwiZmlyc3RTaGlwcGluZ09wdGlvbiIsInNoaXBwaW5nT3B0aW9uSWQiLCJpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQiLCJQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5IiwiY29udGFpbmVySWQiLCJpc0J1eU5vd0Zsb3ciLCJCb29sZWFuIiwibG9hZERlZmF1bHRDaGVja291dCIsIm9uRWxpZ2liaWxpdHlGYWlsdXJlIiwiYnV5Tm93Rmxvd0NhbGxiYWNrcyIsImhhbmRsZUNsaWNrIiwib25DYW5jZWwiLCJidXlOb3dDYXJ0IiwibG9hZENoZWNrb3V0IiwibWVzc2FnZXNTdHlsZXMiLCJsYXlvdXQiLCJsb2dvIiwicG9zaXRpb24iLCJyYXRpbyIsInNpemUiLCJQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5IiwibWVzc2FnaW5nQ29udGFpbmVySWQiLCJmZWF0dXJlcyIsImdldFN0b3JlQ29uZmlnT3JUaHJvdyIsImNoZWNrb3V0U2V0dGluZ3MiLCJtZXNzYWdpbmdDb250YWluZXIiLCJwYXlwYWxCTlBMQ29uZmlndXJhdGlvbiIsImJhbm5lckNvbmZpZ3VyYXRpb24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW5kZXJNZXNzYWdlcyIsInBheXBhbE1lc3NhZ2VzU2RrIiwicGF5cGFsTWVzc2FnZXNPcHRpb25zIiwiYW1vdW50IiwiZ2V0Q2hlY2tvdXRPclRocm93Iiwib3V0c3RhbmRpbmdCYWxhbmNlIiwicGxhY2VtZW50IiwiTWVzc2FnZXMiLCJQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3kiLCJnZXRWYWxpZFZlbm1vQnV0dG9uU3R5bGVzIiwidmFsaWRCdXR0b25TdHlsZSIsImdvbGQiLCJQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvblN0cmF0ZWd5IiwicGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMiLCJ2YWx1ZXMiLCJERUZBVUxUX1NUWUxFUyIsIlJPVEFUSU9OX0FOSU1BVElPTiIsIkxvYWRpbmdJbmRpY2F0b3IiLCJjb250YWluZXJTdHlsZXMiLCJkZWZpbmVBbmltYXRpb24iLCJidWlsZENvbnRhaW5lciIsImluZGljYXRvciIsImJ1aWxkSW5kaWNhdG9yIiwiYXBwZW5kQ2hpbGQiLCJzaG93IiwicGFyZW50SWQiLCJwYXJlbnQiLCJ2aXNpYmlsaXR5Iiwib3BhY2l0eSIsImhpZGUiLCJoYW5kbGVUcmFuc2l0aW9uRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiYm90dG9tIiwibGVmdCIsIndpZHRoIiwicmlnaHQiLCJ0b3AiLCJ0cmFuc2l0aW9uIiwic2V0U3R5bGVBdHRyaWJ1dGUiLCJib3JkZXIiLCJtYXJnaW4iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1TdHlsZSIsImFuaW1hdGlvbiIsImF0dHJzIiwiayIsInNldFByb3BlcnR5IiwiaGVhZCIsInNoZWV0IiwiQ1NTU3R5bGVTaGVldCIsImluc2VydFJ1bGUiLCJMT0FESU5HX0lORElDQVRPUl9TVFlMRVMiLCJQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IiLCJpbnZhbGlkRmllbGRzIiwiUGF5bWVudE1ldGhvZEludmFsaWRFcnJvciIsIk9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvciIsImlzSG9zdGVkSW5zdHJ1bWVudExpa2UiLCJzaG91bGRTYXZlSW5zdHJ1bWVudCIsInNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQiLCJpc1ZhdWx0ZWRJbnN0cnVtZW50IiwiaW5zdHJ1bWVudElkIiwiaXNCYXNlSW5zdHJ1bWVudCIsIlBheVBhbENvbW1lcmNlUGF5bWVudFN0cmF0ZWd5IiwibG9hZGluZ0luZGljYXRvciIsImJhbm5lckNvbnRhaW5lcklkIiwibG9hZGluZ0luZGljYXRvckNvbnRhaW5lciIsIm9uSW5pdCIsInNob3VsZFJlbmRlclBheVBhbEJ1dHRvbk9uSW5pdGlhbGl6YXRpb24iLCJleGVjdXRlIiwicGF5bG9hZCIsInBheW1lbnQiLCJpc1BheVBhbFZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudERhdGEiLCJwYXltZW50UGF5bG9hZCIsInByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkIiwicHJlcGFyZVBheW1lbnRQYXlsb2FkIiwiYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQiLCJpc1JlZGlyZWN0QWN0aW9uRXJyb3IiLCJyZWRpcmVjdFVybCIsInJlZGlyZWN0X3VybCIsImxvY2F0aW9uIiwiaXNQcm92aWRlckVycm9yIiwiX3Jlc29sdmUiLCJyZWplY3QiLCJjbG9zZSIsImZpbmFsaXplIiwicGF5cGFsT3JkZXJJZCIsInNob3VsZENvbmZpcm1JbnN0cnVtZW50IiwiaXNUcnVzdGVkVmF1bHRpbmdGbG93IiwiYmlncGF5X3Rva2VuIiwidG9rZW4iLCJjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMiLCJvblJlbmRlckJ1dHRvbiIsIm9uVmFsaWRhdGUiLCJzdWJtaXRGb3JtIiwiYnV0dG9uT3B0aW9ucyIsImhhbmRsZUFwcHJvdmUiLCJ0b2dnbGVMb2FkaW5nSW5kaWNhdG9yIiwiZmllbGRzVmFsdWVzIiwiZ2V0RmllbGRzVmFsdWVzIiwiZ2V0SW5zdHJ1bWVudHMiLCJmaW5kSW5zdHJ1bWVudCIsImlzTG9hZGluZyIsImlzUGF5cGFsQ29tbWVyY2VQcm92aWRlckVycm9yIiwiZSIsInByb3ZpZGVyX2Vycm9yIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsIlBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5IiwicGF5cGFsT3B0aW9ucyIsIlBheVBhbENvbW1lcmNlVmVubW9QYXltZW50U3RyYXRlZ3kiLCJUaW1lb3V0RXJyb3IiLCJpc0V4cGVyaW1lbnRFbmFibGVkIiwiZXhwZXJpbWVudE5hbWUiLCJmYWxsYmFja1ZhbHVlIiwiUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3kiLCJwb2xsaW5nSW50ZXJ2YWwiLCJtYXhQb2xsaW5nSW50ZXJ2YWxUaW1lIiwicG9sbGluZ1RpbWVyIiwic3RvcFBvbGxpbmciLCJpc1BvbGxpbmdFbmFibGVkIiwic2hvdWxkUmVuZGVyRmllbGRzIiwicmVuZGVyRmllbGRzIiwiaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20iLCJpc05vbkluc3RhbnRQYXltZW50TWV0aG9kIiwicmVzZXRQb2xsaW5nTWVjaGFuaXNtIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJvcmRlclN0YXR1cyIsImlzT3JkZXJBcHByb3ZlZCIsIkFwcHJvdmVkIiwiaXNQb2xsaW5nRXJyb3IiLCJQb2xsaW5nRXJyb3IiLCJkZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtIiwicmVpbml0aWFsaXplU3RyYXRlZ3kiLCJwYXlwYWxBbXBzU2RrIiwiZ2V0UGF5cGFsQW1wc1Nka09yVGhyb3ciLCJidXR0b25TdHlsZSIsIm9uSW5pdEJ1dHRvbiIsIm9uQ3JlYXRlT3JkZXIiLCJoYW5kbGVGYWlsdXJlIiwidXNlU3RvcmVDcmVkaXQiLCJnZXRCaWxsaW5nQWRkcmVzc09yVGhyb3ciLCJhcG1GaWVsZHNDb250YWluZXIiLCJhcG1GaWVsZHNTdHlsZXMiLCJmaWVsZENvbnRhaW5lckVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZmllbGRzT3B0aW9ucyIsImZpZWxkcyIsIlBheW1lbnRGaWVsZHMiLCJ0b1VwcGVyQ2FzZSIsImdhdGV3YXkiLCJIb3N0ZWRGaWVsZFR5cGUiLCJpc0NyZWRpdENhcmRGb3JtRmllbGRzIiwiQ2FyZE51bWJlciIsIkNhcmROYW1lIiwiQ2FyZEV4cGlyeSIsImlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzIiwiQ2FyZE51bWJlclZlcmlmaWNhdGlvbiIsIkNhcmRDb2RlVmVyaWZpY2F0aW9uIiwiQ2FyZEV4cGlyeVZlcmlmaWNhdGlvbiIsIlBheW1lbnRNZXRob2RGYWlsZWRFcnJvciIsIk5vdEluaXRpYWxpemVkRXJyb3JUeXBlIiwiTm90SW5pdGlhbGl6ZWRFcnJvciIsIkN1c3RvbWVyTm90SW5pdGlhbGl6ZWQiLCJQYXltZW50Tm90SW5pdGlhbGl6ZWQiLCJTaGlwcGluZ05vdEluaXRpYWxpemVkIiwiU3BhbVByb3RlY3Rpb25Ob3RJbml0aWFsaXplZCIsIlBheW1lbnRJbnZhbGlkRm9ybUVycm9yIiwiZGV0YWlscyIsIlBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3kiLCJwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzIiwicGF5cGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbk9wdGlvbnMiLCJmb3JtIiwib25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IiLCJvbkxvYWRDb21wbGV0ZSIsImhvc3RlZEZvcm1PcHRpb25zIiwiaXNDcmVkaXRDYXJkRm9ybSIsImlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtIiwiaGFzVW5kZWZpbmVkVmFsdWVzIiwiaW5pdGlhbGl6ZUZpZWxkcyIsInNob3VsZEluaXRpYWxpemVQYXlQYWxGYXN0bGFuZSIsImluaXRpYWxpemVQYXlQYWxGYXN0bGFuZU9yVGhyb3ciLCJleGVjdXRpb25QYXltZW50RGF0YSIsInZhbGlkYXRlSG9zdGVkRm9ybU9yVGhyb3ciLCJzdWJtaXRIb3N0ZWRGb3JtIiwiZ2V0SW5zdHJ1bWVudFBhcmFtcyIsInJldHVybmVkT3JkZXJJZCIsInN1Ym1pdFBheW1lbnRQYXlsb2FkIiwicmV0dXJuZWRWYXVsdGVkVG9rZW4iLCJjdnZGaWVsZCIsImV4cGlyeUZpZWxkIiwibnVtYmVyRmllbGQiLCJuYW1lRmllbGQiLCJub25jZSIsInZlcmlmaWNhdGlvbl9ub25jZSIsImNhcmRfd2l0aF9vcmRlciIsImZvcm1PcHRpb25zIiwiZXhlY3V0ZUNhbGxiYWNrIiwiZ2V0RXhlY3V0ZUNhbGxiYWNrIiwiY2FyZEZpZWxkc0NvbmZpZyIsImdldElucHV0U3R5bGVzIiwidmF1bHRTZXR1cFRva2VuIiwibGlhYmlsaXR5U2hpZnQiLCJObyIsIlVua25vd24iLCJpbnB1dEV2ZW50cyIsIm9uQ2hhbmdlIiwiZXZlbnQiLCJvbkNoYW5nZUhhbmRsZXIiLCJvbkZvY3VzIiwib25Gb2N1c0hhbmRsZXIiLCJvbkJsdXIiLCJvbkJsdXJIYW5kbGVyIiwib25JbnB1dFN1Ym1pdFJlcXVlc3QiLCJjYXJkRmllbGRzIiwiQ2FyZEZpZWxkcyIsInN0eWxpemVJbnB1dENvbnRhaW5lcnMiLCJyZW5kZXJWYXVsdGVkRmllbGRzIiwiY3JlYXRlVmF1bHRTZXR1cFRva2VuQ2FsbGJhY2siLCJjcmVhdGVPcmRlckNhbGxiYWNrIiwiY3JlYXRlVmF1bHRTZXR1cFRva2VuIiwiZ2V0Q2FyZEZpZWxkc09yVGhyb3ciLCJjYXJkQ29kZSIsIkNWVkZpZWxkIiwicGxhY2Vob2xkZXIiLCJjYXJkRXhwaXJ5IiwiRXhwaXJ5RmllbGQiLCJjYXJkTmFtZSIsIk5hbWVGaWVsZCIsImNhcmROdW1iZXIiLCJOdW1iZXJGaWVsZCIsImNhcmRDb2RlVmVyaWZpY2F0aW9uIiwiY2FyZEV4cGlyeVZlcmlmaWNhdGlvbiIsImNhcmROdW1iZXJWZXJpZmljYXRpb24iLCJnZXRGaWVsZFR5cGVCeUVtaXR0ZWRGaWVsZCIsImVtaXR0ZWRCeSIsImZpZWxkVHlwZSIsIm1hcEZpZWxkVHlwZSIsInN1Ym1pdENvbmZpZyIsInN1Ym1pdCIsImNhcmRGaWVsZHNTdGF0ZSIsInRoZW4iLCJ2YWxpZGF0aW9uRGF0YSIsImdldFZhbGlkaXR5RGF0YSIsImlzVmFsaWQiLCJtYXBWYWxpZGF0aW9uRXJyb3JzIiwidXBkYXRlZEZpZWxkcyIsImNhcmROYW1lRmllbGQiLCJmaWVsZHNLZXlzIiwiZXZlcnkiLCJmaWVsZHNFcnJvcnMiLCJnZXRJbnZhbGlkRXJyb3JCeUZpZWxkVHlwZSIsIkNhcmRDb2RlIiwidmFsaWRhdGlvbkVycm9ycyIsImNvbW1vblN0eWxlcyIsImRlZmF1bHQiLCJmb250V2VpZ2h0Iiwib3V0bGluZSIsImJveFNoYWRvdyIsImJhY2tncm91bmQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0Iiwib25FbnRlciIsInBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIiLCJwYXlwYWxDb21tZXJjZVBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZCIsImlzUGF5UGFsQ29tbWVyY2VBbmFseXRpY3NWMkVuYWJsZWQiLCJjb25uZWN0Q2xpZW50VG9rZW4iLCJwYXlQYWxGYXN0bGFuZVNkayIsIlBheXBhbENvbW1lcmNlUmF0ZXBheVBheW1lbnRTdHJhdGVneSIsInBheXBhbGNvbW1lcmNlcmF0ZXBheSIsImxlZ2FsVGV4dENvbnRhaW5lciIsImxvYWRpbmdDb250YWluZXJJZCIsImNyZWF0ZUZyYXVkTmV0U2NyaXB0IiwibG9hZEZyYXVkbmV0Q29uZmlnIiwicmVuZGVyTGVnYWxUZXh0IiwibWV0YWRhdGFJZCIsImd1aWQiLCJyYXRlcGF5QmlydGhEYXRlIiwicmF0ZXBheVBob25lTnVtYmVyIiwicmF0ZXBheVBob25lQ291bnRyeUNvZGUiLCJyYXRlX3BheSIsImJpcnRoX2RhdGUiLCJub3JtYWxpemVEYXRlIiwiZnJhdWROZXRTY3JpcHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZnJhdWROZXRDb25maWciLCJsZWdhbFRleHRDb250YWluZXJFbGVtZW50IiwiZGF0ZSIsImZvcm1hdHRlZERhdGUiLCJmb3JtYXREYXRlIiwiZm9ybWF0dGVkTW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwibGVnYWxUZXh0Q29udGFpbmVyRWxlbWVudElkIiwibGVnYWxUZXh0Q29udGFpbmVySWQiLCJidXR0b25Db250YWluZXJJZCIsImJ1dHRvbkNvbnRhaW5lciIsImJ1dHRvbkNvbnRhaW5lclBhcmVudCIsInBhcmVudE5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJwcmVwZW5kIiwicmF0ZVBheUJ1dHRvbiIsIkxlZ2FsIiwiUEFZX1VQT05fSU5WT0lDRSIsInRlc3RNb2RlIiwic2NyaXB0RWxlbWVudCIsImdlbmVyYXRlR1VJRCIsImYiLCJzIiwic2FuZGJveCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpIiwiTWF0aCIsImZsb29yIiwiY2hhcmFjdGVycyIsInJhbmRvbSIsInNjcmlwdCIsInNyYyIsInVzZU1ldGFkYXRhIiwiUG9sbGluZ1N0b3AiLCJpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIiLCJQYXlwYWxDb21tZXJjZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5IiwidGhyZWVEU1ZlcmlmaWNhdGlvbk1ldGhvZCIsInNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdyIsImluaXRpYWxpemVQYXlQYWxQYXltZW50Q29tcG9uZW50IiwicmVuZGVyUGF5UGFsUGF5bWVudENvbXBvbmVudCIsImhhbmRsZVBheVBhbFN0b3JlZEluc3RydW1lbnRDaGFuZ2UiLCJvcmRlclJlcXVlc3QiLCJpc1ZhdWx0ZWRGbG93IiwiaXNQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvciIsImludmFsaWRSZXF1ZXN0RXJyb3IiLCJ0cmFuc2xhdGlvbktleSIsInBheXBhbEZhc3RsYW5lQ3VzdG9tZXIiLCJwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCIsInRyaW0iLCJjYXJkQ29tcG9uZW50T3B0aW9ucyIsImNhcmRob2xkZXJOYW1lIiwicHJlZmlsbCIsImVuYWJsZWQiLCJwYXlwYWxDb21wb25lbnRNZXRob2RzIiwiRmFzdGxhbmVDYXJkQ29tcG9uZW50IiwiZ2V0UGF5UGFsQ29tcG9uZW50TWV0aG9kc09yVGhyb3ciLCJpczNEU0VuYWJsZWQiLCJpc1BheXBhbENvbW1lcmNlRmFzdGxhbmVUaHJlZURTQXZhaWxhYmxlIiwiaXMzZHNFbmFibGVkIiwiZmFzdGxhbmVUb2tlbiIsImdldDNEU05vbmNlIiwicGF5cGFsX2Zhc3RsYW5lX3Rva2VuIiwiZ2V0UGF5bWVudFRva2VuIiwicGF5cGFsTm9uY2UiLCJnZXRPcmRlck9yVGhyb3ciLCJjaGVja291dFVybCIsImxpbmtzIiwiY2hlY2tvdXRMaW5rIiwidGhyZWVEb21haW5TZWN1cmVDb21wb25lbnQiLCJUaHJlZURvbWFpblNlY3VyZUNsaWVudCIsInRocmVlRG9tYWluU2VjdXJlUGFyYW1ldGVycyIsIm9yZGVyQW1vdW50IiwidG9GaXhlZCIsInRocmVlRFNSZXF1ZXN0ZWQiLCJ0cmFuc2FjdGlvbkNvbnRleHQiLCJleHBlcmllbmNlX2NvbnRleHQiLCJsb2NhbGUiLCJyZXR1cm5fdXJsIiwiY2FuY2VsX3VybCIsIkVycm9yZWQiLCJDYW5jZWxsZWQiLCJTdWNjZWVkZWQiLCJwYXlwYWxBeG9TZGsiLCJzZWxlY3Rpb25DaGFuZ2VkIiwic2VsZWN0ZWRDYXJkIiwicHJvZmlsZSIsInNob3dDYXJkU2VsZWN0b3IiLCJzZWxlY3RlZEluc3RydW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js\n\n}");

/***/ })

}]);