{"version":3,"file":"5003-27a61293.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNameField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardFieldset/HostedCreditCardFieldset.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedCreditCardValidationSchema/getHostedCreditCardValidationSchema.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/credit-card-integration/src/create-credit-card-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import { type CardInstrument, type LegacyHostedFormOptions } from '@bigcommerce/checkout-sdk';\nimport { createBlueSnapDirectCreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bluesnap-direct';\nimport { createCreditCardPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/credit-card';\nimport { compact, forIn } from 'lodash';\nimport React, { type FunctionComponent, type ReactNode, useCallback, useState } from 'react';\n\nimport {\n    CreditCardPaymentMethodComponent,\n    type CreditCardPaymentMethodProps,\n} from '@bigcommerce/checkout/credit-card-integration';\nimport {\n    CreditCardCustomerCodeField,\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { getHostedCreditCardValidationSchema } from './getHostedCreditCardValidationSchema';\nimport { getHostedInstrumentValidationSchema } from './getHostedInstrumentValidationSchema';\nimport { HostedCreditCardFieldset } from './HostedCreditCardFieldset';\nimport { HostedCreditCardValidation } from './HostedCreditCardValidation';\n\nconst HostedCreditCardComponent: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n\n    const { setFieldTouched, setFieldValue, setSubmitted, submitForm } = paymentForm;\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n    const {\n        config: { cardCode, showCardHolderName },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const isCardHolderNameRequired = showCardHolderName ?? true;\n\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            let styleContainerId = '';\n\n            if (selectedInstrument) {\n                if (isInstrumentCardCodeRequired) {\n                    styleContainerId = getHostedFieldId('ccCvv');\n                } else if (isInstrumentCardNumberRequired) {\n                    styleContainerId = getHostedFieldId('ccNumber');\n                }\n            } else {\n                styleContainerId = getHostedFieldId('ccNumber');\n            }\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification: isInstrumentCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                          cardNumberVerification: isInstrumentCardNumberRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_number_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccNumber'),\n                                    instrumentId: selectedInstrument.bigpayToken,\n                                }\n                              : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: isCardHolderNameRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_name_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccName'),\n                                }\n                              : undefined,\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isCardHolderNameRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldValue,\n            setFieldTouched,\n            setFocusedFieldType,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n\n    const hostedFieldset = (\n        <HostedCreditCardFieldset\n            additionalFields={\n                method.config.requireCustomerCode && (\n                    <CreditCardCustomerCodeField name=\"ccCustomerCode\" />\n                )\n            }\n            cardCodeId={isCardCodeRequired ? getHostedFieldId('ccCvv') : undefined}\n            cardExpiryId={getHostedFieldId('ccExpiry')}\n            cardNameId={isCardHolderNameRequired ? getHostedFieldId('ccName') : undefined}\n            cardNumberId={getHostedFieldId('ccNumber')}\n            focusedFieldType={focusedFieldType}\n        />\n    );\n    const hostedValidationSchema = getHostedCreditCardValidationSchema({ language });\n\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n\n    const initializePayment = checkoutService.initializePayment;\n\n    const initializeHostedCreditCardPayment: CreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    integrations: [\n                        createCreditCardPaymentStrategy,\n                        createBlueSnapDirectCreditCardPaymentStrategy,\n                    ],\n                    creditCard: {\n                        form: await getHostedFormOptions(selectedInstrument),\n                        bigpayToken: selectedInstrument?.bigpayToken,\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment],\n        );\n\n    const hostedStoredCardValidationSchema = getHostedInstrumentValidationSchema({ language });\n\n    const props = {\n        checkoutService,\n        checkoutState,\n        paymentForm,\n        language,\n        method,\n        onUnhandledError,\n    };\n\n    return (\n        <CreditCardPaymentMethodComponent\n            {...props}\n            cardFieldset={hostedFieldset}\n            cardValidationSchema={hostedValidationSchema}\n            deinitializePayment={checkoutService.deinitializePayment}\n            getHostedFormOptions={getHostedFormOptions}\n            getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n            initializePayment={initializeHostedCreditCardPayment}\n            storedCardValidationSchema={hostedStoredCardValidationSchema}\n        />\n    );\n};\n\nexport default HostedCreditCardComponent;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNameFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardNameField: FunctionComponent<HostedCreditCardNameFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccName\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_name_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNameField;\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type ReactNode } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { Fieldset, Legend } from '@bigcommerce/checkout/ui';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNameField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardFieldsetProps {\n    additionalFields?: ReactNode;\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNameId?: string;\n    cardNumberId: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardFieldset: FunctionComponent<HostedCreditCardFieldsetProps> = ({\n    additionalFields,\n    cardCodeId,\n    cardExpiryId,\n    cardNameId,\n    cardNumberId,\n    focusedFieldType,\n}) => (\n    <Fieldset\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div\n            className={classNames('form-ccFields', {\n                'form-ccFields--without-card-name': !cardNameId,\n                'form-ccFields--without-card-code': !cardCodeId,\n            })}\n        >\n            <HostedCreditCardNumberField\n                appearFocused={focusedFieldType === 'cardNumber'}\n                id={cardNumberId}\n                name=\"hostedForm.errors.cardNumber\"\n            />\n\n            <HostedCreditCardExpiryField\n                appearFocused={focusedFieldType === 'cardExpiry'}\n                id={cardExpiryId}\n                name=\"hostedForm.errors.cardExpiry\"\n            />\n\n            {Boolean(cardNameId) && (\n                <HostedCreditCardNameField\n                    appearFocused={focusedFieldType === 'cardName'}\n                    id={cardNameId}\n                    name=\"hostedForm.errors.cardName\"\n                />\n            )}\n\n            {Boolean(cardCodeId) && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCode\"\n                />\n            )}\n\n            {additionalFields}\n        </div>\n    </Fieldset>\n);\n\nexport default HostedCreditCardFieldset;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedCreditCardValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport interface HostedCreditCardValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCode: string;\n            cardExpiry: string;\n            cardName: string;\n            cardNumber: string;\n        };\n    };\n}\n\nexport default memoize(function getHostedCreditCardValidationSchema({\n    language,\n}: HostedCreditCardValidationSchemaOptions): ObjectSchema<HostedCreditCardValidationSchemaShape> {\n    return object().shape<HostedCreditCardValidationSchemaShape>({\n        hostedForm: object()\n            .required()\n            .shape<HostedCreditCardValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedCreditCardValidationSchemaShape['hostedForm']['errors']>({\n                        cardCode: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardExpiry: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_expiration_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_expiry',\n                            }),\n\n                        cardName: string().test({\n                            message: language.translate('payment.credit_card_name_required_error'),\n                            test: (value) => value !== 'required',\n                        }),\n\n                        cardNumber: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            }),\n                    }),\n            }),\n    });\n});\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { isNil, values } from 'lodash';\n\nimport {\n    HostedForm,\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithCreditCardPaymentInitializeOptions } from './credit-card-payment-initialize-options';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    protected _hostedForm?: HostedForm;\n    protected _shouldRenderHostedForm?: boolean;\n\n    constructor(protected _paymentIntegrationService: PaymentIntegrationService) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        return this._isHostedPaymentFormEnabled(\n            payload.payment?.methodId,\n            payload.payment?.gatewayId,\n        ) && this._shouldRenderHostedForm\n            ? this._executeWithHostedForm(payload, options)\n            : this._executeWithoutHostedForm(payload, options);\n    }\n\n    initialize(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): Promise<void> {\n        if (\n            !this._isHostedPaymentFormEnabled(options?.methodId, options?.gatewayId) ||\n            !this._isHostedFieldAvailable(options)\n        ) {\n            this._shouldRenderHostedForm = false;\n\n            return Promise.resolve();\n        }\n\n        const formOptions = options && options.creditCard && options.creditCard.form;\n        const state = this._paymentIntegrationService.getState();\n        const { paymentSettings: { bigpayBaseUrl: host = '' } = {} } =\n            state.getStoreConfigOrThrow();\n\n        if (!formOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        const form = this._paymentIntegrationService.createHostedForm(host, formOptions);\n\n        return form.attach().then(() => {\n            this._shouldRenderHostedForm = true;\n            this._hostedForm = form;\n\n            return Promise.resolve();\n        });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._hostedForm) {\n            this._hostedForm.detach();\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    protected async _executeWithoutHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n    }\n\n    protected async _executeWithHostedForm(\n        payload: OrderRequestBody,\n        options?: PaymentRequestOptions,\n    ): Promise<void> {\n        const { payment, ...order } = payload;\n        const form = this._hostedForm;\n\n        if (!form) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payment || !payment.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        await form.validate().then(() => form.submit(payment));\n    }\n\n    protected _isHostedPaymentFormEnabled(methodId?: string, gatewayId?: string): boolean {\n        if (!methodId) {\n            return false;\n        }\n\n        const state = this._paymentIntegrationService.getState();\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private _isHostedFieldAvailable(\n        options?: PaymentInitializeOptions & WithCreditCardPaymentInitializeOptions,\n    ): boolean {\n        return !values(options && options.creditCard && options.creditCard.form.fields).every(\n            isNil,\n        );\n    }\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport CreditCardPaymentStrategy from './credit-card-payment-strategy';\n\nconst createCreditCardPaymentStrategy: PaymentStrategyFactory<CreditCardPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new CreditCardPaymentStrategy(paymentIntegrationService);\n};\n\nexport default toResolvableModule(createCreditCardPaymentStrategy, [{ default: true }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["method","checkoutService","checkoutState","paymentForm","language","onUnhandledError","focusedFieldType","setFocusedFieldType","useState","setFieldTouched","setFieldValue","setSubmitted","submitForm","isInstrumentCardCodeRequiredProp","isInstrumentCardNumberRequiredProp","config","cardCode","showCardHolderName","isCardCodeRequired","isCardHolderNameRequired","getHostedFieldId","useCallback","name","compact","gateway","id","join","getHostedFormOptions","selectedInstrument","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","styleContainerId","fields","cardCodeVerification","accessibilityLabel","translate","containerId","instrumentId","bigpayToken","undefined","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","styles","default","error","Error","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","errors","forIn","fieldErrors","errorKey","type","hostedFieldset","additionalFields","requireCustomerCode","cardCodeId","cardExpiryId","cardNameId","cardNumberId","hostedValidationSchema","getHostedStoredCardValidationFieldset","initializePayment","initializeHostedCreditCardPayment","options","integrations","creditCard","form","hostedStoredCardValidationSchema","props","cardFieldset","cardValidationSchema","deinitializePayment","getStoredCardValidationFieldset","storedCardValidationSchema","appearFocused","renderInput","additionalClassName","input","labelContent","TextInputIframeContainer","FormField","TranslatedString","Fieldset","legend","Legend","hidden","className","HostedCreditCardNumberField","HostedCreditCardExpiryField","Boolean","HostedCreditCardCodeField","shape","hostedForm","required","test","message","value","useMemo","placement","tooltip","isCardExpiryRequired","cardExpiryVerification","CreditCardInputStylesType","getCreditCardInputStyles","properties","Default","container","document","createElement","parentContainer","getElementById","appendChild","Promise","resolve","Provider","isSubmitted","noop","hasError","ref","element","parentElement","removeChild","testId","NotInitializedErrorType","StandardError","constructor","prototype","super","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","OrderFinalizationNotRequiredError","PaymentArgumentInvalidError","invalidFields","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","subtype","CreditCardPaymentStrategy","_paymentIntegrationService","execute","payload","_isHostedPaymentFormEnabled","payment","methodId","gatewayId","_shouldRenderHostedForm","_executeWithHostedForm","_executeWithoutHostedForm","initialize","_isHostedFieldAvailable","formOptions","state","getState","paymentSettings","bigpayBaseUrl","host","getStoreConfigOrThrow","createHostedForm","attach","then","_hostedForm","deinitialize","detach","finalize","reject","order","paymentData","submitOrder","submitPayment","validate","submit","getPaymentMethodOrThrow","isHostedFormEnabled","values","every","isNil","module","paymentIntegrationService","resolveIds","assign"],"sourceRoot":""}