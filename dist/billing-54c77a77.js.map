{"version":3,"file":"billing-54c77a77.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/billing/BillingForm.tsx","webpack://checkout/./packages/core/src/app/billing/Billing.tsx","webpack://checkout/./packages/core/src/app/billing/getBillingMethodId.ts"],"sourcesContent":["import {\n    type Address,\n    type FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { type FormikProps, withFormik } from 'formik';\nimport React, { type RefObject, useRef, useState } from 'react';\nimport { lazy } from 'yup';\n\nimport { TranslatedString, withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { useCheckout } from '@bigcommerce/checkout/payment-integration-api';\nimport { usePayPalFastlaneAddress } from '@bigcommerce/checkout/paypal-fastlane-integration';\nimport { AddressFormSkeleton, LoadingOverlay, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport {\n  AddressForm,\n  type AddressFormValues,\n  AddressSelect,\n  AddressType,\n  getAddressFormFieldsValidationSchema,\n  getTranslateAddressError,\n  isValidCustomerAddress,\n  mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { OrderComments } from '../orderComments';\nimport { getShippableItemsCount } from '../shipping';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\n\nimport StaticBillingAddress from './StaticBillingAddress';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    methodId?: string;\n    billingAddress?: Address;\n    customerMessage: string;\n    navigateNextStep(): void;\n    onSubmit(values: BillingFormValues): void;\n    onUnhandledError(error: Error): void;\n    getFields(countryCode?: string): FormField[];\n}\n\nconst BillingForm = ({\n    methodId,\n    getFields,\n    billingAddress,\n    setFieldValue,\n    values,\n    onUnhandledError,\n}: BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>) => {\n    const [isResettingAddress, setIsResettingAddress] = useState(false);\n    const addressFormRef: RefObject<HTMLFieldSetElement> = useRef(null);\n    const { isPayPalFastlaneEnabled, paypalFastlaneAddresses } = usePayPalFastlaneAddress();\n\n    const { themeV2 } = useThemeContext();\n    const { checkoutService, checkoutState } = useCheckout();\n\n    const {\n        data: { getCustomer, getConfig, getCart },\n        statuses: { isUpdatingBillingAddress, isUpdatingCheckout },\n    } = checkoutState;\n    const customer = getCustomer();\n    const config = getConfig();\n    const cart = getCart();\n\n    if (!config || !customer || !cart) {\n        throw new Error('checkout data is not available');\n    }\n\n    const isGuest = customer.isGuest;\n    const addresses = customer.addresses;\n    const shouldRenderStaticAddress = methodId === 'amazonpay';\n    const allFormFields = getFields(values.countryCode);\n    const customFormFields = allFormFields.filter(({ custom }) => custom);\n    const hasCustomFormFields = customFormFields.length > 0;\n    const editableFormFields =\n        shouldRenderStaticAddress && hasCustomFormFields ? customFormFields : allFormFields;\n    const billingAddresses = isGuest && isPayPalFastlaneEnabled ? paypalFastlaneAddresses : addresses;\n    const hasAddresses = billingAddresses?.length > 0;\n    const hasValidCustomerAddress =\n        billingAddress &&\n        isValidCustomerAddress(\n            billingAddress,\n            billingAddresses,\n            getFields(billingAddress.countryCode),\n        );\n    const isUpdating  = isUpdatingBillingAddress() || isUpdatingCheckout();\n    const { enableOrderComments } = config.checkoutSettings;\n    const shouldShowOrderComments  = enableOrderComments && getShippableItemsCount(cart) < 1;\n\n    const handleSelectAddress = async (address: Partial<Address>) => {\n        setIsResettingAddress(true);\n\n        try {\n            await checkoutService.updateBillingAddress(address);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        } finally {\n            setIsResettingAddress(false);\n        }\n    };\n\n    const handleUseNewAddress = () => {\n        void handleSelectAddress({});\n    };\n\n    return (\n        <Form autoComplete=\"on\">\n            {shouldRenderStaticAddress && billingAddress && (\n                <div className=\"form-fieldset\">\n                    <StaticBillingAddress address={billingAddress} />\n                </div>\n            )}\n\n            <Fieldset id=\"checkoutBillingAddress\" ref={addressFormRef}>\n                {hasAddresses && !shouldRenderStaticAddress && (\n                    <Fieldset id=\"billingAddresses\">\n                        <LoadingOverlay isLoading={isResettingAddress}>\n                            <AddressSelect\n                                addresses={billingAddresses}\n                                onSelectAddress={handleSelectAddress}\n                                onUseNewAddress={handleUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? billingAddress : undefined\n                                }\n                                type={AddressType.Billing}\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <AddressFormSkeleton isLoading={isResettingAddress}>\n                        <AddressForm\n                            countryCode={values.countryCode}\n                            formFields={editableFormFields}\n                            setFieldValue={setFieldValue}\n                            shouldShowSaveAddress={!isGuest}\n                            type={AddressType.Billing}\n                        />\n                    </AddressFormSkeleton>\n                )}\n            </Fieldset>\n\n            {shouldShowOrderComments && <OrderComments />}\n\n            <div className=\"form-actions\">\n                <Button\n                    className={themeV2 ? 'body-bold' : ''}\n                    disabled={isUpdating || isResettingAddress}\n                    id=\"checkout-billing-continue\"\n                    isLoading={isUpdating || isResettingAddress}\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => ({\n            ...mapAddressToFormValues(\n                getFields(billingAddress && billingAddress.countryCode),\n                billingAddress,\n            ),\n            orderComment: customerMessage,\n        }),\n        isInitialValid: ({ billingAddress, getFields, language }) =>\n            !!billingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(billingAddress.countryCode),\n            }).isValidSync(billingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: BillingFormProps & WithLanguageProps) =>\n            methodId === 'amazonpay'\n                ? lazy<Partial<AddressFormValues>>((values) =>\n                      getCustomFormFieldsValidationSchema({\n                          translate: getTranslateAddressError(language),\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  )\n                : lazy<Partial<AddressFormValues>>((values) =>\n                      getAddressFormFieldsValidationSchema({\n                          language,\n                          formFields: getFields(values && values.countryCode),\n                      }),\n                  ),\n        enableReinitialize: true,\n    })(BillingForm),\n);\n","import type { CheckoutSelectors } from '@bigcommerce/checkout-sdk';\nimport React, { type ReactElement, useEffect } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    useCheckout,\n} from '@bigcommerce/checkout/payment-integration-api';\nimport { AddressFormSkeleton, useThemeContext } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { Legend } from '../ui/form';\n\nimport BillingForm, { type BillingFormValues } from './BillingForm';\nimport getBillingMethodId from './getBillingMethodId';\n\ninterface BillingProps {\n    navigateNextStep(): void;\n    onReady(): void;\n    onUnhandledError(error: Error): void;\n}\n\nconst Billing = ({ navigateNextStep, onReady, onUnhandledError }:BillingProps): ReactElement => {\n    const { checkoutService, checkoutState } = useCheckout();\n    const { themeV2 }  = useThemeContext();\n\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n        },\n        statuses: { isLoadingBillingCountries },\n    } = checkoutState;\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        throw new Error('Unable to access checkout data')\n    }\n\n    const isInitializing  = isLoadingBillingCountries();\n\n    // Below constants are for <BillingForm />'s HOC props\n    const customerMessage  = checkout.customerMessage;\n    const methodId  = getBillingMethodId(checkout);\n    const billingAddress  = getBillingAddress();\n    const getFields  = getBillingAddressFields;\n    const handleSubmit = async ({\n                                    orderComment,\n                                    ...addressValues\n                                }: BillingFormValues):Promise<void> => {\n        const updateAddress  = checkoutService.updateBillingAddress;\n        const updateCheckout  = checkoutService.updateCheckout;\n        const billingAddress  = getBillingAddress();\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                await checkoutService.loadBillingAddressFields();\n                onReady();\n            } catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        }\n\n        void init();\n    }, []);\n\n    return (\n        <AddressFormSkeleton isLoading={isInitializing}>\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\" themeV2={themeV2}>\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n                <BillingForm\n                    billingAddress={billingAddress}\n                    customerMessage={customerMessage}\n                    getFields={getFields}\n                    methodId={methodId}\n                    navigateNextStep={navigateNextStep}\n                    onSubmit={handleSubmit}\n                    onUnhandledError={onUnhandledError}\n                />\n            </div>\n        </AddressFormSkeleton>\n    );\n}\n\nexport default Billing;\n","import { type Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getBillingMethodId(checkout: Checkout): string | undefined {\n    const BILLING_METHOD_IDS = ['amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && BILLING_METHOD_IDS.includes(preselectedPayment.providerId)\n        ? preselectedPayment.providerId\n        : undefined;\n}\n"],"names":["withLanguage","handleSubmit","values","props","onSubmit","mapPropsToValues","getFields","customerMessage","billingAddress","mapAddressToFormValues","countryCode","orderComment","isInitialValid","language","getAddressFormFieldsValidationSchema","formFields","isValidSync","validationSchema","methodId","getCustomFormFieldsValidationSchema","translate","enableReinitialize","setFieldValue","onUnhandledError","isResettingAddress","setIsResettingAddress","useState","addressFormRef","useRef","isPayPalFastlaneEnabled","paypalFastlaneAddresses","usePayPalFastlaneAddress","themeV2","checkoutService","checkoutState","data","getCustomer","getConfig","getCart","statuses","isUpdatingBillingAddress","isUpdatingCheckout","customer","config","cart","Error","isGuest","addresses","shouldRenderStaticAddress","allFormFields","customFormFields","filter","custom","hasCustomFormFields","length","editableFormFields","billingAddresses","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","isUpdating","enableOrderComments","checkoutSettings","shouldShowOrderComments","getShippableItemsCount","handleSelectAddress","address","updateBillingAddress","error","Form","autoComplete","className","StaticBillingAddress","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","A","onSelectAddress","onUseNewAddress","selectedAddress","undefined","type","AddressType","Billing","AddressFormSkeleton","AddressForm","shouldShowSaveAddress","OrderComments","Button","disabled","variant","Primary","TranslatedString","navigateNextStep","onReady","getCheckout","getBillingAddress","getBillingAddressFields","isLoadingBillingCountries","checkout","isInitializing","preselectedPayment","getPreselectedPayment","includes","providerId","getBillingMethodId","useEffect","loadBillingAddressFields","Legend","testId","addressValues","updateAddress","updateCheckout","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all"],"sourceRoot":""}