"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_bluesnap-direct_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/bluesnap-direct.js":
/*!*******************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/bluesnap-direct.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBlueSnapDirectAPMPaymentStrategy: () => (/* binding */ V),\n/* harmony export */   createBlueSnapDirectCreditCardPaymentStrategy: () => (/* binding */ F),\n/* harmony export */   createBlueSnapV2PaymentStrategy: () => (/* binding */ K)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\nvar i,a={};function r(e,t){return Object.assign(e,{resolveIds:t})}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class s extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class o extends s{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}function d(e,t){if(null==e)throw t?t():new Error(\"An unexpected error has occurred.\");return e}!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(i||(i={}));class c extends s{constructor(e){super(function(e){switch(e){case i.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case i.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case i.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case i.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}var u,l;class p{initialize(e){this._blueSnapSdk=e}initialize3ds(e,t){return n=this,i=void 0,r=function*(){const n=this._getBlueSnapSdk();return new Promise((i,a)=>{n.threeDsPaymentsSetup(e,e=>\"1\"===e.code?i(e.threeDSecure.threeDSecureReferenceId):a(new o)),n.threeDsPaymentsSubmitData(t)})},new((a=void 0)||(a=Promise))(function(e,t){function s(e){try{d(r.next(e))}catch(e){t(e)}}function o(e){try{d(r.throw(e))}catch(e){t(e)}}function d(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a(function(e){e(n)})).then(s,o)}d((r=r.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, a, r; }_getBlueSnapSdk(){return d(this._blueSnapSdk,()=>new c(i.PaymentNotInitialized))}}class m extends s{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class h extends m{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}function y(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function b(e){return Boolean(e.instrumentId)}class g extends s{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(u||(u={}));class _ extends s{constructor(e){super(function(e){switch(e){case u.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case u.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case u.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case u.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case u.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case u.MissingCheckoutConfig:case u.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case u.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case u.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case u.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case u.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case u.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case u.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}!function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\",e.CardExpiryVerification=\"cardExpiryVerification\"}(l||(l={}));const f=l;function v(e){return f.CardNumber in e}function I(e){return f.CardCodeVerification in e||f.CardNumberVerification in e}var S,C,N,O,E,w=function(e,t,n,i){return new(n||(n=Promise))(function(a,r){function s(e){try{d(i.next(e))}catch(e){r(e)}}function o(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(s,o)}d((i=i.apply(e,t||[])).next())})};class P{constructor(e,t,n,i){this._scriptLoader=e,this._paymentIntegrationService=t,this._blueSnapDirectHostedForm=n,this._blueSnapDirect3ds=i}initialize(e){return w(this,void 0,void 0,function*(){const{methodId:t,gatewayId:n,creditCard:i}=e;if(!n||!i)throw new m;const a=yield this._paymentIntegrationService.loadPaymentMethod(n,{params:{method:t,bigpayToken:i.bigpayToken}}),{config:{testMode:r,is3dsEnabled:s},clientToken:o}=a.getPaymentMethodOrThrow(t,n);this._blueSnapSdk=yield this._scriptLoader.load(r),this._paymentFieldsToken=o,this._shouldUseHostedFields=v(i.form.fields)||I(i.form.fields)&&!!i.form.fields.cardNumberVerification,this._shouldUseHostedFields&&(this._blueSnapDirectHostedForm.initialize(this._blueSnapSdk,i.form.fields),yield this._blueSnapDirectHostedForm.attach(this._getPaymentFieldsToken(),i,s))})}execute(e){return w(this,void 0,void 0,function*(){if(!e.payment)throw new h([\"payment\"]);if(!this._blueSnapSdk)throw new h([\"payment\"]);const{paymentData:t}=e.payment,{shouldSaveInstrument:n,shouldSetAsDefaultInstrument:i}=y(t)?t:{shouldSaveInstrument:!1,shouldSetAsDefaultInstrument:!1},a=this._getPaymentFieldsToken();let r;const{is3dsEnabled:s}=this._paymentIntegrationService.getState().getPaymentMethodOrThrow(e.payment.methodId,e.payment.gatewayId).config,o=this._shouldUseHostedFields?yield this._blueSnapDirectHostedForm.validate().submit(s?this._getBlueSnapDirectThreeDSecureData():void 0,!(y(t)&&b(t))):void 0;if(yield this._paymentIntegrationService.submitOrder(),y(t)&&b(t)&&this._paymentFieldsToken&&t.instrumentId){if(s){this._blueSnapDirect3ds.initialize(this._blueSnapSdk);const{last4:e,brand:n}=this._paymentIntegrationService.getState().getCardInstrumentOrThrow(t.instrumentId),i=Object.assign({last4Digits:e,ccType:n.toUpperCase()},this._getBlueSnapDirectThreeDSecureData());r=yield this._blueSnapDirect3ds.initialize3ds(this._paymentFieldsToken,i)}yield this._paymentIntegrationService.submitPayment(Object.assign(Object.assign({},e.payment),{paymentData:Object.assign(Object.assign(Object.assign({instrumentId:t.instrumentId},this._shouldUseHostedFields?{nonce:a}:{}),r?{deviceSessionId:r}:{}),{shouldSetAsDefaultInstrument:!!i})}))}else yield this._paymentIntegrationService.submitPayment(Object.assign(Object.assign({},e.payment),{paymentData:{formattedPayload:{credit_card_token:{token:JSON.stringify({pfToken:a,cardHolderName:o&&o.cardHolderName})},vault_payment_instrument:n,set_as_default_stored_instrument:i}}}))})}finalize(){return Promise.reject(new g)}deinitialize(){return this._shouldUseHostedFields&&this._blueSnapDirectHostedForm.detach(),Promise.resolve()}_getBlueSnapDirectThreeDSecureData(){var e;const{getBillingAddress:t,getShippingAddress:n,getCustomer:i,getCheckoutOrThrow:a,getCartOrThrow:r}=this._paymentIntegrationService.getState(),s=t(),o=n(),d=(null===(e=i())||void 0===e?void 0:e.email)||(null==s?void 0:s.email),c=(null==s?void 0:s.phone)||(null==o?void 0:o.phone);return Object.assign(Object.assign(Object.assign(Object.assign({amount:a().outstandingBalance,currency:r().currency.code},d&&{email:d}),c&&{phone:c}),s&&{billingFirstName:s.firstName,billingLastName:s.lastName,billingCountry:s.countryCode,billingCity:s.city,billingAddress:`${s.address1} ${s.address2}`.trim(),billingZip:s.postalCode}),o&&{shippingFirstName:o.firstName,shippingLastName:o.lastName,shippingCountry:o.countryCode,shippingCity:o.city,shippingAddress:`${o.address1} ${o.address2}`.trim(),shippingZip:o.postalCode})}_getPaymentFieldsToken(){return d(this._paymentFieldsToken,()=>new _(u.MissingPaymentToken))}}class D extends s{constructor(e,t){super(t||\"Unable to proceed because the payment form contains invalid data.\"),this.details=e,this.name=\"PaymentInvalidFormError\",this.type=\"payment_invalid_form\"}}!function(e){e.AMEX=\"american-express\",e.CHINA_UNION_PAY=\"unionpay\",e.DINERS=\"diners-club\",e.DISCOVER=\"discover\",e.JCB=\"jcb\",e.MASTERCARD=\"mastercard\",e.UNKNOWN=\"unknown\",e.VISA=\"visa\"}(S||(S={})),function(e){e.ON_BLUR=\"onBlur\",e.ON_SUBMIT=\"onSubmit\"}(C||(C={})),function(e){e.EMPTY=\"empty\",e.INVALID=\"invalid\",e.THREE_DS_NOT_ENABLED=\"3D Secure is not enabled\"}(N||(N={})),function(e){e.CC_NOT_SUPORTED=\"22013\",e.ERROR_403=\"403\",e.ERROR_404=\"404\",e.ERROR_500=\"500\",e.INVALID_OR_EMPTY=\"10\",e.SESSION_EXPIRED=\"400\",e.THREE_DS_AUTH_FAILED=\"14101\",e.THREE_DS_CLIENT_ERROR=\"14103\",e.THREE_DS_MISSING_FIELDS=\"14102\",e.THREE_DS_NOT_ENABLED=\"14100\",e.TOKEN_EXPIRED=\"14040\",e.TOKEN_NOT_ASSOCIATED=\"14042\",e.TOKEN_NOT_FOUND=\"14041\"}(O||(O={})),function(e){e.CardCode=\"cvv\",e.CardExpiry=\"exp\",e.CardName=\"noc\",e.CardNumber=\"ccn\"}(E||(E={}));const M={[E.CardNumber]:f.CardNumber,[E.CardExpiry]:f.CardExpiry,[E.CardName]:f.CardName,[E.CardCode]:f.CardCode},T={empty:{[f.CardNumber]:{fieldType:\"cardNumber\",message:\"Credit card number is required\",type:\"required\"},[f.CardNumberVerification]:{fieldType:\"cardNumber\",message:\"Credit card number is required\",type:\"required\"},[f.CardExpiry]:{fieldType:\"cardExpiry\",message:\"Expiration date is required\",type:\"required\"},[f.CardCode]:{fieldType:\"cardCode\",message:\"CVV is required\",type:\"required\"},[f.CardName]:{fieldType:\"cardName\",message:\"Full name is required\",type:\"required\"}},invalid:{[f.CardNumber]:{fieldType:\"cardNumber\",message:\"Credit card number must be valid\",type:\"invalid_card_number\"},[f.CardNumberVerification]:{fieldType:\"cardNumber\",message:\"Credit card number must be valid\",type:\"invalid_card_number\"},[f.CardExpiry]:{fieldType:\"cardExpiry\",message:\"Expiration date must be a valid future date in MM / YY format\",type:\"invalid_card_expiry\"},[f.CardCode]:{fieldType:\"cardCode\",message:\"CVV must be valid\",type:\"invalid_card_code\"},[f.CardName]:{fieldType:\"cardName\",message:\"Full name is required\",type:\"required\"}}};class j{constructor(e,t){this._nameOnCardInput=e,this._hostedInputValidator=t}initialize(e,t){this._blueSnapSdk=e,t&&(v(t)?this._hostedInputValidator.initialize():I(t)&&t.cardNumberVerification&&this._hostedInputValidator.initializeValidationFields())}attach(e,t,n){var i,a,r,s,o=t.form,{fields:d}=o,c=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var a=0;for(i=Object.getOwnPropertySymbols(e);a<i.length;a++)t.indexOf(i[a])<0&&Object.prototype.propertyIsEnumerable.call(e,i[a])&&(n[i[a]]=e[i[a]])}return n}(o,[\"fields\"]);return void 0===n&&(n=!1),i=this,a=void 0,s=function*(){const t=this._getBlueSnapSdk();if(!v(d)&&!I(d))throw new m(\"Field options must be of type HostedCardFieldOptionsMap\");return this._onValidate=c.onValidate,v(d)&&this._setCustomBlueSnapAttributes(d),I(d)&&this._setCustomStoredCardsBlueSnapAttributes(d),new Promise(i=>{const a=this._getHostedPaymentFieldsOptions(e,d,c,i,n);t.hostedPaymentFieldsCreate(a),v(d)&&this._nameOnCardInput.attach(a,d.cardName.accessibilityLabel,d.cardName.placeholder)})},new((r=void 0)||(r=Promise))(function(e,t){function n(e){try{d(s.next(e))}catch(e){t(e)}}function o(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r(function(e){e(i)})).then(n,o)}d((s=s.apply(i,a||[])).next())})}validate(){var e;const t=this._hostedInputValidator.validate();if(null===(e=this._onValidate)||void 0===e||e.call(this,t),!t.isValid){const e=Object.entries(t.errors).reduce((e,[t,n])=>Object.assign(Object.assign({},e),{[t]:n.map(({message:e,type:t})=>({message:e,type:t}))}),{});throw new D(e)}return this}submit(e,t=!1){return new Promise((n,i)=>this._getBlueSnapSdk().hostedPaymentFieldsSubmitData(e=>this._isBlueSnapDirectCallbackError(e)?i(new o(e.statusCode===O.THREE_DS_AUTH_FAILED?e.error[0].errorDescription:`Submission failed with status: ${e.statusCode} and errors: ${JSON.stringify(e.error)}`)):n(Object.assign(Object.assign({},e.cardData),t?{cardHolderName:this._nameOnCardInput.getValue()}:{})),e))}detach(){this._nameOnCardInput.detach()}_isBlueSnapDirectCallbackError(e){return\"error\"in e}_getHostedPaymentFieldsOptions(e,t,{onFocus:n,onBlur:i,onValidate:a,onCardTypeChange:r,onEnter:s,styles:o},d,c){var u;return Object.assign(Object.assign(Object.assign({token:e,onFieldEventHandler:{setupComplete:()=>d(),onFocus:this._usetUiEventCallback(n),onBlur:this._usetUiEventCallback(i),onError:this._handleError(a),onType:(e,t)=>null==r?void 0:r({cardType:S[t]}),onEnter:this._usetUiEventCallback(s),onValid:e=>null==a?void 0:a(this._hostedInputValidator.validate({tagId:e}))}},v(t)&&{ccnPlaceHolder:t.cardNumber.placeholder||\"\",cvvPlaceHolder:(null===(u=t.cardCode)||void 0===u?void 0:u.placeholder)||\"\",expPlaceHolder:t.cardExpiry.placeholder||\"MM / YY\"}),o&&{style:this._mapStyles(o)}),{\"3DS\":c})}_mapStyles({default:e,error:n,focus:i}){return Object.entries(Object.assign(Object.assign(Object.assign({},e&&{input:e}),n&&{\".invalid\":n}),i&&{\":focus\":i})).reduce((e,[n,i])=>Object.assign(Object.assign({},e),{[n]:Object.entries(i).reduce((e,[n,i])=>Object.assign(Object.assign({},e),{[(0,lodash__WEBPACK_IMPORTED_MODULE_1__.kebabCase)(n)]:i}),{})}),{})}_handleError(e){return(t,n,i,a)=>{if(n===O.INVALID_OR_EMPTY&&t&&function(e){return void 0!==e&&[N.EMPTY,N.INVALID].includes(e)}(i))return null==e?void 0:e(this._hostedInputValidator.validate({tagId:t,errorDescription:i}));throw new o(`An unexpected error has occurred: ${JSON.stringify({tagId:t,errorCode:n,errorDescription:i,eventOrigin:a})}`)}}_usetUiEventCallback(e){return t=>{e&&e({fieldType:M[t]})}}_getBlueSnapSdk(){return d(this._blueSnapSdk,()=>new c(i.PaymentNotInitialized))}_setCustomBlueSnapAttributes(e){const{cardNumber:t,cardExpiry:n,cardCode:i,cardName:a}=e,r=document.getElementById(t.containerId),s=document.getElementById(n.containerId),o=i&&document.getElementById(i.containerId),d=document.getElementById(a.containerId);if(!(r&&s&&o&&d))throw new m(\"Unable to create hosted payment fields to invalid HTML container elements.\");r.dataset.bluesnap=E.CardNumber,s.dataset.bluesnap=E.CardExpiry,o.dataset.bluesnap=E.CardCode,d.dataset.bluesnap=E.CardName}_setCustomStoredCardsBlueSnapAttributes(e){const{cardNumberVerification:t,cardCodeVerification:n}=e,i=t&&document.getElementById(t.containerId),a=n&&document.getElementById(n.containerId);(i||a)&&(i&&(i.dataset.bluesnap=E.CardNumber),a&&(a.dataset.bluesnap=E.CardCode))}}class k{constructor(){this._errors={}}initialize(){this._errors={cardNumber:[T.empty.cardNumber],cardExpiry:[T.empty.cardExpiry],cardCode:[T.empty.cardCode],cardName:[T.empty.cardName]}}initializeValidationFields(){this._errors={cardNumberVerification:[T.empty.cardNumber]}}validate(e){return e&&this._updateErrors(e.tagId,e.errorDescription),{isValid:Object.values(this._errors).every(e=>0===e.length),errors:this._errors}}_updateErrors(e,t){const n=this._errors.cardNumberVerification?f.CardNumberVerification:M[e];this._errors[n]=t?[T[t][n]]:[]}}class A{attach({style:e,onFieldEventHandler:{onFocus:t,onBlur:n,onValid:i,onError:a,onEnter:r}={}},s,o){var d;this._style=e,this._create(),this._getInput().addEventListener(\"focus\",this._handleFocus(t)),this._getInput().addEventListener(\"blur\",this._handleBlur(n,i,a)),this._getInput().addEventListener(\"enter\",this._handleEnter(r)),s&&this._getInput().setAttribute(\"aria-label\",s),o&&(this._getInput().placeholder=o),null===(d=document.querySelector('[data-bluesnap=\"noc\"]'))||void 0===d||d.appendChild(this._getInput())}getValue(){return this._getInput().value}detach(){this._input&&(this._input.remove(),this._input=void 0)}_handleFocus(e){return()=>{var t;this._applyStyles(null===(t=this._style)||void 0===t?void 0:t[\":focus\"]),null==e||e(E.CardName)}}_handleBlur(e,t,n){return({target:i})=>{var a,r;null==e||e(E.CardName),i instanceof HTMLInputElement&&(/\\w{1,200}/.test(i.value)?(this._applyStyles(null===(a=this._style)||void 0===a?void 0:a.input),null==t||t(E.CardName)):(this._applyStyles(null===(r=this._style)||void 0===r?void 0:r[\".invalid\"]),null==n||n(E.CardName,O.INVALID_OR_EMPTY,N.EMPTY,C.ON_BLUR)))}}_handleEnter(e){return()=>null==e?void 0:e(E.CardName)}_applyStyles(e={}){const t={color:e.color,fontFamily:e[\"font-family\"],fontSize:e[\"font-size\"],fontWeight:e[\"font-weight\"]},n=Object.keys(t);n.every(e=>[\"color\",\"fontFamily\",\"fontSize\",\"fontWeight\"].includes(e))&&n.forEach(e=>{t[e]&&(this._getInput().style[e]=t[e]||\"\")})}_configureInput(){this._getInput().autocomplete=\"cc-name\",this._getInput().id=E.CardName,this._getInput().inputMode=\"text\",this._getInput().maxLength=200,this._getInput().style.backgroundColor=\"transparent\",this._getInput().style.border=\"0\",this._getInput().style.height=\"100%\",this._getInput().style.margin=\"0\",this._getInput().style.outline=\"none\",this._getInput().style.padding=\"0\",this._getInput().style.width=\"100%\",this._getInput().type=\"text\"}_getInput(){return d(this._input,()=>new c(i.PaymentNotInitialized))}_create(){var e;this._input=document.createElement(\"input\"),this._configureInput(),this._applyStyles(null===(e=this._style)||void 0===e?void 0:e.input)}}class x extends s{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}var z;!function(e){e.PRODUCTION=\"https://pay.bluesnap.com/web-sdk/5/bluesnap.js\",e.SANDBOX=\"https://sandpay.bluesnap.com/web-sdk/5/bluesnap.js\"}(z||(z={}));class B{constructor(e,t=window){this._scriptLoader=e,this._window=t}load(e=!1){return t=this,n=void 0,a=function*(){if(this._window.bluesnap)return this._window.bluesnap;if(yield this._scriptLoader.loadScript(e?z.SANDBOX:z.PRODUCTION),!this._window.bluesnap)throw new x;return this._window.bluesnap},new((i=void 0)||(i=Promise))(function(e,r){function s(e){try{d(a.next(e))}catch(e){r(e)}}function o(e){try{d(a.throw(e))}catch(e){r(e)}}function d(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i(function(e){e(n)})).then(s,o)}d((a=a.apply(t,n||[])).next())});// removed by dead control flow\n var t, n, i, a; }}const F=r(t=>new P(new B((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)()),t,new j(new A,new k),new p),[{id:\"credit_card\",gateway:\"bluesnapdirect\"}]);class U{constructor(e){this._paymentIntegrationService=e}execute(e){return t=this,n=void 0,a=function*(){const t=this._formatePaymentPayload(e);yield this._paymentIntegrationService.submitOrder();try{yield this._paymentIntegrationService.submitPayment(t)}catch(e){if(this._isBlueSnapDirectRedirectResponse(e)){const t=e.body.provider_data&&JSON.parse(e.body.provider_data);let n=e.body.additional_action_required.data.redirect_url;if(function(e){if(\"object\"!=typeof e||null===e)return!1;const t=e;return!!t.merchantid&&\"string\"==typeof t.merchantid}(t)){const e=new URLSearchParams(t).toString();n=`${n}&${e}`}return new Promise(()=>window.location.replace(n))}return Promise.reject(e)}},new((i=void 0)||(i=Promise))(function(e,r){function s(e){try{d(a.next(e))}catch(e){r(e)}}function o(e){try{d(a.throw(e))}catch(e){r(e)}}function d(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i(function(e){e(n)})).then(s,o)}d((a=a.apply(t,n||[])).next())});// removed by dead control flow\n var t, n, i, a; }initialize(){return Promise.resolve()}finalize(){return Promise.reject(new g)}deinitialize(){return Promise.resolve()}_formatePaymentPayload({payment:e}){if(!e)throw new h([\"payment\"]);return e.paymentData&&b(e.paymentData)&&y(e.paymentData)?Object.assign(Object.assign({},e),{paymentData:{instrumentId:e.paymentData.instrumentId,shouldSetAsDefaultInstrument:!!e.paymentData.shouldSetAsDefaultInstrument}}):(t=e.paymentData,Boolean(\"object\"==typeof t&&null!==t&&\"accountNumber\"in t&&\"accountType\"in t&&\"shopperPermission\"in t&&\"routingNumber\"in t)?Object.assign(Object.assign({},e),{paymentData:{formattedPayload:{ecp:Object.assign({account_number:e.paymentData.accountNumber,account_type:e.paymentData.accountType,shopper_permission:e.paymentData.shopperPermission,routing_number:e.paymentData.routingNumber},e.paymentData.companyName?{company_name:e.paymentData.companyName}:{}),vault_payment_instrument:e.paymentData.shouldSaveInstrument,set_as_default_stored_instrument:e.paymentData.shouldSetAsDefaultInstrument}}}):(n=e.paymentData,Boolean(\"object\"==typeof n&&null!==n&&\"iban\"in n&&\"firstName\"in n&&\"lastName\"in n&&\"shopperPermission\"in n)?Object.assign(Object.assign({},e),{paymentData:{formattedPayload:{sepa_direct_debit:{iban:e.paymentData.iban,first_name:e.paymentData.firstName,last_name:e.paymentData.lastName,shopper_permission:e.paymentData.shopperPermission},vault_payment_instrument:e.paymentData.shouldSaveInstrument,set_as_default_stored_instrument:e.paymentData.shouldSetAsDefaultInstrument}}}):function(e){return Boolean(\"object\"==typeof e&&null!==e&&\"bic\"in e)}(e.paymentData)?Object.assign(Object.assign({},e),{paymentData:{formattedPayload:{ideal:{bic:e.paymentData.bic}}}}):function(e){return Boolean(\"object\"==typeof e&&null!==e&&\"iban\"in e&&!(\"firstName\"in e)&&!(\"lastName\"in e)&&!(\"shopperPermission\"in e))}(e.paymentData)?Object.assign(Object.assign({},e),{paymentData:{formattedPayload:{pay_by_bank:{iban:e.paymentData.iban}}}}):{methodId:e.methodId}));// removed by dead control flow\n var t, n; }_isBlueSnapDirectRedirectResponse(e){var t;if(\"object\"!=typeof e||null===e)return!1;const n=e;if(!n.body)return!1;const i=n.body;return\"additional_action_required\"===i.status&&!!(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.redirect_url)}}const V=r(e=>new U(e),[{gateway:\"bluesnapdirect\"}]);class R{constructor(e){const t=new Promise((e,t)=>{this.cancel=t});this.promise=Promise.race([e,t])}}class L extends s{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}var H;!function(e){e.ACKNOWLEDGE=\"ACKNOWLEDGE\",e.FINALIZE=\"FINALIZE\",e.INITIALIZE=\"INITIALIZE\"}(H||(H={}));const q=H;var Y=function(e,t,n,i){return new(n||(n=Promise))(function(a,r){function s(e){try{d(i.next(e))}catch(e){r(e)}}function o(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(s,o)}d((i=i.apply(e,t||[])).next())})};class ${constructor(e){this._paymentIntegrationService=e}execute(e,t){return Y(this,void 0,void 0,function*(){const{payment:a}=e;if(!a)throw new h([\"payment\"]);if(!this._initializeOptions)throw new c(i.PaymentNotInitialized);const{onLoad:r,style:s}=this._initializeOptions,o=this._createIframe(\"bluesnapv2_hosted_payment_page\",s),d=new R(new Promise(lodash__WEBPACK_IMPORTED_MODULE_1__.noop));r(o,()=>d.cancel(new L)),yield this._paymentIntegrationService.submitOrder(e,t),yield this._paymentIntegrationService.initializeOffsitePayment({methodId:a.methodId,gatewayId:a.gatewayId,shouldSaveInstrument:!1,target:o.name,promise:d.promise})})}finalize(e){return Y(this,void 0,void 0,function*(){const t=this._paymentIntegrationService.getState(),n=t.getOrder(),i=t.getPaymentStatus();if(!n||i!==q.ACKNOWLEDGE&&i!==q.FINALIZE)return Promise.reject(new g);yield this._paymentIntegrationService.finalizeOrder(e)})}initialize(e){return Y(this,void 0,void 0,function*(){this._initializeOptions=e&&e.bluesnapv2,yield Promise.resolve()})}deinitialize(){return Promise.resolve()}_createIframe(e,t){const n=document.createElement(\"iframe\");if(n.setAttribute(\"sandbox\",\"allow-top-navigation allow-scripts allow-forms allow-same-origin\"),n.name=e,t){const{border:e,height:i,width:a}=t;n.style.border=null!=e?e:\"\",n.style.height=null!=i?i:\"\",n.style.width=null!=a?a:\"\"}return n}}const K=r(e=>new $(e),[{gateway:\"bluesnapv2\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/bluesnap-direct.js\n\n}");

/***/ })

}]);