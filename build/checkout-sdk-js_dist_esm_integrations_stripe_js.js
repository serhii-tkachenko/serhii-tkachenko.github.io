"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_stripe_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/stripe.js":
/*!**********************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/stripe.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStripeLinkV2CustomerStrategy: () => (/* binding */ H),\n/* harmony export */   createStripeOCSPaymentStrategy: () => (/* binding */ ye),\n/* harmony export */   createStripeUPECustomerStrategy: () => (/* binding */ O),\n/* harmony export */   createStripeUPEPaymentStrategy: () => (/* binding */ he),\n/* harmony export */   createStripeV3PaymentStrategy: () => (/* binding */ oe)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\nvar s={};function a(e,t){return Object.assign(e,{resolveIds:t})}s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class d extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class l extends d{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}var c,u=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class h{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}getStripeClient(e,t,i){return u(this,void 0,void 0,function*(){if(this.stripeWindow.bcStripeClient)return this.stripeWindow.bcStripeClient;const n=yield this.load(),{stripePublishableKey:r,stripeConnectedAccount:o}=e,s=n(r,Object.assign(Object.assign(Object.assign({},o?{stripeAccount:o}:{}),t?{betas:t}:{}),i?{apiVersion:i}:{}));return Object.assign(this.stripeWindow,{bcStripeClient:s}),s})}getElements(e,t){return u(this,void 0,void 0,function*(){let i=this.stripeWindow.bcStripeElements;return i?yield this.updateStripeElements(t):(i=e.elements(t),Object.assign(this.stripeWindow,{bcStripeElements:i})),i})}updateStripeElements(e){return u(this,void 0,void 0,function*(){const t=this.stripeWindow.bcStripeElements;t&&(t.update(e),yield t.fetchUpdates())})}load(){return u(this,void 0,void 0,function*(){if(!this.stripeWindow.Stripe&&(yield this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\"),!this.stripeWindow.Stripe))throw new l;return this.stripeWindow.Stripe})}}class p extends d{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(c||(c={}));class m extends d{constructor(e){super(function(e){switch(e){case c.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case c.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case c.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case c.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case c.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case c.MissingCheckoutConfig:case c.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case c.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case c.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case c.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case c.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case c.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case c.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}function y(e){return\"object\"==typeof e&&null!==e&&\"initializationData\"in e&&void 0!==e.initializationData&&null!==e.initializationData&&\"object\"==typeof e.initializationData&&\"stripePublishableKey\"in e.initializationData&&\"stripeConnectedAccount\"in e.initializationData&&\"shopperLanguage\"in e.initializationData&&void 0!==e.initializationData.stripePublishableKey&&void 0!==e.initializationData.stripeConnectedAccount&&void 0!==e.initializationData.shopperLanguage}const g=[\"payment_element_beta_2\",\"alipay_pm_beta_1\",\"link_default_integration_beta_1\",\"shipping_address_element_beta_1\",\"address_element_beta_1\"],v=\"2020-03-02;alipay_beta=v1;link_beta=v1\";var S,f,_,I,E,b,P,C;function w(e){return\"stripeLinkAuthenticationState\"in e}!function(e){e.SHIPPING=\"shipping\",e.BILLING=\"billing\"}(S||(S={})),function(e){e.SPLIT=\"split\",e.FULL=\"full\",e.ORGANIZATION=\"organization\"}(f||(f={})),function(e){e.CreditCard=\"card\",e.Link=\"link\",e.EPS=\"eps\",e.GRABPAY=\"grabpay\",e.BANCONTACT=\"bancontact\",e.IDEAL=\"ideal\",e.ALIPAY=\"alipay\",e.KLARNA=\"klarna\",e.OCS=\"optimized_checkout\"}(_||(_={})),function(e){e.NEVER=\"never\",e.AUTO=\"auto\",e.ALWAYS=\"always\",e.PAYMENT=\"payment\",e.IF_REQUIRED=\"if_required\"}(I||(I={})),function(e){e.PAYMENT=\"payment\",e.AUTHENTICATION=\"linkAuthentication\",e.SHIPPING=\"address\",e.EXPRESS_CHECKOUT=\"expressCheckout\"}(E||(E={})),function(e){e.REQUIRES_PAYMENT_METHOD=\"requires_payment_method\",e.REQUIRES_CONFIRMATION=\"requires_confirmation\",e.REQUIRES_ACTION=\"requires_action\",e.PROCESSING=\"processing\",e.SUCCEEDED=\"succeeded\",e.CANCELED=\"canceled\"}(b||(b={})),function(e){e.CLICK=\"click\",e.CHANGE=\"change\",e.READY=\"ready\",e.SHIPPING_ADDRESS_CHANGE=\"shippingaddresschange\",e.SHIPPING_RATE_CHANGE=\"shippingratechange\",e.CONFIRM=\"confirm\",e.CANCEL=\"cancel\",e.LOADER_START=\"loaderstart\"}(P||(P={})),function(e){e.ON_SESSION=\"on_session\",e.OFF_SESSION=\"off_session\"}(C||(C={}));class A{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t}initialize(e){var t,i,n,r,o;return i=this,n=void 0,o=function*(){let i;if(!e.stripeupe)throw new p('Unable to proceed because \"options\" argument is not provided.');const{container:n,gatewayId:r,methodId:o,onEmailChange:s,getStyles:a,isLoading:d}=e.stripeupe;Object.entries(e.stripeupe).forEach(([e,t])=>{if(!t)throw new p(`Unable to proceed because \"${e}\" argument is not provided.`)}),yield this.paymentIntegrationService.loadPaymentMethod(r,{params:{method:o}});const l=this.paymentIntegrationService.getState(),u=l.getPaymentMethodOrThrow(o,r),{clientToken:h}=u;if(!y(u)||!h)throw new m(c.MissingPaymentToken);const{email:f}=l.getCustomerOrThrow(),_=l.getPaymentProviderCustomerOrThrow(),I=(w(_)?_:{}).stripeLinkAuthenticationState;if(!f){let e;const r=\"function\"==typeof a&&a();e=r?{variables:{colorPrimary:r.fieldInnerShadow,colorBackground:r.fieldBackground,colorText:r.labelText,colorDanger:r.fieldErrorText,colorTextSecondary:r.labelText,colorTextPlaceholder:r.fieldPlaceholderText},rules:{\".Input\":{borderColor:r.fieldBorder,color:r.fieldText,boxShadow:r.fieldInnerShadow}}}:{},i=yield this.scriptLoader.getStripeClient(u.initializationData,g,v),this._stripeElements=yield this.scriptLoader.getElements(i,{clientSecret:h,appearance:e});const{getBillingAddress:o,getConsignments:l}=this.paymentIntegrationService.getState(),p=l(),y=null===(t=null==p?void 0:p[0])||void 0===t?void 0:t.id,{email:f}=o()||{},_=f?{defaultValues:{mode:S.SHIPPING,email:f}}:{},b=this._stripeElements.getElement(E.AUTHENTICATION)||this._stripeElements.create(E.AUTHENTICATION,_);b.on(P.CHANGE,e=>{if(!(\"authenticated\"in e))throw new m(c.MissingCustomer);this.paymentIntegrationService.updatePaymentProviderCustomer({stripeLinkAuthenticationState:e.authenticated}),e.complete?s(e.authenticated,e.value.email):s(!1,\"\"),d&&d(!1),void 0===I&&e.authenticated&&y&&this.paymentIntegrationService.deleteConsignment(y)}),b.mount(`#${n}`)}},new((r=void 0)||(r=Promise))(function(e,t){function s(e){try{d(o.next(e))}catch(e){t(e)}}function a(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r(function(e){e(i)})).then(s,a)}d((o=o.apply(i,n||[])).next())})}deinitialize(){var e,t;return null===(t=null===(e=this._stripeElements)||void 0===e?void 0:e.getElement(E.AUTHENTICATION))||void 0===t||t.unmount(),Promise.resolve()}signIn(e,t){return this.paymentIntegrationService.signInCustomer(e,t),Promise.resolve()}signOut(e){return this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}}const O=a(t=>new A(t,new h((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)())),[{id:\"stripeupe\"}]);class M extends d{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}class T extends d{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}var N;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(N||(N={}));class k extends d{constructor(e){super(function(e){switch(e){case N.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case N.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case N.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case N.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}var D=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class z{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t,this.isMounted=!1}deinitialize(){var e;null===(e=this.checkoutEventsUnsubscribe)||void 0===e||e.call(this),this.isMounted=!1}initCheckoutEventsSubscription(e,t,i,n){this.checkoutEventsUnsubscribe=this.paymentIntegrationService.subscribe(()=>D(this,void 0,void 0,function*(){var r;const o=null==n?void 0:n.getElement(E.PAYMENT);if(o){try{yield this.updateStripePaymentIntent(e,t)}catch(e){return this.isMounted&&(o.unmount(),this.isMounted=!1),void(e instanceof Error&&(null===(r=i.onError)||void 0===r||r.call(i,e)))}this.isMounted||(yield null==n?void 0:n.fetchUpdates(),this.mountElement(o,i.containerId))}}),e=>{var t;return null===(t=e.getCheckout())||void 0===t?void 0:t.outstandingBalance},e=>{var t;return null===(t=e.getCheckout())||void 0===t?void 0:t.coupons})}mountElement(e,t){document.getElementById(t)&&(e.mount(`#${t}`),this.isMounted=!0)}mapAppearanceVariables(e){return{colorPrimary:e.fieldInnerShadow,colorBackground:e.fieldBackground,colorText:e.labelText,colorDanger:e.fieldErrorText,colorTextSecondary:e.labelText,colorTextPlaceholder:e.fieldPlaceholderText,colorIcon:e.fieldPlaceholderText}}mapInputAppearanceRules(e){return{borderColor:e.fieldBorder,color:e.fieldText,boxShadow:e.fieldInnerShadow}}throwStripeError(e){if(\"object\"==typeof(t=e)&&null!==t&&\"type\"in t&&(this.throwDisplayableStripeError(e),this.isCancellationError(e)))throw new M;var t;throw new T}throwDisplayableStripeError(e){if((0,lodash__WEBPACK_IMPORTED_MODULE_1__.includes)([\"card_error\",\"invalid_request_error\",\"validation_error\"],e.type))throw new Error(e.message)}isCancellationError(e){var t;const i=null===(t=null==e?void 0:e.payment_intent.last_payment_error)||void 0===t?void 0:t.message;return!!i&&-1!==i.indexOf(\"canceled\")}throwPaymentConfirmationProceedMessage(){throw new T(\"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\")}isPaymentCompleted(e,t){return D(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getPaymentMethodOrThrow(e),{features:r}=i.getStoreConfigOrThrow().checkoutSettings;if(!n.clientToken||!t||!r[\"PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE\"])return!1;const{paymentIntent:o}=yield t.retrievePaymentIntent(n.clientToken);return(null==o?void 0:o.status)===b.SUCCEEDED})}mapStripePaymentData(e,t,i=!1){const n=this.paymentIntegrationService.getState().getBillingAddress(),{firstName:r=\"\",lastName:o=\"\",email:s=\"\"}=n||{},a=this._mapStripeAddress(n);if(!e)throw new k(N.PaymentNotInitialized);if(!(s&&a&&a.city&&a.country&&r&&o))throw new m(c.MissingBillingAddress);return{elements:e,redirect:I.IF_REQUIRED,confirmParams:Object.assign({payment_method_data:Object.assign(Object.assign({},i?{allow_redisplay:\"always\"}:{}),{billing_details:{email:s,address:a,name:`${r} ${o}`}})},t&&{return_url:t})}}isAdditionalActionError(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e,{code:\"additional_action_required\"})}isRedirectAction(e){const{type:t,data:{redirect_url:i}}=e;return\"redirect_to_url\"===t&&!!i}isOnPageAdditionalAction(e){const{type:t,data:{token:i}}=e;return\"additional_action_requires_payment_method\"===t&&!!i}updateStripePaymentIntent(e,t){return D(this,void 0,void 0,function*(){const i=yield this.paymentIntegrationService.loadPaymentMethod(e,{params:{method:t}}),{clientToken:n}=i.getPaymentMethodOrThrow(t);if(!n)throw new m(c.MissingPaymentMethod);this.scriptLoader.updateStripeElements({clientSecret:n})})}_mapStripeAddress(e){if(e){const{city:t,address1:i,address2:n,countryCode:r,postalCode:o,stateOrProvinceCode:s}=e;return Object.assign({city:t,country:r,postal_code:o,line1:i,line2:n},s?{state:s}:{})}throw new m(c.MissingBillingAddress)}}const R={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},U={position:\"fixed\",\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"},L=\"embedded-checkout-loading-indicator-rotation\";class x{constructor(e){this.styles=Object.assign(Object.assign({},R),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${L} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(L))return;const t=document.createElement(\"style\");t.id=L,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${L} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}const j=e=>\"object\"==typeof e&&null!==e&&\"body\"in e;class B{constructor(e){this._decimalPlaces=e}toInteger(e){return Math.round(e*Math.pow(10,this._decimalPlaces))}}const F=[\"AC\",\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CV\",\"CW\",\"CY\",\"CZ\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FO\",\"FR\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HN\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SV\",\"SX\",\"SZ\",\"TA\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VN\",\"VU\",\"WF\",\"WS\",\"XK\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\",\"ZZ\"];var V=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class G{constructor(e,t,i,n){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i,this.loadingIndicator=n}initialize(e){return V(this,void 0,void 0,function*(){const{stripeocs:t}=e||{};if(!t)throw new p('Unable to proceed because \"options\" argument is not provided.');const{methodId:i,gatewayId:n,container:r}=t;if(!r||!i||!n)throw new k(N.PaymentNotInitialized);const o=(yield this.paymentIntegrationService.loadPaymentMethod(n,{params:{method:i}})).getPaymentMethodOrThrow(i,n),{loadingContainerId:s,buttonHeight:a,onComplete:d}=t;if(this._loadingIndicatorContainer=s,this._onComplete=d,!y(o))throw new m(c.MissingPaymentMethod);const{initializationData:l}=o,{captureMethod:u}=l;return this._captureMethod=u,this._stripeClient=yield this.scriptLoader.getStripeClient(l),yield this._mountExpressCheckoutElement(i,r,this._stripeClient,a),Promise.resolve()})}signIn(){return Promise.resolve()}signOut(){return Promise.resolve()}executePaymentMethodCheckout(){return Promise.resolve()}deinitialize(){return Promise.resolve()}_mountExpressCheckoutElement(e,t,i,n=40){return V(this,void 0,void 0,function*(){const r=this._shouldRequireShippingAddress(),o=Object.assign(Object.assign(Object.assign({shippingAddressRequired:r},r?{allowedShippingCountries:yield this._getAvailableCountries()}:{}),r?{shippingRates:[{id:\"_\",amount:0,displayName:\"Pending rates\"}]}:{}),{billingAddressRequired:!0,emailRequired:!0,phoneNumberRequired:!0,paymentMethods:{link:I.AUTO,applePay:I.NEVER,googlePay:I.NEVER,amazonPay:I.NEVER,paypal:I.NEVER,klarna:I.NEVER},buttonHeight:n}),{cartAmount:s}=this.paymentIntegrationService.getState().getCartOrThrow(),a=Object.assign({mode:\"payment\",amount:this._toCents(s),currency:this._getCurrency()},this._captureMethod?{captureMethod:this._captureMethod}:{});this._stripeElements=i.elements(a),this._linkV2Element=this._stripeElements.create(E.EXPRESS_CHECKOUT,o),this._linkV2Element.mount(`#${t}`),this._initializeEvents(this._linkV2Element,e)})}_initializeEvents(e,t){this._shouldRequireShippingAddress()&&(e.on(P.SHIPPING_ADDRESS_CHANGE,e=>V(this,void 0,void 0,function*(){return this._onShippingAddressChange(e)})),e.on(P.SHIPPING_RATE_CHANGE,e=>V(this,void 0,void 0,function*(){return this._onShippingRateChange(e)}))),e.on(P.CONFIRM,e=>V(this,void 0,void 0,function*(){return this._onConfirm(e,t)})),e.on(P.CANCEL,this._onCancel)}_onShippingAddressChange(e){return V(this,void 0,void 0,function*(){if(\"address\"in e){const t=e.address,i={firstName:\"\",lastName:\"\",phone:\"\",company:\"\",address1:\"\",address2:\"\",city:(null==t?void 0:t.city)||\"\",countryCode:(null==t?void 0:t.country)||\"\",postalCode:(null==t?void 0:t.postal_code)||\"\",stateOrProvince:(null==t?void 0:t.state)||\"\",stateOrProvinceCode:\"\",customFields:[]};yield this.paymentIntegrationService.updateShippingAddress(i);const n=yield this._getAvailableShippingOptions();yield this._updateDisplayedPrice(),e.resolve({shippingRates:n})}})}_onCancel(){throw new M}_onShippingRateChange(e){return V(this,void 0,void 0,function*(){if(\"shippingRate\"in e){const{shippingRate:t}=e;yield this._handleShippingOptionChange(null==t?void 0:t.id),yield this._updateDisplayedPrice(),e.resolve({})}})}_onConfirm(e,t){return V(this,void 0,void 0,function*(){if(\"billingDetails\"in e&&\"shippingAddress\"in e&&this._stripeClient&&this._stripeElements){yield this._updateShippingAndBillingAddress(e),yield this.paymentIntegrationService.submitOrder();const i=this._getPaymentPayload(t);try{yield this.paymentIntegrationService.submitPayment(i)}catch(e){yield this._processAdditionalAction(e,t)}}return Promise.resolve()})}_updateShippingAndBillingAddress(e){var t,i,n,r,o,s,a,d;return V(this,void 0,void 0,function*(){const l=this._shouldRequireShippingAddress(),c=(null===(i=null===(t=e.shippingAddress)||void 0===t?void 0:t.name)||void 0===i?void 0:i.split(\" \")[0])||(null===(r=null===(n=e.billingDetails)||void 0===n?void 0:n.name)||void 0===r?void 0:r.split(\" \")[0])||\"\",u=(null===(s=null===(o=e.shippingAddress)||void 0===o?void 0:o.name)||void 0===s?void 0:s.split(\" \")[1])||(null===(d=null===(a=e.billingDetails)||void 0===a?void 0:a.name)||void 0===d?void 0:d.split(\" \")[1])||\"\";if(l){const t=this._mapShippingAddress(e.shippingAddress,e.billingDetails,c,u);yield this.paymentIntegrationService.updateShippingAddress(t)}const h=this._mapBillingAddress(e.shippingAddress,e.billingDetails,c,u);yield this.paymentIntegrationService.updateBillingAddress(h)})}_mapShippingAddress(e,t,i,n){var r,o,s,a,d,l,c;return{firstName:i,lastName:n,phone:(null==t?void 0:t.phone)||\"\",company:\"\",address1:(null===(r=null==e?void 0:e.address)||void 0===r?void 0:r.line1)||\"\",address2:(null===(o=null==e?void 0:e.address)||void 0===o?void 0:o.line2)||\"\",city:(null===(s=null==e?void 0:e.address)||void 0===s?void 0:s.city)||\"\",countryCode:(null===(a=null==e?void 0:e.address)||void 0===a?void 0:a.country)||\"\",postalCode:(null===(d=null==e?void 0:e.address)||void 0===d?void 0:d.postal_code)||\"\",stateOrProvince:(null===(l=null==e?void 0:e.address)||void 0===l?void 0:l.state)||\"\",stateOrProvinceCode:(null===(c=null==e?void 0:e.address)||void 0===c?void 0:c.state)||\"\",customFields:[]}}_mapBillingAddress(e,t,i,n){var r,o,s,a,d,l;return{email:(null==t?void 0:t.email)||\"\",firstName:i,lastName:n,phone:(null==t?void 0:t.phone)||\"\",company:\"\",address1:(null===(r=null==t?void 0:t.address)||void 0===r?void 0:r.line1)||\"\",address2:\"\",city:(null===(o=null==t?void 0:t.address)||void 0===o?void 0:o.city)||\"\",countryCode:(null===(s=null==t?void 0:t.address)||void 0===s?void 0:s.country)||\"\",postalCode:(null===(a=null==t?void 0:t.address)||void 0===a?void 0:a.postal_code)||\"\",stateOrProvince:(null===(d=null==t?void 0:t.address)||void 0===d?void 0:d.state)||\"\",stateOrProvinceCode:(null===(l=null==e?void 0:e.address)||void 0===l?void 0:l.state)||\"\",customFields:[]}}_processAdditionalAction(e,t){return V(this,void 0,void 0,function*(){if(!j(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this._stripeClient||!this._stripeElements)throw new k(N.PaymentNotInitialized);const{data:i}=e.body.additional_action_required,{token:n}=i,{paymentIntent:r}=yield this._confirmStripePaymentOrThrow(i,t),o=this._getPaymentPayload(t,(null==r?void 0:r.id)||n);try{this._toggleLoadingIndicator(!0),yield this.paymentIntegrationService.submitPayment(o),yield this._completeCheckoutFlow()}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}finally{this._toggleLoadingIndicator(!1)}})}_confirmStripePaymentOrThrow(e,t){var i,n,r;return V(this,void 0,void 0,function*(){const{token:o,redirect_url:s}=e,a=this.stripeIntegrationService.mapStripePaymentData(this._stripeElements,s);let d;try{const e=(yield this.stripeIntegrationService.isPaymentCompleted(t,this._stripeClient))?yield null===(r=this._stripeClient)||void 0===r?void 0:r.retrievePaymentIntent(o||\"\"):yield null===(i=this._stripeClient)||void 0===i?void 0:i.confirmPayment({elements:a.elements,clientSecret:o,redirect:I.IF_REQUIRED,confirmParams:{return_url:null===(n=a.confirmParams)||void 0===n?void 0:n.return_url}});if(d=null==e?void 0:e.error,d||!(null==e?void 0:e.paymentIntent))throw new T;return e}catch(e){return this.stripeIntegrationService.throwStripeError(d)}})}_completeCheckoutFlow(){return V(this,void 0,void 0,function*(){return\"function\"==typeof this._onComplete?this._onComplete():(window.location.replace(\"/order-confirmation\"),Promise.resolve())})}_getPaymentPayload(e,t){var i;const n=(null===(i=this.paymentIntegrationService.getState().getCart())||void 0===i?void 0:i.id)||\"\";return{methodId:e,paymentData:{formattedPayload:Object.assign(Object.assign({cart_id:n},t?{credit_card_token:{token:t}}:{}),{confirm:!1,payment_method_id:_.Link})}}}_shouldRequireShippingAddress(){const{getCartOrThrow:e}=this.paymentIntegrationService.getState(),{lineItems:t}=e();return!!t.physicalItems.length}_updateDisplayedPrice(){return V(this,void 0,void 0,function*(){this._stripeElements&&this._stripeElements.update({currency:this._getCurrency(),mode:\"payment\",amount:yield this._getTotalPrice()})})}_getCurrency(){if(!this._currencyCode){const{code:e}=this.paymentIntegrationService.getState().getCartOrThrow().currency;this._currencyCode=e.toLowerCase()}return this._currencyCode}_getTotalPrice(){return V(this,void 0,void 0,function*(){yield this.paymentIntegrationService.loadCheckout();const{getCheckoutOrThrow:e,getCartOrThrow:t}=this.paymentIntegrationService.getState(),{decimalPlaces:i}=t().currency,n=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.round)(e().outstandingBalance,i).toFixed(i);return this._toCents(+n)})}_getAvailableCountries(){var e;return V(this,void 0,void 0,function*(){const t=yield this.paymentIntegrationService.loadShippingCountries();return((null===(e=t.getShippingCountries())||void 0===e?void 0:e.map(e=>e.code))||[]).filter(e=>F.includes(e))})}_getAvailableShippingOptions(){var e,t;return V(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getConsignments();if(!(null==i?void 0:i[0]))return;const n=i[0],r=(n.availableShippingOptions||[]).map(this._getStripeShippingOption.bind(this)),o=null===(e=n.selectedShippingOption)||void 0===e?void 0:e.id;return o?r.sort(e=>e.id===o?-1:0):yield this._handleShippingOptionChange(null===(t=r[0])||void 0===t?void 0:t.id),r})}_getStripeShippingOption({id:e,cost:t,description:i}){return{id:e,displayName:i,amount:this._toCents(t)}}_handleShippingOptionChange(e){return V(this,void 0,void 0,function*(){if(e&&\"shipping_option_unselected\"!==e)return this.paymentIntegrationService.selectShippingOption(e)})}_getAmountTransformer(){if(this._amountTransformer)return this._amountTransformer;const{getCart:e}=this.paymentIntegrationService.getState(),{currency:t}=e()||{};return t?new B(t.decimalPlaces):void 0}_toCents(e){const t=Math.round(100*e),i=this._getAmountTransformer();return i?i.toInteger(e):t}_toggleLoadingIndicator(e){e&&this._loadingIndicatorContainer?this.loadingIndicator.show(this._loadingIndicatorContainer):this.loadingIndicator.hide()}}const H=a(t=>{const i=new h((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)()),n=new x({containerStyles:U});return new G(t,i,new z(t,i),n)},[{id:\"stripeocs\"}]);class W extends p{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}function Y(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function q(e){return Boolean(e.instrumentId)}class K extends d{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function $(e){return null!==e&&\"object\"==typeof e&&\"cardNumberElementOptions\"in e&&\"cardCvcElementOptions\"in e&&\"cardExpiryElementOptions\"in e&&void 0!==e.cardNumberElementOptions&&void 0!==e.cardCvcElementOptions&&void 0!==e.cardExpiryElementOptions}var J,Z,Q,X;!function(e){e.Solid=\"solid\",e.Default=\"default\"}(J||(J={})),function(e){e.Alipay=\"alipay\",e.CardCvc=\"cardCvc\",e.CardExpiry=\"cardExpiry\",e.CardNumber=\"cardNumber\",e.CreditCard=\"card\",e.IDEAL=\"idealBank\",e.Sepa=\"iban\"}(Z||(Z={})),function(e){e.Alipay=\"alipay\",e.CreditCard=\"card\",e.IDEAL=\"ideal\",e.Sepa=\"sepa_debit\"}(Q||(Q={})),function(e){e.AuthFailure=\"auth_failure\"}(X||(X={}));class ee extends d{constructor(e){super(e===X.AuthFailure?\"User did not authenticate\":\"There was an error while processing your payment. Please try again or contact us.\"),this.type=\"stripev3_error\",this.subtype=e}}var te=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};const ie=[Z.Alipay,Z.IDEAL];class ne{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t}initialize(e){return te(this,void 0,void 0,function*(){const{stripev3:t,methodId:i,gatewayId:n}=e;if(!n)throw new p('Unable to initialize payment because \"gatewayId\" argument is not provided.');this.initializeOptions=t,this.isDeinitialize=!1;const r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i),{initializationData:{stripePublishableKey:o,stripeConnectedAccount:s,useIndividualCardFields:a,allowRedisplayForStoredInstruments:d}}=r;this._allowRedisplayForStoredInstruments=d;const l=this.getInitializeOptions().form;this.useIndividualCardFields=a,this.stripeV3Client=yield this.loadStripeJs(o,s),this.isCreditCard(i)&&this.shouldShowTSVHostedForm(i,n)&&l?this.hostedForm=yield this.mountCardVerificationFields(l):this.stripeElement=yield this.mountCardFields(i)})}execute(e,i){var n,r;return te(this,void 0,void 0,function*(){const{payment:o}=e,s=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);let a,d;if(!o||!o.paymentData)throw new W([\"payment.paymentData\"]);const{paymentData:l,gatewayId:u,methodId:h}=o,{shouldSaveInstrument:p,shouldSetAsDefaultInstrument:y}=Y(l)?l:{shouldSaveInstrument:!1,shouldSetAsDefaultInstrument:!1},g=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.includes)(ie,h),{isStoreCreditApplied:v}=this.paymentIntegrationService.getState().getCheckoutOrThrow();v&&(yield this.paymentIntegrationService.applyStoreCredit(v));try{g&&(yield this.paymentIntegrationService.submitOrder(s,i)),u&&(yield this.paymentIntegrationService.loadPaymentMethod(u,{params:{method:h}}));const e=this.paymentIntegrationService.getState();if(q(l)){yield this.paymentIntegrationService.submitOrder(s,i);const{instrumentId:t}=l,n=e.getPaymentMethodOrThrow(o.methodId).clientToken;if(!n)throw new m(c.MissingPaymentMethod);return yield this.executeWithVaulted(o,t,y,n)}const t=e.getPaymentMethodOrThrow(h),v=yield this.confirmStripePayment(t),{clientToken:S,method:f}=t,{id:_}=null!==(r=null!==(n=v.paymentIntent)&&void 0!==n?n:v.paymentMethod)&&void 0!==r?r:{id:\"\"};d=v.error,a={credit_card_token:{token:_},vault_payment_instrument:p,confirm:!1,set_as_default_stored_instrument:y},f===Z.CreditCard&&(a.client_token=S),g||(yield this.paymentIntegrationService.submitOrder(s,i));const I=this.buildPaymentPayload(h,a,y);yield this.paymentIntegrationService.submitPayment(I)}catch(e){yield this.processAdditionalAction(this.handleEmptyPaymentIntentError(e,d),h,p,y)}})}finalize(){return Promise.reject(new K)}deinitialize(){return this.hostedForm&&this.hostedForm.detach(),this.isDeinitialize=!0,this.unmountElement(),Promise.resolve()}buildPaymentPayload(e,t,i){return{methodId:e,paymentData:i?{formattedPayload:Object.assign(Object.assign({},t),{set_as_default_stored_instrument:i})}:{formattedPayload:t}}}isCancellationError(e){var t,i;return e&&-1!==(null===(i=null===(t=e.payment_intent.last_payment_error)||void 0===t?void 0:t.message)||void 0===i?void 0:i.indexOf(\"canceled\"))}isAuthError(e){return\"payment_intent_authentication_failure\"===(null==e?void 0:e.code)}isCreditCard(e){return e===Q.CreditCard}isHostedFieldAvailable(){var e;const t=this.getInitializeOptions(),r=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.omitBy)(null===(e=t.form)||void 0===e?void 0:e.fields,lodash__WEBPACK_IMPORTED_MODULE_1__.isEmpty);return!(0,lodash__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(r)}isHostedPaymentFormEnabled(e,t){const{getPaymentMethodOrThrow:i}=this.paymentIntegrationService.getState(),n=i(e,t);return Boolean(n.config.isHostedFormEnabled)}confirmStripePayment(e){return te(this,void 0,void 0,function*(){const{clientToken:t,method:i,returnUrl:n}=e;if(!t)throw new m(c.MissingPaymentMethod);switch(i){case Z.Alipay:return this.getStripeJs().confirmAlipayPayment(t,{return_url:n},{handleActions:!1});case Z.IDEAL:{const e=this.mapStripePaymentData(Q.IDEAL,n);return this.getStripeJs().confirmIdealPayment(t,e,{handleActions:!1})}case Z.Sepa:{const e=this.mapStripePaymentData(Q.Sepa);return this.getStripeJs().confirmSepaDebitPayment(t,e)}default:{const e=this.useIndividualCardFields?this.getStripeCardElements()[0]:this.getStripeElement(),t=this.mapStripeBillingDetails(this.paymentIntegrationService.getState().getBillingAddress(),this.paymentIntegrationService.getState().getCustomer()),i=this._allowRedisplayForStoredInstruments;return this.getStripeJs().createPaymentMethod(Object.assign({type:Q.CreditCard,card:e,billing_details:t},i?{allow_redisplay:\"always\"}:{}))}}})}executeWithVaulted(e,t,i,n){var r;return te(this,void 0,void 0,function*(){const o={bigpay_token:{token:t},confirm:!0,client_token:n,set_as_default_stored_instrument:i};if(this.isHostedPaymentFormEnabled(e.methodId,e.gatewayId)&&this.hostedForm){const t=this.hostedForm;return e.paymentData&&q(e.paymentData)&&(e.paymentData=Object.assign(Object.assign({},e.paymentData),{instrumentId:JSON.stringify({token:(null===(r=e.paymentData)||void 0===r?void 0:r.instrumentId)||\"\",client_token:n})})),yield t.validate(),yield t.submit(e),this.paymentIntegrationService.loadCurrentOrder()}const s=this.buildPaymentPayload(e.methodId,o,i);return this.paymentIntegrationService.submitPayment(s)})}getInitializeOptions(){if(!this.initializeOptions)throw new k(N.PaymentNotInitialized);return this.initializeOptions}getStripeCardElements(){if(!this.stripeCardElements)throw new k(N.PaymentNotInitialized);return this.stripeCardElements}getStripeElement(){if(!this.stripeElement)throw new k(N.PaymentNotInitialized);return this.stripeElement}getStripeJs(){if(!this.stripeV3Client)throw new k(N.PaymentNotInitialized);return this.stripeV3Client}handleEmptyPaymentIntentError(e,t){return j(e)&&(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"required_field\"})&&t?new Error(t.message):e}loadStripeJs(e,t){return te(this,void 0,void 0,function*(){return this.stripeV3Client?Promise.resolve(this.stripeV3Client):this.scriptLoader.load(e,t,this.paymentIntegrationService.getState().getLocale())})}mapStripeAddress(e){if(e){const{city:t,countryCode:i,address1:n,address2:r,postalCode:o,stateOrProvinceCode:s}=e;return{city:t,country:i,line1:n,line2:r,postal_code:o,state:s}}return{line1:\"\"}}mapStripeBillingDetails(e,t){const{firstName:i,lastName:n}=e||t||{firstName:\"Guest\",lastName:\"\"},r=`${i} ${n}`.trim(),{options:o}=this.getInitializeOptions();if(this.useIndividualCardFields&&$(o)){const{zipCodeElementOptions:t}=o;if(t){const i=document.getElementById(t.containerId)?document.getElementById(t.containerId).value:\"\";i&&e&&(e=Object.assign(Object.assign({},e),{postalCode:i}))}}const s={address:this.mapStripeAddress(e)};if(t&&t.addresses[0]&&function(e){return\"object\"==typeof e&&null!==e&&\"id\"in e&&void 0!==e.id}(t.addresses[0])){const e=t.addresses[0],{email:i}=t,{phone:n}=e;return n?Object.assign(Object.assign({},s),{email:i,name:r,phone:n}):Object.assign(Object.assign({},s),{email:i,name:r})}if(e){const{email:t,phone:i}=e;return i?Object.assign(Object.assign({},s),{email:t,name:r,phone:i}):Object.assign(Object.assign({},s),{email:t,name:r})}return Object.assign(Object.assign({},s),{name:r})}mapStripePaymentData(e,t){const i=this.paymentIntegrationService.getState().getCustomer(),n=this.paymentIntegrationService.getState().getBillingAddress(),r={payment_method:{[e]:this.getStripeElement(),billing_details:this.mapStripeBillingDetails(n,i)}};return e===Q.IDEAL?Object.assign(Object.assign({},r),{return_url:t}):r}mountCardFields(e){const{options:t,containerId:i}=this.getInitializeOptions();let n;return new Promise((r,o)=>{switch(this.stripeElements||(this.stripeElements=this.getStripeJs().elements()),e){case Z.CreditCard:if(this.useIndividualCardFields&&$(t)){const{cardNumberElementOptions:e,cardExpiryElementOptions:i,cardCvcElementOptions:r}=t,s=this.stripeElements.getElement(Z.CardNumber)||this.stripeElements.create(Z.CardNumber,e),a=this.stripeElements.getElement(Z.CardExpiry)||this.stripeElements.create(Z.CardExpiry,i),d=this.stripeElements.getElement(Z.CardCvc)||this.stripeElements.create(Z.CardCvc,r);this.stripeCardElements=[s,a,d],n=this.stripeCardElements[0];try{s.mount(`#${e.containerId}`),a.mount(`#${i.containerId}`),d.mount(`#${r.containerId}`)}catch(e){this.isDeinitialize||o(new p(\"Unable to mount Stripe component without valid container ID.\"))}}else{n=this.stripeElements.getElement(e)||this.stripeElements.create(e,t);try{n.mount(`#${i}`)}catch(e){this.isDeinitialize||o(new p(\"Unable to mount Stripe component without valid container ID.\"))}}break;case Z.IDEAL:case Z.Sepa:n=this.stripeElements.getElement(e)||this.stripeElements.create(e,t);try{n.mount(`#${i}`)}catch(e){this.isDeinitialize||o(new p(\"Unable to mount Stripe component without valid container ID.\"))}case Z.Alipay:}r(n)})}mountCardVerificationFields(e){return te(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getStoreConfig();if(!t)throw new m(c.MissingCheckoutConfig);const i=t.paymentSettings.bigpayBaseUrl,n=this.paymentIntegrationService.createHostedForm(i,e);return yield n.attach(),n})}processAdditionalAction(e,t,i=!1,n=!1){return te(this,void 0,void 0,function*(){if(!j(e))throw e;const r=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"additional_action_required\"}),s=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"three_d_secure_required\"});if(r){const t=e.body.additional_action_required;if(t&&\"redirect_to_url\"===t.type)return new Promise(()=>{t.data.redirect_url&&window.location.replace(t.data.redirect_url)})}if(s){const r=e.body.three_ds_result.token,o=!1;let s,a=!1;try{s=yield this.getStripeJs().confirmCardPayment(r)}catch(e){a=!0}if(null==s?void 0:s.error){if(this.isCancellationError(s.error))throw new M;if(this.isAuthError(s.error))throw new ee(X.AuthFailure);throw new Error(s.error.message)}const d={credit_card_token:{token:this.getPaymentToken(null==s?void 0:s.paymentIntent,r,a)},vault_payment_instrument:i,confirm:o},l=this.buildPaymentPayload(t,d,n);try{return yield this.paymentIntegrationService.submitPayment(l)}catch(e){throw this.handleEmptyPaymentIntentError(e,null==s?void 0:s.error)}}throw e})}getPaymentToken(e,t,i){return!e||i?t:e.id}shouldShowTSVHostedForm(e,t){return this.isHostedFieldAvailable()&&this.isHostedPaymentFormEnabled(e,t)}unmountElement(){this.stripeElement&&(this.stripeElement.unmount(),this.stripeElement=void 0)}}class re{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}load(e,t,i){return this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\").then(()=>{if(!this.stripeWindow.Stripe)throw new l;return this.stripeWindow.Stripe(e,{stripeAccount:t,locale:i,betas:[\"payment_intent_beta_3\",\"alipay_pm_beta_1\"],apiVersion:\"2020-03-02;alipay_beta=v1\"})})}}const oe=a(t=>new ne(t,new re((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)())),[{gateway:\"stripev3\"}]),se={body:{},headers:{},status:0};class ae extends d{constructor(e,{message:t,errors:i}={}){const{body:n,headers:r,status:o}=e||se;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=r,this.status=o,this.errors=i||[]}}const de={ar:[\"ar\"],bg:[\"bg\"],cs:[\"cs\"],da:[\"da\"],de:[\"de\"],el:[\"el\"],en:[\"en\",\"en-GB\"],es:[\"es\",\"es-419\"],et:[\"et\"],fi:[\"fi\"],fil:[\"fil\"],fr:[\"fr\",\"fr-CA\"],he:[\"he\"],hr:[\"hr\"],hu:[\"hu\"],id:[\"id\"],it:[\"it\"],ja:[\"ja\"],ko:[\"ko\"],lt:[\"lt\"],lv:[\"lv\"],ms:[\"ms\"],mt:[\"mt\"],nb:[\"nb\"],nl:[\"nl\"],pl:[\"pl\"],pt:[\"pt\",\"pt-BR\"],ro:[\"ro\"],ru:[\"ru\"],sk:[\"sk\"],sl:[\"sl\"],sv:[\"sv\"],th:[\"th\"],tr:[\"tr\"],vi:[\"vi\"],zh:[\"zh\",\"zh-HK\",\"zh-TW\"]};function le(e){const[t,i]=e.replace(/_/g,\"-\").toLowerCase().split(\"-\"),n=de[t];if(!n)return\"auto\";const r=i?`${t}-${i.toUpperCase()}`:t;return n.indexOf(r)>-1?r:n[0]}var ce=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class ue{constructor(e,t,i){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i}initialize(e){return ce(this,void 0,void 0,function*(){const{stripeupe:t,methodId:i,gatewayId:n}=e;if(!(null==t?void 0:t.containerId))throw new k(N.PaymentNotInitialized);if(!n)throw new p('Unable to initialize payment because \"gatewayId\" argument is not provided.');return this._loadStripeElement(t,n,i).catch(e=>{var i;return null===(i=t.onError)||void 0===i?void 0:i.call(t,e)}),this.stripeIntegrationService.initCheckoutEventsSubscription(n,i,t,this._stripeElements),Promise.resolve()})}execute(e,t){return ce(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i||!i.paymentData)throw new W([\"payment.paymentData\"]);if(!this._stripeUPEClient)throw new k(N.PaymentNotInitialized);const{paymentData:r,methodId:o,gatewayId:s}=i,{shouldSaveInstrument:a=!1,shouldSetAsDefaultInstrument:d=!1}=Y(r)?r:{},l=this.paymentIntegrationService.getState(),{isStoreCreditApplied:c}=l.getCheckoutOrThrow(),u=l.getPaymentProviderCustomerOrThrow(),h=(w(u)?u:{}).stripeLinkAuthenticationState;if(c&&(yield this.paymentIntegrationService.applyStoreCredit(c)),s){yield this.stripeIntegrationService.updateStripePaymentIntent(s,o);const{email:e}=l.getCustomerOrThrow();if(void 0!==h&&!e){const e=l.getBillingAddressOrThrow();yield this.paymentIntegrationService.updateBillingAddress(e)}}if(yield this.paymentIntegrationService.submitOrder(n,t),q(r)){const{instrumentId:e}=r;return void(yield this._executeWithVaulted(i.methodId,e,d))}yield this._executeWithStripeConfirmation(i.methodId,!h&&a,d)})}finalize(){return Promise.reject(new K)}deinitialize(){var e,t;return null===(t=null===(e=this._stripeElements)||void 0===e?void 0:e.getElement(E.PAYMENT))||void 0===t||t.unmount(),this.stripeIntegrationService.deinitialize(),this._stripeElements=void 0,this._stripeUPEClient=void 0,Promise.resolve()}_executeWithStripeConfirmation(e,t,i){return ce(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),{clientToken:r}=n.getPaymentMethodOrThrow(e),o=this._getPaymentPayload(e,r||\"\",t,i);try{yield this.paymentIntegrationService.submitPayment(o)}catch(n){yield this._processAdditionalActionWithStripeConfirmation(n,e,t,i)}})}_executeWithVaulted(e,t,i){var n;return ce(this,void 0,void 0,function*(){const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(e),s=null===(n=r.getCart())||void 0===n?void 0:n.id;try{const n={methodId:e,paymentData:{formattedPayload:{cart_id:s,bigpay_token:{token:t},confirm:!1,client_token:o.clientToken,set_as_default_stored_instrument:i}}};return yield this.paymentIntegrationService.submitPayment(n)}catch(t){return this._processVaultedAdditionalAction(t,e,i)}})}_loadStripeElement(e,t,i){return ce(this,void 0,void 0,function*(){const{containerId:n,style:r,render:o,initStripeElementUpdateTrigger:s}=e,a=yield this.paymentIntegrationService.loadPaymentMethod(t,{params:{method:i}}),d=a.getPaymentMethodOrThrow(i),{checkoutSettings:l}=a.getStoreConfigOrThrow();if(!y(d))throw new m(c.MissingPaymentMethod);const{clientToken:u,initializationData:h}=d,{shopperLanguage:p,allowRedisplayForStoredInstruments:g=!1}=h;if(this._allowRedisplayForStoredInstruments=g,!u)throw new m(c.MissingPaymentMethod);let v;if(this._stripeUPEClient=yield this._loadStripeJs(h),this._isStripeElementUpdateEnabled=!!l.features[\"PI-1679.trigger_update_stripe_payment_element\"]&&\"function\"==typeof s,r){const e=r;v={variables:this.stripeIntegrationService.mapAppearanceVariables(r),rules:{\".Input\":this.stripeIntegrationService.mapInputAppearanceRules(e)}}}this._stripeElements=yield this.scriptLoader.getElements(this._stripeUPEClient,{clientSecret:u,locale:le(p),appearance:v});const{getBillingAddress:S,getShippingAddress:f}=a,{postalCode:_}=f()||S()||{},b=this._stripeElements.getElement(E.PAYMENT)||this._stripeElements.create(E.PAYMENT,Object.assign({fields:{billingDetails:{email:I.NEVER,address:{country:I.NEVER,city:I.NEVER,postalCode:_?I.NEVER:I.AUTO}}},wallets:{applePay:I.NEVER,googlePay:I.NEVER}},this._getStripeElementTerms()));this.stripeIntegrationService.mountElement(b,n),b.on(P.READY,()=>{o()}),b.on(P.CHANGE,e=>{(null==e?void 0:e.value)&&\"type\"in e.value&&this._updateStripeLinkStateByElementType(e.value.type)}),this._isStripeElementUpdateEnabled&&(null==s||s(this._updateStripeElement.bind(this)))})}_processAdditionalActionWithStripeConfirmation(e,t,i=!1,n=!1){return ce(this,void 0,void 0,function*(){if(!j(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this._stripeUPEClient||!this._stripeElements)throw new k(N.PaymentNotInitialized);const{data:r}=e.body.additional_action_required,{token:o}=r,{paymentIntent:s}=yield this._confirmStripePaymentOrThrow(t,r),a=this._getPaymentPayload(t,(null==s?void 0:s.id)||o,i,n);try{yield this.paymentIntegrationService.submitPayment(a)}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}})}_confirmStripePaymentOrThrow(e,t){var i,n;return ce(this,void 0,void 0,function*(){const{token:r,redirect_url:o}=t,s=this.stripeIntegrationService.mapStripePaymentData(this._stripeElements,o,!!this._allowRedisplayForStoredInstruments);let a;try{const t=(yield this.stripeIntegrationService.isPaymentCompleted(e,this._stripeUPEClient))?yield null===(n=this._stripeUPEClient)||void 0===n?void 0:n.retrievePaymentIntent(r||\"\"):yield null===(i=this._stripeUPEClient)||void 0===i?void 0:i.confirmPayment(s);if(a=null==t?void 0:t.error,a||!(null==t?void 0:t.paymentIntent))throw new T;return t}catch(e){this.stripeIntegrationService.throwStripeError(a)}})}_processVaultedAdditionalAction(e,t,i=!1){var n;return ce(this,void 0,void 0,function*(){if(!t||!j(e)||!(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"three_d_secure_required\"}))throw e;if(!this._stripeUPEClient||!this._stripeElements)throw new k(N.PaymentNotInitialized);const r=e.body.three_ds_result.token;let s,a=!1;try{s=yield this._stripeUPEClient.confirmCardPayment(r)}catch(e){try{s=yield this._stripeUPEClient.retrievePaymentIntent(r)}catch(e){a=!0}}if((null==s?void 0:s.error)&&this.stripeIntegrationService.throwStripeError(s.error),!(null==s?void 0:s.paymentIntent)&&!a)throw new ae;const d=this._getPaymentPayload(t,a?r:null===(n=null==s?void 0:s.paymentIntent)||void 0===n?void 0:n.id,!1,i);return this.paymentIntegrationService.submitPayment(d)})}_loadStripeJs(e){return ce(this,void 0,void 0,function*(){return this._stripeUPEClient?this._stripeUPEClient:this.scriptLoader.getStripeClient(e,g,v)})}_getPaymentPayload(e,t,i=!1,n=!1){var r;return{methodId:e,paymentData:{formattedPayload:{cart_id:(null===(r=this.paymentIntegrationService.getState().getCart())||void 0===r?void 0:r.id)||\"\",credit_card_token:{token:t},confirm:!1,vault_payment_instrument:i,set_as_default_stored_instrument:n}}}}_updateStripeElement({shouldShowTerms:e}){var t;const i=null===(t=this._stripeElements)||void 0===t?void 0:t.getElement(E.PAYMENT);null==i||i.update(Object.assign({},this._getStripeElementTerms(e)))}_getStripeElementTerms(e){let t=I.AUTO;return this._isStripeElementUpdateEnabled&&(t=e?I.AUTO:I.NEVER),{terms:{card:t}}}_updateStripeLinkStateByElementType(e){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow(),i=e===_.Link;!w(t)&&i&&this.paymentIntegrationService.updatePaymentProviderCustomer({stripeLinkAuthenticationState:i})}}const he=a(t=>{const i=new h((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)());return new ue(t,i,new z(t,i))},[{gateway:\"stripeupe\"},{gateway:\"stripeupe\",id:\"klarna\"}]);var pe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class me{constructor(e,t,i){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i}initialize(e){var t;return pe(this,void 0,void 0,function*(){const{stripeocs:i,methodId:n,gatewayId:r}=e;if(!(null==i?void 0:i.containerId))throw new k(N.PaymentNotInitialized);if(!r)throw new p('Unable to initialize payment because \"gatewayId\" argument is not provided.');try{yield this._initializeStripeElement(i,r,n)}catch(e){e instanceof Error&&(null===(t=i.onError)||void 0===t||t.call(i,e))}this.stripeIntegrationService.initCheckoutEventsSubscription(r,n,i,this.stripeElements)})}execute(e,t){return pe(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]),{methodId:r,gatewayId:o}=i||{};if(!this.stripeClient)throw new k(N.PaymentNotInitialized);if(!o||!r)throw new p('Unable to initialize payment because \"gatewayId\" or \"methodId\" argument is not provided.');const s=this.paymentIntegrationService.getState(),{isStoreCreditApplied:a}=s.getCheckoutOrThrow();a&&(yield this.paymentIntegrationService.applyStoreCredit(a)),yield this.stripeIntegrationService.updateStripePaymentIntent(o,r),yield this.paymentIntegrationService.submitOrder(n,t);const{clientToken:d}=s.getPaymentMethodOrThrow(r),l=this._getPaymentPayload(r,d||\"\");try{yield this.paymentIntegrationService.submitPayment(l)}catch(e){yield this._processAdditionalAction(e,r)}})}finalize(){return Promise.reject(new K)}deinitialize(){var e;const t=null===(e=this.stripeElements)||void 0===e?void 0:e.getElement(E.PAYMENT);return null==t||t.unmount(),null==t||t.destroy(),this.stripeIntegrationService.deinitialize(),this.stripeElements=void 0,this.stripeClient=void 0,Promise.resolve()}_initializeStripeElement(e,t,i){return pe(this,void 0,void 0,function*(){let n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i);if((null==n?void 0:n.clientToken)||(n=(yield this.paymentIntegrationService.loadPaymentMethod(t,{params:{method:i}})).getPaymentMethodOrThrow(i)),!y(n))throw new m(c.MissingPaymentMethod);const{clientToken:r,initializationData:o}=n,{shopperLanguage:s,customerSessionToken:a,enableLink:d}=o;if(!r)throw new m(c.MissingPaymentMethod);this.stripeClient=yield this._loadStripeJs(o);const{appearance:l,containerId:u,fonts:h,layout:p,render:g,paymentMethodSelect:v,handleClosePaymentMethod:S,togglePreloader:f}=e;this.stripeElements=yield this.scriptLoader.getElements(this.stripeClient,{clientSecret:r,customerSessionClientSecret:a,locale:le(s),appearance:l,fonts:h});const{getBillingAddress:_,getShippingAddress:b}=this.paymentIntegrationService.getState(),C=_(),{postalCode:w}=b()||C||{},A=this.stripeElements.getElement(E.PAYMENT)||this.stripeElements.create(E.PAYMENT,{fields:{billingDetails:{email:I.NEVER,address:{country:I.NEVER,city:I.NEVER,postalCode:w?I.NEVER:I.AUTO}}},wallets:{applePay:I.NEVER,googlePay:I.NEVER,link:d?I.AUTO:I.NEVER},layout:p,savePaymentMethod:{maxVisiblePaymentMethods:20},defaultValues:{billingDetails:{email:(null==C?void 0:C.email)||\"\"}}});this.stripeIntegrationService.mountElement(A,u),A.on(P.LOADER_START,()=>{null==f||f(!1)}),A.on(P.READY,()=>{g()}),A.on(P.CHANGE,e=>{this._onStripeElementChange(e,t,i,v)}),null==S||S(this._collapseStripeElement.bind(this))})}_loadStripeJs(e){return pe(this,void 0,void 0,function*(){return this.stripeClient?this.stripeClient:this.scriptLoader.getStripeClient(e)})}_collapseStripeElement(){var e;const t=null===(e=this.stripeElements)||void 0===e?void 0:e.getElement(E.PAYMENT);null==t||t.collapse()}_getPaymentPayload(e,t,i){var n;const r=(null===(n=this.paymentIntegrationService.getState().getCart())||void 0===n?void 0:n.id)||\"\",{card:o,us_bank_account:s}=i||{},a=this._shouldSaveInstrument(o)||this._shouldSaveInstrument(s),d=this._getTokenizedOptions(t,i);return{methodId:e,paymentData:{formattedPayload:Object.assign({cart_id:r,confirm:!1,method:this.selectedMethodId,vault_payment_instrument:a},d)}}}_processAdditionalAction(e,t){return pe(this,void 0,void 0,function*(){if(!j(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this.stripeClient||!this.stripeElements)throw new k(N.PaymentNotInitialized);const{data:i}=e.body.additional_action_required,{token:n}=i,{paymentIntent:r}=yield this._confirmStripePaymentOrThrow(t,i),{client_secret:o,payment_method_options:s}=r||{},a=this._getPaymentPayload(t,o||n,s);try{return yield this.paymentIntegrationService.submitPayment(a)}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}})}_confirmStripePaymentOrThrow(e,t){var i,n;return pe(this,void 0,void 0,function*(){const{token:r,redirect_url:o}=t,s=this.stripeIntegrationService.mapStripePaymentData(this.stripeElements,o);let a;try{const t=(yield this.stripeIntegrationService.isPaymentCompleted(e,this.stripeClient))?yield null===(n=this.stripeClient)||void 0===n?void 0:n.retrievePaymentIntent(r||\"\"):yield null===(i=this.stripeClient)||void 0===i?void 0:i.confirmPayment(s);if(a=null==t?void 0:t.error,a||!(null==t?void 0:t.paymentIntent))throw new T;return t}catch(e){return this.stripeIntegrationService.throwStripeError(a)}})}_onStripeElementChange(e,t,i,n){(e=>\"object\"==typeof e&&null!==e&&\"value\"in e&&\"collapsed\"in e)(e)&&!e.collapsed&&(this.selectedMethodId=e.value.type,null==n||n(`${t}-${i}`))}_shouldSaveInstrument(e){const t=null==e?void 0:e.setup_future_usage;return t===C.ON_SESSION||t===C.OFF_SESSION}_getTokenizedOptions(e,t){return this._shouldSaveInstrument(null==t?void 0:t.us_bank_account)?{tokenized_ach:{token:e}}:{credit_card_token:{token:e}}}}const ye=a(t=>{const i=new h((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)());return new me(t,i,new z(t,i))},[{gateway:\"stripeocs\",id:\"optimized_checkout\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/stripe.js\n\n}");

/***/ })

}]);