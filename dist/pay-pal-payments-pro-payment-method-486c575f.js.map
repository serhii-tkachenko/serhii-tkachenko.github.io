{"version":3,"file":"pay-pal-payments-pro-payment-method-486c575f.js","mappings":"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","sources":["webpack://checkout/./packages/paypal-payments-pro-integration/src/PayPalPaymentsProPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport { HostedCreditCardComponent } from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst PayPalPaymentsProPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    if (method.type === 'PAYMENT_TYPE_HOSTED') {\n        return (\n            <HostedPaymentComponent\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                deinitializePayment={checkoutService.deinitializePayment}\n                initializePayment={checkoutService.initializePayment}\n                language={language}\n                method={method}\n                onUnhandledError={onUnhandledError}\n                paymentForm={paymentForm}\n            />\n        );\n    }\n\n    return (\n        <HostedCreditCardComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    PayPalPaymentsProPaymentMethod,\n    [{ id: 'paypal' }],\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n"],"names":["method","checkoutService","checkoutState","paymentForm","language","onUnhandledError","type","HostedPaymentComponent","deinitializePayment","initializePayment","HostedCreditCardComponent","id","props","description","isInitializing","noop","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument"],"sourceRoot":""}