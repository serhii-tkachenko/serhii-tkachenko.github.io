"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_paypal-commerce_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js":
/*!*******************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPayPalCommerceAlternativeMethodsButtonStrategy: () => (/* binding */ Oe),\n/* harmony export */   createPayPalCommerceAlternativeMethodsPaymentStrategy: () => (/* binding */ Je),\n/* harmony export */   createPayPalCommerceButtonStrategy: () => (/* binding */ ye),\n/* harmony export */   createPayPalCommerceCreditButtonStrategy: () => (/* binding */ Se),\n/* harmony export */   createPayPalCommerceCreditCardsPaymentStrategy: () => (/* binding */ st),\n/* harmony export */   createPayPalCommerceCreditCustomerStrategy: () => (/* binding */ $),\n/* harmony export */   createPayPalCommerceCreditPaymentStrategy: () => (/* binding */ Le),\n/* harmony export */   createPayPalCommerceCustomerStrategy: () => (/* binding */ V),\n/* harmony export */   createPayPalCommerceFastlaneCustomerStrategy: () => (/* binding */ ue),\n/* harmony export */   createPayPalCommerceFastlanePaymentStrategy: () => (/* binding */ mt),\n/* harmony export */   createPayPalCommercePaymentStrategy: () => (/* binding */ je),\n/* harmony export */   createPayPalCommerceRatePayPaymentStrategy: () => (/* binding */ ct),\n/* harmony export */   createPayPalCommerceVenmoButtonStrategy: () => (/* binding */ be),\n/* harmony export */   createPayPalCommerceVenmoCustomerStrategy: () => (/* binding */ G),\n/* harmony export */   createPayPalCommerceVenmoPaymentStrategy: () => (/* binding */ He)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);\nvar l,c={};function p(e,t){return Object.assign(e,{resolveIds:t})}c.d=(e,t)=>{for(var i in t)c.o(t,i)&&!c.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class u extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class h extends u{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(l||(l={}));class m extends u{constructor(e){super(function(e){switch(e){case l.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case l.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case l.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case l.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case l.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case l.MissingCheckoutConfig:case l.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case l.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case l.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case l.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case l.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case l.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case l.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class y extends u{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}const g={body:{},headers:{},status:0};class v extends u{constructor(e,{message:t,errors:i}={}){const{body:n,headers:o,status:r}=e||g;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=o,this.status=r,this.errors=i||[]}}var f,S,I,C,b,w,P,O;!function(e){e.BuyNow=\"BUY_NOW\"}(f||(f={})),function(e){e.Possible=\"POSSIBLE\",e.No=\"NO\",e.Unknown=\"UNKNOWN\",e.Yes=\"YES\"}(S||(S={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(I||(I={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(C||(C={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(b||(b={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(w||(w={})),function(e){e.OXXO=\"oxxo\"}(P||(P={})),function(e){e.Approved=\"APPROVED\",e.Created=\"CREATED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\",e.PollingStop=\"POLLING_STOP\",e.PollingError=\"POLLING_ERROR\"}(O||(O={}));var k=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class A{constructor(e,t,i,n){this.formPoster=e,this.paymentIntegrationService=t,this.paypalCommerceRequestSender=i,this.paypalCommerceScriptLoader=n}loadPayPalSdk(e,t,i,n){return k(this,void 0,void 0,function*(){const o=this.paymentIntegrationService.getState(),r=t||o.getCartOrThrow().currency.code,a=o.getPaymentMethodOrThrow(e);return this.paypalSdk=yield this.paypalCommerceScriptLoader.getPayPalSDK(a,r,i,n),this.paypalSdk})}getPayPalSdkOrThrow(){if(!this.paypalSdk)throw new h;return this.paypalSdk}createBuyNowCartOrThrow(e){return k(this,void 0,void 0,function*(){const t=e.getBuyNowCartRequestBody();if(!t)throw new m(l.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(t)}catch(e){throw new y}})}createOrder(e,t){return k(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getCartOrThrow().id,{orderId:n}=yield this.paypalCommerceRequestSender.createOrder(e,Object.assign({cartId:i},t));return n})}createOrderCardFields(e,t){return k(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getCartOrThrow().id,{orderId:n,setupToken:o}=yield this.paypalCommerceRequestSender.createOrder(e,Object.assign({cartId:i},t));return Object.assign({orderId:n},o?{setupToken:o}:{})})}updateOrder(){return k(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getConsignmentsOrThrow()[0];try{yield this.paypalCommerceRequestSender.updateOrder({availableShippingOptions:i.availableShippingOptions,cartId:t.id,selectedShippingOption:i.selectedShippingOption})}catch(e){throw new v}})}getOrderStatus(e,t){return k(this,void 0,void 0,function*(){try{const{status:i}=yield this.paypalCommerceRequestSender.getOrderStatus(e,t);return i}catch(e){throw new v}})}tokenizePayment(e,t){const i=this.paymentIntegrationService.getState().getCartOrThrow();if(!t)throw new m(l.MissingOrderId);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",action:\"set_external_checkout\",provider:e,order_id:t},i.source===f.BuyNow&&{cart_id:i.id}))}submitPayment(e,t,i){return k(this,void 0,void 0,function*(){const n={formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:null,method_id:e,paypal_account:{order_id:t}}};yield this.paymentIntegrationService.submitPayment(Object.assign({methodId:e,paymentData:n},i?{gatewayId:i}:{}))})}getShippingOptionOrThrow(e){const t=this.paymentIntegrationService.getState().getConsignmentsOrThrow()[0],i=t.availableShippingOptions||[],n=i.find(e=>e.isRecommended),o=(e?i.find(t=>t.id===e):i.find(e=>{var i;return e.id===(null===(i=t.selectedShippingOption)||void 0===i?void 0:i.id)}))||n||i[0];if(!o)throw new Error(\"Your order can't be shipped to this address\");return o}getAddress(e){return{firstName:(null==e?void 0:e.firstName)||\"\",lastName:(null==e?void 0:e.lastName)||\"\",email:(null==e?void 0:e.email)||\"\",phone:(null==e?void 0:e.phone)||\"\",company:\"\",address1:(null==e?void 0:e.address1)||\"\",address2:(null==e?void 0:e.address2)||\"\",city:(null==e?void 0:e.city)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",stateOrProvince:\"\",stateOrProvinceCode:(null==e?void 0:e.stateOrProvinceCode)||\"\",customFields:[]}}getBillingAddressFromOrderDetails({payer:e}){var t,i;return this.getAddress({firstName:e.name.given_name,lastName:e.name.surname,email:e.email_address,address1:e.address.address_line_1,address2:e.address.address_line_2,city:e.address.admin_area_2,countryCode:e.address.country_code,postalCode:e.address.postal_code,stateOrProvinceCode:e.address.admin_area_1,phone:null===(i=null===(t=e.phone)||void 0===t?void 0:t.phone_number)||void 0===i?void 0:i.national_number})}getShippingAddressFromOrderDetails(e){const{payer:t,purchase_units:i}=e,{address:n,name:{full_name:o}}=i[0].shipping,[r,...a]=o.split(\" \");return this.getAddress({firstName:r,lastName:a.join(\" \"),email:t.email_address,address1:n.address_line_1,address2:n.address_line_2,city:n.admin_area_2,countryCode:n.country_code,postalCode:n.postal_code,stateOrProvinceCode:n.admin_area_1})}getValidButtonStyle(e){const{color:t,height:i,label:n,shape:o}=e||{},a={color:t&&b[t]?t:void 0,height:this.getValidHeight(i),label:n&&C[n]?n:void 0,shape:o&&w[o]?o:void 0};return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(a,lodash__WEBPACK_IMPORTED_MODULE_3__.isNil)}getValidHeight(e){return e&&\"number\"==typeof e?e>55?55:e<25?25:e:40}removeElement(e){const t=e&&document.getElementById(e);t&&(t.style.display=\"none\")}}const E=\"This API endpoint is for internal use only and may change in the future\";var T;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(T||(T={}));const z=T,F={\"X-Checkout-SDK-Version\":\"1.819.0\"};var B=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class D{constructor(e){this.requestSender=e}createOrder(e,t){return B(this,void 0,void 0,function*(){const i=`/api/storefront/payment/${e}`,n=t,o=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.post(i,{headers:o,body:n})).body})}updateOrder(e){return B(this,void 0,void 0,function*(){const t=e,i=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.put(\"/api/storefront/initialization/paypalcommerce\",{headers:i,body:t})).body})}getOrderStatus(e=\"paypalcommerce\",t){return B(this,void 0,void 0,function*(){const i=`/api/storefront/initialization/${e}`,n=Object.assign({\"X-API-INTERNAL\":E,\"Content-Type\":z.Json},F);return(yield this.requestSender.get(i,Object.assign({headers:n},t))).body})}}var M=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class x{constructor(e){this.scriptLoader=e,this.window=window}getPayPalSDK(e,t,i,n){return M(this,void 0,void 0,function*(){const o=this.getPayPalSdkScriptConfigOrThrow(e,t,i);return this.loadPayPalSDK(o,n)})}loadPayPalSDK(e,t=!1){return M(this,void 0,void 0,function*(){if(!this.window.paypal||t){const t=this.transformConfig(e.options),i=this.transformConfig(e.attributes),n=`https://www.paypal.com/sdk/js?${new URLSearchParams(t).toString()}`;yield this.scriptLoader.loadScript(n,{async:!0,attributes:i})}if(!this.window.paypal)throw new h;return this.window.paypal})}getPayPalSdkScriptConfigOrThrow(e,t,i=!0){const{id:n,clientToken:o,initializationData:r}=e;if(!(null==r?void 0:r.clientId))throw new m(l.MissingPaymentMethod);const{intent:a,clientId:s,merchantId:d,buyerCountry:c,attributionId:p,isVenmoEnabled:u,isHostedCheckoutEnabled:h,isPayPalCreditAvailable:y,isDeveloperModeApplicable:g,availableAlternativePaymentMethods:v=[],enabledAlternativePaymentMethods:f=[],isGooglePayEnabled:S}=r,I=h||i,C=\"paypalcommercecreditcards\"===n,b=C?[\"card\"]:[],w=y?[\"credit\",\"paylater\"]:[],P=i||!I,O=u?[\"venmo\"]:[],k=P?f:[],A=S?[\"googlepay\"]:[],E=i?[\"card-fields\"]:[],T=[...C?[]:[\"card\"],...y?[]:[\"credit\",\"paylater\"],...u?[]:[\"venmo\"],...P?v.filter(e=>!f.includes(e)):v],z=[...b,...w,...O,...k];return{options:Object.assign({\"client-id\":s,\"merchant-id\":d,\"enable-funding\":z.length>0?z:void 0,\"disable-funding\":T.length>0?T:void 0,commit:I,components:[\"buttons\",\"hosted-fields\",\"payment-fields\",\"legal\",...A,...E],currency:t,intent:a},g&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":p,\"data-client-token\":o}}}transformConfig(e){let t={};return Object.keys(e).forEach(i=>{const n=e[i];null==n||\"\"===n||Array.isArray(n)&&0===n.length||(t=Object.assign(Object.assign({},t),{[i]:Array.isArray(n)?n.join(\",\"):n}))}),t}}const N=i=>{const{getHost:o}=i.getState();return new A((0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),i,new D((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)({host:o()})),new x((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)()))};class U extends u{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}var j=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class _{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.onError=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return j(this,void 0,void 0,function*(){const{paypalcommerce:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommerce.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommerce.onClick\" argument is not a function.');this.onError=t.onError||lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return j(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signInCustomer(e,t),Promise.resolve()})}signOut(e){return j(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){var i,n;const{container:o,onClick:r,onComplete:a}=t,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{isHostedCheckoutEnabled:l,paymentButtonStyles:c,isAppSwitchEnabled:p}=d.initializationData||{},{checkoutTopButtonStyles:u}=c||{},h=Object.assign(Object.assign(Object.assign({},this.isPaypalCommerceAppSwitchEnabled(e)&&{appSwitchWhenAvailable:!0}),{createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommerce\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)}),r&&{onClick:()=>r()}),m=Object.assign(Object.assign({},!p&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(t,i)=>this.onHostedCheckoutApprove(t,i,e,a)}),y=Object.assign(Object.assign({fundingSource:s.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},u),{height:36}))},h),l&&m),g=s.Buttons(y);g.isEligible()?(null===(i=g.hasReturned)||void 0===i?void 0:i.call(g))&&this.isPaypalCommerceAppSwitchEnabled(e)?null===(n=g.resume)||void 0===n||n.call(g):g.render(`#${o}`):this.paypalCommerceIntegrationService.removeElement(o)}onHostedCheckoutApprove(e,t,i,n){return j(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n()}catch(e){this.handleError(e)}})}onShippingAddressChange(e){return j(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}onShippingOptionsChange(e){return j(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const V=p(e=>new _(e,N(e)),[{id:\"paypalcommerce\"}]);var R=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class L{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.onError=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return R(this,void 0,void 0,function*(){const{paypalcommercecredit:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.onClick\" argument is not a function.');this.onError=t.onError||lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return R(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return R(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){const{container:i,onComplete:n,onClick:o}=t,r=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),a=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{isHostedCheckoutEnabled:s,paymentButtonStyles:d,isAppSwitchEnabled:l}=a.initializationData||{},{checkoutTopButtonStyles:c}=d||{},p=Object.assign({createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecredit\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)},o&&{onClick:()=>o()}),u=Object.assign(Object.assign({},!l&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(t,i)=>this.onHostedCheckoutApprove(t,i,e,n)}),h=[r.FUNDING.PAYLATER,r.FUNDING.CREDIT];let m=!1;h.forEach(e=>{if(!m){const t=Object.assign(Object.assign({fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},c),{height:36}))},p),s&&u),n=r.Buttons(t);n.isEligible()&&(n.render(`#${i}`),m=!0)}}),m||this.paypalCommerceIntegrationService.removeElement(i)}onHostedCheckoutApprove(e,t,i,n){return R(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n()}catch(e){this.handleError(e)}})}onShippingAddressChange(e){return R(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}onShippingOptionsChange(e){return R(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){this.handleError(e)}})}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}}const $=p(e=>new L(e,N(e)),[{id:\"paypalcommercecredit\"}]);var q=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class H{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return q(this,void 0,void 0,function*(){const{paypalcommercevenmo:t,methodId:i}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');if(!t.container)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.container\" argument is not provided.');if(t.onClick&&\"function\"!=typeof t.onClick)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.onClick\" argument is not a function.');this.paymentIntegrationService.getState().getPaymentMethod(i)||(yield this.paymentIntegrationService.loadPaymentMethod(i));const n=yield this.paypalCommerceIntegrationService.loadPayPalSdk(i);n&&n.Buttons&&\"function\"==typeof n.Buttons?this.renderButton(i,t):console.error(\"[BC PayPal]: PayPal Button could not be rendered, due to issues with loading PayPal SDK\")})}deinitialize(){return Promise.resolve()}signIn(e,t){return q(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return q(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderButton(e,t){const{container:i,onClick:n}=t,o=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:a}=r.initializationData||{},{checkoutTopButtonStyles:s}=a||{},d=Object.assign({fundingSource:o.FUNDING.VENMO,style:this.paypalCommerceIntegrationService.getValidButtonStyle(Object.assign(Object.assign({},s),{height:36})),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmo\"),onApprove:({orderID:t})=>this.paypalCommerceIntegrationService.tokenizePayment(e,t)},n&&{onClick:()=>n()}),l=o.Buttons(d);l.isEligible()?l.render(`#${i}`):this.paypalCommerceIntegrationService.removeElement(i)}}const G=p(e=>new H(e,N(e)),[{id:\"paypalcommercevenmo\"}]);var Y,W,K,J,X,Z,Q,ee,te=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ie{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,i){return te(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const n=this.getPayPalFastlaneSdkConfiguration(e,t,i);if(yield this.loadPayPalSdk(n),!this.window.paypalFastlaneSdk)throw new h}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,i,n){return te(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||n){const n=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,i);yield this.loadPayPalSdk(n)}if(!this.window.paypalGooglePay)throw new h;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return te(this,void 0,void 0,function*(){if(!this.window.paypalApms){const i=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(i),!this.window.paypalApms)throw new h}return this.window.paypalApms})}getPayPalMessages(e,t){return te(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const i=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(i)}if(!this.window.paypalMessages)throw new h;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return te(this,void 0,void 0,function*(){const i=this.transformConfig(e),n=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(i).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:n})})}getPayPalFastlaneSdkConfiguration(e,t,i){const{clientToken:n,initializationData:o}=e;if(!o||!o.clientId)throw new m(l.MissingPaymentMethod);const{intent:r,clientId:a,merchantId:s,attributionId:d}=o;return{options:{\"client-id\":a,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"buttons\",\"payment-fields\",\"hosted-fields\",\"three-domain-secure\"],currency:t,intent:r},attributes:{\"data-client-metadata-id\":i.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":d,\"data-sdk-client-token\":n}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,i=!0){const{clientToken:n,initializationData:o}=e;if(!o||!o.clientId)throw new m(l.MissingPaymentMethod);const{intent:r,clientId:a,merchantId:s,buyerCountry:d,attributionId:c,isHostedCheckoutEnabled:p,isDeveloperModeApplicable:u}=o,h=p||i;return{options:Object.assign({\"client-id\":a,\"merchant-id\":s,commit:h,components:[\"googlepay\"],currency:t,intent:r},u&&{\"buyer-country\":d}),attributes:{\"data-partner-attribution-id\":c,\"data-client-token\":n,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:i}=e;if(!i||!i.clientId)throw new m(l.MissingPaymentMethod);const{intent:n,clientId:o,merchantId:r,buyerCountry:a,attributionId:s,isDeveloperModeApplicable:d,availableAlternativePaymentMethods:c=[],enabledAlternativePaymentMethods:p=[]}=i,u=p,h=c.filter(e=>!p.includes(e));return{options:Object.assign({\"client-id\":o,\"merchant-id\":r,\"enable-funding\":u.length>0?u:void 0,\"disable-funding\":h.length>0?h:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:n},d&&{\"buyer-country\":a}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:i}=e;if(!i||!i.clientId)throw new m(l.MissingPaymentMethod);const{clientId:n,merchantId:o,attributionId:r,isDeveloperModeApplicable:a,buyerCountry:s}=i;return{options:Object.assign({\"client-id\":n,\"merchant-id\":o,components:[\"messages\"],currency:t},a&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":r}}}transformConfig(e){let t={};return Object.keys(e).forEach(i=>{const n=e[i];null==n||\"\"===n||Array.isArray(n)&&0===n.length||(t=Object.assign(Object.assign({},t),{[i]:Array.isArray(n)?n.join(\",\"):n}))}),t}}function ne(){return new ie((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.createScriptLoader)())}!function(e){e.CVV=\"cvv\",e.PAN=\"pan\"}(Y||(Y={}));class oe{static get(e){const t=`${encodeURIComponent(`${e}`)}=`,i=document.cookie;let n=null;const o=i.indexOf(t);if(o>-1){let e=i.indexOf(\";\",o);-1===e&&(e=i.length),n=decodeURIComponent(i.substring(o+t.length,e))}return n}static set(e,t,i={secure:!0}){let n=`${encodeURIComponent(e)}=${encodeURIComponent(t)}`;const{expires:o,path:r,domain:a,secure:s}=i;if(o)n+=`; expires=${o.toUTCString()}`;else{const e=new Date,t=60;e.setTime(e.getTime()+60*t*1e3),n+=`; expires=${e.toUTCString()}`}r&&(n+=`; path=${r}`),a&&(n+=`; domain=${a}`),s&&(n+=\"; secure\"),document.cookie=n}static remove(e,t){oe.set(e,\"\",Object.assign({expires:new Date(0)},t))}}!function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(W||(W={})),function(e){e.Succeeded=\"succeeded\",e.Cancelled=\"cancelled\",e.Errored=\"errored\"}(K||(K={})),function(e){e.Possible=\"POSSIBLE\",e.No=\"NO\",e.Unknown=\"UNKNOWN\",e.Yes=\"YES\"}(J||(J={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(X||(X={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(Z||(Z={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(Q||(Q={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"canceled\",e.UNRECOGNIZED=\"unrecognized\"}(ee||(ee={}));var re=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ae{constructor(){this.window=window}initializePayPalFastlane(e,t,i){return re(this,void 0,void 0,function*(){if(t&&(window.localStorage.setItem(\"fastlaneEnv\",\"sandbox\"),window.localStorage.setItem(\"axoEnv\",\"sandbox\")),!this.window.paypalFastlane){const t={root:{backgroundColorPrimary:\"transparent\"}};this.window.paypalFastlane=yield e.Fastlane({styles:i||t})}return this.window.paypalFastlane})}getPayPalFastlaneOrThrow(){if(!this.window.paypalFastlane)throw new h;return this.window.paypalFastlane}lookupCustomerOrThrow(e){return re(this,void 0,void 0,function*(){return this.getPayPalFastlaneOrThrow().identity.lookupCustomerByEmail(e)})}triggerAuthenticationFlowOrThrow(e){return re(this,void 0,void 0,function*(){return e?this.getPayPalFastlaneOrThrow().identity.triggerAuthenticationFlow(e):{}})}updateStorageSessionId(e){const t=new Date;t.setDate(t.getDate()+14);const i={expires:t,secure:!0};oe.set(\"bc-fastlane-sessionId\",e,i)}removeStorageSessionId(){oe.remove(\"bc-fastlane-sessionId\")}getStorageSessionId(){return oe.get(\"bc-fastlane-sessionId\")||\"\"}mapPayPalFastlaneProfileToBcCustomerData(e,t){var i,n,o;const{authenticationState:r,profileData:a}=t,s=null===(o=null===(n=null===(i=null==a?void 0:a.card)||void 0===i?void 0:i.paymentSource)||void 0===n?void 0:n.card)||void 0===o?void 0:o.billingAddress,d=null==a?void 0:a.shippingAddress,l=null==a?void 0:a.name,c=null==a?void 0:a.card,p=d?this.mapPayPalToBcAddress(d.address,d.name,d.phoneNumber):void 0,u=s&&l?this.mapPayPalToBcAddress(s,l,null==d?void 0:d.phoneNumber):void 0,h=c?this.mapPayPalToBcInstrument(e,c):[],m=this.filterAddresses([p,u]);return{authenticationState:r||ee.UNRECOGNIZED,addresses:m,billingAddress:u,shippingAddress:p,instruments:h}}mapPayPalToBcInstrument(e,t){const{id:i,paymentSource:n}=t,{brand:o,expiry:r,lastDigits:a}=n.card,[s,d]=r.split(\"-\");return[{bigpayToken:i,brand:o,defaultInstrument:!1,expiryMonth:d,expiryYear:s,iin:\"\",last4:a,method:e,provider:e,trustedShippingAddress:!1,untrustedShippingCardVerificationMode:Y.PAN,type:\"card\"}]}mapBcToPayPalAddress(e){return{company:(null==e?void 0:e.company)||\"\",addressLine1:(null==e?void 0:e.address1)||\"\",addressLine2:(null==e?void 0:e.address2)||\"\",adminArea1:(null==e?void 0:e.stateOrProvinceCode)||(null==e?void 0:e.stateOrProvince)||\"\",adminArea2:(null==e?void 0:e.city)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCode:(null==e?void 0:e.countryCode)||\"\"}}mapPayPalToBcAddress(e,t,i,n){const[o,r]=t.fullName.split(\" \"),a=(null==i?void 0:i.nationalNumber)||\"\",s=(null==i?void 0:i.countryCode)||\"\";return{id:Date.now(),type:\"paypal-address\",firstName:t.firstName||o||\"\",lastName:t.lastName||r||\"\",company:e.company||\"\",address1:e.addressLine1,address2:e.addressLine2||\"\",city:e.adminArea2,stateOrProvince:e.adminArea1,stateOrProvinceCode:e.adminArea1,country:e.countryCode||\"\",countryCode:e.countryCode||\"\",postalCode:e.postalCode,phone:s+a,customFields:n||[]}}filterAddresses(e){return e.reduce((e,t)=>t?e.some(e=>this.isEqualAddresses(e,t))?e:[...e,t]:e,[])}isEqualAddresses(e,t){return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.isEqual)(this.normalizeAddress(e),this.normalizeAddress(t))}normalizeAddress(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.omit)(e,[\"id\",\"phone\"])}}function se(){return new ae}function de(e){return\"string\"!=typeof e}function le(e,t){if(t||e)return function(e){var t,i;const n={},o=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.root,de),r=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.input,de),a=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(e.toggle,de),s=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(null===(t=e.text)||void 0===t?void 0:t.body,de),l=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)(null===(i=e.text)||void 0===i?void 0:i.caption,de),c=e.branding;return Object.keys(o).length&&(n.root=o),Object.keys(r).length&&(n.input=r),Object.keys(a).length&&(n.toggle=a),Object.keys(s).length&&(n.text={},n.text.body=s),Object.keys(l).length&&(n.text=Object.assign({},n.text),n.text.caption=l),c&&(n.branding=c),n}(function(e,t){var i,n,o,r,a,s,d,l,c,p,u,h,m,y,g,v,f,S,I,C,b,w;return{root:{backgroundColorPrimary:(null==e?void 0:e.fastlaneRootSettingsBackgroundColor)||(null===(i=null==t?void 0:t.root)||void 0===i?void 0:i.backgroundColorPrimary),errorColor:(null==e?void 0:e.fastlaneRootSettingsErrorColor)||(null===(n=null==t?void 0:t.root)||void 0===n?void 0:n.errorColor),fontFamily:(null==e?void 0:e.fastlaneRootSettingsFontFamily)||(null===(o=null==t?void 0:t.root)||void 0===o?void 0:o.fontFamily),fontSizeBase:(null==e?void 0:e.fastlaneRootSettingsFontSize)||(null===(r=null==t?void 0:t.root)||void 0===r?void 0:r.fontSizeBase),padding:(null==e?void 0:e.fastlaneRootSettingsPadding)||(null===(a=null==t?void 0:t.root)||void 0===a?void 0:a.padding),primaryColor:(null==e?void 0:e.fastlaneRootSettingsPrimaryColor)||(null===(s=null==t?void 0:t.root)||void 0===s?void 0:s.primaryColor)},input:{borderRadius:(null==e?void 0:e.fastlaneInputSettingsBorderRadius)||(null===(d=null==t?void 0:t.input)||void 0===d?void 0:d.borderRadius),borderColor:(null==e?void 0:e.fastlaneInputSettingsBorderColor)||(null===(l=null==t?void 0:t.input)||void 0===l?void 0:l.borderColor),focusBorderColor:(null==e?void 0:e.fastlaneInputSettingsFocusBorderBase)||(null===(c=null==t?void 0:t.input)||void 0===c?void 0:c.focusBorderColor),backgroundColor:(null==e?void 0:e.fastlaneInputSettingsBackgroundColor)||(null===(p=null==t?void 0:t.input)||void 0===p?void 0:p.backgroundColor),borderWidth:(null==e?void 0:e.fastlaneInputSettingsBorderWidth)||(null===(u=null==t?void 0:t.input)||void 0===u?void 0:u.borderWidth),textColorBase:(null==e?void 0:e.fastlaneInputSettingsTextColorBase)||(null===(h=null==t?void 0:t.input)||void 0===h?void 0:h.textColorBase)},toggle:{colorPrimary:(null==e?void 0:e.fastlaneToggleSettingsColorPrimary)||(null===(m=null==t?void 0:t.toggle)||void 0===m?void 0:m.colorPrimary),colorSecondary:(null==e?void 0:e.fastlaneToggleSettingsColorSecondary)||(null===(y=null==t?void 0:t.toggle)||void 0===y?void 0:y.colorSecondary)},text:{body:{color:(null==e?void 0:e.fastlaneTextBodySettingsColor)||(null===(v=null===(g=null==t?void 0:t.text)||void 0===g?void 0:g.body)||void 0===v?void 0:v.color),fontSize:(null==e?void 0:e.fastlaneTextBodySettingsFontSize)||(null===(S=null===(f=null==t?void 0:t.text)||void 0===f?void 0:f.body)||void 0===S?void 0:S.fontSize)},caption:{color:(null==e?void 0:e.fastlaneTextCaptionSettingsColor)||(null===(C=null===(I=null==t?void 0:t.text)||void 0===I?void 0:I.caption)||void 0===C?void 0:C.color),fontSize:(null==e?void 0:e.fastlaneTextCaptionSettingsFontSize)||(null===(w=null===(b=null==t?void 0:t.text)||void 0===b?void 0:b.caption)||void 0===w?void 0:w.fontSize)}},branding:(null==e?void 0:e.fastlaneBrandingSettings)||(null==t?void 0:t.branding)}}(e,t))}var ce=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class pe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceSdk=t,this.paypalCommerceFastlaneUtils=i}initialize(e){var t;return ce(this,void 0,void 0,function*(){const{methodId:i,paypalcommercefastlane:n}=e;if(!i)throw new U('Unable to proceed because \"methodId\" argument is not provided.');try{yield this.paymentIntegrationService.loadPaymentMethod(i);const e=this.paymentIntegrationService.getState(),o=e.getCartOrThrow(),r=e.getPaymentMethodOrThrow(i),a=!!(null===(t=r.initializationData)||void 0===t?void 0:t.isDeveloperModeApplicable),s=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(r,o.currency.code,o.id);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(s,a,this.getFastlaneStyles(i,n))}catch(e){}return Promise.resolve()})}deinitialize(){return ce(this,void 0,void 0,function*(){return Promise.resolve()})}signIn(e,t){return ce(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return ce(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){return ce(this,void 0,void 0,function*(){const{checkoutPaymentMethodExecuted:t,continueWithCheckoutCallback:i,methodId:n}=e||{};if(!n)throw new U('Unable to proceed because \"methodId\" argument is not provided.');if(\"function\"!=typeof i)throw new U('Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.');if(this.paymentIntegrationService.getState().getCustomerOrThrow().isGuest){t&&\"function\"==typeof t&&t();try{yield this.runPayPalAuthenticationFlowOrThrow(n)}catch(e){}}i()})}runPayPalAuthenticationFlowOrThrow(e){return ce(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow().id,n=t.getCustomer(),o=t.getBillingAddress(),r=(null==n?void 0:n.email)||(null==o?void 0:o.email)||\"\",{customerContextId:a}=yield this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(r),s=yield this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(a),d=s.authenticationState===ee.CANCELED;yield this.updateCustomerDataState(e,s),d?this.paypalCommerceFastlaneUtils.removeStorageSessionId():this.paypalCommerceFastlaneUtils.updateStorageSessionId(i)})}updateCustomerDataState(e,t){var i;return ce(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState().getCartOrThrow(),{authenticationState:o,addresses:r,billingAddress:a,shippingAddress:s,instruments:d}=this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(e,t);if(yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:o,addresses:r,instruments:d}),a&&(yield this.paymentIntegrationService.updateBillingAddress(a)),s&&n.lineItems.physicalItems.length>0){const t=yield this.paymentIntegrationService.updateShippingAddress(s),n=t.getPaymentMethodOrThrow(e),{isFastlaneShippingOptionAutoSelectEnabled:o}=n.initializationData||{},r=t.getConsignments()||[],a=(null===(i=r[0])||void 0===i?void 0:i.availableShippingOptions)||[],d=a[0],l=a.find(e=>e.isRecommended);if((l||d)&&o){const e=(null==l?void 0:l.id)||d.id;yield this.paymentIntegrationService.selectShippingOption(e)}}})}getFastlaneStyles(e,t){const i=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{fastlaneStyles:n,isFastlaneStylingEnabled:o}=i.initializationData||{};return le(o?n:{},null==t?void 0:t.styles)}}const ue=p(e=>new pe(e,ne(),se()),[{id:\"paypalcommerceacceleratedcheckout\"},{id:\"paypalcommercecreditcards\"}]);var he=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class me{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){var t;return he(this,void 0,void 0,function*(){const{paypalcommerce:i,containerId:n,methodId:o}=e,r=Boolean(null==i?void 0:i.buyNowInitializeOptions);if(!o)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');if(r&&!i.currencyCode)throw new U('Unable to initialize payment because \"options.paypalcommerce.currencyCode\" argument is not provided.');if(r&&\"function\"!=typeof(null===(t=i.buyNowInitializeOptions)||void 0===t?void 0:t.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommerce.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');r||(yield this.paymentIntegrationService.loadDefaultCheckout());const a=r?i.currencyCode:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(o,a,!1),this.renderButton(n,o,i,r)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i,n){var o,r;const{buyNowInitializeOptions:a,style:s,onComplete:d,onEligibilityFailure:l}=i,c=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),p=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{isHostedCheckoutEnabled:u,isAppSwitchEnabled:h}=p.initializationData||{},m=Object.assign(Object.assign({},!n&&this.isPaypalCommerceAppSwitchEnabled(t)&&{appSwitchWhenAvailable:!0}),{createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommerce\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)}),y={onClick:()=>this.handleClick(a),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},g=Object.assign(Object.assign({},!h&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(e,i)=>this.onHostedCheckoutApprove(e,i,t,d)}),v=Object.assign(Object.assign(Object.assign({fundingSource:c.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(s)},m),a&&y),u&&g),f=c.Buttons(v);f.isEligible()?(null===(o=f.hasReturned)||void 0===o?void 0:o.call(f))&&this.isPaypalCommerceAppSwitchEnabled(t)?null===(r=f.resume)||void 0===r||r.call(f):f.render(`#${e}`):l&&\"function\"==typeof l?l():this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return he(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}onHostedCheckoutApprove(e,t,i,n){return he(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}return yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n(),!0}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingAddressChange(e){return he(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingOptionsChange(e){return he(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const ye=p(e=>new me(e,N(e)),[{id:\"paypalcommerce\"}]),ge=function({styles:e}){const t={};return e.color&&(t.color=e.color),e.layout&&(t.layout=e.layout),(e[\"logo-type\"]||e[\"logo-position\"])&&(t.logo={},e[\"logo-type\"]&&(t.logo.type=e[\"logo-type\"]),e[\"logo-position\"]&&(t.logo.position=e[\"logo-position\"])),e.ratio&&(t.ratio=e.ratio),(e[\"text-color\"]||e[\"text-size\"])&&(t.text={},e[\"text-color\"]&&(t.text.color=e[\"text-color\"]),e[\"text-size\"]&&(t.text.size=+e[\"text-size\"])),t};var ve=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class fe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i}initialize(e){var t;return ve(this,void 0,void 0,function*(){const{paypalcommercecredit:i,containerId:n,methodId:o}=e,{buyNowInitializeOptions:r,currencyCode:a,messagingContainerId:s}=i||{},d=!!r;if(!o)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.paypalcommercecredit\" argument is not provided.');if(d&&!a)throw new U('Unable to initialize payment because \"options.paypalcommercecredit.currencyCode\" argument is not provided.');if(d&&\"function\"!=typeof(null==r?void 0:r.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercecredit.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');d||(yield this.paymentIntegrationService.loadDefaultCheckout());const l=this.paymentIntegrationService.getState(),c=d?a:l.getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(o,c,!1),this.renderButton(n,o,i);const p=l.getStoreConfigOrThrow().checkoutSettings.features;if(null!==(t=p[\"PAYPAL-5557.Hide_ppc_banner_implementation\"])&&void 0!==t&&t)return;const u=s&&document.getElementById(s);if(c&&u){const e=l.getPaymentMethodOrThrow(o),{paypalBNPLConfiguration:t=[]}=e.initializationData||{},i=t&&t.find(({id:e})=>\"cart\"===e);if(!(null==i?void 0:i.status))return;u.removeAttribute(\"data-pp-style-logo-type\"),u.removeAttribute(\"data-pp-style-logo-position\"),u.removeAttribute(\"data-pp-style-text-color\"),u.removeAttribute(\"data-pp-style-text-size\");const n=yield this.paypalCommerceSdk.getPayPalMessages(e,c);this.renderMessages(n,s,i)}})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{buyNowInitializeOptions:n,style:o,onComplete:r,onEligibilityFailure:a}=i,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{isHostedCheckoutEnabled:l,isAppSwitchEnabled:c}=d.initializationData||{},p={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecredit\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},u={onClick:()=>this.handleClick(n),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},h=Object.assign(Object.assign({},!c&&{onShippingAddressChange:e=>this.onShippingAddressChange(e),onShippingOptionsChange:e=>this.onShippingOptionsChange(e)}),{onApprove:(e,i)=>this.onHostedCheckoutApprove(e,i,t,r)}),m=[s.FUNDING.PAYLATER,s.FUNDING.CREDIT];let y=!1;m.forEach(t=>{if(!y){const i=Object.assign(Object.assign(Object.assign({fundingSource:t,style:this.paypalCommerceIntegrationService.getValidButtonStyle(o)},p),n&&u),l&&h),r=s.Buttons(i);r.isEligible()?(r.render(`#${e}`),y=!0):a&&\"function\"==typeof a&&a()}}),y||this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return ve(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}onHostedCheckoutApprove(e,t,i,n){return ve(this,void 0,void 0,function*(){if(!e.orderID)throw new m(l.MissingOrderId);const o=this.paymentIntegrationService.getState().getCartOrThrow(),r=yield t.order.get();try{const t=this.paypalCommerceIntegrationService.getBillingAddressFromOrderDetails(r);if(yield this.paymentIntegrationService.updateBillingAddress(t),o.lineItems.physicalItems.length>0){const e=this.paypalCommerceIntegrationService.getShippingAddressFromOrderDetails(r);yield this.paymentIntegrationService.updateShippingAddress(e),yield this.paypalCommerceIntegrationService.updateOrder()}return yield this.paymentIntegrationService.submitOrder({},{params:{methodId:i}}),yield this.paypalCommerceIntegrationService.submitPayment(i,e.orderID),n&&\"function\"==typeof n&&n(),!0}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingAddressChange(e){return ve(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getAddress({city:e.shippingAddress.city,countryCode:e.shippingAddress.countryCode,postalCode:e.shippingAddress.postalCode,stateOrProvinceCode:e.shippingAddress.state});try{yield this.paymentIntegrationService.updateBillingAddress(t),yield this.paymentIntegrationService.updateShippingAddress(t);const e=this.paypalCommerceIntegrationService.getShippingOptionOrThrow();yield this.paymentIntegrationService.selectShippingOption(e.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}onShippingOptionsChange(e){return ve(this,void 0,void 0,function*(){const t=this.paypalCommerceIntegrationService.getShippingOptionOrThrow(e.selectedShippingOption.id);try{yield this.paymentIntegrationService.selectShippingOption(t.id),yield this.paypalCommerceIntegrationService.updateOrder()}catch(e){if(\"string\"==typeof e)throw new Error(e);throw e}})}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"cart\",style:ge(i)};e.Messages(n).render(`#${t}`)}}const Se=p(e=>new fe(e,N(e),ne()),[{id:\"paypalcommercecredit\"}]);var Ie=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ce{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return Ie(this,void 0,void 0,function*(){const{paypalcommercevenmo:t,containerId:i,methodId:n}=e,{buyNowInitializeOptions:o,currencyCode:r}=t||{},a=!!o;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');if(a&&!r)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.currencyCode\" argument is not provided.');if(a&&\"function\"!=typeof(null==o?void 0:o.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercevenmo.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');a||(yield this.paymentIntegrationService.loadDefaultCheckout());const s=a?r:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(n,s,!1),this.renderButton(i,n,t)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{buyNowInitializeOptions:n,style:o,onEligibilityFailure:r}=i,a=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),s=a.FUNDING.VENMO,d={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmo\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},l={onClick:()=>this.handleClick(n),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},c=Object.assign(Object.assign({fundingSource:s,style:this.getValidVenmoButtonStyles(o)},d),n&&l),p=a.Buttons(c);p.isEligible()?p.render(`#${e}`):r&&\"function\"==typeof r?r():this.paypalCommerceIntegrationService.removeElement(e)}getValidVenmoButtonStyles(e){const t=this.paypalCommerceIntegrationService.getValidButtonStyle(e);return t.color===b.gold?Object.assign(Object.assign({},t),{color:void 0}):t}handleClick(e){return Ie(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}}const be=p(e=>new Ce(e,N(e)),[{id:\"paypalcommercevenmo\"}]);var we=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Pe{constructor(e,t){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t}initialize(e){return we(this,void 0,void 0,function*(){const{paypalcommercealternativemethods:t,containerId:i,methodId:n}=e,{apm:o,buyNowInitializeOptions:r,currencyCode:a}=t||{},s=!!r;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new U('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.apm\" argument is not provided.');if(s&&!a)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.currencyCode\" argument is not provided.');if(s&&\"function\"!=typeof(null==r?void 0:r.getBuyNowCartRequestBody))throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods.buyNowInitializeOptions.getBuyNowCartRequestBody\" argument is not provided or it is not a function.');s||(yield this.paymentIntegrationService.loadDefaultCheckout());const d=s?a:this.paymentIntegrationService.getState().getCartOrThrow().currency.code;yield this.paypalCommerceIntegrationService.loadPayPalSdk(n,d,!1),this.renderButton(i,n,t)})}deinitialize(){return Promise.resolve()}renderButton(e,t,i){const{apm:n,buyNowInitializeOptions:o,style:r,onEligibilityFailure:a}=i,s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow();if(!Object.values(s.FUNDING).includes(n))throw new U('Unable to initialize PayPal button because \"options.paypalcommercealternativemethods.apm\" argument is not valid funding source.');const d={createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethod\"),onApprove:({orderID:e})=>this.paypalCommerceIntegrationService.tokenizePayment(t,e)},l={onClick:()=>this.handleClick(o),onCancel:()=>this.paymentIntegrationService.loadDefaultCheckout()},c=Object.assign(Object.assign({fundingSource:n,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r)},d),o&&l),p=s.Buttons(c);p.isEligible()?p.render(`#${e}`):a&&\"function\"==typeof a?a():this.paypalCommerceIntegrationService.removeElement(e)}handleClick(e){return we(this,void 0,void 0,function*(){if(e){const t=yield this.paypalCommerceIntegrationService.createBuyNowCartOrThrow(e);yield this.paymentIntegrationService.loadCheckout(t.id)}})}}const Oe=p(e=>new Pe(e,N(e)),[{id:\"paypalcommercealternativemethods\"}]),ke={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},Ae=\"embedded-checkout-loading-indicator-rotation\";class Ee{constructor(e){this.styles=Object.assign(Object.assign({},ke),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${Ae} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(Ae))return;const t=document.createElement(\"style\");t.id=Ae,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${Ae} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}const Te={\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"};class ze extends U{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class Fe extends v{constructor(e){super(e,{message:\"There is a problem processing your payment. Please try again later.\"}),this.name=\"PaymentMethodInvalidError\",this.type=\"payment_method_invalid\"}}class Be extends u{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function De(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function Me(e){return Boolean(e.instrumentId)}function xe(e){return\"object\"==typeof e&&null!==e&&\"bigpayToken\"in e&&\"defaultInstrument\"in e&&\"provider\"in e&&\"trustedShippingAddress\"in e&&\"method\"in e&&\"type\"in e}var Ne=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ue{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.loadingIndicator=n}initialize(e){var t;return Ne(this,void 0,void 0,function*(){const{methodId:i,paypalcommerce:n}=e||{};if(this.paypalcommerce=n,!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const o=this.paymentIntegrationService.getState(),r=o.getPaymentMethodOrThrow(i),{container:a,bannerContainerId:s}=n,{orderId:d,paypalBNPLConfiguration:l=[],isPayPalCreditAvailable:c}=r.initializationData||{};if(void 0!==s){if(!document.getElementById(s))return void console.error(\"Unable to create banner without valid banner container ID.\");const e=null==l?void 0:l.find(({id:e})=>\"checkout\"===e);if(c||!(null==e?void 0:e.status))return;const t=yield this.paypalCommerceSdk.getPayPalMessages(r,o.getCartOrThrow().currency.code);return t&&\"function\"==typeof(null==t?void 0:t.Messages)?this.renderMessages(t,s,e):void console.error(\"[BC PayPalCommerce PayLater]: banner could not be rendered, due to issues with loading PayPal SDK\")}d?this.orderId=null===(t=r.initializationData)||void 0===t?void 0:t.orderId:(this.loadingIndicatorContainer=null==a?void 0:a.split(\"#\")[1],yield this.paypalCommerceIntegrationService.loadPayPalSdk(i),n.onInit&&\"function\"==typeof n.onInit&&n.onInit(()=>this.renderButton(i,n)),(void 0===n.shouldRenderPayPalButtonOnInitialization||n.shouldRenderPayPalButtonOnInitialization)&&this.renderButton(i,n))})}execute(e,t){var i,n;return Ne(this,void 0,void 0,function*(){const{payment:o}=e,r=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{onError:a}=this.paypalcommerce||{};if(!o)throw new ze([\"payment\"]);const{methodId:s,paymentData:d}=o;if(this.isPayPalVaultedInstrumentPaymentData(d)&&!this.orderId&&(this.orderId=yield this.createOrder()),!this.orderId)throw new Fe;const l=this.isPayPalVaultedInstrumentPaymentData(d)?this.prepareVaultedInstrumentPaymentPayload(s,this.orderId,d):this.preparePaymentPayload(s,this.orderId,d);try{yield this.paymentIntegrationService.submitOrder(r,t),yield this.paymentIntegrationService.submitPayment(l)}catch(e){if(function(e){var t;return(e=>\"object\"==typeof e&&null!==e&&\"body\"in e)(e)&&\"offsite_redirect\"===(null===(t=e.body.additional_action_required)||void 0===t?void 0:t.type)}(e)){const t=null===(n=null===(i=e.body.additional_action_required)||void 0===i?void 0:i.data)||void 0===n?void 0:n.redirect_url;return new Promise(()=>window.location.replace(t))}return this.isProviderError(e)&&(yield this.paypalCommerceIntegrationService.loadPayPalSdk(o.methodId),yield new Promise((e,t)=>{var i;this.paypalcommerce&&(null===(i=this.paypalButton)||void 0===i||i.close(),this.renderButton(o.methodId,this.paypalcommerce),this.handleError(new Error(\"INSTRUMENT_DECLINED\"),a)),t()})),this.handleError(e,a),Promise.reject()}})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}prepareVaultedInstrumentPaymentPayload(e,t,i){const{instrumentId:n,shouldSetAsDefaultInstrument:o}=i,r=!this.isTrustedVaultingFlow(i);return r?{methodId:e,paymentData:{shouldSaveInstrument:r,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t}}}}:{methodId:e,paymentData:{instrumentId:n,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t},bigpay_token:{token:n}}}}}preparePaymentPayload(e,t,i){const{shouldSaveInstrument:n=!1,shouldSetAsDefaultInstrument:o=!1}=De(i)?i:{};return{methodId:e,paymentData:{shouldSaveInstrument:n,shouldSetAsDefaultInstrument:o,formattedPayload:{paypal_account:{order_id:t}}}}}renderButton(e,t){var i,n,o,r;const a=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:d}=s.initializationData||{},{checkoutPaymentButtonStyles:l}=d||{},{container:c,onError:p,onRenderButton:u,onValidate:h,submitForm:m}=t;if(!c)throw new U('Unable to initialize payment because \"container\" argument is not provided.');const y=Object.assign(Object.assign({},this.isPaypalCommerceAppSwitchEnabled(e)&&{appSwitchWhenAvailable:!0}),{fundingSource:a.FUNDING.PAYPAL,style:this.paypalCommerceIntegrationService.getValidButtonStyle(l),createOrder:()=>this.createOrder(),onClick:(e,t)=>this.handleClick(t,h),onApprove:e=>this.handleApprove(e,m),onError:e=>this.handleError(e,p),onCancel:()=>this.toggleLoadingIndicator(!1)});this.paypalButton=a.Buttons(y),this.paypalButton.isEligible()&&(u&&\"function\"==typeof u&&u(),(null===(n=(i=this.paypalButton).hasReturned)||void 0===n?void 0:n.call(i))&&this.isPaypalCommerceAppSwitchEnabled(e)?null===(r=(o=this.paypalButton).resume)||void 0===r||r.call(o):this.paypalButton.render(c))}handleClick(e,t){return Ne(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;return null==t?void 0:t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,null==t||t()}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}createOrder(){return Ne(this,void 0,void 0,function*(){const e=this.getFieldsValues();return this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecheckout\",{shouldSaveInstrument:(null==e?void 0:e.shouldSaveInstrument)||!1})})}getFieldsValues(){const{getFieldsValues:e}=this.paypalcommerce||{};return\"function\"==typeof e?e():void 0}isTrustedVaultingFlow(e){if(e&&Me(e)){const t=this.paymentIntegrationService.getState().getInstruments(),i=null==t?void 0:t.find(t=>xe(t)&&t.bigpayToken===e.instrumentId);return!(xe(i)&&!i.trustedShippingAddress)}return!1}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}isPayPalVaultedInstrumentPaymentData(e){return!!e&&Me(e)&&De(e)}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"payment\",style:ge(i)};e.Messages(n).render(`#${t}`)}isProviderError(e){var t,i,n;return!!function(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e}(e)&&\"INSTRUMENT_DECLINED\"===(null===(n=null===(i=((null===(t=null==e?void 0:e.errors)||void 0===t?void 0:t.filter(e=>e.provider_error))||[])[0])||void 0===i?void 0:i.provider_error)||void 0===n?void 0:n.code)}isPaypalCommerceAppSwitchEnabled(e){var t;return(null===(t=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.isAppSwitchEnabled)||!1}}const je=p(e=>new Ue(e,N(e),new ie((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)()),new Ee({containerStyles:Te})),[{id:\"paypalcommerce\"}]);class _e extends u{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}var Ve=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Re{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i,this.paypalCommerceSdk=n}initialize(e){return Ve(this,void 0,void 0,function*(){const{methodId:t,paypalcommerce:i,paypalcommercecredit:n}=e||{},o=n||i;if(!t)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommerce\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState(),a=r.getPaymentMethodOrThrow(t),{paypalBNPLConfiguration:s=[],orderId:d}=a.initializationData||{},{bannerContainerId:l,container:c}=o;if(void 0!==l){if(!document.getElementById(l))return void console.error(\"Unable to create banner without valid banner container ID.\");const e=s&&s.find(({id:e})=>\"checkout\"===e);if(!(null==e?void 0:e.status))return;const t=yield this.paypalCommerceSdk.getPayPalMessages(a,r.getCartOrThrow().currency.code);return this.renderMessages(t,l,e)}d?this.orderId=d:(yield this.paypalCommerceIntegrationService.loadPayPalSdk(t),this.loadingIndicatorContainer=null==c?void 0:c.split(\"#\")[1],this.renderButton(t,o))})}execute(e,t){return Ve(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);if(!this.orderId)throw new Fe;yield this.paymentIntegrationService.submitOrder(n,t),yield this.paypalCommerceIntegrationService.submitPayment(i.methodId,this.orderId)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}renderButton(e,t){if(!(null==t?void 0:t.container))throw new U('Unable to initialize payment because \"container\" argument is not provided.');const i=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:o}=n.initializationData||{},{checkoutPaymentButtonStyles:r}=o||{},{container:a,onError:s,onRenderButton:d,onValidate:l,submitForm:c}=t,p=[i.FUNDING.PAYLATER,i.FUNDING.CREDIT];let u=!1;p.forEach(e=>{if(u)return;const t={fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercecreditcheckout\"),onClick:(e,t)=>this.handleClick(t,l),onApprove:e=>this.handleApprove(e,c),onCancel:()=>this.toggleLoadingIndicator(!1),onError:e=>this.handleError(e,s)};if(this.paypalButton=i.Buttons(t),this.paypalButton.isEligible()||e!==i.FUNDING.PAYLATER){if(!this.paypalButton.isEligible()&&e===i.FUNDING.CREDIT)throw new _e(`PayPal ${e} is not available for your region. Please use PayPal Checkout instead.`);d&&\"function\"==typeof d&&d(),this.paypalButton.render(a),u=!0}})}handleClick(e,t){return Ve(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;if(t&&\"function\"==typeof t)return t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,t&&\"function\"==typeof t&&t()}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}renderMessages(e,t,i){const n={amount:this.paymentIntegrationService.getState().getCheckoutOrThrow().outstandingBalance,placement:\"payment\",style:ge(i)};e.Messages(n).render(`#${t}`)}}const Le=p(e=>new Re(e,N(e),new Ee({containerStyles:Te}),ne()),[{id:\"paypalcommercecredit\"}]);var $e=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class qe{constructor(e,t,i){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i}initialize(e){var t,i;return $e(this,void 0,void 0,function*(){const{methodId:n,paypalcommerce:o,paypalcommercevenmo:r}=e||{},a=r||o;if(!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!a)throw new U('Unable to initialize payment because \"options.paypalcommercevenmo\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(n);const s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(n);(null===(t=s.initializationData)||void 0===t?void 0:t.orderId)?this.orderId=null===(i=s.initializationData)||void 0===i?void 0:i.orderId:(yield this.paypalCommerceIntegrationService.loadPayPalSdk(n),this.loadingIndicatorContainer=a.container.split(\"#\")[1],this.renderButton(n,a))})}execute(e,t){return $e(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);if(!this.orderId)throw new Fe;yield this.paymentIntegrationService.submitOrder(n,t),yield this.paypalCommerceIntegrationService.submitPayment(i.methodId,this.orderId)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}renderButton(e,t){const i=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),{paymentButtonStyles:o}=n.initializationData||{},{checkoutPaymentButtonStyles:r}=o||{},{container:a,onError:s,onRenderButton:d,onValidate:l,submitForm:c}=t,p={fundingSource:i.FUNDING.VENMO,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),createOrder:()=>this.paypalCommerceIntegrationService.createOrder(\"paypalcommercevenmocheckout\"),onClick:(e,t)=>this.handleClick(t,l),onApprove:e=>this.handleApprove(e,c),onCancel:()=>this.toggleLoadingIndicator(!1),onError:e=>this.handleError(e,s)};if(this.paypalButton=i.Buttons(p),!this.paypalButton.isEligible())throw new _e(\"PayPal Venmo is not available for your region. Please use PayPal Checkout instead.\");d&&\"function\"==typeof d&&d(),this.paypalButton.render(a)}handleClick(e,t){return $e(this,void 0,void 0,function*(){const{resolve:i,reject:n}=e;return t(()=>(this.toggleLoadingIndicator(!0),i()),n)})}handleApprove({orderID:e},t){this.orderId=e,t(),this.toggleLoadingIndicator(!1)}handleError(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const He=p(e=>new qe(e,N(e),new Ee({styles:{backgroundColor:\"black\"}})),[{id:\"paypalcommercevenmo\"}]);class Ge extends v{constructor(e){super(e,{message:\"The request has timed out or aborted.\"}),this.name=\"TimeoutError\",this.type=\"timeout\"}}function Ye(e,t,i=!0){var n;return null!==(n=e[t])&&void 0!==n?n:i}var We=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ke{constructor(e,t,i,n,o=3e3,r=3e5){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.loadingIndicator=n,this.pollingInterval=o,this.maxPollingIntervalTime=r,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_3__.noop,this.isPollingEnabled=!1}initialize(e){return We(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,paypalcommerce:n,paypalcommercealternativemethods:o}=e,r=o||n;if(this.paypalcommercealternativemethods=o,!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!r)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument is not provided.');const a=this.paymentIntegrationService.getState(),s=a.getPaymentMethodOrThrow(i,t);if(\"klarna\"===i)return;const{orderId:d,shouldRenderFields:l}=s.initializationData||{},c=a.getStoreConfigOrThrow().checkoutSettings.features;this.isPollingEnabled=Ye(c,\"PAYPAL-5192.paypal_commerce_ideal_polling\"),d?this.orderId=d:(this.paypalApms=yield this.paypalCommerceSdk.getPayPalApmsSdk(s,a.getCartOrThrow().currency.code),this.loadingIndicatorContainer=r.container.split(\"#\")[1],this.renderButton(i,t,r),l&&this.renderFields(i,r))})}execute(e,t){return We(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);const{methodId:o,gatewayId:r}=i;if(\"klarna\"===o)try{const e={formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:null,method_id:o}};yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment({methodId:o,gatewayId:r,paymentData:e})}catch(e){if(this.isRedirectError(e)){const t=e.body.additional_action_required.data.redirect_url;return new Promise((e,i)=>{window.location.replace(t),this.toggleLoadingIndicator(!1),i()})}return this.handleError(e),Promise.reject(e)}else{if(!this.orderId)throw new Fe;this.isPollingEnabled&&\"ideal\"===o&&(yield new Promise((e,t)=>{this.initializePollingMechanism(o,e,t,r)})),this.isNonInstantPaymentMethod(o)||(yield this.paymentIntegrationService.submitOrder(n,t)),yield this.paypalCommerceIntegrationService.submitPayment(o,this.orderId,r)}})}finalize(){return Promise.reject(new Be)}deinitialize(){var e;return this.orderId=void 0,this.isPollingEnabled&&this.resetPollingMechanism(),null===(e=this.paypalButton)||void 0===e||e.close(),Promise.resolve()}initializePollingMechanism(e,t,i,n){return We(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const o=yield this.paypalCommerceIntegrationService.getOrderStatus(n),r=o===O.Approved,a=o===O.PollingError;if(r)return this.deinitializePollingMechanism(),t();if(a)return i();if(!r&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,paypalcommercealternativemethods:this.paypalcommercealternativemethods}),this.handleError(new Ge)}catch(e){i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}reinitializeStrategy(e){return We(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}handleError(e){const{onError:t}=this.paypalcommercealternativemethods||{};this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}renderButton(e,t,i){const n=this.getPaypalAmpsSdkOrThrow(),o=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e,t),{buttonStyle:r}=o.initializationData||{},{container:a,onError:s,onRenderButton:d,submitForm:l}=i,c={fundingSource:e,style:this.paypalCommerceIntegrationService.getValidButtonStyle(r),onInit:(e,t)=>i.onInitButton(t),createOrder:()=>this.onCreateOrder(e,t,i),onApprove:e=>this.handleApprove(e,l),onCancel:()=>{this.toggleLoadingIndicator(!1),this.deinitializePollingMechanism()},onError:e=>{this.deinitializePollingMechanism(),this.handleFailure(e,s)},onClick:(e,t)=>We(this,void 0,void 0,function*(){return i.onValidate(t.resolve,t.reject)})};this.paypalButton=n.Buttons(c),this.paypalButton.isEligible()&&(d&&\"function\"==typeof d&&d(),this.paypalButton.render(a))}onCreateOrder(e,t,i){return We(this,void 0,void 0,function*(){const{onValidate:n}=i;yield n(()=>(this.toggleLoadingIndicator(!0),()=>Promise.resolve()),lodash__WEBPACK_IMPORTED_MODULE_3__.noop);const o=yield this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethodscheckout\");if(this.isNonInstantPaymentMethod(e)){const i={useStoreCredit:!1},n={params:{methodId:e,gatewayId:t}};yield this.paymentIntegrationService.submitOrder(i,n),yield this.paypalCommerceIntegrationService.submitPayment(e,o,t)}return o})}handleApprove({orderID:e},t){this.orderId=e,t()}handleFailure(e,t){this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}renderFields(e,t){const i=this.getPaypalAmpsSdkOrThrow(),n=this.paymentIntegrationService.getState(),{firstName:o,lastName:r,email:a}=n.getBillingAddressOrThrow(),{apmFieldsContainer:s,apmFieldsStyles:d}=t;if(!s)throw new U('Unable to initialize payment because \"options.paypalcommercealternativemethods\" argument should contain \"apmFieldsContainer\".');const l=document.querySelector(s);l&&(l.innerHTML=\"\");const c={fundingSource:e,style:d||{},fields:{name:{value:`${o} ${r}`},email:{value:a}}};i.PaymentFields(c).render(s)}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}isNonInstantPaymentMethod(e){return e.toUpperCase()in P}getPaypalAmpsSdkOrThrow(){if(!this.paypalApms)throw new h;return this.paypalApms}isRedirectError(e){var t;if(\"object\"!=typeof e||null===e)return!1;const{body:i}=e;return!!i&&!!(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.redirect_url)}}const Je=p(e=>new Ke(e,N(e),ne(),new Ee({containerStyles:Te})),[{gateway:\"paypalcommercealternativemethods\"}]);var Xe;!function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\",e.CardExpiryVerification=\"cardExpiryVerification\"}(Xe||(Xe={}));const Ze=Xe;function Qe(e){return Ze.CardNumber in e&&Ze.CardName in e&&Ze.CardExpiry in e}function et(e){return Ze.CardNumberVerification in e&&Ze.CardCodeVerification in e&&Ze.CardExpiryVerification in e}class tt extends u{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}var it;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(it||(it={}));class nt extends u{constructor(e){super(function(e){switch(e){case it.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case it.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case it.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case it.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}class ot extends u{constructor(e,t){super(t||\"Unable to proceed because the payment form contains invalid data.\"),this.details=e,this.name=\"PaymentInvalidFormError\",this.type=\"payment_invalid_form\"}}var rt=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class at{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.paypalCommerceSdk=i,this.paypalCommerceFastlaneUtils=n}initialize(e){return rt(this,void 0,void 0,function*(){const{methodId:t,paypalcommercecreditcards:i,paypalcommerce:n}=e,o=i||n,{form:r,onCreditCardFieldsRenderingError:a,onLoadComplete:s}=o||{};if(!t)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!r)throw new U('Unable to proceed because \"options.paypalcommercecreditcards.form\" argument is not provided.');this.hostedFormOptions=r,this.isCreditCardForm=Qe(r.fields),this.isCreditCardVaultedForm=et(r.fields)&&!this.hasUndefinedValues(),yield this.paymentIntegrationService.loadPaymentMethod(t),yield this.paypalCommerceIntegrationService.loadPayPalSdk(t,void 0,!0,!0),null==s||s(),(this.isCreditCardForm||this.isCreditCardVaultedForm)&&(yield this.initializeFields(r,a)),this.shouldInitializePayPalFastlane(t)&&(yield this.initializePayPalFastlaneOrThrow(t))})}execute(e,t){return rt(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{methodId:o,paymentData:r}=i||{};if(!i||!o)throw new ze([\"payment\"]);if(this.executionPaymentData=r,this.isCreditCardForm||this.isCreditCardVaultedForm)yield this.validateHostedFormOrThrow(),yield this.submitHostedForm();else{const{orderId:e}=yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",this.getInstrumentParams());this.returnedOrderId=e}const a=this.preparePaymentPayload(o,r,this.returnedOrderId,this.returnedVaultedToken);yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment(a)})}finalize(){return Promise.reject(new Be)}deinitialize(){var e,t,i,n;return rt(this,void 0,void 0,function*(){return yield null===(e=this.cvvField)||void 0===e?void 0:e.close(),yield null===(t=this.expiryField)||void 0===t?void 0:t.close(),yield null===(i=this.numberField)||void 0===i?void 0:i.close(),yield null===(n=this.nameField)||void 0===n?void 0:n.close(),Promise.resolve()})}preparePaymentPayload(e,t,i,n){const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=De(t)?t:{},s=t&&Me(t)?t.instrumentId:void 0,l=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.omitBy)({verification_nonce:n,token:s},lodash__WEBPACK_IMPORTED_MODULE_3__.isNil);return{methodId:e,paymentData:{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,instrumentId:s,formattedPayload:Object.assign(Object.assign({},n||s?{bigpay_token:l}:{}),i?{card_with_order:{order_id:i}}:{})}}}initializeFields(e,t){return rt(this,void 0,void 0,function*(){const{fields:i,styles:n}=e,o=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),r=this.getExecuteCallback(i),a=Object.assign({style:this.getInputStyles(n),onApprove:({orderID:e,vaultSetupToken:t,liabilityShift:i})=>{if(i===S.No||i===S.Unknown)throw new Error;return this.handleApprove({orderID:e,vaultSetupToken:t})},onError:()=>{throw new tt},inputEvents:{onChange:t=>this.onChangeHandler(e,t),onFocus:t=>this.onFocusHandler(e,t),onBlur:t=>this.onBlurHandler(e,t),onInputSubmitRequest:t=>this.onInputSubmitRequest(e,t)}},r);if(this.cardFields=yield o.CardFields(a),!this.cardFields.isEligible())throw new nt(it.PaymentNotInitialized);try{this.stylizeInputContainers(i),Qe(i)&&(yield this.renderFields(i)),et(i)&&(yield this.renderVaultedFields(i))}catch(e){\"function\"==typeof t&&t(e)}})}getExecuteCallback(e){return et(e)?this.createVaultSetupTokenCallback():this.createOrderCallback()}createVaultSetupTokenCallback(){return{createVaultSetupToken:()=>rt(this,void 0,void 0,function*(){const{setupToken:e}=(yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",Object.assign(Object.assign({},this.getInstrumentParams()),{setupToken:!0})))||{};return e})}}createOrderCallback(){return{createOrder:()=>rt(this,void 0,void 0,function*(){const{orderId:e}=(yield this.paypalCommerceIntegrationService.createOrderCardFields(\"paypalcommercecreditcardscheckout\",this.getInstrumentParams()))||{};return e})}}handleApprove({orderID:e,vaultSetupToken:t}){e&&(this.returnedOrderId=e),t&&(this.returnedVaultedToken=t)}renderFields(e){var t,i,n,o;return rt(this,void 0,void 0,function*(){const r=this.getCardFieldsOrThrow();(null===(t=e.cardCode)||void 0===t?void 0:t.containerId)&&(this.cvvField=r.CVVField({placeholder:\"\"}),yield this.cvvField.render(`#${e.cardCode.containerId}`)),(null===(i=e.cardExpiry)||void 0===i?void 0:i.containerId)&&(this.expiryField=r.ExpiryField(),yield this.expiryField.render(`#${e.cardExpiry.containerId}`)),(null===(n=e.cardName)||void 0===n?void 0:n.containerId)&&(this.nameField=r.NameField({placeholder:\"\"}),yield this.nameField.render(`#${e.cardName.containerId}`)),(null===(o=e.cardNumber)||void 0===o?void 0:o.containerId)&&(this.numberField=r.NumberField({placeholder:\"\"}),yield this.numberField.render(`#${e.cardNumber.containerId}`))})}renderVaultedFields(e){var t,i,n;return rt(this,void 0,void 0,function*(){const o=this.getCardFieldsOrThrow();(null===(t=e.cardCodeVerification)||void 0===t?void 0:t.containerId)&&(this.cvvField=o.CVVField({placeholder:\"\"}),yield this.cvvField.render(`#${e.cardCodeVerification.containerId}`)),(null===(i=e.cardExpiryVerification)||void 0===i?void 0:i.containerId)&&(this.expiryField=o.ExpiryField(),yield this.expiryField.render(`#${e.cardExpiryVerification.containerId}`)),(null===(n=e.cardNumberVerification)||void 0===n?void 0:n.containerId)&&(this.numberField=o.NumberField({placeholder:\"\"}),yield this.numberField.render(`#${e.cardNumberVerification.containerId}`))})}getInstrumentParams(){if(!this.executionPaymentData)return{};if(De(this.executionPaymentData)){const{shouldSaveInstrument:e,shouldSetAsDefaultInstrument:t}=this.executionPaymentData;return{shouldSaveInstrument:e,shouldSetAsDefaultInstrument:t}}if(Me(this.executionPaymentData)){const{instrumentId:e}=this.executionPaymentData;return{instrumentId:e}}return{}}getFieldTypeByEmittedField({emittedBy:e}){return{fieldType:this.mapFieldType(e)}}submitHostedForm(){return rt(this,void 0,void 0,function*(){const e=this.getCardFieldsOrThrow(),t=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),i={billingAddress:{company:t.company,addressLine1:t.address1,addressLine2:t.address2,adminArea1:t.stateOrProvinceCode,adminArea2:t.city,postalCode:t.postalCode,countryCode:t.countryCode}};try{this.isCreditCardVaultedForm?yield e.submit():yield e.submit(i)}catch(e){throw new tt(\"Failed authentication. Please try to authorize again.\")}})}validateHostedFormOrThrow(){var e,t;return rt(this,void 0,void 0,function*(){const i=this.getCardFieldsOrThrow(),n=yield i.getState().then(e=>e),o=this.getValidityData(n);if(!o.isValid)throw null===(t=null===(e=this.hostedFormOptions)||void 0===e?void 0:e.onValidate)||void 0===t||t.call(e,o),new ot(this.mapValidationErrors(o.errors))})}getValidityData({fields:e}){const t=Object.assign({},e);delete t.cardNameField;const i=Object.keys(t);return{isValid:i.every(e=>{var i;return null===(i=t[e])||void 0===i?void 0:i.isValid}),errors:i.reduce((e,i)=>{var n;const o=this.mapFieldType(i);return Object.assign(Object.assign({},e),{[o]:(null===(n=t[i])||void 0===n?void 0:n.isValid)?void 0:[this.getInvalidErrorByFieldType(o)]})},{})}}getInvalidErrorByFieldType(e){switch(e){case Ze.CardCode:case Ze.CardCodeVerification:return{fieldType:e,message:\"Invalid card code\",type:\"invalid_card_code\"};case Ze.CardNumber:case Ze.CardNumberVerification:return{fieldType:e,message:\"Invalid card number\",type:\"invalid_card_number\"};case Ze.CardExpiry:case Ze.CardExpiryVerification:return{fieldType:e,message:\"Invalid card expiry\",type:\"invalid_card_expiry\"};default:return{fieldType:e,message:\"Invalid field\",type:\"invalid\"}}}mapValidationErrors(e={}){const t={};return Object.keys(e).forEach(i=>{var n,o;t[i]=[{message:(null===(o=null===(n=e[i])||void 0===n?void 0:n[0])||void 0===o?void 0:o.message)||\"\",type:i}]}),t}mapFieldType(e){switch(e){case\"name\":return Ze.CardName;case\"cardNumberField\":case\"number\":return this.isCreditCardForm?Ze.CardNumber:Ze.CardNumberVerification;case\"cardExpiryField\":case\"expiry\":return this.isCreditCardForm?Ze.CardExpiry:Ze.CardExpiryVerification;case\"cardCvvField\":case\"cvv\":return this.isCreditCardForm?Ze.CardCode:Ze.CardCodeVerification;default:throw new Error(\"Unexpected field type\")}}getCardFieldsOrThrow(){if(!this.cardFields)throw new nt(it.PaymentNotInitialized);return this.cardFields}getInputStyles(e){var t,i,n;const o={\"font-size\":(null===(t=null==e?void 0:e.default)||void 0===t?void 0:t.fontSize)||\"1rem\",\"font-family\":(null===(i=null==e?void 0:e.default)||void 0===i?void 0:i.fontFamily)||\"Montserrat, Arial, Helvetica, sans-serif\",\"font-weight\":(null===(n=null==e?void 0:e.default)||void 0===n?void 0:n.fontWeight)||\"400\",outline:\"none\",padding:\"9px 13px\"},r=Object.assign(Object.assign({},o),{color:\"#333333\"});return{input:r,\".invalid\":Object.assign(Object.assign({},o),{color:\"red\"}),\".valid\":r,\":focus\":r}}stylizeInputContainers(e){Object.values(e||{}).forEach(e=>{const t=document.getElementById(`${(null==e?void 0:e.containerId)||\"\"}`);t&&(t.style.padding=\"0px\",t.style.boxShadow=\"none\",t.style.border=\"none\",t.style.background=\"transparent\",t.style.marginBottom=\"10px\",t.style.marginLeft=\"-5px\")})}hasUndefinedValues(){return!this.hostedFormOptions||Object.values(this.hostedFormOptions.fields).some(e=>void 0===e)}onChangeHandler(e,t){var i;null===(i=null==e?void 0:e.onValidate)||void 0===i||i.call(e,this.getValidityData(t))}onFocusHandler(e,t){var i;null===(i=null==e?void 0:e.onFocus)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}onBlurHandler(e,t){var i;null===(i=null==e?void 0:e.onBlur)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}onInputSubmitRequest(e,t){var i;null===(i=null==e?void 0:e.onEnter)||void 0===i||i.call(e,this.getFieldTypeByEmittedField(t))}shouldInitializePayPalFastlane(e){var t,i;const n=this.paymentIntegrationService.getState(),o=n.getPaymentMethodOrThrow(e),r=n.getPaymentProviderCustomer(),a=(s=r)&&(\"authenticationState\"in s||\"addresses\"in s||\"instruments\"in s)?r:{};var s;return(null===(t=null==o?void 0:o.initializationData)||void 0===t?void 0:t.isAcceleratedCheckoutEnabled)&&(null===(i=null==o?void 0:o.initializationData)||void 0===i?void 0:i.isPayPalCommerceAnalyticsV2Enabled)&&!(null==a?void 0:a.authenticationState)}initializePayPalFastlaneOrThrow(e){return rt(this,void 0,void 0,function*(){try{const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getPaymentMethodOrThrow(e),{initializationData:o}=n;if(!(null==o?void 0:o.connectClientToken))return;const r=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(n,i.currency.code,i.id);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(r,!!(null==o?void 0:o.isDeveloperModeApplicable))}catch(e){}})}}const st=p(e=>new at(e,N(e),ne(),se()),[{id:\"paypalcommercecreditcards\"}]);var dt=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class lt{constructor(e,t,i,n=3e3,o=3e5){this.paymentIntegrationService=e,this.paypalCommerceIntegrationService=t,this.loadingIndicator=i,this.pollingInterval=n,this.maxPollingIntervalTime=o,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_3__.noop}initialize(e){return dt(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,paypalcommerceratepay:n}=e;if(!i)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new U('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!n)throw new U('Unable to initialize payment because \"options.paypalcommerceratepay\" argument is not provided.');const{legalTextContainer:o,container:r,loadingContainerId:a}=n;if(!r)throw new U('Unable to initialize payment because \"options.container\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.legalTextContainer\" argument is not provided.');if(!a)throw new U('Unable to initialize payment because \"options.loadingContainerId\" argument is not provided.');this.loadingIndicatorContainer=a;const s=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i,t),{merchantId:d}=s.initializationData||{};if(!d)throw new U(\"Unable to initialize payment because merchantId argument is not provided.\");this.paypalcommerceratepay=n,yield this.paypalCommerceIntegrationService.loadPayPalSdk(i),this.createFraudNetScript(d,i,t),this.loadFraudnetConfig(),this.renderLegalText(o,r)})}execute(e,t){return dt(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]),{getFieldsValues:o}=this.paypalcommerceratepay||{};if(!i)throw new ze([\"payment\"]);if(!o||\"function\"!=typeof o)throw new U('Unable to initialize payment because \"options.getFieldsValues\" argument is not provided.');this.toggleLoadingIndicator(!0);try{const e=yield this.paypalCommerceIntegrationService.createOrder(\"paypalcommercealternativemethodscheckout\",{metadataId:this.guid}),{ratepayBirthDate:r,ratepayPhoneNumber:a,ratepayPhoneCountryCode:s}=o(),d={formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:null,method_id:i.methodId,rate_pay:{birth_date:this.normalizeDate(r),phone:{national_number:a,country_code:s.split(\"+\")[1]}},paypal_account:{order_id:e}}};return yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment({methodId:i.methodId,paymentData:d}),yield new Promise((e,t)=>{this.initializePollingMechanism(i.methodId,e,t,i.gatewayId)})}catch(e){return this.handleError(e),new Promise((e,t)=>t())}})}finalize(){return Promise.reject(new Be)}deinitialize(){const{legalTextContainer:e}=this.paypalcommerceratepay||{},t=document.querySelectorAll('[data-id=\"fraudnetScript\"]')[0],i=document.querySelectorAll('[data-id=\"fraudnetConfig\"]')[0];if(this.deinitializePollingMechanism(),t.remove(),i.remove(),e){const t=document.getElementById(e);null==t||t.remove()}return Promise.resolve()}normalizeDate(e){const t=this.formatDate(e.getDate()),i=this.formatDate(e.getMonth()+1);return`${e.getFullYear()}-${i}-${t}`}formatDate(e){return`${e<10?0:\"\"}${e}`}renderLegalText(e,t){const i=e,n=t.split(\"#\")[1],o=document.getElementById(n),r=null==o?void 0:o.parentNode,a=document.createElement(\"div\");a.style.marginBottom=\"20px\",a.setAttribute(\"id\",i),null==r||r.prepend(a);const s=this.paypalCommerceIntegrationService.getPayPalSdkOrThrow(),d=s.Legal({fundingSource:s.Legal.FUNDING.PAY_UPON_INVOICE});if(!document.getElementById(i))throw new U('Unable to initialize payment because \"legalTextContainerElement\" argument is not found.');d.render(`#${i}`)}handleError(e){const{onError:t}=this.paypalcommerceratepay||{};this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}createFraudNetScript(e,t,i){const n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t,i),{testMode:o}=n.config,r=document.createElement(\"script\");r.setAttribute(\"type\",\"application/json\"),r.setAttribute(\"fncls\",\"fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99\"),r.setAttribute(\"data-id\",\"fraudnetScript\"),this.guid=this.generateGUID();const a={f:this.guid,s:`${e}_checkout-page`,sandbox:o};r.innerHTML=JSON.stringify(a),document.body.appendChild(r)}generateGUID(){let e=\"\";for(let t=0;t<32;t+=1)e+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"[Math.floor(62*Math.random())];return e}loadFraudnetConfig(){const e=document.createElement(\"script\");e.setAttribute(\"data-id\",\"fraudnetConfig\"),e.src=\"https://c.paypal.com/da/r/fb.js\",document.body.appendChild(e)}reinitializeStrategy(e){return dt(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}initializePollingMechanism(e,t,i,n){return dt(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const o=yield this.paypalCommerceIntegrationService.getOrderStatus(\"paypalcommercealternativemethods\",{params:{useMetadata:!0}}),r=o===O.PollingStop,a=o===O.PollingError;if(r)return this.deinitializePollingMechanism(),t();if(a)return i();if(!r&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,paypalcommerceratepay:this.paypalcommerceratepay}),this.handleError(new Ge)}catch(e){this.handleError(e),i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const ct=p(e=>new lt(e,N(e),new Ee({containerStyles:Object.assign(Object.assign({},Te),{position:\"fixed\"})})),[{gateway:\"paypalcommercealternativemethods\",id:\"ratepay\"}]);function pt(e){return!!e&&(\"authenticationState\"in e||\"addresses\"in e||\"instruments\"in e)}var ut=function(e,t,i,n){return new(i||(i=Promise))(function(o,r){function a(e){try{d(n.next(e))}catch(e){r(e)}}function s(e){try{d(n.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ht{constructor(e,t,i,n){this.paymentIntegrationService=e,this.paypalCommerceRequestSender=t,this.paypalCommerceSdk=i,this.paypalCommerceFastlaneUtils=n}initialize(e){var t,i;return ut(this,void 0,void 0,function*(){const{methodId:n,paypalcommercefastlane:o}=e;if(this.methodId=n,this.paypalcommercefastlane=o,!n)throw new U('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!o)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane\" argument is not provided.');if(!o.onInit||\"function\"!=typeof o.onInit)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane.onInit\" argument is not provided or it is not a function.');if(!o.onChange||\"function\"!=typeof o.onChange)throw new U('Unable to initialize payment because \"options.paypalcommercefastlane.onChange\" argument is not provided or it is not a function.');yield this.paymentIntegrationService.loadPaymentMethod(n);const r=this.paymentIntegrationService.getState(),a=r.getCartOrThrow(),s=r.getPaymentMethodOrThrow(n),{isDeveloperModeApplicable:d,isFastlaneStylingEnabled:l}=s.initializationData||{};this.threeDSVerificationMethod=null===(t=s.initializationData)||void 0===t?void 0:t.threeDSVerificationMethod,this.paypalFastlaneSdk=yield this.paypalCommerceSdk.getPayPalFastlaneSdk(s,a.currency.code,a.id);const c=le(l?null===(i=null==s?void 0:s.initializationData)||void 0===i?void 0:i.fastlaneStyles:{},null==o?void 0:o.styles);yield this.paypalCommerceFastlaneUtils.initializePayPalFastlane(this.paypalFastlaneSdk,!!d,c),this.shouldRunAuthenticationFlow()&&(yield this.runPayPalAuthenticationFlowOrThrow(n)),yield this.initializePayPalPaymentComponent(),o.onInit(e=>this.renderPayPalPaymentComponent(e)),o.onChange(()=>this.handlePayPalStoredInstrumentChange(n))})}execute(e,t){return ut(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(n=Object.getOwnPropertySymbols(e);o<n.length;o++)t.indexOf(n[o])<0&&Object.prototype.propertyIsEnumerable.call(e,n[o])&&(i[n[o]]=e[n[o]])}return i}(e,[\"payment\"]);if(!i)throw new ze([\"payment\"]);const{paymentData:o,methodId:r}=i,a=o&&Me(o);try{yield this.paymentIntegrationService.submitOrder(n,t);const e=a?yield this.prepareVaultedInstrumentPaymentPayload(r,o):yield this.preparePaymentPayload(r,o);yield this.paymentIntegrationService.submitPayment(e),this.paypalCommerceFastlaneUtils.removeStorageSessionId()}catch(e){if(function(e){return\"object\"==typeof e&&null!==e&&\"message\"in e&&\"response\"in e&&\"body\"in e.response&&\"name\"in e.response.body}(e)&&\"INVALID_REQUEST\"===e.response.body.name){const e={translationKey:\"payment.errors.invalid_request_error\"};return this.handleError(e),Promise.reject()}if(e instanceof Error&&\"FastlaneError\"!==e.name)throw e;return Promise.reject()}})}finalize(){return Promise.reject(new Be)}deinitialize(){return ut(this,void 0,void 0,function*(){return Promise.resolve()})}shouldRunAuthenticationFlow(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getCustomerOrThrow(),n=e.getPaymentProviderCustomer(),o=pt(n)?n:{},r=this.paypalCommerceFastlaneUtils.getStorageSessionId();return!(!i.isGuest||(null==o?void 0:o.authenticationState)===ee.CANCELED||(null==o?void 0:o.authenticationState)||r!==t.id)}runPayPalAuthenticationFlowOrThrow(e){return ut(this,void 0,void 0,function*(){try{const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getCustomer(),o=t.getBillingAddress(),r=(null==n?void 0:n.email)||(null==o?void 0:o.email)||\"\",{customerContextId:a}=yield this.paypalCommerceFastlaneUtils.lookupCustomerOrThrow(r),s=yield this.paypalCommerceFastlaneUtils.triggerAuthenticationFlowOrThrow(a),{authenticationState:d,addresses:l,instruments:c}=this.paypalCommerceFastlaneUtils.mapPayPalFastlaneProfileToBcCustomerData(e,s);yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:d,addresses:l,instruments:c}),s.authenticationState===ee.CANCELED?this.paypalCommerceFastlaneUtils.removeStorageSessionId():this.paypalCommerceFastlaneUtils.updateStorageSessionId(i.id)}catch(e){}})}initializePayPalPaymentComponent(){return ut(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),t=e.phone,i=`${e.firstName} ${e.lastName}`.trim(),n=this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow(),o={fields:Object.assign({cardholderName:{prefill:i,enabled:!0}},t&&{phoneNumber:{prefill:t}})};this.paypalComponentMethods=yield n.FastlaneCardComponent(o)})}renderPayPalPaymentComponent(e){const t=this.getPayPalComponentMethodsOrThrow();if(!e)throw new U('Unable to render card component because \"container\" argument is not provided.');t.render(e)}getPayPalComponentMethodsOrThrow(){if(!this.paypalComponentMethods)throw new h;return this.paypalComponentMethods}prepareVaultedInstrumentPaymentPayload(e,t){return ut(this,void 0,void 0,function*(){const{instrumentId:i}=t,n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e),o=this.isPaypalCommerceFastlaneThreeDSAvailable()&&n.config.is3dsEnabled;o||(yield this.createOrder(i));const r=o?yield this.get3DSNonce(i):i;return{methodId:e,paymentData:{formattedPayload:{paypal_fastlane_token:{order_id:this.orderId,token:r}}}}})}preparePaymentPayload(e,t){return ut(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getBillingAddressOrThrow(),o=i.getPaymentMethodOrThrow(e),r=`${n.firstName} ${n.lastName}`.trim(),{getPaymentToken:a}=this.getPayPalComponentMethodsOrThrow(),{id:s}=yield a({name:{fullName:r},billingAddress:this.paypalCommerceFastlaneUtils.mapBcToPayPalAddress(n)}),d=this.isPaypalCommerceFastlaneThreeDSAvailable()&&o.config.is3dsEnabled;d||(yield this.createOrder(s));const l=d?yield this.get3DSNonce(s):s,{shouldSaveInstrument:c=!1,shouldSetAsDefaultInstrument:p=!1}=De(t)?t:{};return{methodId:e,paymentData:Object.assign(Object.assign({},t),{shouldSaveInstrument:c,shouldSetAsDefaultInstrument:p,formattedPayload:{paypal_fastlane_token:{order_id:this.orderId,token:l}}})}})}createOrder(e){return ut(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getCartOrThrow().id;if(this.methodId){const{orderId:i}=yield this.paypalCommerceRequestSender.createOrder(this.methodId,{cartId:t,fastlaneToken:e});this.orderId=i}})}get3DSNonce(e){var t;return ut(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getCartOrThrow(),o=i.getOrderOrThrow(),r=i.getStoreConfigOrThrow().links.checkoutLink,a=null===(t=this.paypalFastlaneSdk)||void 0===t?void 0:t.ThreeDomainSecureClient;if(!a)throw new h;const s={amount:o.orderAmount.toFixed(2),currency:n.currency.code,nonce:e,threeDSRequested:\"SCA_ALWAYS\"===this.threeDSVerificationMethod,transactionContext:{experience_context:{locale:\"en-US\",return_url:r,cancel_url:r}}};if(yield a.isEligible(s)){const{liabilityShift:e,authenticationState:t,nonce:i}=yield a.show();if(e===S.No||e===S.Unknown||t===K.Errored||t===K.Cancelled)throw new Fe;if(t===K.Succeeded)return yield this.createOrder(i),i}return e})}handlePayPalStoredInstrumentChange(e){return ut(this,void 0,void 0,function*(){const t=this.paypalCommerceFastlaneUtils.getPayPalFastlaneOrThrow(),{selectionChanged:i,selectedCard:n}=yield t.profile.showCardSelector();if(i){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomer(),i=pt(t)?t:{},o=this.paypalCommerceFastlaneUtils.mapPayPalToBcInstrument(e,n)[0];return yield this.paymentIntegrationService.updatePaymentProviderCustomer(Object.assign(Object.assign({},i),{instruments:[o]})),o}})}isPaypalCommerceFastlaneThreeDSAvailable(){return Ye(this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.paypalcommerce_fastlane_three_ds\")}handleError(e){var t;(null===(t=this.paypalcommercefastlane)||void 0===t?void 0:t.onError)&&\"function\"==typeof this.paypalcommercefastlane.onError&&this.paypalcommercefastlane.onError(e)}}const mt=p(e=>{const{getHost:i}=e.getState();return new ht(e,new D((0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)({host:i()})),ne(),se())},[{id:\"paypalcommerceacceleratedcheckout\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2hlY2tvdXQtc2RrLWpzL2Rpc3QvZXNtL2ludGVncmF0aW9ucy9wYXlwYWwtY29tbWVyY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQ0NZQSxFRERSQyxFQUFzQixDQUFDLEVFQ1osU0FBU0MsRUFDcEJDLEVBQ0FDLEdBRUEsT0FBT0MsT0FBT0MsT0FBT0gsRUFBUSxDQUFFQyxjQUNuQyxDQ05BSCxFQUFvQk0sRUFBSSxDQUFDQyxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hSLEVBQW9CVSxFQUFFRixFQUFZQyxLQUFTVCxFQUFvQlUsRUFBRUgsRUFBU0UsSUFDNUVMLE9BQU9PLGVBQWVKLEVBQVNFLEVBQUssQ0FBRUcsWUFBWSxFQUFNQyxJQUFLTCxFQUFXQyxNQ0ozRVQsRUFBb0JVLEVBQUksQ0FBQ0ksRUFBS0MsSUFBVVgsT0FBT1ksVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NPbkUsTUFBZUksVUFBc0JDLE1BSWhELFdBQUFDLENBQVlDLEdDWEQsSUFBcUNOLEVEWTVDTyxNQUFNRCxHQUFXLHFDQUpyQixLQUFBRSxLQUFPLGdCQUNQLEtBQUFDLEtBQU8sV0NUeUNULGFEY1pBLFVDYmhDWixPQUFPc0IsZUFDUHRCLE9BQU9zQixlRFlRQyxLQ1plWCxHRFlmVyxLQ1ZSQyxVQUFZWixFRFlvQixtQkFBNUJJLE1BQU1TLGtCQUNiVCxNQUFNUyxrQkFBa0JGLGlCQUV4QkEsS0FBS0csTUFBUSxJQUFJVixNQUFNTyxLQUFLTCxTQUFTUSxLQUU3QyxFRWZXLE1BQU1DLFVBQTRDWixFQUM3RCxXQUFBRSxDQUFZQyxHQUNSQyxNQUNJRCxHQUNJLHVHQUdSSyxLQUFLSCxLQUFPLHNDQUNaRyxLQUFLRixLQUFPLG1DQUNoQixHTmJKLFNBQVkxQixHQUNSLHFEQUNBLGlDQUNBLHlDQUNBLGlEQUNBLHlDQUNBLHFEQUNBLG1DQUNBLCtDQUNBLHVDQUNBLHVDQUNBLDRDQUNBLDREQUNBLG9EQUNBLDhEQUNBLG9E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QWU1M0IsS0FBS21kLDRCQUE0QnBILDRCQUVoRCxpQkFBRThoQixFQUFnQixhQUFFQyxTQUF1QkYsRUFBYUcsUUFBUUMsbUJBRXRFLEdBQUlILEVBQWtCLENBQ2xCLE1BQ003RyxFQURRaHhCLEtBQUt1QywwQkFBMEJTLFdBQ1BpdUIsNkJBQ2hDdUUsRUFBeUJaLEdBQXlCNUQsR0FDbERBLEVBQ0EsQ0FBQyxFQUVEaUgsRUFBcUJqNEIsS0FBS21kLDRCQUE0QjFGLHdCQUN4RDlVLEVBQ0FtMUIsR0FDRixHQU9GLGFBTE05M0IsS0FBS3VDLDBCQUEwQjBiLDhCQUE4QixPQUFELHdCQUMzRHVYLEdBQXNCLENBQ3pCaGUsWUFBYSxDQUFDeWdCLE1BR1hBLEMsQ0FJZixFLENBT1Esd0NBQUE5QixHQUlKLE9BQU9oUCxHQUhPbm5CLEtBQUt1QywwQkFBMEJTLFdBQ3RCNmMsd0JBQXdCQyxpQkFBaUJGLFNBRTNCLGdEQUN6QyxDQUVRLFdBQUFwTyxDQUFZek4sRyxPQUVlLFFBQTNCLEVBQUEvRCxLQUFLb2QsOEJBQXNCLGVBQUVsUCxVQUNrQixtQkFBeENsTyxLQUFLb2QsdUJBQXVCbFAsU0FFbkNsTyxLQUFLb2QsdUJBQXVCbFAsUUFBUW5LLEVBRTVDLEVFemZKLE1BYUEsR0FBZXpGLEVBWFZpRSxJQUNELE1BQU0sUUFBRW1MLEdBQVluTCxFQUEwQlMsV0FFOUMsT0FBTyxJQUFJLEdBQ1BULEVBQ0EsSUFBSTBILEVBQTRCMkQsZ0ZBQUFBLENBQW9CLENBQUVDLEtBQU1ILE9BQzVEa0csS0FDQW9HLE9BSXVFLENBQzNFLENBQUU1VixHQUFJLHVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay93ZWJwYWNrL2Jvb3RzdHJhcD9mZmNjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL21pc3NpbmctZGF0YS1lcnJvci50cz9iN2RjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvdG8tcmVzb2x2YWJsZS1tb2R1bGUudHM/ZDUyMCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycz85OTRjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZD85ZWE0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3N0YW5kYXJkLWVycm9yLnRzPzhhMDMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvc2V0LXByb3RvdHlwZS1vZi50cz84NDVhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWNsaWVudC11bmF2YWlsYWJsZS1lcnJvci50cz9mOGVjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2J1eS1ub3ctY2FydC1jcmVhdGlvbi1lcnJvci50cz9kNjA0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3JlcXVlc3QtZXJyb3IudHM/Yzg0MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NhcnQvY2FydC1zb3VyY2UudHM/Mzg4YSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtdHlwZXMudHM/MzU2MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZS50cz82MzVjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9pbnRlcm5hbC1hcGktaGVhZGVycy50cz80MTExIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9jb250ZW50LXR5cGUudHM/NTA0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9odHRwLXJlcXVlc3Qvc2RrLXZlcnNpb24taGVhZGVycy50cz83YmYwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1yZXF1ZXN0LXNlbmRlci50cz9kN2E5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1zY3JpcHQtbG9hZGVyLnRzPzY0ZTgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlLnRzPzNmOTgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvaW52YWxpZC1hcmd1bWVudC1lcnJvci50cz8zOTIxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9wYXlwYWwtY29tbWVyY2UtY3VzdG9tZXItc3RyYXRlZ3kudHM/NGU1MyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NoZWNrb3V0LWJ1dHRvbnMvZGVmYXVsdC1jaGVja291dC1idXR0b24taGVpZ2h0LnRzP2Q0MjUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtY3VzdG9tZXItc3RyYXRlZ3kudHM/MzA4MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY3VzdG9tZXItc3RyYXRlZ3kudHM/NGQ2MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzM1YWUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLXZlbm1vL3BheXBhbC1jb21tZXJjZS12ZW5tby1jdXN0b21lci1zdHJhdGVneS50cz9jZGJmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLXZlbm1vLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzZhZDgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9wYXltZW50L2luc3RydW1lbnQudHM/ZjJiNiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy9wYXlwYWwtY29tbWVyY2UtdHlwZXMudHM/MTNlYiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy9wYXlwYWwtY29tbWVyY2Utc2RrLnRzP2ZjZTgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1zZGsudHM/MWQ1NiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvc3RvcmFnZS9zcmMvY29va2llLXN0b3JhZ2UudHM/MTUzYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtdXRpbHMudHM/ZmU3YyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLXV0aWxzL3NyYy9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLXV0aWxzLnRzPzU5YTMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvdXRpbHMvZ2V0LWZhc3RsYW5lLXN0eWxlcy50cz85ZmU1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1mYXN0bGFuZS9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3kudHM/OTk2ZSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1mYXN0bGFuZS1jdXN0b21lci1zdHJhdGVneS50cz8yZmE0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9wYXlwYWwtY29tbWVyY2UtYnV0dG9uLXN0cmF0ZWd5LnRzPzRjOWQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtYnV0dG9uLXN0cmF0ZWd5LnRzP2FmNWQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvdXRpbHMvZ2V0LXBheXBhbC1tZXNzYWdlcy1zdHlsZXMtZnJvbS1ibnBsLWNvbmZpZy50cz8wNTA4Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1jcmVkaXQvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1idXR0b24tc3RyYXRlZ3kudHM/MThjZSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWJ1dHRvbi1zdHJhdGVneS50cz82ZWUxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9wYXlwYWwtY29tbWVyY2UtdmVubW8tYnV0dG9uLXN0cmF0ZWd5LnRzP2ZlMjIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLXZlbm1vL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtdmVubW8tYnV0dG9uLXN0cmF0ZWd5LnRzPzEzMTAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMtYnV0dG9uLXN0cmF0ZWd5LnRzPzVmMjciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzLWJ1dHRvbi1zdHJhdGVneS50cz9mMmYyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy91aS9zcmMvbG9hZGluZy1pbmRpY2F0b3IvbG9hZGluZy1pbmRpY2F0b3IudHM/YjA4NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY29uc3RhbnRzLnRzPzdkNDkiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvcGF5bWVudC1hcmd1bWVudC1pbnZhbGlkLWVycm9yLnRzP2E1MDEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvcGF5bWVudC1tZXRob2QtaW52YWxpZC1lcnJvci50cz8zYWRmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL29yZGVyLWZpbmFsaXphdGlvbi1ub3QtcmVxdWlyZWQtZXJyb3IudHM/YjVhMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3BheW1lbnQvaXMtaG9zdGVkLWludHJ1bWVudC1saWtlLnRzPzg3NjMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9wYXltZW50L2lzLXZhdWx0ZWQtaW5zdHJ1bWVudC50cz8xODBmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy91dGlsaXR5L3NyYy9pcy1iYXNlLWluc3RydW1lbnQvaXMtYmFzZS1pbnN0cnVtZW50LnRzP2U5MmYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlL3BheXBhbC1jb21tZXJjZS1wYXltZW50LXN0cmF0ZWd5LnRzPzFmMmIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvdXRpbHMvaXMtcmVkaXJlY3QtYWN0aW9uLWVycm9yLnRzPzU1MjMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvaXMtcmVxdWVzdC1lcnJvci50cz9iNDNkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2lzLXBheXBhbC1jb21tZXJjZS1wcm92aWRlci1lcnJvci50cz9jNzRkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLXBheW1lbnQtc3RyYXRlZ3kudHM/Mjc2YiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9ub3QtaW1wbGVtZW50ZWQtZXJyb3IudHM/M2EzNSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtY3JlZGl0L3BheXBhbC1jb21tZXJjZS1jcmVkaXQtcGF5bWVudC1zdHJhdGVneS50cz83YWY0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1jcmVkaXQvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1jcmVkaXQtcGF5bWVudC1zdHJhdGVneS50cz84OTZhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9wYXlwYWwtY29tbWVyY2UtdmVubW8tcGF5bWVudC1zdHJhdGVneS50cz84OGZlIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS12ZW5tby9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLXZlbm1vLXBheW1lbnQtc3RyYXRlZ3kudHM/Nzg5NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy90aW1lb3V0LWVycm9yLnRzPzA4MGQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3V0aWxpdHkvc3JjL2lzLWV4cGVyaW1lbnQtZW5hYmxlZC9pcy1leHBlcmltZW50LWVuYWJsZWQudHM/YzlhNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1wYXltZW50LXN0cmF0ZWd5LnRzP2Q3MzciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzLXBheW1lbnQtc3RyYXRlZ3kudHM/ZWFkOSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2hvc3RlZC1mb3JtL2hvc3RlZC1maWVsZC10eXBlLnRzPzY1ZDgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9ob3N0ZWQtZm9ybS9pcy1jcmVkaXQtY2FyZC1mb3JtLWZpZWxkcy50cz8wZmFhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvaG9zdGVkLWZvcm0vaXMtY3JlZGl0LWNhcmQtdmF1bHRlZC1mb3JtLWZpZWxkcy50cz9mM2IzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWZhaWxlZC1lcnJvci50cz8wN2RkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL25vdC1pbml0aWFsaXplZC1lcnJvci50cz84YjRkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtaW52YWxpZC1mb3JtLWVycm9yLnRzP2MwZmIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1jYXJkL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1zdHJhdGVneS50cz8xMGU2Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtdXRpbHMvc3JjL3V0aWxzL2lzLXBheXBhbC1jb21tZXJjZS1hY2NlbGVyYXRlZC1jaGVja291dC1jdXN0b21lci50cz83M2YzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZC9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1jYXJkcy1wYXltZW50LXN0cmF0ZWd5LnRzPzY3ZWMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLXJhdGVwYXkvcGF5cGFsLWNvbW1lcmNlLXJhdGVwYXktcGF5bWVudC1zdHJhdGVneS50cz8yMjAxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24vc3JjL3BheXBhbC1jb21tZXJjZS1yYXRlcGF5L2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtcmF0ZXBheS1wYXltZW50LXN0cmF0ZWd5LnRzPzcwNGUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvdXRpbHMvaXMtcGF5cGFsLWZhc3RsYW5lLWN1c3RvbWVyLnRzPzcwMzUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi9zcmMvcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lL3BheXBhbC1jb21tZXJjZS1mYXN0bGFuZS1wYXltZW50LXN0cmF0ZWd5LnRzP2QxNWYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheXBhbC1jb21tZXJjZS11dGlscy9zcmMvdXRpbHMvaXMtcGF5cGFsLWZhc3RsYW5lLXJlcXVlc3QtZXJyb3IudHM/YTg5MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uL3NyYy9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUvY3JlYXRlLXBheXBhbC1jb21tZXJjZS1mYXN0bGFuZS1wYXltZW50LXN0cmF0ZWd5LnRzPzQwMGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5leHBvcnQgZW51bSBNaXNzaW5nRGF0YUVycm9yVHlwZSB7XG4gICAgTWlzc2luZ0JpbGxpbmdBZGRyZXNzLFxuICAgIE1pc3NpbmdDYXJ0LFxuICAgIE1pc3NpbmdDaGVja291dCxcbiAgICBNaXNzaW5nQ29uc2lnbm1lbnRzLFxuICAgIE1pc3NpbmdDdXN0b21lcixcbiAgICBNaXNzaW5nQ2hlY2tvdXRDb25maWcsXG4gICAgTWlzc2luZ09yZGVyLFxuICAgIE1pc3NpbmdPcmRlckNvbmZpZyxcbiAgICBNaXNzaW5nT3JkZXJJZCxcbiAgICBNaXNzaW5nUGF5bWVudCxcbiAgICBNaXNzaW5nUGF5bWVudElkLFxuICAgIE1pc3NpbmdQYXltZW50SW5zdHJ1bWVudCxcbiAgICBNaXNzaW5nUGF5bWVudE1ldGhvZCxcbiAgICBNaXNzaW5nUGF5bWVudFJlZGlyZWN0VXJsLFxuICAgIE1pc3NpbmdQYXltZW50U3RhdHVzLFxuICAgIE1pc3NpbmdQYXltZW50VG9rZW4sXG4gICAgTWlzc2luZ1NoaXBwaW5nQWRkcmVzcyxcbn1cblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIHdoZW4gZGF0YSB0aGF0IGlzIGV4cGVjdGVkIHRvIGV4aXN0IGlzIG1pc3NpbmcuIFVzdWFsbHkgaXRcbiAqIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGNlcnRhaW4gZGF0YSBoYXMgbm90IGJlZW4gcmV0cmlldmVkIGZyb20gb3Igc2F2ZWQgdG9cbiAqIHRoZSBzZXJ2ZXIgeWV0LiBBbmQgc3VjaCBkYXRhIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gY2VydGFpbiBhY3Rpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaXNzaW5nRGF0YUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHN1YnR5cGU6IE1pc3NpbmdEYXRhRXJyb3JUeXBlKSB7XG4gICAgICAgIHN1cGVyKGdldEVycm9yTWVzc2FnZShzdWJ0eXBlKSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ01pc3NpbmdEYXRhRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWlzc2luZ19kYXRhJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZSh0eXBlOiBNaXNzaW5nRGF0YUVycm9yVHlwZSk6IHN0cmluZyB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0JpbGxpbmdBZGRyZXNzOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGJpbGxpbmcgYWRkcmVzcyBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2FydDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjYXJ0IGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDb25zaWdubWVudHM6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY29uc2lnbm1lbnRzIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDaGVja291dDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjaGVja291dCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ3VzdG9tZXI6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY3VzdG9tZXIgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NoZWNrb3V0Q29uZmlnOlxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlckNvbmZpZzpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjb25maWd1cmF0aW9uIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlcjpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBvcmRlciBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJJZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBvcmRlciBJRCBpcyB1bmF2YWlsYWJsZSBvciBub3QgZ2VuZXJhdGVkIHlldC4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgcGF5bWVudCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudFRva2VuOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSB0b2tlbiByZXF1aXJlZCB0byBzdWJtaXQgYSBwYXltZW50IGlzIG1pc3NpbmcuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHBheW1lbnQgbWV0aG9kIGRhdGEgaXMgdW5hdmFpbGFibGUgb3Igbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdTaGlwcGluZ0FkZHJlc3M6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2Ugc2hpcHBpbmcgYWRkcmVzcyBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgcmVxdWlyZWQgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZXNvbHZhYmxlTW9kdWxlIGZyb20gJy4vcmVzb2x2YWJsZS1tb2R1bGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1Jlc29sdmFibGVNb2R1bGU8VE1vZHVsZSwgVElkZW50aWZpZXI+KFxuICAgIG1vZHVsZTogVE1vZHVsZSxcbiAgICByZXNvbHZlSWRzOiBUSWRlbnRpZmllcltdLFxuKTogUmVzb2x2YWJsZU1vZHVsZTxUTW9kdWxlLCBUSWRlbnRpZmllcj4ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG1vZHVsZSwgeyByZXNvbHZlSWRzIH0pO1xufVxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCBDdXN0b21FcnJvciBmcm9tICcuL2N1c3RvbS1lcnJvcic7XG5pbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSAnLi9zZXQtcHJvdG90eXBlLW9mJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHR5cGUgc2hvdWxkIG5vdCBiZSBjb25zdHJ1Y3RlZCBkaXJlY3RseS4gSXQgaXMgYSBiYXNlIGNsYXNzIGZvclxuICogYWxsIGN1c3RvbSBlcnJvcnMgdGhyb3duIGluIHRoaXMgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RhbmRhcmRFcnJvciBleHRlbmRzIEVycm9yIGltcGxlbWVudHMgQ3VzdG9tRXJyb3Ige1xuICAgIG5hbWUgPSAnU3RhbmRhcmRFcnJvcic7XG4gICAgdHlwZSA9ICdzdGFuZGFyZCc7XG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkLicpO1xuXG4gICAgICAgIHNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcblxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBuZXcudGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKS5zdGFjaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG9iamVjdDogYW55LCBwcm90b3R5cGU6IG9iamVjdCkge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iamVjdCwgcHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHNob3VsZCBiZSB0aHJvd24gd2hlbiB0aGUgY2xpZW50IGxpYnJhcnkgb2YgYSBwYXltZW50IG1ldGhvZCBmYWlsc1xuICogdG8gbG9hZCwgb3IgZm9yIHNvbWUgcmVhc29uLCBpdCBpcyBpbmFjY2Vzc2libGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIG1lc3NhZ2UgfHxcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgY2xpZW50IGxpYnJhcnkgb2YgYSBwYXltZW50IG1ldGhvZCBpcyBub3QgbG9hZGVkIG9yIHJlYWR5IHRvIGJlIHVzZWQuJyxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAncGF5bWVudF9tZXRob2RfY2xpZW50X3VuYXZhaWxhYmxlJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHNob3VsZCBiZSB0aHJvd24gd2hlbiBhIHNob3BwZXIgdHJpZXMgdG8gc2lnbiBpbiBhcyBhIGd1ZXN0IGJ1dFxuICogdGhleSBhcmUgYWxyZWFkeSBzaWduZWQgaW4gYXMgYSByZWdpc3RlcmVkIGN1c3RvbWVyLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBtZXNzYWdlIHx8XG4gICAgICAgICAgICAgICAgJ0FuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkIGR1cmluZyBidXkgbm93IGNhcnQgY3JlYXRpb24gcHJvY2Vzcy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4nLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdidXlfbm93X2NhcnRfY3JlYXRpb25fZXJyb3InO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbmNvbnN0IERFRkFVTFRfUkVTUE9OU0UgPSB7XG4gICAgYm9keToge30sXG4gICAgaGVhZGVyczoge30sXG4gICAgc3RhdHVzOiAwLFxufTtcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB1bmFibGUgdG8gbWFrZSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci4gSXQgd3JhcHNcbiAqIGFueSBzZXJ2ZXIgcmVzcG9uc2UgaW50byBhIEpTIGVycm9yIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVxdWVzdEVycm9yPFRCb2R5ID0gYW55PiBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGJvZHk6IFRCb2R5IHwge307XG4gICAgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgICBlcnJvcnM6IEFycmF5PHsgY29kZTogc3RyaW5nOyBtZXNzYWdlPzogc3RyaW5nIH0+O1xuICAgIHN0YXR1czogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlc3BvbnNlPzogUmVzcG9uc2U8VEJvZHkgfCB7fT4sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBlcnJvcnMsXG4gICAgICAgIH06IHtcbiAgICAgICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XG4gICAgICAgICAgICBlcnJvcnM/OiBBcnJheTx7IGNvZGU6IHN0cmluZzsgbWVzc2FnZT86IHN0cmluZyB9PjtcbiAgICAgICAgfSA9IHt9LFxuICAgICkge1xuICAgICAgICBjb25zdCB7IGJvZHksIGhlYWRlcnMsIHN0YXR1cyB9ID0gcmVzcG9uc2UgfHwgREVGQVVMVF9SRVNQT05TRTtcblxuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdBbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZC4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUmVxdWVzdEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3JlcXVlc3QnO1xuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnMgfHwgW107XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gQ2FydFNvdXJjZSB7XG4gICAgQnV5Tm93ID0gJ0JVWV9OT1cnLFxufVxuIiwiaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgSG9zdGVkSW5zdHJ1bWVudCxcbiAgICBTaGlwcGluZ09wdGlvbixcbiAgICBWYXVsdGVkSW5zdHJ1bWVudCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBGdW5kaW5nIHNvdXJjZXNcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEZ1bmRpbmdUeXBlID0gc3RyaW5nW107XG5leHBvcnQgdHlwZSBFbmFibGVGdW5kaW5nVHlwZSA9IEZ1bmRpbmdUeXBlIHwgc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlU0RLRnVuZGluZyB7XG4gICAgQ0FSRDogc3RyaW5nO1xuICAgIFBBWVBBTDogc3RyaW5nO1xuICAgIENSRURJVDogc3RyaW5nO1xuICAgIFBBWUxBVEVSOiBzdHJpbmc7XG4gICAgT1hYTzogc3RyaW5nO1xuICAgIFNFUEE6IHN0cmluZztcbiAgICBWRU5NTzogc3RyaW5nO1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgU0RLXG4gKlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzQ29uZmlnIHtcbiAgICBpbnB1dEV2ZW50czoge1xuICAgICAgICBvbkNoYW5nZShkYXRhOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZSk6IHZvaWQ7XG4gICAgICAgIG9uRm9jdXMoZGF0YTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiB2b2lkO1xuICAgICAgICBvbkJsdXIoZGF0YTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiB2b2lkO1xuICAgICAgICBvbklucHV0U3VibWl0UmVxdWVzdChkYXRhOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZSk6IHZvaWQ7XG4gICAgfTtcbiAgICBjcmVhdGVWYXVsdFNldHVwVG9rZW4/OiAoZGF0YTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpID0+IHZvaWQ7XG4gICAgY3JlYXRlT3JkZXI/OiAoKSA9PiBQcm9taXNlPHN0cmluZz47XG4gICAgc3R5bGU6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzUmVuZGVyT3B0aW9uc1snc3R5bGVzJ107XG4gICAgb25BcHByb3ZlKGRhdGE6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc09uQXBwcm92ZURhdGEpOiB2b2lkO1xuICAgIG9uRXJyb3IoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNPbkFwcHJvdmVEYXRhIHtcbiAgICB2YXVsdFNldHVwVG9rZW4/OiBzdHJpbmc7XG4gICAgb3JkZXJJRDogc3RyaW5nO1xuICAgIGxpYWJpbGl0eVNoaWZ0PzogTGlhYmlsaXR5U2hpZnRFbnVtO1xufVxuXG5leHBvcnQgZW51bSBMaWFiaWxpdHlTaGlmdEVudW0ge1xuICAgIFBvc3NpYmxlID0gJ1BPU1NJQkxFJyxcbiAgICBObyA9ICdOTycsXG4gICAgVW5rbm93biA9ICdVTktOT1dOJyxcbiAgICBZZXMgPSAnWUVTJyxcbn1cblxuaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0ZpZWxkRGF0YSB7XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIGlzRW1wdHk6IGJvb2xlYW47XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbiAgICBpc1BvdGVudGlhbGx5VmFsaWQ6IGJvb2xlYW47XG59XG5cbnR5cGUgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzQ2FyZCA9IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzQ2FyZDtcblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZSB7XG4gICAgY2FyZHM6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NhcmRbXTtcbiAgICBlbWl0dGVkQnk6IHN0cmluZztcbiAgICBpc0Zvcm1WYWxpZDogYm9vbGVhbjtcbiAgICBlcnJvcnM6IHN0cmluZ1tdO1xuICAgIGZpZWxkczoge1xuICAgICAgICBjYXJkQ3Z2RmllbGQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgY2FyZE51bWJlckZpZWxkOiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGNhcmROYW1lRmllbGQ/OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGNhcmRFeHBpcnlGaWVsZDogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzRmllbGREYXRhO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VGaWVsZHMge1xuICAgIHJlbmRlcihjb250YWluZXI6IEhUTUxFbGVtZW50IHwgc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIHJlbW92ZUNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5pbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VGaWVsZHNJbml0aWFsaXphdGlvbkRhdGEge1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkcyB7XG4gICAgaXNFbGlnaWJsZSgpOiBib29sZWFuO1xuICAgIENWVkZpZWxkKGNvbmZpZz86IFBheVBhbENvbW1lcmNlRmllbGRzSW5pdGlhbGl6YXRpb25EYXRhKTogUGF5UGFsQ29tbWVyY2VGaWVsZHM7XG4gICAgRXhwaXJ5RmllbGQoY29uZmlnPzogUGF5UGFsQ29tbWVyY2VGaWVsZHNJbml0aWFsaXphdGlvbkRhdGEpOiBQYXlQYWxDb21tZXJjZUZpZWxkcztcbiAgICBOYW1lRmllbGQoY29uZmlnPzogUGF5UGFsQ29tbWVyY2VGaWVsZHNJbml0aWFsaXphdGlvbkRhdGEpOiBQYXlQYWxDb21tZXJjZUZpZWxkcztcbiAgICBOdW1iZXJGaWVsZChjb25maWc/OiBQYXlQYWxDb21tZXJjZUZpZWxkc0luaXRpYWxpemF0aW9uRGF0YSk6IFBheVBhbENvbW1lcmNlRmllbGRzO1xuICAgIHN1Ym1pdChjb25maWc/OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdWJtaXRDb25maWcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGdldFN0YXRlKCk6IFByb21pc2U8UGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N1Ym1pdENvbmZpZyB7XG4gICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAgICAgICAgY29tcGFueT86IHN0cmluZztcbiAgICAgICAgYWRkcmVzc0xpbmUxOiBzdHJpbmc7XG4gICAgICAgIGFkZHJlc3NMaW5lMj86IHN0cmluZztcbiAgICAgICAgYWRtaW5BcmVhMTogc3RyaW5nOyAvLyBTdGF0ZVxuICAgICAgICBhZG1pbkFyZWEyOiBzdHJpbmc7IC8vIENpdHlcbiAgICAgICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgICAgICBjb3VudHJ5Q29kZT86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbFNESyB7XG4gICAgQ2FyZEZpZWxkczogKGRhdGE6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NvbmZpZykgPT4gUHJvbWlzZTxQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHM+O1xuICAgIEdvb2dsZXBheTogKCkgPT4ge1xuICAgICAgICBjb25maWc6ICgpID0+IFByb21pc2U8R29vZ2xlUGF5Q29uZmlnPjtcbiAgICAgICAgY29uZmlybU9yZGVyOiAoYXJnMDoge1xuICAgICAgICAgICAgb3JkZXJJZDogc3RyaW5nO1xuICAgICAgICAgICAgcGF5bWVudE1ldGhvZERhdGE6IENvbmZpcm1PcmRlckRhdGE7XG4gICAgICAgIH0pID0+IFByb21pc2U8eyBzdGF0dXM6IHN0cmluZyB9PjtcbiAgICAgICAgaW5pdGlhdGVQYXllckFjdGlvbjogKCkgPT4gdm9pZDtcbiAgICB9O1xuICAgIEZVTkRJTkc6IFBheVBhbENvbW1lcmNlU0RLRnVuZGluZztcbiAgICBIb3N0ZWRGaWVsZHM6IHtcbiAgICAgICAgaXNFbGlnaWJsZSgpOiBib29sZWFuO1xuICAgICAgICByZW5kZXIoZGF0YTogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNSZW5kZXJPcHRpb25zKTogUHJvbWlzZTxQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkcz47XG4gICAgfTtcbiAgICBMZWdhbDogUGF5UGFsTGVnYWwgJiBMZWdhbEZ1bmRpbmc7XG4gICAgQnV0dG9ucyhvcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zKTogUGF5UGFsQ29tbWVyY2VCdXR0b25zO1xuICAgIFBheW1lbnRGaWVsZHMob3B0aW9uczogUGF5UGFsQ29tbWVyY2VQYXltZW50RmllbGRzT3B0aW9ucyk6IFBheVBhbENvbW1lcmNlUGF5bWVudEZpZWxkcztcbiAgICBNZXNzYWdlcyhvcHRpb25zOiBQYXlQYWxDb21tZXJjZU1lc3NhZ2VzT3B0aW9ucyk6IFBheVBhbENvbW1lcmNlTWVzc2FnZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlybU9yZGVyRGF0YSB7XG4gICAgdG9rZW5pemF0aW9uRGF0YToge1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICAgIHRva2VuOiBzdHJpbmc7XG4gICAgfTtcbiAgICBpbmZvOiB7XG4gICAgICAgIGNhcmROZXR3b3JrOiBzdHJpbmc7XG4gICAgICAgIGNhcmREZXRhaWxzOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR29vZ2xlUGF5Q29uZmlnIHtcbiAgICBhbGxvd2VkUGF5bWVudE1ldGhvZHM6IEFsbG93ZWRQYXltZW50TWV0aG9kc1tdO1xuICAgIGFwaVZlcnNpb246IG51bWJlcjtcbiAgICBhcGlWZXJzaW9uTWlub3I6IG51bWJlcjtcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nO1xuICAgIGlzRWxpZ2libGU6IGJvb2xlYW47XG4gICAgbWVyY2hhbnRJbmZvOiB7XG4gICAgICAgIG1lcmNoYW50SWQ6IHN0cmluZztcbiAgICAgICAgbWVyY2hhbnRPcmlnaW46IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFsbG93ZWRQYXltZW50TWV0aG9kcyB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgYWxsb3dlZEF1dGhNZXRob2RzOiBzdHJpbmdbXTtcbiAgICAgICAgYWxsb3dlZENhcmROZXR3b3Jrczogc3RyaW5nW107XG4gICAgICAgIGJpbGxpbmdBZGRyZXNzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgICAgIGFzc3VyYW5jZURldGFpbHNSZXF1aXJlZDogYm9vbGVhbjtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NQYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHRva2VuaXphdGlvblNwZWNpZmljYXRpb246IHtcbiAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICBnYXRld2F5OiBzdHJpbmc7XG4gICAgICAgICAgICBnYXRld2F5TWVyY2hhbnRJZDogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCB0eXBlIFBheVBhbExlZ2FsID0gKHBhcmFtczogeyBmdW5kaW5nU291cmNlOiBzdHJpbmcgfSkgPT4ge1xuICAgIHJlbmRlcihjb250YWluZXI6IHN0cmluZyk6IHZvaWQ7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2FsRnVuZGluZyB7XG4gICAgRlVORElORzoge1xuICAgICAgICBQQVlfVVBPTl9JTlZPSUNFOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCaXJ0aERhdGUge1xuICAgIGdldEZ1bGxZZWFyKCk6IG51bWJlcjtcbiAgICBnZXREYXRlKCk6IG51bWJlcjtcbiAgICBnZXRNb250aCgpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VTY3JpcHRQYXJhbXMge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgICAgJ2NsaWVudC1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdtZXJjaGFudC1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdidXllci1jb3VudHJ5Jz86IHN0cmluZztcbiAgICAgICAgJ2Rpc2FibGUtZnVuZGluZyc/OiBGdW5kaW5nVHlwZTtcbiAgICAgICAgJ2VuYWJsZS1mdW5kaW5nJz86IEVuYWJsZUZ1bmRpbmdUeXBlO1xuICAgICAgICBjdXJyZW5jeT86IHN0cmluZztcbiAgICAgICAgY29tbWl0PzogYm9vbGVhbjtcbiAgICAgICAgaW50ZW50PzogUGF5UGFsQ29tbWVyY2VJbnRlbnQ7XG4gICAgICAgIGNvbXBvbmVudHM/OiBDb21wb25lbnRzU2NyaXB0VHlwZTtcbiAgICB9O1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgJ2RhdGEtY2xpZW50LXRva2VuJz86IHN0cmluZztcbiAgICAgICAgJ2RhdGEtY2xpZW50LW1ldGFkYXRhLWlkJz86IHN0cmluZztcbiAgICAgICAgJ2RhdGEtcGFydG5lci1hdHRyaWJ1dGlvbi1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdkYXRhLXVzZXItaWQtdG9rZW4nPzogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBlbnVtIFBheVBhbENvbW1lcmNlSW50ZW50IHtcbiAgICBBVVRIT1JJWkUgPSAnYXV0aG9yaXplJyxcbiAgICBDQVBUVVJFID0gJ2NhcHR1cmUnLFxufVxuXG5leHBvcnQgdHlwZSBDb21wb25lbnRzU2NyaXB0VHlwZSA9IEFycmF5PFxuICAgIHwgJ2J1dHRvbnMnXG4gICAgfCAnZnVuZGluZy1lbGlnaWJpbGl0eSdcbiAgICB8ICdob3N0ZWQtZmllbGRzJ1xuICAgIHwgJ21lc3NhZ2VzJ1xuICAgIHwgJ3BheW1lbnQtZmllbGRzJ1xuICAgIHwgJ2xlZ2FsJ1xuICAgIHwgJ2dvb2dsZXBheSdcbiAgICB8ICdjb25uZWN0J1xuICAgIHwgJ2NhcmQtZmllbGRzJ1xuPjtcblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUhvc3RXaW5kb3cgZXh0ZW5kcyBXaW5kb3cge1xuICAgIHBheXBhbD86IFBheVBhbFNESztcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEluaXRpYWxpemF0aW9uIERhdGFcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEge1xuICAgIGF0dHJpYnV0aW9uSWQ/OiBzdHJpbmc7XG4gICAgYXZhaWxhYmxlQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kczogRnVuZGluZ1R5cGU7XG4gICAgYnV0dG9uU3R5bGU/OiBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM7XG4gICAgYnV5ZXJDb3VudHJ5Pzogc3RyaW5nO1xuICAgIGNsaWVudElkOiBzdHJpbmc7XG4gICAgY2xpZW50VG9rZW4/OiBzdHJpbmc7XG4gICAgZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM6IEZ1bmRpbmdUeXBlO1xuICAgIGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGU/OiBib29sZWFuO1xuICAgIGludGVudD86IFBheVBhbENvbW1lcmNlSW50ZW50O1xuICAgIGlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkPzogYm9vbGVhbjtcbiAgICBpc1BheVBhbENyZWRpdEF2YWlsYWJsZT86IGJvb2xlYW47XG4gICAgaXNWZW5tb0VuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzR29vZ2xlUGF5RW5hYmxlZD86IGJvb2xlYW47XG4gICAgbWVyY2hhbnRJZD86IHN0cmluZztcbiAgICBvcmRlcklkPzogc3RyaW5nO1xuICAgIHNob3VsZFJlbmRlckZpZWxkcz86IGJvb2xlYW47XG4gICAgc2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dD86IGJvb2xlYW47XG4gICAgcGF5bWVudEJ1dHRvblN0eWxlcz86IFJlY29yZDxzdHJpbmcsIFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucz47XG4gICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24/OiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW1bXTtcbiAgICBpc0FwcFN3aXRjaEVuYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBib29sZWFuO1xuICAgIHN0eWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEJ1eU5vd1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyB7XG4gICAgZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5KCk6IEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keTtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEhvc3RlZCBGaWVsZHNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNSZW5kZXJPcHRpb25zIHtcbiAgICBmaWVsZHM/OiB7XG4gICAgICAgIG51bWJlcj86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIGN2dj86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIGV4cGlyYXRpb25EYXRlPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICB9O1xuICAgIHBheW1lbnRzU0RLPzogYm9vbGVhbjtcbiAgICBzdHlsZXM/OiB7XG4gICAgICAgIGlucHV0PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICAgICAgJy5pbnZhbGlkJz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgICAgICcudmFsaWQnPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICAgICAgJzpmb2N1cyc/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgIH07XG4gICAgY3JlYXRlT3JkZXIoKTogUHJvbWlzZTxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRPcHRpb24ge1xuICAgIHNlbGVjdG9yOiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHMge1xuICAgIHN1Ym1pdChcbiAgICAgICAgb3B0aW9ucz86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzU3VibWl0T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzQXBwcm92ZT47XG4gICAgZ2V0U3RhdGUoKTogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNTdGF0ZTtcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChldmVudDogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNTdGF0ZSkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNTdWJtaXRPcHRpb25zIHtcbiAgICBjb250aW5nZW5jaWVzPzogQXJyYXk8JzNEX1NFQ1VSRSc+O1xuICAgIGNhcmRob2xkZXJOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzQXBwcm92ZSB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xuICAgIGxpYWJpbGl0eVNoaWZ0PzogJ1BPU1NJQkxFJyB8ICdOTycgfCAnVU5LTk9XTic7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNTdGF0ZSB7XG4gICAgY2FyZHM6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzQ2FyZFtdO1xuICAgIGVtaXR0ZWRCeTogc3RyaW5nO1xuICAgIGZpZWxkczoge1xuICAgICAgICBudW1iZXI/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgZXhwaXJhdGlvbkRhdGU/OiBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgZXhwaXJhdGlvbk1vbnRoPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGV4cGlyYXRpb25ZZWFyPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGN2dj86IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBwb3N0YWxDb2RlPzogUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0NhcmQge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBuaWNlVHlwZTogc3RyaW5nO1xuICAgIGNvZGU6IHtcbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICBzaXplOiBudW1iZXI7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YSB7XG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgaXNFbXB0eTogYm9vbGVhbjtcbiAgICBpc1BvdGVudGlhbGx5VmFsaWQ6IGJvb2xlYW47XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIENvbW1lcmNlIEJ1dHRvbnNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VCdXR0b25zIHtcbiAgICByZW5kZXIoaWQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBpc0VsaWdpYmxlKCk6IGJvb2xlYW47XG4gICAgaGFzUmV0dXJuZWQ/KCk6IGJvb2xlYW47XG4gICAgcmVzdW1lPygpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMge1xuICAgIGV4cGVyaWVuY2U/OiBzdHJpbmc7XG4gICAgc3R5bGU/OiBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnM7XG4gICAgZnVuZGluZ1NvdXJjZTogc3RyaW5nO1xuICAgIGNyZWF0ZU9yZGVyKCk6IFByb21pc2U8c3RyaW5nPjtcbiAgICBvbkFwcHJvdmUoXG4gICAgICAgIGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgKTogUHJvbWlzZTxib29sZWFuIHwgdm9pZD4gfCB2b2lkO1xuICAgIG9uSW5pdD8oZGF0YTogSW5pdENhbGxiYWNrUGF5bG9hZCwgYWN0aW9uczogSW5pdENhbGxiYWNrQWN0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gICAgb25Db21wbGV0ZT8oZGF0YTogQ29tcGxldGVDYWxsYmFja0RhdGFQYXlsb2FkKTogUHJvbWlzZTx2b2lkPjtcbiAgICBvbkNsaWNrPyhkYXRhOiBDbGlja0NhbGxiYWNrUGF5bG9hZCwgYWN0aW9uczogQ2xpY2tDYWxsYmFja0FjdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHwgdm9pZDtcbiAgICBvbkVycm9yPyhlcnJvcjogRXJyb3IpOiB2b2lkO1xuICAgIG9uQ2FuY2VsPygpOiB2b2lkO1xuICAgIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlPyhkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQpOiBQcm9taXNlPHZvaWQ+O1xuICAgIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlPyhkYXRhOiBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQge1xuICAgIG9yZGVySWQ6IHN0cmluZztcbiAgICBzZWxlY3RlZFNoaXBwaW5nT3B0aW9uOiBQYXlQYWxTZWxlY3RlZFNoaXBwaW5nT3B0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xuICAgIHNoaXBwaW5nQWRkcmVzczogUGF5UGFsQWRkcmVzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbGlja0NhbGxiYWNrUGF5bG9hZCB7XG4gICAgZnVuZGluZ1NvdXJjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsaWNrQ2FsbGJhY2tBY3Rpb25zIHtcbiAgICByZWplY3QoKTogdm9pZDtcbiAgICByZXNvbHZlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdENhbGxiYWNrUGF5bG9hZCB7XG4gICAgY29ycmVsYXRpb25JRDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRDYWxsYmFja0FjdGlvbnMge1xuICAgIGRpc2FibGUoKTogdm9pZDtcbiAgICBlbmFibGUoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxBZGRyZXNzIHtcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGU6IHN0cmluZztcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgc3RhdGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxBZGRyZXNzQ2FsbGJhY2tEYXRhIHtcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgY291bnRyeV9jb2RlOiBzdHJpbmc7XG4gICAgcG9zdGFsX2NvZGU6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbFNlbGVjdGVkU2hpcHBpbmdPcHRpb24ge1xuICAgIGFtb3VudDoge1xuICAgICAgICBjdXJyZW5jeV9jb2RlOiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcHJvdmVDYWxsYmFja1BheWxvYWQge1xuICAgIG9yZGVySUQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyB7XG4gICAgb3JkZXI6IHtcbiAgICAgICAgZ2V0OiAoKSA9PiBQcm9taXNlPFBheVBhbE9yZGVyRGV0YWlscz47XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxPcmRlckRldGFpbHMge1xuICAgIHBheWVyOiB7XG4gICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGdpdmVuX25hbWU6IHN0cmluZztcbiAgICAgICAgICAgIHN1cm5hbWU6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgZW1haWxfYWRkcmVzczogc3RyaW5nO1xuICAgICAgICBhZGRyZXNzOiBQYXlQYWxPcmRlckFkZHJlc3M7XG4gICAgICAgIHBob25lPzoge1xuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgbmF0aW9uYWxfbnVtYmVyOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcHVyY2hhc2VfdW5pdHM6IEFycmF5PHtcbiAgICAgICAgc2hpcHBpbmc6IHtcbiAgICAgICAgICAgIGFkZHJlc3M6IFBheVBhbE9yZGVyQWRkcmVzcztcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICBmdWxsX25hbWU6IHN0cmluZztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJBZGRyZXNzIHtcbiAgICBhZGRyZXNzX2xpbmVfMTogc3RyaW5nO1xuICAgIGFkZHJlc3NfbGluZV8yOiBzdHJpbmc7XG4gICAgYWRtaW5fYXJlYV8yOiBzdHJpbmc7XG4gICAgYWRtaW5fYXJlYV8xPzogc3RyaW5nO1xuICAgIHBvc3RhbF9jb2RlOiBzdHJpbmc7XG4gICAgY291bnRyeV9jb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGVDYWxsYmFja0RhdGFQYXlsb2FkIHtcbiAgICBpbnRlbnQ6IHN0cmluZztcbiAgICBvcmRlcklEOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFN0eWxlQnV0dG9uTGFiZWwge1xuICAgIHBheXBhbCA9ICdwYXlwYWwnLFxuICAgIGNoZWNrb3V0ID0gJ2NoZWNrb3V0JyxcbiAgICBidXlub3cgPSAnYnV5bm93JyxcbiAgICBwYXkgPSAncGF5JyxcbiAgICBpbnN0YWxsbWVudCA9ICdpbnN0YWxsbWVudCcsXG59XG5cbmV4cG9ydCBlbnVtIFN0eWxlQnV0dG9uQ29sb3Ige1xuICAgIGdvbGQgPSAnZ29sZCcsXG4gICAgYmx1ZSA9ICdibHVlJyxcbiAgICBzaWx2ZXIgPSAnc2lsdmVyJyxcbiAgICBibGFjayA9ICdibGFjaycsXG4gICAgd2hpdGUgPSAnd2hpdGUnLFxufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvblNoYXBlIHtcbiAgICBwaWxsID0gJ3BpbGwnLFxuICAgIHJlY3QgPSAncmVjdCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zIHtcbiAgICBjb2xvcj86IFN0eWxlQnV0dG9uQ29sb3I7XG4gICAgc2hhcGU/OiBTdHlsZUJ1dHRvblNoYXBlO1xuICAgIGhlaWdodD86IG51bWJlcjtcbiAgICBsYWJlbD86IFN0eWxlQnV0dG9uTGFiZWw7XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBQYXltZW50IGZpZWxkc1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHMge1xuICAgIHJlbmRlcihpZDogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHNPcHRpb25zIHtcbiAgICBzdHlsZT86IFBheVBhbENvbW1lcmNlRmllbGRzU3R5bGVPcHRpb25zO1xuICAgIGZ1bmRpbmdTb3VyY2U6IHN0cmluZztcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZT86IHtcbiAgICAgICAgICAgIHZhbHVlPzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBlbWFpbD86IHtcbiAgICAgICAgICAgIHZhbHVlPzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VGaWVsZHNTdHlsZU9wdGlvbnMge1xuICAgIHZhcmlhYmxlcz86IHtcbiAgICAgICAgZm9udEZhbWlseT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVCYXNlPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZVNtPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZU0/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplTGc/OiBzdHJpbmc7XG4gICAgICAgIHRleHRDb2xvcj86IHN0cmluZztcbiAgICAgICAgY29sb3JUZXh0UGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9yQmFja2dyb3VuZD86IHN0cmluZztcbiAgICAgICAgY29sb3JJbmZvPzogc3RyaW5nO1xuICAgICAgICBjb2xvckRhbmdlcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyUmFkaXVzPzogc3RyaW5nO1xuICAgICAgICBib3JkZXJDb2xvcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlckZvY3VzQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIHNwYWNpbmdVbml0Pzogc3RyaW5nO1xuICAgIH07XG4gICAgcnVsZXM/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWxDb21tZXJjZSBNZXNzYWdlc1xuICovXG4vLyBUT0RPOiBUaGlzIGludGVyZmFjZSBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBQYXlQYXlTREsgaW50ZXJmYWNlIGlzIHJlbW92ZWRcbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VNZXNzYWdlcyB7XG4gICAgcmVuZGVyKGlkOiBzdHJpbmcpOiB2b2lkO1xufVxuXG4vLyBUT0RPOiBUaGlzIGludGVyZmFjZSBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBQYXlQYXlTREsgaW50ZXJmYWNlIGlzIHJlbW92ZWRcbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VNZXNzYWdlc09wdGlvbnMge1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIHBsYWNlbWVudDogc3RyaW5nO1xuICAgIHN0eWxlPzogUGF5UGFsQ29tbWVyY2VNZXNzYWdlc1N0eWxlT3B0aW9ucztcbiAgICBmdW5kaW5nU291cmNlPzogc3RyaW5nO1xufVxuXG4vLyBUT0RPOiBUaGlzIGludGVyZmFjZSBjYW4gYmUgcmVtb3ZlZCBvbmNlIHRoZSBQYXlQYXlTREsgaW50ZXJmYWNlIGlzIHJlbW92ZWRcbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VNZXNzYWdlc1N0eWxlT3B0aW9ucyB7XG4gICAgbGF5b3V0Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqXG4gKiBPdGhlclxuICpcbiAqL1xuZXhwb3J0IGVudW0gTm9uSW5zdGFudEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMge1xuICAgIE9YWE8gPSAnb3h4bycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJEYXRhIHtcbiAgICBvcmRlcklkOiBzdHJpbmc7XG4gICAgc2V0dXBUb2tlbj86IHN0cmluZztcbiAgICBhcHByb3ZlVXJsOiBzdHJpbmc7XG4gICAgZmFzdGxhbmVUb2tlbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxVcGRhdGVPcmRlclJlcXVlc3RCb2R5IHtcbiAgICBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnM/OiBTaGlwcGluZ09wdGlvbltdO1xuICAgIGNhcnRJZDogc3RyaW5nO1xuICAgIHNlbGVjdGVkU2hpcHBpbmdPcHRpb24/OiBTaGlwcGluZ09wdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxVcGRhdGVPcmRlclJlc3BvbnNlIHtcbiAgICBzdGF0dXNDb2RlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ3JlYXRlT3JkZXJSZXF1ZXN0Qm9keSBleHRlbmRzIEhvc3RlZEluc3RydW1lbnQsIFZhdWx0ZWRJbnN0cnVtZW50IHtcbiAgICBjYXJ0SWQ6IHN0cmluZztcbiAgICBtZXRhZGF0YUlkPzogc3RyaW5nO1xuICAgIHNldHVwVG9rZW4/OiBib29sZWFuO1xuICAgIGZhc3RsYW5lVG9rZW4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFBheVBhbE9yZGVyU3RhdHVzIHtcbiAgICBBcHByb3ZlZCA9ICdBUFBST1ZFRCcsXG4gICAgQ3JlYXRlZCA9ICdDUkVBVEVEJyxcbiAgICBQYXllckFjdGlvblJlcXVpcmVkID0gJ1BBWUVSX0FDVElPTl9SRVFVSVJFRCcsXG4gICAgUG9sbGluZ1N0b3AgPSAnUE9MTElOR19TVE9QJyxcbiAgICBQb2xsaW5nRXJyb3IgPSAnUE9MTElOR19FUlJPUicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJTdGF0dXNEYXRhIHtcbiAgICBzdGF0dXM6IFBheVBhbE9yZGVyU3RhdHVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENyZWF0ZU9yZGVyQ2FyZEZpZWxkc1Jlc3BvbnNlIHtcbiAgICBvcmRlcklkOiBzdHJpbmc7XG4gICAgc2V0dXBUb2tlbj86IHN0cmluZztcbn1cbiIsImltcG9ydCB7IEZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgaXNOaWwsIG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgQmlsbGluZ0FkZHJlc3NSZXF1ZXN0Qm9keSxcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBDYXJ0LFxuICAgIENhcnRTb3VyY2UsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxuICAgIFJlcXVlc3RFcnJvcixcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTaGlwcGluZ09wdGlvbixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtcmVxdWVzdC1zZW5kZXInO1xuaW1wb3J0IFBheVBhbENvbW1lcmNlU2NyaXB0TG9hZGVyIGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXNjcmlwdC1sb2FkZXInO1xuaW1wb3J0IHtcbiAgICBQYXlQYWxCdXR0b25TdHlsZU9wdGlvbnMsXG4gICAgUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ3JlYXRlT3JkZXJDYXJkRmllbGRzUmVzcG9uc2UsXG4gICAgUGF5UGFsQ3JlYXRlT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXlQYWxPcmRlckRldGFpbHMsXG4gICAgUGF5UGFsT3JkZXJTdGF0dXMsXG4gICAgUGF5UGFsU0RLLFxuICAgIFN0eWxlQnV0dG9uQ29sb3IsXG4gICAgU3R5bGVCdXR0b25MYWJlbCxcbiAgICBTdHlsZUJ1dHRvblNoYXBlLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHBheXBhbFNkaz86IFBheVBhbFNESztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXI6IFBheVBhbENvbW1lcmNlUmVxdWVzdFNlbmRlcixcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNjcmlwdExvYWRlcjogUGF5UGFsQ29tbWVyY2VTY3JpcHRMb2FkZXIsXG4gICAgKSB7fVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWxTREsgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgbG9hZFBheVBhbFNkayhcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcHJvdmlkZWRDdXJyZW5jeUNvZGU/OiBzdHJpbmcsXG4gICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2U/OiBib29sZWFuLFxuICAgICAgICBmb3JjZUxvYWQ/OiBib29sZWFuLFxuICAgICk6IFByb21pc2U8UGF5UGFsU0RLIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IHByb3ZpZGVkQ3VycmVuY3lDb2RlIHx8IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIHRoaXMucGF5cGFsU2RrID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVNjcmlwdExvYWRlci5nZXRQYXlQYWxTREsoXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZSxcbiAgICAgICAgICAgIGZvcmNlTG9hZCxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxTZGs7XG4gICAgfVxuXG4gICAgZ2V0UGF5UGFsU2RrT3JUaHJvdygpOiBQYXlQYWxTREsge1xuICAgICAgICBpZiAoIXRoaXMucGF5cGFsU2RrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBheXBhbFNkaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJ1eSBOb3cgY2FydCBjcmVhdGlvbiBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVCdXlOb3dDYXJ0T3JUaHJvdyhcbiAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM6IFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8Q2FydD4ge1xuICAgICAgICBjb25zdCBjYXJ0UmVxdWVzdEJvZHkgPSBidXlOb3dJbml0aWFsaXplT3B0aW9ucy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkoKTtcblxuICAgICAgICBpZiAoIWNhcnRSZXF1ZXN0Qm9keSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydChjYXJ0UmVxdWVzdEJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE9yZGVyIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZU9yZGVyKFxuICAgICAgICBwcm92aWRlcklkOiBzdHJpbmcsXG4gICAgICAgIHJlcXVlc3RCb2R5PzogUGFydGlhbDxQYXlQYWxDcmVhdGVPcmRlclJlcXVlc3RCb2R5PixcbiAgICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBjYXJ0SWQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpLmlkO1xuXG4gICAgICAgIGNvbnN0IHsgb3JkZXJJZCB9ID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIuY3JlYXRlT3JkZXIocHJvdmlkZXJJZCwge1xuICAgICAgICAgICAgY2FydElkLFxuICAgICAgICAgICAgLi4ucmVxdWVzdEJvZHksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvcmRlcklkO1xuICAgIH1cblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyQ2FyZEZpZWxkcyhcbiAgICAgICAgcHJvdmlkZXJJZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0Qm9keT86IFBhcnRpYWw8UGF5UGFsQ3JlYXRlT3JkZXJSZXF1ZXN0Qm9keT4sXG4gICAgKTogUHJvbWlzZTxQYXlQYWxDcmVhdGVPcmRlckNhcmRGaWVsZHNSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCBjYXJ0SWQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDYXJ0T3JUaHJvdygpLmlkO1xuXG4gICAgICAgIGNvbnN0IHsgb3JkZXJJZCwgc2V0dXBUb2tlbiB9ID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIuY3JlYXRlT3JkZXIoXG4gICAgICAgICAgICBwcm92aWRlcklkLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNhcnRJZCxcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHsgb3JkZXJJZCwgLi4uKHNldHVwVG9rZW4gPyB7IHNldHVwVG9rZW4gfSA6IHt9KSB9O1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZU9yZGVyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgY29uc2lnbm1lbnQgPSBzdGF0ZS5nZXRDb25zaWdubWVudHNPclRocm93KClbMF07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLnVwZGF0ZU9yZGVyKHtcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnM6IGNvbnNpZ25tZW50LmF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjYXJ0SWQ6IGNhcnQuaWQsXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTaGlwcGluZ09wdGlvbjogY29uc2lnbm1lbnQuc2VsZWN0ZWRTaGlwcGluZ09wdGlvbixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZGVyU3RhdHVzKG1ldGhvZElkPzogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPFBheVBhbE9yZGVyU3RhdHVzPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIuZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlcXVlc3RFcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXltZW50IHN1Ym1pdHRpbmcgYW5kIHRva2VuaXppbmcgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgdG9rZW5pemVQYXltZW50KG1ldGhvZElkOiBzdHJpbmcsIG9yZGVySWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY2FydCA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFvcmRlcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJJZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgcGF5bWVudF90eXBlOiAncGF5cGFsJyxcbiAgICAgICAgICAgIGFjdGlvbjogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICBwcm92aWRlcjogbWV0aG9kSWQsXG4gICAgICAgICAgICBvcmRlcl9pZDogb3JkZXJJZCxcbiAgICAgICAgICAgIC4uLihjYXJ0LnNvdXJjZSA9PT0gQ2FydFNvdXJjZS5CdXlOb3cgJiYgeyBjYXJ0X2lkOiBjYXJ0LmlkIH0pLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBzdWJtaXRQYXltZW50KG1ldGhvZElkOiBzdHJpbmcsIG9yZGVySWQ6IHN0cmluZywgZ2F0ZXdheUlkPzogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHBheW1lbnREYXRhID0ge1xuICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIHZhdWx0X3BheW1lbnRfaW5zdHJ1bWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzZXRfYXNfZGVmYXVsdF9zdG9yZWRfaW5zdHJ1bWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICBkZXZpY2VfaW5mbzogbnVsbCxcbiAgICAgICAgICAgICAgICBtZXRob2RfaWQ6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyX2lkOiBvcmRlcklkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGEsXG4gICAgICAgICAgICAuLi4oZ2F0ZXdheUlkID8geyBnYXRld2F5SWQgfSA6IHt9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTaGlwcGluZyBvcHRpb25zIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIGdldFNoaXBwaW5nT3B0aW9uT3JUaHJvdyhzZWxlY3RlZFNoaXBwaW5nT3B0aW9uSWQ/OiBzdHJpbmcpOiBTaGlwcGluZ09wdGlvbiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNvbnNpZ25tZW50ID0gc3RhdGUuZ2V0Q29uc2lnbm1lbnRzT3JUaHJvdygpWzBdO1xuXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyA9IGNvbnNpZ25tZW50LmF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyB8fCBbXTtcblxuICAgICAgICBjb25zdCByZWNvbW1lbmRlZFNoaXBwaW5nT3B0aW9uID0gYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zLmZpbmQoXG4gICAgICAgICAgICAob3B0aW9uKSA9PiBvcHRpb24uaXNSZWNvbW1lbmRlZCxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBzZWxlY3RlZFNoaXBwaW5nT3B0aW9uID0gc2VsZWN0ZWRTaGlwcGluZ09wdGlvbklkXG4gICAgICAgICAgICA/IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucy5maW5kKChvcHRpb24pID0+IG9wdGlvbi5pZCA9PT0gc2VsZWN0ZWRTaGlwcGluZ09wdGlvbklkKVxuICAgICAgICAgICAgOiBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMuZmluZChcbiAgICAgICAgICAgICAgICAgIChvcHRpb24pID0+IG9wdGlvbi5pZCA9PT0gY29uc2lnbm1lbnQuc2VsZWN0ZWRTaGlwcGluZ09wdGlvbj8uaWQsXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgc2hpcHBpbmdPcHRpb25Ub1NlbGVjdCA9XG4gICAgICAgICAgICBzZWxlY3RlZFNoaXBwaW5nT3B0aW9uIHx8IHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24gfHwgYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zWzBdO1xuXG4gICAgICAgIGlmICghc2hpcHBpbmdPcHRpb25Ub1NlbGVjdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91ciBvcmRlciBjYW4ndCBiZSBzaGlwcGVkIHRvIHRoaXMgYWRkcmVzc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaGlwcGluZ09wdGlvblRvU2VsZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQWRkcmVzcyB0cmFuc2Zvcm1pbmcgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgZ2V0QWRkcmVzcyhhZGRyZXNzPzogUGFydGlhbDxCaWxsaW5nQWRkcmVzc1JlcXVlc3RCb2R5Pik6IEJpbGxpbmdBZGRyZXNzUmVxdWVzdEJvZHkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzPy5maXJzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICBsYXN0TmFtZTogYWRkcmVzcz8ubGFzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICBlbWFpbDogYWRkcmVzcz8uZW1haWwgfHwgJycsXG4gICAgICAgICAgICBwaG9uZTogYWRkcmVzcz8ucGhvbmUgfHwgJycsXG4gICAgICAgICAgICBjb21wYW55OiAnJyxcbiAgICAgICAgICAgIGFkZHJlc3MxOiBhZGRyZXNzPy5hZGRyZXNzMSB8fCAnJyxcbiAgICAgICAgICAgIGFkZHJlc3MyOiBhZGRyZXNzPy5hZGRyZXNzMiB8fCAnJyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3M/LmNpdHkgfHwgJycsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcz8uY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzPy5wb3N0YWxDb2RlIHx8ICcnLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlOiAnJyxcbiAgICAgICAgICAgIHN0YXRlT3JQcm92aW5jZUNvZGU6IGFkZHJlc3M/LnN0YXRlT3JQcm92aW5jZUNvZGUgfHwgJycsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IFtdLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyh7IHBheWVyIH06IFBheVBhbE9yZGVyRGV0YWlscyk6IEJpbGxpbmdBZGRyZXNzUmVxdWVzdEJvZHkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBZGRyZXNzKHtcbiAgICAgICAgICAgIGZpcnN0TmFtZTogcGF5ZXIubmFtZS5naXZlbl9uYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IHBheWVyLm5hbWUuc3VybmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBwYXllci5lbWFpbF9hZGRyZXNzLFxuICAgICAgICAgICAgYWRkcmVzczE6IHBheWVyLmFkZHJlc3MuYWRkcmVzc19saW5lXzEsXG4gICAgICAgICAgICBhZGRyZXNzMjogcGF5ZXIuYWRkcmVzcy5hZGRyZXNzX2xpbmVfMixcbiAgICAgICAgICAgIGNpdHk6IHBheWVyLmFkZHJlc3MuYWRtaW5fYXJlYV8yLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IHBheWVyLmFkZHJlc3MuY291bnRyeV9jb2RlLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogcGF5ZXIuYWRkcmVzcy5wb3N0YWxfY29kZSxcbiAgICAgICAgICAgIHN0YXRlT3JQcm92aW5jZUNvZGU6IHBheWVyLmFkZHJlc3MuYWRtaW5fYXJlYV8xLFxuICAgICAgICAgICAgcGhvbmU6IHBheWVyLnBob25lPy5waG9uZV9udW1iZXI/Lm5hdGlvbmFsX251bWJlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0U2hpcHBpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgb3JkZXJEZXRhaWxzOiBQYXlQYWxPcmRlckRldGFpbHMsXG4gICAgKTogQmlsbGluZ0FkZHJlc3NSZXF1ZXN0Qm9keSB7XG4gICAgICAgIGNvbnN0IHsgcGF5ZXIsIHB1cmNoYXNlX3VuaXRzIH0gPSBvcmRlckRldGFpbHM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICBuYW1lOiB7IGZ1bGxfbmFtZSB9LFxuICAgICAgICB9ID0gcHVyY2hhc2VfdW5pdHNbMF0uc2hpcHBpbmc7XG5cbiAgICAgICAgY29uc3QgW2ZpcnN0TmFtZSwgLi4ubGFzdE5hbWVdID0gZnVsbF9uYW1lLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWRkcmVzcyh7XG4gICAgICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0TmFtZTogbGFzdE5hbWUuam9pbignICcpLFxuICAgICAgICAgICAgZW1haWw6IHBheWVyLmVtYWlsX2FkZHJlc3MsXG4gICAgICAgICAgICBhZGRyZXNzMTogYWRkcmVzcy5hZGRyZXNzX2xpbmVfMSxcbiAgICAgICAgICAgIGFkZHJlc3MyOiBhZGRyZXNzLmFkZHJlc3NfbGluZV8yLFxuICAgICAgICAgICAgY2l0eTogYWRkcmVzcy5hZG1pbl9hcmVhXzIsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5X2NvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbF9jb2RlLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogYWRkcmVzcy5hZG1pbl9hcmVhXzEsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnV0dG9ucyBzdHlsZSBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlPzogUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zKTogUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zIHtcbiAgICAgICAgY29uc3QgeyBjb2xvciwgaGVpZ2h0LCBsYWJlbCwgc2hhcGUgfSA9IHN0eWxlIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHZhbGlkU3R5bGVzID0ge1xuICAgICAgICAgICAgY29sb3I6IGNvbG9yICYmIFN0eWxlQnV0dG9uQ29sb3JbY29sb3JdID8gY29sb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0VmFsaWRIZWlnaHQoaGVpZ2h0KSxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCAmJiBTdHlsZUJ1dHRvbkxhYmVsW2xhYmVsXSA/IGxhYmVsIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgc2hhcGU6IHNoYXBlICYmIFN0eWxlQnV0dG9uU2hhcGVbc2hhcGVdID8gc2hhcGUgOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG9taXRCeSh2YWxpZFN0eWxlcywgaXNOaWwpO1xuICAgIH1cblxuICAgIGdldFZhbGlkSGVpZ2h0KGhlaWdodD86IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRIZWlnaHQgPSA0MDtcbiAgICAgICAgY29uc3QgbWluSGVpZ2h0ID0gMjU7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IDU1O1xuXG4gICAgICAgIGlmICghaGVpZ2h0IHx8IHR5cGVvZiBoZWlnaHQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXhIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGVpZ2h0IDwgbWluSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gbWluSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFV0aWxzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudElkPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50SWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudElkKTtcblxuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gRm9yIG5vdyB0aGlzIGlzIGEgdGVtcG9yYXJ5IHNvbHV0aW9uLCBmdXJ0aGVyIHJlbW92ZUVsZW1lbnQgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZFxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IElOVEVSTkFMX1VTRV9PTkxZID1cbiAgICAnVGhpcyBBUEkgZW5kcG9pbnQgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5IGFuZCBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmUnO1xuIiwiZW51bSBDb250ZW50VHlwZSB7XG4gICAgSnNvbiA9ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICBKc29uVjEgPSAnYXBwbGljYXRpb24vdm5kLmJjLnYxK2pzb24nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZW50VHlwZTtcbiIsImV4cG9ydCBjb25zdCBTREtfVkVSU0lPTl9IRUFERVJTID0geyAnWC1DaGVja291dC1TREstVmVyc2lvbic6IExJQlJBUllfVkVSU0lPTiB9O1xuIiwiaW1wb3J0IHsgUmVxdWVzdFNlbmRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCB7XG4gICAgQ29udGVudFR5cGUsXG4gICAgSU5URVJOQUxfVVNFX09OTFksXG4gICAgUmVxdWVzdE9wdGlvbnMsXG4gICAgU0RLX1ZFUlNJT05fSEVBREVSUyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7XG4gICAgUGF5UGFsQ3JlYXRlT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXlQYWxPcmRlckRhdGEsXG4gICAgUGF5UGFsT3JkZXJTdGF0dXNEYXRhLFxuICAgIFBheVBhbFVwZGF0ZU9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5UGFsVXBkYXRlT3JkZXJSZXNwb25zZSxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVxdWVzdFNlbmRlcjogUmVxdWVzdFNlbmRlcikge31cblxuICAgIGFzeW5jIGNyZWF0ZU9yZGVyKFxuICAgICAgICBwcm92aWRlcklkOiBzdHJpbmcsXG4gICAgICAgIHJlcXVlc3RCb2R5OiBQYXJ0aWFsPFBheVBhbENyZWF0ZU9yZGVyUmVxdWVzdEJvZHk+LFxuICAgICk6IFByb21pc2U8UGF5UGFsT3JkZXJEYXRhPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3N0b3JlZnJvbnQvcGF5bWVudC8ke3Byb3ZpZGVySWR9YDtcbiAgICAgICAgY29uc3QgYm9keSA9IHJlcXVlc3RCb2R5O1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ1gtQVBJLUlOVEVSTkFMJzogSU5URVJOQUxfVVNFX09OTFksXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogQ29udGVudFR5cGUuSnNvbixcbiAgICAgICAgICAgIC4uLlNES19WRVJTSU9OX0hFQURFUlMsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5yZXF1ZXN0U2VuZGVyLnBvc3Q8UGF5UGFsT3JkZXJEYXRhPih1cmwsIHsgaGVhZGVycywgYm9keSB9KTtcblxuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxuXG4gICAgYXN5bmMgdXBkYXRlT3JkZXIoXG4gICAgICAgIHJlcXVlc3RCb2R5OiBQYXlQYWxVcGRhdGVPcmRlclJlcXVlc3RCb2R5LFxuICAgICk6IFByb21pc2U8UGF5UGFsVXBkYXRlT3JkZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L2luaXRpYWxpemF0aW9uL3BheXBhbGNvbW1lcmNlYDtcbiAgICAgICAgY29uc3QgYm9keSA9IHJlcXVlc3RCb2R5O1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ1gtQVBJLUlOVEVSTkFMJzogSU5URVJOQUxfVVNFX09OTFksXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogQ29udGVudFR5cGUuSnNvbixcbiAgICAgICAgICAgIC4uLlNES19WRVJTSU9OX0hFQURFUlMsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5yZXF1ZXN0U2VuZGVyLnB1dDxQYXlQYWxVcGRhdGVPcmRlclJlc3BvbnNlPih1cmwsIHsgaGVhZGVycywgYm9keSB9KTtcblxuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgIG1ldGhvZElkID0gJ3BheXBhbGNvbW1lcmNlJyxcbiAgICAgICAgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zLFxuICAgICk6IFByb21pc2U8UGF5UGFsT3JkZXJTdGF0dXNEYXRhPiB7XG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3N0b3JlZnJvbnQvaW5pdGlhbGl6YXRpb24vJHttZXRob2RJZH1gO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ1gtQVBJLUlOVEVSTkFMJzogSU5URVJOQUxfVVNFX09OTFksXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogQ29udGVudFR5cGUuSnNvbixcbiAgICAgICAgICAgIC4uLlNES19WRVJTSU9OX0hFQURFUlMsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5yZXF1ZXN0U2VuZGVyLmdldDxQYXlQYWxPcmRlclN0YXR1c0RhdGE+KHVybCwge1xuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXMuYm9keTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnRzU2NyaXB0VHlwZSxcbiAgICBGdW5kaW5nVHlwZSxcbiAgICBQYXlQYWxDb21tZXJjZUhvc3RXaW5kb3csXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VTY3JpcHRQYXJhbXMsXG4gICAgUGF5UGFsU0RLLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlU2NyaXB0TG9hZGVyIHtcbiAgICBwcml2YXRlIHdpbmRvdzogUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzY3JpcHRMb2FkZXI6IFNjcmlwdExvYWRlcikge1xuICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYXlQYWxTREsoXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICAgICAgaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZT86IGJvb2xlYW4sXG4gICAgICAgIGZvcmNlTG9hZD86IGJvb2xlYW4sXG4gICAgKTogUHJvbWlzZTxQYXlQYWxTREs+IHtcbiAgICAgICAgY29uc3QgcGF5cGFsU2RrU2NyaXB0Q29uZmlnID0gdGhpcy5nZXRQYXlQYWxTZGtTY3JpcHRDb25maWdPclRocm93KFxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2UsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZFBheVBhbFNESyhwYXlwYWxTZGtTY3JpcHRDb25maWcsIGZvcmNlTG9hZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkUGF5UGFsU0RLKFxuICAgICAgICBwYXlwYWxTZGtTY3JpcHRDb25maWc6IFBheVBhbENvbW1lcmNlU2NyaXB0UGFyYW1zLFxuICAgICAgICBmb3JjZUxvYWQgPSBmYWxzZSxcbiAgICApOiBQcm9taXNlPFBheVBhbFNESz4ge1xuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbCB8fCBmb3JjZUxvYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnRyYW5zZm9ybUNvbmZpZzxQYXlQYWxDb21tZXJjZVNjcmlwdFBhcmFtc1snb3B0aW9ucyddPihcbiAgICAgICAgICAgICAgICBwYXlwYWxTZGtTY3JpcHRDb25maWcub3B0aW9ucyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gdGhpcy50cmFuc2Zvcm1Db25maWc8UGF5UGFsQ29tbWVyY2VTY3JpcHRQYXJhbXNbJ2F0dHJpYnV0ZXMnXT4oXG4gICAgICAgICAgICAgICAgcGF5cGFsU2RrU2NyaXB0Q29uZmlnLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBwYXlwYWxTZGtVcmwgPSAnaHR0cHM6Ly93d3cucGF5cGFsLmNvbS9zZGsvanMnO1xuICAgICAgICAgICAgY29uc3Qgc2NyaXB0UXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKG9wdGlvbnMpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBzY3JpcHRTcmMgPSBgJHtwYXlwYWxTZGtVcmx9PyR7c2NyaXB0UXVlcnl9YDtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zY3JpcHRMb2FkZXIubG9hZFNjcmlwdChzY3JpcHRTcmMsIHsgYXN5bmM6IHRydWUsIGF0dHJpYnV0ZXMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucGF5cGFsO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGF5UGFsU2RrU2NyaXB0Q29uZmlnT3JUaHJvdyhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICAgICBpbml0aWFsaXplc09uQ2hlY2tvdXRQYWdlID0gdHJ1ZSxcbiAgICApOiBQYXlQYWxDb21tZXJjZVNjcmlwdFBhcmFtcyB7XG4gICAgICAgIGNvbnN0IHsgaWQsIGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXphdGlvbkRhdGE/LmNsaWVudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgICAgIG1lcmNoYW50SWQsXG4gICAgICAgICAgICBidXllckNvdW50cnksXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgaXNWZW5tb0VuYWJsZWQsXG4gICAgICAgICAgICBpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCxcbiAgICAgICAgICAgIGlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlLFxuICAgICAgICAgICAgaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSxcbiAgICAgICAgICAgIGF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMgPSBbXSxcbiAgICAgICAgICAgIGVuYWJsZWRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzID0gW10sXG4gICAgICAgICAgICBpc0dvb2dsZVBheUVuYWJsZWQsXG4gICAgICAgIH0gPSBpbml0aWFsaXphdGlvbkRhdGE7XG5cbiAgICAgICAgY29uc3QgY29tbWl0ID0gaXNIb3N0ZWRDaGVja291dEVuYWJsZWQgfHwgaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZTtcblxuICAgICAgICBjb25zdCBzaG91bGRFbmFibGVDYXJkID0gaWQgPT09ICdwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzJztcbiAgICAgICAgY29uc3QgZW5hYmxlQ2FyZEZ1bmRpbmcgPSBzaG91bGRFbmFibGVDYXJkID8gWydjYXJkJ10gOiBbXTtcbiAgICAgICAgY29uc3QgZGlzYWJsZUNhcmRGdW5kaW5nID0gIXNob3VsZEVuYWJsZUNhcmQgPyBbJ2NhcmQnXSA6IFtdO1xuXG4gICAgICAgIGNvbnN0IGVuYWJsZUNyZWRpdEZ1bmRpbmcgPSBpc1BheVBhbENyZWRpdEF2YWlsYWJsZSA/IFsnY3JlZGl0JywgJ3BheWxhdGVyJ10gOiBbXTtcbiAgICAgICAgY29uc3QgZGlzYWJsZUNyZWRpdEZ1bmRpbmcgPSAhaXNQYXlQYWxDcmVkaXRBdmFpbGFibGUgPyBbJ2NyZWRpdCcsICdwYXlsYXRlciddIDogW107XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkRW5hYmxlQVBNcyA9IGluaXRpYWxpemVzT25DaGVja291dFBhZ2UgfHwgIWNvbW1pdDtcbiAgICAgICAgY29uc3QgZW5hYmxlVmVubW9GdW5kaW5nID0gaXNWZW5tb0VuYWJsZWQgPyBbJ3Zlbm1vJ10gOiBbXTtcbiAgICAgICAgY29uc3QgZGlzYWJsZVZlbm1vRnVuZGluZyA9ICFpc1Zlbm1vRW5hYmxlZCA/IFsndmVubW8nXSA6IFtdO1xuICAgICAgICBjb25zdCBlbmFibGVBUE1zRnVuZGluZyA9IHNob3VsZEVuYWJsZUFQTXMgPyBlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyA6IFtdO1xuICAgICAgICBjb25zdCBkaXNhYmxlQVBNc0Z1bmRpbmcgPSBzaG91bGRFbmFibGVBUE1zXG4gICAgICAgICAgICA/IGF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgKGFwbTogc3RyaW5nKSA9PiAhZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMuaW5jbHVkZXMoYXBtKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzO1xuICAgICAgICBjb25zdCBnb29nbGVQYXlDb21wb25lbnQ6IENvbXBvbmVudHNTY3JpcHRUeXBlID0gaXNHb29nbGVQYXlFbmFibGVkID8gWydnb29nbGVwYXknXSA6IFtdO1xuICAgICAgICBjb25zdCBjYXJkRmllbGRzQ29tcG9uZW50OiBDb21wb25lbnRzU2NyaXB0VHlwZSA9IGluaXRpYWxpemVzT25DaGVja291dFBhZ2VcbiAgICAgICAgICAgID8gWydjYXJkLWZpZWxkcyddXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCBkaXNhYmxlRnVuZGluZzogRnVuZGluZ1R5cGUgPSBbXG4gICAgICAgICAgICAuLi5kaXNhYmxlQ2FyZEZ1bmRpbmcsXG4gICAgICAgICAgICAuLi5kaXNhYmxlQ3JlZGl0RnVuZGluZyxcbiAgICAgICAgICAgIC4uLmRpc2FibGVWZW5tb0Z1bmRpbmcsXG4gICAgICAgICAgICAuLi5kaXNhYmxlQVBNc0Z1bmRpbmcsXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGVuYWJsZUZ1bmRpbmc6IEZ1bmRpbmdUeXBlID0gW1xuICAgICAgICAgICAgLi4uZW5hYmxlQ2FyZEZ1bmRpbmcsXG4gICAgICAgICAgICAuLi5lbmFibGVDcmVkaXRGdW5kaW5nLFxuICAgICAgICAgICAgLi4uZW5hYmxlVmVubW9GdW5kaW5nLFxuICAgICAgICAgICAgLi4uZW5hYmxlQVBNc0Z1bmRpbmcsXG4gICAgICAgIF07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnY2xpZW50LWlkJzogY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50LWlkJzogbWVyY2hhbnRJZCxcbiAgICAgICAgICAgICAgICAnZW5hYmxlLWZ1bmRpbmcnOiBlbmFibGVGdW5kaW5nLmxlbmd0aCA+IDAgPyBlbmFibGVGdW5kaW5nIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICdkaXNhYmxlLWZ1bmRpbmcnOiBkaXNhYmxlRnVuZGluZy5sZW5ndGggPiAwID8gZGlzYWJsZUZ1bmRpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tbWl0LFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2J1dHRvbnMnLFxuICAgICAgICAgICAgICAgICAgICAnaG9zdGVkLWZpZWxkcycsXG4gICAgICAgICAgICAgICAgICAgICdwYXltZW50LWZpZWxkcycsXG4gICAgICAgICAgICAgICAgICAgICdsZWdhbCcsXG4gICAgICAgICAgICAgICAgICAgIC4uLmdvb2dsZVBheUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgLi4uY2FyZEZpZWxkc0NvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgICAgIC4uLihpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlICYmIHsgJ2J1eWVyLWNvdW50cnknOiBidXllckNvdW50cnkgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnOiBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgICAgICdkYXRhLWNsaWVudC10b2tlbic6IGNsaWVudFRva2VuLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYW5zZm9ybUNvbmZpZzxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KGNvbmZpZzogVCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgICAgICBsZXQgdHJhbnNmb3JtZWRDb25maWcgPSB7fTtcblxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY29uZmlnKSBhcyBBcnJheTxrZXlvZiBUPjtcblxuICAgICAgICBrZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWdba2V5XTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIHZhbHVlID09PSAnJyB8fFxuICAgICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyYW5zZm9ybWVkQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIC4uLnRyYW5zZm9ybWVkQ29uZmlnLFxuICAgICAgICAgICAgICAgIFtrZXldOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkQ29uZmlnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgY3JlYXRlUmVxdWVzdFNlbmRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHtcbiAgICBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIsXG4gICAgUGF5UGFsQ29tbWVyY2VTY3JpcHRMb2FkZXIsXG59IGZyb20gJy4vaW5kZXgnO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSA9IChcbiAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuKSA9PiB7XG4gICAgY29uc3QgeyBnZXRIb3N0IH0gPSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICByZXR1cm4gbmV3IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBjcmVhdGVGb3JtUG9zdGVyKCksXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIG5ldyBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIoY3JlYXRlUmVxdWVzdFNlbmRlcih7IGhvc3Q6IGdldEhvc3QoKSB9KSksXG4gICAgICAgIG5ldyBQYXlQYWxDb21tZXJjZVNjcmlwdExvYWRlcihnZXRTY3JpcHRMb2FkZXIoKSksXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlO1xuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gYSBtZXRob2QgaXMgdW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGVcbiAqIGNhbGxlciBoYXMgbm90IHByb3ZpZGVkIGFsbCB0aGUgYXJndW1lbnRzIGFjY29yZGluZyB0byB0aGVpciByZXF1aXJlbWVudHMsXG4gKiBpLmUuOiBpZiBhbiBhcmd1bWVudCBpcyBtaXNzaW5nIG9yIGl0IGlzIG5vdCB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnSW52YWxpZCBhcmd1bWVudHMgaGF2ZSBiZWVuIHByb3ZpZGVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdJbnZhbGlkQXJndW1lbnRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdpbnZhbGlkX2FyZ3VtZW50JztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBDdXN0b21lckNyZWRlbnRpYWxzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQsXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDdXN0b21lckluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3VzdG9tZXItaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5IGltcGxlbWVudHMgQ3VzdG9tZXJTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBvbkVycm9yID0gbm9vcDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNlLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlLmNvbnRhaW5lclwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXlwYWxjb21tZXJjZS5vbkNsaWNrICYmIHR5cGVvZiBwYXlwYWxjb21tZXJjZS5vbkNsaWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2Uub25DbGlja1wiIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbkVycm9yID0gcGF5cGFsY29tbWVyY2Uub25FcnJvciB8fCBub29wO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmICghcGF5cGFsU2RrIHx8ICFwYXlwYWxTZGsuQnV0dG9ucyB8fCB0eXBlb2YgcGF5cGFsU2RrLkJ1dHRvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ1tCQyBQYXlQYWxdOiBQYXlQYWwgQnV0dG9uIGNvdWxkIG5vdCBiZSByZW5kZXJlZCwgZHVlIHRvIGlzc3VlcyB3aXRoIGxvYWRpbmcgUGF5UGFsIFNESycsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25JbihjcmVkZW50aWFsczogQ3VzdG9tZXJDcmVkZW50aWFscywgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduSW5DdXN0b21lcihjcmVkZW50aWFscywgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2U6IFBheVBhbENvbW1lcmNlQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2ssIG9uQ29tcGxldGUgfSA9IHBheXBhbGNvbW1lcmNlO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQsIHBheW1lbnRCdXR0b25TdHlsZXMsIGlzQXBwU3dpdGNoRW5hYmxlZCB9ID1cbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0VG9wQnV0dG9uU3R5bGVzIH0gPSBwYXltZW50QnV0dG9uU3R5bGVzIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAuLi4odGhpcy5pc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZCkgJiYge1xuICAgICAgICAgICAgICAgIGFwcFN3aXRjaFdoZW5BdmFpbGFibGU6IHRydWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKCdwYXlwYWxjb21tZXJjZScpLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS50b2tlbml6ZVBheW1lbnQobWV0aG9kSWQsIG9yZGVySUQpLFxuICAgICAgICAgICAgLi4uKG9uQ2xpY2sgJiYgeyBvbkNsaWNrOiAoKSA9PiBvbkNsaWNrKCkgfSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaG9zdGVkQ2hlY2tvdXRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAuLi4oIWlzQXBwU3dpdGNoRW5hYmxlZCAmJiB7XG4gICAgICAgICAgICAgICAgb25TaGlwcGluZ0FkZHJlc3NDaGFuZ2U6IChkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ0FkZHJlc3NDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICAgICAgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2U6IChkYXRhOiBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNoaXBwaW5nT3B0aW9uc0NoYW5nZShkYXRhKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoZGF0YTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCwgYWN0aW9uczogQXBwcm92ZUNhbGxiYWNrQWN0aW9ucykgPT5cbiAgICAgICAgICAgICAgICB0aGlzLm9uSG9zdGVkQ2hlY2tvdXRBcHByb3ZlKGRhdGEsIGFjdGlvbnMsIG1ldGhvZElkLCBvbkNvbXBsZXRlKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXR0b25SZW5kZXJPcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkZVTkRJTkcuUEFZUEFMLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZSh7XG4gICAgICAgICAgICAgICAgLi4uY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDYWxsYmFja3MsXG4gICAgICAgICAgICAuLi4oaXNIb3N0ZWRDaGVja291dEVuYWJsZWQgJiYgaG9zdGVkQ2hlY2tvdXRDYWxsYmFja3MpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvbiA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvblJlbmRlck9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChwYXlwYWxCdXR0b24uaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uLmhhc1JldHVybmVkPy4oKSAmJiB0aGlzLmlzUGF5cGFsQ29tbWVyY2VBcHBTd2l0Y2hFbmFibGVkKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgICAgIHBheXBhbEJ1dHRvbi5yZXN1bWU/LigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXlwYWxCdXR0b24ucmVuZGVyKGAjJHtjb250YWluZXJ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25Ib3N0ZWRDaGVja291dEFwcHJvdmUoXG4gICAgICAgIGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9uQ29tcGxldGU/OiAoKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIWRhdGEub3JkZXJJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FydCA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyRGV0YWlscyA9IGF3YWl0IGFjdGlvbnMub3JkZXIuZ2V0KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVCaWxsaW5nQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgICAgIGlmIChjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKHNoaXBwaW5nQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIoe30sIHsgcGFyYW1zOiB7IG1ldGhvZElkIH0gfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQobWV0aG9kSWQsIGRhdGEub3JkZXJJRCk7XG5cbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlICYmIHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEFkZHJlc3Moe1xuICAgICAgICAgICAgY2l0eTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5zdGF0ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEluZm86IHdlIHVzZSB0aGUgc2FtZSBhZGRyZXNzIHRvIGZpbGwgYmlsbGluZyBhbmQgc2hpcHBpbmcgYWRkcmVzc2VzIHRvIGhhdmUgdmFsaWQgcXVvdGEgb24gQkUgZm9yIG9yZGVyIHVwZGF0aW5nIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIG9uIHRoaXMgc3RhZ2Ugd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdmFsaWQgY3VzdG9tZXIncyBhZGRyZXNzIGV4Y2VwdCBzaGlwcGluZyBkYXRhXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKGFkZHJlc3MpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KFxuICAgICAgICAgICAgZGF0YS5zZWxlY3RlZFNoaXBwaW5nT3B0aW9uLmlkLFxuICAgICAgICApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCBBcHBTd2l0Y2ggZW5hYmxpbmcgaGFuZGxpbmdcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgcmV0dXJuIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhPy5pc0FwcFN3aXRjaEVuYWJsZWQgfHwgZmFsc2U7XG4gICAgfVxufVxuIiwiY29uc3QgRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0ID0gMzY7XG5cbmV4cG9ydCBkZWZhdWx0IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodDtcbiIsImltcG9ydCB7XG4gICAgQ3VzdG9tZXJTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3VzdG9tZXItc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQ3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3ksIFt7IGlkOiAncGF5cGFsY29tbWVyY2UnIH1dKTtcbiIsImltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEN1c3RvbWVyQ3JlZGVudGlhbHMsXG4gICAgQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICBDdXN0b21lclN0cmF0ZWd5LFxuICAgIERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUmVxdWVzdE9wdGlvbnMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tBY3Rpb25zLFxuICAgIEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY3VzdG9tZXItaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lclN0cmF0ZWd5IGltcGxlbWVudHMgQ3VzdG9tZXJTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBvbkVycm9yID0gbm9vcDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNlY3JlZGl0LCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlY3JlZGl0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlY3JlZGl0LmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0LmNvbnRhaW5lclwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXlwYWxjb21tZXJjZWNyZWRpdC5vbkNsaWNrICYmIHR5cGVvZiBwYXlwYWxjb21tZXJjZWNyZWRpdC5vbkNsaWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXQub25DbGlja1wiIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbkVycm9yID0gcGF5cGFsY29tbWVyY2VjcmVkaXQub25FcnJvciB8fCBub29wO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmICghcGF5cGFsU2RrIHx8ICFwYXlwYWxTZGsuQnV0dG9ucyB8fCB0eXBlb2YgcGF5cGFsU2RrLkJ1dHRvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ1tCQyBQYXlQYWxdOiBQYXlQYWwgQnV0dG9uIGNvdWxkIG5vdCBiZSByZW5kZXJlZCwgZHVlIHRvIGlzc3VlcyB3aXRoIGxvYWRpbmcgUGF5UGFsIFNESycsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VjcmVkaXQpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25JbihjcmVkZW50aWFsczogQ3VzdG9tZXJDcmVkZW50aWFscywgb3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduSW5DdXN0b21lcihjcmVkZW50aWFscywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbk91dChvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25PdXRDdXN0b21lcihvcHRpb25zKTtcbiAgICB9XG5cbiAgICBleGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0KG9wdGlvbnM/OiBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBvcHRpb25zPy5jb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrPy4oKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbENvbW1lcmNlQ3JlZGl0OiBQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkNvbXBsZXRlLCBvbkNsaWNrIH0gPSBwYXlwYWxDb21tZXJjZUNyZWRpdDtcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkLCBwYXltZW50QnV0dG9uU3R5bGVzLCBpc0FwcFN3aXRjaEVuYWJsZWQgfSA9XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFRvcEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcigncGF5cGFsY29tbWVyY2VjcmVkaXQnKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgICAgIC4uLihvbkNsaWNrICYmIHsgb25DbGljazogKCkgPT4gb25DbGljaygpIH0pLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgLi4uKCFpc0FwcFN3aXRjaEVuYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5vbkhvc3RlZENoZWNrb3V0QXBwcm92ZShkYXRhLCBhY3Rpb25zLCBtZXRob2RJZCwgb25Db21wbGV0ZSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZXMgPSBbcGF5cGFsU2RrLkZVTkRJTkcuUEFZTEFURVIsIHBheXBhbFNkay5GVU5ESU5HLkNSRURJVF07XG4gICAgICAgIGxldCBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gZmFsc2U7XG5cbiAgICAgICAgZnVuZGluZ1NvdXJjZXMuZm9yRWFjaCgoZnVuZGluZ1NvdXJjZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jaGVja291dFRvcEJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVmYXVsdENhbGxiYWNrcyxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkICYmIGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzKSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXlwYWxCdXR0b24ucmVuZGVyKGAjJHtjb250YWluZXJ9YCk7XG4gICAgICAgICAgICAgICAgICAgIGhhc1JlbmRlcmVkU21hcnRCdXR0b24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25Ib3N0ZWRDaGVja291dEFwcHJvdmUoXG4gICAgICAgIGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9uQ29tcGxldGU/OiAoKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIWRhdGEub3JkZXJJRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FydCA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyRGV0YWlscyA9IGF3YWl0IGFjdGlvbnMub3JkZXIuZ2V0KCk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgb3JkZXJEZXRhaWxzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVCaWxsaW5nQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgICAgIGlmIChjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNoaXBwaW5nQWRkcmVzc0Zyb21PcmRlckRldGFpbHMoXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKHNoaXBwaW5nQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIoe30sIHsgcGFyYW1zOiB7IG1ldGhvZElkIH0gfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQobWV0aG9kSWQsIGRhdGEub3JkZXJJRCk7XG5cbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlICYmIHR5cGVvZiBvbkNvbXBsZXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEFkZHJlc3Moe1xuICAgICAgICAgICAgY2l0eTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5zdGF0ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEluZm86IHdlIHVzZSB0aGUgc2FtZSBhZGRyZXNzIHRvIGZpbGwgYmlsbGluZyBhbmQgc2hpcHBpbmcgYWRkcmVzc2VzIHRvIGhhdmUgdmFsaWQgcXVvdGEgb24gQkUgZm9yIG9yZGVyIHVwZGF0aW5nIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIG9uIHRoaXMgc3RhZ2Ugd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdmFsaWQgY3VzdG9tZXIncyBhZGRyZXNzIGV4Y2VwdCBzaGlwcGluZyBkYXRhXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKGFkZHJlc3MpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGRhdGE6IFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KFxuICAgICAgICAgICAgZGF0YS5zZWxlY3RlZFNoaXBwaW5nT3B0aW9uLmlkLFxuICAgICAgICApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2VsZWN0U2hpcHBpbmdPcHRpb24oc2hpcHBpbmdPcHRpb24uaWQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS51cGRhdGVPcmRlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lclN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1jdXN0b21lci1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneTogQ3VzdG9tZXJTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VDcmVkaXRDdXN0b21lclN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZWNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBDdXN0b21lckNyZWRlbnRpYWxzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBEZWZhdWx0Q2hlY2tvdXRCdXR0b25IZWlnaHQsXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lckluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1jdXN0b21lci1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneSBpbXBsZW1lbnRzIEN1c3RvbWVyU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VWZW5tb0N1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsY29tbWVyY2V2ZW5tbywgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZXZlbm1vKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2V2ZW5tb1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2V2ZW5tby5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZXZlbm1vLmNvbnRhaW5lclwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXlwYWxjb21tZXJjZXZlbm1vLm9uQ2xpY2sgJiYgdHlwZW9mIHBheXBhbGNvbW1lcmNldmVubW8ub25DbGljayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNldmVubW8ub25DbGlja1wiIGFyZ3VtZW50IGlzIG5vdCBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmICghcGF5bWVudE1ldGhvZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFwYXlwYWxTZGsgfHwgIXBheXBhbFNkay5CdXR0b25zIHx8IHR5cGVvZiBwYXlwYWxTZGsuQnV0dG9ucyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAnW0JDIFBheVBhbF06IFBheVBhbCBCdXR0b24gY291bGQgbm90IGJlIHJlbmRlcmVkLCBkdWUgdG8gaXNzdWVzIHdpdGggbG9hZGluZyBQYXlQYWwgU0RLJyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZXZlbm1vKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChvcHRpb25zPzogRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgb3B0aW9ucz8uY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjaz8uKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxjb21tZXJjZXZlbm1vOiBQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2sgfSA9IHBheXBhbGNvbW1lcmNldmVubW87XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjaGVja291dFRvcEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCBidXR0b25SZW5kZXJPcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkZVTkRJTkcuVkVOTU8sXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKHtcbiAgICAgICAgICAgICAgICAuLi5jaGVja291dFRvcEJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcigncGF5cGFsY29tbWVyY2V2ZW5tbycpLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS50b2tlbml6ZVBheW1lbnQobWV0aG9kSWQsIG9yZGVySUQpLFxuICAgICAgICAgICAgLi4uKG9uQ2xpY2sgJiYgeyBvbkNsaWNrOiAoKSA9PiBvbkNsaWNrKCkgfSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uUmVuZGVyID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHBheXBhbEJ1dHRvblJlbmRlci5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIHBheXBhbEJ1dHRvblJlbmRlci5yZW5kZXIoYCMke2NvbnRhaW5lcn1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lclN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXZlbm1vLWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb0N1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lclN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlVmVubW9DdXN0b21lclN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VWZW5tb0N1c3RvbWVyU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2V2ZW5tbycgfSxcbl0pO1xuIiwiaW1wb3J0IHsgSG9zdGVkSW5zdHJ1bWVudCwgTm9uY2VJbnN0cnVtZW50IH0gZnJvbSAnLi9wYXltZW50JztcblxudHlwZSBQYXltZW50SW5zdHJ1bWVudCA9IENhcmRJbnN0cnVtZW50IHwgQWNjb3VudEluc3RydW1lbnQgfCBIb3N0ZWRJbnN0cnVtZW50IHwgTm9uY2VJbnN0cnVtZW50O1xuXG5leHBvcnQgZGVmYXVsdCBQYXltZW50SW5zdHJ1bWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlSW5zdHJ1bWVudCB7XG4gICAgYmlncGF5VG9rZW46IHN0cmluZztcbiAgICBkZWZhdWx0SW5zdHJ1bWVudDogYm9vbGVhbjtcbiAgICBwcm92aWRlcjogc3RyaW5nO1xuICAgIHRydXN0ZWRTaGlwcGluZ0FkZHJlc3M6IGJvb2xlYW47XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlIHtcbiAgICBDVlYgPSAnY3Z2JyxcbiAgICBQQU4gPSAncGFuJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXJkSW5zdHJ1bWVudCBleHRlbmRzIEJhc2VJbnN0cnVtZW50IHtcbiAgICBicmFuZDogc3RyaW5nO1xuICAgIGV4cGlyeU1vbnRoOiBzdHJpbmc7XG4gICAgZXhwaXJ5WWVhcjogc3RyaW5nO1xuICAgIGlpbjogc3RyaW5nO1xuICAgIGxhc3Q0OiBzdHJpbmc7XG4gICAgdHlwZTogJ2NhcmQnO1xuICAgIHVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvbk1vZGU6IFVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGU7XG59XG5cbmludGVyZmFjZSBCYXNlQWNjb3VudEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlSW5zdHJ1bWVudCB7XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgdHlwZTogJ2FjY291bnQnIHwgJ2JhbmsnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlQWNjb3VudEluc3RydW1lbnQge1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcbiAgICBtZXRob2Q6ICdwYXlwYWwnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjaEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlQWNjb3VudEluc3RydW1lbnQge1xuICAgIGlzc3Vlcjogc3RyaW5nO1xuICAgIGFjY291bnROdW1iZXI6IHN0cmluZztcbiAgICB0eXBlOiAnYmFuayc7XG4gICAgbWV0aG9kOiAnYWNoJyB8ICdlY3AnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhbmtJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBhY2NvdW50TnVtYmVyOiBzdHJpbmc7XG4gICAgaXNzdWVyOiBzdHJpbmc7XG4gICAgaWJhbjogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6ICdiYW5rJztcbn1cblxuZXhwb3J0IHR5cGUgQWNjb3VudEluc3RydW1lbnQgPSBQYXlQYWxJbnN0cnVtZW50IHwgQmFua0luc3RydW1lbnQgfCBBY2hJbnN0cnVtZW50O1xuXG5leHBvcnQgaW50ZXJmYWNlIFZhdWx0QWNjZXNzVG9rZW4ge1xuICAgIHZhdWx0QWNjZXNzVG9rZW46IHN0cmluZztcbiAgICB2YXVsdEFjY2Vzc0V4cGlyeTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb25Db250ZXh0IHtcbiAgICBjdXN0b21lcklkOiBudW1iZXI7XG4gICAgc3RvcmVJZDogc3RyaW5nO1xuICAgIGN1cnJlbmN5Q29kZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbnN0cnVtZW50UmVxdWVzdENvbnRleHQgZXh0ZW5kcyBTZXNzaW9uQ29udGV4dCB7XG4gICAgYXV0aFRva2VuOiBzdHJpbmc7XG59XG4iLCJpbXBvcnQgeyBDYXJkSW5zdHJ1bWVudCwgQ3VzdG9tZXJBZGRyZXNzIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBGdW5kaW5nIHNvdXJjZXNcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEZ1bmRpbmdUeXBlID0gc3RyaW5nW107XG5leHBvcnQgdHlwZSBFbmFibGVGdW5kaW5nVHlwZSA9IEZ1bmRpbmdUeXBlIHwgc3RyaW5nO1xuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgSW5pdGlhbGl6YXRpb24gRGF0YVxuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSB7XG4gICAgYXR0cmlidXRpb25JZD86IHN0cmluZztcbiAgICBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzOiBGdW5kaW5nVHlwZTtcbiAgICBidXR0b25TdHlsZT86IFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucztcbiAgICBidXllckNvdW50cnk/OiBzdHJpbmc7XG4gICAgY2xpZW50SWQ6IHN0cmluZztcbiAgICBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBmYXN0bGFuZVN0eWxlcz86IEZhc3RsYW5lU3R5bGVzU2V0dGluZ3M7XG4gICAgY29ubmVjdENsaWVudFRva2VuPzogc3RyaW5nOyAvLyBUT0RPOiByZW1vdmUgd2hlbiBQUENQIEZhc3RsYW5lIEEvQiB0ZXN0IHdpbGwgYmUgZmluaXNoZWRcbiAgICBlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kczogRnVuZGluZ1R5cGU7XG4gICAgaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZT86IGJvb2xlYW47XG4gICAgaW50ZW50PzogUGF5UGFsQ29tbWVyY2VJbnRlbnQ7XG4gICAgaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZD86IGJvb2xlYW47IC8vIFBheVBhbCBGYXN0bGFuZSByZWxhdGVkXG4gICAgaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQ/OiBib29sZWFuOyAvLyBQYXlQYWwgRmFzdGxhbmUgcmVsYXRlZFxuICAgIGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzUGF5UGFsQ29tbWVyY2VBbmFseXRpY3NWMkVuYWJsZWQ/OiBib29sZWFuOyAvLyBQYXlQYWwgRmFzdGxhbmUgcmVsYXRlZFxuICAgIGlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlPzogYm9vbGVhbjtcbiAgICBpc1Zlbm1vRW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNHb29nbGVQYXlFbmFibGVkPzogYm9vbGVhbjtcbiAgICBtZXJjaGFudElkPzogc3RyaW5nO1xuICAgIG9yZGVySWQ/OiBzdHJpbmc7XG4gICAgc2hvdWxkUmVuZGVyRmllbGRzPzogYm9vbGVhbjtcbiAgICBzaG91bGRSdW5BY2NlbGVyYXRlZENoZWNrb3V0PzogYm9vbGVhbjsgLy8gVE9ETzogcmVtb3ZlIHdoZW4gUFBDUCBGYXN0bGFuZSBBL0IgdGVzdCB3aWxsIGJlIGZpbmlzaGVkXG4gICAgcGF5bWVudEJ1dHRvblN0eWxlcz86IFJlY29yZDxzdHJpbmcsIFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucz47XG4gICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24/OiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW1bXTtcbiAgICB0aHJlZURTVmVyaWZpY2F0aW9uTWV0aG9kPzogc3RyaW5nO1xuICAgIGlzQXBwU3dpdGNoRW5hYmxlZD86IGJvb2xlYW47XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdyBjb250YWlucyBkaWZmZXJlbnRcbiAqIFBheVBhbCBTZGsgaW5zdGFuY2VzIGZvciBkaWZmZXJlbnQgcHVycG9zZXNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgICBwYXlwYWxGYXN0bGFuZT86IFBheVBhbEZhc3RsYW5lO1xuICAgIHBheXBhbEZhc3RsYW5lU2RrPzogUGF5UGFsRmFzdGxhbmVTZGs7XG4gICAgcGF5cGFsTWVzc2FnZXM/OiBQYXlQYWxNZXNzYWdlc1NkaztcbiAgICBwYXlwYWxBcG1zPzogUGF5UGFsQXBtU2RrO1xuICAgIHBheXBhbEdvb2dsZVBheT86IFBheVBhbEdvb2dsZVBheVNkaztcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIFNESyBjb25maWdcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsU2RrQ29uZmlnIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgICdjbGllbnQtaWQnPzogc3RyaW5nO1xuICAgICAgICAnbWVyY2hhbnQtaWQnPzogc3RyaW5nO1xuICAgICAgICAnYnV5ZXItY291bnRyeSc/OiBzdHJpbmc7XG4gICAgICAgICdlbmFibGUtZnVuZGluZyc/OiBFbmFibGVGdW5kaW5nVHlwZTtcbiAgICAgICAgJ2Rpc2FibGUtZnVuZGluZyc/OiBGdW5kaW5nVHlwZTtcbiAgICAgICAgY3VycmVuY3k/OiBzdHJpbmc7XG4gICAgICAgIGNvbW1pdD86IGJvb2xlYW47XG4gICAgICAgIGludGVudD86IFBheVBhbENvbW1lcmNlSW50ZW50O1xuICAgICAgICBjb21wb25lbnRzPzogUGF5UGFsU2RrQ29tcG9uZW50cztcbiAgICB9O1xuICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgJ2RhdGEtY2xpZW50LW1ldGFkYXRhLWlkJz86IHN0cmluZztcbiAgICAgICAgJ2RhdGEtcGFydG5lci1hdHRyaWJ1dGlvbi1pZCc/OiBzdHJpbmc7XG4gICAgICAgICdkYXRhLXNkay1jbGllbnQtdG9rZW4nPzogc3RyaW5nO1xuICAgICAgICAnZGF0YS1uYW1lc3BhY2UnPzogc3RyaW5nO1xuICAgICAgICAnZGF0YS1jbGllbnQtdG9rZW4nPzogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBlbnVtIFBheVBhbENvbW1lcmNlSW50ZW50IHtcbiAgICBBVVRIT1JJWkUgPSAnYXV0aG9yaXplJyxcbiAgICBDQVBUVVJFID0gJ2NhcHR1cmUnLFxufVxuXG5leHBvcnQgdHlwZSBQYXlQYWxTZGtDb21wb25lbnRzID0gQXJyYXk8XG4gICAgfCAnZmFzdGxhbmUnXG4gICAgfCAnbWVzc2FnZXMnXG4gICAgfCAnYnV0dG9ucydcbiAgICB8ICdwYXltZW50LWZpZWxkcydcbiAgICB8ICd0aHJlZS1kb21haW4tc2VjdXJlJ1xuICAgIHwgJ2hvc3RlZC1maWVsZHMnXG4gICAgfCAnZ29vZ2xlcGF5J1xuPjtcblxuLyoqXG4gKlxuICogUGF5UGFsIFNkayBpbnN0YW5jZXNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVTZGsge1xuICAgIFRocmVlRG9tYWluU2VjdXJlQ2xpZW50OiB7XG4gICAgICAgIGlzRWxpZ2libGUocGFyYW1zOiB0aHJlZURTZWN1cmVQYXJhbWV0ZXJzKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICAgICAgc2hvdygpOiBQcm9taXNlPFRocmVlRG9tYWluU2VjdXJlQ2xpZW50U2hvd1Jlc3BvbnNlPjtcbiAgICB9O1xuICAgIEZhc3RsYW5lKG9wdGlvbnM/OiBQYXlQYWxGYXN0bGFuZU9wdGlvbnMpOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lPjtcbn1cblxuaW50ZXJmYWNlIFRocmVlRG9tYWluU2VjdXJlQ2xpZW50U2hvd1Jlc3BvbnNlIHtcbiAgICBsaWFiaWxpdHlTaGlmdDogTGlhYmlsaXR5U2hpZnRFbnVtO1xuICAgIGF1dGhlbnRpY2F0aW9uU3RhdGU6IFREU2VjdXJlQXV0aGVudGljYXRpb25TdGF0ZTtcbiAgICBub25jZTogc3RyaW5nOyAvLyBFbnJpY2hlZCBub25jZSBvciB0aGUgb3JpZ2luYWwgbm9uY2Vcbn1cblxuZXhwb3J0IGVudW0gVERTZWN1cmVBdXRoZW50aWNhdGlvblN0YXRlIHtcbiAgICBTdWNjZWVkZWQgPSAnc3VjY2VlZGVkJyxcbiAgICBDYW5jZWxsZWQgPSAnY2FuY2VsbGVkJyxcbiAgICBFcnJvcmVkID0gJ2Vycm9yZWQnLFxufVxuXG5leHBvcnQgZW51bSBMaWFiaWxpdHlTaGlmdEVudW0ge1xuICAgIFBvc3NpYmxlID0gJ1BPU1NJQkxFJyxcbiAgICBObyA9ICdOTycsXG4gICAgVW5rbm93biA9ICdVTktOT1dOJyxcbiAgICBZZXMgPSAnWUVTJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSB0aHJlZURTZWN1cmVQYXJhbWV0ZXJzIHtcbiAgICBhbW91bnQ6IHN0cmluZztcbiAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgdGhyZWVEU1JlcXVlc3RlZDogYm9vbGVhbjtcbiAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IHtcbiAgICAgICAgZXhwZXJpZW5jZV9jb250ZXh0OiB7XG4gICAgICAgICAgICBicmFuZF9uYW1lPzogc3RyaW5nO1xuICAgICAgICAgICAgbG9jYWxlOiBzdHJpbmc7XG4gICAgICAgICAgICByZXR1cm5fdXJsOiBzdHJpbmc7XG4gICAgICAgICAgICBjYW5jZWxfdXJsOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxNZXNzYWdlc1NkayB7XG4gICAgTWVzc2FnZXMob3B0aW9uczogTWVzc2FnaW5nT3B0aW9ucyk6IE1lc3NhZ2luZ1JlbmRlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxBcG1TZGsge1xuICAgIEJ1dHRvbnMob3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyk6IFBheVBhbENvbW1lcmNlQnV0dG9ucztcbiAgICBQYXltZW50RmllbGRzKG9wdGlvbnM6IFBheVBhbENvbW1lcmNlUGF5bWVudEZpZWxkc09wdGlvbnMpOiBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsR29vZ2xlUGF5U2RrIHtcbiAgICBHb29nbGVwYXkoKTogR29vZ2xlUGF5O1xufVxuXG4vKipcbiAqXG4gKiBHb29nbGUgUGF5IHJlbGF0ZWQgdHlwZXNcbiAqXG4gKi9cblxuaW50ZXJmYWNlIEdvb2dsZVBheSB7XG4gICAgY29uZmlnOiAoKSA9PiBQcm9taXNlPEdvb2dsZVBheUNvbmZpZz47XG4gICAgY29uZmlybU9yZGVyOiAoY29uZmlybU9yZGVyQ29uZmlnOiBDb25maXJtT3JkZXJDb25maWcpID0+IFByb21pc2U8eyBzdGF0dXM6IHN0cmluZyB9PjtcbiAgICBpbml0aWF0ZVBheWVyQWN0aW9uOiAocGF5ZXJBY3Rpb25Db25maWc6IFBheWVyQWN0aW9uQ29uZmlnKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG5pbnRlcmZhY2UgQ29uZmlybU9yZGVyQ29uZmlnIHtcbiAgICBvcmRlcklkOiBzdHJpbmc7XG4gICAgcGF5bWVudE1ldGhvZERhdGE6IENvbmZpcm1PcmRlckRhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlybU9yZGVyRGF0YSB7XG4gICAgdG9rZW5pemF0aW9uRGF0YToge1xuICAgICAgICB0eXBlOiBzdHJpbmc7XG4gICAgICAgIHRva2VuOiBzdHJpbmc7XG4gICAgfTtcbiAgICBpbmZvOiB7XG4gICAgICAgIGNhcmROZXR3b3JrOiBzdHJpbmc7XG4gICAgICAgIGNhcmREZXRhaWxzOiBzdHJpbmc7XG4gICAgfTtcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBQYXllckFjdGlvbkNvbmZpZyB7XG4gICAgb3JkZXJJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdvb2dsZVBheUNvbmZpZyB7XG4gICAgYWxsb3dlZFBheW1lbnRNZXRob2RzOiBBbGxvd2VkUGF5bWVudE1ldGhvZHNbXTtcbiAgICBhcGlWZXJzaW9uOiBudW1iZXI7XG4gICAgYXBpVmVyc2lvbk1pbm9yOiBudW1iZXI7XG4gICAgY291bnRyeUNvZGU6IHN0cmluZztcbiAgICBpc0VsaWdpYmxlOiBib29sZWFuO1xuICAgIG1lcmNoYW50SW5mbzoge1xuICAgICAgICBtZXJjaGFudElkOiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50T3JpZ2luOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbGxvd2VkUGF5bWVudE1ldGhvZHMge1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICAgIGFsbG93ZWRBdXRoTWV0aG9kczogc3RyaW5nW107XG4gICAgICAgIGFsbG93ZWRDYXJkTmV0d29ya3M6IHN0cmluZ1tdO1xuICAgICAgICBiaWxsaW5nQWRkcmVzc1JlcXVpcmVkOiBib29sZWFuO1xuICAgICAgICBhc3N1cmFuY2VEZXRhaWxzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgICAgIGJpbGxpbmdBZGRyZXNzUGFyYW1ldGVyczoge1xuICAgICAgICAgICAgZm9ybWF0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB0b2tlbml6YXRpb25TcGVjaWZpY2F0aW9uOiB7XG4gICAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgICAgZ2F0ZXdheTogc3RyaW5nO1xuICAgICAgICAgICAgZ2F0ZXdheU1lcmNoYW50SWQ6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWwgQ29tbWVyY2UgQnV0dG9uc1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUJ1dHRvbnMge1xuICAgIHJlbmRlcihpZDogc3RyaW5nKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIGlzRWxpZ2libGUoKTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zIHtcbiAgICBzdHlsZT86IFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucztcbiAgICBmdW5kaW5nU291cmNlOiBzdHJpbmc7XG4gICAgY3JlYXRlT3JkZXIoKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIG9uQXBwcm92ZShcbiAgICAgICAgZGF0YTogUGF5UGFsQnV0dG9uQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgYWN0aW9uczogUGF5UGFsQnV0dG9uQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICApOiBQcm9taXNlPGJvb2xlYW4gfCB2b2lkPiB8IHZvaWQ7XG4gICAgb25Jbml0PyhcbiAgICAgICAgZGF0YTogUGF5UGFsQnV0dG9uSW5pdENhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgYWN0aW9uczogUGF5UGFsQnV0dG9uSW5pdENhbGxiYWNrQWN0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+O1xuICAgIG9uQ2xpY2s/KFxuICAgICAgICBkYXRhOiBQYXlQYWxCdXR0b25DbGlja0NhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgYWN0aW9uczogUGF5UGFsQnV0dG9uQ2xpY2tDYWxsYmFja0FjdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB8IHZvaWQ7XG4gICAgb25FcnJvcj8oZXJyb3I6IEVycm9yKTogdm9pZDtcbiAgICBvbkNhbmNlbD8oKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXR0b25DbGlja0NhbGxiYWNrUGF5bG9hZCB7XG4gICAgZnVuZGluZ1NvdXJjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvbkNsaWNrQ2FsbGJhY2tBY3Rpb25zIHtcbiAgICByZWplY3QoKTogdm9pZDtcbiAgICByZXNvbHZlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV0dG9uSW5pdENhbGxiYWNrUGF5bG9hZCB7XG4gICAgY29ycmVsYXRpb25JRDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvbkluaXRDYWxsYmFja0FjdGlvbnMge1xuICAgIGRpc2FibGUoKTogdm9pZDtcbiAgICBlbmFibGUoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxCdXR0b25BcHByb3ZlQ2FsbGJhY2tQYXlsb2FkIHtcbiAgICBvcmRlcklEPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJ1dHRvbkFwcHJvdmVDYWxsYmFja0FjdGlvbnMge1xuICAgIG9yZGVyOiB7XG4gICAgICAgIGdldDogKCkgPT4gUHJvbWlzZTxQYXlQYWxPcmRlckRldGFpbHM+O1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsT3JkZXJEZXRhaWxzIHtcbiAgICBwYXllcjoge1xuICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBnaXZlbl9uYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICBzdXJuYW1lOiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGVtYWlsX2FkZHJlc3M6IHN0cmluZztcbiAgICAgICAgYWRkcmVzczogUGF5UGFsT3JkZXJBZGRyZXNzO1xuICAgIH07XG4gICAgcHVyY2hhc2VfdW5pdHM6IEFycmF5PHtcbiAgICAgICAgc2hpcHBpbmc6IHtcbiAgICAgICAgICAgIGFkZHJlc3M6IFBheVBhbE9yZGVyQWRkcmVzcztcbiAgICAgICAgfTtcbiAgICB9Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxPcmRlckFkZHJlc3Mge1xuICAgIGFkZHJlc3NfbGluZV8xOiBzdHJpbmc7XG4gICAgYWRtaW5fYXJlYV8yOiBzdHJpbmc7XG4gICAgYWRtaW5fYXJlYV8xPzogc3RyaW5nO1xuICAgIHBvc3RhbF9jb2RlOiBzdHJpbmc7XG4gICAgY291bnRyeV9jb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFN0eWxlQnV0dG9uTGFiZWwge1xuICAgIHBheXBhbCA9ICdwYXlwYWwnLFxuICAgIGNoZWNrb3V0ID0gJ2NoZWNrb3V0JyxcbiAgICBidXlub3cgPSAnYnV5bm93JyxcbiAgICBwYXkgPSAncGF5JyxcbiAgICBpbnN0YWxsbWVudCA9ICdpbnN0YWxsbWVudCcsXG59XG5cbmV4cG9ydCBlbnVtIFN0eWxlQnV0dG9uQ29sb3Ige1xuICAgIGdvbGQgPSAnZ29sZCcsXG4gICAgYmx1ZSA9ICdibHVlJyxcbiAgICBzaWx2ZXIgPSAnc2lsdmVyJyxcbiAgICBibGFjayA9ICdibGFjaycsXG4gICAgd2hpdGUgPSAnd2hpdGUnLFxufVxuXG5leHBvcnQgZW51bSBTdHlsZUJ1dHRvblNoYXBlIHtcbiAgICBwaWxsID0gJ3BpbGwnLFxuICAgIHJlY3QgPSAncmVjdCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zIHtcbiAgICBjb2xvcj86IFN0eWxlQnV0dG9uQ29sb3I7XG4gICAgc2hhcGU/OiBTdHlsZUJ1dHRvblNoYXBlO1xuICAgIGhlaWdodD86IG51bWJlcjtcbiAgICBsYWJlbD86IFN0eWxlQnV0dG9uTGFiZWw7XG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBDb21tZXJjZSBQYXltZW50IGZpZWxkc1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHMge1xuICAgIHJlbmRlcihpZDogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxDb21tZXJjZVBheW1lbnRGaWVsZHNPcHRpb25zIHtcbiAgICBzdHlsZT86IFBheVBhbENvbW1lcmNlRmllbGRzU3R5bGVPcHRpb25zO1xuICAgIGZ1bmRpbmdTb3VyY2U6IHN0cmluZztcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgbmFtZT86IHtcbiAgICAgICAgICAgIHZhbHVlPzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBlbWFpbD86IHtcbiAgICAgICAgICAgIHZhbHVlPzogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQ29tbWVyY2VGaWVsZHNTdHlsZU9wdGlvbnMge1xuICAgIHZhcmlhYmxlcz86IHtcbiAgICAgICAgZm9udEZhbWlseT86IHN0cmluZztcbiAgICAgICAgZm9udFNpemVCYXNlPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZVNtPzogc3RyaW5nO1xuICAgICAgICBmb250U2l6ZU0/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplTGc/OiBzdHJpbmc7XG4gICAgICAgIHRleHRDb2xvcj86IHN0cmluZztcbiAgICAgICAgY29sb3JUZXh0UGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgICAgIGNvbG9yQmFja2dyb3VuZD86IHN0cmluZztcbiAgICAgICAgY29sb3JJbmZvPzogc3RyaW5nO1xuICAgICAgICBjb2xvckRhbmdlcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyUmFkaXVzPzogc3RyaW5nO1xuICAgICAgICBib3JkZXJDb2xvcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIGJvcmRlckZvY3VzQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIHNwYWNpbmdVbml0Pzogc3RyaW5nO1xuICAgIH07XG4gICAgcnVsZXM/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xufVxuXG4vKipcbiAqXG4gKiBQYXlMYXRlciBNZXNzYWdlcyByZWxhdGVkIHR5cGVzXG4gKiBkb2M6IGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9jaGVja291dC9wYXktbGF0ZXIvdXMvaW50ZWdyYXRlL3JlZmVyZW5jZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2luZ1JlbmRlciB7XG4gICAgcmVuZGVyKGNvbnRhaW5lcjogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlc1N0eWxlT3B0aW9ucyB7XG4gICAgY29sb3I/OiBzdHJpbmc7IC8vICdibHVlJyB8ICdibGFjaycgfCAnd2hpdGUnIHwgJ3doaXRlLW5vLWJvcmRlcicgfCAnZ3JheScgfCAnbW9ub2Nocm9tZScgfCAnZ3JheXNjYWxlJ1xuICAgIGxheW91dD86IHN0cmluZzsgLy8gJ3RleHQnIHwgJ2ZsZXgnXG4gICAgbG9nbz86IHtcbiAgICAgICAgdHlwZT86IHN0cmluZzsgLy8gJ3ByaW1hcnknIHwgJ2FsdGVybmF0aXZlJyB8ICdpbmxpbmUnIHwgJ25vbmUnXG4gICAgICAgIHBvc2l0aW9uPzogc3RyaW5nOyAvLyAnbGVmdCcgfCAncmlnaHQnIHwgJ3RvcCdcbiAgICB9O1xuICAgIHJhdGlvPzogc3RyaW5nOyAvLyAnMXgxJyB8ICcxeDQnIHwgJzh4MScgfCAnMjB4MSdcbiAgICB0ZXh0Pzoge1xuICAgICAgICBhbGlnbj86IHN0cmluZzsgLy8gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInXG4gICAgICAgIGNvbG9yPzogc3RyaW5nOyAvLyAnYmxhY2snIHwgJ3doaXRlJyB8ICdtb25vY2hyb21lJyB8ICdncmF5c2NhbGUnXG4gICAgICAgIHNpemU/OiBudW1iZXI7IC8vIGZyb20gMTAgdG8gMTZcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2luZ09wdGlvbnMge1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIHBsYWNlbWVudDogc3RyaW5nO1xuICAgIHN0eWxlPzogTWVzc2FnZXNTdHlsZU9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGF0dXM6IGJvb2xlYW47XG4gICAgc3R5bGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufVxuXG4vKipcbiAqXG4gKiBQYXlQYWwgRmFzdGxhbmUgcmVsYXRlZCB0eXBlc1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZSB7XG4gICAgaWRlbnRpdHk6IFBheVBhbEZhc3RsYW5lSWRlbnRpdHk7XG4gICAgZXZlbnRzOiBQYXlQYWxGYXN0bGFuZUV2ZW50cztcbiAgICBwcm9maWxlOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGU7XG4gICAgRmFzdGxhbmVDYXJkQ29tcG9uZW50KFxuICAgICAgICBvcHRpb25zOiBQYXlQYWxGYXN0bGFuZUNhcmRDb21wb25lbnRPcHRpb25zLFxuICAgICk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50TWV0aG9kcz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVPcHRpb25zIHtcbiAgICBzdHlsZXM/OiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUlkZW50aXR5IHtcbiAgICBsb29rdXBDdXN0b21lckJ5RW1haWwoZW1haWw6IHN0cmluZyk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmVMb29rdXBDdXN0b21lckJ5RW1haWxSZXN1bHQ+O1xuICAgIHRyaWdnZXJBdXRoZW50aWNhdGlvbkZsb3coXG4gICAgICAgIGN1c3RvbWVyQ29udGV4dElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uUmVzdWx0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUxvb2t1cEN1c3RvbWVyQnlFbWFpbFJlc3VsdCB7XG4gICAgY3VzdG9tZXJDb250ZXh0SWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblJlc3VsdCB7XG4gICAgYXV0aGVudGljYXRpb25TdGF0ZT86IFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZTtcbiAgICBwcm9maWxlRGF0YT86IFBheVBhbEZhc3RsYW5lUHJvZmlsZURhdGE7XG59XG5cbmV4cG9ydCBlbnVtIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZSB7XG4gICAgU1VDQ0VFREVEID0gJ3N1Y2NlZWRlZCcsXG4gICAgRkFJTEVEID0gJ2ZhaWxlZCcsXG4gICAgQ0FOQ0VMRUQgPSAnY2FuY2VsZWQnLFxuICAgIFVOUkVDT0dOSVpFRCA9ICd1bnJlY29nbml6ZWQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUHJvZmlsZURhdGEge1xuICAgIG5hbWU6IFBheVBhbEZhc3RsYW5lUHJvZmlsZU5hbWU7XG4gICAgc2hpcHBpbmdBZGRyZXNzOiBQYXlQYWxGYXN0bGFuZVNoaXBwaW5nQWRkcmVzcztcbiAgICBjYXJkOiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUHJvZmlsZU5hbWUge1xuICAgIGZ1bGxOYW1lOiBzdHJpbmc7XG4gICAgZmlyc3ROYW1lPzogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUHJvZmlsZVBob25lIHtcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nO1xuICAgIG5hdGlvbmFsTnVtYmVyOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVTaGlwcGluZ0FkZHJlc3Mge1xuICAgIG5hbWU6IFBheVBhbEZhc3RsYW5lUHJvZmlsZU5hbWU7XG4gICAgcGhvbmVOdW1iZXI6IFBheVBhbEZhc3RsYW5lUHJvZmlsZVBob25lO1xuICAgIGFkZHJlc3M6IFBheVBhbEZhc3RsYW5lQWRkcmVzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkIHtcbiAgICBpZDogc3RyaW5nOyAvLyBub25jZSAvIHRva2VuXG4gICAgcGF5bWVudFNvdXJjZTogUGF5UGFsRmFzdGxhbmVQYXltZW50U291cmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUGF5bWVudFNvdXJjZSB7XG4gICAgY2FyZDogUGF5UGFsRmFzdGxhbmVDYXJkU291cmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQ2FyZFNvdXJjZSB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnk6IHN0cmluZzsgLy8gXCJZWVlZLU1NXCJcbiAgICBsYXN0RGlnaXRzOiBzdHJpbmc7IC8vIFwiMTExMVwiXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJpbGxpbmdBZGRyZXNzOiBQYXlQYWxGYXN0bGFuZUFkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVBZGRyZXNzIHtcbiAgICBjb21wYW55Pzogc3RyaW5nO1xuICAgIGFkZHJlc3NMaW5lMTogc3RyaW5nO1xuICAgIGFkZHJlc3NMaW5lMj86IHN0cmluZztcbiAgICBhZG1pbkFyZWExOiBzdHJpbmc7IC8vIFN0YXRlXG4gICAgYWRtaW5BcmVhMjogc3RyaW5nOyAvLyBDaXR5XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGFNYXBwaW5nUmVzdWx0IHtcbiAgICBhdXRoZW50aWNhdGlvblN0YXRlOiBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgYWRkcmVzc2VzOiBDdXN0b21lckFkZHJlc3NbXTtcbiAgICBiaWxsaW5nQWRkcmVzcz86IEN1c3RvbWVyQWRkcmVzcztcbiAgICBzaGlwcGluZ0FkZHJlc3M/OiBDdXN0b21lckFkZHJlc3M7XG4gICAgaW5zdHJ1bWVudHM6IENhcmRJbnN0cnVtZW50W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24ge1xuICAgIHJvb3Q/OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk/OiBzdHJpbmc7XG4gICAgICAgIGVycm9yQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplQmFzZT86IHN0cmluZztcbiAgICAgICAgcGFkZGluZz86IHN0cmluZztcbiAgICAgICAgcHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIH07XG4gICAgaW5wdXQ/OiB7XG4gICAgICAgIGJvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICAgICAgYm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvY3VzQm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIHRleHRDb2xvckJhc2U/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0b2dnbGU/OiB7XG4gICAgICAgIGNvbG9yUHJpbWFyeT86IHN0cmluZztcbiAgICAgICAgY29sb3JTZWNvbmRhcnk/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0ZXh0Pzoge1xuICAgICAgICBib2R5Pzoge1xuICAgICAgICAgICAgY29sb3I/OiBzdHJpbmc7XG4gICAgICAgICAgICBmb250U2l6ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgY2FwdGlvbj86IHtcbiAgICAgICAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgICAgICAgZm9udFNpemU/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBicmFuZGluZz86IHN0cmluZzsgLy8gJ2xpZ2h0JyB8ICdkYXJrJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lUHJvZmlsZSB7XG4gICAgc2hvd0NhcmRTZWxlY3RvcigpOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lQ2FyZFNlbGVjdG9yUmVzcG9uc2U+O1xuICAgIHNob3dTaGlwcGluZ0FkZHJlc3NTZWxlY3RvcigpOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzU2VsZWN0b3JSZXNwb25zZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVTaGlwcGluZ0FkZHJlc3NTZWxlY3RvclJlc3BvbnNlIHtcbiAgICBzZWxlY3Rpb25DaGFuZ2VkOiBib29sZWFuO1xuICAgIHNlbGVjdGVkQWRkcmVzczogUGF5UGFsRmFzdGxhbmVTaGlwcGluZ0FkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVDYXJkU2VsZWN0b3JSZXNwb25zZSB7XG4gICAgc2VsZWN0aW9uQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBzZWxlY3RlZENhcmQ6IFBheVBhbEZhc3RsYW5lUHJvZmlsZUNhcmQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50TWV0aG9kcyB7XG4gICAgZ2V0UGF5bWVudFRva2VuKFxuICAgICAgICBvcHRpb25zOiBQYXlQYWxGYXN0bGFuZUdldFBheW1lbnRUb2tlbk9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkPjtcbiAgICByZW5kZXIoZWxlbWVudDogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUdldFBheW1lbnRUb2tlbk9wdGlvbnMge1xuICAgIG5hbWU/OiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVOYW1lO1xuICAgIGJpbGxpbmdBZGRyZXNzPzogUGF5UGFsRmFzdGxhbmVBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE9wdGlvbnMge1xuICAgIGZpZWxkcz86IFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudEZpZWxkcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUNhcmRDb21wb25lbnRGaWVsZHMge1xuICAgIGNhcmRob2xkZXJOYW1lPzoge1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xuICAgIHBob25lTnVtYmVyPzoge1xuICAgICAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEZhc3RsYW5lRXZlbnRzIHtcbiAgICBhcG1TZWxlY3RlZDogKG9wdGlvbnM6IFBheVBhbEZhc3RsYW5lQXBtU2VsZWN0ZWRFdmVudE9wdGlvbnMpID0+IHZvaWQ7XG4gICAgZW1haWxTdWJtaXR0ZWQ6IChvcHRpb25zOiBQYXlQYWxGYXN0bGFuZUVtYWlsRW50ZXJlZEV2ZW50T3B0aW9ucykgPT4gdm9pZDtcbiAgICBvcmRlclBsYWNlZDogKG9wdGlvbnM6IFBheVBhbEZhc3RsYW5lT3JkZXJQbGFjZWRFdmVudE9wdGlvbnMpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVFdmVudENvbW1vbk9wdGlvbnMge1xuICAgIGNvbnRleHRfdHlwZTogJ2NzX2lkJztcbiAgICBjb250ZXh0X2lkOiBzdHJpbmc7IC8vIGNoZWNrb3V0IHNlc3Npb24gaWRcbiAgICBwYWdlX3R5cGU6ICdjaGVja291dF9wYWdlJztcbiAgICBwYWdlX25hbWU6IHN0cmluZzsgLy8gdGl0bGUgb2YgdGhlIGNoZWNrb3V0IGluaXRpYXRpb24gcGFnZVxuICAgIHBhcnRuZXJfbmFtZTogJ2JpZ2MnO1xuICAgIHVzZXJfdHlwZTogJ3N0b3JlX21lbWJlcicgfCAnc3RvcmVfZ3Vlc3QnOyAvLyB0eXBlIG9mIHRoZSB1c2VyIG9uIHRoZSBtZXJjaGFudCBzaXRlXG4gICAgc3RvcmVfaWQ6IHN0cmluZztcbiAgICBtZXJjaGFudF9uYW1lOiBzdHJpbmc7XG4gICAgZXhwZXJpbWVudDogc3RyaW5nOyAvLyBzdHJpbmdpZnkgSlNPTiBvYmplY3QgXCJbeyB0cmVhdG1lbnRfZ3JvdXA6ICd0ZXN0JyB8ICdjb250cm9sJyB9XVwiXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVBcG1TZWxlY3RlZEV2ZW50T3B0aW9ucyBleHRlbmRzIFBheVBhbEZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICBhcG1fc2hvd246ICcwJyB8ICcxJzsgLy8gYWx0ZXJuYXRlIHBheW1lbnQgc2hvd24gb24gdGhlIGNoZWNrb3V0IHBhZ2VcbiAgICBhcG1fbGlzdDogc3RyaW5nOyAvLyBsaXN0IG9mIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIGNoZWNrb3V0IHBhZ2VcbiAgICBhcG1fc2VsZWN0ZWQ6IHN0cmluZzsgLy8gYWx0ZXJuYXRlIHBheW1lbnQgbWV0aG9kIHNlbGVjdGVkIC8gbWV0aG9kSWRcbiAgICBhcG1fbG9jYXRpb246ICdwcmUtZW1haWwgc2VjdGlvbicgfCAncGF5bWVudCBzZWN0aW9uJzsgLy8gcGxhY2VtZW50IG9mIEFQTSwgd2hldGhlciBpdCBiZSBhYm92ZSB0aGUgZW1haWwgZW50cnkgb3IgaW4gdGhlIHJhZGlvIGJ1dHRvbnNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZUVtYWlsRW50ZXJlZEV2ZW50T3B0aW9ucyBleHRlbmRzIFBheVBhbEZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICB1c2VyX2VtYWlsX3NhdmVkOiBib29sZWFuOyAvLyBzaG93cyB3aGV0aGVyIGNoZWNrb3V0IHdhcyBsb2FkZWQgd2l0aCBvciB3aXRob3V0IGEgc2F2ZWQgZW1haWxcbiAgICBhcG1fc2hvd246ICcwJyB8ICcxJzsgLy8gYWx0ZXJuYXRlIHBheW1lbnQgc2hvd24gb24gdGhlIGNoZWNrb3V0IHBhZ2VcbiAgICBhcG1fbGlzdDogc3RyaW5nOyAvLyBsaXN0IG9mIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIGNoZWNrb3V0IHBhZ2UgJ2FwcGxlcGF5LGdvb2dsZXBheSxwYXlwYWwnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsRmFzdGxhbmVPcmRlclBsYWNlZEV2ZW50T3B0aW9ucyBleHRlbmRzIFBheVBhbEZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICBzZWxlY3RlZF9wYXltZW50X21ldGhvZDogc3RyaW5nO1xuICAgIGN1cnJlbmN5X2NvZGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxGYXN0bGFuZVBheW1lbnRGb3JtYXR0ZWRQYXlsb2FkIHtcbiAgICBwYXlwYWxfY29ubmVjdF90b2tlbj86IHtcbiAgICAgICAgb3JkZXJfaWQ/OiBzdHJpbmc7XG4gICAgICAgIHRva2VuOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwYXlwYWxfZmFzdGxhbmVfdG9rZW4/OiB7XG4gICAgICAgIG9yZGVyX2lkPzogc3RyaW5nO1xuICAgICAgICB0b2tlbjogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFzdGxhbmVTdHlsZXNTZXR0aW5ncyB7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NFcnJvckNvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRm9udEZhbWlseT86IHN0cmluZztcbiAgICBmYXN0bGFuZVJvb3RTZXR0aW5nc1BhZGRpbmc/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NQcmltYXJ5Q29sb3I/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyUmFkaXVzPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2U/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzRm9jdXNCb3JkZXJCYXNlPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclByaW1hcnk/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVUb2dnbGVTZXR0aW5nc0NvbG9yU2Vjb25kYXJ5Pzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0NvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0ZvbnRTaXplPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0ZvbnRTaXplPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0NvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lQnJhbmRpbmdTZXR0aW5ncz86IHN0cmluZztcbn1cbiIsImltcG9ydCB7IFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRNZXRob2QsXG4gICAgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQge1xuICAgIFBheVBhbENvbW1lcmNlSG9zdFdpbmRvdyxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBQYXlQYWxGYXN0bGFuZVNkayxcbiAgICBQYXlQYWxHb29nbGVQYXlTZGssXG4gICAgUGF5UGFsTWVzc2FnZXNTZGssXG4gICAgUGF5UGFsU2RrQ29uZmlnLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlU2RrIHtcbiAgICBwcml2YXRlIHdpbmRvdzogUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzY3JpcHRMb2FkZXI6IFNjcmlwdExvYWRlcikge1xuICAgICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYXlQYWxGYXN0bGFuZVNkayhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICAgICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lU2RrPiB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsRmFzdGxhbmVTZGspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0UGF5UGFsRmFzdGxhbmVTZGtDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFBheVBhbFNkayhjb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lU2RrKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucGF5cGFsRmFzdGxhbmVTZGs7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGF5UGFsR29vZ2xlUGF5U2RrKFxuICAgICAgICBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPixcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmcsXG4gICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2U/OiBib29sZWFuLFxuICAgICAgICBmb3JjZUxvYWQ/OiBib29sZWFuLFxuICAgICk6IFByb21pc2U8UGF5UGFsR29vZ2xlUGF5U2RrPiB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsR29vZ2xlUGF5IHx8IGZvcmNlTG9hZCkge1xuICAgICAgICAgICAgY29uc3QgcGF5cGFsU2RrU2NyaXB0Q29uZmlnID0gdGhpcy5nZXRQYXlQYWxHb29nbGVQYXlTZGtTY3JpcHRDb25maWdPclRocm93KFxuICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2UsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlQYWxTZGsocGF5cGFsU2RrU2NyaXB0Q29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsR29vZ2xlUGF5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvdy5wYXlwYWxHb29nbGVQYXk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGF5UGFsQXBtc1NkayhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEFwbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuZ2V0UGF5UGFsQXBtU2RrQ29uZmlndXJhdGlvbihwYXltZW50TWV0aG9kLCBjdXJyZW5jeUNvZGUpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlQYWxTZGsoY29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxBcG1zKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53aW5kb3cucGF5cGFsQXBtcztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYXlQYWxNZXNzYWdlcyhcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICk6IFByb21pc2U8UGF5UGFsTWVzc2FnZXNTZGs+IHtcbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdy5wYXlwYWxNZXNzYWdlcykge1xuICAgICAgICAgICAgY29uc3QgcGF5cGFsU2RrTWVzc2FnZXNDb25maWcgPSB0aGlzLmdldFBheVBhbFNka01lc3NhZ2VzQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFBheVBhbFNkayhwYXlwYWxTZGtNZXNzYWdlc0NvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbE1lc3NhZ2VzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLndpbmRvdy5wYXlwYWxNZXNzYWdlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqICBsb2FkUGF5UGFsU2RrIGlzIGEgcGF5cGFsIHNkayBzY3JpcHQgbG9hZGVyXG4gICAgICogIHdoaWNoIGxvYWRzIHBheXBhbCBzZGsgYmFzZWQgb24gcHJvdmlkZWQgY29uZmlndXJhdGlvblxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkUGF5UGFsU2RrKHsgb3B0aW9ucywgYXR0cmlidXRlcyB9OiBQYXlQYWxTZGtDb25maWcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0T3B0aW9ucyA9IHRoaXMudHJhbnNmb3JtQ29uZmlnPFBheVBhbFNka0NvbmZpZ1snb3B0aW9ucyddPihvcHRpb25zKTtcbiAgICAgICAgY29uc3Qgc2NyaXB0QXR0cmlidXRlcyA9IHRoaXMudHJhbnNmb3JtQ29uZmlnPFBheVBhbFNka0NvbmZpZ1snYXR0cmlidXRlcyddPihhdHRyaWJ1dGVzKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxTZGtVcmwgPSAnaHR0cHM6Ly93d3cucGF5cGFsLmNvbS9zZGsvanMnO1xuICAgICAgICBjb25zdCBzY3JpcHRRdWVyeSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoc2NyaXB0T3B0aW9ucykudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3Qgc2NyaXB0U3JjID0gYCR7cGF5cGFsU2RrVXJsfT8ke3NjcmlwdFF1ZXJ5fWA7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zY3JpcHRMb2FkZXIubG9hZFNjcmlwdChzY3JpcHRTcmMsIHtcbiAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgYXR0cmlidXRlczogc2NyaXB0QXR0cmlidXRlcyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDb25maWd1cmF0aW9ucyBzZWN0aW9uXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFBheVBhbEZhc3RsYW5lU2RrQ29uZmlndXJhdGlvbihcbiAgICAgICAgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4sXG4gICAgICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nLFxuICAgICAgICBzZXNzaW9uSWQ6IHN0cmluZyxcbiAgICApOiBQYXlQYWxTZGtDb25maWcge1xuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXphdGlvbkRhdGEgfHwgIWluaXRpYWxpemF0aW9uRGF0YS5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBpbnRlbnQsIGNsaWVudElkLCBtZXJjaGFudElkLCBhdHRyaWJ1dGlvbklkIH0gPSBpbml0aWFsaXphdGlvbkRhdGE7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnY2xpZW50LWlkJzogY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50LWlkJzogbWVyY2hhbnRJZCxcbiAgICAgICAgICAgICAgICBjb21taXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAgICAgICAgICAnZmFzdGxhbmUnLFxuICAgICAgICAgICAgICAgICAgICAnYnV0dG9ucycsXG4gICAgICAgICAgICAgICAgICAgICdwYXltZW50LWZpZWxkcycsXG4gICAgICAgICAgICAgICAgICAgICdob3N0ZWQtZmllbGRzJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RocmVlLWRvbWFpbi1zZWN1cmUnLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICdkYXRhLWNsaWVudC1tZXRhZGF0YS1pZCc6IHNlc3Npb25JZC5yZXBsYWNlKC8tL2csICcnKSxcbiAgICAgICAgICAgICAgICAnZGF0YS1uYW1lc3BhY2UnOiAncGF5cGFsRmFzdGxhbmVTZGsnLFxuICAgICAgICAgICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnOiBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgICAgICdkYXRhLXNkay1jbGllbnQtdG9rZW4nOiBjbGllbnRUb2tlbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQYXlQYWxHb29nbGVQYXlTZGtTY3JpcHRDb25maWdPclRocm93KFxuICAgICAgICBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPixcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmcsXG4gICAgICAgIGluaXRpYWxpemVzT25DaGVja291dFBhZ2UgPSB0cnVlLFxuICAgICk6IFBheVBhbFNka0NvbmZpZyB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gcGF5bWVudE1ldGhvZDtcblxuICAgICAgICBpZiAoIWluaXRpYWxpemF0aW9uRGF0YSB8fCAhaW5pdGlhbGl6YXRpb25EYXRhLmNsaWVudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgICAgIG1lcmNoYW50SWQsXG4gICAgICAgICAgICBidXllckNvdW50cnksXG4gICAgICAgICAgICBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQsXG4gICAgICAgICAgICBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlLFxuICAgICAgICB9ID0gaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIGNvbnN0IGNvbW1pdCA9IGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkIHx8IGluaXRpYWxpemVzT25DaGVja291dFBhZ2U7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnY2xpZW50LWlkJzogY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50LWlkJzogbWVyY2hhbnRJZCxcbiAgICAgICAgICAgICAgICBjb21taXQsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogWydnb29nbGVwYXknXSxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgICAgIGludGVudCxcbiAgICAgICAgICAgICAgICAuLi4oaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSAmJiB7ICdidXllci1jb3VudHJ5JzogYnV5ZXJDb3VudHJ5IH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1wYXJ0bmVyLWF0dHJpYnV0aW9uLWlkJzogYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1jbGllbnQtdG9rZW4nOiBjbGllbnRUb2tlbixcbiAgICAgICAgICAgICAgICAnZGF0YS1uYW1lc3BhY2UnOiAncGF5cGFsR29vZ2xlUGF5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQYXlQYWxBcG1TZGtDb25maWd1cmF0aW9uKFxuICAgICAgICBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPixcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmcsXG4gICAgKTogUGF5UGFsU2RrQ29uZmlnIHtcbiAgICAgICAgY29uc3QgeyBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFpbml0aWFsaXphdGlvbkRhdGEgfHwgIWluaXRpYWxpemF0aW9uRGF0YS5jbGllbnRJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgY2xpZW50SWQsXG4gICAgICAgICAgICBtZXJjaGFudElkLFxuICAgICAgICAgICAgYnV5ZXJDb3VudHJ5LFxuICAgICAgICAgICAgYXR0cmlidXRpb25JZCxcbiAgICAgICAgICAgIGlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUsXG4gICAgICAgICAgICBhdmFpbGFibGVBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzID0gW10sXG4gICAgICAgICAgICBlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyA9IFtdLFxuICAgICAgICB9ID0gaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIGNvbnN0IGVuYWJsZUFQTXNGdW5kaW5nID0gZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHM7XG4gICAgICAgIGNvbnN0IGRpc2FibGVBUE1zRnVuZGluZyA9IGF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMuZmlsdGVyKFxuICAgICAgICAgICAgKGFwbTogc3RyaW5nKSA9PiAhZW5hYmxlZEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMuaW5jbHVkZXMoYXBtKSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICdjbGllbnQtaWQnOiBjbGllbnRJZCxcbiAgICAgICAgICAgICAgICAnbWVyY2hhbnQtaWQnOiBtZXJjaGFudElkLFxuICAgICAgICAgICAgICAgICdlbmFibGUtZnVuZGluZyc6IGVuYWJsZUFQTXNGdW5kaW5nLmxlbmd0aCA+IDAgPyBlbmFibGVBUE1zRnVuZGluZyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAnZGlzYWJsZS1mdW5kaW5nJzogZGlzYWJsZUFQTXNGdW5kaW5nLmxlbmd0aCA+IDAgPyBkaXNhYmxlQVBNc0Z1bmRpbmcgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tbWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFsnYnV0dG9ucycsICdwYXltZW50LWZpZWxkcyddLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgICAgIC4uLihpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlICYmIHsgJ2J1eWVyLWNvdW50cnknOiBidXllckNvdW50cnkgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnOiBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgICAgICdkYXRhLW5hbWVzcGFjZSc6ICdwYXlwYWxBcG1zJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRQYXlQYWxTZGtNZXNzYWdlc0NvbmZpZ3VyYXRpb24oXG4gICAgICAgIHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+LFxuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZyxcbiAgICApOiBQYXlQYWxTZGtDb25maWcge1xuICAgICAgICBjb25zdCB7IGluaXRpYWxpemF0aW9uRGF0YSB9ID0gcGF5bWVudE1ldGhvZDtcblxuICAgICAgICBpZiAoIWluaXRpYWxpemF0aW9uRGF0YSB8fCAhaW5pdGlhbGl6YXRpb25EYXRhLmNsaWVudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGNsaWVudElkLCBtZXJjaGFudElkLCBhdHRyaWJ1dGlvbklkLCBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlLCBidXllckNvdW50cnkgfSA9XG4gICAgICAgICAgICBpbml0aWFsaXphdGlvbkRhdGE7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAnY2xpZW50LWlkJzogY2xpZW50SWQsXG4gICAgICAgICAgICAgICAgJ21lcmNoYW50LWlkJzogbWVyY2hhbnRJZCxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBbJ21lc3NhZ2VzJ10sXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICAuLi4oaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSAmJiB7ICdidXllci1jb3VudHJ5JzogYnV5ZXJDb3VudHJ5IH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAnZGF0YS1uYW1lc3BhY2UnOiAncGF5cGFsTWVzc2FnZXMnLFxuICAgICAgICAgICAgICAgICdkYXRhLXBhcnRuZXItYXR0cmlidXRpb24taWQnOiBhdHRyaWJ1dGlvbklkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFV0aWxzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgdHJhbnNmb3JtQ29uZmlnPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oY29uZmlnOiBUKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgICAgIGxldCB0cmFuc2Zvcm1lZENvbmZpZyA9IHt9O1xuXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpIGFzIEFycmF5PGtleW9mIFQ+O1xuXG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbmZpZ1trZXldO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIHZhbHVlID09PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdmFsdWUgPT09ICcnIHx8XG4gICAgICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJhbnNmb3JtZWRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgLi4udHJhbnNmb3JtZWRDb25maWcsXG4gICAgICAgICAgICAgICAgW2tleV06IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRDb25maWc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlU2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VTZGsgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2Utc2RrJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsoKTogUGF5UGFsQ29tbWVyY2VTZGsge1xuICAgIHJldHVybiBuZXcgUGF5UGFsQ29tbWVyY2VTZGsoY3JlYXRlU2NyaXB0TG9hZGVyKCkpO1xufVxuIiwiaW50ZXJmYWNlIENvb2tpZU9wdGlvbnMge1xuICAgIGV4cGlyZXM/OiBEYXRlO1xuICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgZG9tYWluPzogc3RyaW5nO1xuICAgIHNlY3VyZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvb2tpZVN0b3JhZ2Uge1xuICAgIHN0YXRpYyBnZXQobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IGNvb2tpZUtleSA9IGAke2VuY29kZVVSSUNvbXBvbmVudChgJHtuYW1lfWApfT1gO1xuICAgICAgICBjb25zdCBjb29raWUgPSBkb2N1bWVudC5jb29raWU7XG5cbiAgICAgICAgbGV0IHZhbHVlID0gbnVsbDtcblxuICAgICAgICBjb25zdCBmaXJzdEluZGV4ID0gY29va2llLmluZGV4T2YoY29va2llS2V5KTtcblxuICAgICAgICBpZiAoZmlyc3RJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBsZXQgbGFzdEluZGV4ID0gY29va2llLmluZGV4T2YoJzsnLCBmaXJzdEluZGV4KTtcblxuICAgICAgICAgICAgaWYgKGxhc3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBjb29raWUubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKGZpcnN0SW5kZXggKyBjb29raWVLZXkubGVuZ3RoLCBsYXN0SW5kZXgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0KG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgb3B0aW9uczogQ29va2llT3B0aW9ucyA9IHsgc2VjdXJlOiB0cnVlIH0pIHtcbiAgICAgICAgbGV0IGNvb2tpZVRleHQgPSBgJHtlbmNvZGVVUklDb21wb25lbnQobmFtZSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gO1xuXG4gICAgICAgIGNvbnN0IHsgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGV4cGlyZXMpIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgZXhwaXJlcz0ke2V4cGlyZXMudG9VVENTdHJpbmcoKX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIC8vIGluZm86IGRlZmF1bHQgY29va2llIGV4cGlyYXRpb24gdGltZSBhZnRlciBzZXR1cFxuICAgICAgICAgICAgY29uc3QgbWludXRlcyA9IDYwO1xuXG4gICAgICAgICAgICBub3cuc2V0VGltZShub3cuZ2V0VGltZSgpICsgbWludXRlcyAqIDYwICogMTAwMCk7XG5cbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgZXhwaXJlcz0ke25vdy50b1VUQ1N0cmluZygpfWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgY29va2llVGV4dCArPSBgOyBwYXRoPSR7cGF0aH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29va2llVGV4dCArPSBgOyBkb21haW49JHtkb21haW59YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUpIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gJzsgc2VjdXJlJztcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZVRleHQ7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlbW92ZShuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBDb29raWVPcHRpb25zKSB7XG4gICAgICAgIENvb2tpZVN0b3JhZ2Uuc2V0KG5hbWUsICcnLCB7IGV4cGlyZXM6IG5ldyBEYXRlKDApLCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzRXF1YWwsIG9taXQgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgQ2FyZEluc3RydW1lbnQsXG4gICAgQ3VzdG9tZXJBZGRyZXNzLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxuICAgIFVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgQ29va2llU3RvcmFnZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvc3RvcmFnZSc7XG5cbmltcG9ydCB7XG4gICAgUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93LFxuICAgIFBheVBhbEZhc3RsYW5lLFxuICAgIFBheVBhbEZhc3RsYW5lQWRkcmVzcyxcbiAgICBQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uUmVzdWx0LFxuICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZSxcbiAgICBQYXlQYWxGYXN0bGFuZUxvb2t1cEN1c3RvbWVyQnlFbWFpbFJlc3VsdCxcbiAgICBQYXlQYWxGYXN0bGFuZVByb2ZpbGVDYXJkLFxuICAgIFBheVBhbEZhc3RsYW5lUHJvZmlsZU5hbWUsXG4gICAgUGF5UGFsRmFzdGxhbmVQcm9maWxlUGhvbmUsXG4gICAgUGF5UGFsRmFzdGxhbmVQcm9maWxlVG9CY0N1c3RvbWVyRGF0YU1hcHBpbmdSZXN1bHQsXG4gICAgUGF5UGFsRmFzdGxhbmVTZGssXG4gICAgUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24sXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzIHtcbiAgICBwcml2YXRlIHdpbmRvdzogUGF5UGFsQ29tbWVyY2VIb3N0V2luZG93O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMud2luZG93ID0gd2luZG93O1xuICAgIH1cblxuICAgIGFzeW5jIGluaXRpYWxpemVQYXlQYWxGYXN0bGFuZShcbiAgICAgICAgcGF5cGFsRmFzdGxhbmVTZGs6IFBheVBhbEZhc3RsYW5lU2RrLFxuICAgICAgICBpc1Rlc3RNb2RlRW5hYmxlZDogYm9vbGVhbixcbiAgICAgICAgc3R5bGVzPzogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4gICAgKTogUHJvbWlzZTxQYXlQYWxGYXN0bGFuZT4ge1xuICAgICAgICBpZiAoaXNUZXN0TW9kZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZmFzdGxhbmVFbnYnLCAnc2FuZGJveCcpO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdheG9FbnYnLCAnc2FuZGJveCcpOyAvLyBUT0RPOiByZW1vdmUgaWYgdGhpcyBrZXkgZG9lcyBub3QgdXNlIG9uIFBheVBhbCBzaWRlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0U3R5bGVzID0ge1xuICAgICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yUHJpbWFyeTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy53aW5kb3cucGF5cGFsRmFzdGxhbmUgPSBhd2FpdCBwYXlwYWxGYXN0bGFuZVNkay5GYXN0bGFuZSh7XG4gICAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMgfHwgZGVmYXVsdFN0eWxlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lO1xuICAgIH1cblxuICAgIGdldFBheVBhbEZhc3RsYW5lT3JUaHJvdygpOiBQYXlQYWxGYXN0bGFuZSB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3cucGF5cGFsRmFzdGxhbmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMud2luZG93LnBheXBhbEZhc3RsYW5lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogRGV0ZWN0cyB0aGUgY3VzdG9tZXIgdG8gUGF5UGFsIEZhc3RsYW5lIHJlbGF0aW9uIGFuZFxuICAgICAqIHJldHVybnMgY3VzdG9tZXJDb250ZXh0SWQgdG8gdXNlIGl0IGZvciBhdXRoZW50aWNhdGlvblxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgbG9va3VwQ3VzdG9tZXJPclRocm93KGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPFBheVBhbEZhc3RsYW5lTG9va3VwQ3VzdG9tZXJCeUVtYWlsUmVzdWx0PiB7XG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lID0gdGhpcy5nZXRQYXlQYWxGYXN0bGFuZU9yVGhyb3coKTtcblxuICAgICAgICByZXR1cm4gcGF5cGFsRmFzdGxhbmUuaWRlbnRpdHkubG9va3VwQ3VzdG9tZXJCeUVtYWlsKGVtYWlsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRyaWdnZXJzIGF1dGhlbnRpY2F0aW9uIGZsb3cgKHNob3dzIE9UUCBwb3B1cCkgaWYgdGhlIGN1c3RvbWVyIHJlY29nbmlzZWQgYXMgUGF5UGFsIEZhc3RsYW5lIHVzZXJcbiAgICAgKiBhbmQgcmV0dXJucyBQYXlQYWwgRmFzdGxhbmUgUHJvZmlsZSBkYXRhIHRvIHVzZSBpdCBpbiBCQyBjaGVja291dFxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgdHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3coXG4gICAgICAgIGN1c3RvbWVyQ29udGV4dElkPzogc3RyaW5nLFxuICAgICk6IFByb21pc2U8UGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblJlc3VsdD4ge1xuICAgICAgICBpZiAoIWN1c3RvbWVyQ29udGV4dElkKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxGYXN0bGFuZSA9IHRoaXMuZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgcmV0dXJuIHBheXBhbEZhc3RsYW5lLmlkZW50aXR5LnRyaWdnZXJBdXRoZW50aWNhdGlvbkZsb3coY3VzdG9tZXJDb250ZXh0SWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogJ3VwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQnIG1ldGhvZCBpcyB1c2VkIHRvOlxuICAgICAqIC0gc2V0IHNlc3Npb24gaWQgYWZ0ZXIgdXNlciB3YXMgYXV0aGVudGljYXRlZCAob3IgdW5yZWNvZ25pc2VkKSB0byB0cmlnZ2VyIGF1dGhlbnRpY2F0aW9uIGFmdGVyIHBhZ2UgcmVmcmVzaFxuICAgICAqXG4gICAgICogRmxvdyBpbmZvOlxuICAgICAqIElmIHVzZXIgdW5yZWNvZ25pc2VkIHRoZW4gdGhlIGxvb2t1cCBtZXRob2Qgd2lsbCBiZSB3b3JraW5nIGJ1dCB0aGUgT1RQIHdpbGwgbm90IGJlIHNob3duXG4gICAgICogSWYgdXNlciByZWNvZ25pc2VkIGFuZCBub3QgY2FuY2VsZWQgdGhlbiB0aGUgbG9va3VwIG1ldGhvZCB3aWxsIGJlIHdvcmtpbmcgYW5kIHRoZSBPVFAgd2lsbCBiZSBzaG93biBvbmx5IGlmIG5lZWRlZFxuICAgICAqIElmIHVzZXIgY2FuY2VscyB0aGUgT1BUIHRoZW4gT1RQIHdpbGwgbm90IGJlIHRyaWdnZXJlZCBhZnRlciBwYWdlIHJlZnJlc2hcbiAgICAgKlxuICAgICAqL1xuICAgIHVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQoc2Vzc2lvbklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZXhwaXJlcyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGV4cGlyZXMuc2V0RGF0ZShleHBpcmVzLmdldERhdGUoKSArIDE0KTsgLy8gMiB3ZWVrcyBleHBpcnlcblxuICAgICAgICBjb25zdCBjb29raWVzT3B0aW9uID0ge1xuICAgICAgICAgICAgZXhwaXJlcyxcbiAgICAgICAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICBDb29raWVTdG9yYWdlLnNldCgnYmMtZmFzdGxhbmUtc2Vzc2lvbklkJywgc2Vzc2lvbklkLCBjb29raWVzT3B0aW9uKTtcbiAgICB9XG5cbiAgICByZW1vdmVTdG9yYWdlU2Vzc2lvbklkKCk6IHZvaWQge1xuICAgICAgICBDb29raWVTdG9yYWdlLnJlbW92ZSgnYmMtZmFzdGxhbmUtc2Vzc2lvbklkJyk7XG4gICAgfVxuXG4gICAgZ2V0U3RvcmFnZVNlc3Npb25JZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gQ29va2llU3RvcmFnZS5nZXQoJ2JjLWZhc3RsYW5lLXNlc3Npb25JZCcpIHx8ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogJ21hcFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGEnIG1ldGhvZCBpcyByZXNwb25zaWJsZSBmb3I6XG4gICAgICogLSBtYXBwaW5nIFBheVBhbCBGYXN0bGFuZSBQcm9maWxlIGRhdGEgdG8gQkMgZGF0YSBzaGFwZVxuICAgICAqIC0gcmV0dXJuaW5nIG1hcHBlZCBkYXRhIHRvIHVzZSBmb3IgdXBkYXRpbmcgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIgc3RhdGUgYW5kXG4gICAgICogdXBkYXRlIHNoaXBwaW5nIGFuZCBiaWxsaW5nIGFkZHJlc3Nlc1xuICAgICAqXG4gICAgICovXG4gICAgbWFwUGF5UGFsRmFzdGxhbmVQcm9maWxlVG9CY0N1c3RvbWVyRGF0YShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQ6IFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgKTogUGF5UGFsRmFzdGxhbmVQcm9maWxlVG9CY0N1c3RvbWVyRGF0YU1hcHBpbmdSZXN1bHQge1xuICAgICAgICBjb25zdCB7IGF1dGhlbnRpY2F0aW9uU3RhdGUsIHByb2ZpbGVEYXRhIH0gPSBhdXRoZW50aWNhdGlvblJlc3VsdDtcblxuICAgICAgICBjb25zdCBwYXlwYWxCaWxsaW5nQWRkcmVzcyA9IHByb2ZpbGVEYXRhPy5jYXJkPy5wYXltZW50U291cmNlPy5jYXJkPy5iaWxsaW5nQWRkcmVzcztcbiAgICAgICAgY29uc3QgcGF5cGFsU2hpcHBpbmdBZGRyZXNzID0gcHJvZmlsZURhdGE/LnNoaXBwaW5nQWRkcmVzcztcbiAgICAgICAgY29uc3QgcGF5cGFsUHJvZmlsZU5hbWUgPSBwcm9maWxlRGF0YT8ubmFtZTtcbiAgICAgICAgY29uc3QgcGF5cGFsSW5zdHJ1bWVudCA9IHByb2ZpbGVEYXRhPy5jYXJkO1xuXG4gICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9IHBheXBhbFNoaXBwaW5nQWRkcmVzc1xuICAgICAgICAgICAgPyB0aGlzLm1hcFBheVBhbFRvQmNBZGRyZXNzKFxuICAgICAgICAgICAgICAgICAgcGF5cGFsU2hpcHBpbmdBZGRyZXNzLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICBwYXlwYWxTaGlwcGluZ0FkZHJlc3MubmFtZSxcbiAgICAgICAgICAgICAgICAgIHBheXBhbFNoaXBwaW5nQWRkcmVzcy5waG9uZU51bWJlcixcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgIHBheXBhbEJpbGxpbmdBZGRyZXNzICYmIHBheXBhbFByb2ZpbGVOYW1lXG4gICAgICAgICAgICAgICAgPyB0aGlzLm1hcFBheVBhbFRvQmNBZGRyZXNzKFxuICAgICAgICAgICAgICAgICAgICAgIHBheXBhbEJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgIHBheXBhbFByb2ZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHBheXBhbFNoaXBwaW5nQWRkcmVzcz8ucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGluc3RydW1lbnRzID0gcGF5cGFsSW5zdHJ1bWVudFxuICAgICAgICAgICAgPyB0aGlzLm1hcFBheVBhbFRvQmNJbnN0cnVtZW50KG1ldGhvZElkLCBwYXlwYWxJbnN0cnVtZW50KVxuICAgICAgICAgICAgOiBbXTtcblxuICAgICAgICBjb25zdCBhZGRyZXNzZXMgPSB0aGlzLmZpbHRlckFkZHJlc3Nlcyhbc2hpcHBpbmdBZGRyZXNzLCBiaWxsaW5nQWRkcmVzc10pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlOlxuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUgfHwgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLlVOUkVDT0dOSVpFRCxcbiAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzLFxuICAgICAgICAgICAgaW5zdHJ1bWVudHMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbWFwUGF5UGFsVG9CY0luc3RydW1lbnQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGluc3RydW1lbnQ6IFBheVBhbEZhc3RsYW5lUHJvZmlsZUNhcmQsXG4gICAgKTogQ2FyZEluc3RydW1lbnRbXSB7XG4gICAgICAgIGNvbnN0IHsgaWQsIHBheW1lbnRTb3VyY2UgfSA9IGluc3RydW1lbnQ7XG4gICAgICAgIGNvbnN0IHsgYnJhbmQsIGV4cGlyeSwgbGFzdERpZ2l0cyB9ID0gcGF5bWVudFNvdXJjZS5jYXJkO1xuXG4gICAgICAgIGNvbnN0IFtleHBpcnlZZWFyLCBleHBpcnlNb250aF0gPSBleHBpcnkuc3BsaXQoJy0nKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJpZ3BheVRva2VuOiBpZCxcbiAgICAgICAgICAgICAgICBicmFuZCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0SW5zdHJ1bWVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXhwaXJ5TW9udGgsXG4gICAgICAgICAgICAgICAgZXhwaXJ5WWVhcixcbiAgICAgICAgICAgICAgICBpaW46ICcnLFxuICAgICAgICAgICAgICAgIGxhc3Q0OiBsYXN0RGlnaXRzLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHRydXN0ZWRTaGlwcGluZ0FkZHJlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvbk1vZGU6IFVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUuUEFOLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXJkJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgbWFwQmNUb1BheVBhbEFkZHJlc3MoYWRkcmVzcz86IEFkZHJlc3MpOiBQYXlQYWxGYXN0bGFuZUFkZHJlc3Mge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcGFueTogYWRkcmVzcz8uY29tcGFueSB8fCAnJyxcbiAgICAgICAgICAgIGFkZHJlc3NMaW5lMTogYWRkcmVzcz8uYWRkcmVzczEgfHwgJycsXG4gICAgICAgICAgICBhZGRyZXNzTGluZTI6IGFkZHJlc3M/LmFkZHJlc3MyIHx8ICcnLFxuICAgICAgICAgICAgYWRtaW5BcmVhMTogYWRkcmVzcz8uc3RhdGVPclByb3ZpbmNlQ29kZSB8fCBhZGRyZXNzPy5zdGF0ZU9yUHJvdmluY2UgfHwgJycsXG4gICAgICAgICAgICBhZG1pbkFyZWEyOiBhZGRyZXNzPy5jaXR5IHx8ICcnLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogYWRkcmVzcz8ucG9zdGFsQ29kZSB8fCAnJyxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBhZGRyZXNzPy5jb3VudHJ5Q29kZSB8fCAnJyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBtYXBQYXlQYWxUb0JjQWRkcmVzcyhcbiAgICAgICAgYWRkcmVzczogUGF5UGFsRmFzdGxhbmVBZGRyZXNzLFxuICAgICAgICBwcm9maWxlTmFtZTogUGF5UGFsRmFzdGxhbmVQcm9maWxlTmFtZSxcbiAgICAgICAgcGhvbmU/OiBQYXlQYWxGYXN0bGFuZVByb2ZpbGVQaG9uZSxcbiAgICAgICAgY3VzdG9tRmllbGRzPzogQ3VzdG9tZXJBZGRyZXNzWydjdXN0b21GaWVsZHMnXSxcbiAgICApOiBDdXN0b21lckFkZHJlc3Mge1xuICAgICAgICBjb25zdCBbZmlyc3ROYW1lLCBsYXN0TmFtZV0gPSBwcm9maWxlTmFtZS5mdWxsTmFtZS5zcGxpdCgnICcpO1xuXG4gICAgICAgIGNvbnN0IHBob25lRGF0YSA9IHtcbiAgICAgICAgICAgIG5hdGlvbmFsTnVtYmVyOiBwaG9uZT8ubmF0aW9uYWxOdW1iZXIgfHwgJycsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogcGhvbmU/LmNvdW50cnlDb2RlIHx8ICcnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHR5cGU6ICdwYXlwYWwtYWRkcmVzcycsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IHByb2ZpbGVOYW1lLmZpcnN0TmFtZSB8fCBmaXJzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICBsYXN0TmFtZTogcHJvZmlsZU5hbWUubGFzdE5hbWUgfHwgbGFzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICBjb21wYW55OiBhZGRyZXNzLmNvbXBhbnkgfHwgJycsXG4gICAgICAgICAgICBhZGRyZXNzMTogYWRkcmVzcy5hZGRyZXNzTGluZTEsXG4gICAgICAgICAgICBhZGRyZXNzMjogYWRkcmVzcy5hZGRyZXNzTGluZTIgfHwgJycsXG4gICAgICAgICAgICBjaXR5OiBhZGRyZXNzLmFkbWluQXJlYTIsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2U6IGFkZHJlc3MuYWRtaW5BcmVhMSxcbiAgICAgICAgICAgIHN0YXRlT3JQcm92aW5jZUNvZGU6IGFkZHJlc3MuYWRtaW5BcmVhMSxcbiAgICAgICAgICAgIGNvdW50cnk6IGFkZHJlc3MuY291bnRyeUNvZGUgfHwgJycsIC8vIFRPRE86IHVwZGF0ZSBjb3VudHJ5IHdpdGggdmFsaWQgbmFtaW5nXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZSB8fCAnJyxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgICAgIHBob25lOiBwaG9uZURhdGEuY291bnRyeUNvZGUgKyBwaG9uZURhdGEubmF0aW9uYWxOdW1iZXIsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IGN1c3RvbUZpZWxkcyB8fCBbXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHJlc3BvbnNpYmxlIGZvciBmaWx0ZXJpbmcgUGF5UGFsIEZhc3RsYW5lIGFkZHJlc3NlcyBpZiB0aGV5IGFyZSB0aGUgc2FtZVxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFkZHJlc3NlcyB0byB1c2UgdGhlbSBmb3Igc2hpcHBpbmcgYW5kL29yIGJpbGxpbmcgYWRkcmVzcyBzZWxlY3Rpb25zXG4gICAgICogc28gdGhlIGN1c3RvbWVyIHdpbGwgYmUgYWJsZSB0byB1c2UgYWRkcmVzc2VzIGZyb20gUGF5UGFsIEZhc3RsYW5lIGluIGNoZWNrb3V0IGZsb3dcbiAgICAgKlxuICAgICAqL1xuICAgIGZpbHRlckFkZHJlc3NlcyhhZGRyZXNzZXM6IEFycmF5PEN1c3RvbWVyQWRkcmVzcyB8IHVuZGVmaW5lZD4pOiBDdXN0b21lckFkZHJlc3NbXSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzZXMucmVkdWNlKFxuICAgICAgICAgICAgKGN1c3RvbWVyQWRkcmVzc2VzOiBDdXN0b21lckFkZHJlc3NbXSwgY3VycmVudEFkZHJlc3M6IEN1c3RvbWVyQWRkcmVzcyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudEFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbWVyQWRkcmVzc2VzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHNhbWVBZGRyZXNzSW5UaGVBcnJheSA9IGN1c3RvbWVyQWRkcmVzc2VzLnNvbWUoKGN1c3RvbWVyQWRkcmVzcykgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VxdWFsQWRkcmVzc2VzKGN1c3RvbWVyQWRkcmVzcywgY3VycmVudEFkZHJlc3MpLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2FtZUFkZHJlc3NJblRoZUFycmF5XG4gICAgICAgICAgICAgICAgICAgID8gY3VzdG9tZXJBZGRyZXNzZXNcbiAgICAgICAgICAgICAgICAgICAgOiBbLi4uY3VzdG9tZXJBZGRyZXNzZXMsIGN1cnJlbnRBZGRyZXNzXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRXF1YWxBZGRyZXNzZXMoXG4gICAgICAgIGZpcnN0QWRkcmVzczogQ3VzdG9tZXJBZGRyZXNzLFxuICAgICAgICBzZWNvbmRBZGRyZXNzOiBDdXN0b21lckFkZHJlc3MsXG4gICAgKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBpc0VxdWFsKHRoaXMubm9ybWFsaXplQWRkcmVzcyhmaXJzdEFkZHJlc3MpLCB0aGlzLm5vcm1hbGl6ZUFkZHJlc3Moc2Vjb25kQWRkcmVzcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzOiBDdXN0b21lckFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG9taXQoYWRkcmVzcywgWydpZCcsICdwaG9uZSddKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzIGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzKCk6IFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyB7XG4gICAgcmV0dXJuIG5ldyBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMoKTtcbn1cbiIsImltcG9ydCB7IG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MsIFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uIH0gZnJvbSAnLi4vaW5kZXgnO1xuXG5mdW5jdGlvbiBpc0ludmFsaWRTdHlsZU9wdGlvbihzdHlsZU9wdGlvbjogdW5rbm93bikge1xuICAgIHJldHVybiB0eXBlb2Ygc3R5bGVPcHRpb24gIT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGYXN0bGFuZVN0eWxlcyhcbiAgICBzdHlsZVNldHRpbmdzPzogRmFzdGxhbmVTdHlsZXNTZXR0aW5ncyxcbiAgICB1aVN0eWxlcz86IFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uLFxuKSB7XG4gICAgaWYgKCF1aVN0eWxlcyAmJiAhc3R5bGVTZXR0aW5ncykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBjbGVhblVwRmFzdGxhbmVTdHlsZXMobWVyZ2VGYXN0bGFuZVN0eWxlcyhzdHlsZVNldHRpbmdzLCB1aVN0eWxlcykpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUZhc3RsYW5lU3R5bGVzKFxuICAgIHN0eWxlU2V0dGluZ3M/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIHVpU3R5bGVzPzogUGF5UGFsRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4pOiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc0JhY2tncm91bmRDb2xvciB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5yb290Py5iYWNrZ3JvdW5kQ29sb3JQcmltYXJ5LFxuICAgICAgICAgICAgZXJyb3JDb2xvcjogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NFcnJvckNvbG9yIHx8IHVpU3R5bGVzPy5yb290Py5lcnJvckNvbG9yLFxuICAgICAgICAgICAgZm9udEZhbWlseTogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NGb250RmFtaWx5IHx8IHVpU3R5bGVzPy5yb290Py5mb250RmFtaWx5LFxuICAgICAgICAgICAgZm9udFNpemVCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemUgfHwgdWlTdHlsZXM/LnJvb3Q/LmZvbnRTaXplQmFzZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyB8fCB1aVN0eWxlcz8ucm9vdD8ucGFkZGluZyxcbiAgICAgICAgICAgIHByaW1hcnlDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc1ByaW1hcnlDb2xvciB8fCB1aVN0eWxlcz8ucm9vdD8ucHJpbWFyeUNvbG9yLFxuICAgICAgICB9LFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cyB8fCB1aVN0eWxlcz8uaW5wdXQ/LmJvcmRlclJhZGl1cyxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlckNvbG9yIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBmb2N1c0JvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0ZvY3VzQm9yZGVyQmFzZSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5pbnB1dD8uZm9jdXNCb3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8uaW5wdXQ/LmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICB0ZXh0Q29sb3JCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UgfHwgdWlTdHlsZXM/LmlucHV0Py50ZXh0Q29sb3JCYXNlLFxuICAgICAgICB9LFxuICAgICAgICB0b2dnbGU6IHtcbiAgICAgICAgICAgIGNvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IHx8IHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yUHJpbWFyeSxcbiAgICAgICAgICAgIGNvbG9yU2Vjb25kYXJ5OlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yU2Vjb25kYXJ5LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0NvbG9yIHx8IHVpU3R5bGVzPy50ZXh0Py5ib2R5Py5jb2xvcixcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzRm9udFNpemUgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmJvZHk/LmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHRpb246IHtcbiAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzQ29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmNhcHRpb24/LmNvbG9yLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZSB8fFxuICAgICAgICAgICAgICAgICAgICB1aVN0eWxlcz8udGV4dD8uY2FwdGlvbj8uZm9udFNpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBicmFuZGluZzogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVCcmFuZGluZ1NldHRpbmdzIHx8IHVpU3R5bGVzPy5icmFuZGluZyxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjbGVhblVwRmFzdGxhbmVTdHlsZXMoc3R5bGVzOiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbikge1xuICAgIGNvbnN0IGZhc3RsYW5lU3R5bGVzOiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbiA9IHt9O1xuXG4gICAgY29uc3Qgcm9vdCA9IG9taXRCeShzdHlsZXMucm9vdCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGlucHV0ID0gb21pdEJ5KHN0eWxlcy5pbnB1dCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IHRvZ2dsZSA9IG9taXRCeShzdHlsZXMudG9nZ2xlLCBpc0ludmFsaWRTdHlsZU9wdGlvbik7XG4gICAgY29uc3QgdGV4dEJvZHkgPSBvbWl0Qnkoc3R5bGVzLnRleHQ/LmJvZHksIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCB0ZXh0Q2FwdGlvbiA9IG9taXRCeShzdHlsZXMudGV4dD8uY2FwdGlvbiwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGJyYW5kaW5nID0gc3R5bGVzLmJyYW5kaW5nO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHJvb3QpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5yb290ID0gcm9vdDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoaW5wdXQpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5pbnB1dCA9IGlucHV0O1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0b2dnbGUpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50b2dnbGUgPSB0b2dnbGU7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRleHRCb2R5KS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dCA9IHt9O1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0LmJvZHkgPSB0ZXh0Qm9keTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModGV4dENhcHRpb24pLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0ID0ge1xuICAgICAgICAgICAgLi4uZmFzdGxhbmVTdHlsZXMudGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dC5jYXB0aW9uID0gdGV4dENhcHRpb247XG4gICAgfVxuXG4gICAgaWYgKGJyYW5kaW5nKSB7XG4gICAgICAgIGZhc3RsYW5lU3R5bGVzLmJyYW5kaW5nID0gYnJhbmRpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhc3RsYW5lU3R5bGVzO1xufVxuIiwiaW1wb3J0IHtcbiAgICBDdXN0b21lckNyZWRlbnRpYWxzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgZ2V0RmFzdGxhbmVTdHlsZXMsXG4gICAgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENvbW1lcmNlU2RrLFxuICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLFxuICAgIFBheVBhbEZhc3RsYW5lU3R5bGVzT3B0aW9uLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtY3VzdG9tZXItaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlU2RrOiBQYXlQYWxDb21tZXJjZVNkayxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHM6IFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZWZhc3RsYW5lIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzVGVzdE1vZGVFbmFibGVkID0gISFwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZTtcblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsRmFzdGxhbmVTZGsgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlU2RrLmdldFBheVBhbEZhc3RsYW5lU2RrKFxuICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2QsXG4gICAgICAgICAgICAgICAgY2FydC5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgICAgIGNhcnQuaWQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5pbml0aWFsaXplUGF5UGFsRmFzdGxhbmUoXG4gICAgICAgICAgICAgICAgcGF5cGFsRmFzdGxhbmVTZGssXG4gICAgICAgICAgICAgICAgaXNUZXN0TW9kZUVuYWJsZWQsXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRGYXN0bGFuZVN0eWxlcyhtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VmYXN0bGFuZSksXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBhZGQgbG9nZ2VyIHRvIGJlIGFibGUgdG8gZGVidWcgaXNzdWVzIGlmIHRoZXJlIGFueVxuICAgICAgICAgICAgLy8gSW5mbzogRG8gbm90IHRocm93IGFueXRoaW5nIGhlcmUgdG8gYXZvaWQgYmxvY2tpbmcgY3VzdG9tZXIgZnJvbSBwYXNzaW5nIGNoZWNrb3V0IGZsb3dcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChcbiAgICAgICAgb3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkLCBjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrLCBtZXRob2RJZCB9ID1cbiAgICAgICAgICAgIG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcImNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2tcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgYW5kIGl0IG11c3QgYmUgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXJPclRocm93KCk7XG5cbiAgICAgICAgaWYgKGN1c3RvbWVyLmlzR3Vlc3QpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJ1blBheVBhbEF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IGFkZCBsb2dnZXIgdG8gYmUgYWJsZSB0byBkZWJ1ZyBpc3N1ZXMgaWYgdGhlcmUgYW55XG4gICAgICAgICAgICAgICAgLy8gSW5mbzogRG8gbm90IHRocm93IGFueXRoaW5nIGhlcmUgdG8gYXZvaWQgYmxvY2tpbmcgY3VzdG9tZXIgZnJvbSBwYXNzaW5nIGNoZWNrb3V0IGZsb3dcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEF1dGhlbnRpY2F0aW9uIGZsb3cgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KG1ldGhvZElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydElkID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5pZDtcbiAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzKCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyRW1haWwgPSBjdXN0b21lcj8uZW1haWwgfHwgYmlsbGluZ0FkZHJlc3M/LmVtYWlsIHx8ICcnO1xuXG4gICAgICAgIGNvbnN0IHsgY3VzdG9tZXJDb250ZXh0SWQgfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLmxvb2t1cEN1c3RvbWVyT3JUaHJvdyhcbiAgICAgICAgICAgIGN1c3RvbWVyRW1haWwsXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgYXV0aGVudGljYXRpb25SZXN1bHQgPVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMudHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3coXG4gICAgICAgICAgICAgICAgY3VzdG9tZXJDb250ZXh0SWQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGlzQXV0aGVudGljYXRpb25GbG93Q2FuY2VsZWQgPVxuICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQuYXV0aGVudGljYXRpb25TdGF0ZSA9PT0gUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLkNBTkNFTEVEO1xuXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQ3VzdG9tZXJEYXRhU3RhdGUobWV0aG9kSWQsIGF1dGhlbnRpY2F0aW9uUmVzdWx0KTtcblxuICAgICAgICBpZiAoaXNBdXRoZW50aWNhdGlvbkZsb3dDYW5jZWxlZCkge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMucmVtb3ZlU3RvcmFnZVNlc3Npb25JZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMudXBkYXRlU3RvcmFnZVNlc3Npb25JZChjYXJ0SWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVDdXN0b21lckRhdGFTdGF0ZShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQ6IFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25TdGF0ZSwgYWRkcmVzc2VzLCBiaWxsaW5nQWRkcmVzcywgc2hpcHBpbmdBZGRyZXNzLCBpbnN0cnVtZW50cyB9ID1cbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLm1hcFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGEoXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlLFxuICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgaW5zdHJ1bWVudHMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChiaWxsaW5nQWRkcmVzcykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGlwcGluZ0FkZHJlc3MgJiYgY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkU3RhdGUgPSBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgICAgIHVwZGF0ZWRTdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICAgICAgY29uc3QgeyBpc0Zhc3RsYW5lU2hpcHBpbmdPcHRpb25BdXRvU2VsZWN0RW5hYmxlZCB9ID1cbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnNpZ25tZW50cyA9IHVwZGF0ZWRTdGF0ZS5nZXRDb25zaWdubWVudHMoKSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyA9IGNvbnNpZ25tZW50c1swXT8uYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgZmlyc3RTaGlwcGluZ09wdGlvbiA9IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9uc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24gPSBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMuZmluZChcbiAgICAgICAgICAgICAgICAob3B0aW9uKSA9PiBvcHRpb24uaXNSZWNvbW1lbmRlZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAocmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiB8fCBmaXJzdFNoaXBwaW5nT3B0aW9uKSAmJlxuICAgICAgICAgICAgICAgIGlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbklkID0gcmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbj8uaWQgfHwgZmlyc3RTaGlwcGluZ09wdGlvbi5pZDtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogRmFzdGxhbmUgc3R5bGluZyBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEZhc3RsYW5lU3R5bGVzKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxjb21tZXJjZWZhc3RsYW5lOiBQYXlQYWxDb21tZXJjZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyB8IHVuZGVmaW5lZCxcbiAgICApOiBQYXlQYWxGYXN0bGFuZVN0eWxlc09wdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCB7IGZhc3RsYW5lU3R5bGVzLCBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIHJldHVybiBnZXRGYXN0bGFuZVN0eWxlcyhcbiAgICAgICAgICAgIGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZCA/IGZhc3RsYW5lU3R5bGVzIDoge30sXG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZWZhc3RsYW5lPy5zdHlsZXMsXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHtcbiAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGssXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZVNkaygpLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMoKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VhY2NlbGVyYXRlZGNoZWNrb3V0JyB9LCAvLyB0aGlzIG1ldGhvZCBpZCB3aWxsIGJlIHByb3ZpZGVkIGZvciB1c2VycyBmcm9tIHRlc3QgZ3JvdXBcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcycgfSwgLy8gdGhpcyBtZXRob2QgaWQgd2lsbCBiZSBwcm92aWRlZCBmb3IgdXNlcnMgZnJvbSBjb250cm9sIGdyb3VwXG5dKTtcbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja0FjdGlvbnMsXG4gICAgQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFNoaXBwaW5nQWRkcmVzc0NoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbiAgICBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtYnV0dG9uLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQnV0dG9uU3RyYXRlZ3kgaW1wbGVtZW50cyBDaGVja291dEJ1dHRvblN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsY29tbWVyY2UsIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBjb25zdCBpc0J1eU5vd0Zsb3cgPSBCb29sZWFuKHBheXBhbGNvbW1lcmNlPy5idXlOb3dJbml0aWFsaXplT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmNvbnRhaW5lcklkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnV5Tm93RmxvdyAmJiAhcGF5cGFsY29tbWVyY2UuY3VycmVuY3lDb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2UuY3VycmVuY3lDb2RlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNCdXlOb3dGbG93ICYmXG4gICAgICAgICAgICB0eXBlb2YgcGF5cGFsY29tbWVyY2UuYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZS5idXlOb3dJbml0aWFsaXplT3B0aW9ucy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHlcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQnV5Tm93Rmxvdykge1xuICAgICAgICAgICAgLy8gSW5mbzogZGVmYXVsdCBjaGVja291dCBzaG91bGQgbm90IGJlIGxvYWRlZCBmb3IgQnV5Tm93IGZsb3csXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGVyZSBpcyBubyBjaGVja291dCBzZXNzaW9uIGF2YWlsYWJsZSBmb3IgdGhhdC5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmZvOiB3ZSBhcmUgdXNpbmcgcHJvdmlkZWQgY3VycmVuY3kgY29kZSBmb3IgYnV5IG5vdyBjYXJ0LFxuICAgICAgICAvLyBiZWNhdXNlIGNoZWNrb3V0IHNlc3Npb24gaXMgbm90IGF2YWlsYWJsZSBiZWZvcmUgYnV5IG5vdyBjYXJ0IGNyZWF0aW9uLFxuICAgICAgICAvLyBoZW5jZSBhcHBsaWNhdGlvbiB3aWxsIHRocm93IGFuIGVycm9yIG9uIGdldENhcnRPclRocm93IG1ldGhvZCBjYWxsXG4gICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGlzQnV5Tm93Rmxvd1xuICAgICAgICAgICAgPyBwYXlwYWxjb21tZXJjZS5jdXJyZW5jeUNvZGVcbiAgICAgICAgICAgIDogdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCwgY3VycmVuY3lDb2RlLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24oY29udGFpbmVySWQsIG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZSwgaXNCdXlOb3dGbG93KTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgY29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2U6IFBheVBhbENvbW1lcmNlQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIGlzQnV5Tm93Rmxvdz86IGJvb2xlYW4sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsIHN0eWxlLCBvbkNvbXBsZXRlLCBvbkVsaWdpYmlsaXR5RmFpbHVyZSB9ID0gcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCwgaXNBcHBTd2l0Y2hFbmFibGVkIH0gPVxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIC4uLighaXNCdXlOb3dGbG93ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5pc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZCkgJiYge1xuICAgICAgICAgICAgICAgICAgICBhcHBTd2l0Y2hXaGVuQXZhaWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNlJyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6ICh7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnRva2VuaXplUGF5bWVudChtZXRob2RJZCwgb3JkZXJJRCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYnV5Tm93Rmxvd0NhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpLFxuICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaG9zdGVkQ2hlY2tvdXRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICAuLi4oIWlzQXBwU3dpdGNoRW5hYmxlZCAmJiB7XG4gICAgICAgICAgICAgICAgb25TaGlwcGluZ0FkZHJlc3NDaGFuZ2U6IChkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ0FkZHJlc3NDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICAgICAgb25TaGlwcGluZ09wdGlvbnNDaGFuZ2U6IChkYXRhOiBTaGlwcGluZ09wdGlvbkNoYW5nZUNhbGxiYWNrUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNoaXBwaW5nT3B0aW9uc0NoYW5nZShkYXRhKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoZGF0YTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCwgYWN0aW9uczogQXBwcm92ZUNhbGxiYWNrQWN0aW9ucykgPT5cbiAgICAgICAgICAgICAgICB0aGlzLm9uSG9zdGVkQ2hlY2tvdXRBcHByb3ZlKGRhdGEsIGFjdGlvbnMsIG1ldGhvZElkLCBvbkNvbXBsZXRlKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXR0b25SZW5kZXJPcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkZVTkRJTkcuUEFZUEFMLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZSksXG4gICAgICAgICAgICAuLi5kZWZhdWx0Q2FsbGJhY2tzLFxuICAgICAgICAgICAgLi4uKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zICYmIGJ1eU5vd0Zsb3dDYWxsYmFja3MpLFxuICAgICAgICAgICAgLi4uKGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkICYmIGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxCdXR0b24gPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25SZW5kZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAocGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgaWYgKHBheXBhbEJ1dHRvbi5oYXNSZXR1cm5lZD8uKCkgJiYgdGhpcy5pc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZCkpIHtcbiAgICAgICAgICAgICAgICBwYXlwYWxCdXR0b24ucmVzdW1lPy4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob25FbGlnaWJpbGl0eUZhaWx1cmUgJiYgdHlwZW9mIG9uRWxpZ2liaWxpdHlGYWlsdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVsaWdpYmlsaXR5RmFpbHVyZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPzogUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChidXlOb3dJbml0aWFsaXplT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydE9yVGhyb3coXG4gICAgICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KGJ1eU5vd0NhcnQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvbkhvc3RlZENoZWNrb3V0QXBwcm92ZShcbiAgICAgICAgZGF0YTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgYWN0aW9uczogQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgb25Db21wbGV0ZT86ICgpID0+IHZvaWQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICghZGF0YS5vcmRlcklEKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgb3JkZXJEZXRhaWxzID0gYXdhaXQgYWN0aW9ucy5vcmRlci5nZXQoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0QmlsbGluZ0FkZHJlc3NGcm9tT3JkZXJEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzKTtcblxuICAgICAgICAgICAgaWYgKGNhcnQubGluZUl0ZW1zLnBoeXNpY2FsSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVTaGlwcGluZ0FkZHJlc3Moc2hpcHBpbmdBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcih7fSwgeyBwYXJhbXM6IHsgbWV0aG9kSWQgfSB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChtZXRob2RJZCwgZGF0YS5vcmRlcklEKTtcblxuICAgICAgICAgICAgaWYgKG9uQ29tcGxldGUgJiYgdHlwZW9mIG9uQ29tcGxldGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBGSVhNRTogRG8gd2UgcmVhbGx5IG5lZWQgdG8gcmV0dXJuIHRydWUgaGVyZT9cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEFkZHJlc3Moe1xuICAgICAgICAgICAgY2l0eTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5zdGF0ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEluZm86IHdlIHVzZSB0aGUgc2FtZSBhZGRyZXNzIHRvIGZpbGwgYmlsbGluZyBhbmQgc2hpcHBpbmcgYWRkcmVzc2VzIHRvIGhhdmUgdmFsaWQgcXVvdGEgb24gQkUgZm9yIG9yZGVyIHVwZGF0aW5nIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIG9uIHRoaXMgc3RhZ2Ugd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdmFsaWQgY3VzdG9tZXIncyBhZGRyZXNzIGFjY2VwdCBzaGlwcGluZyBkYXRhXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKGFkZHJlc3MpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nT3B0aW9uc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHNoaXBwaW5nT3B0aW9uID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRTaGlwcGluZ09wdGlvbk9yVGhyb3coXG4gICAgICAgICAgICBkYXRhLnNlbGVjdGVkU2hpcHBpbmdPcHRpb24uaWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgQXBwU3dpdGNoIGVuYWJsaW5nIGhhbmRsaW5nXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUGF5cGFsQ29tbWVyY2VBcHBTd2l0Y2hFbmFibGVkKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaXNBcHBTd2l0Y2hFbmFibGVkIHx8IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlQnV0dG9uU3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VCdXR0b25TdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQnV0dG9uU3RyYXRlZ3ksIFt7IGlkOiAncGF5cGFsY29tbWVyY2UnIH1dKTtcbiIsImltcG9ydCB7IE1lc3NhZ2VzU3R5bGVPcHRpb25zLCBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0gfSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5mdW5jdGlvbiBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnKHtcbiAgICBzdHlsZXMsXG59OiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0pOiBNZXNzYWdlc1N0eWxlT3B0aW9ucyB7XG4gICAgY29uc3QgbWVzc2FnZXNTdHlsZXM6IE1lc3NhZ2VzU3R5bGVPcHRpb25zID0ge307XG5cbiAgICBpZiAoc3R5bGVzLmNvbG9yKSB7XG4gICAgICAgIG1lc3NhZ2VzU3R5bGVzLmNvbG9yID0gc3R5bGVzLmNvbG9yO1xuICAgIH1cblxuICAgIGlmIChzdHlsZXMubGF5b3V0KSB7XG4gICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxheW91dCA9IHN0eWxlcy5sYXlvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlc1snbG9nby10eXBlJ10gfHwgc3R5bGVzWydsb2dvLXBvc2l0aW9uJ10pIHtcbiAgICAgICAgbWVzc2FnZXNTdHlsZXMubG9nbyA9IHt9O1xuXG4gICAgICAgIGlmIChzdHlsZXNbJ2xvZ28tdHlwZSddKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5sb2dvLnR5cGUgPSBzdHlsZXNbJ2xvZ28tdHlwZSddO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlc1snbG9nby1wb3NpdGlvbiddKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5sb2dvLnBvc2l0aW9uID0gc3R5bGVzWydsb2dvLXBvc2l0aW9uJ107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzLnJhdGlvKSB7XG4gICAgICAgIG1lc3NhZ2VzU3R5bGVzLnJhdGlvID0gc3R5bGVzLnJhdGlvO1xuICAgIH1cblxuICAgIGlmIChzdHlsZXNbJ3RleHQtY29sb3InXSB8fCBzdHlsZXNbJ3RleHQtc2l6ZSddKSB7XG4gICAgICAgIG1lc3NhZ2VzU3R5bGVzLnRleHQgPSB7fTtcblxuICAgICAgICBpZiAoc3R5bGVzWyd0ZXh0LWNvbG9yJ10pIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLnRleHQuY29sb3IgPSBzdHlsZXNbJ3RleHQtY29sb3InXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZXNbJ3RleHQtc2l6ZSddKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy50ZXh0LnNpemUgPSArc3R5bGVzWyd0ZXh0LXNpemUnXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtZXNzYWdlc1N0eWxlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZztcbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQge1xuICAgIGdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWcsXG4gICAgTWVzc2FnaW5nT3B0aW9ucyxcbiAgICBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgUGF5UGFsTWVzc2FnZXNTZGssXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG4gICAgU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFNoaXBwaW5nT3B0aW9uQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtYnV0dG9uLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3kgaW1wbGVtZW50cyBDaGVja291dEJ1dHRvblN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheXBhbGNvbW1lcmNlY3JlZGl0LCBjb250YWluZXJJZCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBwcm92aWRlZEN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lcklkLFxuICAgICAgICB9ID0gcGF5cGFsY29tbWVyY2VjcmVkaXQgfHwge307XG5cbiAgICAgICAgY29uc3QgaXNCdXlOb3dGbG93ID0gISFidXlOb3dJbml0aWFsaXplT3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlY3JlZGl0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNCdXlOb3dGbG93ICYmICFwcm92aWRlZEN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlY3JlZGl0LmN1cnJlbmN5Q29kZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzQnV5Tm93RmxvdyAmJlxuICAgICAgICAgICAgdHlwZW9mIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXQuYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMuZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkIG9yIGl0IGlzIG5vdCBhIGZ1bmN0aW9uLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0J1eU5vd0Zsb3cpIHtcbiAgICAgICAgICAgIC8vIEluZm86IGRlZmF1bHQgY2hlY2tvdXQgc2hvdWxkIG5vdCBiZSBsb2FkZWQgZm9yIEJ1eU5vdyBmbG93LFxuICAgICAgICAgICAgLy8gc2luY2UgdGhlcmUgaXMgbm8gY2hlY2tvdXQgc2Vzc2lvbiBhdmFpbGFibGUgZm9yIHRoYXQuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICAvLyBJbmZvOiB3ZSBhcmUgdXNpbmcgcHJvdmlkZWQgY3VycmVuY3kgY29kZSBmb3IgYnV5IG5vdyBjYXJ0LFxuICAgICAgICAvLyBiZWNhdXNlIGNoZWNrb3V0IHNlc3Npb24gaXMgbm90IGF2YWlsYWJsZSBiZWZvcmUgYnV5IG5vdyBjYXJ0IGNyZWF0aW9uLFxuICAgICAgICAvLyBoZW5jZSBhcHBsaWNhdGlvbiB3aWxsIHRocm93IGFuIGVycm9yIG9uIGdldENhcnRPclRocm93IG1ldGhvZCBjYWxsXG4gICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGlzQnV5Tm93Rmxvd1xuICAgICAgICAgICAgPyBwcm92aWRlZEN1cnJlbmN5Q29kZVxuICAgICAgICAgICAgOiBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkLCBjdXJyZW5jeUNvZGUsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihjb250YWluZXJJZCwgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlY3JlZGl0KTtcblxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYmFubmVyIHJlbmRlcmluZyBpbXBsZW1lbnRhdGlvbiBpbiB0aGlzIGZpbGUgd2hlbiBQQVlQQUwtNTU1Ny5IaWRlX3BwY19iYW5uZXJfaW1wbGVtZW50YXRpb24gd2lsbCBiZSByb2xsZWQgb3V0IHRvIDEwMCVcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuICAgICAgICBjb25zdCBpc0Jhbm5lckltcGxlbWVudGF0aW9uRGlzYWJsZWQgPVxuICAgICAgICAgICAgZmVhdHVyZXNbJ1BBWVBBTC01NTU3LkhpZGVfcHBjX2Jhbm5lcl9pbXBsZW1lbnRhdGlvbiddID8/IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc0Jhbm5lckltcGxlbWVudGF0aW9uRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2luZ0NvbnRhaW5lciA9XG4gICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXJJZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZXNzYWdpbmdDb250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbmN5Q29kZSAmJiBtZXNzYWdpbmdDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gPSBbXSB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgICAgICBjb25zdCBiYW5uZXJDb25maWd1cmF0aW9uID1cbiAgICAgICAgICAgICAgICBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbiAmJiBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbi5maW5kKCh7IGlkIH0pID0+IGlkID09PSAnY2FydCcpO1xuXG4gICAgICAgICAgICBpZiAoIWJhbm5lckNvbmZpZ3VyYXRpb24/LnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgY29kZSB3aGVuIGRhdGEgYXR0cmlidXRlcyB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgYmFubmVyIGNvbnRhaW5lciBpbiBjb250ZW50IHNlcnZpY2VcbiAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtbG9nby10eXBlJyk7XG4gICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBwLXN0eWxlLWxvZ28tcG9zaXRpb24nKTtcbiAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtdGV4dC1jb2xvcicpO1xuICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcC1zdHlsZS10ZXh0LXNpemUnKTtcblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVNkay5nZXRQYXlQYWxNZXNzYWdlcyhcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWVzc2FnZXMocGF5cGFsU2RrLCBtZXNzYWdpbmdDb250YWluZXJJZCwgYmFubmVyQ29uZmlndXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgY29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2VjcmVkaXQ6IFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsIHN0eWxlLCBvbkNvbXBsZXRlLCBvbkVsaWdpYmlsaXR5RmFpbHVyZSB9ID1cbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlY3JlZGl0O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgaXNIb3N0ZWRDaGVja291dEVuYWJsZWQsIGlzQXBwU3dpdGNoRW5hYmxlZCB9ID1cbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKCdwYXlwYWxjb21tZXJjZWNyZWRpdCcpLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS50b2tlbml6ZVBheW1lbnQobWV0aG9kSWQsIG9yZGVySUQpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJ1eU5vd0Zsb3dDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgLi4uKCFpc0FwcFN3aXRjaEVuYWJsZWQgJiYge1xuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdBZGRyZXNzQ2hhbmdlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKGRhdGEpLFxuICAgICAgICAgICAgICAgIG9uU2hpcHBpbmdPcHRpb25zQ2hhbmdlOiAoZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25TaGlwcGluZ09wdGlvbnNDaGFuZ2UoZGF0YSksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGE6IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsIGFjdGlvbnM6IEFwcHJvdmVDYWxsYmFja0FjdGlvbnMpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5vbkhvc3RlZENoZWNrb3V0QXBwcm92ZShkYXRhLCBhY3Rpb25zLCBtZXRob2RJZCwgb25Db21wbGV0ZSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZXMgPSBbcGF5cGFsU2RrLkZVTkRJTkcuUEFZTEFURVIsIHBheXBhbFNkay5GVU5ESU5HLkNSRURJVF07XG4gICAgICAgIGxldCBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gZmFsc2U7XG5cbiAgICAgICAgZnVuZGluZ1NvdXJjZXMuZm9yRWFjaCgoZnVuZGluZ1NvdXJjZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV0dG9uUmVuZGVyT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZSksXG4gICAgICAgICAgICAgICAgICAgIC4uLmRlZmF1bHRDYWxsYmFja3MsXG4gICAgICAgICAgICAgICAgICAgIC4uLihidXlOb3dJbml0aWFsaXplT3B0aW9ucyAmJiBidXlOb3dGbG93Q2FsbGJhY2tzKSxcbiAgICAgICAgICAgICAgICAgICAgLi4uKGlzSG9zdGVkQ2hlY2tvdXRFbmFibGVkICYmIGhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzKSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBwYXlwYWxCdXR0b24ucmVuZGVyKGAjJHtjb250YWluZXJJZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvbkVsaWdpYmlsaXR5RmFpbHVyZSAmJiB0eXBlb2Ygb25FbGlnaWJpbGl0eUZhaWx1cmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPzogUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChidXlOb3dJbml0aWFsaXplT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydE9yVGhyb3coXG4gICAgICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KGJ1eU5vd0NhcnQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvbkhvc3RlZENoZWNrb3V0QXBwcm92ZShcbiAgICAgICAgZGF0YTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgYWN0aW9uczogQXBwcm92ZUNhbGxiYWNrQWN0aW9ucyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgb25Db21wbGV0ZT86ICgpID0+IHZvaWQsXG4gICAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICghZGF0YS5vcmRlcklEKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgb3JkZXJEZXRhaWxzID0gYXdhaXQgYWN0aW9ucy5vcmRlci5nZXQoKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0QmlsbGluZ0FkZHJlc3NGcm9tT3JkZXJEZXRhaWxzKFxuICAgICAgICAgICAgICAgICAgICBvcmRlckRldGFpbHMsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzKTtcblxuICAgICAgICAgICAgaWYgKGNhcnQubGluZUl0ZW1zLnBoeXNpY2FsSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyhcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyRGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVTaGlwcGluZ0FkZHJlc3Moc2hpcHBpbmdBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcih7fSwgeyBwYXJhbXM6IHsgbWV0aG9kSWQgfSB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChtZXRob2RJZCwgZGF0YS5vcmRlcklEKTtcblxuICAgICAgICAgICAgaWYgKG9uQ29tcGxldGUgJiYgdHlwZW9mIG9uQ29tcGxldGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBGSVhNRTogRG8gd2UgcmVhbGx5IG5lZWQgdG8gcmV0dXJuIHRydWUgaGVyZT9cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIG9uU2hpcHBpbmdBZGRyZXNzQ2hhbmdlKFxuICAgICAgICBkYXRhOiBTaGlwcGluZ0FkZHJlc3NDaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldEFkZHJlc3Moe1xuICAgICAgICAgICAgY2l0eTogZGF0YS5zaGlwcGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGRhdGEuc2hpcHBpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2VDb2RlOiBkYXRhLnNoaXBwaW5nQWRkcmVzcy5zdGF0ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEluZm86IHdlIHVzZSB0aGUgc2FtZSBhZGRyZXNzIHRvIGZpbGwgYmlsbGluZyBhbmQgc2hpcHBpbmcgYWRkcmVzc2VzIHRvIGhhdmUgdmFsaWQgcXVvdGEgb24gQkUgZm9yIG9yZGVyIHVwZGF0aW5nIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIG9uIHRoaXMgc3RhZ2Ugd2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdmFsaWQgY3VzdG9tZXIncyBhZGRyZXNzIGFjY2VwdCBzaGlwcGluZyBkYXRhXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlU2hpcHBpbmdBZGRyZXNzKGFkZHJlc3MpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ09wdGlvbiA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2hpcHBpbmdPcHRpb25PclRocm93KCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBvblNoaXBwaW5nT3B0aW9uc0NoYW5nZShcbiAgICAgICAgZGF0YTogU2hpcHBpbmdPcHRpb25DaGFuZ2VDYWxsYmFja1BheWxvYWQsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHNoaXBwaW5nT3B0aW9uID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRTaGlwcGluZ09wdGlvbk9yVGhyb3coXG4gICAgICAgICAgICBkYXRhLnNlbGVjdGVkU2hpcHBpbmdPcHRpb24uaWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzaGlwcGluZ09wdGlvbi5pZCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZU9yZGVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJNZXNzYWdlcyhcbiAgICAgICAgcGF5cGFsTWVzc2FnZXNTZGs6IFBheVBhbE1lc3NhZ2VzU2RrLFxuICAgICAgICBtZXNzYWdpbmdDb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBiYW5uZXJDb25maWd1cmF0aW9uOiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsTWVzc2FnZXNPcHRpb25zOiBNZXNzYWdpbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgYW1vdW50OiBjaGVja291dC5vdXRzdGFuZGluZ0JhbGFuY2UsXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdjYXJ0JyxcbiAgICAgICAgICAgIHN0eWxlOiBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnKGJhbm5lckNvbmZpZ3VyYXRpb24pLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbE1lc3NhZ2VzID0gcGF5cGFsTWVzc2FnZXNTZGsuTWVzc2FnZXMocGF5cGFsTWVzc2FnZXNPcHRpb25zKTtcblxuICAgICAgICBwYXlwYWxNZXNzYWdlcy5yZW5kZXIoYCMke21lc3NhZ2luZ0NvbnRhaW5lcklkfWApO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtY3JlZGl0LWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VDcmVkaXRCdXR0b25TdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrKCksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQ3JlZGl0QnV0dG9uU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXQnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIFBheVBhbEJ1dHRvblN0eWxlT3B0aW9ucyxcbiAgICBQYXlQYWxCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFN0eWxlQnV0dG9uQ29sb3IsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvbkluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1idXR0b24taW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5UGFsQ29tbWVyY2VWZW5tb0J1dHRvblN0cmF0ZWd5IGltcGxlbWVudHMgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsY29tbWVyY2V2ZW5tbywgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLCBjdXJyZW5jeUNvZGU6IHByb3ZpZGVkQ3VycmVuY3lDb2RlIH0gPVxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2V2ZW5tbyB8fCB7fTtcblxuICAgICAgICBjb25zdCBpc0J1eU5vd0Zsb3cgPSAhIWJ1eU5vd0luaXRpYWxpemVPcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5jb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2V2ZW5tbykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNldmVubW9cIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNCdXlOb3dGbG93ICYmICFwcm92aWRlZEN1cnJlbmN5Q29kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNldmVubW8uY3VycmVuY3lDb2RlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNCdXlOb3dGbG93ICYmXG4gICAgICAgICAgICB0eXBlb2YgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSAhPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZXZlbm1vLmJ1eU5vd0luaXRpYWxpemVPcHRpb25zLmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNCdXlOb3dGbG93KSB7XG4gICAgICAgICAgICAvLyBJbmZvOiBkZWZhdWx0IGNoZWNrb3V0IHNob3VsZCBub3QgYmUgbG9hZGVkIGZvciBCdXlOb3cgZmxvdyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXJlIGlzIG5vIGNoZWNrb3V0IHNlc3Npb24gYXZhaWxhYmxlIGZvciB0aGF0LlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZm86IHdlIGFyZSB1c2luZyBwcm92aWRlZCBjdXJyZW5jeSBjb2RlIGZvciBidXkgbm93IGNhcnQsXG4gICAgICAgIC8vIGJlY2F1c2UgY2hlY2tvdXQgc2Vzc2lvbiBpcyBub3QgYXZhaWxhYmxlIGJlZm9yZSBidXkgbm93IGNhcnQgY3JlYXRpb24sXG4gICAgICAgIC8vIGhlbmNlIGFwcGxpY2F0aW9uIHdpbGwgdGhyb3cgYW4gZXJyb3Igb24gZ2V0Q2FydE9yVGhyb3cgbWV0aG9kIGNhbGxcbiAgICAgICAgY29uc3QgY3VycmVuY3lDb2RlID0gaXNCdXlOb3dGbG93XG4gICAgICAgICAgICA/IHByb3ZpZGVkQ3VycmVuY3lDb2RlXG4gICAgICAgICAgICA6IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQsIGN1cnJlbmN5Q29kZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKGNvbnRhaW5lcklkLCBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2V2ZW5tbyk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNldmVubW86IFBheVBhbENvbW1lcmNlVmVubW9CdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBidXlOb3dJbml0aWFsaXplT3B0aW9ucywgc3R5bGUsIG9uRWxpZ2liaWxpdHlGYWlsdXJlIH0gPSBwYXlwYWxjb21tZXJjZXZlbm1vO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlID0gcGF5cGFsU2RrLkZVTkRJTkcuVkVOTU87XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNldmVubW8nKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKHsgb3JkZXJJRCB9OiBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UudG9rZW5pemVQYXltZW50KG1ldGhvZElkLCBvcmRlcklEKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXlOb3dGbG93Q2FsbGJhY2tzID0ge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4gdGhpcy5oYW5kbGVDbGljayhidXlOb3dJbml0aWFsaXplT3B0aW9ucyksXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBidXR0b25SZW5kZXJPcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLmdldFZhbGlkVmVubW9CdXR0b25TdHlsZXMoc3R5bGUpLFxuICAgICAgICAgICAgLi4uZGVmYXVsdENhbGxiYWNrcyxcbiAgICAgICAgICAgIC4uLihidXlOb3dJbml0aWFsaXplT3B0aW9ucyAmJiBidXlOb3dGbG93Q2FsbGJhY2tzKSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25SZW5kZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAocGF5cGFsQnV0dG9uUmVuZGVyLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgIH0gZWxzZSBpZiAob25FbGlnaWJpbGl0eUZhaWx1cmUgJiYgdHlwZW9mIG9uRWxpZ2liaWxpdHlGYWlsdXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVsaWdpYmlsaXR5RmFpbHVyZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VmFsaWRWZW5tb0J1dHRvblN0eWxlcyhzdHlsZTogUGF5UGFsQnV0dG9uU3R5bGVPcHRpb25zIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkQnV0dG9uU3R5bGUgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoc3R5bGUpO1xuXG4gICAgICAgIGlmICh2YWxpZEJ1dHRvblN0eWxlLmNvbG9yID09PSBTdHlsZUJ1dHRvbkNvbG9yLmdvbGQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4udmFsaWRCdXR0b25TdHlsZSxcbiAgICAgICAgICAgICAgICBjb2xvcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWxpZEJ1dHRvblN0eWxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPzogUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChidXlOb3dJbml0aWFsaXplT3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydE9yVGhyb3coXG4gICAgICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KGJ1eU5vd0NhcnQuaWQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlVmVubW9CdXR0b25TdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1idXR0b24tc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlVmVubW9CdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2V2ZW5tbycgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3ksXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgUGF5UGFsQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyxcbn0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXR5cGVzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzQnV0dG9uT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvbkluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1hbHRlcm5hdGl2ZS1tZXRob2RzLWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvblN0cmF0ZWd5XG4gICAgaW1wbGVtZW50cyBDaGVja291dEJ1dHRvblN0cmF0ZWd5XG57XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmXG4gICAgICAgICAgICBXaXRoUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcywgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhcG0sXG4gICAgICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogcHJvdmlkZWRDdXJyZW5jeUNvZGUsXG4gICAgICAgIH0gPSBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcyB8fCB7fTtcblxuICAgICAgICBjb25zdCBpc0J1eU5vd0Zsb3cgPSAhIWJ1eU5vd0luaXRpYWxpemVPcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5jb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kc1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXBtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMuYXBtXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnV5Tm93RmxvdyAmJiAhcHJvdmlkZWRDdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcy5jdXJyZW5jeUNvZGVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBpc0J1eU5vd0Zsb3cgJiZcbiAgICAgICAgICAgIHR5cGVvZiBidXlOb3dJbml0aWFsaXplT3B0aW9ucz8uZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5ICE9PSAnZnVuY3Rpb24nXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzLmJ1eU5vd0luaXRpYWxpemVPcHRpb25zLmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNCdXlOb3dGbG93KSB7XG4gICAgICAgICAgICAvLyBJbmZvOiBkZWZhdWx0IGNoZWNrb3V0IHNob3VsZCBub3QgYmUgbG9hZGVkIGZvciBCdXlOb3cgZmxvdyxcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXJlIGlzIG5vIGNoZWNrb3V0IHNlc3Npb24gYXZhaWxhYmxlIGZvciB0aGF0LlxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZm86IHdlIGFyZSB1c2luZyBwcm92aWRlZCBjdXJyZW5jeSBjb2RlIGZvciBidXkgbm93IGNhcnQsXG4gICAgICAgIC8vIGJlY2F1c2UgY2hlY2tvdXQgc2Vzc2lvbiBpcyBub3QgYXZhaWxhYmxlIGJlZm9yZSBidXkgbm93IGNhcnQgY3JlYXRpb24sXG4gICAgICAgIC8vIGhlbmNlIGFwcGxpY2F0aW9uIHdpbGwgdGhyb3cgYW4gZXJyb3Igb24gZ2V0Q2FydE9yVGhyb3cgbWV0aG9kIGNhbGxcbiAgICAgICAgY29uc3QgY3VycmVuY3lDb2RlID0gaXNCdXlOb3dGbG93XG4gICAgICAgICAgICA/IHByb3ZpZGVkQ3VycmVuY3lDb2RlXG4gICAgICAgICAgICA6IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXlQYWxTZGsobWV0aG9kSWQsIGN1cnJlbmN5Q29kZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKGNvbnRhaW5lcklkLCBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kczogUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25PcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB7IGFwbSwgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsIHN0eWxlLCBvbkVsaWdpYmlsaXR5RmFpbHVyZSB9ID1cbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBpc0F2YWlsYWJsZUZ1bmRpbmdTb3VyY2UgPSBPYmplY3QudmFsdWVzKHBheXBhbFNkay5GVU5ESU5HKS5pbmNsdWRlcyhhcG0pO1xuXG4gICAgICAgIGlmICghaXNBdmFpbGFibGVGdW5kaW5nU291cmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIFBheVBhbCBidXR0b24gYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMuYXBtXCIgYXJndW1lbnQgaXMgbm90IHZhbGlkIGZ1bmRpbmcgc291cmNlLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdENhbGxiYWNrcyA9IHtcbiAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoXG4gICAgICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kJyxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgb25BcHByb3ZlOiAoeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS50b2tlbml6ZVBheW1lbnQobWV0aG9kSWQsIG9yZGVySUQpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJ1eU5vd0Zsb3dDYWxsYmFja3MgPSB7XG4gICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvblJlbmRlck9wdGlvbnM6IFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMgPSB7XG4gICAgICAgICAgICBmdW5kaW5nU291cmNlOiBhcG0sXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKSxcbiAgICAgICAgICAgIC4uLmRlZmF1bHRDYWxsYmFja3MsXG4gICAgICAgICAgICAuLi4oYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMgJiYgYnV5Tm93Rmxvd0NhbGxiYWNrcyksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQnV0dG9uUmVuZGVyID0gcGF5cGFsU2RrLkJ1dHRvbnMoYnV0dG9uUmVuZGVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHBheXBhbEJ1dHRvblJlbmRlci5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgIHBheXBhbEJ1dHRvblJlbmRlci5yZW5kZXIoYCMke2NvbnRhaW5lcklkfWApO1xuICAgICAgICB9IGVsc2UgaWYgKG9uRWxpZ2liaWxpdHlGYWlsdXJlICYmIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXJJZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUNsaWNrKFxuICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucz86IFBheVBhbEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ1eU5vd0NhcnQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnRPclRocm93KFxuICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRDaGVja291dChidXlOb3dDYXJ0LmlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvblN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWFsdGVybmF0aXZlLW1ldGhvZHMtYnV0dG9uLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneTogQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvblN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNCdXR0b25TdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcycgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzLFxuICAgIExvYWRpbmdJbmRpY2F0b3JTdHlsZXMsXG59IGZyb20gJy4vbG9hZGluZy1pbmRpY2F0b3Itc3R5bGVzJztcblxuY29uc3QgREVGQVVMVF9TVFlMRVM6IExvYWRpbmdJbmRpY2F0b3JTdHlsZXMgPSB7XG4gICAgc2l6ZTogNzAsXG4gICAgY29sb3I6ICcjZDlkOWQ5JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbn07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTlRBSU5FUl9TVFlMRVMgPSB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiYSgwLCAwLCAwLCAwLjQpJyxcbiAgICAnei1pbmRleCc6ICcxMDAwJyxcbn07XG5cbmNvbnN0IFJPVEFUSU9OX0FOSU1BVElPTiA9ICdlbWJlZGRlZC1jaGVja291dC1sb2FkaW5nLWluZGljYXRvci1yb3RhdGlvbic7XG5cbmludGVyZmFjZSBMb2FkaW5nSW5kaWNhdG9yT3B0aW9ucyB7XG4gICAgc3R5bGVzPzogTG9hZGluZ0luZGljYXRvclN0eWxlcztcbiAgICBjb250YWluZXJTdHlsZXM/OiBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nSW5kaWNhdG9yIHtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpbmRpY2F0b3I6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgc3R5bGVzOiBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzO1xuICAgIHByaXZhdGUgY29udGFpbmVyU3R5bGVzOiBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IExvYWRpbmdJbmRpY2F0b3JPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzID0geyAuLi5ERUZBVUxUX1NUWUxFUywgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHlsZXMpIH07XG4gICAgICAgIHRoaXMuY29udGFpbmVyU3R5bGVzID0geyAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmNvbnRhaW5lclN0eWxlcykgfTtcblxuICAgICAgICB0aGlzLmRlZmluZUFuaW1hdGlvbigpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5idWlsZENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmluZGljYXRvciA9IHRoaXMuYnVpbGRJbmRpY2F0b3IoKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmluZGljYXRvcik7XG4gICAgfVxuXG4gICAgc2hvdyhwYXJlbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudElkKTtcblxuICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdVbmFibGUgdG8gYXR0YWNoIHRoZSBsb2FkaW5nIGluZGljYXRvciBiZWNhdXNlIHRoZSBwYXJlbnQgSUQgaXMgbm90IHZhbGlkLicsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgfVxuXG4gICAgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGFuZGxlVHJhbnNpdGlvbkVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZVRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uRW5kKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRDb250YWluZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3R0b20gPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5yaWdodCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDI1MG1zIGVhc2Utb3V0JztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cbiAgICAgICAgdGhpcy5zZXRTdHlsZUF0dHJpYnV0ZShjb250YWluZXIsIHRoaXMuY29udGFpbmVyU3R5bGVzKTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRJbmRpY2F0b3IoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS53aWR0aCA9IGAke3RoaXMuc3R5bGVzLnNpemV9cHhgO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5zdHlsZXMuc2l6ZX1weGA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5ib3JkZXJSYWRpdXMgPSBgJHt0aGlzLnN0eWxlcy5zaXplfXB4YDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlciA9ICdzb2xpZCAxcHgnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuYm9yZGVyQ29sb3IgPSBgJHt0aGlzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9ICR7dGhpcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfSAke3RoaXMuc3R5bGVzLmNvbG9yfSAke3RoaXMuc3R5bGVzLmNvbG9yfWA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5tYXJnaW4gPSAnMCBhdXRvJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5yaWdodCA9ICcwJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRvcCA9ICc1MCUnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDBkZWcpJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmFuaW1hdGlvbiA9IGAke1JPVEFUSU9OX0FOSU1BVElPTn0gNTAwbXMgaW5maW5pdGUgY3ViaWMtYmV6aWVyKDAuNjksIDAuMzEsIDAuNTYsIDAuODMpYDtcblxuICAgICAgICByZXR1cm4gaW5kaWNhdG9yO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3R5bGVBdHRyaWJ1dGUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGF0dHJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGssIGF0dHJzW2tdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWZpbmVBbmltYXRpb24oKTogdm9pZCB7XG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGRlZmluZSBDU1MgYW5pbWF0aW9uLCB3ZSBuZWVkIHRvIGluc2VydCBhIHN0eWxlc2hlZXQgaW50byB0aGUgaG9zdCBmcmFtZS5cbiAgICAgICAgLy8gV2Ugb25seSBoYXZlIHRvIGRvIGl0IG9uY2UuXG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChST1RBVElPTl9BTklNQVRJT04pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgc3R5bGUuaWQgPSBST1RBVElPTl9BTklNQVRJT047XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgZG9jdW1lbnQuaGVhZD8uYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gICAgICAgIGlmIChzdHlsZS5zaGVldCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgMm5kIHBhcmFtZXRlciBmb3IgSUUxMSwgZXZlbiB0aG91Z2ggaXQgaXNcbiAgICAgICAgICAgIC8vIDAgYnkgZGVmYXVsdCBmb3IgYWxsIG90aGVyIGJyb3dzZXJzLlxuICAgICAgICAgICAgc3R5bGUuc2hlZXQuaW5zZXJ0UnVsZShcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgQGtleWZyYW1lcyAke1JPVEFUSU9OX0FOSU1BVElPTn0ge1xuICAgICAgICAgICAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAgICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMzYwZGVnKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTID0ge1xuICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJ3JnYmEoMCwgMCwgMCwgMC40KScsXG4gICAgJ3otaW5kZXgnOiAnMTAwMCcsXG59O1xuIiwiaW1wb3J0IEludmFsaWRBcmd1bWVudEVycm9yIGZyb20gJy4vaW52YWxpZC1hcmd1bWVudC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gd2UgYXJlIHVuYWJsZSB0byBzdWJtaXQgYSBwYXltZW50IGJlY2F1c2VcbiAqIHRoZSBjYWxsZXIgaGFzIG5vdCBwcm92aWRlZCBhbGwgdGhlIHJlcXVpcmVkIGZpZWxkcywgaS5lLjogaWYgYW4gYXJndW1lbnQgaXNcbiAqIG1pc3Npbmcgb3IgaXQgaXMgbm90IHRoZSBleHBlY3RlZCBkYXRhIHR5cGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvciBleHRlbmRzIEludmFsaWRBcmd1bWVudEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpbnZhbGlkRmllbGRzPzogc3RyaW5nW10pIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnVW5hYmxlIHRvIHN1Ym1pdCBwYXltZW50IGZvciB0aGUgb3JkZXIgYmVjYXVzZSB0aGUgcGF5bG9hZCBpcyBpbnZhbGlkLic7XG5cbiAgICAgICAgaWYgKGludmFsaWRGaWVsZHMpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBNYWtlIHN1cmUgdGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIHByb3ZpZGVkIGNvcnJlY3RseTogJHtpbnZhbGlkRmllbGRzLmpvaW4oXG4gICAgICAgICAgICAgICAgJywgJyxcbiAgICAgICAgICAgICl9LmA7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB1bmFibGUgdG8gc3VjY2Vzc2Z1bGx5IHN1Ym1pdCBhIHNlcnZlciByZXF1ZXN0XG4gKiB1c2luZyBhIHBheW1lbnQgbWV0aG9kIGJlY2F1c2UgdGhlIG1ldGhvZCBoYXMgaW52YWxpZCBjb25maWd1cmF0aW9uIG9yIGlzIGluXG4gKiBhbiBpbnZhbGlkIHN0YXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlcmUgaXMgYSBwcm9ibGVtIHByb2Nlc3NpbmcgeW91ciBwYXltZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kSW52YWxpZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2ludmFsaWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgYXJlIHRyeWluZyB0byBtYWtlIGFuIG9yZGVyIGZpbmFsaXphdGlvbiByZXF1ZXN0IGZvciBhXG4gKiBwYXltZW50IG1ldGhvZCB0aGF0IGRvZXMgbm90IHJlcXVpcmUgc3VjaCBwcm9jZWR1cmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignVGhlIGN1cnJlbnQgb3JkZXIgZG9lcyBub3QgbmVlZCB0byBiZSBmaW5hbGl6ZWQgYXQgdGhpcyBzdGFnZS4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ29yZGVyX2ZpbmFsaXphdGlvbl9ub3RfcmVxdWlyZWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEhvc3RlZEluc3RydW1lbnQgfSBmcm9tICcuL3BheW1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0hvc3RlZEluc3RydW1lbnRMaWtlKFxuICAgIGluc3RydW1lbnQ6IHVua25vd24sXG4pOiBpbnN0cnVtZW50IGlzIEhvc3RlZEluc3RydW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICAgIHR5cGVvZiBpbnN0cnVtZW50ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBpbnN0cnVtZW50ICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2F2ZUluc3RydW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICB0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2F2ZUluc3RydW1lbnQgPT09ICdib29sZWFuJykgJiZcbiAgICAgICAgKHR5cGVvZiAoaW5zdHJ1bWVudCBhcyBIb3N0ZWRJbnN0cnVtZW50KS5zaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgdHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPT09ICdib29sZWFuJylcbiAgICApO1xufVxuIiwiaW1wb3J0IHtcbiAgICBGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIEZvcm1hdHRlZFZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIEhvc3RlZFZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbiAgICBWYXVsdGVkSW5zdHJ1bWVudCxcbn0gZnJvbSAnLi9wYXltZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYXVsdGVkSW5zdHJ1bWVudChcbiAgICBpbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4pOiBpbnN0cnVtZW50IGlzIFZhdWx0ZWRJbnN0cnVtZW50IHtcbiAgICByZXR1cm4gQm9vbGVhbigoaW5zdHJ1bWVudCBhcyBWYXVsdGVkSW5zdHJ1bWVudCkuaW5zdHJ1bWVudElkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdGVkVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgQm9vbGVhbigoaW5zdHJ1bWVudCBhcyBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCkuaW5zdHJ1bWVudElkKSAmJlxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RydW1lbnQsICdjY051bWJlcicpICYmXG4gICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdHJ1bWVudCwgJ2NjQ3Z2JylcbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudChcbiAgICBpbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4pOiBpbnN0cnVtZW50IGlzIEZvcm1hdHRlZFBheWxvYWQ8Rm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQ+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRJbnN0cnVtZW50ID0gKGluc3RydW1lbnQgYXMgRm9ybWF0dGVkUGF5bG9hZDxGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudD4pXG4gICAgICAgIC5mb3JtYXR0ZWRQYXlsb2FkO1xuXG4gICAgaWYgKCFmb3JtYXR0ZWRJbnN0cnVtZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgIEJvb2xlYW4oZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4gJiYgZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4udG9rZW4pXG4gICAgKTtcbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgQmFzZUluc3RydW1lbnQge1xuICAgIGJpZ3BheVRva2VuOiBzdHJpbmc7XG4gICAgZGVmYXVsdEluc3RydW1lbnQ6IGJvb2xlYW47XG4gICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzOiBib29sZWFuO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFzZUluc3RydW1lbnQoaW5zdHJ1bWVudDogdW5rbm93bik6IGluc3RydW1lbnQgaXMgQmFzZUluc3RydW1lbnQge1xuICAgIGlmICh0eXBlb2YgaW5zdHJ1bWVudCAhPT0gJ29iamVjdCcgfHwgaW5zdHJ1bWVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgJ2JpZ3BheVRva2VuJyBpbiBpbnN0cnVtZW50ICYmXG4gICAgICAgICdkZWZhdWx0SW5zdHJ1bWVudCcgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAncHJvdmlkZXInIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ3RydXN0ZWRTaGlwcGluZ0FkZHJlc3MnIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ21ldGhvZCcgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAndHlwZScgaW4gaW5zdHJ1bWVudFxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICAgIEhvc3RlZEluc3RydW1lbnQsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgaXNIb3N0ZWRJbnN0cnVtZW50TGlrZSxcbiAgICBpc1ZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnQsXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHtcbiAgICBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnLFxuICAgIGlzUGF5cGFsQ29tbWVyY2VQcm92aWRlckVycm9yLFxuICAgIGlzUmVkaXJlY3RBY3Rpb25FcnJvcixcbiAgICBNZXNzYWdpbmdPcHRpb25zLFxuICAgIFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSxcbiAgICBQYXlQYWxDb21tZXJjZVNkayxcbiAgICBQYXlQYWxNZXNzYWdlc1Nkayxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuaW1wb3J0IHsgaXNCYXNlSW5zdHJ1bWVudCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgQ2xpY2tDYWxsYmFja0FjdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VCdXR0b25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9uc09wdGlvbnMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG59IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZVBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgb3JkZXJJZD86IHN0cmluZztcbiAgICBwcml2YXRlIHBheXBhbEJ1dHRvbj86IFBheVBhbENvbW1lcmNlQnV0dG9ucztcbiAgICBwcml2YXRlIHBheXBhbGNvbW1lcmNlPzogUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zPzogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZSB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB0aGlzLnBheXBhbGNvbW1lcmNlID0gcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIGJhbm5lckNvbnRhaW5lcklkIH0gPSBwYXlwYWxjb21tZXJjZTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBvcmRlcklkLFxuICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gPSBbXSxcbiAgICAgICAgICAgIGlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlLFxuICAgICAgICB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG5cbiAgICAgICAgaWYgKGJhbm5lckNvbnRhaW5lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYmFubmVyQ29udGFpbmVySWQpKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIGJhbm5lciB3aXRob3V0IHZhbGlkIGJhbm5lciBjb250YWluZXIgSUQuJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJhbm5lckNvbmZpZ3VyYXRpb24gPSBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbj8uZmluZChcbiAgICAgICAgICAgICAgICAoeyBpZCB9KSA9PiBpZCA9PT0gJ2NoZWNrb3V0JyxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChpc1BheVBhbENyZWRpdEF2YWlsYWJsZSB8fCAhYmFubmVyQ29uZmlndXJhdGlvbj8uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwYXlwYWxNZXNzYWdlcyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsTWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoIXBheXBhbE1lc3NhZ2VzIHx8IHR5cGVvZiBwYXlwYWxNZXNzYWdlcz8uTWVzc2FnZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnW0JDIFBheVBhbENvbW1lcmNlIFBheUxhdGVyXTogYmFubmVyIGNvdWxkIG5vdCBiZSByZW5kZXJlZCwgZHVlIHRvIGlzc3VlcyB3aXRoIGxvYWRpbmcgUGF5UGFsIFNESycsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTWVzc2FnZXMocGF5cGFsTWVzc2FnZXMsIGJhbm5lckNvbnRhaW5lcklkLCBiYW5uZXJDb25maWd1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluZm86XG4gICAgICAgIC8vIFRoZSBQYXlQYWwgYnV0dG9uIGFuZCBmaWVsZHMgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCB3aGVuIHNob3BwZXIgd2FzIHJlZGlyZWN0ZWQgdG8gQ2hlY2tvdXQgcGFnZVxuICAgICAgICAvLyBhZnRlciB1c2luZyBzbWFydCBwYXltZW50IGJ1dHRvbiBvbiBQRFAgb3IgQ2FydCBwYWdlLiBJbiB0aGlzIGNhc2UgYmFja2VuZCByZXR1cm5zIG9yZGVyIGlkIGlmXG4gICAgICAgIC8vIGl0IGlzIGF2YWlsYWJsZSBpbiBjaGVja291dCBzZXNzaW9uLiBUaGVyZWZvcmUsIGl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gcmVuZGVyIFBheVBhbCBidXR0b24uXG4gICAgICAgIGlmIChvcmRlcklkKSB7XG4gICAgICAgICAgICB0aGlzLm9yZGVySWQgPSBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8ub3JkZXJJZDtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyID0gY29udGFpbmVyPy5zcGxpdCgnIycpWzFdO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKHBheXBhbGNvbW1lcmNlLm9uSW5pdCAmJiB0eXBlb2YgcGF5cGFsY29tbWVyY2Uub25Jbml0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZS5vbkluaXQoKCkgPT4gdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXlwYWxjb21tZXJjZS5zaG91bGRSZW5kZXJQYXlQYWxCdXR0b25PbkluaXRpYWxpemF0aW9uID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlLnNob3VsZFJlbmRlclBheVBhbEJ1dHRvbk9uSW5pdGlhbGl6YXRpb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShwYXlsb2FkOiBPcmRlclJlcXVlc3RCb2R5LCBvcHRpb25zPzogUGF5bWVudFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudCwgLi4ub3JkZXIgfSA9IHBheWxvYWQ7XG4gICAgICAgIGNvbnN0IHsgb25FcnJvciB9ID0gdGhpcy5wYXlwYWxjb21tZXJjZSB8fCB7fTtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNQYXlQYWxWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnREYXRhKHBheW1lbnREYXRhKSAmJiAhdGhpcy5vcmRlcklkKSB7XG4gICAgICAgICAgICB0aGlzLm9yZGVySWQgPSBhd2FpdCB0aGlzLmNyZWF0ZU9yZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheW1lbnRQYXlsb2FkID0gdGhpcy5pc1BheVBhbFZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudERhdGEocGF5bWVudERhdGEpXG4gICAgICAgICAgICA/IHRoaXMucHJlcGFyZVZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudFBheWxvYWQobWV0aG9kSWQsIHRoaXMub3JkZXJJZCwgcGF5bWVudERhdGEpXG4gICAgICAgICAgICA6IHRoaXMucHJlcGFyZVBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCB0aGlzLm9yZGVySWQsIHBheW1lbnREYXRhKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnRQYXlsb2FkKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgICAgIGlmIChpc1JlZGlyZWN0QWN0aW9uRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVkaXJlY3RVcmwgPSBlcnJvci5ib2R5LmFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkPy5kYXRhPy5yZWRpcmVjdF91cmw7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4gd2luZG93LmxvY2F0aW9uLnJlcGxhY2UocmVkaXJlY3RVcmwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNQcm92aWRlckVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhwYXltZW50Lm1ldGhvZElkKTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChfcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBheXBhbGNvbW1lcmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbj8uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKHBheW1lbnQubWV0aG9kSWQsIHRoaXMucGF5cGFsY29tbWVyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihuZXcgRXJyb3IoJ0lOU1RSVU1FTlRfREVDTElORUQnKSwgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgb25FcnJvcik7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uPy5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxPcmRlcklkOiBzdHJpbmcsXG4gICAgICAgIHBheW1lbnREYXRhOiBWYXVsdGVkSW5zdHJ1bWVudCAmIEhvc3RlZEluc3RydW1lbnQsXG4gICAgKTogUGF5bWVudCB7XG4gICAgICAgIGNvbnN0IHsgaW5zdHJ1bWVudElkLCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IH0gPSBwYXltZW50RGF0YTtcblxuICAgICAgICBjb25zdCBzaG91bGRDb25maXJtSW5zdHJ1bWVudCA9ICF0aGlzLmlzVHJ1c3RlZFZhdWx0aW5nRmxvdyhwYXltZW50RGF0YSk7XG5cbiAgICAgICAgaWYgKHNob3VsZENvbmZpcm1JbnN0cnVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50OiBzaG91bGRDb25maXJtSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsX2FjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9pZDogcGF5cGFsT3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBwYXltZW50RGF0YToge1xuICAgICAgICAgICAgICAgIGluc3RydW1lbnRJZCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcGF5cGFsX2FjY291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyX2lkOiBwYXlwYWxPcmRlcklkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBiaWdwYXlfdG9rZW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwYXJlUGF5bWVudFBheWxvYWQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbE9yZGVySWQ6IHN0cmluZyxcbiAgICAgICAgcGF5bWVudERhdGE6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5WydwYXltZW50RGF0YSddLFxuICAgICk6IFBheW1lbnQge1xuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50ID0gZmFsc2UsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPSBmYWxzZSB9ID1cbiAgICAgICAgICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEgOiB7fTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBwYXltZW50RGF0YToge1xuICAgICAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICBwYXlwYWxfYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHBheXBhbE9yZGVySWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCdXR0b24gbWV0aG9kcy9jYWxsYmFja3NcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbGNvbW1lcmNlOiBQYXlQYWxDb21tZXJjZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IHBheW1lbnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IsIG9uUmVuZGVyQnV0dG9uLCBvblZhbGlkYXRlLCBzdWJtaXRGb3JtIH0gPSBwYXlwYWxjb21tZXJjZTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJjb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidXR0b25PcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uKHRoaXMuaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQobWV0aG9kSWQpICYmIHtcbiAgICAgICAgICAgICAgICBhcHBTd2l0Y2hXaGVuQXZhaWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmdW5kaW5nU291cmNlOiBwYXlwYWxTZGsuRlVORElORy5QQVlQQUwsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKFxuICAgICAgICAgICAgICAgIGNoZWNrb3V0UGF5bWVudEJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT4gdGhpcy5jcmVhdGVPcmRlcigpLFxuICAgICAgICAgICAgb25DbGljazogKF8sIGFjdGlvbnMpID0+IHRoaXMuaGFuZGxlQ2xpY2soYWN0aW9ucywgb25WYWxpZGF0ZSksXG4gICAgICAgICAgICBvbkFwcHJvdmU6IChkYXRhKSA9PiB0aGlzLmhhbmRsZUFwcHJvdmUoZGF0YSwgc3VibWl0Rm9ybSksXG4gICAgICAgICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIG9uRXJyb3IpLFxuICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSksXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24gPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25PcHRpb25zKTtcblxuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25SZW5kZXJCdXR0b24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBheXBhbEJ1dHRvbi5oYXNSZXR1cm5lZD8uKCkgJiYgdGhpcy5pc1BheXBhbENvbW1lcmNlQXBwU3dpdGNoRW5hYmxlZChtZXRob2RJZCkpIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uLnJlc3VtZT8uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbi5yZW5kZXIoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGFjdGlvbnM6IENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgICAgICBvblZhbGlkYXRlOiBQYXlQYWxDb21tZXJjZVBheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25WYWxpZGF0ZSddLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHJlc29sdmUsIHJlamVjdCB9ID0gYWN0aW9ucztcblxuICAgICAgICBjb25zdCBvblZhbGlkYXRpb25QYXNzZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG9uVmFsaWRhdGU/LihvblZhbGlkYXRpb25QYXNzZWQsIHJlamVjdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVBcHByb3ZlKFxuICAgICAgICB7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgc3VibWl0Rm9ybTogUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ3N1Ym1pdEZvcm0nXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJRDtcblxuICAgICAgICBzdWJtaXRGb3JtPy4oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogdW5rbm93bixcbiAgICAgICAgb25FcnJvcjogUGF5UGFsQ29tbWVyY2VQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uRXJyb3InXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICBpZiAob25FcnJvciAmJiB0eXBlb2Ygb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZU9yZGVyKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGZpZWxkc1ZhbHVlcyA9IHRoaXMuZ2V0RmllbGRzVmFsdWVzKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXIoJ3BheXBhbGNvbW1lcmNlY2hlY2tvdXQnLCB7XG4gICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudDogZmllbGRzVmFsdWVzPy5zaG91bGRTYXZlSW5zdHJ1bWVudCB8fCBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBWYXVsdGluZyBmbG93IG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBnZXRGaWVsZHNWYWx1ZXMoKTogSG9zdGVkSW5zdHJ1bWVudCB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHsgZ2V0RmllbGRzVmFsdWVzIH0gPSB0aGlzLnBheXBhbGNvbW1lcmNlIHx8IHt9O1xuXG4gICAgICAgIHJldHVybiB0eXBlb2YgZ2V0RmllbGRzVmFsdWVzID09PSAnZnVuY3Rpb24nID8gZ2V0RmllbGRzVmFsdWVzKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1RydXN0ZWRWYXVsdGluZ0Zsb3cocGF5bWVudERhdGE/OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHBheW1lbnREYXRhICYmIGlzVmF1bHRlZEluc3RydW1lbnQocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBpbnN0cnVtZW50cyA9IHN0YXRlLmdldEluc3RydW1lbnRzKCk7XG4gICAgICAgICAgICBjb25zdCBmaW5kSW5zdHJ1bWVudCA9IGluc3RydW1lbnRzPy5maW5kKFxuICAgICAgICAgICAgICAgIChpbnN0cnVtZW50KSA9PlxuICAgICAgICAgICAgICAgICAgICBpc0Jhc2VJbnN0cnVtZW50KGluc3RydW1lbnQpICYmXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnQuYmlncGF5VG9rZW4gPT09IHBheW1lbnREYXRhLmluc3RydW1lbnRJZCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzID0gaXNCYXNlSW5zdHJ1bWVudChmaW5kSW5zdHJ1bWVudClcbiAgICAgICAgICAgICAgICA/IGZpbmRJbnN0cnVtZW50LnRydXN0ZWRTaGlwcGluZ0FkZHJlc3NcbiAgICAgICAgICAgICAgICA6IHt9O1xuXG4gICAgICAgICAgICByZXR1cm4gISF0cnVzdGVkU2hpcHBpbmdBZGRyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogTG9hZGluZyBJbmRpY2F0b3IgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoaXNMb2FkaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0xvYWRpbmcgJiYgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3Iuc2hvdyh0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogR3VhcmRzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUGF5UGFsVmF1bHRlZEluc3RydW1lbnRQYXltZW50RGF0YShcbiAgICAgICAgcGF5bWVudERhdGE/OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4gICAgKTogcGF5bWVudERhdGEgaXMgVmF1bHRlZEluc3RydW1lbnQgJiBIb3N0ZWRJbnN0cnVtZW50IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICEhcGF5bWVudERhdGEgJiYgaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkgJiYgaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFJlbmRlciBQYXkgTGF0ZXIgTWVzc2FnZXNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSByZW5kZXJNZXNzYWdlcyhcbiAgICAgICAgcGF5cGFsTWVzc2FnZXM6IFBheVBhbE1lc3NhZ2VzU2RrLFxuICAgICAgICBiYW5uZXJDb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBiYW5uZXJDb25maWd1cmF0aW9uOiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsTWVzc2FnZXNPcHRpb25zOiBNZXNzYWdpbmdPcHRpb25zID0ge1xuICAgICAgICAgICAgYW1vdW50OiBjaGVja291dC5vdXRzdGFuZGluZ0JhbGFuY2UsXG4gICAgICAgICAgICBwbGFjZW1lbnQ6ICdwYXltZW50JyxcbiAgICAgICAgICAgIHN0eWxlOiBnZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnKGJhbm5lckNvbmZpZ3VyYXRpb24pLFxuICAgICAgICB9O1xuXG4gICAgICAgIHBheXBhbE1lc3NhZ2VzLk1lc3NhZ2VzKHBheXBhbE1lc3NhZ2VzT3B0aW9ucykucmVuZGVyKGAjJHtiYW5uZXJDb250YWluZXJJZH1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEVycm9yIGhhbmRsaW5nXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUHJvdmlkZXJFcnJvcihlcnJvcjogdW5rbm93bik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoaXNQYXlwYWxDb21tZXJjZVByb3ZpZGVyRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxQcm92aWRlckVycm9yID0gZXJyb3I/LmVycm9ycz8uZmlsdGVyKChlKSA9PiBlLnByb3ZpZGVyX2Vycm9yKSB8fCBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHBheXBhbFByb3ZpZGVyRXJyb3JbMF0/LnByb3ZpZGVyX2Vycm9yPy5jb2RlID09PSAnSU5TVFJVTUVOVF9ERUNMSU5FRCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgQXBwU3dpdGNoIGVuYWJsaW5nIGhhbmRsaW5nXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzUGF5cGFsQ29tbWVyY2VBcHBTd2l0Y2hFbmFibGVkKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaXNBcHBTd2l0Y2hFbmFibGVkIHx8IGZhbHNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzUmVxdWVzdEVycm9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tICcuL2lzLXBheXBhbC1jb21tZXJjZS1wcm92aWRlci1lcnJvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVkaXJlY3RBY3Rpb25FcnJvciBleHRlbmRzIFByb3ZpZGVyRXJyb3Ige1xuICAgIGJvZHk6IHtcbiAgICAgICAgYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdvZmZzaXRlX3JlZGlyZWN0JztcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmw6IHN0cmluZztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNSZWRpcmVjdEFjdGlvbkVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgUmVkaXJlY3RBY3Rpb25FcnJvciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgaXNSZXF1ZXN0RXJyb3IoZXJyb3IpICYmIGVycm9yLmJvZHkuYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQ/LnR5cGUgPT09ICdvZmZzaXRlX3JlZGlyZWN0J1xuICAgICk7XG59XG4iLCJpbXBvcnQgUmVxdWVzdEVycm9yIGZyb20gJy4vcmVxdWVzdC1lcnJvcic7XG5cbi8vIEhhdmUgdG8gdXNlIGBhc2AgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzM5ODcwNDQvdHlwZWd1YXJkaW5nLWFuLXVua25vd24tbmVzdGVkLW9iamVjdCBzaG91bGQgYmUgZml4ZWQgaW4gNC44K1xuY29uc3QgaXNSZXF1ZXN0RXJyb3IgPSAoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBSZXF1ZXN0RXJyb3IgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmIGVycm9yICE9PSBudWxsICYmICdib2R5JyBpbiBlcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzUmVxdWVzdEVycm9yO1xuIiwiZXhwb3J0IGludGVyZmFjZSBQcm92aWRlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGVycm9ycz86IEVycm9yRWxlbWVudFtdO1xuICAgIHN0YXR1cz86IHN0cmluZztcbiAgICB0aHJlZV9kc19yZXN1bHQ/OiB7XG4gICAgICAgIGFjc191cmw6IHVua25vd247XG4gICAgICAgIHBheWVyX2F1dGhfcmVxdWVzdDogdW5rbm93bjtcbiAgICAgICAgbWVyY2hhbnRfZGF0YTogdW5rbm93bjtcbiAgICAgICAgY2FsbGJhY2tfdXJsOiB1bmtub3duO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JFbGVtZW50IHtcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIHByb3ZpZGVyX2Vycm9yPzoge1xuICAgICAgICBjb2RlOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQYXlwYWxDb21tZXJjZVByb3ZpZGVyRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBQcm92aWRlckVycm9yIHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnZXJyb3JzJyBpbiBlcnJvcjtcbn1cbiIsImltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBQYXlQYWxDb21tZXJjZVNkayB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQgeyBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMgfSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtY29uc3RhbnRzJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlUGF5bWVudFN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZVBheW1lbnRTdHJhdGVneTogUGF5bWVudFN0cmF0ZWd5RmFjdG9yeTxQYXlQYWxDb21tZXJjZVBheW1lbnRTdHJhdGVneT4gPSAoXG4gICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbikgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBuZXcgUGF5UGFsQ29tbWVyY2VTZGsoZ2V0U2NyaXB0TG9hZGVyKCkpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZXM6IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyxcbiAgICAgICAgfSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlUGF5bWVudFN0cmF0ZWd5LCBbeyBpZDogJ3BheXBhbGNvbW1lcmNlJyB9XSk7XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIHRyeSB0byBjYWxsIGEgbWV0aG9kIHRoYXQgaXMgb25seSBhIHN0dWIgYW5kIGhhcyBub3RcbiAqIGJlZW4gZnVsbHkgaW1wbGVtZW50ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdEltcGxlbWVudGVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ05vdCBpbXBsZW1lbnRlZC4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnTm90SW1wbGVtZW50ZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdub3RfaW1wbGVtZW50ZWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTm90SW1wbGVtZW50ZWRFcnJvcixcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcixcbiAgICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyxcbiAgICBNZXNzYWdpbmdPcHRpb25zLFxuICAgIFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSxcbiAgICBQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBQYXlQYWxDb21tZXJjZVNkayxcbiAgICBQYXlQYWxNZXNzYWdlc1Nkayxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWNyZWRpdC1wYXltZW50LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsQnV0dG9uPzogUGF5UGFsQ29tbWVyY2VCdXR0b25zO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZTogUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9ucz86IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UsIHBheXBhbGNvbW1lcmNlY3JlZGl0IH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbE9wdGlvbnMgPSBwYXlwYWxjb21tZXJjZWNyZWRpdCB8fCBwYXlwYWxjb21tZXJjZTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5wYXlwYWxjb21tZXJjZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHsgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gPSBbXSwgb3JkZXJJZCB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgYmFubmVyQ29udGFpbmVySWQsIGNvbnRhaW5lciB9ID0gcGF5cGFsT3B0aW9ucztcblxuICAgICAgICBpZiAoYmFubmVyQ29udGFpbmVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChiYW5uZXJDb250YWluZXJJZCkpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byBjcmVhdGUgYmFubmVyIHdpdGhvdXQgdmFsaWQgYmFubmVyIGNvbnRhaW5lciBJRC4nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYmFubmVyQ29uZmlndXJhdGlvbiA9XG4gICAgICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gJiZcbiAgICAgICAgICAgICAgICBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbi5maW5kKCh7IGlkIH0pID0+IGlkID09PSAnY2hlY2tvdXQnKTtcblxuICAgICAgICAgICAgaWYgKCFiYW5uZXJDb25maWd1cmF0aW9uPy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBheXBhbE1lc3NhZ2VzID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVNkay5nZXRQYXlQYWxNZXNzYWdlcyhcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgICAgIHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlck1lc3NhZ2VzKHBheXBhbE1lc3NhZ2VzLCBiYW5uZXJDb250YWluZXJJZCwgYmFubmVyQ29uZmlndXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmZvOlxuICAgICAgICAvLyBUaGUgUGF5UGFsIGJ1dHRvbiBhbmQgZmllbGRzIHNob3VsZCBub3QgYmUgcmVuZGVyZWQgd2hlbiBzaG9wcGVyIHdhcyByZWRpcmVjdGVkIHRvIENoZWNrb3V0IHBhZ2VcbiAgICAgICAgLy8gYWZ0ZXIgdXNpbmcgc21hcnQgcGF5bWVudCBidXR0b24gb24gUERQIG9yIENhcnQgcGFnZS4gSW4gdGhpcyBjYXNlIGJhY2tlbmQgcmV0dXJucyBvcmRlciBpZCBpZlxuICAgICAgICAvLyBpdCBpcyBhdmFpbGFibGUgaW4gY2hlY2tvdXQgc2Vzc2lvbi4gVGhlcmVmb3JlLCBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHJlbmRlciBQYXlQYWwgYnV0dG9uLlxuICAgICAgICBpZiAob3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJZDtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5sb2FkUGF5UGFsU2RrKG1ldGhvZElkKTtcblxuICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIgPSBjb250YWluZXI/LnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgdGhpcy5yZW5kZXJCdXR0b24obWV0aG9kSWQsIHBheXBhbE9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChwYXltZW50Lm1ldGhvZElkLCB0aGlzLm9yZGVySWQpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbj8uY2xvc2UoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCdXR0b24gbWV0aG9kcy9jYWxsYmFja3NcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSByZW5kZXJCdXR0b24oXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbE9wdGlvbnM6IFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBpZiAoIXBheXBhbE9wdGlvbnM/LmNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJjb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxTZGsgPSB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheVBhbFNka09yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgY2hlY2tvdXRQYXltZW50QnV0dG9uU3R5bGVzIH0gPSBwYXltZW50QnV0dG9uU3R5bGVzIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yLCBvblJlbmRlckJ1dHRvbiwgb25WYWxpZGF0ZSwgc3VibWl0Rm9ybSB9ID0gcGF5cGFsT3B0aW9ucztcblxuICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlcyA9IFtwYXlwYWxTZGsuRlVORElORy5QQVlMQVRFUiwgcGF5cGFsU2RrLkZVTkRJTkcuQ1JFRElUXTtcbiAgICAgICAgbGV0IGhhc1JlbmRlcmVkU21hcnRCdXR0b24gPSBmYWxzZTtcblxuICAgICAgICBmdW5kaW5nU291cmNlcy5mb3JFYWNoKChmdW5kaW5nU291cmNlKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYnV0dG9uT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBmdW5kaW5nU291cmNlLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFZhbGlkQnV0dG9uU3R5bGUoXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrb3V0UGF5bWVudEJ1dHRvblN0eWxlcyxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BheXBhbGNvbW1lcmNlY3JlZGl0Y2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IChfLCBhY3Rpb25zKSA9PiB0aGlzLmhhbmRsZUNsaWNrKGFjdGlvbnMsIG9uVmFsaWRhdGUpLFxuICAgICAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGEpID0+IHRoaXMuaGFuZGxlQXBwcm92ZShkYXRhLCBzdWJtaXRGb3JtKSxcbiAgICAgICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKSxcbiAgICAgICAgICAgICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIG9uRXJyb3IpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24gPSBwYXlwYWxTZGsuQnV0dG9ucyhidXR0b25PcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLnBheXBhbEJ1dHRvbi5pc0VsaWdpYmxlKCkgJiYgZnVuZGluZ1NvdXJjZSA9PT0gcGF5cGFsU2RrLkZVTkRJTkcuUEFZTEFURVIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5wYXlwYWxCdXR0b24uaXNFbGlnaWJsZSgpICYmIGZ1bmRpbmdTb3VyY2UgPT09IHBheXBhbFNkay5GVU5ESU5HLkNSRURJVCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgUGF5UGFsICR7ZnVuZGluZ1NvdXJjZX0gaXMgbm90IGF2YWlsYWJsZSBmb3IgeW91ciByZWdpb24uIFBsZWFzZSB1c2UgUGF5UGFsIENoZWNrb3V0IGluc3RlYWQuYCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob25SZW5kZXJCdXR0b24gJiYgdHlwZW9mIG9uUmVuZGVyQnV0dG9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25SZW5kZXJCdXR0b24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24ucmVuZGVyKGNvbnRhaW5lcik7XG4gICAgICAgICAgICBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDbGljayhcbiAgICAgICAgYWN0aW9uczogQ2xpY2tDYWxsYmFja0FjdGlvbnMsXG4gICAgICAgIG9uVmFsaWRhdGU6IFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudEluaXRpYWxpemVPcHRpb25zWydvblZhbGlkYXRlJ10sXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZSwgcmVqZWN0IH0gPSBhY3Rpb25zO1xuXG4gICAgICAgIGNvbnN0IG9uVmFsaWRhdGlvblBhc3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob25WYWxpZGF0ZSAmJiB0eXBlb2Ygb25WYWxpZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9uVmFsaWRhdGUob25WYWxpZGF0aW9uUGFzc2VkLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVBcHByb3ZlKFxuICAgICAgICB7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgc3VibWl0Rm9ybTogUGF5UGFsQ29tbWVyY2VDcmVkaXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ3N1Ym1pdEZvcm0nXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJRDtcblxuICAgICAgICBpZiAoc3VibWl0Rm9ybSAmJiB0eXBlb2Ygc3VibWl0Rm9ybSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3VibWl0Rm9ybSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihcbiAgICAgICAgZXJyb3I6IEVycm9yLFxuICAgICAgICBvbkVycm9yOiBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25FcnJvciddLFxuICAgICk6IHZvaWQge1xuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogTG9hZGluZyBJbmRpY2F0b3IgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoaXNMb2FkaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0xvYWRpbmcgJiYgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3Iuc2hvdyh0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUmVuZGVyIFBheSBMYXRlciBNZXNzYWdlc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHJlbmRlck1lc3NhZ2VzKFxuICAgICAgICBwYXlwYWxNZXNzYWdlczogUGF5UGFsTWVzc2FnZXNTZGssXG4gICAgICAgIGJhbm5lckNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgICAgIGJhbm5lckNvbmZpZ3VyYXRpb246IFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY2hlY2tvdXQgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKS5nZXRDaGVja291dE9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxNZXNzYWdlc09wdGlvbnM6IE1lc3NhZ2luZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbW91bnQ6IGNoZWNrb3V0Lm91dHN0YW5kaW5nQmFsYW5jZSxcbiAgICAgICAgICAgIHBsYWNlbWVudDogJ3BheW1lbnQnLFxuICAgICAgICAgICAgc3R5bGU6IGdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWcoYmFubmVyQ29uZmlndXJhdGlvbiksXG4gICAgICAgIH07XG5cbiAgICAgICAgcGF5cGFsTWVzc2FnZXMuTWVzc2FnZXMocGF5cGFsTWVzc2FnZXNPcHRpb25zKS5yZW5kZXIoYCMke2Jhbm5lckNvbnRhaW5lcklkfWApO1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIH0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWNvbnN0YW50cyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtcGF5bWVudC1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+XG4gICAgbmV3IFBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3Ioe1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzOiBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMsXG4gICAgICAgIH0pLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZVNkaygpLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZUNyZWRpdFBheW1lbnRTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZWNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBOb3RJbXBsZW1lbnRlZEVycm9yLFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS12ZW5tby1wYXltZW50LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50U3RyYXRlZ3kgaW1wbGVtZW50cyBQYXltZW50U3RyYXRlZ3kge1xuICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvckNvbnRhaW5lcj86IHN0cmluZztcbiAgICBwcml2YXRlIG9yZGVySWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXlwYWxCdXR0b24/OiBQYXlQYWxDb21tZXJjZUJ1dHRvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM/OiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2UsIHBheXBhbGNvbW1lcmNldmVubW8gfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgY29uc3QgcGF5cGFsT3B0aW9ucyA9IHBheXBhbGNvbW1lcmNldmVubW8gfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxPcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2V2ZW5tb1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgIC8vIEluZm86XG4gICAgICAgIC8vIFRoZSBQYXlQYWwgYnV0dG9uIGFuZCBmaWVsZHMgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCB3aGVuIHNob3BwZXIgd2FzIHJlZGlyZWN0ZWQgdG8gQ2hlY2tvdXQgcGFnZVxuICAgICAgICAvLyBhZnRlciB1c2luZyBzbWFydCBwYXltZW50IGJ1dHRvbiBvbiBQRFAgb3IgQ2FydCBwYWdlLiBJbiB0aGlzIGNhc2UgYmFja2VuZCByZXR1cm5zIG9yZGVyIGlkIGlmXG4gICAgICAgIC8vIGl0IGlzIGF2YWlsYWJsZSBpbiBjaGVja291dCBzZXNzaW9uLiBUaGVyZWZvcmUsIGl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gcmVuZGVyIFBheVBhbCBidXR0b24uXG4gICAgICAgIGlmIChwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8ub3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/Lm9yZGVySWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyID0gcGF5cGFsT3B0aW9ucy5jb250YWluZXIuc3BsaXQoJyMnKVsxXTtcblxuICAgICAgICB0aGlzLnJlbmRlckJ1dHRvbihtZXRob2RJZCwgcGF5cGFsT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShwYXlsb2FkOiBPcmRlclJlcXVlc3RCb2R5LCBvcHRpb25zPzogUGF5bWVudFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudCwgLi4ub3JkZXIgfSA9IHBheWxvYWQ7XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5vcmRlcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnQubWV0aG9kSWQsIHRoaXMub3JkZXJJZCk7XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uPy5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJ1dHRvbiBtZXRob2RzL2NhbGxiYWNrc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsY29tbWVyY2V2ZW5tbzogUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxQYXlQYWxDb21tZXJjZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IHBheW1lbnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25FcnJvciwgb25SZW5kZXJCdXR0b24sIG9uVmFsaWRhdGUsIHN1Ym1pdEZvcm0gfSA9IHBheXBhbGNvbW1lcmNldmVubW87XG5cbiAgICAgICAgY29uc3QgYnV0dG9uT3B0aW9uczogUGF5UGFsQ29tbWVyY2VCdXR0b25zT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbFNkay5GVU5ESU5HLlZFTk1PLFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmFsaWRCdXR0b25TdHlsZShcbiAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcigncGF5cGFsY29tbWVyY2V2ZW5tb2NoZWNrb3V0JyksXG4gICAgICAgICAgICBvbkNsaWNrOiAoXywgYWN0aW9ucykgPT4gdGhpcy5oYW5kbGVDbGljayhhY3Rpb25zLCBvblZhbGlkYXRlKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGEpID0+IHRoaXMuaGFuZGxlQXBwcm92ZShkYXRhLCBzdWJtaXRGb3JtKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpLFxuICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSA9PiB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBvbkVycm9yKSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbiA9IHBheXBhbFNkay5CdXR0b25zKGJ1dHRvbk9wdGlvbnMpO1xuXG4gICAgICAgIGlmICghdGhpcy5wYXlwYWxCdXR0b24uaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgICAgICAgICBgUGF5UGFsIFZlbm1vIGlzIG5vdCBhdmFpbGFibGUgZm9yIHlvdXIgcmVnaW9uLiBQbGVhc2UgdXNlIFBheVBhbCBDaGVja291dCBpbnN0ZWFkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25SZW5kZXJCdXR0b24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uLnJlbmRlcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlQ2xpY2soXG4gICAgICAgIGFjdGlvbnM6IENsaWNrQ2FsbGJhY2tBY3Rpb25zLFxuICAgICAgICBvblZhbGlkYXRlOiBQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudEluaXRpYWxpemVPcHRpb25zWydvblZhbGlkYXRlJ10sXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZSwgcmVqZWN0IH0gPSBhY3Rpb25zO1xuXG4gICAgICAgIGNvbnN0IG9uVmFsaWRhdGlvblBhc3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gb25WYWxpZGF0ZShvblZhbGlkYXRpb25QYXNzZWQsIHJlamVjdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVBcHByb3ZlKFxuICAgICAgICB7IG9yZGVySUQgfTogQXBwcm92ZUNhbGxiYWNrUGF5bG9hZCxcbiAgICAgICAgc3VibWl0Rm9ybTogUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRJbml0aWFsaXplT3B0aW9uc1snc3VibWl0Rm9ybSddLFxuICAgICk6IHZvaWQge1xuICAgICAgICB0aGlzLm9yZGVySWQgPSBvcmRlcklEO1xuXG4gICAgICAgIHN1Ym1pdEZvcm0oKTtcbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogRXJyb3IsXG4gICAgICAgIG9uRXJyb3I6IFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uRXJyb3InXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICBpZiAob25FcnJvciAmJiB0eXBlb2Ygb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIExvYWRpbmcgSW5kaWNhdG9yIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGlzTG9hZGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoaXNMb2FkaW5nICYmIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLnNob3codGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL2NyZWF0ZS1wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLXZlbm1vLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheVBhbENvbW1lcmNlVmVubW9QYXltZW50U3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VWZW5tb1BheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgICAgIG5ldyBMb2FkaW5nSW5kaWNhdG9yKHsgc3R5bGVzOiB7IGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJyB9IH0pLFxuICAgICk7XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVQYXlQYWxDb21tZXJjZVZlbm1vUGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ3BheXBhbGNvbW1lcmNldmVubW8nIH0sXG5dKTtcbiIsImltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFJlcXVlc3RFcnJvciBmcm9tICcuL3JlcXVlc3QtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgYSByZXF1ZXN0IGZhaWxzIHRvIGNvbXBsZXRlIHdpdGhpbiBpdHMgcmVxdWlyZWQgdGltZWZyYW1lXG4gKiBiZWNhdXNlIG9mIGEgbmV0d29yayBpc3N1ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZW91dEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlIHJlcXVlc3QgaGFzIHRpbWVkIG91dCBvciBhYm9ydGVkLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAndGltZW91dCc7XG4gICAgfVxufVxuIiwiZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlcyB7XG4gICAgW2ZlYXR1cmVOYW1lOiBzdHJpbmddOiBib29sZWFuIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgIGZlYXR1cmVzOiBGZWF0dXJlcyxcbiAgICBleHBlcmltZW50TmFtZTogc3RyaW5nLFxuICAgIGZhbGxiYWNrVmFsdWUgPSB0cnVlLFxuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZlYXR1cmVzW2V4cGVyaW1lbnROYW1lXSA/PyBmYWxsYmFja1ZhbHVlO1xufVxuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxuICAgIFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBUaW1lb3V0RXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgUGF5UGFsQXBtU2RrLCBQYXlQYWxDb21tZXJjZVNkayB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5cGFsLWNvbW1lcmNlLXV0aWxzJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcbmltcG9ydCB7IGlzRXhwZXJpbWVudEVuYWJsZWQgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3V0aWxpdHknO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgICBBcHByb3ZlQ2FsbGJhY2tQYXlsb2FkLFxuICAgIE5vbkluc3RhbnRBbHRlcm5hdGl2ZVBheW1lbnRNZXRob2RzLFxuICAgIFBheVBhbENvbW1lcmNlQnV0dG9ucyxcbiAgICBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbE9yZGVyU3RhdHVzLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50T3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1wYXltZW50LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmNvbnN0IFBPTExJTkdfSU5URVJWQUwgPSAzMDAwO1xuY29uc3QgTUFYX1BPTExJTkdfVElNRSA9IDMwMDAwMDtcblxuZXhwb3J0IGludGVyZmFjZSBSZWRpcmVjdEFjdGlvbkJvZHkge1xuICAgIGJvZHk6IHtcbiAgICAgICAgYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdvZmZzaXRlX3JlZGlyZWN0JztcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmw6IHN0cmluZztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWRpcmVjdEVycm9yIHtcbiAgICBib2R5OiB7XG4gICAgICAgIGFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkOiB7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgcmVkaXJlY3RfdXJsOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsQnV0dG9uPzogUGF5UGFsQ29tbWVyY2VCdXR0b25zO1xuICAgIHByaXZhdGUgcGF5cGFsQXBtcz86IFBheVBhbEFwbVNkaztcbiAgICBwcml2YXRlIHBvbGxpbmdUaW1lciA9IDA7XG4gICAgcHJpdmF0ZSBzdG9wUG9sbGluZyA9IG5vb3A7XG4gICAgcHJpdmF0ZSBpc1BvbGxpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcz86IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgbG9hZGluZ0luZGljYXRvcjogTG9hZGluZ0luZGljYXRvcixcbiAgICAgICAgcHJpdmF0ZSBwb2xsaW5nSW50ZXJ2YWw6IG51bWJlciA9IFBPTExJTkdfSU5URVJWQUwsXG4gICAgICAgIHByaXZhdGUgbWF4UG9sbGluZ0ludGVydmFsVGltZTogbnVtYmVyID0gTUFYX1BPTExJTkdfVElNRSxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJlxuICAgICAgICAgICAgV2l0aFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheXBhbGNvbW1lcmNlLCAvLyBGSVhNRTogdGhpcyBvcHRpb24gaXMgZGVwcmVjYXRlZFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMsXG4gICAgICAgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBwYXlwYWxPcHRpb25zID0gcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMgfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kcyA9IHBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2F0ZXdheUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuZ2F0ZXdheUlkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxPcHRpb25zKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHNcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KFxuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG1ldGhvZElkID09PSAna2xhcm5hJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBvcmRlcklkLCBzaG91bGRSZW5kZXJGaWVsZHMgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHN0YXRlLmdldFN0b3JlQ29uZmlnT3JUaHJvdygpLmNoZWNrb3V0U2V0dGluZ3MuZmVhdHVyZXM7XG5cbiAgICAgICAgdGhpcy5pc1BvbGxpbmdFbmFibGVkID0gaXNFeHBlcmltZW50RW5hYmxlZChcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgJ1BBWVBBTC01MTkyLnBheXBhbF9jb21tZXJjZV9pZGVhbF9wb2xsaW5nJyxcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBJbmZvOlxuICAgICAgICAvLyBUaGUgUGF5UGFsIGJ1dHRvbiBhbmQgZmllbGRzIHNob3VsZCBub3QgYmUgcmVuZGVyZWQgd2hlbiBzaG9wcGVyIHdhcyByZWRpcmVjdGVkIHRvIENoZWNrb3V0IHBhZ2VcbiAgICAgICAgLy8gYWZ0ZXIgdXNpbmcgc21hcnQgcGF5bWVudCBidXR0b24gb24gUERQIG9yIENhcnQgcGFnZS4gSW4gdGhpcyBjYXNlIGJhY2tlbmQgcmV0dXJucyBvcmRlciBpZCBpZlxuICAgICAgICAvLyBpdCBpcyBhdmFpbGFibGUgaW4gY2hlY2tvdXQgc2Vzc2lvbi4gVGhlcmVmb3JlLCBpdCBpcyBub3QgbmVjZXNzYXJ5IHRvIHJlbmRlciBQYXlQYWwgYnV0dG9uLlxuICAgICAgICBpZiAob3JkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJZDtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXlwYWxBcG1zID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZVNkay5nZXRQYXlQYWxBcG1zU2RrKFxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgIHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIgPSBwYXlwYWxPcHRpb25zLmNvbnRhaW5lci5zcGxpdCgnIycpWzFdO1xuXG4gICAgICAgIHRoaXMucmVuZGVyQnV0dG9uKG1ldGhvZElkLCBnYXRld2F5SWQsIHBheXBhbE9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChzaG91bGRSZW5kZXJGaWVsZHMpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRmllbGRzKG1ldGhvZElkLCBwYXlwYWxPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBnYXRld2F5SWQgfSA9IHBheW1lbnQ7XG5cbiAgICAgICAgaWYgKG1ldGhvZElkID09PSAna2xhcm5hJykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmF1bHRfcGF5bWVudF9pbnN0cnVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaW5mbzogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZF9pZDogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZWRpcmVjdEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWRpcmVjdFVybCA9IGVycm9yLmJvZHkuYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQuZGF0YS5yZWRpcmVjdF91cmw7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0VXJsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcmRlcklkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNQb2xsaW5nRW5hYmxlZCAmJiBtZXRob2RJZCA9PT0gJ2lkZWFsJykge1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLmluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKG1ldGhvZElkLCByZXNvbHZlLCByZWplY3QsIGdhdGV3YXlJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICB0aGlzLm9yZGVySWQsXG4gICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMub3JkZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGhpcy5pc1BvbGxpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UG9sbGluZ01lY2hhbmlzbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b24/LmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUG9sbGluZyBtZWNoYW5pc21cbiAgICAgKlxuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICByZXNvbHZlUHJvbWlzZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZCxcbiAgICAgICAgcmVqZWN0UHJvbWlzZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZCxcbiAgICAgICAgZ2F0ZXdheUlkPzogc3RyaW5nLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RvcFBvbGxpbmcgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wb2xsaW5nVGltZXIgKz0gdGhpcy5wb2xsaW5nSW50ZXJ2YWw7XG5cbiAgICAgICAgICAgIGNvbnN0IG9yZGVyU3RhdHVzID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRPcmRlclN0YXR1cyhcbiAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBpc09yZGVyQXBwcm92ZWQgPSBvcmRlclN0YXR1cyA9PT0gUGF5UGFsT3JkZXJTdGF0dXMuQXBwcm92ZWQ7XG4gICAgICAgICAgICBjb25zdCBpc1BvbGxpbmdFcnJvciA9IG9yZGVyU3RhdHVzID09PSBQYXlQYWxPcmRlclN0YXR1cy5Qb2xsaW5nRXJyb3I7XG5cbiAgICAgICAgICAgIGlmIChpc09yZGVyQXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNQb2xsaW5nRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzT3JkZXJBcHByb3ZlZCAmJiB0aGlzLnBvbGxpbmdUaW1lciA8IHRoaXMubWF4UG9sbGluZ0ludGVydmFsVGltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlaW5pdGlhbGl6ZVN0cmF0ZWd5KHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHM6IHRoaXMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihuZXcgVGltZW91dEVycm9yKCkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgICAgIHRoaXMucG9sbGluZ1RpbWVyID0gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0UG9sbGluZ01lY2hhbmlzbSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyByZWluaXRpYWxpemVTdHJhdGVneShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICZcbiAgICAgICAgICAgIFdpdGhQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kZWluaXRpYWxpemUoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgY29uc3QgeyBvbkVycm9yIH0gPSB0aGlzLnBheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzIHx8IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnV0dG9uIG1ldGhvZHMvY2FsbGJhY2tzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBnYXRld2F5SWQ6IHN0cmluZyxcbiAgICAgICAgcGF5cGFsT3B0aW9uczogUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50T3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGF5cGFsQW1wc1NkayA9IHRoaXMuZ2V0UGF5cGFsQW1wc1Nka09yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KFxuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgYnV0dG9uU3R5bGUgfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yLCBvblJlbmRlckJ1dHRvbiwgc3VibWl0Rm9ybSB9ID0gcGF5cGFsT3B0aW9ucztcblxuICAgICAgICBjb25zdCBidXR0b25PcHRpb25zOiBQYXlQYWxDb21tZXJjZUJ1dHRvbnNPcHRpb25zID0ge1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogbWV0aG9kSWQsXG4gICAgICAgICAgICBzdHlsZTogdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRWYWxpZEJ1dHRvblN0eWxlKGJ1dHRvblN0eWxlKSxcbiAgICAgICAgICAgIG9uSW5pdDogKF8sIGFjdGlvbnMpID0+IHBheXBhbE9wdGlvbnMub25Jbml0QnV0dG9uKGFjdGlvbnMpLFxuICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+IHRoaXMub25DcmVhdGVPcmRlcihtZXRob2RJZCwgZ2F0ZXdheUlkLCBwYXlwYWxPcHRpb25zKSxcbiAgICAgICAgICAgIG9uQXBwcm92ZTogKGRhdGEpID0+IHRoaXMuaGFuZGxlQXBwcm92ZShkYXRhLCBzdWJtaXRGb3JtKSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUZhaWx1cmUoZXJyb3IsIG9uRXJyb3IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGFzeW5jIChfLCBhY3Rpb25zKSA9PlxuICAgICAgICAgICAgICAgIHBheXBhbE9wdGlvbnMub25WYWxpZGF0ZShhY3Rpb25zLnJlc29sdmUsIGFjdGlvbnMucmVqZWN0KSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBheXBhbEJ1dHRvbiA9IHBheXBhbEFtcHNTZGsuQnV0dG9ucyhidXR0b25PcHRpb25zKTtcblxuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQnV0dG9uLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25SZW5kZXJCdXR0b24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsQnV0dG9uLnJlbmRlcihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb25DcmVhdGVPcmRlcihcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgZ2F0ZXdheUlkOiBzdHJpbmcsXG4gICAgICAgIHBheXBhbE9wdGlvbnM6IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgeyBvblZhbGlkYXRlIH0gPSBwYXlwYWxPcHRpb25zO1xuXG4gICAgICAgIGNvbnN0IG9uVmFsaWRhdGlvblBhc3NlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IG9uVmFsaWRhdGUob25WYWxpZGF0aW9uUGFzc2VkLCBub29wKTtcblxuICAgICAgICBjb25zdCBvcmRlcklkID0gYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlcihcbiAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kc2NoZWNrb3V0JyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5pc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgY29uc3Qgb3JkZXIgPSB7IHVzZVN0b3JlQ3JlZGl0OiBmYWxzZSB9O1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChtZXRob2RJZCwgb3JkZXJJZCwgZ2F0ZXdheUlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcmRlcklkO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQXBwcm92ZShcbiAgICAgICAgeyBvcmRlcklEIH06IEFwcHJvdmVDYWxsYmFja1BheWxvYWQsXG4gICAgICAgIHN1Ym1pdEZvcm06IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnNbJ3N1Ym1pdEZvcm0nXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcmRlcklkID0gb3JkZXJJRDtcblxuICAgICAgICBzdWJtaXRGb3JtKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVGYWlsdXJlKFxuICAgICAgICBlcnJvcjogRXJyb3IsXG4gICAgICAgIG9uRXJyb3I6IFBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudE9wdGlvbnNbJ29uRXJyb3InXSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICBpZiAob25FcnJvciAmJiB0eXBlb2Ygb25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEZpZWxkcyBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgcmVuZGVyRmllbGRzKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXlwYWxPcHRpb25zOiBQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc1BheW1lbnRPcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCBwYXlwYWxBbXBzU2RrID0gdGhpcy5nZXRQYXlwYWxBbXBzU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIGVtYWlsIH0gPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcblxuICAgICAgICBjb25zdCB7IGFwbUZpZWxkc0NvbnRhaW5lciwgYXBtRmllbGRzU3R5bGVzIH0gPSBwYXlwYWxPcHRpb25zO1xuXG4gICAgICAgIGlmICghYXBtRmllbGRzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHNcIiBhcmd1bWVudCBzaG91bGQgY29udGFpbiBcImFwbUZpZWxkc0NvbnRhaW5lclwiLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmllbGRDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhcG1GaWVsZHNDb250YWluZXIpO1xuXG4gICAgICAgIGlmIChmaWVsZENvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZpZWxkQ29udGFpbmVyRWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpZWxkc09wdGlvbnMgPSB7XG4gICAgICAgICAgICBmdW5kaW5nU291cmNlOiBtZXRob2RJZCxcbiAgICAgICAgICAgIHN0eWxlOiBhcG1GaWVsZHNTdHlsZXMgfHwge30sXG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9YCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVtYWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbWFpbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxQYXltZW50RmllbGRzID0gcGF5cGFsQW1wc1Nkay5QYXltZW50RmllbGRzKGZpZWxkc09wdGlvbnMpO1xuXG4gICAgICAgIHBheXBhbFBheW1lbnRGaWVsZHMucmVuZGVyKGFwbUZpZWxkc0NvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBVdGlsc1xuICAgICAqXG4gICAgICogKi9cbiAgICBwcml2YXRlIGlzTm9uSW5zdGFudFBheW1lbnRNZXRob2QobWV0aG9kSWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gbWV0aG9kSWQudG9VcHBlckNhc2UoKSBpbiBOb25JbnN0YW50QWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheXBhbEFtcHNTZGtPclRocm93KCkge1xuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQXBtcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxBcG1zO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNSZWRpcmVjdEVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgUmVkaXJlY3RFcnJvciB7XG4gICAgICAgIGlmICh0eXBlb2YgZXJyb3IgIT09ICdvYmplY3QnIHx8IGVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGJvZHkgfTogUGFydGlhbDxSZWRpcmVjdEFjdGlvbkJvZHk+ID0gZXJyb3I7XG5cbiAgICAgICAgaWYgKCFib2R5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISFib2R5LmFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkPy5kYXRhLnJlZGlyZWN0X3VybDtcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgY3JlYXRlUGF5UGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UgZnJvbSAnLi4vY3JlYXRlLXBheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyB9IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1jb25zdGFudHMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtYWx0ZXJuYXRpdmUtbWV0aG9kcy1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT5cbiAgICBuZXcgUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZVNkaygpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZXM6IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyxcbiAgICAgICAgfSksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheVBhbENvbW1lcmNlQWx0ZXJuYXRpdmVNZXRob2RzUGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBnYXRld2F5OiAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMnIH0sXG5dKTtcbiIsIi8vIGNvcGllZCBmcm9tIHBhY2thZ2VzL2NvcmUvc3JjL2hvc3RlZC1mb3JtL2hvc3RlZC1maWVsZC10eXBlLnRzXG5cbmVudW0gSG9zdGVkRmllbGRUeXBlIHtcbiAgICBDYXJkQ29kZSA9ICdjYXJkQ29kZScsXG4gICAgQ2FyZENvZGVWZXJpZmljYXRpb24gPSAnY2FyZENvZGVWZXJpZmljYXRpb24nLFxuICAgIENhcmRFeHBpcnkgPSAnY2FyZEV4cGlyeScsXG4gICAgQ2FyZE5hbWUgPSAnY2FyZE5hbWUnLFxuICAgIENhcmROdW1iZXIgPSAnY2FyZE51bWJlcicsXG4gICAgQ2FyZE51bWJlclZlcmlmaWNhdGlvbiA9ICdjYXJkTnVtYmVyVmVyaWZpY2F0aW9uJyxcbiAgICBDYXJkRXhwaXJ5VmVyaWZpY2F0aW9uID0gJ2NhcmRFeHBpcnlWZXJpZmljYXRpb24nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBIb3N0ZWRGaWVsZFR5cGU7XG4iLCJpbXBvcnQgSG9zdGVkRmllbGRUeXBlIGZyb20gJy4vaG9zdGVkLWZpZWxkLXR5cGUnO1xuaW1wb3J0IHsgSG9zdGVkQ2FyZEZpZWxkT3B0aW9uc01hcCwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCB9IGZyb20gJy4vaG9zdGVkLWZvcm0tb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ3JlZGl0Q2FyZEZvcm1GaWVsZHMoXG4gICAgZmllbGRzOiBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbik6IGZpZWxkcyBpcyBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZE51bWJlciBpbiBmaWVsZHMgJiZcbiAgICAgICAgSG9zdGVkRmllbGRUeXBlLkNhcmROYW1lIGluIGZpZWxkcyAmJlxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZEV4cGlyeSBpbiBmaWVsZHNcbiAgICApO1xufVxuIiwiaW1wb3J0IEhvc3RlZEZpZWxkVHlwZSBmcm9tICcuL2hvc3RlZC1maWVsZC10eXBlJztcbmltcG9ydCB7IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAsIEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXAgfSBmcm9tICcuL2hvc3RlZC1mb3JtLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NyZWRpdENhcmRWYXVsdGVkRm9ybUZpZWxkcyhcbiAgICBmaWVsZHM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAgfCBIb3N0ZWRTdG9yZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuKTogZmllbGRzIGlzIEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXAge1xuICAgIHJldHVybiAoXG4gICAgICAgIEhvc3RlZEZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uIGluIGZpZWxkcyAmJlxuICAgICAgICBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb24gaW4gZmllbGRzICYmXG4gICAgICAgIEhvc3RlZEZpZWxkVHlwZS5DYXJkRXhwaXJ5VmVyaWZpY2F0aW9uIGluIGZpZWxkc1xuICAgICk7XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHNob3VsZCBiZSB0aHJvd24gd2hlbiBhIHBheW1lbnQgbWV0aG9kIGV4cGVyaWVuY2VzIHNvbWUga2luZCBvZlxuICogZmFpbHVyZSAoaS5lLjogaXRzIGNsaWVudCBsaWJyYXJ5IHJldHVybnMgYSByZWplY3RlZCBwcm9taXNlKS4gQW5kIHRoZXJlIGlzXG4gKiBubyBvdGhlciBlcnJvciB0eXBlIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0aGFuIHRoaXMgb25lLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgbWVzc2FnZSB8fFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjbGllbnQgbGlicmFyeSBvZiBhIHBheW1lbnQgbWV0aG9kIGhhcyB0aHJvd24gYW4gdW5leHBlY3RlZCBlcnJvci4nLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kRmFpbGVkRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAncGF5bWVudF9tZXRob2RfY2xpZW50X2ludmFsaWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5leHBvcnQgZW51bSBOb3RJbml0aWFsaXplZEVycm9yVHlwZSB7XG4gICAgQ2hlY2tvdXRCdXR0b25Ob3RJbml0aWFsaXplZCxcbiAgICBDdXN0b21lck5vdEluaXRpYWxpemVkLFxuICAgIFBheW1lbnROb3RJbml0aWFsaXplZCxcbiAgICBTaGlwcGluZ05vdEluaXRpYWxpemVkLFxuICAgIFNwYW1Qcm90ZWN0aW9uTm90SW5pdGlhbGl6ZWQsXG59XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiBhIG1ldGhvZCByZXF1aXJlcyBhIGNlcnRhaW4gaW5pdGlhbGl6YXRpb24gY2FsbCB0byBiZVxuICogbWFkZSBmaXJzdC4gU29tZSBvYmplY3RzIGNhbiBiZSBjb25zdHJ1Y3RlZCBidXQgdGhleSBjYW5ub3QgYmUgdXNlZCB1bnRpbCBhXG4gKiBzZXBhcmF0ZSBpbml0aWFsaXphdGlvbiBjYWxsIGlzIG1hZGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdEluaXRpYWxpemVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3VidHlwZTogTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUpIHtcbiAgICAgICAgc3VwZXIoZ2V0RXJyb3JNZXNzYWdlKHN1YnR5cGUpKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnTm90SW5pdGlhbGl6ZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdub3RfaW5pdGlhbGl6ZWQnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKHR5cGU6IE5vdEluaXRpYWxpemVkRXJyb3JUeXBlKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5DdXN0b21lck5vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjdXN0b21lciBzdGVwIG9mIGNoZWNrb3V0IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBwYXltZW50IHN0ZXAgb2YgY2hlY2tvdXQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG5cbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5TaGlwcGluZ05vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBzaGlwcGluZyBzdGVwIG9mIGNoZWNrb3V0IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuU3BhbVByb3RlY3Rpb25Ob3RJbml0aWFsaXplZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgY2hlY2tvdXQgc3BhbSBwcm90ZWN0aW9uIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMge1xuICAgIFtrZXk6IHN0cmluZ106IEFycmF5PHsgbWVzc2FnZTogc3RyaW5nOyB0eXBlOiBzdHJpbmcgfT47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGRldGFpbHM6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscywgbWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBwYXltZW50IGZvcm0gY29udGFpbnMgaW52YWxpZCBkYXRhLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50SW52YWxpZEZvcm1FcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X2ludmFsaWRfZm9ybSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNOaWwsIG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgSG9zdGVkQ2FyZEZpZWxkT3B0aW9ucyxcbiAgICBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuICAgIEhvc3RlZEZpZWxkQmx1ckV2ZW50RGF0YSxcbiAgICBIb3N0ZWRGaWVsZEVudGVyRXZlbnREYXRhLFxuICAgIEhvc3RlZEZpZWxkRm9jdXNFdmVudERhdGEsXG4gICAgSG9zdGVkRmllbGRTdHlsZXNNYXAsXG4gICAgSG9zdGVkRmllbGRUeXBlLFxuICAgIEhvc3RlZEZpZWxkVmFsaWRhdGVFdmVudERhdGEsXG4gICAgSG9zdGVkRm9ybU9wdGlvbnMsXG4gICAgSG9zdGVkSW5wdXRWYWxpZGF0ZUVycm9yRGF0YSxcbiAgICBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhTWFwLFxuICAgIEhvc3RlZEluc3RydW1lbnQsXG4gICAgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBpc0NyZWRpdENhcmRGb3JtRmllbGRzLFxuICAgIGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnQsXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyxcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBWYXVsdGVkSW5zdHJ1bWVudCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQge1xuICAgIGlzUGF5UGFsQ29tbWVyY2VBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIsXG4gICAgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtaW50ZWdyYXRpb24tc2VydmljZSc7XG5pbXBvcnQge1xuICAgIExpYWJpbGl0eVNoaWZ0RW51bSxcbiAgICBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHMsXG4gICAgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzQ29uZmlnLFxuICAgIFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc09uQXBwcm92ZURhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUsXG4gICAgUGF5UGFsQ29tbWVyY2VGaWVsZHMsXG4gICAgUGF5UGFsQ29tbWVyY2VIb3N0ZWRGaWVsZHNSZW5kZXJPcHRpb25zLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGV4ZWN1dGlvblBheW1lbnREYXRhPzogT3JkZXJQYXltZW50UmVxdWVzdEJvZHlbJ3BheW1lbnREYXRhJ107XG4gICAgcHJpdmF0ZSBpc0NyZWRpdENhcmRGb3JtPzogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtPzogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgY2FyZEZpZWxkcz86IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkcztcbiAgICBwcml2YXRlIGN2dkZpZWxkPzogUGF5UGFsQ29tbWVyY2VGaWVsZHM7XG4gICAgcHJpdmF0ZSBleHBpcnlGaWVsZD86IFBheVBhbENvbW1lcmNlRmllbGRzO1xuICAgIHByaXZhdGUgbnVtYmVyRmllbGQ/OiBQYXlQYWxDb21tZXJjZUZpZWxkcztcbiAgICBwcml2YXRlIG5hbWVGaWVsZD86IFBheVBhbENvbW1lcmNlRmllbGRzO1xuXG4gICAgcHJpdmF0ZSBob3N0ZWRGb3JtT3B0aW9ucz86IEhvc3RlZEZvcm1PcHRpb25zO1xuICAgIHByaXZhdGUgcmV0dXJuZWRPcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcmV0dXJuZWRWYXVsdGVkVG9rZW4/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlOiBQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZVNkazogUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzOiBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheXBhbGNvbW1lcmNlY3JlZGl0Y2FyZHMsIHBheXBhbGNvbW1lcmNlIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBwYXlwYWxDb21tZXJjZUluaXRpYWxpemF0aW9uT3B0aW9ucyA9IHBheXBhbGNvbW1lcmNlY3JlZGl0Y2FyZHMgfHwgcGF5cGFsY29tbWVyY2U7XG5cbiAgICAgICAgY29uc3QgeyBmb3JtLCBvbkNyZWRpdENhcmRGaWVsZHNSZW5kZXJpbmdFcnJvciwgb25Mb2FkQ29tcGxldGUgfSA9XG4gICAgICAgICAgICBwYXlwYWxDb21tZXJjZUluaXRpYWxpemF0aW9uT3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZvcm0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcy5mb3JtXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ob3N0ZWRGb3JtT3B0aW9ucyA9IGZvcm07XG5cbiAgICAgICAgdGhpcy5pc0NyZWRpdENhcmRGb3JtID0gaXNDcmVkaXRDYXJkRm9ybUZpZWxkcyhmb3JtLmZpZWxkcyk7XG4gICAgICAgIHRoaXMuaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm0gPVxuICAgICAgICAgICAgaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm1GaWVsZHMoZm9ybS5maWVsZHMpICYmICF0aGlzLmhhc1VuZGVmaW5lZFZhbHVlcygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCwgdW5kZWZpbmVkLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICBvbkxvYWRDb21wbGV0ZT8uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNDcmVkaXRDYXJkRm9ybSB8fCB0aGlzLmlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVGaWVsZHMoZm9ybSwgb25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkSW5pdGlhbGl6ZVBheVBhbEZhc3RsYW5lKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUGF5UGFsRmFzdGxhbmVPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXltZW50RGF0YSB9ID0gcGF5bWVudCB8fCB7fTtcblxuICAgICAgICBpZiAoIXBheW1lbnQgfHwgIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXhlY3V0aW9uUGF5bWVudERhdGEgPSBwYXltZW50RGF0YTtcblxuICAgICAgICBpZiAodGhpcy5pc0NyZWRpdENhcmRGb3JtIHx8IHRoaXMuaXNDcmVkaXRDYXJkVmF1bHRlZEZvcm0pIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudmFsaWRhdGVIb3N0ZWRGb3JtT3JUaHJvdygpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdWJtaXRIb3N0ZWRGb3JtKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNvbmRpdGlvbiBpcyB0cmlnZ2VyZWQgd2hlbiB3ZSBwYXkgd2l0aCB2YXVsdGVkIGluc3RydW1lbnQgYW5kIHNoaXBwaW5nIGFkZHJlc3MgaXMgdHJ1c3RlXG4gICAgICAgICAgICBjb25zdCB7IG9yZGVySWQgfSA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlT3JkZXJDYXJkRmllbGRzKFxuICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0SW5zdHJ1bWVudFBhcmFtcygpLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZE9yZGVySWQgPSBvcmRlcklkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3VibWl0UGF5bWVudFBheWxvYWQgPSB0aGlzLnByZXBhcmVQYXltZW50UGF5bG9hZChcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGEsXG4gICAgICAgICAgICB0aGlzLnJldHVybmVkT3JkZXJJZCxcbiAgICAgICAgICAgIHRoaXMucmV0dXJuZWRWYXVsdGVkVG9rZW4sXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoc3VibWl0UGF5bWVudFBheWxvYWQpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuZXhwaXJ5RmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubnVtYmVyRmllbGQ/LmNsb3NlKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubmFtZUZpZWxkPy5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFN1Ym1pdCBQYXltZW50IFBheWxvYWQgcHJlcGFyaW5nIG1ldGhvZFxuICAgICAqXG4gICAgICogYHZhdWx0ZWRUb2tlbmAgaXMgdXNlZCB3aGVuIHdlIHBheSB3aXRoIHZhdWx0ZWQgaW5zdHJ1bWVudCAod2l0aCB0cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MgYW5kIHVudHJ1c3RlZClcbiAgICAgKiBgc2V0dXBUb2tlbmAgaXMgdXNlZCB3aGVuIHdlIHBheSB3aXRoIHZhdWx0ZWQgaW5zdHJ1bWVudCAodW50cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MpXG4gICAgICogYG9yZGVySWRgIGlzIHVzZWQgaW4gZXZlcnkgY2FzZSAoYmFzaWMgY2FyZCBwYXltZW50LCB0cnVzdGVkIHNoaXBwaW5nIGFkZHJlc3MgYW5kIHVudHJ1c3RlZClcbiAgICAgKi9cbiAgICBwcml2YXRlIHByZXBhcmVQYXltZW50UGF5bG9hZChcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcGF5bWVudERhdGE6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5WydwYXltZW50RGF0YSddLFxuICAgICAgICBvcmRlcklkPzogc3RyaW5nLFxuICAgICAgICBub25jZT86IHN0cmluZyxcbiAgICApOiBQYXltZW50IHtcbiAgICAgICAgY29uc3QgeyBzaG91bGRTYXZlSW5zdHJ1bWVudCA9IGZhbHNlLCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID0gZmFsc2UgfSA9XG4gICAgICAgICAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlKHBheW1lbnREYXRhKSA/IHBheW1lbnREYXRhIDoge307XG5cbiAgICAgICAgY29uc3QgaW5zdHJ1bWVudElkID1cbiAgICAgICAgICAgIHBheW1lbnREYXRhICYmIGlzVmF1bHRlZEluc3RydW1lbnQocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEuaW5zdHJ1bWVudElkIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGJpZ3BheV90b2tlbiA9IG9taXRCeShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2ZXJpZmljYXRpb25fbm9uY2U6IG5vbmNlLFxuICAgICAgICAgICAgICAgIHRva2VuOiBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNOaWwsXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIGluc3RydW1lbnRJZCxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihub25jZSB8fCBpbnN0cnVtZW50SWQgPyB7IGJpZ3BheV90b2tlbiB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICAuLi4ob3JkZXJJZCA/IHsgY2FyZF93aXRoX29yZGVyOiB7IG9yZGVyX2lkOiBvcmRlcklkIH0gfSA6IHt9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENhcmQgZmllbGRzIGluaXRpYWxpemVcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZUZpZWxkcyhcbiAgICAgICAgZm9ybU9wdGlvbnM6IEhvc3RlZEZvcm1PcHRpb25zLFxuICAgICAgICBvbkNyZWRpdENhcmRGaWVsZHNSZW5kZXJpbmdFcnJvcj86IFBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnNbJ29uQ3JlZGl0Q2FyZEZpZWxkc1JlbmRlcmluZ0Vycm9yJ10sXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgZmllbGRzLCBzdHlsZXMgfSA9IGZvcm1PcHRpb25zO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbFNkayA9IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5UGFsU2RrT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBleGVjdXRlQ2FsbGJhY2sgPSB0aGlzLmdldEV4ZWN1dGVDYWxsYmFjayhmaWVsZHMpO1xuXG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHNDb25maWc6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc0NvbmZpZyA9IHtcbiAgICAgICAgICAgIHN0eWxlOiB0aGlzLmdldElucHV0U3R5bGVzKHN0eWxlcyksXG4gICAgICAgICAgICBvbkFwcHJvdmU6ICh7XG4gICAgICAgICAgICAgICAgb3JkZXJJRCxcbiAgICAgICAgICAgICAgICB2YXVsdFNldHVwVG9rZW4sXG4gICAgICAgICAgICAgICAgbGlhYmlsaXR5U2hpZnQsXG4gICAgICAgICAgICB9OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNPbkFwcHJvdmVEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBsaWFiaWxpdHlTaGlmdCA9PT0gTGlhYmlsaXR5U2hpZnRFbnVtLk5vIHx8XG4gICAgICAgICAgICAgICAgICAgIGxpYWJpbGl0eVNoaWZ0ID09PSBMaWFiaWxpdHlTaGlmdEVudW0uVW5rbm93blxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVBcHByb3ZlKHsgb3JkZXJJRCwgdmF1bHRTZXR1cFRva2VuIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uRXJyb3I6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRFdmVudHM6IHtcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogKGV2ZW50KSA9PiB0aGlzLm9uQ2hhbmdlSGFuZGxlcihmb3JtT3B0aW9ucywgZXZlbnQpLFxuICAgICAgICAgICAgICAgIG9uRm9jdXM6IChldmVudCkgPT4gdGhpcy5vbkZvY3VzSGFuZGxlcihmb3JtT3B0aW9ucywgZXZlbnQpLFxuICAgICAgICAgICAgICAgIG9uQmx1cjogKGV2ZW50KSA9PiB0aGlzLm9uQmx1ckhhbmRsZXIoZm9ybU9wdGlvbnMsIGV2ZW50KSxcbiAgICAgICAgICAgICAgICBvbklucHV0U3VibWl0UmVxdWVzdDogKGV2ZW50KSA9PiB0aGlzLm9uSW5wdXRTdWJtaXRSZXF1ZXN0KGZvcm1PcHRpb25zLCBldmVudCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4uZXhlY3V0ZUNhbGxiYWNrLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcyA9IGF3YWl0IHBheXBhbFNkay5DYXJkRmllbGRzKGNhcmRGaWVsZHNDb25maWcpO1xuXG4gICAgICAgIGlmICghdGhpcy5jYXJkRmllbGRzLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxpemVJbnB1dENvbnRhaW5lcnMoZmllbGRzKTtcblxuICAgICAgICAgICAgaWYgKGlzQ3JlZGl0Q2FyZEZvcm1GaWVsZHMoZmllbGRzKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVuZGVyRmllbGRzKGZpZWxkcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0NyZWRpdENhcmRWYXVsdGVkRm9ybUZpZWxkcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZW5kZXJWYXVsdGVkRmllbGRzKGZpZWxkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uQ3JlZGl0Q2FyZEZpZWxkc1JlbmRlcmluZ0Vycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgb25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBHZXQgZXhlY3V0ZSBjYWxsYmFjayBtZXRob2RcbiAgICAgKiBEZXBlbmRzIG9uIHNoaXBwaW5nIGFkZHJlc3MgaXMgdHJ1c3RlZCBvciBub3Qgd2Ugc2hvdWxkIHBhc3MgdG8gUFBcbiAgICAgKiBgY3JlYXRlVmF1bHRTZXR1cFRva2VuYCBjYWxsYmFjayBpZiBhZGRyZXNzIGlzIHVudHJ1c3RlZCBvclxuICAgICAqIGBjcmVhdGVPcmRlcmAgaWYgYWRkcmVzcyBpcyB0cnVzdGVkXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEV4ZWN1dGVDYWxsYmFjayhcbiAgICAgICAgZmllbGRzOiBIb3N0ZWRDYXJkRmllbGRPcHRpb25zTWFwIHwgSG9zdGVkU3RvcmVkQ2FyZEZpZWxkT3B0aW9uc01hcCxcbiAgICApIHtcbiAgICAgICAgY29uc3QgaXNWYXVsdGVkRm9ybSA9IGlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzKGZpZWxkcyk7XG5cbiAgICAgICAgcmV0dXJuIGlzVmF1bHRlZEZvcm0gPyB0aGlzLmNyZWF0ZVZhdWx0U2V0dXBUb2tlbkNhbGxiYWNrKCkgOiB0aGlzLmNyZWF0ZU9yZGVyQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVZhdWx0U2V0dXBUb2tlbkNhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlVmF1bHRTZXR1cFRva2VuOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzZXR1cFRva2VuIH0gPVxuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5jcmVhdGVPcmRlckNhcmRGaWVsZHMoXG4gICAgICAgICAgICAgICAgICAgICAgICAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkc2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmdldEluc3RydW1lbnRQYXJhbXMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR1cFRva2VuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKSkgfHwge307XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0dXBUb2tlbjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVPcmRlckNhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3JlYXRlT3JkZXI6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9yZGVySWQgfSA9XG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyQ2FyZEZpZWxkcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRJbnN0cnVtZW50UGFyYW1zKCksXG4gICAgICAgICAgICAgICAgICAgICkpIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yZGVySWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogb25BcHByb3ZlIG1ldGhvZFxuICAgICAqIFdoZW4gc3VibWl0dGluZyBhIGZvcm0gd2l0aCBhIGBzdWJtaXRIb3N0ZWRGb3JtYCBtZXRob2QgaWYgdGhlcmUgaXMgbm8gZXJyb3JcbiAgICAgKiB0aGVuIG9uQXBwcm92ZSBjYWxsYmFjayBpcyB0cmlnZ2VyZWQgYW5kIGRlcGVuZHMgb24gdGhlIGZsb3dcbiAgICAgKiB3ZSB3aWxsIHJlY2VpdmUgYW4gYG9yZGVySURgIGlmIGl0J3MgYmFzaWMgcGF5aW5nIGFuZCBgdmF1bHRTZXR1cFRva2VuYCBpZiB3ZSBhcmUgcGF5aW5nXG4gICAgICogd2l0aCB2YXVsdGVkIGluc3RydW1lbnQgYW5kIHNoaXBwaW5nIGFkZHJlc3MgaXMgdW50cnVzdGVkXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUFwcHJvdmUoeyBvcmRlcklELCB2YXVsdFNldHVwVG9rZW4gfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzT25BcHByb3ZlRGF0YSkge1xuICAgICAgICBpZiAob3JkZXJJRCkge1xuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZE9yZGVySWQgPSBvcmRlcklEO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhdWx0U2V0dXBUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5yZXR1cm5lZFZhdWx0ZWRUb2tlbiA9IHZhdWx0U2V0dXBUb2tlbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUmVuZGVyaW5nIENhcmQgRmllbGRzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgcmVuZGVyRmllbGRzKGZpZWxkc09wdGlvbnM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXApIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcblxuICAgICAgICBpZiAoZmllbGRzT3B0aW9ucy5jYXJkQ29kZT8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3Z2RmllbGQgPSBjYXJkRmllbGRzLkNWVkZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmRDb2RlLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZEV4cGlyeT8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJ5RmllbGQgPSBjYXJkRmllbGRzLkV4cGlyeUZpZWxkKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4cGlyeUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkRXhwaXJ5LmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZE5hbWU/LmNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVGaWVsZCA9IGNhcmRGaWVsZHMuTmFtZUZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubmFtZUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkTmFtZS5jb250YWluZXJJZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWVsZHNPcHRpb25zLmNhcmROdW1iZXI/LmNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aGlzLm51bWJlckZpZWxkID0gY2FyZEZpZWxkcy5OdW1iZXJGaWVsZCh7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm51bWJlckZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkTnVtYmVyLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyByZW5kZXJWYXVsdGVkRmllbGRzKGZpZWxkc09wdGlvbnM6IEhvc3RlZFN0b3JlZENhcmRGaWVsZE9wdGlvbnNNYXApIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcblxuICAgICAgICBpZiAoZmllbGRzT3B0aW9ucy5jYXJkQ29kZVZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3Z2RmllbGQgPSBjYXJkRmllbGRzLkNWVkZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3Z2RmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmRDb2RlVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZEV4cGlyeVZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJ5RmllbGQgPSBjYXJkRmllbGRzLkV4cGlyeUZpZWxkKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmV4cGlyeUZpZWxkLnJlbmRlcihgIyR7ZmllbGRzT3B0aW9ucy5jYXJkRXhwaXJ5VmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc09wdGlvbnMuY2FyZE51bWJlclZlcmlmaWNhdGlvbj8uY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyRmllbGQgPSBjYXJkRmllbGRzLk51bWJlckZpZWxkKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJycsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubnVtYmVyRmllbGQucmVuZGVyKGAjJHtmaWVsZHNPcHRpb25zLmNhcmROdW1iZXJWZXJpZmljYXRpb24uY29udGFpbmVySWR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEluc3RydW1lbnQgcGFyYW1zIG1ldGhvZFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbnN0cnVtZW50UGFyYW1zKCk6IEhvc3RlZEluc3RydW1lbnQgfCBWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgICAgIGlmICghdGhpcy5leGVjdXRpb25QYXltZW50RGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSG9zdGVkSW5zdHJ1bWVudExpa2UodGhpcy5leGVjdXRpb25QYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2hvdWxkU2F2ZUluc3RydW1lbnQsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgfSA9XG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRpb25QYXltZW50RGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1ZhdWx0ZWRJbnN0cnVtZW50KHRoaXMuZXhlY3V0aW9uUGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCB7IGluc3RydW1lbnRJZCB9ID0gdGhpcy5leGVjdXRpb25QYXltZW50RGF0YTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50SWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoe1xuICAgICAgICBlbWl0dGVkQnksXG4gICAgfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOlxuICAgICAgICB8IEhvc3RlZEZpZWxkQmx1ckV2ZW50RGF0YVxuICAgICAgICB8IEhvc3RlZEZpZWxkRW50ZXJFdmVudERhdGFcbiAgICAgICAgfCBIb3N0ZWRGaWVsZEZvY3VzRXZlbnREYXRhIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZW1pdHRlZEJ5KSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEZvcm0gc3VibWl0IG1ldGhvZFxuICAgICAqIFRyaWdnZXJzIGEgZm9ybSBzdWJtaXRcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgYXN5bmMgc3VibWl0SG9zdGVkRm9ybSgpIHtcbiAgICAgICAgY29uc3QgY2FyZEZpZWxkcyA9IHRoaXMuZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBzdWJtaXRDb25maWcgPSB7XG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczoge1xuICAgICAgICAgICAgICAgIGNvbXBhbnk6IGJpbGxpbmdBZGRyZXNzLmNvbXBhbnksXG4gICAgICAgICAgICAgICAgYWRkcmVzc0xpbmUxOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMSxcbiAgICAgICAgICAgICAgICBhZGRyZXNzTGluZTI6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgICAgIGFkbWluQXJlYTE6IGJpbGxpbmdBZGRyZXNzLnN0YXRlT3JQcm92aW5jZUNvZGUsXG4gICAgICAgICAgICAgICAgYWRtaW5BcmVhMjogYmlsbGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBiaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlOiBiaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FyZEZpZWxkcy5zdWJtaXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2FyZEZpZWxkcy5zdWJtaXQoc3VibWl0Q29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcihcbiAgICAgICAgICAgICAgICAnRmFpbGVkIGF1dGhlbnRpY2F0aW9uLiBQbGVhc2UgdHJ5IHRvIGF1dGhvcml6ZSBhZ2Fpbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVmFsaWRhdGlvbiBhbmQgZXJyb3JzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHZhbGlkYXRlSG9zdGVkRm9ybU9yVGhyb3coKSB7XG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHMgPSB0aGlzLmdldENhcmRGaWVsZHNPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGNhcmRGaWVsZHNTdGF0ZSA9IGF3YWl0IGNhcmRGaWVsZHMuZ2V0U3RhdGUoKS50aGVuKChkYXRhKSA9PiBkYXRhKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbkRhdGEgPSB0aGlzLmdldFZhbGlkaXR5RGF0YShjYXJkRmllbGRzU3RhdGUpO1xuXG4gICAgICAgIGlmICh2YWxpZGF0aW9uRGF0YS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhvc3RlZEZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4odmFsaWRhdGlvbkRhdGEpO1xuXG4gICAgICAgIHRocm93IG5ldyBQYXltZW50SW52YWxpZEZvcm1FcnJvcih0aGlzLm1hcFZhbGlkYXRpb25FcnJvcnModmFsaWRhdGlvbkRhdGEuZXJyb3JzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRWYWxpZGl0eURhdGEoe1xuICAgICAgICBmaWVsZHMsXG4gICAgfTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzU3RhdGUpOiBIb3N0ZWRGaWVsZFZhbGlkYXRlRXZlbnREYXRhIHtcbiAgICAgICAgY29uc3QgdXBkYXRlZEZpZWxkcyA9IHsgLi4uZmllbGRzIH07XG5cbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRGaWVsZHMuY2FyZE5hbWVGaWVsZDtcblxuICAgICAgICBjb25zdCBmaWVsZHNLZXlzID0gT2JqZWN0LmtleXModXBkYXRlZEZpZWxkcykgYXMgQXJyYXk8XG4gICAgICAgICAgICBrZXlvZiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZVsnZmllbGRzJ11cbiAgICAgICAgPjtcblxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gZmllbGRzS2V5cy5ldmVyeSgoa2V5KSA9PiB1cGRhdGVkRmllbGRzW2tleV0/LmlzVmFsaWQpO1xuXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IGZpZWxkc0tleXMucmVkdWNlKChmaWVsZHNFcnJvcnMsIGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRUeXBlID0gdGhpcy5tYXBGaWVsZFR5cGUoa2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5maWVsZHNFcnJvcnMsXG4gICAgICAgICAgICAgICAgW2ZpZWxkVHlwZV06IHVwZGF0ZWRGaWVsZHNba2V5XT8uaXNWYWxpZFxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IFt0aGlzLmdldEludmFsaWRFcnJvckJ5RmllbGRUeXBlKGZpZWxkVHlwZSldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuXG4gICAgICAgIHJldHVybiB7IGlzVmFsaWQsIGVycm9ycyB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SW52YWxpZEVycm9yQnlGaWVsZFR5cGUoZmllbGRUeXBlOiBzdHJpbmcpOiBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmRDb2RlOlxuICAgICAgICAgICAgY2FzZSBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGNvZGUnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX2NvZGUnLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmROdW1iZXI6XG4gICAgICAgICAgICBjYXNlIEhvc3RlZEZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX251bWJlcicsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2FzZSBIb3N0ZWRGaWVsZFR5cGUuQ2FyZEV4cGlyeTpcbiAgICAgICAgICAgIGNhc2UgSG9zdGVkRmllbGRUeXBlLkNhcmRFeHBpcnlWZXJpZmljYXRpb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRUeXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGV4cGlyeScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfZXhwaXJ5JyxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgZmllbGQnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZCcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbWFwVmFsaWRhdGlvbkVycm9ycyhcbiAgICAgICAgdmFsaWRhdGlvbkVycm9yczogSG9zdGVkSW5wdXRWYWxpZGF0ZUVycm9yRGF0YU1hcCA9IHt9LFxuICAgICk6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyB7XG4gICAgICAgIGNvbnN0IGVycm9yczogUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzID0ge307XG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb25FcnJvcnNLZXlzID0gT2JqZWN0LmtleXModmFsaWRhdGlvbkVycm9ycykgYXMgQXJyYXk8XG4gICAgICAgICAgICBrZXlvZiBIb3N0ZWRJbnB1dFZhbGlkYXRlRXJyb3JEYXRhTWFwXG4gICAgICAgID47XG5cbiAgICAgICAgdmFsaWRhdGlvbkVycm9yc0tleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBlcnJvcnNba2V5XSA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHZhbGlkYXRpb25FcnJvcnNba2V5XT8uWzBdPy5tZXNzYWdlIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBrZXksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBGaWVsZHMgbWFwcGVyc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBtYXBGaWVsZFR5cGUodHlwZTogc3RyaW5nKTogSG9zdGVkRmllbGRUeXBlIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gSG9zdGVkRmllbGRUeXBlLkNhcmROYW1lO1xuXG4gICAgICAgICAgICBjYXNlICdjYXJkTnVtYmVyRmllbGQnOlxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0NyZWRpdENhcmRGb3JtXG4gICAgICAgICAgICAgICAgICAgID8gSG9zdGVkRmllbGRUeXBlLkNhcmROdW1iZXJcbiAgICAgICAgICAgICAgICAgICAgOiBIb3N0ZWRGaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvbjtcblxuICAgICAgICAgICAgY2FzZSAnY2FyZEV4cGlyeUZpZWxkJzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGlyeSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNDcmVkaXRDYXJkRm9ybVxuICAgICAgICAgICAgICAgICAgICA/IEhvc3RlZEZpZWxkVHlwZS5DYXJkRXhwaXJ5XG4gICAgICAgICAgICAgICAgICAgIDogSG9zdGVkRmllbGRUeXBlLkNhcmRFeHBpcnlWZXJpZmljYXRpb247XG5cbiAgICAgICAgICAgIGNhc2UgJ2NhcmRDdnZGaWVsZCc6XG4gICAgICAgICAgICBjYXNlICdjdnYnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzQ3JlZGl0Q2FyZEZvcm1cbiAgICAgICAgICAgICAgICAgICAgPyBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVcbiAgICAgICAgICAgICAgICAgICAgOiBIb3N0ZWRGaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb247XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGZpZWxkIHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2FyZEZpZWxkc09yVGhyb3coKTogUGF5UGFsQ29tbWVyY2VDYXJkRmllbGRzIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhcmRGaWVsZHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbml0aWFsaXplZEVycm9yKE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jYXJkRmllbGRzO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SW5wdXRTdHlsZXMoXG4gICAgICAgIHN0eWxlcz86IEhvc3RlZEZpZWxkU3R5bGVzTWFwLFxuICAgICk6IFBheVBhbENvbW1lcmNlSG9zdGVkRmllbGRzUmVuZGVyT3B0aW9uc1snc3R5bGVzJ10ge1xuICAgICAgICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgICAgICAgICAnZm9udC1zaXplJzogc3R5bGVzPy5kZWZhdWx0Py5mb250U2l6ZSB8fCAnMXJlbScsXG4gICAgICAgICAgICAnZm9udC1mYW1pbHknOlxuICAgICAgICAgICAgICAgIHN0eWxlcz8uZGVmYXVsdD8uZm9udEZhbWlseSB8fCAnTW9udHNlcnJhdCwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZicsXG4gICAgICAgICAgICAnZm9udC13ZWlnaHQnOiBzdHlsZXM/LmRlZmF1bHQ/LmZvbnRXZWlnaHQgfHwgJzQwMCcsXG4gICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICBwYWRkaW5nOiAnOXB4IDEzcHgnLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTdHlsZXMgPSB7IC4uLmNvbW1vblN0eWxlcywgY29sb3I6ICcjMzMzMzMzJyB9O1xuICAgICAgICBjb25zdCBlcnJvclN0eWxlcyA9IHsgLi4uY29tbW9uU3R5bGVzLCBjb2xvcjogJ3JlZCcgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgICAnLmludmFsaWQnOiBlcnJvclN0eWxlcyxcbiAgICAgICAgICAgICcudmFsaWQnOiBkZWZhdWx0U3R5bGVzLFxuICAgICAgICAgICAgJzpmb2N1cyc6IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdHlsaXplSW5wdXRDb250YWluZXJzKFxuICAgICAgICBmaWVsZHM6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnNNYXAgfCBIb3N0ZWRTdG9yZWRDYXJkRmllbGRPcHRpb25zTWFwLFxuICAgICk6IHZvaWQge1xuICAgICAgICBPYmplY3QudmFsdWVzKGZpZWxkcyB8fCB7fSkuZm9yRWFjaCgoaWQ6IEhvc3RlZENhcmRGaWVsZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtpZD8uY29udGFpbmVySWQgfHwgJyd9YCk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzBweCc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5ib3hTaGFkb3cgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50JztcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcxMHB4JztcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAnLTVweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzVW5kZWZpbmVkVmFsdWVzKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0ZWRGb3JtT3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5ob3N0ZWRGb3JtT3B0aW9ucy5maWVsZHMpLnNvbWUoXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PiB2YWx1ZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSW5wdXQgZXZlbnRzIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgb25DaGFuZ2VIYW5kbGVyKFxuICAgICAgICBmb3JtT3B0aW9uczogSG9zdGVkRm9ybU9wdGlvbnMsXG4gICAgICAgIGV2ZW50OiBQYXlQYWxDb21tZXJjZUNhcmRGaWVsZHNTdGF0ZSxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih0aGlzLmdldFZhbGlkaXR5RGF0YShldmVudCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25Gb2N1c0hhbmRsZXIoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25Gb2N1cz8uKHRoaXMuZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoZXZlbnQpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uQmx1ckhhbmRsZXIoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25CbHVyPy4odGhpcy5nZXRGaWVsZFR5cGVCeUVtaXR0ZWRGaWVsZChldmVudCkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25JbnB1dFN1Ym1pdFJlcXVlc3QoXG4gICAgICAgIGZvcm1PcHRpb25zOiBIb3N0ZWRGb3JtT3B0aW9ucyxcbiAgICAgICAgZXZlbnQ6IFBheVBhbENvbW1lcmNlQ2FyZEZpZWxkc1N0YXRlLFxuICAgICk6IHZvaWQge1xuICAgICAgICBmb3JtT3B0aW9ucz8ub25FbnRlcj8uKHRoaXMuZ2V0RmllbGRUeXBlQnlFbWl0dGVkRmllbGQoZXZlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCBDb21tZXJjZSBBY2NlbGVyYXRlZCBjaGVja291dCByZWxhdGVkIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIHBhcnQgd2hlbiBQUENQIEFYTyBBL0IgdGVzdGluZyB3aWxsIGJlIGZpbmlzaGVkXG4gICAgcHJpdmF0ZSBzaG91bGRJbml0aWFsaXplUGF5UGFsRmFzdGxhbmUobWV0aG9kSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgY29uc3QgcGF5cGFsQ29tbWVyY2VQYXltZW50UHJvdmlkZXJDdXN0b21lciA9IGlzUGF5UGFsQ29tbWVyY2VBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIoXG4gICAgICAgICAgICBwYXltZW50UHJvdmlkZXJDdXN0b21lcixcbiAgICAgICAgKVxuICAgICAgICAgICAgPyBwYXltZW50UHJvdmlkZXJDdXN0b21lclxuICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhPy5pc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkICYmXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kPy5pbml0aWFsaXphdGlvbkRhdGE/LmlzUGF5UGFsQ29tbWVyY2VBbmFseXRpY3NWMkVuYWJsZWQgJiZcbiAgICAgICAgICAgICFwYXlwYWxDb21tZXJjZVBheW1lbnRQcm92aWRlckN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgcGFydCB3aGVuIFBQQ1AgQVhPIEEvQiB0ZXN0aW5nIHdpbGwgYmUgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVQYXlQYWxGYXN0bGFuZU9yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxpemF0aW9uRGF0YT8uY29ubmVjdENsaWVudFRva2VuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwYXlQYWxGYXN0bGFuZVNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsRmFzdGxhbmVTZGsoXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBjYXJ0LmN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICAgICAgY2FydC5pZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVQYXlQYWxGYXN0bGFuZShcbiAgICAgICAgICAgICAgICBwYXlQYWxGYXN0bGFuZVNkayxcbiAgICAgICAgICAgICAgICAhIWluaXRpYWxpemF0aW9uRGF0YT8uaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKF86IHVua25vd24pIHtcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBhdm9pZCB0aHJvd2luZyBhbnkgZXJyb3IgZnJvbSB0aGlzIGZsb3cgdG8gZG8gbm8gYnJha2UgZGVmYXVsdCBmbG93XG4gICAgICAgICAgICAvLyBUaGlzIGZsb3cgaXMgb3B0aW9uYWxcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQYXlQYWxDb21tZXJjZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICBjdXN0b21lcj86IFBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuKTogY3VzdG9tZXIgaXMgUGF5UGFsQ29ubmVjdEN1c3RvbWVyIHtcbiAgICBpZiAoIWN1c3RvbWVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAnYXV0aGVudGljYXRpb25TdGF0ZScgaW4gY3VzdG9tZXIgfHwgJ2FkZHJlc3NlcycgaW4gY3VzdG9tZXIgfHwgJ2luc3RydW1lbnRzJyBpbiBjdXN0b21lclxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuXG5pbXBvcnQgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRTdHJhdGVneSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1jcmVkaXQtY2FyZHMtcGF5bWVudC1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheXBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VDcmVkaXRDYXJkc1BheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlQYWxDb21tZXJjZUNyZWRpdENhcmRzUGF5bWVudFN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZShwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsoKSxcbiAgICAgICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzKCksXG4gICAgKTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZVBheXBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAncGF5cGFsY29tbWVyY2VjcmVkaXRjYXJkcycgfSxcbl0pO1xuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVGltZW91dEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS1pbnRlZ3JhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7XG4gICAgQmlydGhEYXRlLFxuICAgIFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIFBheVBhbE9yZGVyU3RhdHVzLFxufSBmcm9tICcuLi9wYXlwYWwtY29tbWVyY2UtdHlwZXMnO1xuXG5pbXBvcnQge1xuICAgIFBheXBhbENvbW1lcmNlUmF0ZVBheSxcbiAgICBXaXRoUGF5UGFsQ29tbWVyY2VSYXRlUGF5UGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbC1jb21tZXJjZS1yYXRlcGF5LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmNvbnN0IFBPTExJTkdfSU5URVJWQUwgPSAzMDAwO1xuY29uc3QgTUFYX1BPTExJTkdfVElNRSA9IDMwMDAwMDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGd1aWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXlwYWxjb21tZXJjZXJhdGVwYXk/OiBQYXlwYWxDb21tZXJjZVJhdGVQYXk7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcG9sbGluZ1RpbWVyID0gMDtcbiAgICBwcml2YXRlIHN0b3BQb2xsaW5nID0gbm9vcDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2U6IFBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHByaXZhdGUgcG9sbGluZ0ludGVydmFsOiBudW1iZXIgPSBQT0xMSU5HX0lOVEVSVkFMLFxuICAgICAgICBwcml2YXRlIG1heFBvbGxpbmdJbnRlcnZhbFRpbWU6IG51bWJlciA9IE1BWF9QT0xMSU5HX1RJTUUsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aFBheVBhbENvbW1lcmNlUmF0ZVBheVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBnYXRld2F5SWQsIG1ldGhvZElkLCBwYXlwYWxjb21tZXJjZXJhdGVwYXkgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnYXRld2F5SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nYXRld2F5SWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXBheXBhbGNvbW1lcmNlcmF0ZXBheSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLnBheXBhbGNvbW1lcmNlcmF0ZXBheVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbGVnYWxUZXh0Q29udGFpbmVyLCBjb250YWluZXIsIGxvYWRpbmdDb250YWluZXJJZCB9ID0gcGF5cGFsY29tbWVyY2VyYXRlcGF5O1xuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFsZWdhbFRleHRDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5sZWdhbFRleHRDb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWxvYWRpbmdDb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmxvYWRpbmdDb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IGxvYWRpbmdDb250YWluZXJJZDtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KFxuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgbWVyY2hhbnRJZCB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXJjaGFudElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBtZXJjaGFudElkIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5ID0gcGF5cGFsY29tbWVyY2VyYXRlcGF5O1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheVBhbFNkayhtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVGcmF1ZE5ldFNjcmlwdChtZXJjaGFudElkLCBtZXRob2RJZCwgZ2F0ZXdheUlkKTtcblxuICAgICAgICB0aGlzLmxvYWRGcmF1ZG5ldENvbmZpZygpO1xuXG4gICAgICAgIHRoaXMucmVuZGVyTGVnYWxUZXh0KGxlZ2FsVGV4dENvbnRhaW5lciwgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKHBheWxvYWQ6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gcGF5bG9hZDtcblxuICAgICAgICBjb25zdCB7IGdldEZpZWxkc1ZhbHVlcyB9ID0gdGhpcy5wYXlwYWxjb21tZXJjZXJhdGVwYXkgfHwge307XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZ2V0RmllbGRzVmFsdWVzIHx8IHR5cGVvZiBnZXRGaWVsZHNWYWx1ZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nZXRGaWVsZHNWYWx1ZXNcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG9yZGVySWQgPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZU9yZGVyKFxuICAgICAgICAgICAgICAgICdwYXlwYWxjb21tZXJjZWFsdGVybmF0aXZlbWV0aG9kc2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICB7IG1ldGFkYXRhSWQ6IHRoaXMuZ3VpZCB9LFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgeyByYXRlcGF5QmlydGhEYXRlLCByYXRlcGF5UGhvbmVOdW1iZXIsIHJhdGVwYXlQaG9uZUNvdW50cnlDb2RlIH0gPVxuICAgICAgICAgICAgICAgIGdldEZpZWxkc1ZhbHVlcygpO1xuXG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWx0X3BheW1lbnRfaW5zdHJ1bWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRldmljZV9pbmZvOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RfaWQ6IHBheW1lbnQubWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIHJhdGVfcGF5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaXJ0aF9kYXRlOiB0aGlzLm5vcm1hbGl6ZURhdGUocmF0ZXBheUJpcnRoRGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG9uZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsX251bWJlcjogcmF0ZXBheVBob25lTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlfY29kZTogcmF0ZXBheVBob25lQ291bnRyeUNvZGUuc3BsaXQoJysnKVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlcl9pZDogb3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZDogcGF5bWVudC5tZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwYXltZW50RGF0YSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnQubWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudC5nYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsIHJlamVjdCkgPT4gcmVqZWN0KCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBsZWdhbFRleHRDb250YWluZXIgfSA9IHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5IHx8IHt9O1xuICAgICAgICBjb25zdCBmcmF1ZE5ldFNjcmlwdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWlkPVwiZnJhdWRuZXRTY3JpcHRcIl0nKVswXTtcbiAgICAgICAgY29uc3QgZnJhdWROZXRDb25maWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1pZD1cImZyYXVkbmV0Q29uZmlnXCJdJylbMF07XG5cbiAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG5cbiAgICAgICAgZnJhdWROZXRTY3JpcHQucmVtb3ZlKCk7XG4gICAgICAgIGZyYXVkTmV0Q29uZmlnLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChsZWdhbFRleHRDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZWdhbFRleHRDb250YWluZXIpO1xuXG4gICAgICAgICAgICBsZWdhbFRleHRDb250YWluZXJFbGVtZW50Py5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG5vcm1hbGl6ZURhdGUoZGF0ZTogQmlydGhEYXRlKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSB0aGlzLmZvcm1hdERhdGUoZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRNb250aCA9IHRoaXMuZm9ybWF0RGF0ZShkYXRlLmdldE1vbnRoKCkgKyAxKTtcblxuICAgICAgICByZXR1cm4gYCR7ZGF0ZS5nZXRGdWxsWWVhcigpfS0ke2Zvcm1hdHRlZE1vbnRofS0ke2Zvcm1hdHRlZERhdGV9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdERhdGUoZGF0ZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGUgPCAxMCA/IDAgOiAnJ30ke2RhdGV9YDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckxlZ2FsVGV4dChsZWdhbFRleHRDb250YWluZXJFbGVtZW50SWQ6IHN0cmluZywgY29udGFpbmVyOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbGVnYWxUZXh0Q29udGFpbmVySWQgPSBsZWdhbFRleHRDb250YWluZXJFbGVtZW50SWQ7XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lcklkID0gY29udGFpbmVyLnNwbGl0KCcjJylbMV07XG4gICAgICAgIGNvbnN0IGJ1dHRvbkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJ1dHRvbkNvbnRhaW5lcklkKTtcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyUGFyZW50ID0gYnV0dG9uQ29udGFpbmVyPy5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBsZWdhbFRleHRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBsZWdhbFRleHRDb250YWluZXIuc3R5bGUubWFyZ2luQm90dG9tID0gJzIwcHgnO1xuICAgICAgICBsZWdhbFRleHRDb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsIGxlZ2FsVGV4dENvbnRhaW5lcklkKTtcbiAgICAgICAgYnV0dG9uQ29udGFpbmVyUGFyZW50Py5wcmVwZW5kKGxlZ2FsVGV4dENvbnRhaW5lcik7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlQYWxTZGtPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHJhdGVQYXlCdXR0b24gPSBwYXlwYWxTZGsuTGVnYWwoe1xuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZTogcGF5cGFsU2RrLkxlZ2FsLkZVTkRJTkcuUEFZX1VQT05fSU5WT0lDRSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsZWdhbFRleHRDb250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKGxlZ2FsVGV4dENvbnRhaW5lckVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJhdGVQYXlCdXR0b24ucmVuZGVyKGAjJHtsZWdhbFRleHRDb250YWluZXJJZH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwibGVnYWxUZXh0Q29udGFpbmVyRWxlbWVudFwiIGFyZ3VtZW50IGlzIG5vdCBmb3VuZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBvbkVycm9yIH0gPSB0aGlzLnBheXBhbGNvbW1lcmNlcmF0ZXBheSB8fCB7fTtcblxuICAgICAgICB0aGlzLnJlc2V0UG9sbGluZ01lY2hhbmlzbSgpO1xuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRnJhdWROZXRTY3JpcHQobWVyY2hhbnRJZDogc3RyaW5nLCBtZXRob2RJZDogc3RyaW5nLCBnYXRld2F5SWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQsIGdhdGV3YXlJZCk7XG4gICAgICAgIGNvbnN0IHsgdGVzdE1vZGUgfSA9IHBheW1lbnRNZXRob2QuY29uZmlnO1xuICAgICAgICBjb25zdCBzY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgICAgICAgc2NyaXB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICBzY3JpcHRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm5jbHMnLCAnZm5wYXJhbXMtZGVkZTdjYzUtMTVmZC00Yzc1LWE5ZjQtMzZjNDMwZWUzYTk5Jyk7XG4gICAgICAgIHNjcmlwdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWlkJywgJ2ZyYXVkbmV0U2NyaXB0Jyk7XG4gICAgICAgIHRoaXMuZ3VpZCA9IHRoaXMuZ2VuZXJhdGVHVUlEKCk7XG5cbiAgICAgICAgY29uc3QgZnJhdWROZXRDb25maWcgPSB7XG4gICAgICAgICAgICBmOiB0aGlzLmd1aWQsXG4gICAgICAgICAgICBzOiBgJHttZXJjaGFudElkfV9jaGVja291dC1wYWdlYCxcbiAgICAgICAgICAgIHNhbmRib3g6IHRlc3RNb2RlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHNjcmlwdEVsZW1lbnQuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoZnJhdWROZXRDb25maWcpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2VuZXJhdGVHVUlEKCkge1xuICAgICAgICBsZXQgZ3VpZCA9ICcnO1xuICAgICAgICBjb25zdCBjaGFyYWN0ZXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMyOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVycy5sZW5ndGgpO1xuXG4gICAgICAgICAgICBndWlkICs9IGNoYXJhY3RlcnNbcmFuZG9tSW5kZXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGd1aWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRnJhdWRuZXRDb25maWcoKSB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnLCAnZnJhdWRuZXRDb25maWcnKTtcbiAgICAgICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2MucGF5cGFsLmNvbS9kYS9yL2ZiLmpzJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVpbml0aWFsaXplU3RyYXRlZ3koXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhQYXlQYWxDb21tZXJjZVJhdGVQYXlQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVpbml0aWFsaXplKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBvbGxpbmcgbWVjaGFuaXNtXG4gICAgICpcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcmVzb2x2ZVByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIHJlamVjdFByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIGdhdGV3YXlJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucG9sbGluZ1RpbWVyICs9IHRoaXMucG9sbGluZ0ludGVydmFsO1xuXG4gICAgICAgICAgICBjb25zdCBvcmRlclN0YXR1cyA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgICAgICAgICAgJ3BheXBhbGNvbW1lcmNlYWx0ZXJuYXRpdmVtZXRob2RzJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlTWV0YWRhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IGlzT3JkZXJBcHByb3ZlZCA9IG9yZGVyU3RhdHVzID09PSBQYXlQYWxPcmRlclN0YXR1cy5Qb2xsaW5nU3RvcDtcbiAgICAgICAgICAgIGNvbnN0IGlzUG9sbGluZ0Vycm9yID0gb3JkZXJTdGF0dXMgPT09IFBheVBhbE9yZGVyU3RhdHVzLlBvbGxpbmdFcnJvcjtcblxuICAgICAgICAgICAgaWYgKGlzT3JkZXJBcHByb3ZlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9taXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc1BvbGxpbmdFcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3RQcm9taXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNPcmRlckFwcHJvdmVkICYmIHRoaXMucG9sbGluZ1RpbWVyIDwgdGhpcy5tYXhQb2xsaW5nSW50ZXJ2YWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0UHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheUlkLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVpbml0aWFsaXplU3RyYXRlZ3koe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICBwYXlwYWxjb21tZXJjZXJhdGVwYXk6IHRoaXMucGF5cGFsY29tbWVyY2VyYXRlcGF5LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IobmV3IFRpbWVvdXRFcnJvcigpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3BQb2xsaW5nKCk7XG4gICAgICAgIHRoaXMucG9sbGluZ1RpbWVyID0gMDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlc2V0UG9sbGluZ01lY2hhbmlzbSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBMb2FkaW5nSW5kaWNhdG9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBjcmVhdGVQYXlQYWxDb21tZXJjZUludGVncmF0aW9uU2VydmljZSBmcm9tICcuLi9jcmVhdGUtcGF5cGFsLWNvbW1lcmNlLWludGVncmF0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIH0gZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLWNvbnN0YW50cyc7XG5cbmltcG9ydCBQYXlwYWxDb21tZXJjZVJhdGVwYXlQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtcmF0ZXBheS1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIFBheXBhbENvbW1lcmNlUmF0ZXBheVBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PlxuICAgIG5ldyBQYXlwYWxDb21tZXJjZVJhdGVwYXlQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpLFxuICAgICAgICBuZXcgTG9hZGluZ0luZGljYXRvcih7XG4gICAgICAgICAgICBjb250YWluZXJTdHlsZXM6IHsgLi4uTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTLCBwb3NpdGlvbjogJ2ZpeGVkJyB9LFxuICAgICAgICB9KSxcbiAgICApO1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5cGFsQ29tbWVyY2VSYXRlcGF5UGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBnYXRld2F5OiAncGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMnLCBpZDogJ3JhdGVwYXknIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuLy8gVE9ETzogdXBkYXRlIFBheVBhbENvbm5lY3RDdXN0b21lciB3aXRoIFBheVBhbEZhc3RsYW5lQ3VzdG9tZXJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGF5UGFsRmFzdGxhbmVDdXN0b21lcihcbiAgICBjdXN0b21lcj86IFBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuKTogY3VzdG9tZXIgaXMgUGF5UGFsQ29ubmVjdEN1c3RvbWVyIHtcbiAgICBpZiAoIWN1c3RvbWVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAnYXV0aGVudGljYXRpb25TdGF0ZScgaW4gY3VzdG9tZXIgfHwgJ2FkZHJlc3NlcycgaW4gY3VzdG9tZXIgfHwgJ2luc3RydW1lbnRzJyBpbiBjdXN0b21lclxuICAgICk7XG59XG4iLCJpbXBvcnQge1xuICAgIENhcmRJbnN0cnVtZW50LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcixcbiAgICBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHtcbiAgICBnZXRGYXN0bGFuZVN0eWxlcyxcbiAgICBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIsXG4gICAgaXNQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvcixcbiAgICBQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMsXG4gICAgUGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQ29tbWVyY2VTZGssXG4gICAgUGF5UGFsRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLFxuICAgIFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHMsXG4gICAgUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICBQYXlQYWxGYXN0bGFuZVBheW1lbnRGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIFBheVBhbEZhc3RsYW5lU2RrLFxuICAgIFREU2VjdXJlQXV0aGVudGljYXRpb25TdGF0ZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXlwYWwtY29tbWVyY2UtdXRpbHMnO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXJlcXVlc3Qtc2VuZGVyJztcbmltcG9ydCB7IExpYWJpbGl0eVNoaWZ0RW51bSB9IGZyb20gJy4uL3BheXBhbC1jb21tZXJjZS10eXBlcyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZUZhc3RsYW5lUGF5bWVudEluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsLWNvbW1lcmNlLWZhc3RsYW5lLXBheW1lbnQtaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5cGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXlwYWxDb21wb25lbnRNZXRob2RzPzogUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50TWV0aG9kcztcbiAgICBwcml2YXRlIHBheXBhbEZhc3RsYW5lU2RrPzogUGF5UGFsRmFzdGxhbmVTZGs7XG4gICAgcHJpdmF0ZSB0aHJlZURTVmVyaWZpY2F0aW9uTWV0aG9kPzogc3RyaW5nO1xuICAgIHByaXZhdGUgcGF5cGFsY29tbWVyY2VmYXN0bGFuZT86IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBvcmRlcklkPzogc3RyaW5nO1xuICAgIHByaXZhdGUgbWV0aG9kSWQ/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlUmVxdWVzdFNlbmRlcjogUGF5UGFsQ29tbWVyY2VSZXF1ZXN0U2VuZGVyLFxuICAgICAgICBwcml2YXRlIHBheXBhbENvbW1lcmNlU2RrOiBQYXlQYWxDb21tZXJjZVNkayxcbiAgICAgICAgcHJpdmF0ZSBwYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHM6IFBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyxcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERlZmF1bHQgbWV0aG9kc1xuICAgICAqXG4gICAgICogKi9cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5cGFsY29tbWVyY2VmYXN0bGFuZSB9ID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5tZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VmYXN0bGFuZSA9IHBheXBhbGNvbW1lcmNlZmFzdGxhbmU7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWxjb21tZXJjZWZhc3RsYW5lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkluaXQgfHwgdHlwZW9mIHBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25Jbml0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkluaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQgb3IgaXQgaXMgbm90IGEgZnVuY3Rpb24uJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZSB8fFxuICAgICAgICAgICAgdHlwZW9mIHBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25DaGFuZ2UgIT09ICdmdW5jdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBpc0RldmVsb3Blck1vZGVBcHBsaWNhYmxlLCBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQgfSA9XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YSB8fCB7fTtcblxuICAgICAgICB0aGlzLnRocmVlRFNWZXJpZmljYXRpb25NZXRob2QgPVxuICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LnRocmVlRFNWZXJpZmljYXRpb25NZXRob2Q7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxGYXN0bGFuZVNkayA9IGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VTZGsuZ2V0UGF5UGFsRmFzdGxhbmVTZGsoXG4gICAgICAgICAgICBwYXltZW50TWV0aG9kLFxuICAgICAgICAgICAgY2FydC5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgY2FydC5pZCxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxGYXN0bGFuZVN0eWxpbmcgPSBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWRcbiAgICAgICAgICAgID8gcGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhPy5mYXN0bGFuZVN0eWxlc1xuICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICBjb25zdCBmYXN0bGFuZVN0eWxlcyA9IGdldEZhc3RsYW5lU3R5bGVzKFxuICAgICAgICAgICAgcGF5cGFsRmFzdGxhbmVTdHlsaW5nLFxuICAgICAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZT8uc3R5bGVzLFxuICAgICAgICApO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVQYXlQYWxGYXN0bGFuZShcbiAgICAgICAgICAgIHRoaXMucGF5cGFsRmFzdGxhbmVTZGssXG4gICAgICAgICAgICAhIWlzRGV2ZWxvcGVyTW9kZUFwcGxpY2FibGUsXG4gICAgICAgICAgICBmYXN0bGFuZVN0eWxlcyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAodGhpcy5zaG91bGRSdW5BdXRoZW50aWNhdGlvbkZsb3coKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5ydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZVBheVBhbFBheW1lbnRDb21wb25lbnQoKTtcblxuICAgICAgICBwYXlwYWxjb21tZXJjZWZhc3RsYW5lLm9uSW5pdCgoY29udGFpbmVyOiBzdHJpbmcpID0+XG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbFBheW1lbnRDb21wb25lbnQoY29udGFpbmVyKSxcbiAgICAgICAgKTtcbiAgICAgICAgcGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkNoYW5nZSgoKSA9PiB0aGlzLmhhbmRsZVBheVBhbFN0b3JlZEluc3RydW1lbnRDaGFuZ2UobWV0aG9kSWQpKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKG9yZGVyUmVxdWVzdDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBvcmRlclJlcXVlc3Q7XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEsIG1ldGhvZElkIH0gPSBwYXltZW50O1xuXG4gICAgICAgIGNvbnN0IGlzVmF1bHRlZEZsb3cgPSBwYXltZW50RGF0YSAmJiBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgY29uc3QgcGF5bWVudFBheWxvYWQgPSBpc1ZhdWx0ZWRGbG93XG4gICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLnByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCBwYXltZW50RGF0YSlcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnRQYXlsb2FkKG1ldGhvZElkLCBwYXltZW50RGF0YSk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50PFBheVBhbEZhc3RsYW5lUGF5bWVudEZvcm1hdHRlZFBheWxvYWQ+KFxuICAgICAgICAgICAgICAgIHBheW1lbnRQYXlsb2FkLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMucmVtb3ZlU3RvcmFnZVNlc3Npb25JZCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3IoZXJyb3IpICYmXG4gICAgICAgICAgICAgICAgZXJyb3IucmVzcG9uc2UuYm9keS5uYW1lID09PSAnSU5WQUxJRF9SRVFVRVNUJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZFJlcXVlc3RFcnJvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25LZXk6ICdwYXltZW50LmVycm9ycy5pbnZhbGlkX3JlcXVlc3RfZXJyb3InLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGludmFsaWRSZXF1ZXN0RXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgIT09ICdGYXN0bGFuZUVycm9yJykge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEF1dGhlbnRpY2F0aW9uIGZsb3cgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG91bGRSdW5BdXRoZW50aWNhdGlvbkZsb3coKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBwYXltZW50UHJvdmlkZXJDdXN0b21lciA9IHN0YXRlLmdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyKCk7XG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lQ3VzdG9tZXIgPSBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIocGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIpXG4gICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICA6IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID0gdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMuZ2V0U3RvcmFnZVNlc3Npb25JZCgpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFjdXN0b21lci5pc0d1ZXN0IHx8XG4gICAgICAgICAgICBwYXlwYWxGYXN0bGFuZUN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhcGF5cGFsRmFzdGxhbmVDdXN0b21lcj8uYXV0aGVudGljYXRpb25TdGF0ZSAmJiBwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCA9PT0gY2FydC5pZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJ1blBheVBhbEF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXJFbWFpbCA9IGN1c3RvbWVyPy5lbWFpbCB8fCBiaWxsaW5nQWRkcmVzcz8uZW1haWwgfHwgJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgY3VzdG9tZXJDb250ZXh0SWQgfSA9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMubG9va3VwQ3VzdG9tZXJPclRocm93KGN1c3RvbWVyRW1haWwpO1xuXG4gICAgICAgICAgICBjb25zdCBhdXRoZW50aWNhdGlvblJlc3VsdCA9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMudHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3coXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyQ29udGV4dElkLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgYXV0aGVudGljYXRpb25TdGF0ZSwgYWRkcmVzc2VzLCBpbnN0cnVtZW50cyB9ID1cbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5tYXBQYXlQYWxGYXN0bGFuZVByb2ZpbGVUb0JjQ3VzdG9tZXJEYXRhKFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25SZXN1bHQsXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVBheW1lbnRQcm92aWRlckN1c3RvbWVyKHtcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlLFxuICAgICAgICAgICAgICAgIGFkZHJlc3NlcyxcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50cyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBpc0F1dGhlbnRpY2F0aW9uRmxvd0NhbmNlbGVkID1cbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblJlc3VsdC5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIFBheVBhbEZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRDtcblxuICAgICAgICAgICAgaWYgKGlzQXV0aGVudGljYXRpb25GbG93Q2FuY2VsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5yZW1vdmVTdG9yYWdlU2Vzc2lvbklkKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLnVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQoY2FydC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBJbmZvOiBEbyBub3QgdGhyb3cgYW55dGhpbmcgaGVyZSB0byBhdm9pZCBibG9ja2luZyBjdXN0b21lciBmcm9tIHBhc3NpbmcgY2hlY2tvdXQgZmxvd1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgRmFzdGxhbmUgQ2FyZCBDb21wb25lbnQgcmVuZGVyaW5nIG1ldGhvZFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUGF5UGFsUGF5bWVudENvbXBvbmVudCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcbiAgICAgICAgY29uc3QgcGhvbmUgPSBiaWxsaW5nQWRkcmVzcy5waG9uZTtcbiAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBgJHtiaWxsaW5nQWRkcmVzcy5maXJzdE5hbWV9ICR7YmlsbGluZ0FkZHJlc3MubGFzdE5hbWV9YC50cmltKCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsRmFzdGxhbmUgPSB0aGlzLnBheXBhbENvbW1lcmNlRmFzdGxhbmVVdGlscy5nZXRQYXlQYWxGYXN0bGFuZU9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCBjYXJkQ29tcG9uZW50T3B0aW9uczogUGF5UGFsRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IGZ1bGxOYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKHBob25lICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IHBob25lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBheXBhbENvbXBvbmVudE1ldGhvZHMgPSBhd2FpdCBwYXlwYWxGYXN0bGFuZS5GYXN0bGFuZUNhcmRDb21wb25lbnQoXG4gICAgICAgICAgICBjYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbFBheW1lbnRDb21wb25lbnQoY29udGFpbmVyPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHBheXBhbENvbXBvbmVudE1ldGhvZHMgPSB0aGlzLmdldFBheVBhbENvbXBvbmVudE1ldGhvZHNPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHJlbmRlciBjYXJkIGNvbXBvbmVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF5cGFsQ29tcG9uZW50TWV0aG9kcy5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheVBhbENvbXBvbmVudE1ldGhvZHNPclRocm93KCk6IFBheVBhbEZhc3RsYW5lQ2FyZENvbXBvbmVudE1ldGhvZHMge1xuICAgICAgICBpZiAoIXRoaXMucGF5cGFsQ29tcG9uZW50TWV0aG9kcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxDb21wb25lbnRNZXRob2RzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUGF5bWVudCBQYXlsb2FkIHByZXBhcmF0aW9uIG1ldGhvZHNcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgcHJlcGFyZVZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudFBheWxvYWQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHBheW1lbnREYXRhOiBWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICApOiBQcm9taXNlPFBheW1lbnQ8UGF5UGFsRmFzdGxhbmVQYXltZW50Rm9ybWF0dGVkUGF5bG9hZD4+IHtcbiAgICAgICAgY29uc3QgeyBpbnN0cnVtZW50SWQgfSA9IHBheW1lbnREYXRhO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PFBheVBhbENvbW1lcmNlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IGlzM0RTRW5hYmxlZCA9XG4gICAgICAgICAgICB0aGlzLmlzUGF5cGFsQ29tbWVyY2VGYXN0bGFuZVRocmVlRFNBdmFpbGFibGUoKSAmJiBwYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG5cbiAgICAgICAgaWYgKCFpczNEU0VuYWJsZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlT3JkZXIoaW5zdHJ1bWVudElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lVG9rZW4gPSBpczNEU0VuYWJsZWQgPyBhd2FpdCB0aGlzLmdldDNEU05vbmNlKGluc3RydW1lbnRJZCkgOiBpbnN0cnVtZW50SWQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9mYXN0bGFuZV90b2tlbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHRoaXMub3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBmYXN0bGFuZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcHJlcGFyZVBheW1lbnRQYXlsb2FkKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBwYXltZW50RGF0YTogT3JkZXJQYXltZW50UmVxdWVzdEJvZHlbJ3BheW1lbnREYXRhJ10sXG4gICAgKTogUHJvbWlzZTxQYXltZW50PFBheVBhbEZhc3RsYW5lUGF5bWVudEZvcm1hdHRlZFBheWxvYWQ+PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8UGF5UGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBmdWxsTmFtZSA9IGAke2JpbGxpbmdBZGRyZXNzLmZpcnN0TmFtZX0gJHtiaWxsaW5nQWRkcmVzcy5sYXN0TmFtZX1gLnRyaW0oKTtcblxuICAgICAgICBjb25zdCB7IGdldFBheW1lbnRUb2tlbiB9ID0gdGhpcy5nZXRQYXlQYWxDb21wb25lbnRNZXRob2RzT3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IHsgaWQgfSA9IGF3YWl0IGdldFBheW1lbnRUb2tlbih7XG4gICAgICAgICAgICBuYW1lOiB7IGZ1bGxOYW1lIH0sXG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczogdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMubWFwQmNUb1BheVBhbEFkZHJlc3MoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBpczNEU0VuYWJsZWQgPVxuICAgICAgICAgICAgdGhpcy5pc1BheXBhbENvbW1lcmNlRmFzdGxhbmVUaHJlZURTQXZhaWxhYmxlKCkgJiYgcGF5bWVudE1ldGhvZC5jb25maWcuaXMzZHNFbmFibGVkO1xuXG4gICAgICAgIGlmICghaXMzRFNFbmFibGVkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZU9yZGVyKGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lVG9rZW4gPSBpczNEU0VuYWJsZWQgPyBhd2FpdCB0aGlzLmdldDNEU05vbmNlKGlkKSA6IGlkO1xuXG4gICAgICAgIGNvbnN0IHsgc2hvdWxkU2F2ZUluc3RydW1lbnQgPSBmYWxzZSwgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCA9IGZhbHNlIH0gPVxuICAgICAgICAgICAgaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSkgPyBwYXltZW50RGF0YSA6IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgLi4ucGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2F2ZUluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheXBhbF9mYXN0bGFuZV90b2tlbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IHRoaXMub3JkZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBmYXN0bGFuZVRva2VuLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlT3JkZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0SWQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmlkO1xuICAgICAgICBpZiAodGhpcy5tZXRob2RJZCkge1xuICAgICAgICAgICAgY29uc3QgeyBvcmRlcklkIH0gPSBhd2FpdCB0aGlzLnBheXBhbENvbW1lcmNlUmVxdWVzdFNlbmRlci5jcmVhdGVPcmRlcih0aGlzLm1ldGhvZElkLCB7XG4gICAgICAgICAgICAgICAgY2FydElkLFxuICAgICAgICAgICAgICAgIGZhc3RsYW5lVG9rZW46IGlkLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMub3JkZXJJZCA9IG9yZGVySWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIDNEU2VjdXJlIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBnZXQzRFNOb25jZShwYXlwYWxOb25jZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IG9yZGVyID0gc3RhdGUuZ2V0T3JkZXJPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGNoZWNrb3V0VXJsID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkubGlua3MuY2hlY2tvdXRMaW5rO1xuXG4gICAgICAgIGNvbnN0IHRocmVlRG9tYWluU2VjdXJlQ29tcG9uZW50ID0gdGhpcy5wYXlwYWxGYXN0bGFuZVNkaz8uVGhyZWVEb21haW5TZWN1cmVDbGllbnQ7XG5cbiAgICAgICAgaWYgKCF0aHJlZURvbWFpblNlY3VyZUNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aHJlZURvbWFpblNlY3VyZVBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICBhbW91bnQ6IG9yZGVyLm9yZGVyQW1vdW50LnRvRml4ZWQoMiksXG4gICAgICAgICAgICBjdXJyZW5jeTogY2FydC5jdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgbm9uY2U6IHBheXBhbE5vbmNlLFxuICAgICAgICAgICAgdGhyZWVEU1JlcXVlc3RlZDogdGhpcy50aHJlZURTVmVyaWZpY2F0aW9uTWV0aG9kID09PSAnU0NBX0FMV0FZUycsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBleHBlcmllbmNlX2NvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiAnZW4tVVMnLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5fdXJsOiBjaGVja291dFVybCxcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsX3VybDogY2hlY2tvdXRVcmwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaXNUaHJlZURvbWFpblNlY3VyZUVsaWdpYmxlID0gYXdhaXQgdGhyZWVEb21haW5TZWN1cmVDb21wb25lbnQuaXNFbGlnaWJsZShcbiAgICAgICAgICAgIHRocmVlRG9tYWluU2VjdXJlUGFyYW1ldGVycyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNUaHJlZURvbWFpblNlY3VyZUVsaWdpYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB7IGxpYWJpbGl0eVNoaWZ0LCBhdXRoZW50aWNhdGlvblN0YXRlLCBub25jZSB9ID1cbiAgICAgICAgICAgICAgICBhd2FpdCB0aHJlZURvbWFpblNlY3VyZUNvbXBvbmVudC5zaG93KCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBsaWFiaWxpdHlTaGlmdCA9PT0gTGlhYmlsaXR5U2hpZnRFbnVtLk5vIHx8XG4gICAgICAgICAgICAgICAgbGlhYmlsaXR5U2hpZnQgPT09IExpYWJpbGl0eVNoaWZ0RW51bS5Vbmtub3duIHx8XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRpb25TdGF0ZSA9PT0gVERTZWN1cmVBdXRoZW50aWNhdGlvblN0YXRlLkVycm9yZWQgfHxcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlID09PSBURFNlY3VyZUF1dGhlbnRpY2F0aW9uU3RhdGUuQ2FuY2VsbGVkXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYXV0aGVudGljYXRpb25TdGF0ZSA9PT0gVERTZWN1cmVBdXRoZW50aWNhdGlvblN0YXRlLlN1Y2NlZWRlZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlT3JkZXIobm9uY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub25jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXlwYWxOb25jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCBGYXN0bGFuZSBpbnN0cnVtZW50IGNoYW5nZVxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVQYXlQYWxTdG9yZWRJbnN0cnVtZW50Q2hhbmdlKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8Q2FyZEluc3RydW1lbnQgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgcGF5cGFsQXhvU2RrID0gdGhpcy5wYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMuZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBzZWxlY3Rpb25DaGFuZ2VkLCBzZWxlY3RlZENhcmQgfSA9IGF3YWl0IHBheXBhbEF4b1Nkay5wcm9maWxlLnNob3dDYXJkU2VsZWN0b3IoKTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lQ3VzdG9tZXIgPSBpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIocGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIpXG4gICAgICAgICAgICAgICAgPyBwYXltZW50UHJvdmlkZXJDdXN0b21lclxuICAgICAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkSW5zdHJ1bWVudCA9IHRoaXMucGF5cGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLm1hcFBheVBhbFRvQmNJbnN0cnVtZW50KFxuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ2FyZCxcbiAgICAgICAgICAgIClbMF07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgLi4ucGF5cGFsRmFzdGxhbmVDdXN0b21lcixcbiAgICAgICAgICAgICAgICBpbnN0cnVtZW50czogW3NlbGVjdGVkSW5zdHJ1bWVudF0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkSW5zdHJ1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBQYXlQYWwgRmFzdGxhbmUgZXhwZXJpbWVudHMgaGFuZGxpbmdcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNQYXlwYWxDb21tZXJjZUZhc3RsYW5lVGhyZWVEU0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuXG4gICAgICAgIHJldHVybiBpc0V4cGVyaW1lbnRFbmFibGVkKGZlYXR1cmVzLCAnUFJPSkVDVC03MDgwLnBheXBhbGNvbW1lcmNlX2Zhc3RsYW5lX3RocmVlX2RzJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bik6IHZvaWQge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnBheXBhbGNvbW1lcmNlZmFzdGxhbmU/Lm9uRXJyb3IgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnBheXBhbGNvbW1lcmNlZmFzdGxhbmUub25FcnJvciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsY29tbWVyY2VmYXN0bGFuZS5vbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3Ige1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcmVzcG9uc2U6IHtcbiAgICAgICAgYm9keToge1xuICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGF5cGFsRmFzdGxhbmVSZXF1ZXN0RXJyb3IoXG4gICAgZXJyb3I6IHVua25vd24sXG4pOiBlcnJvciBpcyBQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxuICAgICAgICAnbWVzc2FnZScgaW4gZXJyb3IgJiZcbiAgICAgICAgJ3Jlc3BvbnNlJyBpbiBlcnJvciAmJlxuICAgICAgICAnYm9keScgaW4gKGVycm9yIGFzIFBheXBhbEZhc3RsYW5lUmVxdWVzdEVycm9yKS5yZXNwb25zZSAmJlxuICAgICAgICAnbmFtZScgaW4gKGVycm9yIGFzIFBheXBhbEZhc3RsYW5lUmVxdWVzdEVycm9yKS5yZXNwb25zZS5ib2R5XG4gICAgKTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVJlcXVlc3RTZW5kZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7XG4gICAgY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVV0aWxzLFxuICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheXBhbC1jb21tZXJjZS11dGlscyc7XG5cbmltcG9ydCBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vcGF5cGFsLWNvbW1lcmNlLXJlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9wYXlwYWwtY29tbWVyY2UtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgeyBnZXRIb3N0IH0gPSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICByZXR1cm4gbmV3IFBheVBhbENvbW1lcmNlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIG5ldyBQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIoY3JlYXRlUmVxdWVzdFNlbmRlcih7IGhvc3Q6IGdldEhvc3QoKSB9KSksXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlU2RrKCksXG4gICAgICAgIGNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscygpLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlUGF5UGFsQ29tbWVyY2VGYXN0bGFuZVBheW1lbnRTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdwYXlwYWxjb21tZXJjZWFjY2VsZXJhdGVkY2hlY2tvdXQnIH0sIC8vIFBheVBhbCBGYXN0bGFuZSByZWxhdGVzIHRvICdwYXlwYWxjb21tZXJjZWFjY2VsZXJhdGVkY2hlY2tvdXQnIG1ldGhvZCBpZFxuXSk7XG4iXSwibmFtZXMiOlsiTWlzc2luZ0RhdGFFcnJvclR5cGUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwidG9SZXNvbHZhYmxlTW9kdWxlIiwibW9kdWxlIiwicmVzb2x2ZUlkcyIsIk9iamVjdCIsImFzc2lnbiIsImQiLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3RhbmRhcmRFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwic3VwZXIiLCJuYW1lIiwidHlwZSIsInNldFByb3RvdHlwZU9mIiwidGhpcyIsIl9fcHJvdG9fXyIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2siLCJQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvciIsIk1pc3NpbmdEYXRhRXJyb3IiLCJzdWJ0eXBlIiwiTWlzc2luZ0JpbGxpbmdBZGRyZXNzIiwiTWlzc2luZ0NhcnQiLCJNaXNzaW5nQ29uc2lnbm1lbnRzIiwiTWlzc2luZ0NoZWNrb3V0IiwiTWlzc2luZ0N1c3RvbWVyIiwiTWlzc2luZ0NoZWNrb3V0Q29uZmlnIiwiTWlzc2luZ09yZGVyQ29uZmlnIiwiTWlzc2luZ09yZGVyIiwiTWlzc2luZ09yZGVySWQiLCJNaXNzaW5nUGF5bWVudCIsIk1pc3NpbmdQYXltZW50VG9rZW4iLCJNaXNzaW5nUGF5bWVudE1ldGhvZCIsIk1pc3NpbmdTaGlwcGluZ0FkZHJlc3MiLCJnZXRFcnJvck1lc3NhZ2UiLCJCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvciIsIkRFRkFVTFRfUkVTUE9OU0UiLCJib2R5IiwiaGVhZGVycyIsInN0YXR1cyIsIlJlcXVlc3RFcnJvciIsInJlc3BvbnNlIiwiZXJyb3JzIiwiQ2FydFNvdXJjZSIsIkxpYWJpbGl0eVNoaWZ0RW51bSIsIlBheVBhbENvbW1lcmNlSW50ZW50IiwiU3R5bGVCdXR0b25MYWJlbCIsIlN0eWxlQnV0dG9uQ29sb3IiLCJTdHlsZUJ1dHRvblNoYXBlIiwiTm9uSW5zdGFudEFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMiLCJQYXlQYWxPcmRlclN0YXR1cyIsIlBheVBhbENvbW1lcmNlSW50ZWdyYXRpb25TZXJ2aWNlIiwiZm9ybVBvc3RlciIsInBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UiLCJwYXlwYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIiLCJwYXlwYWxDb21tZXJjZVNjcmlwdExvYWRlciIsImxvYWRQYXlQYWxTZGsiLCJtZXRob2RJZCIsInByb3ZpZGVkQ3VycmVuY3lDb2RlIiwiaW5pdGlhbGl6ZXNPbkNoZWNrb3V0UGFnZSIsImZvcmNlTG9hZCIsInN0YXRlIiwiZ2V0U3RhdGUiLCJjdXJyZW5jeUNvZGUiLCJnZXRDYXJ0T3JUaHJvdyIsImN1cnJlbmN5IiwiY29kZSIsInBheW1lbnRNZXRob2QiLCJnZXRQYXltZW50TWV0aG9kT3JUaHJvdyIsInBheXBhbFNkayIsImdldFBheVBhbFNESyIsImdldFBheVBhbFNka09yVGhyb3ciLCJjcmVhdGVCdXlOb3dDYXJ0T3JUaHJvdyIsImJ1eU5vd0luaXRpYWxpemVPcHRpb25zIiwiY2FydFJlcXVlc3RCb2R5IiwiZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5IiwiY3JlYXRlQnV5Tm93Q2FydCIsImVycm9yIiwiY3JlYXRlT3JkZXIiLCJwcm92aWRlcklkIiwicmVxdWVzdEJvZHkiLCJjYXJ0SWQiLCJpZCIsIm9yZGVySWQiLCJjcmVhdGVPcmRlckNhcmRGaWVsZHMiLCJzZXR1cFRva2VuIiwidXBkYXRlT3JkZXIiLCJjYXJ0IiwiY29uc2lnbm1lbnQiLCJnZXRDb25zaWdubWVudHNPclRocm93IiwiYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zIiwic2VsZWN0ZWRTaGlwcGluZ09wdGlvbiIsIl9lcnJvciIsImdldE9yZGVyU3RhdHVzIiwib3B0aW9ucyIsInRva2VuaXplUGF5bWVudCIsInBvc3RGb3JtIiwicGF5bWVudF90eXBlIiwiYWN0aW9uIiwicHJvdmlkZXIiLCJvcmRlcl9pZCIsInNvdXJjZSIsIkJ1eU5vdyIsImNhcnRfaWQiLCJzdWJtaXRQYXltZW50IiwiZ2F0ZXdheUlkIiwicGF5bWVudERhdGEiLCJmb3JtYXR0ZWRQYXlsb2FkIiwidmF1bHRfcGF5bWVudF9pbnN0cnVtZW50Iiwic2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQiLCJkZXZpY2VfaW5mbyIsIm1ldGhvZF9pZCIsInBheXBhbF9hY2NvdW50IiwiZ2V0U2hpcHBpbmdPcHRpb25PclRocm93Iiwic2VsZWN0ZWRTaGlwcGluZ09wdGlvbklkIiwicmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiIsImZpbmQiLCJvcHRpb24iLCJpc1JlY29tbWVuZGVkIiwic2hpcHBpbmdPcHRpb25Ub1NlbGVjdCIsImdldEFkZHJlc3MiLCJhZGRyZXNzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJlbWFpbCIsInBob25lIiwiY29tcGFueSIsImFkZHJlc3MxIiwiYWRkcmVzczIiLCJjaXR5IiwiY291bnRyeUNvZGUiLCJwb3N0YWxDb2RlIiwic3RhdGVPclByb3ZpbmNlIiwic3RhdGVPclByb3ZpbmNlQ29kZSIsImN1c3RvbUZpZWxkcyIsImdldEJpbGxpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyIsInBheWVyIiwiZ2l2ZW5fbmFtZSIsInN1cm5hbWUiLCJlbWFpbF9hZGRyZXNzIiwiYWRkcmVzc19saW5lXzEiLCJhZGRyZXNzX2xpbmVfMiIsImFkbWluX2FyZWFfMiIsImNvdW50cnlfY29kZSIsInBvc3RhbF9jb2RlIiwiYWRtaW5fYXJlYV8xIiwicGhvbmVfbnVtYmVyIiwibmF0aW9uYWxfbnVtYmVyIiwiZ2V0U2hpcHBpbmdBZGRyZXNzRnJvbU9yZGVyRGV0YWlscyIsIm9yZGVyRGV0YWlscyIsInB1cmNoYXNlX3VuaXRzIiwiZnVsbF9uYW1lIiwic2hpcHBpbmciLCJzcGxpdCIsImpvaW4iLCJnZXRWYWxpZEJ1dHRvblN0eWxlIiwic3R5bGUiLCJjb2xvciIsImhlaWdodCIsImxhYmVsIiwic2hhcGUiLCJ2YWxpZFN0eWxlcyIsInVuZGVmaW5lZCIsImdldFZhbGlkSGVpZ2h0Iiwib21pdEJ5IiwiaXNOaWwiLCJyZW1vdmVFbGVtZW50IiwiZWxlbWVudElkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkaXNwbGF5IiwiSU5URVJOQUxfVVNFX09OTFkiLCJDb250ZW50VHlwZSIsIlNES19WRVJTSU9OX0hFQURFUlMiLCJQYXlQYWxDb21tZXJjZVJlcXVlc3RTZW5kZXIiLCJyZXF1ZXN0U2VuZGVyIiwidXJsIiwiSnNvbiIsInBvc3QiLCJwdXQiLCJQYXlQYWxDb21tZXJjZVNjcmlwdExvYWRlciIsInNjcmlwdExvYWRlciIsIndpbmRvdyIsInBheXBhbFNka1NjcmlwdENvbmZpZyIsImdldFBheVBhbFNka1NjcmlwdENvbmZpZ09yVGhyb3ciLCJsb2FkUGF5UGFsU0RLIiwicGF5cGFsIiwidHJhbnNmb3JtQ29uZmlnIiwiYXR0cmlidXRlcyIsInNjcmlwdFNyYyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwibG9hZFNjcmlwdCIsImFzeW5jIiwiY2xpZW50VG9rZW4iLCJpbml0aWFsaXphdGlvbkRhdGEiLCJjbGllbnRJZCIsImludGVudCIsIm1lcmNoYW50SWQiLCJidXllckNvdW50cnkiLCJhdHRyaWJ1dGlvbklkIiwiaXNWZW5tb0VuYWJsZWQiLCJpc0hvc3RlZENoZWNrb3V0RW5hYmxlZCIsImlzUGF5UGFsQ3JlZGl0QXZhaWxhYmxlIiwiaXNEZXZlbG9wZXJNb2RlQXBwbGljYWJsZSIsImF2YWlsYWJsZUFsdGVybmF0aXZlUGF5bWVudE1ldGhvZHMiLCJlbmFibGVkQWx0ZXJuYXRpdmVQYXltZW50TWV0aG9kcyIsImlzR29vZ2xlUGF5RW5hYmxlZCIsImNvbW1pdCIsInNob3VsZEVuYWJsZUNhcmQiLCJlbmFibGVDYXJkRnVuZGluZyIsImVuYWJsZUNyZWRpdEZ1bmRpbmciLCJzaG91bGRFbmFibGVBUE1zIiwiZW5hYmxlVmVubW9GdW5kaW5nIiwiZW5hYmxlQVBNc0Z1bmRpbmciLCJnb29nbGVQYXlDb21wb25lbnQiLCJjYXJkRmllbGRzQ29tcG9uZW50IiwiZGlzYWJsZUZ1bmRpbmciLCJmaWx0ZXIiLCJhcG0iLCJpbmNsdWRlcyIsImVuYWJsZUZ1bmRpbmciLCJsZW5ndGgiLCJjb21wb25lbnRzIiwiY29uZmlnIiwidHJhbnNmb3JtZWRDb25maWciLCJrZXlzIiwiZm9yRWFjaCIsInZhbHVlIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0SG9zdCIsImNyZWF0ZUZvcm1Qb3N0ZXIiLCJjcmVhdGVSZXF1ZXN0U2VuZGVyIiwiaG9zdCIsImdldFNjcmlwdExvYWRlciIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiUGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5IiwicGF5cGFsQ29tbWVyY2VJbnRlZ3JhdGlvblNlcnZpY2UiLCJvbkVycm9yIiwibm9vcCIsImluaXRpYWxpemUiLCJwYXlwYWxjb21tZXJjZSIsImNvbnRhaW5lciIsIm9uQ2xpY2siLCJnZXRQYXltZW50TWV0aG9kIiwibG9hZFBheW1lbnRNZXRob2QiLCJCdXR0b25zIiwicmVuZGVyQnV0dG9uIiwiY29uc29sZSIsImRlaW5pdGlhbGl6ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2lnbkluIiwiY3JlZGVudGlhbHMiLCJzaWduSW5DdXN0b21lciIsInNpZ25PdXQiLCJzaWduT3V0Q3VzdG9tZXIiLCJleGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0IiwiY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjayIsIm9uQ29tcGxldGUiLCJwYXltZW50QnV0dG9uU3R5bGVzIiwiaXNBcHBTd2l0Y2hFbmFibGVkIiwiY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMiLCJkZWZhdWx0Q2FsbGJhY2tzIiwiaXNQYXlwYWxDb21tZXJjZUFwcFN3aXRjaEVuYWJsZWQiLCJhcHBTd2l0Y2hXaGVuQXZhaWxhYmxlIiwib25BcHByb3ZlIiwib3JkZXJJRCIsImhvc3RlZENoZWNrb3V0Q2FsbGJhY2tzIiwib25TaGlwcGluZ0FkZHJlc3NDaGFuZ2UiLCJkYXRhIiwib25TaGlwcGluZ09wdGlvbnNDaGFuZ2UiLCJhY3Rpb25zIiwib25Ib3N0ZWRDaGVja291dEFwcHJvdmUiLCJidXR0b25SZW5kZXJPcHRpb25zIiwiZnVuZGluZ1NvdXJjZSIsIkZVTkRJTkciLCJQQVlQQUwiLCJwYXlwYWxCdXR0b24iLCJpc0VsaWdpYmxlIiwiaGFzUmV0dXJuZWQiLCJyZXN1bWUiLCJyZW5kZXIiLCJvcmRlciIsImJpbGxpbmdBZGRyZXNzIiwidXBkYXRlQmlsbGluZ0FkZHJlc3MiLCJsaW5lSXRlbXMiLCJwaHlzaWNhbEl0ZW1zIiwic2hpcHBpbmdBZGRyZXNzIiwidXBkYXRlU2hpcHBpbmdBZGRyZXNzIiwic3VibWl0T3JkZXIiLCJwYXJhbXMiLCJoYW5kbGVFcnJvciIsInNoaXBwaW5nT3B0aW9uIiwic2VsZWN0U2hpcHBpbmdPcHRpb24iLCJQYXlQYWxDb21tZXJjZUNyZWRpdEN1c3RvbWVyU3RyYXRlZ3kiLCJwYXlwYWxjb21tZXJjZWNyZWRpdCIsInBheXBhbENvbW1lcmNlQ3JlZGl0IiwiZnVuZGluZ1NvdXJjZXMiLCJQQVlMQVRFUiIsIkNSRURJVCIsImhhc1JlbmRlcmVkU21hcnRCdXR0b24iLCJQYXlQYWxDb21tZXJjZVZlbm1vQ3VzdG9tZXJTdHJhdGVneSIsInBheXBhbGNvbW1lcmNldmVubW8iLCJWRU5NTyIsInBheXBhbEJ1dHRvblJlbmRlciIsIlVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUiLCJURFNlY3VyZUF1dGhlbnRpY2F0aW9uU3RhdGUiLCJQYXlQYWxGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUiLCJQYXlQYWxDb21tZXJjZVNkayIsImdldFBheVBhbEZhc3RsYW5lU2RrIiwic2Vzc2lvbklkIiwicGF5cGFsRmFzdGxhbmVTZGsiLCJnZXRQYXlQYWxGYXN0bGFuZVNka0NvbmZpZ3VyYXRpb24iLCJnZXRQYXlQYWxHb29nbGVQYXlTZGsiLCJwYXlwYWxHb29nbGVQYXkiLCJnZXRQYXlQYWxHb29nbGVQYXlTZGtTY3JpcHRDb25maWdPclRocm93IiwiZ2V0UGF5UGFsQXBtc1NkayIsInBheXBhbEFwbXMiLCJnZXRQYXlQYWxBcG1TZGtDb25maWd1cmF0aW9uIiwiZ2V0UGF5UGFsTWVzc2FnZXMiLCJwYXlwYWxNZXNzYWdlcyIsInBheXBhbFNka01lc3NhZ2VzQ29uZmlnIiwiZ2V0UGF5UGFsU2RrTWVzc2FnZXNDb25maWd1cmF0aW9uIiwic2NyaXB0T3B0aW9ucyIsInNjcmlwdEF0dHJpYnV0ZXMiLCJyZXBsYWNlIiwiZGlzYWJsZUFQTXNGdW5kaW5nIiwiY3JlYXRlUGF5UGFsQ29tbWVyY2VTZGsiLCJjcmVhdGVTY3JpcHRMb2FkZXIiLCJDb29raWVTdG9yYWdlIiwiY29va2llS2V5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY29va2llIiwiZmlyc3RJbmRleCIsImluZGV4T2YiLCJsYXN0SW5kZXgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdWJzdHJpbmciLCJzZXQiLCJzZWN1cmUiLCJjb29raWVUZXh0IiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJ0b1VUQ1N0cmluZyIsIm5vdyIsIkRhdGUiLCJtaW51dGVzIiwic2V0VGltZSIsImdldFRpbWUiLCJyZW1vdmUiLCJQYXlQYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMiLCJpbml0aWFsaXplUGF5UGFsRmFzdGxhbmUiLCJpc1Rlc3RNb2RlRW5hYmxlZCIsInN0eWxlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJwYXlwYWxGYXN0bGFuZSIsImRlZmF1bHRTdHlsZXMiLCJyb290IiwiYmFja2dyb3VuZENvbG9yUHJpbWFyeSIsIkZhc3RsYW5lIiwiZ2V0UGF5UGFsRmFzdGxhbmVPclRocm93IiwibG9va3VwQ3VzdG9tZXJPclRocm93IiwiaWRlbnRpdHkiLCJsb29rdXBDdXN0b21lckJ5RW1haWwiLCJ0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyIsImN1c3RvbWVyQ29udGV4dElkIiwidHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyIsInVwZGF0ZVN0b3JhZ2VTZXNzaW9uSWQiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsImNvb2tpZXNPcHRpb24iLCJyZW1vdmVTdG9yYWdlU2Vzc2lvbklkIiwiZ2V0U3RvcmFnZVNlc3Npb25JZCIsIm1hcFBheVBhbEZhc3RsYW5lUHJvZmlsZVRvQmNDdXN0b21lckRhdGEiLCJhdXRoZW50aWNhdGlvblJlc3VsdCIsImF1dGhlbnRpY2F0aW9uU3RhdGUiLCJwcm9maWxlRGF0YSIsInBheXBhbEJpbGxpbmdBZGRyZXNzIiwiY2FyZCIsInBheW1lbnRTb3VyY2UiLCJwYXlwYWxTaGlwcGluZ0FkZHJlc3MiLCJwYXlwYWxQcm9maWxlTmFtZSIsInBheXBhbEluc3RydW1lbnQiLCJtYXBQYXlQYWxUb0JjQWRkcmVzcyIsInBob25lTnVtYmVyIiwiaW5zdHJ1bWVudHMiLCJtYXBQYXlQYWxUb0JjSW5zdHJ1bWVudCIsImFkZHJlc3NlcyIsImZpbHRlckFkZHJlc3NlcyIsIlVOUkVDT0dOSVpFRCIsImluc3RydW1lbnQiLCJicmFuZCIsImV4cGlyeSIsImxhc3REaWdpdHMiLCJleHBpcnlZZWFyIiwiZXhwaXJ5TW9udGgiLCJiaWdwYXlUb2tlbiIsImRlZmF1bHRJbnN0cnVtZW50IiwiaWluIiwibGFzdDQiLCJtZXRob2QiLCJ0cnVzdGVkU2hpcHBpbmdBZGRyZXNzIiwidW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uTW9kZSIsIlBBTiIsIm1hcEJjVG9QYXlQYWxBZGRyZXNzIiwiYWRkcmVzc0xpbmUxIiwiYWRkcmVzc0xpbmUyIiwiYWRtaW5BcmVhMSIsImFkbWluQXJlYTIiLCJwcm9maWxlTmFtZSIsImZ1bGxOYW1lIiwicGhvbmVEYXRhIiwibmF0aW9uYWxOdW1iZXIiLCJjb3VudHJ5IiwicmVkdWNlIiwiY3VzdG9tZXJBZGRyZXNzZXMiLCJjdXJyZW50QWRkcmVzcyIsInNvbWUiLCJjdXN0b21lckFkZHJlc3MiLCJpc0VxdWFsQWRkcmVzc2VzIiwiZmlyc3RBZGRyZXNzIiwic2Vjb25kQWRkcmVzcyIsImlzRXF1YWwiLCJub3JtYWxpemVBZGRyZXNzIiwib21pdCIsImNyZWF0ZVBheVBhbENvbW1lcmNlRmFzdGxhbmVVdGlscyIsImlzSW52YWxpZFN0eWxlT3B0aW9uIiwic3R5bGVPcHRpb24iLCJnZXRGYXN0bGFuZVN0eWxlcyIsInN0eWxlU2V0dGluZ3MiLCJ1aVN0eWxlcyIsImZhc3RsYW5lU3R5bGVzIiwiaW5wdXQiLCJ0b2dnbGUiLCJ0ZXh0Qm9keSIsInRleHQiLCJ0ZXh0Q2FwdGlvbiIsImNhcHRpb24iLCJicmFuZGluZyIsImNsZWFuVXBGYXN0bGFuZVN0eWxlcyIsImZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yIiwiZXJyb3JDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvciIsImZvbnRGYW1pbHkiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHkiLCJmb250U2l6ZUJhc2UiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRTaXplIiwicGFkZGluZyIsImZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyIsInByaW1hcnlDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyUmFkaXVzIiwiYm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvciIsImZvY3VzQm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIiwidGV4dENvbG9yQmFzZSIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UiLCJjb2xvclByaW1hcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JTZWNvbmRhcnkiLCJmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvciIsImZvbnRTaXplIiwiZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzRm9udFNpemUiLCJmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NDb2xvciIsImZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0ZvbnRTaXplIiwiZmFzdGxhbmVCcmFuZGluZ1NldHRpbmdzIiwibWVyZ2VGYXN0bGFuZVN0eWxlcyIsIlBheVBhbENvbW1lcmNlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5IiwicGF5cGFsQ29tbWVyY2VTZGsiLCJwYXlwYWxDb21tZXJjZUZhc3RsYW5lVXRpbHMiLCJwYXlwYWxjb21tZXJjZWZhc3RsYW5lIiwiXyIsImNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkIiwiZ2V0Q3VzdG9tZXJPclRocm93IiwiaXNHdWVzdCIsInJ1blBheVBhbEF1dGhlbnRpY2F0aW9uRmxvd09yVGhyb3ciLCJjdXN0b21lciIsImdldEN1c3RvbWVyIiwiZ2V0QmlsbGluZ0FkZHJlc3MiLCJjdXN0b21lckVtYWlsIiwiaXNBdXRoZW50aWNhdGlvbkZsb3dDYW5jZWxlZCIsIkNBTkNFTEVEIiwidXBkYXRlQ3VzdG9tZXJEYXRhU3RhdGUiLCJ1cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lciIsInVwZGF0ZWRTdGF0ZSIsImlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkIiwiY29uc2lnbm1lbnRzIiwiZ2V0Q29uc2lnbm1lbnRzIiwiZmlyc3RTaGlwcGluZ09wdGlvbiIsInNoaXBwaW5nT3B0aW9uSWQiLCJpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWQiLCJQYXlQYWxDb21tZXJjZUJ1dHRvblN0cmF0ZWd5IiwiY29udGFpbmVySWQiLCJpc0J1eU5vd0Zsb3ciLCJCb29sZWFuIiwibG9hZERlZmF1bHRDaGVja291dCIsIm9uRWxpZ2liaWxpdHlGYWlsdXJlIiwiYnV5Tm93Rmxvd0NhbGxiYWNrcyIsImhhbmRsZUNsaWNrIiwib25DYW5jZWwiLCJidXlOb3dDYXJ0IiwibG9hZENoZWNrb3V0IiwibWVzc2FnZXNTdHlsZXMiLCJsYXlvdXQiLCJsb2dvIiwicG9zaXRpb24iLCJyYXRpbyIsInNpemUiLCJQYXlQYWxDb21tZXJjZUNyZWRpdEJ1dHRvblN0cmF0ZWd5IiwibWVzc2FnaW5nQ29udGFpbmVySWQiLCJmZWF0dXJlcyIsImdldFN0b3JlQ29uZmlnT3JUaHJvdyIsImNoZWNrb3V0U2V0dGluZ3MiLCJtZXNzYWdpbmdDb250YWluZXIiLCJwYXlwYWxCTlBMQ29uZmlndXJhdGlvbiIsImJhbm5lckNvbmZpZ3VyYXRpb24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZW5kZXJNZXNzYWdlcyIsInBheXBhbE1lc3NhZ2VzU2RrIiwicGF5cGFsTWVzc2FnZXNPcHRpb25zIiwiYW1vdW50IiwiZ2V0Q2hlY2tvdXRPclRocm93Iiwib3V0c3RhbmRpbmdCYWxhbmNlIiwicGxhY2VtZW50IiwiTWVzc2FnZXMiLCJQYXlQYWxDb21tZXJjZVZlbm1vQnV0dG9uU3RyYXRlZ3kiLCJnZXRWYWxpZFZlbm1vQnV0dG9uU3R5bGVzIiwidmFsaWRCdXR0b25TdHlsZSIsImdvbGQiLCJQYXlQYWxDb21tZXJjZUFsdGVybmF0aXZlTWV0aG9kc0J1dHRvblN0cmF0ZWd5IiwicGF5cGFsY29tbWVyY2VhbHRlcm5hdGl2ZW1ldGhvZHMiLCJ2YWx1ZXMiLCJERUZBVUxUX1NUWUxFUyIsIlJPVEFUSU9OX0FOSU1BVElPTiIsIkxvYWRpbmdJbmRpY2F0b3IiLCJjb250YWluZXJTdHlsZXMiLCJkZWZpbmVBbmltYXRpb24iLCJidWlsZENvbnRhaW5lciIsImluZGljYXRvciIsImJ1aWxkSW5kaWNhdG9yIiwiYXBwZW5kQ2hpbGQiLCJzaG93IiwicGFyZW50SWQiLCJwYXJlbnQiLCJ2aXNpYmlsaXR5Iiwib3BhY2l0eSIsImhpZGUiLCJoYW5kbGVUcmFuc2l0aW9uRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiYm90dG9tIiwibGVmdCIsIndpZHRoIiwicmlnaHQiLCJ0b3AiLCJ0cmFuc2l0aW9uIiwic2V0U3R5bGVBdHRyaWJ1dGUiLCJib3JkZXIiLCJtYXJnaW4iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1TdHlsZSIsImFuaW1hdGlvbiIsImF0dHJzIiwiayIsInNldFByb3BlcnR5IiwiaGVhZCIsInNoZWV0IiwiQ1NTU3R5bGVTaGVldCIsImluc2VydFJ1bGUiLCJMT0FESU5HX0lORElDQVRPUl9TVFlMRVMiLCJQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IiLCJpbnZhbGlkRmllbGRzIiwiUGF5bWVudE1ldGhvZEludmFsaWRFcnJvciIsIk9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvciIsImlzSG9zdGVkSW5zdHJ1bWVudExpa2UiLCJzaG91bGRTYXZlSW5zdHJ1bWVudCIsInNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQiLCJpc1ZhdWx0ZWRJbnN0cnVtZW50IiwiaW5zdHJ1bWVudElkIiwiaXNCYXNlSW5zdHJ1bWVudCIsIlBheVBhbENvbW1lcmNlUGF5bWVudFN0cmF0ZWd5IiwibG9hZGluZ0luZGljYXRvciIsImJhbm5lckNvbnRhaW5lcklkIiwibG9hZGluZ0luZGljYXRvckNvbnRhaW5lciIsIm9uSW5pdCIsInNob3VsZFJlbmRlclBheVBhbEJ1dHRvbk9uSW5pdGlhbGl6YXRpb24iLCJleGVjdXRlIiwicGF5bG9hZCIsInBheW1lbnQiLCJpc1BheVBhbFZhdWx0ZWRJbnN0cnVtZW50UGF5bWVudERhdGEiLCJwYXltZW50UGF5bG9hZCIsInByZXBhcmVWYXVsdGVkSW5zdHJ1bWVudFBheW1lbnRQYXlsb2FkIiwicHJlcGFyZVBheW1lbnRQYXlsb2FkIiwiYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQiLCJpc1JlZGlyZWN0QWN0aW9uRXJyb3IiLCJyZWRpcmVjdFVybCIsInJlZGlyZWN0X3VybCIsImxvY2F0aW9uIiwiaXNQcm92aWRlckVycm9yIiwiX3Jlc29sdmUiLCJyZWplY3QiLCJjbG9zZSIsImZpbmFsaXplIiwicGF5cGFsT3JkZXJJZCIsInNob3VsZENvbmZpcm1JbnN0cnVtZW50IiwiaXNUcnVzdGVkVmF1bHRpbmdGbG93IiwiYmlncGF5X3Rva2VuIiwidG9rZW4iLCJjaGVja291dFBheW1lbnRCdXR0b25TdHlsZXMiLCJvblJlbmRlckJ1dHRvbiIsIm9uVmFsaWRhdGUiLCJzdWJtaXRGb3JtIiwiYnV0dG9uT3B0aW9ucyIsImhhbmRsZUFwcHJvdmUiLCJ0b2dnbGVMb2FkaW5nSW5kaWNhdG9yIiwiZmllbGRzVmFsdWVzIiwiZ2V0RmllbGRzVmFsdWVzIiwiZ2V0SW5zdHJ1bWVudHMiLCJmaW5kSW5zdHJ1bWVudCIsImlzTG9hZGluZyIsImlzUGF5cGFsQ29tbWVyY2VQcm92aWRlckVycm9yIiwiZSIsInByb3ZpZGVyX2Vycm9yIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsIlBheVBhbENvbW1lcmNlQ3JlZGl0UGF5bWVudFN0cmF0ZWd5IiwicGF5cGFsT3B0aW9ucyIsIlBheVBhbENvbW1lcmNlVmVubW9QYXltZW50U3RyYXRlZ3kiLCJUaW1lb3V0RXJyb3IiLCJpc0V4cGVyaW1lbnRFbmFibGVkIiwiZXhwZXJpbWVudE5hbWUiLCJmYWxsYmFja1ZhbHVlIiwiUGF5UGFsQ29tbWVyY2VBbHRlcm5hdGl2ZU1ldGhvZHNQYXltZW50U3RyYXRlZ3kiLCJwb2xsaW5nSW50ZXJ2YWwiLCJtYXhQb2xsaW5nSW50ZXJ2YWxUaW1lIiwicG9sbGluZ1RpbWVyIiwic3RvcFBvbGxpbmciLCJpc1BvbGxpbmdFbmFibGVkIiwic2hvdWxkUmVuZGVyRmllbGRzIiwicmVuZGVyRmllbGRzIiwiaXNSZWRpcmVjdEVycm9yIiwiaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20iLCJpc05vbkluc3RhbnRQYXltZW50TWV0aG9kIiwicmVzZXRQb2xsaW5nTWVjaGFuaXNtIiwicmVzb2x2ZVByb21pc2UiLCJyZWplY3RQcm9taXNlIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJvcmRlclN0YXR1cyIsImlzT3JkZXJBcHByb3ZlZCIsIkFwcHJvdmVkIiwiaXNQb2xsaW5nRXJyb3IiLCJQb2xsaW5nRXJyb3IiLCJkZWluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtIiwicmVpbml0aWFsaXplU3RyYXRlZ3kiLCJwYXlwYWxBbXBzU2RrIiwiZ2V0UGF5cGFsQW1wc1Nka09yVGhyb3ciLCJidXR0b25TdHlsZSIsIm9uSW5pdEJ1dHRvbiIsIm9uQ3JlYXRlT3JkZXIiLCJoYW5kbGVGYWlsdXJlIiwidXNlU3RvcmVDcmVkaXQiLCJnZXRCaWxsaW5nQWRkcmVzc09yVGhyb3ciLCJhcG1GaWVsZHNDb250YWluZXIiLCJhcG1GaWVsZHNTdHlsZXMiLCJmaWVsZENvbnRhaW5lckVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZmllbGRzT3B0aW9ucyIsImZpZWxkcyIsIlBheW1lbnRGaWVsZHMiLCJ0b1VwcGVyQ2FzZSIsImdhdGV3YXkiLCJIb3N0ZWRGaWVsZFR5cGUiLCJpc0NyZWRpdENhcmRGb3JtRmllbGRzIiwiQ2FyZE51bWJlciIsIkNhcmROYW1lIiwiQ2FyZEV4cGlyeSIsImlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtRmllbGRzIiwiQ2FyZE51bWJlclZlcmlmaWNhdGlvbiIsIkNhcmRDb2RlVmVyaWZpY2F0aW9uIiwiQ2FyZEV4cGlyeVZlcmlmaWNhdGlvbiIsIlBheW1lbnRNZXRob2RGYWlsZWRFcnJvciIsIk5vdEluaXRpYWxpemVkRXJyb3JUeXBlIiwiTm90SW5pdGlhbGl6ZWRFcnJvciIsIkN1c3RvbWVyTm90SW5pdGlhbGl6ZWQiLCJQYXltZW50Tm90SW5pdGlhbGl6ZWQiLCJTaGlwcGluZ05vdEluaXRpYWxpemVkIiwiU3BhbVByb3RlY3Rpb25Ob3RJbml0aWFsaXplZCIsIlBheW1lbnRJbnZhbGlkRm9ybUVycm9yIiwiZGV0YWlscyIsIlBheVBhbENvbW1lcmNlQ3JlZGl0Q2FyZHNQYXltZW50U3RyYXRlZ3kiLCJwYXlwYWxjb21tZXJjZWNyZWRpdGNhcmRzIiwicGF5cGFsQ29tbWVyY2VJbml0aWFsaXphdGlvbk9wdGlvbnMiLCJmb3JtIiwib25DcmVkaXRDYXJkRmllbGRzUmVuZGVyaW5nRXJyb3IiLCJvbkxvYWRDb21wbGV0ZSIsImhvc3RlZEZvcm1PcHRpb25zIiwiaXNDcmVkaXRDYXJkRm9ybSIsImlzQ3JlZGl0Q2FyZFZhdWx0ZWRGb3JtIiwiaGFzVW5kZWZpbmVkVmFsdWVzIiwiaW5pdGlhbGl6ZUZpZWxkcyIsInNob3VsZEluaXRpYWxpemVQYXlQYWxGYXN0bGFuZSIsImluaXRpYWxpemVQYXlQYWxGYXN0bGFuZU9yVGhyb3ciLCJleGVjdXRpb25QYXltZW50RGF0YSIsInZhbGlkYXRlSG9zdGVkRm9ybU9yVGhyb3ciLCJzdWJtaXRIb3N0ZWRGb3JtIiwiZ2V0SW5zdHJ1bWVudFBhcmFtcyIsInJldHVybmVkT3JkZXJJZCIsInN1Ym1pdFBheW1lbnRQYXlsb2FkIiwicmV0dXJuZWRWYXVsdGVkVG9rZW4iLCJjdnZGaWVsZCIsImV4cGlyeUZpZWxkIiwibnVtYmVyRmllbGQiLCJuYW1lRmllbGQiLCJub25jZSIsInZlcmlmaWNhdGlvbl9ub25jZSIsImNhcmRfd2l0aF9vcmRlciIsImZvcm1PcHRpb25zIiwiZXhlY3V0ZUNhbGxiYWNrIiwiZ2V0RXhlY3V0ZUNhbGxiYWNrIiwiY2FyZEZpZWxkc0NvbmZpZyIsImdldElucHV0U3R5bGVzIiwidmF1bHRTZXR1cFRva2VuIiwibGlhYmlsaXR5U2hpZnQiLCJObyIsIlVua25vd24iLCJpbnB1dEV2ZW50cyIsIm9uQ2hhbmdlIiwiZXZlbnQiLCJvbkNoYW5nZUhhbmRsZXIiLCJvbkZvY3VzIiwib25Gb2N1c0hhbmRsZXIiLCJvbkJsdXIiLCJvbkJsdXJIYW5kbGVyIiwib25JbnB1dFN1Ym1pdFJlcXVlc3QiLCJjYXJkRmllbGRzIiwiQ2FyZEZpZWxkcyIsInN0eWxpemVJbnB1dENvbnRhaW5lcnMiLCJyZW5kZXJWYXVsdGVkRmllbGRzIiwiY3JlYXRlVmF1bHRTZXR1cFRva2VuQ2FsbGJhY2siLCJjcmVhdGVPcmRlckNhbGxiYWNrIiwiY3JlYXRlVmF1bHRTZXR1cFRva2VuIiwiZ2V0Q2FyZEZpZWxkc09yVGhyb3ciLCJjYXJkQ29kZSIsIkNWVkZpZWxkIiwicGxhY2Vob2xkZXIiLCJjYXJkRXhwaXJ5IiwiRXhwaXJ5RmllbGQiLCJjYXJkTmFtZSIsIk5hbWVGaWVsZCIsImNhcmROdW1iZXIiLCJOdW1iZXJGaWVsZCIsImNhcmRDb2RlVmVyaWZpY2F0aW9uIiwiY2FyZEV4cGlyeVZlcmlmaWNhdGlvbiIsImNhcmROdW1iZXJWZXJpZmljYXRpb24iLCJnZXRGaWVsZFR5cGVCeUVtaXR0ZWRGaWVsZCIsImVtaXR0ZWRCeSIsImZpZWxkVHlwZSIsIm1hcEZpZWxkVHlwZSIsInN1Ym1pdENvbmZpZyIsInN1Ym1pdCIsImNhcmRGaWVsZHNTdGF0ZSIsInRoZW4iLCJ2YWxpZGF0aW9uRGF0YSIsImdldFZhbGlkaXR5RGF0YSIsImlzVmFsaWQiLCJtYXBWYWxpZGF0aW9uRXJyb3JzIiwidXBkYXRlZEZpZWxkcyIsImNhcmROYW1lRmllbGQiLCJmaWVsZHNLZXlzIiwiZXZlcnkiLCJmaWVsZHNFcnJvcnMiLCJnZXRJbnZhbGlkRXJyb3JCeUZpZWxkVHlwZSIsIkNhcmRDb2RlIiwidmFsaWRhdGlvbkVycm9ycyIsImNvbW1vblN0eWxlcyIsImRlZmF1bHQiLCJmb250V2VpZ2h0Iiwib3V0bGluZSIsImJveFNoYWRvdyIsImJhY2tncm91bmQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0Iiwib25FbnRlciIsInBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIiLCJwYXlwYWxDb21tZXJjZVBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZCIsImlzUGF5UGFsQ29tbWVyY2VBbmFseXRpY3NWMkVuYWJsZWQiLCJjb25uZWN0Q2xpZW50VG9rZW4iLCJwYXlQYWxGYXN0bGFuZVNkayIsIlBheXBhbENvbW1lcmNlUmF0ZXBheVBheW1lbnRTdHJhdGVneSIsInBheXBhbGNvbW1lcmNlcmF0ZXBheSIsImxlZ2FsVGV4dENvbnRhaW5lciIsImxvYWRpbmdDb250YWluZXJJZCIsImNyZWF0ZUZyYXVkTmV0U2NyaXB0IiwibG9hZEZyYXVkbmV0Q29uZmlnIiwicmVuZGVyTGVnYWxUZXh0IiwibWV0YWRhdGFJZCIsImd1aWQiLCJyYXRlcGF5QmlydGhEYXRlIiwicmF0ZXBheVBob25lTnVtYmVyIiwicmF0ZXBheVBob25lQ291bnRyeUNvZGUiLCJyYXRlX3BheSIsImJpcnRoX2RhdGUiLCJub3JtYWxpemVEYXRlIiwiZnJhdWROZXRTY3JpcHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZnJhdWROZXRDb25maWciLCJsZWdhbFRleHRDb250YWluZXJFbGVtZW50IiwiZGF0ZSIsImZvcm1hdHRlZERhdGUiLCJmb3JtYXREYXRlIiwiZm9ybWF0dGVkTW9udGgiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwibGVnYWxUZXh0Q29udGFpbmVyRWxlbWVudElkIiwibGVnYWxUZXh0Q29udGFpbmVySWQiLCJidXR0b25Db250YWluZXJJZCIsImJ1dHRvbkNvbnRhaW5lciIsImJ1dHRvbkNvbnRhaW5lclBhcmVudCIsInBhcmVudE5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJwcmVwZW5kIiwicmF0ZVBheUJ1dHRvbiIsIkxlZ2FsIiwiUEFZX1VQT05fSU5WT0lDRSIsInRlc3RNb2RlIiwic2NyaXB0RWxlbWVudCIsImdlbmVyYXRlR1VJRCIsImYiLCJzIiwic2FuZGJveCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpIiwiTWF0aCIsImZsb29yIiwiY2hhcmFjdGVycyIsInJhbmRvbSIsInNjcmlwdCIsInNyYyIsInVzZU1ldGFkYXRhIiwiUG9sbGluZ1N0b3AiLCJpc1BheVBhbEZhc3RsYW5lQ3VzdG9tZXIiLCJQYXlwYWxDb21tZXJjZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5IiwidGhyZWVEU1ZlcmlmaWNhdGlvbk1ldGhvZCIsInNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdyIsImluaXRpYWxpemVQYXlQYWxQYXltZW50Q29tcG9uZW50IiwicmVuZGVyUGF5UGFsUGF5bWVudENvbXBvbmVudCIsImhhbmRsZVBheVBhbFN0b3JlZEluc3RydW1lbnRDaGFuZ2UiLCJvcmRlclJlcXVlc3QiLCJpc1ZhdWx0ZWRGbG93IiwiaXNQYXlwYWxGYXN0bGFuZVJlcXVlc3RFcnJvciIsImludmFsaWRSZXF1ZXN0RXJyb3IiLCJ0cmFuc2xhdGlvbktleSIsInBheXBhbEZhc3RsYW5lQ3VzdG9tZXIiLCJwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCIsInRyaW0iLCJjYXJkQ29tcG9uZW50T3B0aW9ucyIsImNhcmRob2xkZXJOYW1lIiwicHJlZmlsbCIsImVuYWJsZWQiLCJwYXlwYWxDb21wb25lbnRNZXRob2RzIiwiRmFzdGxhbmVDYXJkQ29tcG9uZW50IiwiZ2V0UGF5UGFsQ29tcG9uZW50TWV0aG9kc09yVGhyb3ciLCJpczNEU0VuYWJsZWQiLCJpc1BheXBhbENvbW1lcmNlRmFzdGxhbmVUaHJlZURTQXZhaWxhYmxlIiwiaXMzZHNFbmFibGVkIiwiZmFzdGxhbmVUb2tlbiIsImdldDNEU05vbmNlIiwicGF5cGFsX2Zhc3RsYW5lX3Rva2VuIiwiZ2V0UGF5bWVudFRva2VuIiwicGF5cGFsTm9uY2UiLCJnZXRPcmRlck9yVGhyb3ciLCJjaGVja291dFVybCIsImxpbmtzIiwiY2hlY2tvdXRMaW5rIiwidGhyZWVEb21haW5TZWN1cmVDb21wb25lbnQiLCJUaHJlZURvbWFpblNlY3VyZUNsaWVudCIsInRocmVlRG9tYWluU2VjdXJlUGFyYW1ldGVycyIsIm9yZGVyQW1vdW50IiwidG9GaXhlZCIsInRocmVlRFNSZXF1ZXN0ZWQiLCJ0cmFuc2FjdGlvbkNvbnRleHQiLCJleHBlcmllbmNlX2NvbnRleHQiLCJsb2NhbGUiLCJyZXR1cm5fdXJsIiwiY2FuY2VsX3VybCIsIkVycm9yZWQiLCJDYW5jZWxsZWQiLCJTdWNjZWVkZWQiLCJwYXlwYWxBeG9TZGsiLCJzZWxlY3Rpb25DaGFuZ2VkIiwic2VsZWN0ZWRDYXJkIiwicHJvZmlsZSIsInNob3dDYXJkU2VsZWN0b3IiLCJzZWxlY3RlZEluc3RydW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/paypal-commerce.js\n\n}");

/***/ })

}]);