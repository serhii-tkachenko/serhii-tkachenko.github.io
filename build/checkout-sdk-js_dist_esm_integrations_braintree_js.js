"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_braintree_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/braintree.js":
/*!*************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/braintree.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBraintreeAchPaymentStrategy: () => (/* binding */ Te),\n/* harmony export */   createBraintreeCreditCardPaymentStrategy: () => (/* binding */ mt),\n/* harmony export */   createBraintreeFastlaneCustomerStrategy: () => (/* binding */ me),\n/* harmony export */   createBraintreeFastlanePaymentStrategy: () => (/* binding */ et),\n/* harmony export */   createBraintreeLocalMethodsPaymentStrategy: () => (/* binding */ Ke),\n/* harmony export */   createBraintreePaypalButtonStrategy: () => (/* binding */ wt),\n/* harmony export */   createBraintreePaypalCreditButtonStrategy: () => (/* binding */ Pt),\n/* harmony export */   createBraintreePaypalCreditCustomerStrategy: () => (/* binding */ Q),\n/* harmony export */   createBraintreePaypalCustomerStrategy: () => (/* binding */ J),\n/* harmony export */   createBraintreePaypalPaymentStrategy: () => (/* binding */ Ve),\n/* harmony export */   createBraintreeVenmoButtonStrategy: () => (/* binding */ Mt),\n/* harmony export */   createBraintreeVenmoPaymentStrategy: () => (/* binding */ at),\n/* harmony export */   createBraintreeVisaCheckoutButtonStrategy: () => (/* binding */ kt),\n/* harmony export */   createBraintreeVisaCheckoutCustomerStrategy: () => (/* binding */ we),\n/* harmony export */   createBraintreeVisaCheckoutPaymentStrategy: () => (/* binding */ nt)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _braintree_browser_detection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/browser-detection */ \"../checkout-sdk-js/node_modules/@braintree/browser-detection/dist/browser-detection.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\nvar h={};function y(e,t,i=!0){var n;return null!==(n=e[t])&&void 0!==n?n:i}h.d=(e,t)=>{for(var i in t)h.o(t,i)&&!h.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},h.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const m=\"3.128.0\",p=\"3.123.2\",g=\"3.106.0\";class v{constructor(e){this.paymentIntegrationService=e,this.braintreeWindow=window}getSDKVersion(){const e=this.paymentIntegrationService.getState().getStoreConfig(),t=(null==e?void 0:e.checkoutSettings.features)||{};return this.getPreloadedSDKVersion()||(y(t,\"PAYPAL-5809.braintree_hosted_fields_fix_version\")?m:y(t,\"PAYPAL-5636.update_braintree_sdk_version\")?p:g)}getPreloadedSDKVersion(){const e=this.braintreeWindow.braintree;if(e){const t=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.find)(Object.values(e),e=>!!e.VERSION);return null==t?void 0:t.VERSION}}}class f extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class b extends f{constructor(e){super(e||\"Unsupported browser error\"),this.name=\"UnsupportedBrowserError\",this.type=\"unsupported_browser\"}}class w extends f{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class C extends w{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class S extends f{constructor(e,t){super(t||\"Unable to proceed because the payment form contains invalid data.\"),this.details=e,this.name=\"PaymentInvalidFormError\",this.type=\"payment_invalid_form\"}}var P;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(P||(P={}));class I extends f{constructor(e){super(function(e){switch(e){case P.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case P.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case P.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case P.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}class O extends f{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}class k{constructor(e){const t=new Promise((e,t)=>{this.cancel=t});this.promise=Promise.race([e,t])}}const E=[\"buttons\",\"messages\"];var T,A,z,N,M,D,_,B,x;function F(e){return Boolean(\"object\"==typeof e&&null!==e&&(\"type\"in e||\"message\"in e||\"code\"in e))}!function(e){e.HORIZONTAL=\"horizontal\",e.VERTICAL=\"vertical\"}(T||(T={})),function(e){e.SMALL=\"small\",e.MEDIUM=\"medium\",e.LARGE=\"large\",e.RESPONSIVE=\"responsive\"}(A||(A={})),function(e){e.GOLD=\"gold\",e.BLUE=\"blue\",e.SIlVER=\"silver\",e.BLACK=\"black\",e.WHITE=\"white\"}(z||(z={})),function(e){e.CHECKOUT=\"checkout\",e.PAY=\"pay\",e.BUYNOW=\"buynow\",e.PAYPAL=\"paypal\",e.CREDIT=\"credit\"}(N||(N={})),function(e){e.PILL=\"pill\",e.RECT=\"rect\"}(M||(M={})),function(e){e.CART=\"cart\",e.HOME=\"homepage\",e.PAYMENT=\"payment\",e.PRODUCT=\"product\"}(D||(D={})),function(e){e.Sandbox=\"sandbox\",e.Production=\"production\"}(_||(_={})),function(e){e.Client=\"client\",e.DataCollector=\"dataCollector\",e.Fastlane=\"fastlane\",e.GooglePayment=\"googlePayment\",e.HostedFields=\"hostedFields\",e.LocalPayment=\"localPayment\",e.Paypal=\"paypal\",e.PaypalCheckout=\"paypalCheckout\",e.ThreeDSecure=\"threeDSecure\",e.UsBankAccount=\"usBankAccount\",e.Venmo=\"venmo\",e.VisaCheckout=\"visaCheckout\"}(B||(B={})),function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\"}(x||(x={}));var L=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class V{constructor(e,t,i){this.braintreeScriptLoader=e,this.braintreeHostWindow=t,this.overlay=i,this.dataCollectors={}}initialize(e,t){this.clientToken=e,this.threeDSecureOptions=t}getBraintreeFastlane(e,t,i){return L(this,void 0,void 0,function*(){if(t&&(window.localStorage.setItem(\"axoEnv\",\"sandbox\"),window.localStorage.setItem(\"fastlaneEnv\",\"sandbox\")),!this.braintreeHostWindow.braintreeFastlane){const t=this.getClientTokenOrThrow(),n=yield this.getClient(),r=yield this.getSessionId(e),o=yield this.braintreeScriptLoader.loadFastlane(),a={root:{backgroundColorPrimary:\"transparent\"}};this.braintreeHostWindow.braintreeFastlane=yield o.create({authorization:t,client:n,deviceData:r,styles:i||a})}return this.braintreeHostWindow.braintreeFastlane})}getClient(){return L(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=t.create({authorization:e})}return this.client})}getPaypal(){return this.braintreePaypal||(this.braintreePaypal=Promise.all([this.getClient(),this.braintreeScriptLoader.loadPaypal()]).then(([e,t])=>t.create({client:e}))),this.braintreePaypal}paypal(e){var{shouldSaveInstrument:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"shouldSaveInstrument\"]);const n=(0,_braintree_browser_detection__WEBPACK_IMPORTED_MODULE_3__.supportsPopups)();return this.getPaypal().then(e=>{var r;return n&&(null===(r=this.overlay)||void 0===r||r.show({onClick:()=>e.focusWindow()})),e.tokenize(Object.assign({enableShippingAddress:!0,flow:t?\"vault\":\"checkout\",useraction:\"commit\"},i))}).then(e=>{var t;return null===(t=this.overlay)||void 0===t||t.remove(),e}).catch(e=>{var t;throw null===(t=this.overlay)||void 0===t||t.remove(),e})}getPaypalCheckout(e,t,i){return L(this,void 0,void 0,function*(){const n=yield this.getClient(),r=yield this.braintreeScriptLoader.loadPaypalCheckout(),o={client:n};return this.paypalCheckout=yield r.create(o,(n,r)=>{var o;if(n)return i(n);const a=Object.assign(Object.assign({currency:e.currency},e.isCreditEnabled&&{\"enable-funding\":\"paylater\"}),{components:E.toString(),intent:e.intent,commit:null===(o=e.commit)||void 0===o||o});this.braintreeHostWindow.paypal?t(r):r.loadPayPalSDK(a,()=>t(r))}),this.paypalCheckout})}getDataCollector(e){return L(this,void 0,void 0,function*(){const t=(null==e?void 0:e.paypal)?\"paypal\":\"default\";let i=this.dataCollectors[t];if(!i){try{const t=yield this.getClient(),n=yield this.braintreeScriptLoader.loadDataCollector(),r=Object.assign({client:t,kount:!0},e);i=yield n.create(r)}catch(e){if(!F(e)||\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"!==e.code)throw e;i={deviceData:void 0,teardown:()=>Promise.resolve()}}this.dataCollectors[t]=i}return i})}getBraintreeEnv(e=!1){return e?_.Sandbox:_.Production}mapToBraintreeShippingAddressOverride(e){return{recipientName:`${e.firstName} ${e.lastName}`,line1:e.address1,line2:e.address2,city:e.city,state:e.stateOrProvinceCode,postalCode:e.postalCode,countryCode:e.countryCode,phone:e.phone}}mapToLegacyShippingAddress(e){const{email:t,phone:i,shippingAddress:n}=e,r=(null==n?void 0:n.recipientName)||\"\",[o,a]=r.split(\" \");return{email:t,first_name:o||\"\",last_name:a||\"\",phone_number:i,address_line_1:null==n?void 0:n.line1,address_line_2:null==n?void 0:n.line2,city:null==n?void 0:n.city,state:null==n?void 0:n.state,country_code:null==n?void 0:n.countryCode,postal_code:null==n?void 0:n.postalCode}}mapToLegacyBillingAddress(e){const{billingAddress:t,email:i,firstName:n,lastName:r,phone:o,shippingAddress:a}=e,s=t||a;return{email:i,first_name:n,last_name:r,phone_number:o,address_line_1:null==s?void 0:s.line1,address_line_2:null==s?void 0:s.line2,city:null==s?void 0:s.city,state:null==s?void 0:s.state,country_code:null==s?void 0:s.countryCode,postal_code:null==s?void 0:s.postalCode}}removeElement(e){const t=e&&document.getElementById(e);t&&t.remove()}getSessionId(e){return L(this,void 0,void 0,function*(){const{deviceData:t}=yield this.getDataCollector({riskCorrelationId:e});return t})}teardown(){return L(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollectors.default),yield this.teardownModule(this.dataCollectors.paypal),this.dataCollectors={},yield this.teardownModule(this.paypalCheckout),this.paypalCheckout=void 0})}get3DS(){return L(this,void 0,void 0,function*(){return this.threeDS||(this.threeDS=Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]).then(([e,t])=>t.create({client:e,version:2}))),this.threeDS})}getVenmoCheckout(e){return L(this,void 0,void 0,function*(){if(!this.venmoCheckout){const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadVenmoCheckout(),n=Object.assign({client:t,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},e||{});this.venmoCheckout=yield new Promise((e,t)=>{i.create(n,(i,n)=>i?t(i):n.isBrowserSupported()?void e(n):t(new b))})}return this.venmoCheckout})}verifyCard(e,t,i){return L(this,void 0,void 0,function*(){const n=yield this.tokenizeCard(e,t);return this.challenge3DSVerification(n,i)})}tokenizeCard(e,t){return L(this,void 0,void 0,function*(){const{paymentData:i}=e;if(!function(e){if(\"object\"!=typeof e||null===e)return!1;const t=e;return\"object\"==typeof t.ccExpiry&&null!==t.ccExpiry&&\"string\"==typeof t.ccNumber&&\"string\"==typeof t.ccName}(i))throw new C([\"payment.paymentData\"]);const r=this.getErrorsRequiredFields(i);if(!(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(r))throw new S(r);const o=this.mapToCreditCard(i,t),a=yield this.getClient(),{creditCards:s}=yield a.request(o);return{nonce:s[0].nonce,bin:s[0].details.bin}})}challenge3DSVerification(e,t){return L(this,void 0,void 0,function*(){const i=yield this.get3DS();return this.present3DSChallenge(i,t,e)})}teardownModule(e){return e?e.teardown():Promise.resolve()}getClientTokenOrThrow(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);return this.clientToken}getErrorsRequiredFields(e){const{ccNumber:t,ccExpiry:i}=e,n={};return t||(n.ccNumber=[{message:\"Credit card number is required\",type:\"required\"}]),i||(n.ccExpiry=[{message:\"Expiration date is required\",type:\"required\"}]),n}mapToCreditCard(e,t){return{data:{creditCard:{cardholderName:e.ccName,number:e.ccNumber,cvv:e.ccCvv,expirationDate:`${e.ccExpiry.month}/${e.ccExpiry.year}`,options:{validate:!1},billingAddress:t&&{countryCodeAlpha2:t.countryCode,locality:t.city,countryName:t.country,postalCode:t.postalCode,streetAddress:t.address2?`${t.address1} ${t.address2}`:t.address1}}},endpoint:\"payment_methods/credit_cards\",method:\"post\"}}present3DSChallenge(e,t,i){const{nonce:n,bin:r}=i;if(!this.threeDSecureOptions||!n)throw new I(P.PaymentNotInitialized);const{addFrame:o,removeFrame:a,challengeRequested:s=!0,additionalInformation:d}=this.threeDSecureOptions,l=()=>L(this,void 0,void 0,function*(){const t=yield e.cancelVerifyCard();return u.cancel(new O),t}),c=t.toFixed(2),u=new k(e.verifyCard({addFrame:(e,t)=>{o&&o(e,t,l)},amount:Number(c),bin:r,challengeRequested:s,nonce:n,removeFrame:a,onLookupComplete:(e,t)=>{t()},collectDeviceData:!0,additionalInformation:d}));return u.promise}}class j extends f{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}const U={[g]:{[B.Client]:\"sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt\",[B.PaypalCheckout]:\"sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O\",[B.Paypal]:\"sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+\",[B.LocalPayment]:\"sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT\",[B.DataCollector]:\"sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV\",[B.UsBankAccount]:\"sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ\",[B.GooglePayment]:\"sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe\",[B.ThreeDSecure]:\"sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB\",[B.VisaCheckout]:\"sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT\",[B.Venmo]:\"sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov\",[B.HostedFields]:\"sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy\",[B.Fastlane]:\"sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa\"},[p]:{[B.Client]:\"sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO\",[B.PaypalCheckout]:\"sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/\",[B.Paypal]:\"sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt\",[B.LocalPayment]:\"sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH\",[B.DataCollector]:\"sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO\",[B.UsBankAccount]:\"sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW\",[B.GooglePayment]:\"sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO\",[B.ThreeDSecure]:\"sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym\",[B.VisaCheckout]:\"sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS\",[B.Venmo]:\"sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU\",[B.HostedFields]:\"sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P\",[B.Fastlane]:\"sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y\"},[m]:{[B.Client]:\"sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq\",[B.PaypalCheckout]:\"sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh\",[B.Paypal]:\"sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH\",[B.LocalPayment]:\"sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC\",[B.DataCollector]:\"sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc\",[B.UsBankAccount]:\"sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F\",[B.GooglePayment]:\"sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i\",[B.ThreeDSecure]:\"sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D\",[B.VisaCheckout]:\"sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv\",[B.Venmo]:\"sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz\",[B.HostedFields]:\"sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z\",[B.Fastlane]:\"sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr\"}};var R,H=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class W{constructor(e,t,i){this.scriptLoader=e,this.braintreeHostWindow=t,this.braintreeSDKVersionManager=i}loadClient(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Client,\"client.min.js\")})}loadFastlane(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Fastlane,\"fastlane.min.js\")})}loadPaypalCheckout(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.PaypalCheckout,\"paypal-checkout.min.js\")})}loadPaypal(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Paypal,\"paypal.min.js\")})}loadLocalPayment(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.LocalPayment,\"local-payment.min.js\")})}loadDataCollector(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.DataCollector,\"data-collector.min.js\")})}loadUsBankAccount(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.UsBankAccount,\"us-bank-account.min.js\")})}loadGooglePayment(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.GooglePayment,\"google-payment.min.js\")})}load3DS(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.ThreeDSecure,\"three-d-secure.min.js\")})}loadVisaCheckout(){return this.loadBraintreeModuleOrThrow(B.VisaCheckout,\"visa-checkout.min.js\")}loadVenmoCheckout(){return this.loadBraintreeModuleOrThrow(B.Venmo,\"venmo.min.js\")}loadHostedFields(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.HostedFields,\"hosted-fields.min.js\")})}loadVisaCheckoutSdk(e){return H(this,void 0,void 0,function*(){if(this.braintreeHostWindow.V)return this.braintreeHostWindow.V;const t=e?\"sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm\":\"sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6\";return this.scriptLoader.loadScript(`//${e?\"sandbox-\":\"\"}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,{async:!0,attributes:{integrity:t,crossorigin:\"anonymous\"}}).then(()=>{if(!this.braintreeHostWindow.V)throw new j;return this.braintreeHostWindow.V})})}loadBraintreeModuleOrThrow(e,t){return H(this,void 0,void 0,function*(){let i=this.getBraintreeModule(e);if(i)return i;const n=this.braintreeSDKVersionManager.getSDKVersion(),r=`//js.braintreegateway.com/web/${n}/js/${t}`,o=n in U?this.getIntegrityValuesByModuleName(e,n):void 0;if(yield this.scriptLoader.loadScript(r,o?{async:!0,attributes:{integrity:o,crossorigin:\"anonymous\"}}:void 0),i=this.getBraintreeModule(e),!i)throw new j;return i})}getBraintreeModule(e){var t;return null===(t=this.braintreeHostWindow.braintree)||void 0===t?void 0:t[e]}getIntegrityValuesByModuleName(e,t){const i=U[t][e];if(!i)throw new Error(\"Unexpected fileName value\");return i}}function q(e,t){return console.log(\"resolveIds\",t),Object.assign(e,{resolveIds:t})}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(R||(R={}));class $ extends f{constructor(e){super(function(e){switch(e){case R.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case R.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case R.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case R.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case R.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case R.MissingCheckoutConfig:case R.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case R.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case R.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case R.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case R.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case R.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case R.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}var G=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Y{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return G(this,void 0,void 0,function*(){const{braintreepaypal:t,methodId:i}=e,{container:n,onError:r}=t||{};if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.');let o,a=this.paymentIntegrationService.getState();try{if(o=a.getPaymentMethodOrThrow(i),!o.clientToken)throw new $(R.MissingPaymentToken)}catch(e){a=yield this.paymentIntegrationService.loadPaymentMethod(i),o=a.getPaymentMethodOrThrow(i)}const{clientToken:s,config:d,initializationData:l}=o,{paymentButtonStyles:c}=l||{},{checkoutTopButtonStyles:u}=c||{};if(!s||!l)throw new $(R.MissingPaymentMethod);const h={currency:a.getCartOrThrow().currency.code,intent:l.intent,isCreditEnabled:l.isCreditEnabled,commit:!1};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{this.renderPayPalButton(e,t,i,Boolean(d.testMode),u)},e=>this.handleError(e,n,r))})}deinitialize(){return G(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}signIn(e,t){return G(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return G(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderPayPalButton(e,t,i,n,r){const{container:o,onClick:s=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t,{paypal:d}=this.braintreeHostWindow,l=null==d?void 0:d.FUNDING.PAYPAL;if(d&&l){const a=d.Buttons({env:this.braintreeIntegrationService.getBraintreeEnv(n),fundingSource:l,style:Object.assign(Object.assign({},r),{height:36}),createOrder:()=>this.setupPayment(e,t,i),onApprove:n=>this.tokenizePayment(n,e,i,t),onClick:s});a.isEligible()&&a.render(`#${o}`)}else this.braintreeIntegrationService.removeElement(o)}setupPayment(e,t,i){var n;return G(this,void 0,void 0,function*(){try{yield this.paymentIntegrationService.loadDefaultCheckout();const t=this.paymentIntegrationService.getState(),r=t.getCheckoutOrThrow().outstandingBalance,o=t.getCartOrThrow().currency.code,a=t.getCustomer(),s=t.getPaymentMethodOrThrow(i),d=null==a?void 0:a.addresses[0],l=d?this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(d):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:l,amount:r,currency:o,offerCredit:!1,intent:null===(n=s.initializationData)||void 0===n?void 0:n.intent})}catch(e){const{container:i,onError:n}=t;this.handleError(e,i,n)}})}tokenizePayment(e,t,i,n){return G(this,void 0,void 0,function*(){try{const{deviceData:n}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),r=yield t.tokenizePayment(e),{details:o,nonce:a}=r,s=this.braintreeIntegrationService.mapToLegacyBillingAddress(o),d=this.braintreeIntegrationService.mapToLegacyShippingAddress(o);return this.formPoster.postForm(\"/checkout.php\",{payment_type:\"paypal\",provider:i,action:\"set_external_checkout\",nonce:a,device_data:n,billing_address:JSON.stringify(s),shipping_address:JSON.stringify(d)}),r}catch(e){const{container:t,onError:i}=n;this.handleError(e,t,i)}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const J=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new Y(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypal\"}]);var K=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class X{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return K(this,void 0,void 0,function*(){const{braintreepaypalcredit:t,methodId:i}=e,{container:n,onError:r}=t||{};if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.');let o,a=this.paymentIntegrationService.getState();try{if(o=a.getPaymentMethodOrThrow(i),!o.clientToken)throw new $(R.MissingPaymentToken)}catch(e){a=yield this.paymentIntegrationService.loadPaymentMethod(i),o=a.getPaymentMethodOrThrow(i)}const{clientToken:s,config:d,initializationData:l}=o,{paymentButtonStyles:c}=l||{},{checkoutTopButtonStyles:u}=c||{};if(!s||!l)throw new $(R.MissingPaymentMethod);const h={currency:a.getCartOrThrow().currency.code,intent:l.intent,isCreditEnabled:l.isCreditEnabled,commit:!1};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{this.renderPayPalButton(e,t,i,Boolean(d.testMode),Object.assign(Object.assign({},u),{height:36}))},e=>this.handleError(e,n,r))})}deinitialize(){return K(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}signIn(e,t){return K(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return K(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderPayPalButton(e,t,i,n,r){const{container:o,onClick:s=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t,{paypal:d}=this.braintreeHostWindow;let l=!1;d&&[d.FUNDING.PAYLATER,d.FUNDING.CREDIT].forEach(a=>{if(!l){const c=d.Buttons({env:n?\"sandbox\":\"production\",fundingSource:a,style:r,createOrder:()=>this.setupPayment(e,t,i),onApprove:n=>this.tokenizePayment(n,e,i,t),onClick:s});c.isEligible()&&(c.render(`#${o}`),l=!0)}}),d&&l||this.braintreeIntegrationService.removeElement(o)}setupPayment(e,t,i){var n;return K(this,void 0,void 0,function*(){try{yield this.paymentIntegrationService.loadDefaultCheckout();const t=this.paymentIntegrationService.getState(),r=t.getCheckoutOrThrow().outstandingBalance,o=t.getCartOrThrow().currency.code,a=t.getCustomer(),s=t.getPaymentMethodOrThrow(i),d=null==a?void 0:a.addresses[0],l=d?this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(d):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:l,amount:r,currency:o,offerCredit:!0,intent:null===(n=s.initializationData)||void 0===n?void 0:n.intent})}catch(e){const{container:i,onError:n}=t;this.handleError(e,i,n)}})}tokenizePayment(e,t,i,n){return K(this,void 0,void 0,function*(){try{const{deviceData:n}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),r=yield t.tokenizePayment(e),{details:o,nonce:a}=r,s=this.braintreeIntegrationService.mapToLegacyBillingAddress(o),d=this.braintreeIntegrationService.mapToLegacyShippingAddress(o);return this.formPoster.postForm(\"/checkout.php\",{payment_type:\"paypal\",provider:i,action:\"set_external_checkout\",nonce:a,device_data:n,billing_address:JSON.stringify(s),shipping_address:JSON.stringify(d)}),r}catch(e){const{container:t,onError:i}=n;this.handleError(e,t,i)}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const Q=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new X(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypalcredit\"}]);function Z(e){return\"string\"!=typeof e}function ee(e,t){if(t||e)return function(e){var t,i;const n={},r=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.root,Z),o=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.input,Z),a=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.toggle,Z),s=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(null===(t=e.text)||void 0===t?void 0:t.body,Z),l=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(null===(i=e.text)||void 0===i?void 0:i.caption,Z),c=e.branding;return Object.keys(r).length&&(n.root=r),Object.keys(o).length&&(n.input=o),Object.keys(a).length&&(n.toggle=a),Object.keys(s).length&&(n.text={},n.text.body=s),Object.keys(l).length&&(n.text=Object.assign({},n.text),n.text.caption=l),c&&(n.branding=c),n}(function(e,t){var i,n,r,o,a,s,d,l,c,u,h,y,m,p,g,v,f,b,w,C,S,P;return{root:{backgroundColorPrimary:(null==e?void 0:e.fastlaneRootSettingsBackgroundColor)||(null===(i=null==t?void 0:t.root)||void 0===i?void 0:i.backgroundColorPrimary),errorColor:(null==e?void 0:e.fastlaneRootSettingsErrorColor)||(null===(n=null==t?void 0:t.root)||void 0===n?void 0:n.errorColor),fontFamily:(null==e?void 0:e.fastlaneRootSettingsFontFamily)||(null===(r=null==t?void 0:t.root)||void 0===r?void 0:r.fontFamily),fontSizeBase:(null==e?void 0:e.fastlaneRootSettingsFontSize)||(null===(o=null==t?void 0:t.root)||void 0===o?void 0:o.fontSizeBase),padding:(null==e?void 0:e.fastlaneRootSettingsPadding)||(null===(a=null==t?void 0:t.root)||void 0===a?void 0:a.padding),primaryColor:(null==e?void 0:e.fastlaneRootSettingsPrimaryColor)||(null===(s=null==t?void 0:t.root)||void 0===s?void 0:s.primaryColor)},input:{borderRadius:(null==e?void 0:e.fastlaneInputSettingsBorderRadius)||(null===(d=null==t?void 0:t.input)||void 0===d?void 0:d.borderRadius),borderColor:(null==e?void 0:e.fastlaneInputSettingsBorderColor)||(null===(l=null==t?void 0:t.input)||void 0===l?void 0:l.borderColor),focusBorderColor:(null==e?void 0:e.fastlaneInputSettingsFocusBorderBase)||(null===(c=null==t?void 0:t.input)||void 0===c?void 0:c.focusBorderColor),backgroundColor:(null==e?void 0:e.fastlaneInputSettingsBackgroundColor)||(null===(u=null==t?void 0:t.input)||void 0===u?void 0:u.backgroundColor),borderWidth:(null==e?void 0:e.fastlaneInputSettingsBorderWidth)||(null===(h=null==t?void 0:t.input)||void 0===h?void 0:h.borderWidth),textColorBase:(null==e?void 0:e.fastlaneInputSettingsTextColorBase)||(null===(y=null==t?void 0:t.input)||void 0===y?void 0:y.textColorBase)},toggle:{colorPrimary:(null==e?void 0:e.fastlaneToggleSettingsColorPrimary)||(null===(m=null==t?void 0:t.toggle)||void 0===m?void 0:m.colorPrimary),colorSecondary:(null==e?void 0:e.fastlaneToggleSettingsColorSecondary)||(null===(p=null==t?void 0:t.toggle)||void 0===p?void 0:p.colorSecondary)},text:{body:{color:(null==e?void 0:e.fastlaneTextBodySettingsColor)||(null===(v=null===(g=null==t?void 0:t.text)||void 0===g?void 0:g.body)||void 0===v?void 0:v.color),fontSize:(null==e?void 0:e.fastlaneTextBodySettingsFontSize)||(null===(b=null===(f=null==t?void 0:t.text)||void 0===f?void 0:f.body)||void 0===b?void 0:b.fontSize)},caption:{color:(null==e?void 0:e.fastlaneTextCaptionSettingsColor)||(null===(C=null===(w=null==t?void 0:t.text)||void 0===w?void 0:w.caption)||void 0===C?void 0:C.color),fontSize:(null==e?void 0:e.fastlaneTextCaptionSettingsFontSize)||(null===(P=null===(S=null==t?void 0:t.text)||void 0===S?void 0:S.caption)||void 0===P?void 0:P.fontSize)}},branding:(null==e?void 0:e.fastlaneBrandingSettings)||(null==t?void 0:t.branding)}}(e,t))}var te,ie,ne,re,oe,ae,se,de,le=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ce{constructor(e,t){this.paymentIntegrationService=e,this.braintreeFastlaneUtils=t,this.isAcceleratedCheckoutEnabled=!1}initialize({methodId:e,braintreefastlane:t}){var i;return le(this,void 0,void 0,function*(){if(!e)throw new w('Unable to proceed because \"methodId\" argument is not provided.');const n=yield this.getValidPaymentMethodOrThrow(e),{isAcceleratedCheckoutEnabled:r,isFastlaneStylingEnabled:o}=n.initializationData||{},a=o?null===(i=n.initializationData)||void 0===i?void 0:i.fastlaneStyles:void 0;this.isAcceleratedCheckoutEnabled=!!r;try{if(this.isAcceleratedCheckoutEnabled){const e=ee(a,null==t?void 0:t.styles);yield this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(n.id,e)}}catch(e){}return Promise.resolve()})}deinitialize(){return le(this,void 0,void 0,function*(){return Promise.resolve()})}signIn(e,t){return le(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return le(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){return le(this,void 0,void 0,function*(){const{checkoutPaymentMethodExecuted:t,continueWithCheckoutCallback:i}=e||{};if(\"function\"!=typeof i)throw new w('Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.');const n=this.paymentIntegrationService.getState().getCustomerOrThrow();if(this.isAcceleratedCheckoutEnabled&&n.isGuest){const e=yield this.shouldRunAuthenticationFlow();t&&\"function\"==typeof t&&t(),e&&(yield this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(void 0,!0))}i()})}shouldRunAuthenticationFlow(){var e;return le(this,void 0,void 0,function*(){const t=\"braintreeacceleratedcheckout\";try{yield this.paymentIntegrationService.loadPaymentMethod(t);const i=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t);return(null===(e=i.initializationData)||void 0===e?void 0:e.shouldRunAcceleratedCheckout)||!1}catch(e){return!1}})}getValidPaymentMethodOrThrow(e){return le(this,void 0,void 0,function*(){let t=e;try{yield this.paymentIntegrationService.loadPaymentMethod(t)}catch(i){t=\"braintree\"===e?\"braintreeacceleratedcheckout\":\"braintree\",yield this.paymentIntegrationService.loadPaymentMethod(t)}return this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t)})}}!function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(te||(te={})),function(e){e.Completed=\"COMPLETED\",e.Pending=\"PENDING\",e.Failed=\"FAILED\"}(ie||(ie={})),function(e){e.TRUSTLY=\"trustly\"}(ne||(ne={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"cancelled\",e.UNRECOGNIZED=\"unrecognized\"}(re||(re={})),function(e){e.Customer=\"CUSTOMER\",e.Merchant=\"MERCHANT\",e.Network=\"NETWORK\",e.Internal=\"INTERNAL\",e.Unknown=\"UNKNOWN\"}(oe||(oe={})),function(e){e.KountNotEnabled=\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"}(ae||(ae={})),function(e){e.Visa=\"visa\",e.Mastercard=\"mastercard\",e.AmericanExpress=\"american-express\",e.DinersClub=\"diners-club\",e.Discover=\"discover\",e.Jcb=\"jcb\",e.UnionPay=\"union-pay\",e.Maestro=\"maestro\",e.Elo=\"elo\",e.Mir=\"mir\",e.Hiper=\"hiper\",e.Hipercard=\"hipercard\"}(se||(se={})),function(e){e.CVV=\"cvv\",e.PAN=\"pan\"}(de||(de={}));class ue{static get(e){const t=`${encodeURIComponent(`${e}`)}=`,i=document.cookie;let n=null;const r=i.indexOf(t);if(r>-1){let e=i.indexOf(\";\",r);-1===e&&(e=i.length),n=decodeURIComponent(i.substring(r+t.length,e))}return n}static set(e,t,i={secure:!0}){let n=`${encodeURIComponent(e)}=${encodeURIComponent(t)}`;const{expires:r,path:o,domain:a,secure:s}=i;if(r)n+=`; expires=${r.toUTCString()}`;else{const e=new Date,t=60;e.setTime(e.getTime()+60*t*1e3),n+=`; expires=${e.toUTCString()}`}o&&(n+=`; path=${o}`),a&&(n+=`; domain=${a}`),s&&(n+=\"; secure\"),document.cookie=n}static remove(e,t){ue.set(e,\"\",Object.assign({expires:new Date(0)},t))}}var he=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ye{constructor(e,t){this.paymentIntegrationService=e,this.braintreeIntegrationService=t}getDeviceSessionId(){return he(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState().getCart();return this.braintreeIntegrationService.getSessionId(null==e?void 0:e.id)})}initializeBraintreeFastlaneOrThrow(e,t){return he(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getCart(),{clientToken:r,config:o}=i.getPaymentMethodOrThrow(e);if(!r)throw new $(R.MissingPaymentMethod);this.methodId=e,this.braintreeIntegrationService.initialize(r),this.braintreeFastlane=yield this.braintreeIntegrationService.getBraintreeFastlane(null==n?void 0:n.id,o.testMode,t)})}getBraintreeFastlaneOrThrow(){if(!this.braintreeFastlane)throw new j;return this.braintreeFastlane}getBraintreeFastlaneComponentOrThrow(){return this.getBraintreeFastlaneOrThrow().FastlaneCardComponent}runPayPalAuthenticationFlowOrThrow(e,t){var i;return he(this,void 0,void 0,function*(){try{const n=this.getMethodIdOrThrow(),r=this.getBraintreeFastlaneOrThrow(),{lookupCustomerByEmail:o,triggerAuthenticationFlow:a}=r.identity,s=this.paymentIntegrationService.getState(),d=s.getCartOrThrow(),l=s.getCustomer(),c=s.getBillingAddress(),{isFastlaneShippingOptionAutoSelectEnabled:u}=s.getPaymentMethodOrThrow(n).initializationData||{},h=e||(null==l?void 0:l.email)||(null==c?void 0:c.email)||\"\",{customerContextId:y}=yield o(h);if(!y)return yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:re.UNRECOGNIZED,addresses:[],instruments:[]}),void this.saveSessionIdToCookies(d.id);const{authenticationState:m,profileData:p}=yield a(y),g=(null===(i=null==p?void 0:p.shippingAddress)||void 0===i?void 0:i.phoneNumber)||\"\";if(m===re.CANCELED)return yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:m,addresses:[],instruments:[]}),void this.removeSessionIdFromCookies();const v=this.mapPayPalToBcAddress([p.shippingAddress],[g])||[],f=this.getPayPalBillingAddresses(p),b=f?this.mapPayPalToBcAddress([f],[g]):[],w=p.card?this.mapPayPalToBcInstrument(n,[p.card]):[],C=this.mergeShippingAndBillingAddresses(v,b);if(this.saveSessionIdToCookies(d.id),yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:m,addresses:C,instruments:w}),b.length>0&&d.lineItems.physicalItems.length>0&&(yield this.paymentIntegrationService.updateBillingAddress(b[0])),b.length>0&&d.lineItems.digitalItems.length>0&&0===d.lineItems.physicalItems.length){const{firstName:e,lastName:t}=C[0],i=Object.assign(Object.assign({},b[0]),{firstName:e,lastName:t});yield this.paymentIntegrationService.updateBillingAddress(i)}v.length>0&&d.lineItems.physicalItems.length>0&&(yield this.paymentIntegrationService.updateShippingAddress(v[0]),t&&u&&(yield this.setShippingOption()))}catch(e){}})}getSessionIdFromCookies(){return ue.get(\"bc-fastlane-sessionId\")||\"\"}saveSessionIdToCookies(e){const t=new Date;t.setDate(t.getDate()+14),ue.set(\"bc-fastlane-sessionId\",e,{expires:t,secure:!0})}removeSessionIdFromCookies(){ue.remove(\"bc-fastlane-sessionId\")}mapPayPalToBcInstrument(e,t){if(t)return t.map(t=>{const{id:i,paymentSource:n}=t,{brand:r,expiry:o,lastDigits:a,binDetails:s}=n.card,[d,l]=o.split(\"-\");return{bigpayToken:i,brand:r,defaultInstrument:!1,expiryMonth:l,expiryYear:d,iin:(null==s?void 0:s.bin)||\"\",last4:a,method:e,provider:e,trustedShippingAddress:!1,type:\"card\",untrustedShippingCardVerificationMode:de.PAN}})}mapPayPalToBcAddress(e,t){if(!e)return[];const i=this.paymentIntegrationService.getState().getCountries()||[],n=e=>{const t=i.find(t=>t.code===e);return(null==t?void 0:t.name)||\"\"};return e.map(e=>({id:Date.now(),type:\"paypal-address\",firstName:e.firstName||\"\",lastName:e.lastName||\"\",company:e.company||\"\",address1:e.streetAddress,address2:e.extendedAddress||\"\",city:e.locality,stateOrProvince:e.region,stateOrProvinceCode:e.region,country:n(e.countryCodeAlpha2),countryCode:e.countryCodeAlpha2,postalCode:e.postalCode,phone:t&&t[0]||\"\",customFields:[]}))}getPayPalBillingAddresses(e){const{card:t,name:i}=e||{};if(!t)return;const{firstName:n,lastName:o}=t.paymentSource.card.billingAddress,{firstName:a,lastName:s}=i||{},{shippingAddress:d}=e||{},l=Object.assign(Object.assign({},t.paymentSource.card.billingAddress),{firstName:n||a,lastName:o||s});return d&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEqual)(this.normalizeAddress(l),this.normalizeAddress(d))?d:l}normalizeAddress(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omit)(e,[\"id\"])}mergeShippingAndBillingAddresses(e,t){const i=t.filter(t=>!e.some(e=>(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEqual)(this.normalizeAddress(e),this.normalizeAddress(t))));return[...e,...i]}getMethodIdOrThrow(){if(!this.methodId)throw new w('Unable to proceed because \"methodId\" argument is not provided.');return this.methodId}setShippingOption(){var e;return he(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getConsignments()||[],i=(null===(e=t[0])||void 0===e?void 0:e.availableShippingOptions)||[],n=i.find(e=>e.isRecommended);if(n||i.length){const e=n||i[0];yield this.paymentIntegrationService.selectShippingOption(e.id)}})}}const me=q(e=>{const i=window,n=new v(e),r=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),i),o=new ye(e,r);return new ce(e,o)},[{id:\"braintreeacceleratedcheckout\"},{id:\"braintree\"}]);var pe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ge{constructor(e){this.braintreeScriptLoader=e}initialize(e){this.setClientToken(e)}deinitialize(){return pe(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollector),this.dataCollector=void 0})}getClient(){return pe(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=yield t.create({authorization:e})}return this.client})}getDataCollectorOrThrow(e){return pe(this,void 0,void 0,function*(){const t={deviceData:void 0,teardown:()=>Promise.resolve()};if(!this.dataCollector)try{const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadDataCollector(),n=Object.assign({client:t,kount:!0},e);this.dataCollector=yield i.create(n)}catch(e){if(F(e)&&e.code===ae.KountNotEnabled)return t;throw e}return this.dataCollector})}getBraintreeGooglePayment(){return pe(this,void 0,void 0,function*(){if(!this.googlePayment){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadGooglePayment()]);this.googlePayment=yield t.create({client:e})}return this.googlePayment})}getBraintreeThreeDS(){return pe(this,void 0,void 0,function*(){if(!this.threeDS){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]);this.threeDS=yield t.create({client:e,version:2})}return this.threeDS})}getBraintreeLocalPayment(e){return pe(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment){const[t,i]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadLocalPayment()]);this.braintreeLocalPayment=yield new Promise((n,r)=>{i.create({client:t,merchantAccountId:e},(e,t)=>{e&&r(e),n(t)})})}return this.braintreeLocalPayment})}getUsBankAccount(){return pe(this,void 0,void 0,function*(){if(!this.usBankAccount){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadUsBankAccount();this.usBankAccount=yield t.create({client:e})}return this.usBankAccount})}getBraintreeVisaCheckout(){return this.visaCheckout||(this.visaCheckout=Promise.all([this.getClient(),this.braintreeScriptLoader.loadVisaCheckout()]).then(([e,t])=>t.create({client:e}))),this.visaCheckout}getVisaCheckoutSdk(e){return pe(this,void 0,void 0,function*(){return this.visaCheckoutSDK||(this.visaCheckoutSDK=yield this.braintreeScriptLoader.loadVisaCheckoutSdk(e)),this.visaCheckoutSDK})}getVenmoCheckoutOrThrow(){return pe(this,void 0,void 0,function*(){if(!this.braintreeVenmo){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadVenmoCheckout(),i={client:e,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},n=yield t.create(i);if(!n.isBrowserSupported())throw new b;this.braintreeVenmo=n}return this.braintreeVenmo})}setClientToken(e){this.clientToken=e}getClientTokenOrThrow(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);return this.clientToken}teardownModule(e){return e?e.teardown():Promise.resolve()}}class ve extends f{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}var fe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class be{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i,this.buttonClassName=\"visa-checkout-wrapper\",this.onError=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}initialize(e){return fe(this,void 0,void 0,function*(){const{braintreevisacheckout:t,methodId:i}=e;if(!i)throw new w('Unable to proceed because \"methodId\" argument is not provided.');if(!t)throw new w('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState(),r=n.getCheckoutOrThrow(),{clientToken:o,config:s}=n.getPaymentMethodOrThrow(i),d=n.getStoreConfigOrThrow();if(!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(o);const l=yield this.braintreeSdk.getBraintreeVisaCheckout(),c=yield this.braintreeSdk.getVisaCheckoutSdk(s.testMode),{container:u,onError:h}=t;this.onError=h||lodash__WEBPACK_IMPORTED_MODULE_2__.noop;const y=l.createInitOptions({paymentRequest:{currencyCode:d.currency.code,subtotal:String(r.subtotal)},settings:{locale:d.storeProfile.storeLanguage,shipping:{collectShipping:!0}}}),m=this.createSignInButton(u,this.buttonClassName);yield c.init(y),c.on(\"payment.success\",e=>this.tokenizePayment(l,e).then(()=>this.paymentIntegrationService.loadCheckout()).catch(e=>this.handleError(e))),c.on(\"payment.error\",(e,t)=>this.handleError(t)),m.style.visibility=\"visible\"})}deinitialize(){return fe(this,void 0,void 0,function*(){yield this.braintreeSdk.deinitialize()})}signIn(){throw new ve('In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.')}signOut(e){return fe(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}tokenizePayment(e,t){return fe(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.mapToVisaCheckoutAddress(n),billingAddress:a=this.mapToVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}mapToVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}createSignInButton(e,t){const i=document.querySelector(`#${e}`);if(!i)throw new Error(\"Unable to proceed because the provided container ID is not valid.\");return this.insertVisaCheckoutButton(i,t)}insertVisaCheckoutButton(e,t){const i=document.createElement(\"div\");return i.style.display=\"flex\",i.style.flexDirection=\"column\",i.style.visibility=\"hidden\",i.style.width=\"max-content\",i.className=t,i.innerHTML='\\n            <img\\n                alt=\"Visa Checkout\"\\n                class=\"v-button\"\\n                role=\"button\"\\n                src=\"https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178\"\\n                />\\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>',e.appendChild(i),i}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}}const we=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new be(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);function Ce(e){return Boolean(e.instrumentId)}class Se extends f{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function Pe(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}class Ie extends f{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}function Oe(e){return!!e&&\"accountNumber\"in e&&\"routingNumber\"in e&&\"ownershipType\"in e&&\"accountType\"in e}var ke=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ee{constructor(e,t){this.paymentIntegrationService=e,this.braintreeSdk=t}initialize(e){return ke(this,void 0,void 0,function*(){const{methodId:t,braintreeach:i}=e||{};if(!t)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');this.getMandateText=null==i?void 0:i.getMandateText,yield this.paymentIntegrationService.loadPaymentMethod(t);const n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{clientToken:r,initializationData:o}=n;if(!r||!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(r);try{this.usBankAccount=yield this.braintreeSdk.getUsBankAccount()}catch(e){this.handleBraintreeError(e)}})}execute(e,t){return ke(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);const r=Ce(i.paymentData||{}),o=r?yield this.tokenizePaymentForVaultedInstrument(i):yield this.tokenizePayment(i),a=r?yield this.preparePaymentDataForVaultedInstrument(o,i):yield this.preparePaymentData(o,i);yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment(a)})}finalize(){return Promise.reject(new Se)}deinitialize(){return ke(this,void 0,void 0,function*(){return yield this.braintreeSdk.deinitialize(),Promise.resolve()})}tokenizePayment({paymentData:e}){return ke(this,void 0,void 0,function*(){const t=this.getUsBankAccountOrThrow();if(!Oe(e))throw new C([\"payment.paymentData\"]);const i=Ce(e)?\"The data are used for stored instrument verification\":\"function\"==typeof this.getMandateText&&this.getMandateText();if(!i)throw new w(\"Unable to proceed because getMandateText is not provided or returned undefined value.\");try{const{nonce:n}=yield t.tokenize({bankDetails:this.getBankDetails(e),mandateText:i});return n}catch(e){this.handleBraintreeError(e)}})}tokenizePaymentForVaultedInstrument(e){return ke(this,void 0,void 0,function*(){const{methodId:t,paymentData:i={}}=e,n=this.paymentIntegrationService.getState(),{config:r}=n.getPaymentMethodOrThrow(t);if(!r.isVaultingEnabled)throw new w(\"Vaulting is disabled but a vaulted instrument was being used for this transaction\");return Oe(i)?this.tokenizePayment(e):null})}preparePaymentData(e,t){return ke(this,void 0,void 0,function*(){const{methodId:i,paymentData:n={}}=t;if(!Oe(n))throw new C([\"payment.paymentData\"]);const{deviceData:r}=yield this.braintreeSdk.getDataCollectorOrThrow(),{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,routingNumber:s,accountNumber:d}=n;return{methodId:i,paymentData:{deviceSessionId:r,shouldSetAsDefaultInstrument:a,shouldSaveInstrument:o,formattedPayload:{tokenized_bank_account:{issuer:s,masked_account_number:d.substr(-4),token:e}}}}})}preparePaymentDataForVaultedInstrument(e,t){return ke(this,void 0,void 0,function*(){const{methodId:i,paymentData:n={}}=t;if(!Ce(n)||!Pe(n))throw new C([\"payment.paymentData\"]);const{deviceData:r}=yield this.braintreeSdk.getDataCollectorOrThrow(),{instrumentId:o,shouldSetAsDefaultInstrument:a}=n;return{methodId:i,paymentData:Object.assign({deviceSessionId:r,instrumentId:o,shouldSetAsDefaultInstrument:a},e&&{nonce:e})}})}getBankDetails(e){const t=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),i=e.ownershipType.toLowerCase(),n=e.accountType.toLowerCase();return Object.assign(Object.assign({accountNumber:e.accountNumber,routingNumber:e.routingNumber,ownershipType:i},\"personal\"===i?{firstName:e.firstName,lastName:e.lastName}:{businessName:e.businessName}),{accountType:n,billingAddress:{streetAddress:t.address1,extendedAddress:t.address2,locality:t.city,region:t.stateOrProvinceCode,postalCode:t.postalCode}})}getUsBankAccountOrThrow(){if(!this.usBankAccount)throw new I(P.PaymentNotInitialized);return this.usBankAccount}handleBraintreeError(e){if(!F(e))throw e;throw new Ie(e.message)}}const Te=q(e=>new Ee(e,(e=>{const i=new v(e),n=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),window,i);return new ge(n)})(e)),[{id:\"braintreeach\"}]);class Ae{constructor(e){this.paymentIntegrationService=e,this.braintreeHostWindow=window}render(e,t,i){const n=t&&document.getElementById(t);if(this.braintreeHostWindow.paypal&&n){const r=this.paymentIntegrationService.getState(),o=r.getCartOrThrow(),a=r.getBillingAddressOrThrow(),s=r.getPaymentMethodOrThrow(e);if(!s.initializationData)return;const{paypalBNPLConfiguration:d=[]}=s.initializationData,l=i===D.PAYMENT?\"checkout\":i,c=d&&d.find(({id:e})=>e===l);if(!c||!c.status)return;i===D.CART&&(n.removeAttribute(\"data-pp-style-logo-type\"),n.removeAttribute(\"data-pp-style-logo-position\"),n.removeAttribute(\"data-pp-style-text-color\"),n.removeAttribute(\"data-pp-style-text-size\")),this.braintreeHostWindow.paypal.Messages({amount:o.cartAmount,buyerCountry:a.countryCode,placement:i,style:this.getPaypalMessagesStylesFromBNPLConfig(c)}).render(`#${t}`)}}getPaypalMessagesStylesFromBNPLConfig({styles:e}){const t={};return e.color&&(t.color=e.color),e.layout&&(t.layout=e.layout),(e[\"logo-type\"]||e[\"logo-position\"])&&(t.logo={},e[\"logo-type\"]&&(t.logo.type=e[\"logo-type\"]),e[\"logo-position\"]&&(t.logo.position=e[\"logo-position\"])),e.ratio&&(t.ratio=e.ratio),(e[\"text-color\"]||e[\"text-size\"])&&(t.text={},e[\"text-color\"]&&(t.text.color=e[\"text-color\"]),e[\"text-size\"]&&(t.text.size=+e[\"text-size\"])),t}}class ze{constructor(e){const{element:t,closeElement:i,mainElement:n}=this._createElements(e);this._element=t,this._closeElement=i,this._mainElement=n}show(e){this._mainElement.parentElement||(this._registerClick(e),document.body.appendChild(this._mainElement),setTimeout(()=>this._element.style.opacity=\"1\"))}remove(){this._mainElement.parentElement&&(this._unregisterClick&&this._unregisterClick(),this._removeAfterTransition(),setTimeout(()=>this._element.style.opacity=\"0\"))}_createElements(e){const t=document.createElement(\"div\"),{background:i=\"rgba(0, 0, 0, 0.8)\",id:n=\"checkoutOverlay\",transitionDuration:r=400,hasCloseButton:o=!1,innerHtml:a=null}=e||{};let s,d,l,c,u=t;if(n&&(t.id=n),a){const e=document.createElement(\"div\");c=`${n}--overlayText`,e.className=c,e.appendChild(a),t.appendChild(e)}return o&&(l=`${n}--close`,s=document.createElement(\"div\"),s.className=l,d=`${n}--layout`,u=document.createElement(\"div\"),u.className=d,u.appendChild(t),u.appendChild(s)),u.appendChild(function(e){const{id:t,background:i,transitionDuration:n,classLayout:r,classOverlayText:o,classClose:a}=e,s=document.createElement(\"style\"),d=r?`, .${r}`:\"\";return s.id=`${t}--styles`,s.type=\"text/css\",s.innerText=`\\n        #${t}${d} {\\n            display: block;\\n            height: 100%;\\n            width: 100%;\\n            left: 0;\\n            top: 0;\\n            position: fixed;\\n            z-index: 2147483647;\\n        }\\n        #${t} {\\n            transition: opacity ${n}ms ease-out;\\n            background: ${i};\\n            opacity: 0;\\n        }\\n    `,o&&(s.innerText+=`\\n             #${t} {\\n                display: flex;\\n                align-items: center;\\n                justify-content: center;\\n             }\\n             #${t} .${o} {\\n                color: white;\\n                max-width: 330px;\\n                font-size: 1.2em;\\n                text-align: center;\\n             }\\n        `),a&&(s.innerText+=`\\n            #${t} {\\n                opacity: 1;\\n            }\\n            .${r} .${a} {\\n                position: fixed;\\n                right: 16px;\\n                top: 16px;\\n                width: 16px;\\n                height: 16px;\\n                opacity: 0.6;\\n                cursor: pointer;\\n                z-index: 3147483647;\\n            }\\n            .${r} .${a}::after, .${r} .${a}::before {\\n                position: absolute;\\n                left: 8px;\\n                content: '';\\n                height: 16px;\\n                width: 2px;\\n                background-color: #fff;\\n            }\\n            .${r} .${a}::after {\\n                transform: rotate(-45deg);\\n            }\\n            .${r} .${a}::before {\\n                transform: rotate(45deg);\\n            }\\n        `),s}({id:n,background:i,transitionDuration:r,classLayout:d,classOverlayText:c,classClose:l})),{element:t,closeElement:s,mainElement:u}}_addEventListener(e,t){e&&t&&e.addEventListener(\"click\",t)}_removeEventListener(e,t){e&&t&&e.removeEventListener(\"click\",t)}_registerClick(e){if(this._unregisterClick&&this._unregisterClick(),e){const{onClick:t,onClickClose:i}=e;this._addEventListener(this._element,t),this._addEventListener(this._closeElement,i),this._unregisterClick=()=>{this._removeEventListener(this._element,t),this._removeEventListener(this._closeElement,i),this._unregisterClick=void 0}}}_removeAfterTransition(){const e=t=>{\"opacity\"===t.propertyName&&(this._mainElement.parentElement&&this._mainElement.remove(),this._element.removeEventListener(\"transitionend\",e))};this._element.addEventListener(\"transitionend\",e)}}const Ne={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},Me=\"embedded-checkout-loading-indicator-rotation\";class De{constructor(e){this.styles=Object.assign(Object.assign({},Ne),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${Me} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(Me))return;const t=document.createElement(\"style\");t.id=Me,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${Me} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}const _e={\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"};function Be(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"BraintreeError\"===e.name}function xe(e){return{recipientName:`${e.firstName} ${e.lastName}`,line1:e.address1,line2:e.address2,city:e.city,state:e.stateOrProvinceCode,postalCode:e.postalCode,countryCode:e.countryCode,phone:e.phone}}var Fe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Le{constructor(e,t,i,n){this.paymentIntegrationService=e,this.braintreeIntegrationService=t,this.braintreeMessages=i,this.loadingIndicator=n,this.braintreeHostWindow=window}initialize(e){return Fe(this,void 0,void 0,function*(){const{braintree:t,methodId:i}=e;if(this.braintree=t,this.paymentMethod&&this.paymentMethod.nonce||(this.paymentMethod=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i)),this.paymentMethod.clientToken&&(null==t?void 0:t.bannerContainerId))return yield this.loadPaypal(),this.loadPaypalCheckoutInstance();if(this.paymentMethod.clientToken)return this.loadPaypal();const n=yield this.paymentIntegrationService.loadPaymentMethod(i);if(this.paymentMethod=n.getPaymentMethodOrThrow(i),null==t?void 0:t.bannerContainerId)return this.loadPaypalCheckoutInstance();if(!this.paymentMethod.clientToken)throw new $(R.MissingPaymentMethod);return this.loadPaypal()})}execute(e,t){var i;return Fe(this,void 0,void 0,function*(){const{payment:n}=e,r=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]),{onError:o}=this.braintree||{};if(!n)throw new C([\"payment\"]);try{const e=yield this.preparePaymentData(n,r.useStoreCredit);yield this.paymentIntegrationService.submitOrder(r,t),yield this.paymentIntegrationService.submitPayment(e)}catch(e){this.isProviderError(e)&&(yield this.loadPaypal(),null===(i=this.paypalButtonRender)||void 0===i||i.close(),yield this.loadPaypalCheckoutInstance(),yield new Promise((e,t)=>{o&&\"function\"==typeof o&&o(new Error(\"INSTRUMENT_DECLINED\")),t()})),this.handleError(e)}})}finalize(){return Promise.reject(new Se)}deinitialize(){var e;return this.braintreeTokenizePayload=void 0,null===(e=this.paypalButtonRender)||void 0===e||e.close(),this.braintreeIntegrationService.teardown()}preparePaymentData(e,t){var i;return Fe(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),r=n.getOutstandingBalance(t),o=n.getStoreConfig();if(!r)throw new $(R.MissingCheckout);if(!o)throw new $(R.MissingCheckoutConfig);if(!this.paymentMethod)throw new I(P.PaymentNotInitialized);const{currency:a,storeProfile:{storeLanguage:s}}=o,{nonce:d,config:{isVaultingEnabled:l}}=this.paymentMethod,{methodId:c,paymentData:u={}}=e,h=(null===(i=this.braintreeTokenizePayload)||void 0===i?void 0:i.nonce)||d;if(h){const t=yield this.paymentIntegrationService.loadPaymentMethod(c);return this.paymentMethod=t.getPaymentMethod(c),Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(h)})}if(Ce(u)||(y=u,Boolean(y.instrumentId)&&!Object.prototype.hasOwnProperty.call(y,\"ccNumber\")&&!Object.prototype.hasOwnProperty.call(y,\"ccCvv\"))){if(!l)throw new w(\"Vaulting is disabled but a vaulted instrument was being used for this transaction\");return Promise.resolve(e)}var y;if(!Pe(u))throw new $(R.MissingPayment);const{shouldSaveInstrument:m,shouldSetAsDefaultInstrument:p}=u;if(m&&!l)throw new w(\"Vaulting is disabled but shouldSaveInstrument is set to true\");const g=n.getShippingAddress(),v=g?xe(g):void 0;return Promise.all([this.braintreeIntegrationService.paypal({amount:r,locale:s,currency:a.code,offerCredit:\"braintreepaypalcredit\"===this.paymentMethod.id,shippingAddressOverride:v,shouldSaveInstrument:m||!1,shippingAddressEditable:!1}),this.braintreeIntegrationService.getSessionId()]).then(([{nonce:t,details:i}={},n])=>Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(t,i&&i.email,n,m,p)}))})}formattedPayload(e,t,i,n,r){return{formattedPayload:{vault_payment_instrument:n||null,set_as_default_stored_instrument:r||null,device_info:i||null,paypal_account:{token:e,email:t||null}}}}loadPaypalCheckoutInstance(){return Fe(this,void 0,void 0,function*(){const{clientToken:e,initializationData:t,id:i}=this.paymentMethod||{};if(!e)throw new $(R.MissingPaymentMethod);try{this.braintreeIntegrationService.initialize(e);const n={currency:this.paymentIntegrationService.getState().getCartOrThrow().currency.code,intent:null==t?void 0:t.intent,isCreditEnabled:null==t?void 0:t.isCreditEnabled},r=\"braintreepaypalcredit\"===i||!(null==t?void 0:t.isCreditEnabled);yield this.braintreeIntegrationService.getPaypalCheckout(n,e=>{var t;r&&i&&(null===(t=this.braintree)||void 0===t?void 0:t.bannerContainerId)&&this.renderPayPalMessages(i,this.braintree.bannerContainerId),this.renderPayPalButton(e)},this.handleError)}catch(e){this.handleError(e)}})}renderPayPalMessages(e,t){this.braintreeMessages.render(e,t,D.PAYMENT)}renderPayPalButton(e){const{onPaymentError:t,submitForm:i,onRenderButton:n,containerId:r,onError:o}=this.braintree||{};if(!r)return;if(!this.paymentMethod)throw new I(P.PaymentNotInitialized);this.loadingIndicatorContainer=r.split(\"#\")[1];const{id:a,config:{testMode:s}}=this.paymentMethod,{paypal:d}=this.braintreeHostWindow,l=null==d?void 0:d.FUNDING.PAYPAL;d&&l?(this.paypalButtonRender=d.Buttons({env:s?\"sandbox\":\"production\",commit:!1,fundingSource:l,onClick:()=>{this.toggleLoadingIndicator(!0)},createOrder:()=>this.setupPayment(e,a,t),onApprove:t=>Fe(this,void 0,void 0,function*(){this.braintreeTokenizePayload=yield this.tokenizePaymentOrThrow(t,e),i&&\"function\"==typeof i&&i()}),onCancel:()=>{this.toggleLoadingIndicator(!1)},onError:e=>{this.toggleLoadingIndicator(!1),null==o||o(e)}}),n&&\"function\"==typeof n&&n(),this.paypalButtonRender.isEligible()&&this.paypalButtonRender.render(`${r}`)):this.removeElement(r.split(\"#\")[1])}setupPayment(e,t,i){return Fe(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState();try{const i=n.getCustomer(),r=n.getPaymentMethodOrThrow(t),o=n.getCheckoutOrThrow().outstandingBalance,a=n.getStoreConfigOrThrow().currency.code,s=n.getShippingAddress()||(null==i?void 0:i.addresses[0]),d=s?xe(s):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:d,amount:o,currency:a,offerCredit:!1,intent:r.initializationData.intent})}catch(e){throw i&&(Be(e)||e instanceof f)&&i(e),e}})}tokenizePaymentOrThrow(e,t,i){return Fe(this,void 0,void 0,function*(){try{return yield t.tokenizePayment(e)}catch(e){throw i&&(Be(e)||e instanceof f)&&i(e),e}})}loadPaypal(){return Fe(this,void 0,void 0,function*(){const{clientToken:e,initializationData:t}=this.paymentMethod||{};if(!e||!t)throw new $(R.MissingPaymentMethod);try{this.braintreeIntegrationService.initialize(e),yield this.braintreeIntegrationService.getPaypal()}catch(e){this.handleError(e)}return Promise.resolve()})}handleError(e){if(!Be(e))throw e;if(\"PAYPAL_POPUP_CLOSED\"===e.code)throw new O(e.message);throw new Ie(e.message)}isProviderError(e){var t,i,n;return!!function(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e}(e)&&\"2046\"===(null===(n=null===(i=((null===(t=null==e?void 0:e.errors)||void 0===t?void 0:t.filter(e=>e.provider_error))||[])[0])||void 0===i?void 0:i.provider_error)||void 0===n?void 0:n.code)}removeElement(e){const t=e&&document.getElementById(e);t&&t.remove()}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const Ve=q(e=>{const i=window,n=new ze,r=new v(e),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,r),i,n),a=new Ae(e);return new Le(e,o,a,new De({containerStyles:_e}))},[{id:\"braintreepaypal\"},{id:\"braintreepaypalcredit\"}]);var je;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(je||(je={}));const Ue=je,Re={\"X-Checkout-SDK-Version\":\"1.819.0\"};class He{constructor(e){this.requestSender=e}getOrderStatus(e=\"braintreelocalmethods\",t){return i=this,n=void 0,o=function*(){const i=`/api/storefront/initialization/${e}`,n=Object.assign({\"X-API-INTERNAL\":\"This API endpoint is for internal use only and may change in the future\",\"Content-Type\":Ue.Json},Re);return(yield this.requestSender.get(i,Object.assign({headers:n},t))).body},new((r=void 0)||(r=Promise))(function(e,t){function a(e){try{d(o.next(e))}catch(e){t(e)}}function s(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r(function(e){e(i)})).then(a,s)}d((o=o.apply(i,n||[])).next())});// removed by dead control flow\n var i, n, r, o; }}const We={body:{},headers:{},status:0};class qe extends f{constructor(e,{message:t,errors:i}={}){const{body:n,headers:r,status:o}=e||We;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=r,this.status=o,this.errors=i||[]}}class $e extends qe{constructor(e){super(e,{message:\"There is a problem processing your payment. Please try again later.\"}),this.name=\"PaymentMethodInvalidError\",this.type=\"payment_method_invalid\"}}class Ge extends qe{constructor(e){super(e,{message:\"The request has timed out or aborted.\"}),this.name=\"TimeoutError\",this.type=\"timeout\"}}var Ye=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Je{constructor(e,t,i,n,r=3e3,o=3e5){this.paymentIntegrationService=e,this.braintreeSdk=t,this.braintreeRequestSender=i,this.loadingIndicator=n,this.pollingInterval=r,this.maxPollingIntervalTime=o,this.isLPMsUpdateExperimentEnabled=!1,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this.isPollingEnabled=!1}initialize(e){return Ye(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,braintreelocalmethods:n}=e;if(this.gatewayId=t,!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.');this.braintreelocalmethods=n,this.loadingIndicatorContainer=n.container.split(\"#\")[1],yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(t),{clientToken:a,config:s,initializationData:d}=o,l=r.getStoreConfigOrThrow().checkoutSettings.features;if(this.isPollingEnabled=y(l,\"PAYPAL-5258.braintree_local_methods_polling\"),this.isLPMsUpdateExperimentEnabled=y(l,\"PAYPAL-4853.add_new_payment_flow_for_braintree_lpms\"),!a||!d||!s.merchantId)throw new $(R.MissingPaymentMethod);try{this.braintreeSdk.initialize(a),this.isNonInstantPaymentMethod(i)||(this.braintreeLocalPayment=yield this.braintreeSdk.getBraintreeLocalPayment(s.merchantId))}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new Se)}deinitialize(){return Ye(this,void 0,void 0,function*(){return this.toggleLoadingIndicator(!1),Promise.resolve()})}execute(e,t){return Ye(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);const{methodId:r}=i;this.toggleLoadingIndicator(!0),this.isNonInstantPaymentMethod(r)?yield this.executeWithNotInstantLPM(r):yield this.executeWithInstantLPM(r,n,t)})}executeWithNotInstantLPM(e){return Ye(this,void 0,void 0,function*(){try{const t=yield this.getLPMsBasicPaymentData();yield this.paymentIntegrationService.submitOrder(),yield this.paymentIntegrationService.submitPayment({methodId:e,paymentData:Object.assign(Object.assign({},t),{formattedPayload:{method:e}})})}catch(e){if(this.isBraintreeRedirectError(e)){const t=e.body.additional_action_required.data.redirect_url;return new Promise((e,i)=>{window.location.replace(t),this.toggleLoadingIndicator(!1),i()})}return this.handleError(e),Promise.reject(e)}})}executeWithInstantLPM(e,t,i){return Ye(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment)throw new $e;yield new Promise((n,r)=>{var o;null===(o=this.braintreeLocalPayment)||void 0===o||o.startPayment(this.getInstantLPMConfig(e,t,i),this.getInstantLPMCallback(n,r,e,t,i))})})}getLPMsBasicPaymentData(){return Ye(this,void 0,void 0,function*(){const{deviceData:e}=yield this.braintreeSdk.getDataCollectorOrThrow();return{deviceSessionId:e}})}getInstantLPMConfig(e,t,i){const n=this.paymentIntegrationService.getState(),r=n.getCartOrThrow(),o=n.getBillingAddressOrThrow(),{firstName:a,lastName:s,countryCode:d}=o,{currency:l,email:c,lineItems:u}=r,h=u.physicalItems.length>0,y=n.getCheckoutOrThrow().outstandingBalance,m=n.getStoreConfigOrThrow().links.checkoutLink;return{paymentType:e,amount:y,fallback:{url:m,buttonText:\"Complete Payment\"},currencyCode:l.code,shippingAddressRequired:h,email:c,givenName:a,surname:s,address:{countryCode:d},onPaymentStart:(n,r)=>Ye(this,void 0,void 0,function*(){if(!this.isLPMsUpdateExperimentEnabled)return this.orderId=n.paymentId,void r();const o=yield this.getLPMsBasicPaymentData(),a=Object.assign(Object.assign({},o),{formattedPayload:{method:e,[`${e}_account`]:{order_id:n.paymentId}}});try{yield this.paymentIntegrationService.submitOrder(t,i),yield this.paymentIntegrationService.submitPayment({methodId:e,paymentData:a})}catch(t){if(this.isBraintreeOrderSavedResponse(t)&&t.body.additional_action_required.data.order_id_saved_successfully)return r(),this.isPollingEnabled?new Promise((t,i)=>{this.initializePollingMechanism(e,t,i,this.gatewayId)}):void 0;throw t}})}}getInstantLPMCallback(e,t,i,n,r){const o=this.paymentIntegrationService.getState().getCartOrThrow();return(a,s)=>Ye(this,void 0,void 0,function*(){if(a)return\"LOCAL_PAYMENT_WINDOW_CLOSED\"===a.code?(this.toggleLoadingIndicator(!1),this.resetPollingMechanism(),t()):(this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t(new $e));const d=yield this.getLPMsBasicPaymentData(),l=Object.assign(Object.assign({},d),{formattedPayload:{method:i,[`${i}_account`]:Object.assign({email:o.email,token:s.nonce},this.isLPMsUpdateExperimentEnabled?{}:{order_id:this.orderId})}});try{return this.isLPMsUpdateExperimentEnabled||(yield this.paymentIntegrationService.submitOrder(n,r)),yield this.paymentIntegrationService.submitPayment({methodId:i,paymentData:l}),e(void 0)}catch(e){return this.handleError(e),t(e)}})}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}handleError(e){const{onError:t}=this.braintreelocalmethods||{};this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}isNonInstantPaymentMethod(e){return e.toUpperCase()in ne}isBraintreeRedirectError(e){var t;if(\"object\"!=typeof e||null===e)return!1;const{body:i}=e;return!!i&&!!(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.redirect_url)}isBraintreeOrderSavedResponse(e){var t;if(\"object\"!=typeof e||null===e)return!1;const{body:i}=e;return!!i&&(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.hasOwnProperty(\"order_id_saved_successfully\"))}initializePollingMechanism(e,t,i,n){return Ye(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const r=yield this.braintreeRequestSender.getOrderStatus(n,{params:{useMetadata:!1}}),o=r.status===ie.Pending,a=r.status===ie.Completed,s=r.status===ie.Failed;if(a)return this.deinitializePollingMechanism(),t();if(s)return i();if(!a&&o&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,braintreelocalmethods:this.braintreelocalmethods}),this.handleError(new Ge)}catch(e){i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}reinitializeStrategy(e){return Ye(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}}const Ke=q(e=>{const i=window,n=new v(e),r=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n)),o=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_4__.createRequestSender)(),a=new He(o);return new Je(e,r,a,new De({styles:{backgroundColor:\"black\"}}))},[{gateway:\"braintreelocalmethods\"}]);function Xe(e){return!!e&&(\"authenticationState\"in e||\"addresses\"in e||\"instruments\"in e)}var Qe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ze{constructor(e,t,i){this.paymentIntegrationService=e,this.braintreeFastlaneUtils=t,this.braintreeSdk=i}initialize(e){var t;return Qe(this,void 0,void 0,function*(){const{methodId:i,braintreefastlane:n}=e;if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.');if(!n.onInit||\"function\"!=typeof n.onInit)throw new w('Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.');if(!n.onChange||\"function\"!=typeof n.onChange)throw new w('Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.');yield this.paymentIntegrationService.loadPaymentMethod(i);const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(i),{initializationData:a,clientToken:s}=o||{},{isFastlaneStylingEnabled:d}=a||{},l=y(r.getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.braintree_fastlane_three_ds\");this.is3DSEnabled=o.config.is3dsEnabled,s&&l&&this.braintreeSdk.initialize(s);const c=ee(d?null===(t=o.initializationData)||void 0===t?void 0:t.fastlaneStyles:void 0,n.styles);yield this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(i,c),this.shouldRunAuthenticationFlow()&&(yield this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow()),yield this.initializeCardComponent(),this.onError=n.onError,n.onInit(e=>this.renderBraintreeCardComponent(e)),n.onChange(()=>this.handleBraintreeStoredInstrumentChange(i))})}execute(e,t){return Qe(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);yield this.paymentIntegrationService.submitOrder(n,t);const r=yield this.preparePaymentPayload(i.methodId);yield this.paymentIntegrationService.submitPayment(r),this.braintreeFastlaneUtils.removeSessionIdFromCookies()})}finalize(){return Promise.reject(new Se)}deinitialize(){return Qe(this,void 0,void 0,function*(){return this.braintreeCardComponent=void 0,Promise.resolve()})}initializeCardComponent(){return Qe(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState(),{phone:t,firstName:i,lastName:n}=e.getBillingAddressOrThrow(),r=`${i} ${n}`,o={styles:{},fields:Object.assign({cardholderName:{prefill:r,enabled:!0}},t&&{phoneNumber:{prefill:t}})},a=this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();this.braintreeCardComponent=yield a(o)})}renderBraintreeCardComponent(e){const t=this.getBraintreeCardComponentOrThrow();if(!e)throw new w('Unable to initialize payment because \"container\" argument is not provided.');t.render(e)}preparePaymentPayload(e){var t,i;return Qe(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),r=n.getBillingAddressOrThrow(),o=`${r.firstName} ${r.lastName}`,a=this.getPayPalInstruments()[0],s=yield this.braintreeFastlaneUtils.getDeviceSessionId(),d=y(n.getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.braintree_fastlane_three_ds\");if(a){const t=this.is3DSEnabled&&d?yield this.get3DS(a.bigpayToken,(null==a?void 0:a.iin)||\"\"):void 0;return{methodId:e,paymentData:{deviceSessionId:s,formattedPayload:{paypal_fastlane_token:{token:t||a.bigpayToken}}}}}const{getPaymentToken:l}=this.getBraintreeCardComponentOrThrow(),c=yield l({name:{fullName:o},billingAddress:this.mapToPayPalAddress(r)}),u=(null===(i=null===(t=c.paymentSource.card)||void 0===t?void 0:t.binDetails)||void 0===i?void 0:i.bin)||\"\",h=this.is3DSEnabled&&d?yield this.get3DS(c.id,u):void 0;return{methodId:e,paymentData:{deviceSessionId:s,nonce:h||c.id}}})}get3DS(e,t){return Qe(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=yield this.braintreeSdk.getBraintreeThreeDS(),r=i.getOrderOrThrow();return new Promise((i,o)=>{n.verifyCard({amount:null==r?void 0:r.orderAmount,nonce:e,bin:t,onLookupComplete:(e,t)=>{n.on(\"customer-canceled\",()=>{\"function\"==typeof this.onError&&this.onError(new O),o(new O)}),t()}},(e,t)=>(e&&\"THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT\"===e.code&&(\"function\"==typeof this.onError&&this.onError(new O),o(new O)),i(t.nonce)))})})}mapToPayPalAddress(e){return{streetAddress:(null==e?void 0:e.address1)||\"\",locality:(null==e?void 0:e.city)||\"\",region:(null==e?void 0:e.stateOrProvinceCode)||(null==e?void 0:e.stateOrProvince)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCodeAlpha2:(null==e?void 0:e.countryCode)||\"\"}}shouldRunAuthenticationFlow(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getCustomerOrThrow(),n=e.getPaymentProviderCustomer(),r=Xe(n)?n:{},o=this.braintreeFastlaneUtils.getSessionIdFromCookies();return!(!i.isGuest||(null==r?void 0:r.authenticationState)===re.CANCELED||(null==r?void 0:r.authenticationState)||o!==t.id)}getBraintreeCardComponentOrThrow(){if(!this.braintreeCardComponent)throw new j;return this.braintreeCardComponent}getPayPalInstruments(){const e=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow();return(Xe(e)?e:{}).instruments||[]}handleBraintreeStoredInstrumentChange(e){return Qe(this,void 0,void 0,function*(){const t=this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow(),{selectionChanged:i,selectedCard:n}=yield t.profile.showCardSelector();if(i){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomer(),i=Xe(t)?t:{},r=this.braintreeFastlaneUtils.mapPayPalToBcInstrument(e,[n]);if(r&&r.length>0)return yield this.paymentIntegrationService.updatePaymentProviderCustomer(Object.assign(Object.assign({},i),{instruments:[...r]})),r[0]}})}}const et=q(e=>{const i=window,n=new v(e),r=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),i),o=new ye(e,r),a=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),s=new ge(a);return new Ze(e,o,s)},[{id:\"braintreeacceleratedcheckout\"}]);var tt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class it{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i}initialize(e){return tt(this,void 0,void 0,function*(){const{braintreevisacheckout:t,methodId:i}=e;if(!t)throw new w('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState();this.paymentMethod=n.getPaymentMethodOrThrow(i);const r=n.getCheckoutOrThrow(),o=n.getStoreConfigOrThrow(),{clientToken:s,config:d}=this.paymentMethod||{};if(!s)throw new $(R.MissingPaymentMethod);const{onError:l=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,onPaymentSelect:c=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t;this.braintreeSdk.initialize(s);const u=yield this.braintreeSdk.getBraintreeVisaCheckout(),h=yield this.braintreeSdk.getVisaCheckoutSdk(null==d?void 0:d.testMode),y=u.createInitOptions({settings:{locale:o.storeProfile.storeLanguage,shipping:{collectShipping:!1}},paymentRequest:{currencyCode:o.currency.code,subtotal:String(r.subtotal)}});yield h.init(y),h.on(\"payment.success\",e=>this.tokenizePayment(u,e).then(()=>Promise.all([this.paymentIntegrationService.loadCheckout(),this.paymentIntegrationService.loadPaymentMethod(i)])).then(()=>c()).catch(e=>l(e))),h.on(\"payment.error\",(e,t)=>l(t))})}execute(e,t){var i,n;return tt(this,void 0,void 0,function*(){const{payment:r}=e,o=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!r)throw new w('Unable to submit payment because \"payload.payment\" argument is not provided.');if(!(null===(n=null===(i=this.paymentMethod)||void 0===i?void 0:i.initializationData)||void 0===n?void 0:n.nonce))throw new $(R.MissingPaymentMethod);const{nonce:a}=this.paymentMethod.initializationData;try{yield this.paymentIntegrationService.submitOrder(o,t),yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},r),{paymentData:{nonce:a}}))}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new Se)}deinitialize(){return tt(this,void 0,void 0,function*(){yield this.braintreeSdk.deinitialize()})}tokenizePayment(e,t){return tt(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.mapToVisaCheckoutAddress(n),billingAddress:a=this.mapToVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}mapToVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}handleError(e){if(e instanceof Error&&\"BraintreeError\"===e.name)throw new Ie(e.message);throw e}}const nt=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new it(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);var rt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ot{constructor(e,t){this.paymentIntegrationService=e,this.braintreeIntegrationService=t}initialize(e){return rt(this,void 0,void 0,function*(){const{methodId:t}=e;yield this.paymentIntegrationService.loadPaymentMethod(t);const i=this.paymentIntegrationService.getState();this.venmoOptions=e.braintreevenmo;const n=i.getPaymentMethodOrThrow(t);yield this.initializeBraintreeVenmo(n)})}execute(e){return rt(this,void 0,void 0,function*(){const{payment:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!t)throw new C([\"payment\"]);try{const e=yield this.preparePaymentData(t);yield this.paymentIntegrationService.submitOrder(i),yield this.paymentIntegrationService.submitPayment(e)}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new Se)}deinitialize(){return rt(this,void 0,void 0,function*(){return yield this.braintreeIntegrationService.teardown(),Promise.resolve()})}handleError(e){if(!F(e))throw e;if(\"PAYPAL_POPUP_CLOSED\"===e.code)throw new O(e.message);throw new Ie(e.message)}initializeBraintreeVenmo(e){var t;return rt(this,void 0,void 0,function*(){const{clientToken:i}=e;if(!i)throw new $(R.MissingPaymentMethod);const n=y(this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features,\"PAYPAL-5406.braintree_venmo_web_fallback_support\");try{this.braintreeIntegrationService.initialize(i),this.braintreeVenmoCheckout=yield this.braintreeIntegrationService.getVenmoCheckout(Object.assign(Object.assign({},void 0!==(null===(t=this.venmoOptions)||void 0===t?void 0:t.allowDesktop)?{allowDesktop:this.venmoOptions.allowDesktop}:{}),n?{mobileWebFallBack:n}:{}))}catch(e){this.handleError(e)}})}preparePaymentData(e){return rt(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),{nonce:i}=t.getPaymentMethodOrThrow(e.methodId);if(i)return Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(i)});const n=yield this.braintreeVenmoTokenize(),r=yield this.braintreeIntegrationService.getSessionId();return Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(n.nonce,n.details.email,r)})})}formattedPayload(e,t,i){return{formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:i||null,paypal_account:{token:e,email:t||null}}}}braintreeVenmoTokenize(){return new Promise((e,t)=>{var i;null===(i=this.braintreeVenmoCheckout)||void 0===i||i.tokenize((i,n)=>{if(i)return t(i);e(n)})})}}const at=q(e=>{const i=window,n=(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),r=new v(e),o=new W(n,i,r),a=new V(o,i);return new ot(e,a)},[{id:\"braintreevenmo\"}]);var st=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class dt{constructor(e,t,i){this.paymentIntegrationService=e,this.braintreeIntegrationService=t,this.braintreeHostedForm=i}initialize(e){return st(this,void 0,void 0,function*(){const{methodId:t,gatewayId:i,braintree:n}=e;yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState();this.paymentMethod=r.getPaymentMethodOrThrow(t);const{clientToken:o}=this.paymentMethod;if(!o)throw new $(R.MissingPaymentMethod);this.threeDSecure=null==n?void 0:n.threeDSecure;try{this.braintreeIntegrationService.initialize(o,this.threeDSecure),this.isHostedPaymentFormEnabled(t,i)&&(null==n?void 0:n.form)&&(yield this.braintreeHostedForm.initialize(n.form,n.unsupportedCardBrands,o),this.isHostedFormInitialized=this.braintreeHostedForm.isInitialized()),this.is3dsEnabled=this.paymentMethod.config.is3dsEnabled,this.deviceSessionId=yield this.braintreeIntegrationService.getSessionId(),this.shouldInitializeBraintreeFastlane()&&(yield this.initializeBraintreeFastlaneOrThrow(t))}catch(e){return this.handleError(e)}})}execute(e){return st(this,void 0,void 0,function*(){const{payment:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!t)throw new C([\"payment\"]);this.isHostedFormInitialized&&this.braintreeHostedForm.validate(),yield this.paymentIntegrationService.submitOrder(i);const n=this.paymentIntegrationService.getState(),r=n.getBillingAddressOrThrow(),o=n.getOrderOrThrow().orderAmount;try{const e=this.isHostedFormInitialized?yield this.prepareHostedPaymentData(t,r,o):yield this.preparePaymentData(t,r,o);yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},t),{paymentData:e}))}catch(e){return this.processAdditionalAction(e,t,o)}})}finalize(){return Promise.reject(new Se)}deinitialize(){return st(this,void 0,void 0,function*(){return this.isHostedFormInitialized=!1,yield Promise.all([this.braintreeIntegrationService.teardown(),this.braintreeHostedForm.deinitialize()]),Promise.resolve()})}handleError(e){if(Be(e))throw new Ie(e.message);throw e}preparePaymentData(e,t,i){return st(this,void 0,void 0,function*(){const{paymentData:n}=e,r={deviceSessionId:this.deviceSessionId};if(this.isSubmittingWithStoredCard(e))return Object.assign(Object.assign({},r),n);const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=Pe(n)?n:{},{nonce:s}=this.shouldPerform3DSVerification(e)?yield this.braintreeIntegrationService.verifyCard(e,t,i):yield this.braintreeIntegrationService.tokenizeCard(e,t);return Object.assign(Object.assign({},r),{nonce:s,shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a})})}prepareHostedPaymentData(e,t,i){return st(this,void 0,void 0,function*(){const{paymentData:n}=e,r={deviceSessionId:this.deviceSessionId};if(this.isSubmittingWithStoredCard(e)){const{nonce:e}=yield this.braintreeHostedForm.tokenizeForStoredCardVerification();return Object.assign(Object.assign(Object.assign({},r),n),{nonce:e})}const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=Pe(n)?n:{},{nonce:s}=this.shouldPerform3DSVerification(e)?yield this.verifyCardWithHostedForm(t,i):yield this.braintreeHostedForm.tokenize(t);return Object.assign(Object.assign({},r),{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,nonce:s})})}verifyCardWithHostedForm(e,t){return st(this,void 0,void 0,function*(){const i=yield this.braintreeHostedForm.tokenize(e);return this.braintreeIntegrationService.challenge3DSVerification(i,t)})}processAdditionalAction(e,t,i){return st(this,void 0,void 0,function*(){if(!(e=>\"object\"==typeof e&&null!==e&&\"body\"in e)(e)||!(0,lodash__WEBPACK_IMPORTED_MODULE_2__.some)(e.body.errors,{code:\"three_d_secure_required\"}))return this.handleError(e);try{const{payer_auth_request:n}=function(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"body\"in e&&\"status\"in e.body&&\"three_ds_result\"in e.body&&\"payer_auth_request\"in e.body.three_ds_result&&\"errors\"in e.body}(e)&&e.body.three_ds_result||{},{paymentData:r}=t,o=this.paymentIntegrationService.getState();if(!r||!Ce(r))throw new C([\"instrumentId\"]);const a=o.getCardInstrumentOrThrow(r.instrumentId),{nonce:s}=yield this.braintreeIntegrationService.challenge3DSVerification({nonce:n||\"\",bin:a.iin},i);yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},t),{paymentData:{deviceSessionId:this.deviceSessionId,nonce:s}}))}catch(e){return this.handleError(e)}})}isHostedPaymentFormEnabled(e,t){return!!e&&!0===this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e,t).config.isHostedFormEnabled}isSubmittingWithStoredCard(e){return!(!e.paymentData||!Ce(e.paymentData))}shouldPerform3DSVerification(e){return!(!this.is3dsEnabled||this.isSubmittingWithStoredCard(e))}shouldInitializeBraintreeFastlane(){var e;const t=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow(),i=Xe(t)?t:{};return(null===(e=this.paymentMethod)||void 0===e?void 0:e.initializationData.isAcceleratedCheckoutEnabled)&&!(null==i?void 0:i.authenticationState)}initializeBraintreeFastlaneOrThrow(e){return st(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getPaymentMethodOrThrow(e),{clientToken:r,config:o}=n;if(!r)throw new $(R.MissingPaymentMethod);this.braintreeIntegrationService.initialize(r,this.threeDSecure),yield this.braintreeIntegrationService.getBraintreeFastlane(i.id,o.testMode)})}}function lt(e){return\"cardNumber\"in e}function ct(e){if(!F(e))return!1;const{details:t}=e;return void 0===t||\"object\"==typeof t&&null!==t&&void 0===t.invalidFieldKeys||(i=t,Array.isArray(i)&&i.every(e=>\"string\"==typeof e));// removed by dead control flow\n var i; }var ut,ht=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};!function(e){e[e.CreditCard=0]=\"CreditCard\",e[e.StoredCardVerification=1]=\"StoredCardVerification\"}(ut||(ut={}));class yt{constructor(e,t){this.braintreeScriptLoader=e,this.braintreeSDKVersionManager=t,this.isInitializedHostedForm=!1,this.handleBlur=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onBlur)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy),errors:this.mapErrors(e.fields)})},this.handleFocus=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onFocus)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy)})},this.handleCardTypeChange=e=>{var t,i;const n=1===e.cards.length?e.cards[0].type.replace(/^master-card$/,\"mastercard\"):void 0;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onCardTypeChange)||void 0===i||i.call(t,{cardType:n})},this.handleInputSubmitRequest=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onEnter)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy)})},this.handleValidityChange=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onValidate)||void 0===i||i.call(t,{isValid:this.isValidForm(e),errors:this.mapValidationErrors(e.fields)})}}initialize(e,t,i){var r,o,a,s,d;return ht(this,void 0,void 0,function*(){this.clientToken=i,this.formOptions=e,this.type=lt(e.fields)?ut.CreditCard:ut.StoredCardVerification;const l=this.mapFieldOptions(e.fields,t);(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(l)?this.isInitializedHostedForm=!1:(this.cardFields=yield this.createHostedFields({fields:l,styles:e.styles&&this.mapStyleOptions(e.styles)}),null===(r=this.cardFields)||void 0===r||r.on(\"blur\",this.handleBlur),null===(o=this.cardFields)||void 0===o||o.on(\"focus\",this.handleFocus),null===(a=this.cardFields)||void 0===a||a.on(\"cardTypeChange\",this.handleCardTypeChange),null===(s=this.cardFields)||void 0===s||s.on(\"validityChange\",this.handleValidityChange),null===(d=this.cardFields)||void 0===d||d.on(\"inputSubmitRequest\",this.handleInputSubmitRequest),this.isInitializedHostedForm=!0)})}isInitialized(){return!!this.isInitializedHostedForm}deinitialize(){var e;return ht(this,void 0,void 0,function*(){this.isInitializedHostedForm&&(this.isInitializedHostedForm=!1,yield null===(e=this.cardFields)||void 0===e?void 0:e.teardown())})}validate(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);const e=this.cardFields.getState();if(!this.isValidForm(e)){this.handleValidityChange(e);const t=this.mapValidationErrors(e.fields);throw new S(t)}}tokenize(e){var t,i,n,r,a;return ht(this,void 0,void 0,function*(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);try{const r=yield this.cardFields.tokenize((0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({billingAddress:e&&this.mapBillingAddress(e)},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil));return null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onValidate)||void 0===i||i.call(t,{isValid:!0,errors:{}}),{nonce:r.nonce,bin:null===(n=r.details)||void 0===n?void 0:n.bin}}catch(e){if(ct(e)){const t=this.mapTokenizeError(e);if(t)throw null===(a=null===(r=this.formOptions)||void 0===r?void 0:r.onValidate)||void 0===a||a.call(r,{isValid:!1,errors:t}),new S(t)}throw e}})}tokenizeForStoredCardVerification(){var e,t,i,n,r;return ht(this,void 0,void 0,function*(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);try{const n=yield this.cardFields.tokenize();return null===(t=null===(e=this.formOptions)||void 0===e?void 0:e.onValidate)||void 0===t||t.call(e,{isValid:!0,errors:{}}),{nonce:n.nonce,bin:null===(i=n.details)||void 0===i?void 0:i.bin}}catch(e){if(ct(e)){const t=this.mapTokenizeError(e,!0);if(t)throw null===(r=null===(n=this.formOptions)||void 0===n?void 0:n.onValidate)||void 0===r||r.call(n,{isValid:!1,errors:t}),new S(t)}throw e}})}createHostedFields(e){return ht(this,void 0,void 0,function*(){const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadHostedFields(),n=this.braintreeSDKVersionManager.getSDKVersion()===m?Object.assign(Object.assign({},e),{preventCursorJumps:!0}):e;return i.create(Object.assign(Object.assign({},n),{client:t}))})}getClient(){return ht(this,void 0,void 0,function*(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);if(!this.client){const e=yield this.braintreeScriptLoader.loadClient();this.client=e.create({authorization:this.clientToken})}return this.client})}mapBillingAddress(e){return{countryName:e.country,postalCode:e.postalCode,streetAddress:e.address2?`${e.address1} ${e.address2}`:e.address1}}mapFieldOptions(e,t){if(lt(e)){const i={};return null==t||t.forEach(e=>{(e=>Object.values(se).includes(e))(e)&&(i[e]=!1)}),(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({number:Object.assign({container:`#${e.cardNumber.containerId}`,placeholder:e.cardNumber.placeholder,internalLabel:e.cardNumber.accessibilityLabel},Object.keys(i).length>0?{supportedCardBrands:i}:{}),expirationDate:{container:`#${e.cardExpiry.containerId}`,placeholder:e.cardExpiry.placeholder,internalLabel:e.cardExpiry.accessibilityLabel},cvv:e.cardCode&&{container:`#${e.cardCode.containerId}`,placeholder:e.cardCode.placeholder,internalLabel:e.cardCode.accessibilityLabel},cardholderName:{container:`#${e.cardName.containerId}`,placeholder:e.cardName.placeholder,internalLabel:e.cardName.accessibilityLabel}},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({number:e.cardNumberVerification&&{container:`#${e.cardNumberVerification.containerId}`,placeholder:e.cardNumberVerification.placeholder},cvv:e.cardCodeVerification&&{container:`#${e.cardCodeVerification.containerId}`,placeholder:e.cardCodeVerification.placeholder}},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}mapStyleOptions(e){const t=(e={})=>(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({color:e.color,\"font-family\":e.fontFamily,\"font-size\":e.fontSize,\"font-weight\":e.fontWeight},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil);return{input:t(e.default),\".invalid\":t(e.error),\":focus\":t(e.focus)}}mapFieldType(e){switch(e){case\"number\":return this.type===ut.StoredCardVerification?x.CardNumberVerification:x.CardNumber;case\"expirationDate\":return x.CardExpiry;case\"cvv\":return this.type===ut.StoredCardVerification?x.CardCodeVerification:x.CardCode;case\"cardholderName\":return x.CardName;default:throw new Error(\"Unexpected field type\")}}mapErrors(e){const t={};if(e)for(const[i,n]of Object.entries(e))if(n&&this.isValidParam(i)){const{isValid:e,isEmpty:r,isPotentiallyValid:o}=n;t[i]={isValid:e,isEmpty:r,isPotentiallyValid:o}}return t}mapValidationErrors(e){return Object.keys(e).reduce((t,i)=>{var n;return Object.assign(Object.assign({},t),{[this.mapFieldType(i)]:(null===(n=e[i])||void 0===n?void 0:n.isValid)?void 0:[this.createInvalidError(this.mapFieldType(i))]})},{})}mapTokenizeError(e,t=!1){var i,n;if(\"HOSTED_FIELDS_FIELDS_EMPTY\"===e.code){const e=[this.createRequiredError(this.mapFieldType(\"cvv\"))];return t?{[this.mapFieldType(\"cvv\")]:e}:{[this.mapFieldType(\"cvv\")]:e,[this.mapFieldType(\"expirationDate\")]:[this.createRequiredError(this.mapFieldType(\"expirationDate\"))],[this.mapFieldType(\"number\")]:[this.createRequiredError(this.mapFieldType(\"number\"))],[this.mapFieldType(\"cardholderName\")]:[this.createRequiredError(this.mapFieldType(\"cardholderName\"))]}}return null===(n=null===(i=e.details)||void 0===i?void 0:i.invalidFieldKeys)||void 0===n?void 0:n.reduce((e,t)=>{const i=this.mapFieldType(t);return Object.assign(Object.assign({},e),{[i]:[this.createInvalidError(i)]})},{})}createRequiredError(e){var t;return{fieldType:e,message:null!==(t={[x.CardCode]:\"CVV is required\",[x.CardCodeVerification]:\"CVV is required\",[x.CardNumber]:\"Credit card number is required\",[x.CardNumberVerification]:\"Credit card number is required\",[x.CardExpiry]:\"Expiration date is required\",[x.CardName]:\"Full name is required\"}[e])&&void 0!==t?t:\"Field is required\",type:\"required\"}}createInvalidError(e){var t,i,n,r;const o={[x.CardCode]:{message:\"Invalid card code\",type:\"invalid_card_code\"},[x.CardCodeVerification]:{message:\"Invalid card code\",type:\"invalid_card_code\"},[x.CardNumber]:{message:\"Invalid card number\",type:\"invalid_card_number\"},[x.CardNumberVerification]:{message:\"Invalid card number\",type:\"invalid_card_number\"},[x.CardExpiry]:{message:\"Invalid card expiry\",type:\"invalid_card_expiry\"},[x.CardName]:{message:\"Invalid card name\",type:\"invalid_card_name\"}};return{fieldType:e,message:null!==(i=null===(t=o[e])||void 0===t?void 0:t.message)&&void 0!==i?i:\"Invalid field\",type:null!==(r=null===(n=o[e])||void 0===n?void 0:n.type)&&void 0!==r?r:\"invalid\"}}isValidForm(e){return Object.keys(e.fields).every(t=>{var i;return null===(i=e.fields[t])||void 0===i?void 0:i.isValid})}isValidParam(e){return[\"number\",\"cvv\",\"expirationDate\",\"postalCode\",\"cardholderName\",\"cardType\"].includes(e)}}const mt=q(e=>{const i=window,n=new v(e),r=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),o=new V(r,i),a=new yt(r,n);return new dt(e,o,a)},[{id:\"braintree\"}]);class pt extends f{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}function gt(e){const{color:t,fundingicons:i,height:n=40,layout:r,shape:a,size:s,tagline:l}=e||{},c={color:t,fundingicons:i,height:vt(n),layout:r,shape:a||\"rect\",size:s,tagline:l};return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(c,lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}function vt(e){const t=Number(e);return!t||Number.isNaN(t)?40:t>55?55:t<25?25:t}var ft=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class bt{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return ft(this,void 0,void 0,function*(){const{braintreepaypal:t,containerId:i,methodId:n}=e;if(!n)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.');let r,o=this.paymentIntegrationService.getState();if(t.buyNowInitializeOptions){if(!t.currencyCode)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.');r=t.currencyCode}else yield this.paymentIntegrationService.loadDefaultCheckout(),o=this.paymentIntegrationService.getState(),r=o.getCartOrThrow().currency.code;const a=o.getPaymentMethodOrThrow(n),{clientToken:s,config:d,initializationData:l}=a;if(!s||!l)throw new $(R.MissingPaymentMethod);const c={currency:r,intent:l.intent,isCreditEnabled:l.isCreditEnabled};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(c,e=>{this.renderPayPalButton(e,t,i,n,!!d.testMode)},e=>this.handleError(e,i,t.onError))})}deinitialize(){return ft(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}renderPayPalButton(e,t,i,n,r){const{style:o,shouldProcessPayment:a,onAuthorizeError:s,onEligibilityFailure:d}=t,{paypal:l}=this.braintreeHostWindow;if(l){const c=l.Buttons({env:r?\"sandbox\":\"production\",fundingSource:l.FUNDING.PAYPAL,style:gt(o),createOrder:()=>this.setupPayment(e,t,n),onApprove:t=>this.tokenizePayment(t,e,n,a,s)});c.isEligible()?c.render(`#${i}`):d&&\"function\"==typeof d&&d()}else this.braintreeIntegrationService.removeElement(i)}setupPayment(e,t,i){var n;return ft(this,void 0,void 0,function*(){const{onPaymentError:r,shippingAddress:o,buyNowInitializeOptions:a}=t;try{const r=\"function\"==typeof(null==a?void 0:a.getBuyNowCartRequestBody)?yield this.createBuyNowCart(a.getBuyNowCartRequestBody()):void 0;this.buyNowCartId=null==r?void 0:r.id;const s=this.paymentIntegrationService.getState(),d=s.getCustomer(),l=s.getPaymentMethodOrThrow(i),c=r?r.cartAmount:s.getCartOrThrow().cartAmount,u=r?t.currencyCode:s.getCartOrThrow().currency.code,h=o||(null==d?void 0:d.addresses[0]),y=h?xe(h):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:y,amount:c,currency:u,offerCredit:!1,intent:null===(n=l.initializationData)||void 0===n?void 0:n.intent})}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}tokenizePayment(e,t,i,n,r){return ft(this,void 0,void 0,function*(){try{const{deviceData:r}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),o=yield t.tokenizePayment(e),{details:a,nonce:s}=o,d=this.braintreeIntegrationService.mapToLegacyBillingAddress(a),l=this.braintreeIntegrationService.mapToLegacyShippingAddress(a);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",provider:i,action:n?\"process_payment\":\"set_external_checkout\",nonce:s,device_data:r,billing_address:JSON.stringify(d),shipping_address:JSON.stringify(l)},this.buyNowCartId&&{cart_id:this.buyNowCartId})),o}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}createBuyNowCart(e){return ft(this,void 0,void 0,function*(){if(!e)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(e)}catch(e){throw new pt}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const wt=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new bt(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypal\"}]);var Ct=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class St{constructor(e,t,i,n,r){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeMessages=n,this.braintreeHostWindow=r}initialize(e){var t,i;return Ct(this,void 0,void 0,function*(){const{braintreepaypalcredit:n,containerId:r,methodId:o}=e;if(!o)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!r)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.');let a,s=this.paymentIntegrationService.getState();if(n.buyNowInitializeOptions){if(!n.currencyCode)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.');a=n.currencyCode}else yield this.paymentIntegrationService.loadDefaultCheckout(),s=this.paymentIntegrationService.getState(),a=s.getCartOrThrow().currency.code;const d=s.getPaymentMethodOrThrow(o),{clientToken:l,config:c,initializationData:u}=d;if(!l||!u)throw new $(R.MissingPaymentMethod);const h={currency:a,intent:u.intent,isCreditEnabled:u.isCreditEnabled},m=y(null!==(i=null===(t=s.getStoreConfig())||void 0===t?void 0:t.checkoutSettings.features)&&void 0!==i?i:{},\"PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk\");this.braintreeIntegrationService.initialize(l),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{!m&&n.messagingContainerId&&this.renderPayPalMessages(o,n.messagingContainerId),this.renderPayPalButton(e,n,r,o,!!c.testMode)},e=>this.handleError(e,r,n.onError))})}deinitialize(){return Ct(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}renderPayPalMessages(e,t){this.braintreeMessages.render(e,t,D.CART)}renderPayPalButton(e,t,i,n,r){const{style:o,shouldProcessPayment:a,onAuthorizeError:s,onEligibilityFailure:d}=t,{paypal:l}=this.braintreeHostWindow;let c=!1;l&&[l.FUNDING.PAYLATER,l.FUNDING.CREDIT].forEach(u=>{const h=u===l.FUNDING.CREDIT?Object.assign({label:N.CREDIT},gt(o)):gt(o);if(!c){const o=l.Buttons({env:r?\"sandbox\":\"production\",fundingSource:u,style:h,createOrder:()=>this.setupPayment(e,t,n),onApprove:t=>this.tokenizePayment(t,e,n,a,s)});o.isEligible()?(o.render(`#${i}`),c=!0):l.FUNDING.CREDIT&&d&&\"function\"==typeof d&&d()}}),l&&c||this.braintreeIntegrationService.removeElement(i)}setupPayment(e,t,i){var n;return Ct(this,void 0,void 0,function*(){const{onPaymentError:r,shippingAddress:o,buyNowInitializeOptions:a}=t;try{const r=\"function\"==typeof(null==a?void 0:a.getBuyNowCartRequestBody)?yield this.createBuyNowCart(a.getBuyNowCartRequestBody()):void 0;this.buyNowCartId=null==r?void 0:r.id;const s=this.paymentIntegrationService.getState(),d=s.getCustomer(),l=s.getPaymentMethodOrThrow(i),c=r?r.cartAmount:s.getCartOrThrow().cartAmount,u=r?t.currencyCode:s.getCartOrThrow().currency.code,h=o||(null==d?void 0:d.addresses[0]),y=h?xe(h):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:y,amount:c,currency:u,offerCredit:!0,intent:null===(n=l.initializationData)||void 0===n?void 0:n.intent})}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}tokenizePayment(e,t,i,n,r){return Ct(this,void 0,void 0,function*(){try{const{deviceData:r}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),o=yield t.tokenizePayment(e),{details:a,nonce:s}=o,d=this.braintreeIntegrationService.mapToLegacyBillingAddress(a),l=this.braintreeIntegrationService.mapToLegacyShippingAddress(a);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",provider:i,action:n?\"process_payment\":\"set_external_checkout\",nonce:s,device_data:r,billing_address:JSON.stringify(d),shipping_address:JSON.stringify(l)},this.buyNowCartId&&{cart_id:this.buyNowCartId})),o}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}createBuyNowCart(e){return Ct(this,void 0,void 0,function*(){if(!e)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(e)}catch(e){throw new pt}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const Pt=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n),a=new Ae(i);return new St(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,a,n)},[{id:\"braintreepaypalcredit\"}]);var It=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ot{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i}initialize(e){return It(this,void 0,void 0,function*(){const{containerId:t,methodId:i}=e;if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState(),{clientToken:r,initializationData:o,config:a}=n.getPaymentMethodOrThrow(i);if(!r||!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(r);const s=yield this.braintreeSdk.getBraintreeVisaCheckout(),{currency:{code:d},cartAmount:l}=n.getCartOrThrow(),c=yield this.braintreeSdk.getVisaCheckoutSdk(a.testMode),u=s.createInitOptions({paymentRequest:{currencyCode:d,subtotal:String(l)},settings:{shipping:{collectShipping:!0}}});this.createSignInButton(t),yield c.init(u),c.on(\"payment.success\",e=>It(this,void 0,void 0,function*(){yield this.paymentSuccess(s,e)}))})}deinitialize(){return Promise.resolve()}paymentSuccess(e,t){return It(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.toVisaCheckoutAddress(n),billingAddress:a=this.toVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}toVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}createSignInButton(e){const t=document.querySelector(`#${e}`);if(!t)throw new Error(\"Need a container to place the button\");return this.insertVisaCheckoutButton(t)}insertVisaCheckoutButton(e){const t=document.createElement(\"div\");return t.style.display=\"flex\",t.style.flexDirection=\"column\",t.style.alignItems=\"flex-end\",t.innerHTML='\\n            <img\\n                alt=\"Visa Checkout\"\\n                class=\"v-button\"\\n                role=\"button\"\\n                src=\"https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178\"\\n                />\\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>',e.appendChild(t),t}}const kt=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new Ot(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);function Et(e){const{billingAddress:t,email:i,firstName:n,lastName:r,phone:o,shippingAddress:a}=e,s=t||a;return{email:i,first_name:n,last_name:r,phone_number:o,address_line_1:null==s?void 0:s.line1,address_line_2:null==s?void 0:s.line2,city:null==s?void 0:s.city,state:null==s?void 0:s.state,country_code:null==s?void 0:s.countryCode,postal_code:null==s?void 0:s.postalCode}}function Tt(e){const{email:t,phone:i,shippingAddress:n}=e,r=(null==n?void 0:n.recipientName)||\"\",[o,a]=r.split(\" \");return{email:t,first_name:o||\"\",last_name:a||\"\",phone_number:i,address_line_1:null==n?void 0:n.line1,address_line_2:null==n?void 0:n.line2,city:null==n?void 0:n.city,state:null==n?void 0:n.state,country_code:null==n?void 0:n.countryCode,postal_code:null==n?void 0:n.postalCode}}var At=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};const zt=e=>{const{color:t,height:i}=e;return{backgroundColor:(n=t||\"\",n===z.WHITE?\"#FFFFFF\":\"#3D95CE\"),backgroundPosition:\"50% 50%\",backgroundSize:\"80px auto\",backgroundImage:`url(\"/app/assets/img/payment-providers/venmo-logo-${t===z.WHITE?z.BLUE:z.WHITE}.svg\")`,backgroundRepeat:\"no-repeat\",borderRadius:\"4px\",cursor:\"pointer\",transition:\"0.2s ease\",minHeight:`${i||40}px`,minWidth:\"150px\",height:\"100%\",width:\"100%\",border:t===z.WHITE?\"1px solid black\":\"none\"};// removed by dead control flow\n var n; };class Nt{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i,this.onError=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}initialize(e){return At(this,void 0,void 0,function*(){const{braintreevenmo:t,containerId:i,methodId:n}=e;if(!n)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');const r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(n),{clientToken:o,initializationData:a}=r,{paymentButtonStyles:s}=a,{cartButtonStyles:d}=s||{},l=(null==t?void 0:t.style)||d;if(!o||!a)throw new $(R.MissingPaymentMethod);if(!i)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');yield this.paymentIntegrationService.loadDefaultCheckout(),this.onError=(null==t?void 0:t.onError)||this.handleError,this.braintreeSdk.initialize(o);try{const e=yield this.braintreeSdk.getVenmoCheckoutOrThrow();this.renderVenmoButton(e,i,null==t?void 0:t.buyNowInitializeOptions,l)}catch(e){(Be(e)||function(e){return e instanceof b}(e))&&this.handleInitializationVenmoError(e,i)}})}deinitialize(){return At(this,void 0,void 0,function*(){return yield this.braintreeSdk.deinitialize(),Promise.resolve()})}handleError(e){throw new Error(e.message)}createBuyNowCart(e){return At(this,void 0,void 0,function*(){if(\"function\"==typeof(null==e?void 0:e.getBuyNowCartRequestBody)){const t=null==e?void 0:e.getBuyNowCartRequestBody();if(!t)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(t)}catch(e){throw new pt}}})}handleInitializationVenmoError(e,t){return this.removeVenmoContainer(t),this.onError(e)}removeVenmoContainer(e){const t=document.getElementById(e);t&&t.remove()}renderVenmoButton(e,t,i,n){const r=document.getElementById(t),{color:o}=n||{};if(!r)throw new w(\"Unable to create wallet button without valid container ID.\");r.setAttribute(\"aria-label\",\"Venmo\"),Object.assign(r.style,zt(n||{})),r.addEventListener(\"click\",()=>At(this,void 0,void 0,function*(){r.setAttribute(\"disabled\",\"true\");const t=yield this.createBuyNowCart(i);e.tokenize&&e.tokenize((e,i)=>At(this,void 0,void 0,function*(){r.removeAttribute(\"disabled\"),e&&this.onError(e),yield this.handlePostForm(i,null==t?void 0:t.id)}))})),o===z.BLUE&&(r.addEventListener(\"mouseenter\",()=>{r.style.backgroundColor=\"#0a7fc2\"}),r.addEventListener(\"mouseleave\",()=>{r.style.backgroundColor=zt(n||{}).backgroundColor}))}handlePostForm(e,t){return At(this,void 0,void 0,function*(){const{deviceData:i}=yield this.braintreeSdk.getDataCollectorOrThrow(),{nonce:n,details:r}=e;this.formPoster.postForm(\"/checkout.php\",Object.assign({nonce:n,provider:\"braintreevenmo\",payment_type:\"paypal\",device_data:i,action:\"set_external_checkout\",billing_address:JSON.stringify(Et(r)),shipping_address:JSON.stringify(Tt(r))},t&&{cart_id:t}))})}}const Mt=q(i=>{const n=window,r=(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),o=new v(i),a=new W(r,n,o),s=new ge(a);return new Nt(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),s)},[{id:\"braintreevenmo\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2hlY2tvdXQtc2RrLWpzL2Rpc3QvZXNtL2ludGVncmF0aW9ucy9icmFpbnRyZWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBSUEsRUFBc0IsQ0FBQyxFQ0daLFNBQVNDLEVBQ3BCQyxFQUNBQyxFQUNBQyxHQUFnQixHLE1BRWhCLE9BQStCLFFBQXhCLEVBQUFGLEVBQVNDLFVBQWUsUUFBSUMsQ0FDdkMsQ0NUQUosRUFBb0JLLEVBQUksQ0FBQ0MsRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYUCxFQUFvQlMsRUFBRUYsRUFBWUMsS0FBU1IsRUFBb0JTLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsTUNKM0VSLEVBQW9CUyxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQTNFLE1BQU1JLEVBQTBDLFVBQzFDQyxFQUFnQyxVQUNoQ0MsRUFBK0IsVUNVN0IsTUFBTUMsRUFHakIsV0FBQUMsQ0FBb0JDLEdBQUEsS0FBQUEsMEJBQUFBLEVBRlosS0FBQUMsZ0JBQXVDQyxNQUU0QixDQUUzRSxhQUFBQyxHQUNJLE1BQ01DLEVBRFFDLEtBQUtMLDBCQUEwQk0sV0FDbkJDLGlCQUNwQjdCLEdBQVcwQixhQUFXLEVBQVhBLEVBQWFJLGlCQUFpQjlCLFdBQVksQ0FBQyxFQUk1RCxPQUZ5QjJCLEtBQUtJLDJCQU0xQmhDLEVBQW9CQyxFQUFVLG1EQUN2QmlCLEVBR1BsQixFQUFvQkMsRUFBVSw0Q0FDdkJrQixFQUdKQyxFQUNYLENBRVEsc0JBQUFZLEdBQ0osTUFBTUMsRUFBWUwsS0FBS0osZ0JBQWdCUyxVQUV2QyxHQUFJQSxFQUFXLENBQ1gsTUFBTUMsRUFBbUJDLDRDQUFBQSxDQUNyQjFCLE9BQU8yQixPQUFPSCxHQUNiSSxLQUFhQSxFQUFPQyxTQUd6QixPQUFPSixhQUFnQixF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V0FBRXo3QixTQUFxQjVFLEtBQUtza0IsYUFBYXJCLDJCQUN6QyxNQUFFaFcsRUFBSyxRQUFFdEwsR0FBWXNrQixFQUUzQmptQixLQUFLK1MsV0FBV29ELFNBQVMsZ0JBQWlCLE9BQUYsUUFDcENsSixRQUNBb0osU0FBVSxpQkFDVkQsYUFBYyxTQUNkRyxZQUFhM1IsRUFDYjBSLE9BQVEsd0JBQ1JFLGdCQUFpQkMsS0FBS0MsVUFBVXRNLEdBQTBCekksSUFDMURnVixpQkFBa0JGLEtBQUtDLFVBQVVqTixHQUEyQjlILEtBQ3hEMCtCLEdBQWdCLENBQUVDLFFBQVNELElBRXZDLEUsRUU3T0osTUFxQkEsR0FBZTF1QixFQW5CVmhTLElBQ0QsTUFBTWlFLEVBQTJDL0QsT0FDM0NzUSxFQUFlMkcsMkVBQUFBLEdBQ2YxRyxFQUE2QixJQUFJM1EsRUFBMkJFLEdBQzVEZ0UsRUFBd0IsSUFBSXVNLEVBQzlCQyxFQUNBdk0sRUFDQXdNLEdBR0VrVSxFQUFlLElBQUl2QixHQUFhcGYsR0FFdEMsT0FBTyxJQUFJaStCLEdBQ1BqaUMsRUFDQW9YLDBFQUFBQSxHQUNBdU4sSUFJOEQsQ0FBQyxDQUFFdE4sR0FBSSxvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvd2VicGFjay9ib290c3RyYXA/ZmZjYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvdXRpbGl0eS9zcmMvaXMtZXhwZXJpbWVudC1lbmFibGVkL2lzLWV4cGVyaW1lbnQtZW5hYmxlZC50cz9jOWE0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzPzk5NGMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kPzllYTQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLXNkay12ZXJpc29uLnRzP2Y5YWIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLXNkay12ZXJzaW9uLW1hbmFnZXIudHM/MDRmOCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9zdGFuZGFyZC1lcnJvci50cz84YTAzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3NldC1wcm90b3R5cGUtb2YudHM/ODQ1YSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3Vuc3VwcG9ydGVkLWJyb3dzZXItZXJyb3IudHM/OTk3ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9pbnZhbGlkLWFyZ3VtZW50LWVycm9yLnRzPzM5MjEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvcGF5bWVudC1hcmd1bWVudC1pbnZhbGlkLWVycm9yLnRzP2E1MDEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvcGF5bWVudC1pbnZhbGlkLWZvcm0tZXJyb3IudHM/YzBmYiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9ub3QtaW5pdGlhbGl6ZWQtZXJyb3IudHM/OGI0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1jYW5jZWxsZWQtZXJyb3IudHM/MDg5MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9jYW5jZWxsYWJsZS1wcm9taXNlL2NhbmNlbGxhYmxlLXByb21pc2UudHM/Zjc0YSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9wYXlwYWwudHM/ODljNiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9icmFpbnRyZWUudHM/YTc4ZSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtZXJyb3IudHM/MzI4OCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9icmFpbnRyZWUtaW50ZWdyYXRpb24tc2VydmljZS50cz81OWNjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL3V0aWxzL2lzLWNyZWRpdC1jYXJkLWluc3RydW1lbnQtbGlrZS50cz8xOTI5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWNsaWVudC11bmF2YWlsYWJsZS1lcnJvci50cz9mOGVjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2JyYWludHJlZS1zZGstc2NyaXB0cy1pbnRlZ3JpdHkudHM/YjI4NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9taXNzaW5nLWRhdGEtZXJyb3IudHM/YjdkYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9icmFpbnRyZWUtc2NyaXB0LWxvYWRlci50cz82NmFiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2lzTWFuYWdlYWJsZUJyYWludHJlZVNES1ZlcnNpb24udHM/ZmQ3MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3RvLXJlc29sdmFibGUtbW9kdWxlLnRzP2Q1MjAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC9icmFpbnRyZWUtcGF5cGFsLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzgwYjUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9jaGVja291dC1idXR0b25zL2RlZmF1bHQtY2hlY2tvdXQtYnV0dG9uLWhlaWdodC50cz9kNDI1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvY3JlYXRlLWJyYWludHJlZS1wYXlwYWwtY3VzdG9tZXItc3RyYXRlZ3kudHM/MGZkYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC1jdXN0b21lci1zdHJhdGVneS50cz9iMDMxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0L2NyZWF0ZS1icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC1jdXN0b21lci1zdHJhdGVneS50cz82NmNlIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL3V0aWxzL2dldC1mYXN0bGFuZS1zdHlsZXMudHM/MzgwOCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy90eXBlcy50cz8zMDIwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvcGF5bWVudC9pbnN0cnVtZW50LnRzP2YyYjYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLWZhc3RsYW5lL2JyYWludHJlZS1mYXN0bGFuZS1jdXN0b21lci1zdHJhdGVneS50cz9iZDA3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9zdG9yYWdlL3NyYy9jb29raWUtc3RvcmFnZS50cz8xNTNjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1mYXN0bGFuZS9icmFpbnRyZWUtZmFzdGxhbmUtdXRpbHMudHM/MWVkZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvY3JlYXRlLWJyYWludHJlZS1mYXN0bGFuZS1jdXN0b21lci1zdHJhdGVneS50cz81ZTcwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2JyYWludHJlZS1zZGsudHM/ODA2NCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9ub3QtaW1wbGVtZW50ZWQtZXJyb3IudHM/M2EzNSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtdmlzYS1jaGVja291dC9icmFpbnRyZWUtdmlzYS1jaGVja291dC1jdXN0b21lci1zdHJhdGVneS50cz9kY2FmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12aXNhLWNoZWNrb3V0L2NyZWF0ZS1icmFpbnRyZWUtdmlzYS1jaGVja291dC1jdXN0b21lci1zdHJhdGVneS50cz9iN2IyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvcGF5bWVudC9pcy12YXVsdGVkLWluc3RydW1lbnQudHM/MTgwZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9vcmRlci1maW5hbGl6YXRpb24tbm90LXJlcXVpcmVkLWVycm9yLnRzP2I1YTEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9wYXltZW50L2lzLWhvc3RlZC1pbnRydW1lbnQtbGlrZS50cz84NzYzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWZhaWxlZC1lcnJvci50cz8wN2RkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2lzLXVzLWJhbmstYWNjb3VudC1pbnN0cnVtZW50LWxpa2UudHM/MTUwMCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtYWNoL2JyYWludHJlZS1hY2gtcGF5bWVudC1zdHJhdGVneS50cz9hZWNkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1hY2gvY3JlYXRlLWJyYWludHJlZS1hY2gtcGF5bWVudC1zdHJhdGVneS50cz81NWM2Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2NyZWF0ZS1icmFpbnRyZWUtc2RrLnRzPzM0ZTQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLW1lc3NhZ2VzLnRzPzgwM2UiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3VpL3NyYy9vdmVybGF5L292ZXJsYXkudHM/ZWY2OCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvdWkvc3JjL292ZXJsYXkvb3ZlcmxheS1zdHlsZS50cz83NzFmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy91aS9zcmMvbG9hZGluZy1pbmRpY2F0b3IvbG9hZGluZy1pbmRpY2F0b3IudHM/YjA4NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNvbnN0YW50cy50cz8xNWFhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2lzLWJyYWludHJlZS1lcnJvci50cz82OWIxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL21hcC10by1icmFpbnRyZWUtc2hpcHBpbmctYWRkcmVzcy1vdmVycmlkZS50cz9lM2U2Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvYnJhaW50cmVlLXBheXBhbC1wYXltZW50LXN0cmF0ZWd5LnRzPzAyOGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvaXMtYnJhaW50cmVlLXBheXBhbC1wcm92aWRlci1lcnJvci50cz84NDAwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvY3JlYXRlLWJyYWludHJlZS1wYXlwYWwtcGF5bWVudC1zdHJhdGVneS50cz8yYjEzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9jb250ZW50LXR5cGUudHM/NTA0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9odHRwLXJlcXVlc3Qvc2RrLXZlcnNpb24taGVhZGVycy50cz83YmYwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1yZXF1ZXN0LXNlbmRlci50cz8zOGZiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9pbnRlcm5hbC1hcGktaGVhZGVycy50cz80MTExIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3JlcXVlc3QtZXJyb3IudHM/Yzg0MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1pbnZhbGlkLWVycm9yLnRzPzNhZGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvdGltZW91dC1lcnJvci50cz8wODBkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1sb2NhbC1wYXltZW50LW1ldGhvZHMvYnJhaW50cmVlLWxvY2FsLW1ldGhvZHMtcGF5bWVudC1zdHJhdGVneS50cz8zYTIzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1sb2NhbC1wYXltZW50LW1ldGhvZHMvY3JlYXRlLWJyYWludHJlZS1sb2NhbC1tZXRob2RzLXBheW1lbnQtc3RyYXRlZ3kudHM/ZmRjMyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtYWNjZWxlcmF0ZWQtY2hlY2tvdXQtY3VzdG9tZXIudHM/NzU0MSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvYnJhaW50cmVlLWZhc3RsYW5lLXBheW1lbnQtc3RyYXRlZ3kudHM/YzExYiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvY3JlYXRlLWJyYWludHJlZS1mYXN0bGFuZS1wYXltZW50LXN0cmF0ZWd5LnRzP2ZjNTAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQtcGF5bWVudC1zdHJhdGVneS50cz8xNDIyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12aXNhLWNoZWNrb3V0L2NyZWF0ZS1icmFpbnRyZWUtdmlzYS1jaGVja291dC1wYXltZW50LXN0cmF0ZWd5LnRzPzVlODgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2JyYWludHJlZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5LnRzPzMwNzIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2NyZWF0ZS1icmFpbnRyZWUtdmVubW8tcGF5bWVudC1zdHJhdGVneS50cz82MzY1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1jcmVkaXQtY2FyZC9icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1zdHJhdGVneS50cz9hOWE5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2lzLXJlcXVlc3QtZXJyb3IudHM/YjQzZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtcGF5bWVudC1yZXF1ZXN0LTNkcy1lcnJvci50cz9iODM3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL3V0aWxzL2lzLWJyYWludHJlZS1mb3JtLWZpZWxkcy1tYXAudHM/MWU0YyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtaG9zdGVkLWZvcm0tZXJyb3IudHM/ZWQ1OSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtaG9zdGVkLWZvcm0vYnJhaW50cmVlLWhvc3RlZC1mb3JtLnRzPzUxYzEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvdXRpbHMvaXMtYnJhaW50cmVlLXN1cHBvcnRlZC1jYXJkLWJyYW5kLnRzP2Y5ZTciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLWNyZWRpdC1jYXJkL2NyZWF0ZS1icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1zdHJhdGVneS50cz9hNTBhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2J1eS1ub3ctY2FydC1jcmVhdGlvbi1lcnJvci50cz9kNjA0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2dldC12YWxpZC1idXR0b24tc3R5bGUudHM/ZTM4OCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsL2JyYWludHJlZS1wYXlwYWwtYnV0dG9uLXN0cmF0ZWd5LnRzP2RiMWEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC9jcmVhdGUtYnJhaW50cmVlLXBheXBhbC1idXR0b24tc3RyYXRlZ3kudHM/ZmYxNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC1idXR0b24tc3RyYXRlZ3kudHM/NTNjZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC9jcmVhdGUtYnJhaW50cmVlLXBheXBhbC1jcmVkaXQtYnV0dG9uLXN0cmF0ZWd5LnRzPzg2NDIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQtYnV0dG9uLXN0cmF0ZWd5LnRzP2YyNGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQvY3JlYXRlLWJyYWludHJlZS12aXNhLWNoZWNrb3V0LWJ1dHRvbi1zdHJhdGVneS50cz82MDc3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL21hcC10by1sZWdhY3ktYmlsbGluZy1hZGRyZXNzLnRzPzlkMzkiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvbWFwLXRvLWxlZ2FjeS1zaGlwcGluZy1hZGRyZXNzLnRzPzQxNDAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2JyYWludHJlZS12ZW5tby1idXR0b24tc3RyYXRlZ3kudHM/MzliOCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9pc1Vuc3VwcG9ydGVkQnJvd3NlckVycm9yLnRzP2JlMWMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2NyZWF0ZS1icmFpbnRyZWUtdmVubW8tYnV0dG9uLXN0cmF0ZWd5LnRzPzc4YTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsImV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZXMge1xuICAgIFtmZWF0dXJlTmFtZTogc3RyaW5nXTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFeHBlcmltZW50RW5hYmxlZChcbiAgICBmZWF0dXJlczogRmVhdHVyZXMsXG4gICAgZXhwZXJpbWVudE5hbWU6IHN0cmluZyxcbiAgICBmYWxsYmFja1ZhbHVlID0gdHJ1ZSxcbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmZWF0dXJlc1tleHBlcmltZW50TmFtZV0gPz8gZmFsbGJhY2tWYWx1ZTtcbn1cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgY29uc3QgQlJBSU5UUkVFX1NES19IT1NURURfRklFTERTX0ZJWF9WRVJTSU9OID0gJzMuMTI4LjAnO1xuZXhwb3J0IGNvbnN0IEJSQUlOVFJFRV9TREtfREVGQVVMVF9WRVJTSU9OID0gJzMuMTIzLjInO1xuZXhwb3J0IGNvbnN0IEJSQUlOVFJFRV9TREtfU1RBQkxFX1ZFUlNJT04gPSAnMy4xMDYuMCc7XG4iLCJpbXBvcnQgeyBmaW5kIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgUGF5bWVudEludGVncmF0aW9uU2VydmljZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCB7IEJyYWludHJlZUhvc3RXaW5kb3cgfSBmcm9tICcuL2JyYWludHJlZSc7XG5pbXBvcnQge1xuICAgIEJSQUlOVFJFRV9TREtfREVGQVVMVF9WRVJTSU9OLFxuICAgIEJSQUlOVFJFRV9TREtfSE9TVEVEX0ZJRUxEU19GSVhfVkVSU0lPTixcbiAgICBCUkFJTlRSRUVfU0RLX1NUQUJMRV9WRVJTSU9OLFxufSBmcm9tICcuL2JyYWludHJlZS1zZGstdmVyaXNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyIHtcbiAgICBwcml2YXRlIGJyYWludHJlZVdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSkge31cblxuICAgIGdldFNES1ZlcnNpb24oKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHN0b3JlQ29uZmlnID0gc3RhdGUuZ2V0U3RvcmVDb25maWcoKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdG9yZUNvbmZpZz8uY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcyB8fCB7fTtcblxuICAgICAgICBjb25zdCBwcmVsb2FkZWRWZXJzaW9uID0gdGhpcy5nZXRQcmVsb2FkZWRTREtWZXJzaW9uKCk7XG5cbiAgICAgICAgaWYgKHByZWxvYWRlZFZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVsb2FkZWRWZXJzaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRXhwZXJpbWVudEVuYWJsZWQoZmVhdHVyZXMsICdQQVlQQUwtNTgwOS5icmFpbnRyZWVfaG9zdGVkX2ZpZWxkc19maXhfdmVyc2lvbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gQlJBSU5UUkVFX1NES19IT1NURURfRklFTERTX0ZJWF9WRVJTSU9OO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRXhwZXJpbWVudEVuYWJsZWQoZmVhdHVyZXMsICdQQVlQQUwtNTYzNi51cGRhdGVfYnJhaW50cmVlX3Nka192ZXJzaW9uJykpIHtcbiAgICAgICAgICAgIHJldHVybiBCUkFJTlRSRUVfU0RLX0RFRkFVTFRfVkVSU0lPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCUkFJTlRSRUVfU0RLX1NUQUJMRV9WRVJTSU9OO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UHJlbG9hZGVkU0RLVmVyc2lvbigpOiB2b2lkIHwgc3RyaW5nIHtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlID0gdGhpcy5icmFpbnRyZWVXaW5kb3cuYnJhaW50cmVlO1xuXG4gICAgICAgIGlmIChicmFpbnRyZWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZWxvYWRlZFZlcnNpb24gPSBmaW5kPHsgVkVSU0lPTj86IHN0cmluZyB9PihcbiAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKGJyYWludHJlZSksXG4gICAgICAgICAgICAgICAgKG1vZHVsZSkgPT4gISFtb2R1bGUuVkVSU0lPTixcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiBwcmVsb2FkZWRWZXJzaW9uPy5WRVJTSU9OO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IEN1c3RvbUVycm9yIGZyb20gJy4vY3VzdG9tLWVycm9yJztcbmltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tICcuL3NldC1wcm90b3R5cGUtb2YnO1xuXG4vKipcbiAqIFRoaXMgZXJyb3IgdHlwZSBzaG91bGQgbm90IGJlIGNvbnN0cnVjdGVkIGRpcmVjdGx5LiBJdCBpcyBhIGJhc2UgY2xhc3MgZm9yXG4gKiBhbGwgY3VzdG9tIGVycm9ycyB0aHJvd24gaW4gdGhpcyBsaWJyYXJ5LlxuICovXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBTdGFuZGFyZEVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBDdXN0b21FcnJvciB7XG4gICAgbmFtZSA9ICdTdGFuZGFyZEVycm9yJztcbiAgICB0eXBlID0gJ3N0YW5kYXJkJztcblxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJyZWQuJyk7XG5cbiAgICAgICAgc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIG5ldy50YXJnZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFjayA9IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpLnN0YWNrO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqZWN0OiBhbnksIHByb3RvdHlwZTogb2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBwcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iamVjdDtcbn1cbiIsImltcG9ydCB7IFN0YW5kYXJkRXJyb3IgfSBmcm9tICcuL2luZGV4JztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHRoZSBzaG9wcGVyIGlzIHVzaW5nIGEgYnJvd3NlciB2ZXJzaW9uIHRoYXQgaXMgbm90XG4gKiBzdXBwb3J0ZWQgYnkgdXMgb3IgYW55IHRoaXJkIHBhcnR5IHByb3ZpZGVyIHdlIHVzZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ1Vuc3VwcG9ydGVkIGJyb3dzZXIgZXJyb3InKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAndW5zdXBwb3J0ZWRfYnJvd3Nlcic7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gYSBtZXRob2QgaXMgdW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGVcbiAqIGNhbGxlciBoYXMgbm90IHByb3ZpZGVkIGFsbCB0aGUgYXJndW1lbnRzIGFjY29yZGluZyB0byB0aGVpciByZXF1aXJlbWVudHMsXG4gKiBpLmUuOiBpZiBhbiBhcmd1bWVudCBpcyBtaXNzaW5nIG9yIGl0IGlzIG5vdCB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkQXJndW1lbnRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnSW52YWxpZCBhcmd1bWVudHMgaGF2ZSBiZWVuIHByb3ZpZGVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdJbnZhbGlkQXJndW1lbnRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdpbnZhbGlkX2FyZ3VtZW50JztcbiAgICB9XG59XG4iLCJpbXBvcnQgSW52YWxpZEFyZ3VtZW50RXJyb3IgZnJvbSAnLi9pbnZhbGlkLWFyZ3VtZW50LWVycm9yJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHNob3VsZCBiZSB0aHJvd24gd2hlbiB3ZSBhcmUgdW5hYmxlIHRvIHN1Ym1pdCBhIHBheW1lbnQgYmVjYXVzZVxuICogdGhlIGNhbGxlciBoYXMgbm90IHByb3ZpZGVkIGFsbCB0aGUgcmVxdWlyZWQgZmllbGRzLCBpLmUuOiBpZiBhbiBhcmd1bWVudCBpc1xuICogbWlzc2luZyBvciBpdCBpcyBub3QgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yIGV4dGVuZHMgSW52YWxpZEFyZ3VtZW50RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGludmFsaWRGaWVsZHM/OiBzdHJpbmdbXSkge1xuICAgICAgICBsZXQgbWVzc2FnZSA9ICdVbmFibGUgdG8gc3VibWl0IHBheW1lbnQgZm9yIHRoZSBvcmRlciBiZWNhdXNlIHRoZSBwYXlsb2FkIGlzIGludmFsaWQuJztcblxuICAgICAgICBpZiAoaW52YWxpZEZpZWxkcykge1xuICAgICAgICAgICAgbWVzc2FnZSA9IGAke21lc3NhZ2V9IE1ha2Ugc3VyZSB0aGUgZm9sbG93aW5nIGZpZWxkcyBhcmUgcHJvdmlkZWQgY29ycmVjdGx5OiAke2ludmFsaWRGaWVsZHMuam9pbihcbiAgICAgICAgICAgICAgICAnLCAnLFxuICAgICAgICAgICAgKX0uYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3InO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyB7XG4gICAgW2tleTogc3RyaW5nXTogQXJyYXk8eyBtZXNzYWdlOiBzdHJpbmc7IHR5cGU6IHN0cmluZyB9Pjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudEludmFsaWRGb3JtRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZGV0YWlsczogUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzLCBtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHBheW1lbnQgZm9ybSBjb250YWlucyBpbnZhbGlkIGRhdGEuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRJbnZhbGlkRm9ybUVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfaW52YWxpZF9mb3JtJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuZXhwb3J0IGVudW0gTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUge1xuICAgIENoZWNrb3V0QnV0dG9uTm90SW5pdGlhbGl6ZWQsXG4gICAgQ3VzdG9tZXJOb3RJbml0aWFsaXplZCxcbiAgICBQYXltZW50Tm90SW5pdGlhbGl6ZWQsXG4gICAgU2hpcHBpbmdOb3RJbml0aWFsaXplZCxcbiAgICBTcGFtUHJvdGVjdGlvbk5vdEluaXRpYWxpemVkLFxufVxuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgYSBtZXRob2QgcmVxdWlyZXMgYSBjZXJ0YWluIGluaXRpYWxpemF0aW9uIGNhbGwgdG8gYmVcbiAqIG1hZGUgZmlyc3QuIFNvbWUgb2JqZWN0cyBjYW4gYmUgY29uc3RydWN0ZWQgYnV0IHRoZXkgY2Fubm90IGJlIHVzZWQgdW50aWwgYVxuICogc2VwYXJhdGUgaW5pdGlhbGl6YXRpb24gY2FsbCBpcyBtYWRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3RJbml0aWFsaXplZEVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHN1YnR5cGU6IE5vdEluaXRpYWxpemVkRXJyb3JUeXBlKSB7XG4gICAgICAgIHN1cGVyKGdldEVycm9yTWVzc2FnZShzdWJ0eXBlKSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ05vdEluaXRpYWxpemVkRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbm90X2luaXRpYWxpemVkJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZSh0eXBlOiBOb3RJbml0aWFsaXplZEVycm9yVHlwZSk6IHN0cmluZyB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuQ3VzdG9tZXJOb3RJbml0aWFsaXplZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgY3VzdG9tZXIgc3RlcCBvZiBjaGVja291dCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcblxuICAgICAgICBjYXNlIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgcGF5bWVudCBzdGVwIG9mIGNoZWNrb3V0IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuXG4gICAgICAgIGNhc2UgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuU2hpcHBpbmdOb3RJbml0aWFsaXplZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgc2hpcHBpbmcgc3RlcCBvZiBjaGVja291dCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcblxuICAgICAgICBjYXNlIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlNwYW1Qcm90ZWN0aW9uTm90SW5pdGlhbGl6ZWQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIGNoZWNrb3V0IHNwYW0gcHJvdGVjdGlvbiBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSByZXF1aXJlZCBjb21wb25lbnQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gdGhlIHBheW1lbnQgZmxvdyBpcyBjYW5jZWxsZWQuIEl0IGNvdWxkIGJlXG4gKiBkdWUgdG8gYSBkZWxpYmVyYXRlIHVzZXIgaW50ZXJhY3Rpb24sIGkuZS46IHRoZSB1c2VyIGNsaWNrcyBvbiBhIGNhbmNlbFxuICogYnV0dG9uIHdoaWNoIGRpc21pc3NlcyB0aGUgcGF5bWVudCBtb2RhbC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdQYXltZW50IHByb2Nlc3Mgd2FzIGNhbmNlbGxlZC4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfY2FuY2VsbGVkJztcbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYW5jZWxsYWJsZVByb21pc2U8VD4ge1xuICAgIHByb21pc2U6IFByb21pc2U8VD47XG4gICAgY2FuY2VsITogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKHByb21pc2U6IFByb21pc2U8VD4pIHtcbiAgICAgICAgY29uc3QgY2FuY2VsbGFibGUgPSBuZXcgUHJvbWlzZTxUPigoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wcm9taXNlID0gUHJvbWlzZS5yYWNlKFtwcm9taXNlLCBjYW5jZWxsYWJsZV0pO1xuICAgIH1cbn1cbiIsIi8vIHRoZSBQYXlQYWwgc2lkZSBvZiB0aGluZ3MgdXNlcyB1cHBlcmNhc2Uga2V5cyBpbnN0ZWFkIG9mIGNhbWVsIGNhc2VcblxuLyoqXG4gKlxuICogUGF5UGFsIGNvbnN0YW50c1xuICpcbiAqL1xuZXhwb3J0IGNvbnN0IFBBWVBBTF9DT01QT05FTlRTID0gWydidXR0b25zJywgJ21lc3NhZ2VzJ107XG5cbmV4cG9ydCBlbnVtIFBheXBhbEJ1dHRvblN0eWxlTGF5b3V0T3B0aW9uIHtcbiAgICBIT1JJWk9OVEFMID0gJ2hvcml6b250YWwnLFxuICAgIFZFUlRJQ0FMID0gJ3ZlcnRpY2FsJyxcbn1cblxuZXhwb3J0IGVudW0gUGF5cGFsQnV0dG9uU3R5bGVTaXplT3B0aW9uIHtcbiAgICBTTUFMTCA9ICdzbWFsbCcsXG4gICAgTUVESVVNID0gJ21lZGl1bScsXG4gICAgTEFSR0UgPSAnbGFyZ2UnLFxuICAgIFJFU1BPTlNJVkUgPSAncmVzcG9uc2l2ZScsXG59XG5cbmV4cG9ydCBlbnVtIFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24ge1xuICAgIEdPTEQgPSAnZ29sZCcsXG4gICAgQkxVRSA9ICdibHVlJyxcbiAgICBTSWxWRVIgPSAnc2lsdmVyJyxcbiAgICBCTEFDSyA9ICdibGFjaycsXG4gICAgV0hJVEUgPSAnd2hpdGUnLFxufVxuXG5leHBvcnQgZW51bSBQYXlwYWxCdXR0b25TdHlsZUxhYmVsT3B0aW9uIHtcbiAgICBDSEVDS09VVCA9ICdjaGVja291dCcsXG4gICAgUEFZID0gJ3BheScsXG4gICAgQlVZTk9XID0gJ2J1eW5vdycsXG4gICAgUEFZUEFMID0gJ3BheXBhbCcsXG4gICAgQ1JFRElUID0gJ2NyZWRpdCcsXG59XG5cbmV4cG9ydCBlbnVtIFBheXBhbEJ1dHRvblN0eWxlU2hhcGVPcHRpb24ge1xuICAgIFBJTEwgPSAncGlsbCcsXG4gICAgUkVDVCA9ICdyZWN0Jyxcbn1cblxuLyoqXG4gKlxuICogUGF5UGFsIGludGVyZmFjZXNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsU0RLIHtcbiAgICBCdXR0b246IFBheXBhbEJ1dHRvbjtcbiAgICBjaGVja291dDogUGF5cGFsRXhwcmVzc0NoZWNrb3V0O1xuICAgIEZVTkRJTkc6IFBheXBhbEZ1bmRpbmdUeXBlTGlzdDtcbiAgICBCdXR0b25zKG9wdGlvbnM6IFBheXBhbEJ1dHRvbk9wdGlvbnMpOiBQYXlwYWxCdXR0b25SZW5kZXI7XG4gICAgTWVzc2FnZXMob3B0aW9uczogTWVzc2FnaW5nT3B0aW9ucyk6IE1lc3NhZ2luZ1JlbmRlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxCdXR0b24ge1xuICAgIHJlbmRlcihvcHRpb25zOiBQYXlwYWxCdXR0b25PcHRpb25zLCBjb250YWluZXI6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsRXhwcmVzc0NoZWNrb3V0IHtcbiAgICBpbml0WE8oKTogdm9pZDtcbiAgICBzdGFydEZsb3codXJsOiBzdHJpbmcpOiB2b2lkO1xuICAgIGNsb3NlRmxvdygpOiB2b2lkO1xuICAgIHNldHVwKG1lcmNoYW50SWQ6IHN0cmluZywgb3B0aW9uczogUGF5cGFsRXhwcmVzc0NoZWNrb3V0T3B0aW9ucyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsRXhwcmVzc0NoZWNrb3V0T3B0aW9ucyB7XG4gICAgYnV0dG9uOiBzdHJpbmc7XG4gICAgZW52aXJvbm1lbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdpbmdPcHRpb25zIHtcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICBidXllckNvdW50cnk/OiBzdHJpbmc7XG4gICAgcGxhY2VtZW50OiBzdHJpbmc7XG4gICAgc3R5bGU/OiBNZXNzYWdlc1N0eWxlT3B0aW9ucztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlc1N0eWxlT3B0aW9ucyB7XG4gICAgY29sb3I/OiBzdHJpbmc7IC8vICdibHVlJyB8ICdibGFjaycgfCAnd2hpdGUnIHwgJ3doaXRlLW5vLWJvcmRlcicgfCAnZ3JheScgfCAnbW9ub2Nocm9tZScgfCAnZ3JheXNjYWxlJ1xuICAgIGxheW91dD86IHN0cmluZzsgLy8gJ3RleHQnIHwgJ2ZsZXgnXG4gICAgbG9nbz86IHtcbiAgICAgICAgdHlwZT86IHN0cmluZzsgLy8gJ3ByaW1hcnknIHwgJ2FsdGVybmF0aXZlJyB8ICdpbmxpbmUnIHwgJ25vbmUnXG4gICAgICAgIHBvc2l0aW9uPzogc3RyaW5nOyAvLyAnbGVmdCcgfCAncmlnaHQnIHwgJ3RvcCdcbiAgICB9O1xuICAgIHJhdGlvPzogc3RyaW5nOyAvLyAnMXgxJyB8ICcxeDQnIHwgJzh4MScgfCAnMjB4MSdcbiAgICB0ZXh0Pzoge1xuICAgICAgICBhbGlnbj86IHN0cmluZzsgLy8gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInXG4gICAgICAgIGNvbG9yPzogc3RyaW5nOyAvLyAnYmxhY2snIHwgJ3doaXRlJyB8ICdtb25vY2hyb21lJyB8ICdncmF5c2NhbGUnXG4gICAgICAgIHNpemU/OiBudW1iZXI7IC8vIGZyb20gMTAgdG8gMTZcbiAgICB9O1xufVxuXG5leHBvcnQgZW51bSBNZXNzYWdpbmdQbGFjZW1lbnRzIHtcbiAgICBDQVJUID0gJ2NhcnQnLFxuICAgIEhPTUUgPSAnaG9tZXBhZ2UnLFxuICAgIFBBWU1FTlQgPSAncGF5bWVudCcsXG4gICAgUFJPRFVDVCA9ICdwcm9kdWN0Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdpbmdSZW5kZXIge1xuICAgIHJlbmRlcihjb250YWluZXI6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsQnV0dG9uT3B0aW9ucyB7XG4gICAgZW52Pzogc3RyaW5nO1xuICAgIGNvbW1pdD86IGJvb2xlYW47XG4gICAgc3R5bGU/OiBQYXlwYWxTdHlsZU9wdGlvbnM7XG4gICAgZnVuZGluZz86IFBheXBhbEZ1bmRpbmdUeXBlO1xuICAgIGZ1bmRpbmdTb3VyY2U/OiBzdHJpbmc7XG4gICAgY2xpZW50PzogUGF5cGFsQ2xpZW50VG9rZW47XG4gICAgcGF5bWVudD8oZGF0YT86IFBheXBhbEF1dGhvcml6ZURhdGEsIGFjdGlvbnM/OiBQYXlwYWxBY3Rpb25zKTogUHJvbWlzZTx1bmtub3duPjtcbiAgICBvbkF1dGhvcml6ZT8oZGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSwgYWN0aW9ucz86IFBheXBhbEFjdGlvbnMpOiBQcm9taXNlPHVua25vd24+O1xuICAgIGNyZWF0ZU9yZGVyPyhkYXRhPzogUGF5cGFsQXV0aG9yaXplRGF0YSwgYWN0aW9ucz86IFBheXBhbEFjdGlvbnMpOiBQcm9taXNlPHVua25vd24+O1xuICAgIG9uQXBwcm92ZT8oZGF0YT86IFBheXBhbEF1dGhvcml6ZURhdGEsIGFjdGlvbnM/OiBQYXlwYWxBY3Rpb25zKTogUHJvbWlzZTx1bmtub3duPjtcbiAgICBvbkNsaWNrPygpOiB2b2lkO1xuICAgIG9uQ2FuY2VsPygpOiB2b2lkO1xuICAgIG9uRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsU3R5bGVPcHRpb25zIHtcbiAgICBsYXlvdXQ/OiBQYXlwYWxCdXR0b25TdHlsZUxheW91dE9wdGlvbjtcbiAgICBzaXplPzogUGF5cGFsQnV0dG9uU3R5bGVTaXplT3B0aW9uO1xuICAgIGNvbG9yPzogUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbjtcbiAgICBsYWJlbD86IFBheXBhbEJ1dHRvblN0eWxlTGFiZWxPcHRpb247XG4gICAgc2hhcGU/OiBQYXlwYWxCdXR0b25TdHlsZVNoYXBlT3B0aW9uO1xuICAgIHRhZ2xpbmU/OiBib29sZWFuO1xuICAgIGZ1bmRpbmdpY29ucz86IGJvb2xlYW47XG4gICAgaGVpZ2h0PzogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbENsaWVudFRva2VuIHtcbiAgICBwcm9kdWN0aW9uPzogc3RyaW5nO1xuICAgIHNhbmRib3g/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsRnVuZGluZ1R5cGUge1xuICAgIGFsbG93ZWQ/OiBzdHJpbmdbXTtcbiAgICBkaXNhbGxvd2VkPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsQWN0aW9ucyB7XG4gICAgcGF5bWVudDogUGF5cGFsUGF5bWVudEFjdGlvbnM7XG4gICAgcmVxdWVzdDogUGF5cGFsUmVxdWVzdEFjdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsQnV0dG9uUmVuZGVyIHtcbiAgICByZW5kZXIoY29udGFpbmVyOiBzdHJpbmcpOiB2b2lkO1xuICAgIGlzRWxpZ2libGUoKTogYm9vbGVhbjtcbiAgICBjbG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEF1dGhvcml6ZURhdGEge1xuICAgIHBheWVySWQ6IHN0cmluZztcbiAgICBwYXltZW50SWQ/OiBzdHJpbmc7XG4gICAgYmlsbGluZ1Rva2VuPzogc3RyaW5nO1xuICAgIHBheWVySUQ/OiBzdHJpbmc7XG4gICAgcGF5bWVudElEPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEZ1bmRpbmdUeXBlTGlzdCB7XG4gICAgQ0FSRD86IHN0cmluZztcbiAgICBDUkVESVQ/OiBzdHJpbmc7XG4gICAgUEFZUEFMPzogc3RyaW5nO1xuICAgIFBBWUxBVEVSPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbFBheW1lbnRBY3Rpb25zIHtcbiAgICBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8dW5rbm93bj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsUmVxdWVzdEFjdGlvbnMge1xuICAgIHBvc3QodXJsOiBzdHJpbmcsIHBheWxvYWQ/OiBvYmplY3QsIG9wdGlvbnM/OiBvYmplY3QpOiBQcm9taXNlPHsgaWQ6IHN0cmluZyB9Pjtcbn1cbiIsImltcG9ydCB7IE9taXQgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHtcbiAgICBQYXlwYWxBdXRob3JpemVEYXRhLFxuICAgIFBheXBhbEJ1dHRvbk9wdGlvbnMsXG4gICAgUGF5cGFsQnV0dG9uUmVuZGVyLFxuICAgIFBheXBhbFNESyxcbiAgICBQYXlwYWxTdHlsZU9wdGlvbnMsXG59IGZyb20gJy4vcGF5cGFsJztcbmltcG9ydCB7XG4gICAgQnJhaW50cmVlQ2xpZW50Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yQ3JlYXRvcixcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVGYXN0bGFuZUNyZWF0b3IsXG4gICAgQnJhaW50cmVlR29vZ2xlUGF5bWVudENyZWF0b3IsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzVG9rZW5pemVQYXlsb2FkLFxuICAgIEJyYWludHJlZU1vZHVsZSxcbiAgICBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yLFxuICAgIEJyYWludHJlZU1vZHVsZUNyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlQ3JlYXRvcixcbiAgICBCcmFpbnRyZWVUb2tlbml6YXRpb25EZXRhaWxzLFxuICAgIEJyYWludHJlZVVzQmFua0FjY291bnRDcmVhdG9yLFxuICAgIEJyYWludHJlZVdpbmRvdyxcbiAgICBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIFZpc2FDaGVja291dFNESyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICAgIFZpc2FDaGVja291dEluaXRPcHRpb25zLFxuICAgIFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCxcbiAgICBWaXNhQ2hlY2tvdXRUb2tlbml6ZWRQYXlsb2FkLFxufSBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbi8qKlxuICpcbiAqIENvbnN0YW50c1xuICpcbiAqL1xuZXhwb3J0IGVudW0gQnJhaW50cmVlRW52IHtcbiAgICBTYW5kYm94ID0gJ3NhbmRib3gnLFxuICAgIFByb2R1Y3Rpb24gPSAncHJvZHVjdGlvbicsXG59XG5cbi8qKlxuICpcbiAqIENvbW1vblxuICpcbiAqL1xuZXhwb3J0IGVudW0gQnJhaW50cmVlTW9kdWxlTmFtZSB7XG4gICAgQ2xpZW50ID0gJ2NsaWVudCcsXG4gICAgRGF0YUNvbGxlY3RvciA9ICdkYXRhQ29sbGVjdG9yJyxcbiAgICBGYXN0bGFuZSA9ICdmYXN0bGFuZScsXG4gICAgR29vZ2xlUGF5bWVudCA9ICdnb29nbGVQYXltZW50JyxcbiAgICBIb3N0ZWRGaWVsZHMgPSAnaG9zdGVkRmllbGRzJyxcbiAgICBMb2NhbFBheW1lbnQgPSAnbG9jYWxQYXltZW50JyxcbiAgICBQYXlwYWwgPSAncGF5cGFsJyxcbiAgICBQYXlwYWxDaGVja291dCA9ICdwYXlwYWxDaGVja291dCcsXG4gICAgVGhyZWVEU2VjdXJlID0gJ3RocmVlRFNlY3VyZScsXG4gICAgVXNCYW5rQWNjb3VudCA9ICd1c0JhbmtBY2NvdW50JyxcbiAgICBWZW5tbyA9ICd2ZW5tbycsXG4gICAgVmlzYUNoZWNrb3V0ID0gJ3Zpc2FDaGVja291dCcsXG59XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZU1vZHVsZUNyZWF0b3JzID1cbiAgICB8IEJyYWludHJlZUNsaWVudENyZWF0b3JcbiAgICB8IEJyYWludHJlZUZhc3RsYW5lQ3JlYXRvclxuICAgIHwgQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JcbiAgICB8IEJyYWludHJlZUdvb2dsZVBheW1lbnRDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVQYXlwYWxDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVQYXlwYWxDaGVja291dENyZWF0b3JcbiAgICB8IEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3JcbiAgICB8IEJyYWludHJlZVZlbm1vQ2hlY2tvdXRDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvclxuICAgIHwgQnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRvcjtcblxuLy8gVE9ETzogcmVuYW1lIHRvIEJyYWludHJlZVNka01vZHVsZXNcbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlU0RLIHtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5DbGllbnRdPzogQnJhaW50cmVlQ2xpZW50Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5GYXN0bGFuZV0/OiBCcmFpbnRyZWVGYXN0bGFuZUNyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuRGF0YUNvbGxlY3Rvcl0/OiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yQ3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Hb29nbGVQYXltZW50XT86IEJyYWludHJlZUdvb2dsZVBheW1lbnRDcmVhdG9yO1xuICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkhvc3RlZEZpZWxkc10/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yO1xuICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlBheXBhbF0/OiBCcmFpbnRyZWVQYXlwYWxDcmVhdG9yO1xuICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlBheXBhbENoZWNrb3V0XT86IEJyYWludHJlZVBheXBhbENoZWNrb3V0Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5UaHJlZURTZWN1cmVdPzogQnJhaW50cmVlVGhyZWVEU2VjdXJlQ3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5WZW5tb10/OiBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5WaXNhQ2hlY2tvdXRdPzogQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Vc0JhbmtBY2NvdW50XT86IEJyYWludHJlZVVzQmFua0FjY291bnRDcmVhdG9yO1xuICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkxvY2FsUGF5bWVudF0/OiBCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdG9yO1xufVxuXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBCcmFpbnRyZWVMb2NhbFBheW1lbnQsXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRlQ29uZmlnLFxuICAgIEJyYWludHJlZUVycm9yIHwgdW5kZWZpbmVkXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUxvY2FsUGF5bWVudENyZWF0ZUNvbmZpZyBleHRlbmRzIEJyYWludHJlZU1vZHVsZUNyZWF0b3JDb25maWcge1xuICAgIG1lcmNoYW50QWNjb3VudElkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhIHtcbiAgICBjbGllbnRUb2tlbjogc3RyaW5nO1xuICAgIGVuYWJsZUNoZWNrb3V0UGF5d2FsbEJhbm5lcj86IGJvb2xlYW47XG4gICAgaW50ZW50PzogJ2F1dGhvcml6ZScgfCAnb3JkZXInIHwgJ3NhbGUnO1xuICAgIGlzQ3JlZGl0RW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNGYXN0bGFuZVN0eWxpbmdFbmFibGVkPzogYm9vbGVhbjtcbiAgICBpc0Zhc3RsYW5lRW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGZhc3RsYW5lU3R5bGVzPzogRmFzdGxhbmVTdHlsZXNTZXR0aW5ncztcbiAgICBpc0JyYWludHJlZUFuYWx5dGljc1YyRW5hYmxlZD86IGJvb2xlYW47XG4gICAgc2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dD86IGJvb2xlYW47IC8vIFRPRE86IG9ubHkgZm9yIEJUIEFYTyBBL0IgdGVzdGluZyBwdXJwb3NlcywgaGVuY2Ugc2hvdWxkIGJlIHJlbW92ZWQgYWZ0ZXIgdGVzdGluZ1xuICAgIHBheW1lbnRCdXR0b25TdHlsZXM/OiBSZWNvcmQ8c3RyaW5nLCBQYXlwYWxTdHlsZU9wdGlvbnM+O1xuICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uPzogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtW10gfCBudWxsO1xuICAgIG5vbmNlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVBheXBhbFJlcXVlc3Qge1xuICAgIGFtb3VudDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGJpbGxpbmdBZ3JlZW1lbnREZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICBjdXJyZW5jeT86IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZT86IHN0cmluZztcbiAgICBlbmFibGVTaGlwcGluZ0FkZHJlc3M6IHRydWU7XG4gICAgZmxvdzogJ2NoZWNrb3V0JyB8ICd2YXVsdCc7XG4gICAgaW50ZW50PzogJ2F1dGhvcml6ZScgfCAnb3JkZXInIHwgJ3NhbGUnO1xuICAgIGxhbmRpbmdQYWdlVHlwZT86ICdsb2dpbicgfCAnYmlsbGluZyc7XG4gICAgbG9jYWxlPzogc3RyaW5nO1xuICAgIG9mZmVyQ3JlZGl0PzogYm9vbGVhbjtcbiAgICBzaGlwcGluZ0FkZHJlc3NFZGl0YWJsZT86IGJvb2xlYW47XG4gICAgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGU/OiBCcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZTtcbiAgICB1c2VyYWN0aW9uPzogJ2NvbW1pdCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUge1xuICAgIGxpbmUxOiBzdHJpbmc7XG4gICAgbGluZTI/OiBzdHJpbmc7XG4gICAgY2l0eTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gICAgcmVjaXBpZW50TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgdHlwZTogJ1BheXBhbEFjY291bnQnIHwgJ1Zlbm1vQWNjb3VudCc7XG4gICAgZGV0YWlsczogQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscztcbiAgICBjcmVkaXRGaW5hbmNpbmdPZmZlcmVkPzoge1xuICAgICAgICB0b3RhbENvc3Q6IHtcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICAgICAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICB0ZXJtOiBudW1iZXI7XG4gICAgICAgIG1vbnRobHlQYXltZW50OiB7XG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgICAgICAgY3VycmVuY3k6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgdG90YWxJbnN0ZXJlc3Q6IHtcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICAgICAgICBjdXJyZW5jeTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBwYXllckFjY2VwdGFuY2U6IGJvb2xlYW47XG4gICAgICAgIGNhcnRBbW91bnRJbW11dGFibGU6IGJvb2xlYW47XG4gICAgfTtcbn1cblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUVycm9yRGF0YSA9IE9taXQ8QnJhaW50cmVlRm9ybUZpZWxkU3RhdGUsICdpc0ZvY3VzZWQnPjtcblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUVycm9yRGF0YUtleXMgPVxuICAgIHwgJ251bWJlcidcbiAgICB8ICdleHBpcmF0aW9uRGF0ZSdcbiAgICB8ICdleHBpcmF0aW9uTW9udGgnXG4gICAgfCAnZXhwaXJhdGlvblllYXInXG4gICAgfCAnY3Z2J1xuICAgIHwgJ3Bvc3RhbENvZGUnO1xuXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVGb3JtRXJyb3JzRGF0YSA9IFBhcnRpYWw8XG4gICAgUmVjb3JkPEJyYWludHJlZUZvcm1FcnJvckRhdGFLZXlzLCBCcmFpbnRyZWVGb3JtRXJyb3JEYXRhPlxuPjtcblxuLyoqXG4gKlxuICogQnJhaW50cmVlIEhvc3RlZCBGaWVsZHNcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPFxuICAgIEJyYWludHJlZUhvc3RlZEZpZWxkcyxcbiAgICBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkcyB7XG4gICAgZ2V0U3RhdGUoKTogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGU7XG4gICAgdGVhcmRvd24oKTogUHJvbWlzZTx2b2lkPjtcbiAgICB0b2tlbml6ZShcbiAgICAgICAgb3B0aW9ucz86IEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZD47XG4gICAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yQ29uZmlnIGV4dGVuZHMgQnJhaW50cmVlTW9kdWxlQ3JlYXRvckNvbmZpZyB7XG4gICAgZmllbGRzOiB7XG4gICAgICAgIG51bWJlcj86IEJyYWludHJlZUhvc3RlZEZpZWxkT3B0aW9uO1xuICAgICAgICBleHBpcmF0aW9uRGF0ZT86IEJyYWludHJlZUhvc3RlZEZpZWxkT3B0aW9uO1xuICAgICAgICBleHBpcmF0aW9uTW9udGg/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICAgICAgZXhwaXJhdGlvblllYXI/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICAgICAgY3Z2PzogQnJhaW50cmVlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIHBvc3RhbENvZGU/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICAgICAgY2FyZGhvbGRlck5hbWU/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICB9O1xuICAgIHN0eWxlcz86IHtcbiAgICAgICAgaW5wdXQ/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgICAnLmludmFsaWQnPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICAgICAgJy52YWxpZCc/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgICAgICAnOmZvY3VzJz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgfTtcbiAgICBwcmV2ZW50Q3Vyc29ySnVtcHM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkT3B0aW9uIHtcbiAgICBjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50O1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgZm9ybWF0SW5wdXQ/OiBib29sZWFuO1xuICAgIG1hc2tJbnB1dD86IGJvb2xlYW4gfCB7IGNoYXJhY3Rlcj86IHN0cmluZzsgc2hvd0xhc3RGb3VyPzogc3RyaW5nIH07XG4gICAgc2VsZWN0PzogYm9vbGVhbiB8IHsgb3B0aW9ucz86IHN0cmluZ1tdIH07XG4gICAgbWF4Q2FyZExlbmd0aD86IG51bWJlcjtcbiAgICBtYXhsZW5ndGg/OiBudW1iZXI7XG4gICAgbWlubGVuZ3RoPzogbnVtYmVyO1xuICAgIHByZWZpbGw/OiBzdHJpbmc7XG4gICAgcmVqZWN0VW5zdXBwb3J0ZWRDYXJkcz86IGJvb2xlYW47XG4gICAgc3VwcG9ydGVkQ2FyZEJyYW5kcz86IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlIHtcbiAgICBjYXJkczogQnJhaW50cmVlSG9zdGVkRmllbGRzQ2FyZFtdO1xuICAgIGVtaXR0ZWRCeTogc3RyaW5nO1xuICAgIGZpZWxkczoge1xuICAgICAgICBudW1iZXI/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGV4cGlyYXRpb25EYXRlPzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBleHBpcmF0aW9uTW9udGg/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIGV4cGlyYXRpb25ZZWFyPzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBjdnY/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgICAgIHBvc3RhbENvZGU/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNGaWVsZERhdGE7XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDYXJkIHtcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgbmljZVR5cGU6IHN0cmluZztcbiAgICBjb2RlOiB7IG5hbWU6IHN0cmluZzsgc2l6ZTogbnVtYmVyIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhIHtcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICBpc0VtcHR5OiBib29sZWFuO1xuICAgIGlzUG90ZW50aWFsbHlWYWxpZDogYm9vbGVhbjtcbiAgICBpc1ZhbGlkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplT3B0aW9ucyB7XG4gICAgdmF1bHQ/OiBib29sZWFuO1xuICAgIGZpZWxkc1RvVG9rZW5pemU/OiBzdHJpbmdbXTtcbiAgICBjYXJkaG9sZGVyTmFtZT86IHN0cmluZztcbiAgICBiaWxsaW5nQWRkcmVzcz86IEJyYWludHJlZUJpbGxpbmdBZGRyZXNzUmVxdWVzdERhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlQmlsbGluZ0FkZHJlc3NSZXF1ZXN0RGF0YSB7XG4gICAgcG9zdGFsQ29kZT86IHN0cmluZztcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgY29tcGFueT86IHN0cmluZztcbiAgICBzdHJlZXRBZGRyZXNzPzogc3RyaW5nO1xuICAgIGV4dGVuZGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhbGl0eT86IHN0cmluZztcbiAgICByZWdpb24/OiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGVOdW1lcmljPzogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlQWxwaGEyPzogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlQWxwaGEzPzogc3RyaW5nO1xuICAgIGNvdW50cnlOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZvcm1FcnJvciBleHRlbmRzIEJyYWludHJlZUVycm9yIHtcbiAgICBkZXRhaWxzPzoge1xuICAgICAgICBpbnZhbGlkRmllbGRLZXlzPzogc3RyaW5nW107XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRTdGF0ZSB7XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIGlzRW1wdHk6IGJvb2xlYW47XG4gICAgaXNQb3RlbnRpYWxseVZhbGlkOiBib29sZWFuO1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5pemF0aW9uUGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBiaW46IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogQnJhaW50cmVlIFBheVBhbFxuICpcbiAqL1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlUGF5cGFsQ3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8QnJhaW50cmVlUGF5cGFsPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVQYXlwYWwge1xuICAgIGNsb3NlV2luZG93KCk6IHZvaWQ7XG4gICAgZm9jdXNXaW5kb3coKTogdm9pZDtcbiAgICB0b2tlbml6ZShvcHRpb25zOiBCcmFpbnRyZWVQYXlwYWxSZXF1ZXN0KTogUHJvbWlzZTxCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQ+O1xuICAgIEJ1dHRvbnM/KG9wdGlvbnM6IFBheXBhbEJ1dHRvbk9wdGlvbnMpOiBQYXlwYWxCdXR0b25SZW5kZXI7XG59XG5cbi8qKlxuICogQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGFyZSByZXF1aXJlZCB0byBzdXBwb3J0IDNEIFNlY3VyZSBhdXRoZW50aWNhdGlvbiBmbG93LlxuICpcbiAqIElmIHRoZSBjdXN0b21lciB1c2VzIGEgY3JlZGl0IGNhcmQgdGhhdCBoYXMgM0QgU2VjdXJlIGVuYWJsZWQsIHRoZXkgd2lsbCBiZVxuICogYXNrZWQgdG8gdmVyaWZ5IHRoZWlyIGlkZW50aXR5IHdoZW4gdGhleSBwYXkuIFRoZSB2ZXJpZmljYXRpb24gaXMgZG9uZVxuICogdGhyb3VnaCBhIHdlYiBwYWdlIHZpYSBhbiBpZnJhbWUgcHJvdmlkZWQgYnkgdGhlIGNhcmQgaXNzdWVyLlxuICovXG4vLyBleHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnMge1xuLy8gICAgIC8qKlxuLy8gICAgICAqIEEgY2FsbGJhY2sgdGhhdCBnZXRzIGNhbGxlZCB3aGVuIHRoZSBpZnJhbWUgaXMgcmVhZHkgdG8gYmUgYWRkZWQgdG8gdGhlXG4vLyAgICAgICogY3VycmVudCBwYWdlLiBJdCBpcyByZXNwb25zaWJsZSBmb3IgZGV0ZXJtaW5pbmcgd2hlcmUgdGhlIGlmcmFtZSBzaG91bGRcbi8vICAgICAgKiBiZSBpbnNlcnRlZCBpbiB0aGUgRE9NLlxuLy8gICAgICAqXG4vLyAgICAgICogQHBhcmFtIGVycm9yIC0gQW55IGVycm9yIHJhaXNlZCBkdXJpbmcgdGhlIHZlcmlmaWNhdGlvbiBwcm9jZXNzO1xuLy8gICAgICAqIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBub25lLlxuLy8gICAgICAqIEBwYXJhbSBpZnJhbWUgLSBUaGUgaWZyYW1lIGVsZW1lbnQgY29udGFpbmluZyB0aGUgdmVyaWZpY2F0aW9uIHdlYiBwYWdlXG4vLyAgICAgICogcHJvdmlkZWQgYnkgdGhlIGNhcmQgaXNzdWVyLlxuLy8gICAgICAqIEBwYXJhbSBjYW5jZWwgLSBBIGZ1bmN0aW9uLCB3aGVuIGNhbGxlZCwgd2lsbCBjYW5jZWwgdGhlIHZlcmlmaWNhdGlvblxuLy8gICAgICAqIHByb2Nlc3MgYW5kIHJlbW92ZSB0aGUgaWZyYW1lLlxuLy8gICAgICAqL1xuLy8gICAgIGFkZEZyYW1lKFxuLy8gICAgICAgICBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQsXG4vLyAgICAgICAgIGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsXG4vLyAgICAgICAgIGNhbmNlbDogKCkgPT4gUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPiB8IHVuZGVmaW5lZCxcbi8vICAgICApOiB2b2lkO1xuLy9cbi8vICAgICAvKipcbi8vICAgICAgKiBBIGNhbGxiYWNrIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgaWZyYW1lIGlzIGFib3V0IHRvIGJlIHJlbW92ZWQgZnJvbVxuLy8gICAgICAqIHRoZSBjdXJyZW50IHBhZ2UuXG4vLyAgICAgICovXG4vLyAgICAgcmVtb3ZlRnJhbWUoKTogdm9pZDtcbi8vIH1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtT3B0aW9ucyB7XG4gICAgZmllbGRzOiBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHwgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcDtcbiAgICBzdHlsZXM/OiBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXNNYXA7XG4gICAgb25CbHVyPyhkYXRhOiBCcmFpbnRyZWVGb3JtRmllbGRCbHVyRXZlbnREYXRhKTogdm9pZDtcbiAgICBvbkNhcmRUeXBlQ2hhbmdlPyhkYXRhOiBCcmFpbnRyZWVGb3JtRmllbGRDYXJkVHlwZUNoYW5nZUV2ZW50RGF0YSk6IHZvaWQ7XG4gICAgb25Gb2N1cz8oZGF0YTogQnJhaW50cmVlRm9ybUZpZWxkRm9jdXNFdmVudERhdGEpOiB2b2lkO1xuICAgIG9uVmFsaWRhdGU/KGRhdGE6IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXZlbnREYXRhKTogdm9pZDtcbiAgICBvbkVudGVyPyhkYXRhOiBCcmFpbnRyZWVGb3JtRmllbGRFbnRlckV2ZW50RGF0YSk6IHZvaWQ7XG59XG5cbmV4cG9ydCBlbnVtIEJyYWludHJlZUZvcm1GaWVsZFR5cGUge1xuICAgIENhcmRDb2RlID0gJ2NhcmRDb2RlJyxcbiAgICBDYXJkQ29kZVZlcmlmaWNhdGlvbiA9ICdjYXJkQ29kZVZlcmlmaWNhdGlvbicsXG4gICAgQ2FyZEV4cGlyeSA9ICdjYXJkRXhwaXJ5JyxcbiAgICBDYXJkTmFtZSA9ICdjYXJkTmFtZScsXG4gICAgQ2FyZE51bWJlciA9ICdjYXJkTnVtYmVyJyxcbiAgICBDYXJkTnVtYmVyVmVyaWZpY2F0aW9uID0gJ2NhcmROdW1iZXJWZXJpZmljYXRpb24nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZvcm1GaWVsZHNNYXAge1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRDb2RlXT86IEJyYWludHJlZUZvcm1GaWVsZE9wdGlvbnM7XG4gICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZEV4cGlyeV06IEJyYWludHJlZUZvcm1GaWVsZE9wdGlvbnM7XG4gICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE5hbWVdOiBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zO1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdOiBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAge1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRDb2RlVmVyaWZpY2F0aW9uXT86IEJyYWludHJlZVN0b3JlZENhcmRGaWVsZE9wdGlvbnM7XG4gICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvbl0/OiBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZvcm1GaWVsZE9wdGlvbnMge1xuICAgIGFjY2Vzc2liaWxpdHlMYWJlbD86IHN0cmluZztcbiAgICBjb250YWluZXJJZDogc3RyaW5nO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZE9wdGlvbnMgZXh0ZW5kcyBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zIHtcbiAgICBpbnN0cnVtZW50SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXNNYXAge1xuICAgIGRlZmF1bHQ/OiBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXM7XG4gICAgZXJyb3I/OiBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXM7XG4gICAgZm9jdXM/OiBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXM7XG59XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZUZvcm1GaWVsZFN0eWxlcyA9IFBhcnRpYWw8XG4gICAgUGljazxDU1NTdHlsZURlY2xhcmF0aW9uLCAnY29sb3InIHwgJ2ZvbnRGYW1pbHknIHwgJ2ZvbnRTaXplJyB8ICdmb250V2VpZ2h0Jz5cbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkS2V5Ym9hcmRFdmVudERhdGEge1xuICAgIGZpZWxkVHlwZTogc3RyaW5nO1xuICAgIGVycm9ycz86IEJyYWludHJlZUZvcm1FcnJvcnNEYXRhO1xufVxuXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVGb3JtRmllbGRCbHVyRXZlbnREYXRhID0gQnJhaW50cmVlRm9ybUZpZWxkS2V5Ym9hcmRFdmVudERhdGE7XG5leHBvcnQgdHlwZSBCcmFpbnRyZWVGb3JtRmllbGRFbnRlckV2ZW50RGF0YSA9IEJyYWludHJlZUZvcm1GaWVsZEtleWJvYXJkRXZlbnREYXRhO1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUZpZWxkRm9jdXNFdmVudERhdGEgPSBCcmFpbnRyZWVGb3JtRmllbGRLZXlib2FyZEV2ZW50RGF0YTtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRDYXJkVHlwZUNoYW5nZUV2ZW50RGF0YSB7XG4gICAgY2FyZFR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFdmVudERhdGEge1xuICAgIGVycm9yczoge1xuICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV0/OiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YVtdO1xuICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkRXhwaXJ5XT86IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhW107XG4gICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXT86IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhW107XG4gICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdPzogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGFbXTtcbiAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25dPzogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGFbXTtcbiAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvbl0/OiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YVtdO1xuICAgIH07XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YSB7XG4gICAgZmllbGRUeXBlOiBzdHJpbmc7XG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogQnJhaW50cmVlIFBheVBhbCBDaGVja291dFxuICpcbiAqL1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXRDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxCcmFpbnRyZWVQYXlwYWxDaGVja291dD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQge1xuICAgIGxvYWRQYXlQYWxTREsoXG4gICAgICAgIGNvbmZpZzogQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICAgICAgY2FsbGJhY2s6IChpbnN0YW5jZTogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQpID0+IHZvaWQsXG4gICAgKTogdm9pZDtcbiAgICBjcmVhdGVQYXltZW50KG9wdGlvbnM6IEJyYWludHJlZVBheXBhbFJlcXVlc3QpOiBQcm9taXNlPHN0cmluZz47XG4gICAgdGVhcmRvd24oKTogUHJvbWlzZTx2b2lkPjtcbiAgICB0b2tlbml6ZVBheW1lbnQob3B0aW9uczogUGF5cGFsQXV0aG9yaXplRGF0YSk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnIHtcbiAgICBjb21wb25lbnRzPzogc3RyaW5nO1xuICAgIGN1cnJlbmN5Pzogc3RyaW5nO1xuICAgIGludGVudD86IHN0cmluZztcbiAgICBpc0NyZWRpdEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGNvbW1pdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBWZW5tb1xuICpcbiAqL1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlVmVubW9DaGVja291dENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPFxuICAgIEJyYWludHJlZVZlbm1vQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlVmVubW9DcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVZlbm1vQ2hlY2tvdXQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIHRva2VuaXplKGNhbGxiYWNrOiAoZXJyb3I6IEJyYWludHJlZUVycm9yLCBwYXlsb2FkOiBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQpID0+IHVua25vd24pOiB2b2lkO1xuICAgIGlzQnJvd3NlclN1cHBvcnRlZCgpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVZlbm1vQ3JlYXRvckNvbmZpZyBleHRlbmRzIEJyYWludHJlZU1vZHVsZUNyZWF0b3JDb25maWcge1xuICAgIGFsbG93RGVza3RvcD86IGJvb2xlYW47XG4gICAgcGF5bWVudE1ldGhvZFVzYWdlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgVmlzYSBDaGVja291dFxuICpcbiAqL1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8QnJhaW50cmVlVmlzYUNoZWNrb3V0PjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVWaXNhQ2hlY2tvdXQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIHRva2VuaXplKHBheW1lbnQ6IFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCk6IFByb21pc2U8VmlzYUNoZWNrb3V0VG9rZW5pemVkUGF5bG9hZD47XG4gICAgY3JlYXRlSW5pdE9wdGlvbnMob3B0aW9uczogUGFydGlhbDxWaXNhQ2hlY2tvdXRJbml0T3B0aW9ucz4pOiBWaXNhQ2hlY2tvdXRJbml0T3B0aW9ucztcbn1cblxuLyoqXG4gKlxuICogQnJhaW50cmVlIEJOUEwgQ29uZmlndXJhdG9yIHJlbGF0ZWQgdHlwZXNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGF0dXM6IGJvb2xlYW47XG4gICAgc3R5bGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgTG9jYWwgTWV0aG9kc1xuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcge1xuICAgIHBheW1lbnRUeXBlOiBzdHJpbmc7XG4gICAgYW1vdW50OiBudW1iZXI7XG4gICAgZmFsbGJhY2s6IHtcbiAgICAgICAgdXJsOiBzdHJpbmc7XG4gICAgICAgIGJ1dHRvblRleHQ6IHN0cmluZztcbiAgICB9O1xuICAgIGN1cnJlbmN5Q29kZTogc3RyaW5nO1xuICAgIHNoaXBwaW5nQWRkcmVzc1JlcXVpcmVkOiBib29sZWFuO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgZ2l2ZW5OYW1lOiBzdHJpbmc7XG4gICAgc3VybmFtZTogc3RyaW5nO1xuICAgIGFkZHJlc3M6IHtcbiAgICAgICAgY291bnRyeUNvZGU6IHN0cmluZztcbiAgICB9O1xuICAgIG9uUGF5bWVudFN0YXJ0KGRhdGE6IEJyYWludHJlZUxQTVBheW1lbnRTdGFydERhdGEsIHN0YXJ0OiAoKSA9PiBQcm9taXNlPHZvaWQ+KTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMUE1TdGFydFBheW1lbnRFcnJvciB7XG4gICAgY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUxQTVBheW1lbnRTdGFydERhdGEge1xuICAgIHBheW1lbnRJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUxvY2FsUGF5bWVudHNQYXlsb2FkIHtcbiAgICBub25jZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUxvY2FsUGF5bWVudCBleHRlbmRzIEJyYWludHJlZU1vZHVsZSB7XG4gICAgc3RhcnRQYXltZW50KFxuICAgICAgICBjb25maWc6IEJyYWludHJlZUxvY2FsUGF5bWVudENvbmZpZyxcbiAgICAgICAgY2FsbGJhY2s6IChcbiAgICAgICAgICAgIHN0YXJ0UGF5bWVudEVycm9yOiBCcmFpbnRyZWVMUE1TdGFydFBheW1lbnRFcnJvciB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHBheWxvYWQ6IEJyYWludHJlZUxvY2FsUGF5bWVudHNQYXlsb2FkLFxuICAgICAgICApID0+IFByb21pc2U8dm9pZD4sXG4gICAgKTogdm9pZDtcbn1cblxuLyoqXG4gKlxuICogT3RoZXJcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlSG9zdFdpbmRvdyBleHRlbmRzIEJyYWludHJlZVdpbmRvdyB7XG4gICAgYnJhaW50cmVlPzogQnJhaW50cmVlU0RLO1xuICAgIHBheXBhbD86IFBheXBhbFNESztcbiAgICBWPzogVmlzYUNoZWNrb3V0U0RLO1xufVxuIiwiaW1wb3J0IHsgQnJhaW50cmVlRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQnJhaW50cmVlRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBCcmFpbnRyZWVFcnJvciB7XG4gICAgcmV0dXJuIEJvb2xlYW4oXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGVycm9yICE9PSBudWxsICYmXG4gICAgICAgICAgICAoJ3R5cGUnIGluIGVycm9yIHx8ICdtZXNzYWdlJyBpbiBlcnJvciB8fCAnY29kZScgaW4gZXJyb3IpLFxuICAgICk7XG59XG4iLCJpbXBvcnQgeyBzdXBwb3J0c1BvcHVwcyB9IGZyb20gJ0BicmFpbnRyZWUvYnJvd3Nlci1kZXRlY3Rpb24nO1xuXG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgQ2FuY2VsbGFibGVQcm9taXNlLFxuICAgIENyZWRpdENhcmRJbnN0cnVtZW50LFxuICAgIExlZ2FjeUFkZHJlc3MsXG4gICAgTm9uY2VJbnN0cnVtZW50LFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3IsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUsXG4gICAgUGF5bWVudCxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEludmFsaWRGb3JtRXJyb3IsXG4gICAgUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzLFxuICAgIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcixcbiAgICBVbnN1cHBvcnRlZEJyb3dzZXJFcnJvcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBPdmVybGF5IH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay91aSc7XG5cbmltcG9ydCBCcmFpbnRyZWVTY3JpcHRMb2FkZXIgZnJvbSAnLi9icmFpbnRyZWUtc2NyaXB0LWxvYWRlcic7XG5pbXBvcnQge1xuICAgIEJyYWludHJlZUNsaWVudCxcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3JzLFxuICAgIEJyYWludHJlZUVudixcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVGYXN0bGFuZSxcbiAgICBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbixcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZU1vZHVsZSxcbiAgICBCcmFpbnRyZWVQYXlwYWwsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVSZXF1ZXN0RGF0YSxcbiAgICBCcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICBCcmFpbnRyZWVUaHJlZURTZWN1cmUsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucyxcbiAgICBCcmFpbnRyZWVUb2tlbml6YXRpb25EZXRhaWxzLFxuICAgIEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0LFxuICAgIEJyYWludHJlZVZlbm1vQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVWZXJpZnlQYXlsb2FkLFxuICAgIFBBWVBBTF9DT01QT05FTlRTLFxuICAgIFRva2VuaXphdGlvblBheWxvYWQsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGlzQnJhaW50cmVlRXJyb3IgZnJvbSAnLi91dGlscy9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IHsgaXNFbXB0eSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgaXNDcmVkaXRDYXJkSW5zdHJ1bWVudExpa2UgZnJvbSAnLi91dGlscy9pcy1jcmVkaXQtY2FyZC1pbnN0cnVtZW50LWxpa2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbENvbmZpZyB7XG4gICAgYW1vdW50OiBudW1iZXI7XG4gICAgY3VycmVuY3k6IHN0cmluZztcbiAgICBsb2NhbGU6IHN0cmluZztcbiAgICBvZmZlckNyZWRpdD86IGJvb2xlYW47XG4gICAgc2hpcHBpbmdBZGRyZXNzRWRpdGFibGU/OiBib29sZWFuO1xuICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlPzogQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGU7XG4gICAgc2hvdWxkU2F2ZUluc3RydW1lbnQ/OiBib29sZWFuO1xufVxuXG4vLyBJbmZvOiB0aGlzIGNsYXNzIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIG5lYXJlc3QgZnV0dXJlLiBQbGVhc2UsIGRvIG5vdCBhZGQgYW55dGhpbmcgaGVyZS5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjbGllbnQ/OiBQcm9taXNlPEJyYWludHJlZUNsaWVudD47XG4gICAgcHJpdmF0ZSBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBwcml2YXRlIGRhdGFDb2xsZWN0b3JzOiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9ycyA9IHt9O1xuICAgIHByaXZhdGUgcGF5cGFsQ2hlY2tvdXQ/OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dDtcbiAgICBwcml2YXRlIGJyYWludHJlZVBheXBhbD86IFByb21pc2U8QnJhaW50cmVlUGF5cGFsPjtcbiAgICBwcml2YXRlIHRocmVlRFNlY3VyZU9wdGlvbnM/OiBCcmFpbnRyZWVUaHJlZURTZWN1cmVPcHRpb25zO1xuICAgIHByaXZhdGUgdGhyZWVEUz86IFByb21pc2U8QnJhaW50cmVlVGhyZWVEU2VjdXJlPjtcbiAgICBwcml2YXRlIHZlbm1vQ2hlY2tvdXQ/OiBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlU2NyaXB0TG9hZGVyOiBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgcHJpdmF0ZSBvdmVybGF5PzogT3ZlcmxheSxcbiAgICApIHt9XG5cbiAgICBpbml0aWFsaXplKGNsaWVudFRva2VuOiBzdHJpbmcsIHRocmVlRFNlY3VyZU9wdGlvbnM/OiBCcmFpbnRyZWVUaHJlZURTZWN1cmVPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY2xpZW50VG9rZW4gPSBjbGllbnRUb2tlbjtcbiAgICAgICAgdGhpcy50aHJlZURTZWN1cmVPcHRpb25zID0gdGhyZWVEU2VjdXJlT3B0aW9ucztcbiAgICB9XG5cbiAgICBhc3luYyBnZXRCcmFpbnRyZWVGYXN0bGFuZShcbiAgICAgICAgY2FyZElkPzogc3RyaW5nLFxuICAgICAgICBpc1Rlc3RNb2RlRW5hYmxlZD86IGJvb2xlYW4sXG4gICAgICAgIHN0eWxlcz86IEJyYWludHJlZUZhc3RsYW5lU3R5bGVzT3B0aW9uLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlRmFzdGxhbmU+IHtcbiAgICAgICAgaWYgKGlzVGVzdE1vZGVFbmFibGVkKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2F4b0VudicsICdzYW5kYm94Jyk7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2Zhc3RsYW5lRW52JywgJ3NhbmRib3gnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVIb3N0V2luZG93LmJyYWludHJlZUZhc3RsYW5lKSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRUb2tlbiA9IHRoaXMuZ2V0Q2xpZW50VG9rZW5PclRocm93KCk7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgZGV2aWNlRGF0YSA9IGF3YWl0IHRoaXMuZ2V0U2Vzc2lvbklkKGNhcmRJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJyYWludHJlZUZhc3RsYW5lQ3JlYXRvciA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRGYXN0bGFuZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0U3R5bGVzID0ge1xuICAgICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yUHJpbWFyeTogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVIb3N0V2luZG93LmJyYWludHJlZUZhc3RsYW5lID0gYXdhaXQgYnJhaW50cmVlRmFzdGxhbmVDcmVhdG9yLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogY2xpZW50VG9rZW4sXG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMgfHwgZGVmYXVsdFN0eWxlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5icmFpbnRyZWVGYXN0bGFuZTtcbiAgICB9XG5cbiAgICAvLyBJbmZvOiBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkLiBVc2UgZ2V0Q2xpZW50IG1ldGhvZCBmcm9tIEJyYWludHJlZVNkayBjbGFzcyBpbnN0ZWFkXG4gICAgYXN5bmMgZ2V0Q2xpZW50KCk6IFByb21pc2U8QnJhaW50cmVlQ2xpZW50PiB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudFRva2VuID0gdGhpcy5nZXRDbGllbnRUb2tlbk9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudENyZWF0b3IgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkQ2xpZW50KCk7XG5cbiAgICAgICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50Q3JlYXRvci5jcmVhdGUoeyBhdXRob3JpemF0aW9uOiBjbGllbnRUb2tlbiB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudDtcbiAgICB9XG5cbiAgICBnZXRQYXlwYWwoKTogUHJvbWlzZTxCcmFpbnRyZWVQYXlwYWw+IHtcbiAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZVBheXBhbCkge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVQYXlwYWwgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDbGllbnQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkUGF5cGFsKCksXG4gICAgICAgICAgICBdKS50aGVuKChbY2xpZW50LCBwYXlwYWxdKSA9PiBwYXlwYWwuY3JlYXRlKHsgY2xpZW50IH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZVBheXBhbDtcbiAgICB9XG5cbiAgICBwYXlwYWwoeyBzaG91bGRTYXZlSW5zdHJ1bWVudCwgLi4uY29uZmlnIH06IFBheXBhbENvbmZpZyk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPiB7XG4gICAgICAgIGNvbnN0IG5ld1dpbmRvd0Zsb3cgPSBzdXBwb3J0c1BvcHVwcygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldFBheXBhbCgpXG4gICAgICAgICAgICAudGhlbigocGF5cGFsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1dpbmRvd0Zsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5Py5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHBheXBhbC5mb2N1c1dpbmRvdygpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGF5cGFsLnRva2VuaXplKHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmbG93OiBzaG91bGRTYXZlSW5zdHJ1bWVudCA/ICd2YXVsdCcgOiAnY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgICAgICB1c2VyYWN0aW9uOiAnY29tbWl0JyxcbiAgICAgICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheT8ucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheT8ucmVtb3ZlKCk7XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBheXBhbENoZWNrb3V0KFxuICAgICAgICBjb25maWc6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4sXG4gICAgICAgIG9uU3VjY2VzczogKGluc3RhbmNlOiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCkgPT4gdm9pZCxcbiAgICAgICAgb25FcnJvcjogKGVycm9yOiBCcmFpbnRyZWVFcnJvcikgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVBheXBhbENoZWNrb3V0PiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZFBheXBhbENoZWNrb3V0KCk7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRDb25maWcgPSB7IGNsaWVudCB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dENhbGxiYWNrID0gKFxuICAgICAgICAgICAgZXJyb3I6IEJyYWludHJlZUVycm9yIHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsU2RrTG9hZENhbGxiYWNrID0gKCkgPT4gb25TdWNjZXNzKGJyYWludHJlZVBheXBhbENoZWNrb3V0KTtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbFNka0xvYWRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGNvbmZpZy5jdXJyZW5jeSxcbiAgICAgICAgICAgICAgICAuLi4oY29uZmlnLmlzQ3JlZGl0RW5hYmxlZCAmJiB7ICdlbmFibGUtZnVuZGluZyc6ICdwYXlsYXRlcicgfSksXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogUEFZUEFMX0NPTVBPTkVOVFMudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IGNvbmZpZy5pbnRlbnQsXG4gICAgICAgICAgICAgICAgY29tbWl0OiBjb25maWcuY29tbWl0ID8/IHRydWUsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5wYXlwYWwpIHtcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dC5sb2FkUGF5UGFsU0RLKHBheXBhbFNka0xvYWRDb25maWcsIHBheXBhbFNka0xvYWRDYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhicmFpbnRyZWVQYXlwYWxDaGVja291dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wYXlwYWxDaGVja291dCA9IGF3YWl0IHBheXBhbENoZWNrb3V0LmNyZWF0ZShcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0Q29uZmlnLFxuICAgICAgICAgICAgcGF5cGFsQ2hlY2tvdXRDYWxsYmFjayxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wYXlwYWxDaGVja291dDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXREYXRhQ29sbGVjdG9yKFxuICAgICAgICBvcHRpb25zPzogUGFydGlhbDxCcmFpbnRyZWVEYXRhQ29sbGVjdG9yQ3JlYXRvckNvbmZpZz4sXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVEYXRhQ29sbGVjdG9yPiB7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5OiBrZXlvZiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9ycyA9IG9wdGlvbnM/LnBheXBhbCA/ICdwYXlwYWwnIDogJ2RlZmF1bHQnO1xuXG4gICAgICAgIGxldCBjYWNoZWQgPSB0aGlzLmRhdGFDb2xsZWN0b3JzW2NhY2hlS2V5XTtcblxuICAgICAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDb2xsZWN0b3IgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkRGF0YUNvbGxlY3RvcigpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YUNvbGxlY3RvckNvbmZpZzogQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICAgICAga291bnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNhY2hlZCA9IGF3YWl0IGRhdGFDb2xsZWN0b3IuY3JlYXRlKGRhdGFDb2xsZWN0b3JDb25maWcpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgJiYgZXJyb3IuY29kZSA9PT0gJ0RBVEFfQ09MTEVDVE9SX0tPVU5UX05PVF9FTkFCTEVEJykge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VEYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmRhdGFDb2xsZWN0b3JzW2NhY2hlS2V5XSA9IGNhY2hlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuXG4gICAgZ2V0QnJhaW50cmVlRW52KGlzVGVzdE1vZGUgPSBmYWxzZSk6IEJyYWludHJlZUVudiB7XG4gICAgICAgIHJldHVybiBpc1Rlc3RNb2RlID8gQnJhaW50cmVlRW52LlNhbmRib3ggOiBCcmFpbnRyZWVFbnYuUHJvZHVjdGlvbjtcbiAgICB9XG5cbiAgICBtYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlKGFkZHJlc3M6IEFkZHJlc3MpOiBCcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWNpcGllbnROYW1lOiBgJHthZGRyZXNzLmZpcnN0TmFtZX0gJHthZGRyZXNzLmxhc3ROYW1lfWAsXG4gICAgICAgICAgICBsaW5lMTogYWRkcmVzcy5hZGRyZXNzMSxcbiAgICAgICAgICAgIGxpbmUyOiBhZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgY2l0eTogYWRkcmVzcy5jaXR5LFxuICAgICAgICAgICAgc3RhdGU6IGFkZHJlc3Muc3RhdGVPclByb3ZpbmNlQ29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgICAgIGNvdW50cnlDb2RlOiBhZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcGhvbmU6IGFkZHJlc3MucGhvbmUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlsczogQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyk6IFBhcnRpYWw8TGVnYWN5QWRkcmVzcz4ge1xuICAgICAgICBjb25zdCB7IGVtYWlsLCBwaG9uZSwgc2hpcHBpbmdBZGRyZXNzIH0gPSBkZXRhaWxzO1xuICAgICAgICBjb25zdCByZWNpcGllbnROYW1lID0gc2hpcHBpbmdBZGRyZXNzPy5yZWNpcGllbnROYW1lIHx8ICcnO1xuICAgICAgICBjb25zdCBbZmlyc3ROYW1lLCBsYXN0TmFtZV0gPSByZWNpcGllbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiBsYXN0TmFtZSB8fCAnJyxcbiAgICAgICAgICAgIHBob25lX251bWJlcjogcGhvbmUsXG4gICAgICAgICAgICBhZGRyZXNzX2xpbmVfMTogc2hpcHBpbmdBZGRyZXNzPy5saW5lMSxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBzaGlwcGluZ0FkZHJlc3M/LmxpbmUyLFxuICAgICAgICAgICAgY2l0eTogc2hpcHBpbmdBZGRyZXNzPy5jaXR5LFxuICAgICAgICAgICAgc3RhdGU6IHNoaXBwaW5nQWRkcmVzcz8uc3RhdGUsXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IHNoaXBwaW5nQWRkcmVzcz8uY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogc2hpcHBpbmdBZGRyZXNzPy5wb3N0YWxDb2RlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG1hcFRvTGVnYWN5QmlsbGluZ0FkZHJlc3MoZGV0YWlsczogQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyk6IFBhcnRpYWw8TGVnYWN5QWRkcmVzcz4ge1xuICAgICAgICBjb25zdCB7IGJpbGxpbmdBZGRyZXNzLCBlbWFpbCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgcGhvbmUsIHNoaXBwaW5nQWRkcmVzcyB9ID0gZGV0YWlscztcblxuICAgICAgICBjb25zdCBhZGRyZXNzID0gYmlsbGluZ0FkZHJlc3MgfHwgc2hpcHBpbmdBZGRyZXNzO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogbGFzdE5hbWUsXG4gICAgICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IGFkZHJlc3M/LmxpbmUxLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzI6IGFkZHJlc3M/LmxpbmUyLFxuICAgICAgICAgICAgY2l0eTogYWRkcmVzcz8uY2l0eSxcbiAgICAgICAgICAgIHN0YXRlOiBhZGRyZXNzPy5zdGF0ZSxcbiAgICAgICAgICAgIGNvdW50cnlfY29kZTogYWRkcmVzcz8uY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW1vdmVFbGVtZW50KGVsZW1lbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRTZXNzaW9uSWQoY2FydElkPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBhd2FpdCB0aGlzLmdldERhdGFDb2xsZWN0b3Ioe1xuICAgICAgICAgICAgcmlza0NvcnJlbGF0aW9uSWQ6IGNhcnRJZCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGRldmljZURhdGE7XG4gICAgfVxuXG4gICAgYXN5bmMgdGVhcmRvd24oKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMudGVhcmRvd25Nb2R1bGUodGhpcy5kYXRhQ29sbGVjdG9ycy5kZWZhdWx0KTtcbiAgICAgICAgYXdhaXQgdGhpcy50ZWFyZG93bk1vZHVsZSh0aGlzLmRhdGFDb2xsZWN0b3JzLnBheXBhbCk7XG4gICAgICAgIHRoaXMuZGF0YUNvbGxlY3RvcnMgPSB7fTtcblxuICAgICAgICBhd2FpdCB0aGlzLnRlYXJkb3duTW9kdWxlKHRoaXMucGF5cGFsQ2hlY2tvdXQpO1xuICAgICAgICB0aGlzLnBheXBhbENoZWNrb3V0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIGF3YWl0IHRoaXMudGVhcmRvd25Nb2R1bGUodGhpcy5fdmVubW9DaGVja291dCk7XG4gICAgICAgIC8vIHRoaXMuX3Zlbm1vQ2hlY2tvdXQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gYXdhaXQgdGhpcy50ZWFyZG93bk1vZHVsZSh0aGlzLl92aXNhQ2hlY2tvdXQpO1xuICAgICAgICAvLyB0aGlzLl92aXNhQ2hlY2tvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0M0RTKCk6IFByb21pc2U8QnJhaW50cmVlVGhyZWVEU2VjdXJlPiB7XG4gICAgICAgIGlmICghdGhpcy50aHJlZURTKSB7XG4gICAgICAgICAgICB0aGlzLnRocmVlRFMgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDbGllbnQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkM0RTKCksXG4gICAgICAgICAgICBdKS50aGVuKChbY2xpZW50LCB0aHJlZURTZWN1cmVdKSA9PiB0aHJlZURTZWN1cmUuY3JlYXRlKHsgY2xpZW50LCB2ZXJzaW9uOiAyIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnRocmVlRFM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VmVubW9DaGVja291dChcbiAgICAgICAgdmVubW9Db25maWc/OiBCcmFpbnRyZWVWZW5tb0NyZWF0b3JDb25maWcsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVWZW5tb0NoZWNrb3V0PiB7XG4gICAgICAgIGlmICghdGhpcy52ZW5tb0NoZWNrb3V0KSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgdmVubW9DaGVja291dCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRWZW5tb0NoZWNrb3V0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHZlbm1vQ2hlY2tvdXRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIGFsbG93RGVza3RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kVXNhZ2U6ICdtdWx0aV91c2UnLFxuICAgICAgICAgICAgICAgIC4uLih2ZW5tb0NvbmZpZyB8fCB7fSksXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnZlbm1vQ2hlY2tvdXQgPSBhd2FpdCBuZXcgUHJvbWlzZTxCcmFpbnRyZWVWZW5tb0NoZWNrb3V0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgICAgICAgICAgIHZlbm1vQ2hlY2tvdXQuY3JlYXRlKFxuICAgICAgICAgICAgICAgICAgICB2ZW5tb0NoZWNrb3V0Q29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAoZXJyb3I6IEJyYWludHJlZUVycm9yLCBicmFpbnRyZWVWZW5tb0NoZWNrb3V0OiBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYnJhaW50cmVlVmVubW9DaGVja291dC5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IFVuc3VwcG9ydGVkQnJvd3NlckVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGJyYWludHJlZVZlbm1vQ2hlY2tvdXQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnZlbm1vQ2hlY2tvdXQ7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICBCcmFpbnRyZWUgQ3JlZGl0IENhcmQgYW5kIEJyYWludHJlZSBIb3N0ZWQgRm9ybVxuICAgKi9cbiAgICBhc3luYyB2ZXJpZnlDYXJkKFxuICAgICAgICBwYXltZW50OiBQYXltZW50LFxuICAgICAgICBiaWxsaW5nQWRkcmVzczogQWRkcmVzcyxcbiAgICAgICAgYW1vdW50OiBudW1iZXIsXG4gICAgKTogUHJvbWlzZTxOb25jZUluc3RydW1lbnQ+IHtcbiAgICAgICAgY29uc3QgdG9rZW5pemF0aW9uUGF5bG9hZCA9IGF3YWl0IHRoaXMudG9rZW5pemVDYXJkKHBheW1lbnQsIGJpbGxpbmdBZGRyZXNzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jaGFsbGVuZ2UzRFNWZXJpZmljYXRpb24odG9rZW5pemF0aW9uUGF5bG9hZCwgYW1vdW50KTtcbiAgICB9XG5cbiAgICBhc3luYyB0b2tlbml6ZUNhcmQocGF5bWVudDogUGF5bWVudCwgYmlsbGluZ0FkZHJlc3M6IEFkZHJlc3MpOiBQcm9taXNlPFRva2VuaXphdGlvblBheWxvYWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50RGF0YSB9ID0gcGF5bWVudDtcblxuICAgICAgICBpZiAoIWlzQ3JlZGl0Q2FyZEluc3RydW1lbnRMaWtlKHBheW1lbnREYXRhKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQucGF5bWVudERhdGEnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLmdldEVycm9yc1JlcXVpcmVkRmllbGRzKHBheW1lbnREYXRhKTtcblxuICAgICAgICBpZiAoIWlzRW1wdHkoZXJyb3JzKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXF1ZXN0RGF0YSA9IHRoaXMubWFwVG9DcmVkaXRDYXJkKHBheW1lbnREYXRhLCBiaWxsaW5nQWRkcmVzcyk7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGNvbnN0IHsgY3JlZGl0Q2FyZHMgfSA9IGF3YWl0IGNsaWVudC5yZXF1ZXN0KHJlcXVlc3REYXRhKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9uY2U6IGNyZWRpdENhcmRzWzBdLm5vbmNlLFxuICAgICAgICAgICAgYmluOiBjcmVkaXRDYXJkc1swXS5kZXRhaWxzLmJpbixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGFsbGVuZ2UzRFNWZXJpZmljYXRpb24oXG4gICAgICAgIHRva2VuaXphdGlvblBheWxvYWQ6IFRva2VuaXphdGlvblBheWxvYWQsXG4gICAgICAgIGFtb3VudDogbnVtYmVyLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVmVyaWZ5UGF5bG9hZD4ge1xuICAgICAgICBjb25zdCB0aHJlZURTZWN1cmUgPSBhd2FpdCB0aGlzLmdldDNEUygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnByZXNlbnQzRFNDaGFsbGVuZ2UodGhyZWVEU2VjdXJlLCBhbW91bnQsIHRva2VuaXphdGlvblBheWxvYWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdGVhcmRvd25Nb2R1bGUobW9kdWxlPzogQnJhaW50cmVlTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGUgPyBtb2R1bGUudGVhcmRvd24oKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2xpZW50VG9rZW5PclRocm93KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFRva2VuO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RXJyb3JzUmVxdWlyZWRGaWVsZHMoXG4gICAgICAgIHBheW1lbnREYXRhOiBDcmVkaXRDYXJkSW5zdHJ1bWVudCxcbiAgICApOiBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMge1xuICAgICAgICBjb25zdCB7IGNjTnVtYmVyLCBjY0V4cGlyeSB9ID0gcGF5bWVudERhdGE7XG4gICAgICAgIGNvbnN0IGVycm9yczogUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzID0ge307XG5cbiAgICAgICAgaWYgKCFjY051bWJlcikge1xuICAgICAgICAgICAgZXJyb3JzLmNjTnVtYmVyID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0NyZWRpdCBjYXJkIG51bWJlciBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgICAgICBpZiAoIWNjRXhwaXJ5KSB7XG4gICAgICAgICAgICBlcnJvcnMuY2NFeHBpcnkgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXhwaXJhdGlvbiBkYXRlIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JlcXVpcmVkJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvcnM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBUb0NyZWRpdENhcmQoXG4gICAgICAgIGNyZWRpdENhcmQ6IENyZWRpdENhcmRJbnN0cnVtZW50LFxuICAgICAgICBiaWxsaW5nQWRkcmVzcz86IEFkZHJlc3MsXG4gICAgKTogQnJhaW50cmVlUmVxdWVzdERhdGEge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGNyZWRpdENhcmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgY2FyZGhvbGRlck5hbWU6IGNyZWRpdENhcmQuY2NOYW1lLFxuICAgICAgICAgICAgICAgICAgICBudW1iZXI6IGNyZWRpdENhcmQuY2NOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIGN2djogY3JlZGl0Q2FyZC5jY0N2dixcbiAgICAgICAgICAgICAgICAgICAgZXhwaXJhdGlvbkRhdGU6IGAke2NyZWRpdENhcmQuY2NFeHBpcnkubW9udGh9LyR7Y3JlZGl0Q2FyZC5jY0V4cGlyeS55ZWFyfWAsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3M6IGJpbGxpbmdBZGRyZXNzICYmIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlQWxwaGEyOiBiaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsaXR5OiBiaWxsaW5nQWRkcmVzcy5jaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeU5hbWU6IGJpbGxpbmdBZGRyZXNzLmNvdW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBiaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWV0QWRkcmVzczogYmlsbGluZ0FkZHJlc3MuYWRkcmVzczJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAke2JpbGxpbmdBZGRyZXNzLmFkZHJlc3MxfSAke2JpbGxpbmdBZGRyZXNzLmFkZHJlc3MyfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5kcG9pbnQ6ICdwYXltZW50X21ldGhvZHMvY3JlZGl0X2NhcmRzJyxcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgcHJlc2VudDNEU0NoYWxsZW5nZShcbiAgICAgICAgdGhyZWVEU2VjdXJlOiBCcmFpbnRyZWVUaHJlZURTZWN1cmUsXG4gICAgICAgIGFtb3VudDogbnVtYmVyLFxuICAgICAgICB0b2tlbml6YXRpb25QYXlsb2FkOiBUb2tlbml6YXRpb25QYXlsb2FkLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVmVyaWZ5UGF5bG9hZD4ge1xuICAgICAgICBjb25zdCB7IG5vbmNlLCBiaW4gfSA9IHRva2VuaXphdGlvblBheWxvYWQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRocmVlRFNlY3VyZU9wdGlvbnMgfHwgIW5vbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW5pdGlhbGl6ZWRFcnJvcihOb3RJbml0aWFsaXplZEVycm9yVHlwZS5QYXltZW50Tm90SW5pdGlhbGl6ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYWRkRnJhbWUsXG4gICAgICAgICAgICByZW1vdmVGcmFtZSxcbiAgICAgICAgICAgIGNoYWxsZW5nZVJlcXVlc3RlZCA9IHRydWUsXG4gICAgICAgICAgICBhZGRpdGlvbmFsSW5mb3JtYXRpb24sXG4gICAgICAgIH0gPSB0aGlzLnRocmVlRFNlY3VyZU9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNhbmNlbFZlcmlmeUNhcmQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRocmVlRFNlY3VyZS5jYW5jZWxWZXJpZnlDYXJkKCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgICAgICB2ZXJpZmljYXRpb24uY2FuY2VsKG5ldyBQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByb3VuZGVkQW1vdW50ID0gYW1vdW50LnRvRml4ZWQoMik7XG5cbiAgICAgICAgY29uc3QgdmVyaWZpY2F0aW9uID0gbmV3IENhbmNlbGxhYmxlUHJvbWlzZShcbiAgICAgICAgICAgIHRocmVlRFNlY3VyZS52ZXJpZnlDYXJkKHtcbiAgICAgICAgICAgICAgICBhZGRGcmFtZTogKGVycm9yLCBpZnJhbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZEZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRGcmFtZShlcnJvciwgaWZyYW1lLCBjYW5jZWxWZXJpZnlDYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYW1vdW50OiBOdW1iZXIocm91bmRlZEFtb3VudCksXG4gICAgICAgICAgICAgICAgYmluLFxuICAgICAgICAgICAgICAgIGNoYWxsZW5nZVJlcXVlc3RlZCxcbiAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgICAgICByZW1vdmVGcmFtZSxcbiAgICAgICAgICAgICAgICBvbkxvb2t1cENvbXBsZXRlOiAoX2RhdGEsIG5leHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29sbGVjdERldmljZURhdGE6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRkaXRpb25hbEluZm9ybWF0aW9uLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHZlcmlmaWNhdGlvbi5wcm9taXNlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENyZWRpdENhcmRJbnN0cnVtZW50IH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ3JlZGl0Q2FyZEluc3RydW1lbnRMaWtlKFxuICAgIGluc3RydW1lbnQ6IHVua25vd24sXG4pOiBpbnN0cnVtZW50IGlzIENyZWRpdENhcmRJbnN0cnVtZW50IHtcbiAgICBpZiAodHlwZW9mIGluc3RydW1lbnQgIT09ICdvYmplY3QnIHx8IGluc3RydW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICBjb25zdCBjcmVkaXRDYXJkSW5zdHJ1bWVudCA9IGluc3RydW1lbnQgYXMgUGFydGlhbDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj47XG5cbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgY3JlZGl0Q2FyZEluc3RydW1lbnQuY2NFeHBpcnkgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGNyZWRpdENhcmRJbnN0cnVtZW50LmNjRXhwaXJ5ICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBjcmVkaXRDYXJkSW5zdHJ1bWVudC5jY051bWJlciA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdHlwZW9mIGNyZWRpdENhcmRJbnN0cnVtZW50LmNjTmFtZSA9PT0gJ3N0cmluZydcbiAgICApO1xufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gdGhlIGNsaWVudCBsaWJyYXJ5IG9mIGEgcGF5bWVudCBtZXRob2QgZmFpbHNcbiAqIHRvIGxvYWQsIG9yIGZvciBzb21lIHJlYXNvbiwgaXQgaXMgaW5hY2Nlc3NpYmxlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBtZXNzYWdlIHx8XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIGNsaWVudCBsaWJyYXJ5IG9mIGEgcGF5bWVudCBtZXRob2QgaXMgbm90IGxvYWRlZCBvciByZWFkeSB0byBiZSB1c2VkLicsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2NsaWVudF91bmF2YWlsYWJsZSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnJhaW50cmVlTW9kdWxlTmFtZSB9IGZyb20gJy4vYnJhaW50cmVlJztcbmltcG9ydCB7XG4gICAgQlJBSU5UUkVFX1NES19ERUZBVUxUX1ZFUlNJT04sXG4gICAgQlJBSU5UUkVFX1NES19IT1NURURfRklFTERTX0ZJWF9WRVJTSU9OLFxuICAgIEJSQUlOVFJFRV9TREtfU1RBQkxFX1ZFUlNJT04sXG59IGZyb20gJy4vYnJhaW50cmVlLXNkay12ZXJpc29uJztcblxuZXhwb3J0IGNvbnN0IEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFkgPSB7XG4gICAgW0JSQUlOVFJFRV9TREtfU1RBQkxFX1ZFUlNJT05dOiB7XG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkNsaWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LTI2QlhETm5KSTIzSllSeUZCajR4ZTRzVk5yVVNTaVNTdTExa3hWWE5NL3ZFUE9ObTRMdUwwMHc2WmFUZ1Fld3QnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxDaGVja291dF06XG4gICAgICAgICAgICAnc2hhMzg0LUIrdnpiWnduUXR6V0J0aHBrVDRUWEtVaWJPNjV0eWVLN2VDeFN2cGJsZ3ByVGVwMitJQVhCMkN4eGpybjcxME8nLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxdOlxuICAgICAgICAgICAgJ3NoYTM4NC11eUFHTDEvMytYSkFIbkdvTnk0ZUNvWGR6SjRmN0lsenArNnc5UE5uRWpzNkRDQ3o5V015SmpNTjFnemM3OFUrJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuTG9jYWxQYXltZW50XTpcbiAgICAgICAgICAgICdzaGEzODQtTEl2T0VNa0lWRXdWdVlCZFZPUWMxQUM1WWJHR2x3eWZVaGVTMEFDSzIxOEQyU1R1VllRbFo0RnlFUG93QUVmVCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkRhdGFDb2xsZWN0b3JdOlxuICAgICAgICAgICAgJ3NoYTM4NC0xYm85SkR6K0tzY3RoYzA4NWNDS1d1cjhDTHdVb0Jwb055eHNEaTc5MzJtQ2wwekZxM0E1bXYrRlFMdzlHSHBWJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVXNCYW5rQWNjb3VudF06XG4gICAgICAgICAgICAnc2hhMzg0LXhtSEJWYVUrdzc0VitPZWJEM0FhUE9ORnhIVUdNZitRUnM4Ry9KeFZQWE5OUDdNRGEyakwwSUNXSEllMnRUZkonLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Hb29nbGVQYXltZW50XTpcbiAgICAgICAgICAgICdzaGEzODQtV0tESmw4bXFvUDgycVpwTUdINkFiWnhudlhuU1c4SUxWNE02NEN5TUxpdWdHTXd1N0x5UDg5d2pDa0hxc2lCZScsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlRocmVlRFNlY3VyZV06XG4gICAgICAgICAgICAnc2hhMzg0LVZRVWxwR0h6c0d2czVYZWlHRmlwN0VYUnN2b0hXRVhEVm1nQ2FjZmJ5aWVaSTltZEJPcXEzTlNveW8yOE9DT0InLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5WaXNhQ2hlY2tvdXRdOlxuICAgICAgICAgICAgJ3NoYTM4NC15eDdtQURmelROMFQ0M1E2cmxINDlMSWcxRUowaVVaZ0JwL0Vjelg5TFhzVUdreVNneHJEK25XSFFSQmt5Zm9UJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmVubW9dOlxuICAgICAgICAgICAgJ3NoYTM4NC1RWDRyUGpvajFaRGh1RzBhU3lLczU2bEVLRHFUTVRjall4VUhZMVN6TzVWWkRzcUlFMk5Ua3FvdDdLTlNDeW92JyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuSG9zdGVkRmllbGRzXTpcbiAgICAgICAgICAgICdzaGEzODQtVnZZQkFDZlN1MENyL0ozMnVLbXhHN0FYY05PSkUxQXpJSUwza2Jpa3lTN1lLcDVmejVJcytOek5QL2x5YXVOeScsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkZhc3RsYW5lXTpcbiAgICAgICAgICAgICdzaGEzODQtOW9Hc1pNUlp3cEd0REVEWWEvZEZ0NzZkRUNxajF4QW5pOWdJS2djM0tmTUlpUm5SNzNuRWVlVURMaUJ6eGhGYScsXG4gICAgfSxcbiAgICBbQlJBSU5UUkVFX1NES19ERUZBVUxUX1ZFUlNJT05dOiB7XG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkNsaWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LW8rbmJRR2N3Tk54SUJlWGV1MytYbWJTcStDZzhSM0VOM04wbDVoWENnTU1VMlJHWTB0MXowTHJvU0VJQWJmQU8nLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxDaGVja291dF06XG4gICAgICAgICAgICAnc2hhMzg0LVdyZmJXUEJTNG1IODZHQW95Y1BTZ2lIOGhROEtIN0E2N0M5M0hqaHVudi94aE5rMllwQm4zd2JGQTRGaGc5VS8nLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxdOlxuICAgICAgICAgICAgJ3NoYTM4NC1WRjM4OW52dnJSVWdEc1RYTXhUWU9SRHRWZWdCOUlRYTNDeHIvL0R5Sm5MWW56OC9YOFZDekV2Y2syYytNZWd0JyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuTG9jYWxQYXltZW50XTpcbiAgICAgICAgICAgICdzaGEzODQtdFpLeDJyRVFiZm1acG9QU1k1VlBtSkVoYXE0WDc1ZEx2d0hNczNWRTlVK0M4bFB5dytoV1RJTDErR1B2V0NJSCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkRhdGFDb2xsZWN0b3JdOlxuICAgICAgICAgICAgJ3NoYTM4NC1FNmszd09wUDdzeUNERHdhUkRMRjA2OTQyWTAwTmtid0p2V2kyT1FYd3dLekd3RzVmZDNFN1JGVXZDQ2VjZnZPJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVXNCYW5rQWNjb3VudF06XG4gICAgICAgICAgICAnc2hhMzg0LTI1OEZPTjhMWkdHMFc5UWF6NEppajgzcFpIdTMwWW5LakpBN2dOdWxMQmg2Q2Nsa3VjZ0YrdEhEUXVZRlJZZlcnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Hb29nbGVQYXltZW50XTpcbiAgICAgICAgICAgICdzaGEzODQtdGFKMnAvMCtuMFZIMzI4UE9Bb0JpdUViTDN0bkhVVEU5UzQyaEsxVitUeHMzWCtRWWpaT3lLVzM1SmdIUkZmTycsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlRocmVlRFNlY3VyZV06XG4gICAgICAgICAgICAnc2hhMzg0LStOU1pINFpqM3NPNWJkV3ZQS2hVNU4xNlFEeGV1ZVRWVG5VVmVsZWVFU2toTFNhejRPYjFoaC81bXllY2M5WW0nLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5WaXNhQ2hlY2tvdXRdOlxuICAgICAgICAgICAgJ3NoYTM4NC02NkRpQmpnaHhrMU9tQmo4YWtzTjhnYlErQ3dvUWN4MXZQZmlYVU4wOGcxaVFWTStCd2V3RjBwN3RvTTNpN1NTJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmVubW9dOlxuICAgICAgICAgICAgJ3NoYTM4NC1CNVV3WTQya0U0Um9Mb1diUTdZcHFvc1VsVWFkMi9EbEdXaXcwSGhvWmJTUGszMENRQWFTQTEwb2h5TERUa0RVJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuSG9zdGVkRmllbGRzXTpcbiAgICAgICAgICAgICdzaGEzODQtQXc5RWVzU2FVZVd4ZTM2UHFFSGlPeU95T3E4TTZDSWIxZ3c3L3lITlZQUnpHdEZYWGNkMk9ROHFYcklsT2oyUCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkZhc3RsYW5lXTpcbiAgICAgICAgICAgICdzaGEzODQtcmhCTDFocFo3MUpxRysyVHNUMERpaDQ3bWJqeDhjakpDcGVaams5dHczZGYxZ0ZNS2ZDVG1NeVp1bmhyN0g0WScsXG4gICAgfSxcbiAgICBbQlJBSU5UUkVFX1NES19IT1NURURfRklFTERTX0ZJWF9WRVJTSU9OXToge1xuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5DbGllbnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC0wV054a3NJcFJQK2ZZWmlJZHIxMmc2REJVUWZMRHpZQ1FKWnRSL0M4S2tjd1NHaFBIZmNGcDN0VGFHY015RlRxJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsQ2hlY2tvdXRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1sV00xams0Qk94b0ROVjZLb3A3dFZOdlFnSU5sbUVWejBjL093TStITkhLM1FDOHhxd2Q1NE92cnQyUVJEVGpoJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsXTpcbiAgICAgICAgICAgICdzaGEzODQtZlhVbVZ4QzJFTVpCRFhaN2VUSFNUTC9MRkJySGVqL01TWFQvdlRCWHZyYTRsemdMTkd2UkVBcCt4MEdZT2J1SCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkxvY2FsUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LXBoYTF4R3VHU2ttWkg1eDlhcUh2UmFPNHhMZWE3cm1RLzc5UEZqOXp4Tnp4dUZjT1daZzdnT1A3RmlieWdPRUMnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5EYXRhQ29sbGVjdG9yXTpcbiAgICAgICAgICAgICdzaGEzODQtUTZQSTJGOWVla1diQXhocm95YmwrYUVjdnFoZG93Ti9FUWxHd0JVeUpPelBGbjk5ODJ1OXhsNlNVNlhmR0t6YycsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlVzQmFua0FjY291bnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1XM1JMUVNLSkwxdFEzK1k3bVA2dG1rYW10WjhiVjRZdy9YeEw5Smo1SnRYSHJhRDhsb01GOGhBSUc1bTJ6SzdGJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuR29vZ2xlUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LVRJVFFNc0ZXQTNlbEROR1AybVd6Mm9LQm80cWp0K1RscXpvdmNhUG9lQmlBaC93UEJpNm5hZTUwQURkZ1UxL2knLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5UaHJlZURTZWN1cmVdOlxuICAgICAgICAgICAgJ3NoYTM4NC1ZaXljWU44OVpsTC9FdmNhcTR5MWFqVzFtaGQ3SllmWkJEdU93SHRJbjQvSm5tMjBHTCsvWENNK3pZQXdXRDhEJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmlzYUNoZWNrb3V0XTpcbiAgICAgICAgICAgICdzaGEzODQtL09kYVR2OXFya0t6ak9idFVlNnl6ZkRoSG96RlcvK3VYbHJTbDczNnNPWlJKcGpHUUVUdnBZWHFNRkZnNjl4dicsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlZlbm1vXTpcbiAgICAgICAgICAgICdzaGEzODQtZEErb2pkVzl2YkpTNEphdmNYeU9zOWQ1dVpISmc1ZE50WXVwb1BTSDJ6c1hJaVlEVlM1YW1MYi91OHFtUTZveicsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkhvc3RlZEZpZWxkc106XG4gICAgICAgICAgICAnc2hhMzg0LTMxWmtTNTgraWFXc1cwNmZ0VzUyenpWWkZwNDNXUGQ3cE5ZUmlkZFl5blNOZzZPaDdXR2JTRkdvckFVSDZUMXonLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5GYXN0bGFuZV06XG4gICAgICAgICAgICAnc2hhMzg0LWpsYnJ3TnZMM0h2TEFVQ3RMU21yblEyR0gxdWRDVXJSUy9iVm1SZUFTNWZ1SVZ2Y1c4UGtvL0drZzgydGxndHInLFxuICAgIH0sXG59O1xuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbmV4cG9ydCBlbnVtIE1pc3NpbmdEYXRhRXJyb3JUeXBlIHtcbiAgICBNaXNzaW5nQmlsbGluZ0FkZHJlc3MsXG4gICAgTWlzc2luZ0NhcnQsXG4gICAgTWlzc2luZ0NoZWNrb3V0LFxuICAgIE1pc3NpbmdDb25zaWdubWVudHMsXG4gICAgTWlzc2luZ0N1c3RvbWVyLFxuICAgIE1pc3NpbmdDaGVja291dENvbmZpZyxcbiAgICBNaXNzaW5nT3JkZXIsXG4gICAgTWlzc2luZ09yZGVyQ29uZmlnLFxuICAgIE1pc3NpbmdPcmRlcklkLFxuICAgIE1pc3NpbmdQYXltZW50LFxuICAgIE1pc3NpbmdQYXltZW50SWQsXG4gICAgTWlzc2luZ1BheW1lbnRJbnN0cnVtZW50LFxuICAgIE1pc3NpbmdQYXltZW50TWV0aG9kLFxuICAgIE1pc3NpbmdQYXltZW50UmVkaXJlY3RVcmwsXG4gICAgTWlzc2luZ1BheW1lbnRTdGF0dXMsXG4gICAgTWlzc2luZ1BheW1lbnRUb2tlbixcbiAgICBNaXNzaW5nU2hpcHBpbmdBZGRyZXNzLFxufVxuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3Igd2hlbiBkYXRhIHRoYXQgaXMgZXhwZWN0ZWQgdG8gZXhpc3QgaXMgbWlzc2luZy4gVXN1YWxseSBpdFxuICogaXMgZHVlIHRvIHRoZSBmYWN0IHRoYXQgY2VydGFpbiBkYXRhIGhhcyBub3QgYmVlbiByZXRyaWV2ZWQgZnJvbSBvciBzYXZlZCB0b1xuICogdGhlIHNlcnZlciB5ZXQuIEFuZCBzdWNoIGRhdGEgaXMgcmVxdWlyZWQgdG8gcGVyZm9ybSBjZXJ0YWluIGFjdGlvbnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pc3NpbmdEYXRhRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3VidHlwZTogTWlzc2luZ0RhdGFFcnJvclR5cGUpIHtcbiAgICAgICAgc3VwZXIoZ2V0RXJyb3JNZXNzYWdlKHN1YnR5cGUpKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnTWlzc2luZ0RhdGFFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdtaXNzaW5nX2RhdGEnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKHR5cGU6IE1pc3NpbmdEYXRhRXJyb3JUeXBlKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQmlsbGluZ0FkZHJlc3M6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgYmlsbGluZyBhZGRyZXNzIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDYXJ0OlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGNhcnQgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NvbnNpZ25tZW50czpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjb25zaWdubWVudHMgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NoZWNrb3V0OlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGNoZWNrb3V0IGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDdXN0b21lcjpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjdXN0b21lciBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2hlY2tvdXRDb25maWc6XG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVyQ29uZmlnOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGNvbmZpZ3VyYXRpb24gZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ09yZGVyOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIG9yZGVyIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlcklkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIG9yZGVyIElEIGlzIHVuYXZhaWxhYmxlIG9yIG5vdCBnZW5lcmF0ZWQgeWV0Lic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBwYXltZW50IGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50VG9rZW46XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHRva2VuIHJlcXVpcmVkIHRvIHN1Ym1pdCBhIHBheW1lbnQgaXMgbWlzc2luZy4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2Q6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgcGF5bWVudCBtZXRob2QgZGF0YSBpcyB1bmF2YWlsYWJsZSBvciBub3QgcHJvcGVybHkgY29uZmlndXJlZC4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1NoaXBwaW5nQWRkcmVzczpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBzaGlwcGluZyBhZGRyZXNzIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSByZXF1aXJlZCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQgeyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgeyBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZIH0gZnJvbSAnLi9icmFpbnRyZWUtc2RrLXNjcmlwdHMtaW50ZWdyaXR5JztcbmltcG9ydCBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciBmcm9tICcuL2JyYWludHJlZS1zZGstdmVyc2lvbi1tYW5hZ2VyJztcbmltcG9ydCBpc01hbmFnZWFibGVCcmFpbnRyZWVTREtWZXJzaW9uIGZyb20gJy4vaXNNYW5hZ2VhYmxlQnJhaW50cmVlU0RLVmVyc2lvbic7XG5pbXBvcnQge1xuICAgIEJyYWludHJlZUNsaWVudENyZWF0b3IsXG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3IsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDcmVhdG9yLFxuICAgIEJyYWludHJlZUdvb2dsZVBheW1lbnRDcmVhdG9yLFxuICAgIEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3IsXG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdG9yLFxuICAgIEJyYWludHJlZU1vZHVsZUNyZWF0b3JzLFxuICAgIEJyYWludHJlZU1vZHVsZU5hbWUsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXRDcmVhdG9yLFxuICAgIEJyYWludHJlZVBheXBhbENyZWF0b3IsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlQ3JlYXRvcixcbiAgICBCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRDcmVhdG9yLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFZpc2FDaGVja291dFNESyB9IGZyb20gJy4vdmlzYWNoZWNrb3V0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlU2NyaXB0TG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzY3JpcHRMb2FkZXI6IFNjcmlwdExvYWRlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyOiBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApIHt9XG5cbiAgICBhc3luYyBsb2FkQ2xpZW50KCk6IFByb21pc2U8QnJhaW50cmVlQ2xpZW50Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVDbGllbnRDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuQ2xpZW50LFxuICAgICAgICAgICAgJ2NsaWVudC5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRGYXN0bGFuZSgpOiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lQ3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVGYXN0bGFuZUNyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5GYXN0bGFuZSxcbiAgICAgICAgICAgICdmYXN0bGFuZS5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRQYXlwYWxDaGVja291dCgpOiBQcm9taXNlPEJyYWludHJlZVBheXBhbENoZWNrb3V0Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVQYXlwYWxDaGVja291dENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICdwYXlwYWwtY2hlY2tvdXQubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkUGF5cGFsKCk6IFByb21pc2U8QnJhaW50cmVlUGF5cGFsQ3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVQYXlwYWxDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsLFxuICAgICAgICAgICAgJ3BheXBhbC5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRMb2NhbFBheW1lbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdG9yPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRCcmFpbnRyZWVNb2R1bGVPclRocm93PEJyYWludHJlZUxvY2FsUGF5bWVudENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5Mb2NhbFBheW1lbnQsXG4gICAgICAgICAgICAnbG9jYWwtcGF5bWVudC5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWREYXRhQ29sbGVjdG9yKCk6IFByb21pc2U8QnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5EYXRhQ29sbGVjdG9yLFxuICAgICAgICAgICAgJ2RhdGEtY29sbGVjdG9yLm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFVzQmFua0FjY291bnQoKTogUHJvbWlzZTxCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLlVzQmFua0FjY291bnQsXG4gICAgICAgICAgICAndXMtYmFuay1hY2NvdW50Lm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZEdvb2dsZVBheW1lbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVHb29nbGVQYXltZW50Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVHb29nbGVQYXltZW50Q3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLkdvb2dsZVBheW1lbnQsXG4gICAgICAgICAgICAnZ29vZ2xlLXBheW1lbnQubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkM0RTKCk6IFByb21pc2U8QnJhaW50cmVlVGhyZWVEU2VjdXJlQ3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVUaHJlZURTZWN1cmVDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuVGhyZWVEU2VjdXJlLFxuICAgICAgICAgICAgJ3RocmVlLWQtc2VjdXJlLm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbG9hZFZpc2FDaGVja291dCgpOiBQcm9taXNlPEJyYWludHJlZVZpc2FDaGVja291dENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlVmlzYUNoZWNrb3V0Q3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLlZpc2FDaGVja291dCxcbiAgICAgICAgICAgICd2aXNhLWNoZWNrb3V0Lm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgbG9hZFZlbm1vQ2hlY2tvdXQoKTogUHJvbWlzZTxCcmFpbnRyZWVWZW5tb0NoZWNrb3V0Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVWZW5tb0NoZWNrb3V0Q3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLlZlbm1vLFxuICAgICAgICAgICAgJ3Zlbm1vLm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZEhvc3RlZEZpZWxkcygpOiBQcm9taXNlPEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlSG9zdGVkRmllbGRzQ3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLkhvc3RlZEZpZWxkcyxcbiAgICAgICAgICAgICdob3N0ZWQtZmllbGRzLm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFZpc2FDaGVja291dFNkayh0ZXN0TW9kZT86IGJvb2xlYW4pOiBQcm9taXNlPFZpc2FDaGVja291dFNESz4ge1xuICAgICAgICBpZiAodGhpcy5icmFpbnRyZWVIb3N0V2luZG93LlYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cuVjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhc2ggPSB0ZXN0TW9kZVxuICAgICAgICAgICAgPyAnc2hhMzg0LTBldTFzMUd0cXpYbEw5RHRMZ213ekM1V1dsRUgvQURSTTBuMzhjVlFrdnRUK1cvZ2V5OTZyY2IxTHd1VU9QRG0nXG4gICAgICAgICAgICA6ICdzaGEzODQtMWYxY3N2UDNaRnhnNGRJTEgxR2FZNExIbFowb1g3Ums4M3J4bUxsd2JuSWk0VE0wTll6WG9ldjFWb0VpVkRTNic7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NyaXB0TG9hZGVyXG4gICAgICAgICAgICAubG9hZFNjcmlwdChcbiAgICAgICAgICAgICAgICBgLy8ke1xuICAgICAgICAgICAgICAgICAgICB0ZXN0TW9kZSA/ICdzYW5kYm94LScgOiAnJ1xuICAgICAgICAgICAgICAgIH1hc3NldHMuc2VjdXJlLmNoZWNrb3V0LnZpc2EuY29tL2NoZWNrb3V0LXdpZGdldC9yZXNvdXJjZXMvanMvaW50ZWdyYXRpb24vdjEvc2RrLmpzYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ3JpdHk6IGhhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc29yaWdpbjogJ2Fub255bW91cycsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5WKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cuVjtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8VCBleHRlbmRzIEJyYWludHJlZU1vZHVsZUNyZWF0b3JzPihcbiAgICAgICAgYnJhaW50cmVlTW9kdWxlTmFtZTogQnJhaW50cmVlTW9kdWxlTmFtZSxcbiAgICAgICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgbGV0IG1vZHVsZSA9IHRoaXMuZ2V0QnJhaW50cmVlTW9kdWxlKGJyYWludHJlZU1vZHVsZU5hbWUpO1xuXG4gICAgICAgIGlmIChtb2R1bGUpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGUgYXMgVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJyYWludHJlZVNka1ZlcnNpb24gPSB0aGlzLmJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLmdldFNES1ZlcnNpb24oKTtcblxuICAgICAgICBjb25zdCBzY3JpcHRQYXRoID0gYC8vanMuYnJhaW50cmVlZ2F0ZXdheS5jb20vd2ViLyR7YnJhaW50cmVlU2RrVmVyc2lvbn0vanMvJHtmaWxlTmFtZX1gO1xuXG4gICAgICAgIGNvbnN0IGludGVncml0eSA9IGlzTWFuYWdlYWJsZUJyYWludHJlZVNES1ZlcnNpb24oYnJhaW50cmVlU2RrVmVyc2lvbilcbiAgICAgICAgICAgID8gdGhpcy5nZXRJbnRlZ3JpdHlWYWx1ZXNCeU1vZHVsZU5hbWUoYnJhaW50cmVlTW9kdWxlTmFtZSwgYnJhaW50cmVlU2RrVmVyc2lvbilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuc2NyaXB0TG9hZGVyLmxvYWRTY3JpcHQoXG4gICAgICAgICAgICBzY3JpcHRQYXRoLFxuICAgICAgICAgICAgaW50ZWdyaXR5XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlZ3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3Nzb3JpZ2luOiAnYW5vbnltb3VzJyxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICApO1xuXG4gICAgICAgIG1vZHVsZSA9IHRoaXMuZ2V0QnJhaW50cmVlTW9kdWxlKGJyYWludHJlZU1vZHVsZU5hbWUpO1xuXG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgcmV0dXJuIG1vZHVsZSBhcyBUO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QnJhaW50cmVlTW9kdWxlKFxuICAgICAgICBicmFpbnRyZWVNb2R1bGVOYW1lOiBCcmFpbnRyZWVNb2R1bGVOYW1lLFxuICAgICk6IEJyYWludHJlZU1vZHVsZUNyZWF0b3JzIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5icmFpbnRyZWU/LlticmFpbnRyZWVNb2R1bGVOYW1lXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEludGVncml0eVZhbHVlc0J5TW9kdWxlTmFtZShcbiAgICAgICAgbW9kdWxlTmFtZTogQnJhaW50cmVlTW9kdWxlTmFtZSxcbiAgICAgICAgdmVyc2lvbjoga2V5b2YgdHlwZW9mIEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFksXG4gICAgKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaW50ZWdyaXR5ID0gQlJBSU5UUkVFX1NES19TQ1JJUFRTX0lOVEVHUklUWVt2ZXJzaW9uXVttb2R1bGVOYW1lXTtcblxuICAgICAgICBpZiAoIWludGVncml0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGZpbGVOYW1lIHZhbHVlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW50ZWdyaXR5O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFkgfSBmcm9tICcuL2JyYWludHJlZS1zZGstc2NyaXB0cy1pbnRlZ3JpdHknO1xuXG5mdW5jdGlvbiBpc01hbmFnZWFibGVCcmFpbnRyZWVTREtWZXJzaW9uKFxuICAgIHZlcnNpb246IHN0cmluZyxcbik6IHZlcnNpb24gaXMga2V5b2YgdHlwZW9mIEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFkge1xuICAgIHJldHVybiB2ZXJzaW9uIGluIEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFuYWdlYWJsZUJyYWludHJlZVNES1ZlcnNpb247XG4iLCJpbXBvcnQgUmVzb2x2YWJsZU1vZHVsZSBmcm9tICcuL3Jlc29sdmFibGUtbW9kdWxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9SZXNvbHZhYmxlTW9kdWxlPFRNb2R1bGUsIFRJZGVudGlmaWVyPihcbiAgICBtb2R1bGU6IFRNb2R1bGUsXG4gICAgcmVzb2x2ZUlkczogVElkZW50aWZpZXJbXSxcbik6IFJlc29sdmFibGVNb2R1bGU8VE1vZHVsZSwgVElkZW50aWZpZXI+IHtcbiAgICBjb25zb2xlLmxvZygncmVzb2x2ZUlkcycsIHJlc29sdmVJZHMpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obW9kdWxlLCB7IHJlc29sdmVJZHMgfSk7XG59XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICBCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyQ3JlZGVudGlhbHMsXG4gICAgQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICBDdXN0b21lclN0cmF0ZWd5LFxuICAgIERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTdGFuZGFyZEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoQnJhaW50cmVlUGF5cGFsQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVBheXBhbEN1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVlcGF5cGFsLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbCB8fCB7fTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlcGF5cGFsLmNvbnRhaW5lclwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBsZXQgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QuY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudFRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoX2UpIHtcbiAgICAgICAgICAgIHN0YXRlID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBjb25maWcsIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gcGF5bWVudE1ldGhvZDtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBpbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0T3B0aW9uczogUGFydGlhbDxCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnPiA9IHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICBpbnRlbnQ6IGluaXRpYWxpemF0aW9uRGF0YS5pbnRlbnQsXG4gICAgICAgICAgICBpc0NyZWRpdEVuYWJsZWQ6IGluaXRpYWxpemF0aW9uRGF0YS5pc0NyZWRpdEVuYWJsZWQsXG4gICAgICAgICAgICBjb21taXQ6IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrID0gKFxuICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKFxuICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBCb29sZWFuKGNvbmZpZy50ZXN0TW9kZSksXG4gICAgICAgICAgICAgICAgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWw6IEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHRlc3RNb2RlOiBib29sZWFuLFxuICAgICAgICBidXR0b25TdHlsZXM6IFBheXBhbFN0eWxlT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2sgPSBub29wIH0gPSBicmFpbnRyZWVwYXlwYWw7XG5cbiAgICAgICAgY29uc3QgeyBwYXlwYWwgfSA9IHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdztcbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZSA9IHBheXBhbD8uRlVORElORy5QQVlQQUw7XG5cbiAgICAgICAgaWYgKHBheXBhbCAmJiBmdW5kaW5nU291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgZW52OiB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVFbnYodGVzdE1vZGUpLFxuICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHsgLi4uYnV0dG9uU3R5bGVzLCBoZWlnaHQ6IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwUGF5bWVudChicmFpbnRyZWVQYXlwYWxDaGVja291dCwgYnJhaW50cmVlcGF5cGFsLCBtZXRob2RJZCksXG4gICAgICAgICAgICAgICAgb25BcHByb3ZlOiAoYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZVBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXR1cFBheW1lbnQoXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsOiBCcmFpbnRyZWVQYXlwYWxDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8c3RyaW5nIHwgdm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IHN0YXRlLmdldENoZWNrb3V0T3JUaHJvdygpLm91dHN0YW5kaW5nQmFsYW5jZTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+ID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gY3VzdG9tZXI/LmFkZHJlc3Nlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlID0gYWRkcmVzc1xuICAgICAgICAgICAgICAgID8gdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZShhZGRyZXNzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQuY3JlYXRlUGF5bWVudCh7XG4gICAgICAgICAgICAgICAgZmxvdzogJ2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBlbmFibGVTaGlwcGluZ0FkZHJlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzRWRpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLFxuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25FcnJvciB9ID0gYnJhaW50cmVlcGF5cGFsO1xuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBjb250YWluZXIsIG9uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0b2tlbml6ZVBheW1lbnQoXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsOiBCcmFpbnRyZWVQYXlwYWxDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkIHwgdm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXREYXRhQ29sbGVjdG9yKHtcbiAgICAgICAgICAgICAgICBwYXlwYWw6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuaXplUGF5bG9hZCA9IGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LnRva2VuaXplUGF5bWVudChhdXRob3JpemVEYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV0YWlscywgbm9uY2UgfSA9IHRva2VuaXplUGF5bG9hZDtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKGRldGFpbHMpO1xuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0xlZ2FjeVNoaXBwaW5nQWRkcmVzcyhkZXRhaWxzKTtcblxuICAgICAgICAgICAgdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgICAgIHBheW1lbnRfdHlwZTogJ3BheXBhbCcsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgYmlsbGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBidXR0b25Db250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBvbkVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChidXR0b25Db250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3JDYWxsYmFjayAmJiBpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgb25FcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiY29uc3QgRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0ID0gMzY7XG5cbmV4cG9ydCBkZWZhdWx0IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodDtcbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQ3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3VzdG9tZXItc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5OiBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSA9IG5ldyBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVGb3JtUG9zdGVyKCksXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVBheXBhbEN1c3RvbWVyU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVlcGF5cGFsJyB9LFxuXSk7XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICBCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyQ3JlZGVudGlhbHMsXG4gICAgQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICBDdXN0b21lclN0cmF0ZWd5LFxuICAgIERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTdGFuZGFyZEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC1jdXN0b21lci1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lclN0cmF0ZWd5IGltcGxlbWVudHMgQ3VzdG9tZXJTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXBheXBhbGNyZWRpdCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFicmFpbnRyZWVwYXlwYWxjcmVkaXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVwYXlwYWxjcmVkaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdC5jb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgbGV0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICAgICAgaWYgKCFwYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0VG9wQnV0dG9uU3R5bGVzIH0gPSBwYXltZW50QnV0dG9uU3R5bGVzIHx8IHt9O1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3VycmVuY3lDb2RlID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dE9wdGlvbnM6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgaW50ZW50OiBpbml0aWFsaXphdGlvbkRhdGEuaW50ZW50LFxuICAgICAgICAgICAgaXNDcmVkaXRFbmFibGVkOiBpbml0aWFsaXphdGlvbkRhdGEuaXNDcmVkaXRFbmFibGVkLFxuICAgICAgICAgICAgY29tbWl0OiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayA9IChcbiAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQsXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgQm9vbGVhbihjb25maWcudGVzdE1vZGUpLFxuICAgICAgICAgICAgICAgIHsgLi4uY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsIGhlaWdodDogRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0IH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHRlc3RNb2RlOiBib29sZWFuLFxuICAgICAgICBidXR0b25TdHlsZXM6IFBheXBhbFN0eWxlT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2sgPSBub29wIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQ7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsIH0gPSB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3c7XG5cbiAgICAgICAgbGV0IGhhc1JlbmRlcmVkU21hcnRCdXR0b24gPSBmYWxzZTtcblxuICAgICAgICBpZiAocGF5cGFsKSB7XG4gICAgICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlcyA9IFtwYXlwYWwuRlVORElORy5QQVlMQVRFUiwgcGF5cGFsLkZVTkRJTkcuQ1JFRElUXTtcblxuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZXMuZm9yRWFjaCgoZnVuZGluZ1NvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbGNyZWRpdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQXBwcm92ZTogKGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZVBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uUmVuZGVyLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsIHx8ICFoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldHVwUGF5bWVudChcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpO1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCkub3V0c3RhbmRpbmdCYWxhbmNlO1xuICAgICAgICAgICAgY29uc3QgY3VycmVuY3kgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4gPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgPSBhZGRyZXNzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlKGFkZHJlc3MpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC5jcmVhdGVQYXltZW50KHtcbiAgICAgICAgICAgICAgICBmbG93OiAnY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIGVuYWJsZVNoaXBwaW5nQWRkcmVzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NFZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUsXG4gICAgICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgICAgIG9mZmVyQ3JlZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGludGVudDogcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmludGVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbGNyZWRpdDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBhdXRob3JpemVEYXRhOiBQYXlwYWxBdXRob3JpemVEYXRhLFxuICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dDogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGJyYWludHJlZXBheXBhbGNyZWRpdDogQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZCB8IHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0RGF0YUNvbGxlY3Rvcih7XG4gICAgICAgICAgICAgICAgcGF5cGFsOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbml6ZVBheWxvYWQgPSBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC50b2tlbml6ZVBheW1lbnQoYXV0aG9yaXplRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGRldGFpbHMsIG5vbmNlIH0gPSB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lCaWxsaW5nQWRkcmVzcyhkZXRhaWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlscyk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgICAgICBwYXltZW50X3R5cGU6ICdwYXlwYWwnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgIGRldmljZV9kYXRhOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHNoaXBwaW5nQWRkcmVzcyksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRva2VuaXplUGF5bG9hZDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQ7XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIGNvbnRhaW5lciwgb25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogdW5rbm93bixcbiAgICAgICAgYnV0dG9uQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgb25FcnJvckNhbGxiYWNrPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoYnV0dG9uQ29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChvbkVycm9yQ2FsbGJhY2sgJiYgaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIG9uRXJyb3JDYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneTogQ3VzdG9tZXJTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbGNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgb21pdEJ5IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sIEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MgfSBmcm9tICcuLi9pbmRleCc7XG5cbmZ1bmN0aW9uIGlzSW52YWxpZFN0eWxlT3B0aW9uKHN0eWxlT3B0aW9uOiB1bmtub3duKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzdHlsZU9wdGlvbiAhPT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZhc3RsYW5lU3R5bGVzKFxuICAgIHN0eWxlU2V0dGluZ3M/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIHVpU3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4pOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF1aVN0eWxlcyAmJiAhc3R5bGVTZXR0aW5ncykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBjbGVhblVwRmFzdGxhbmVTdHlsZXMobWVyZ2VGYXN0bGFuZVN0eWxlcyhzdHlsZVNldHRpbmdzLCB1aVN0eWxlcykpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUZhc3RsYW5lU3R5bGVzKFxuICAgIHN0eWxlU2V0dGluZ3M/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIHVpU3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4pOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc0JhY2tncm91bmRDb2xvciB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5yb290Py5iYWNrZ3JvdW5kQ29sb3JQcmltYXJ5LFxuICAgICAgICAgICAgZXJyb3JDb2xvcjogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NFcnJvckNvbG9yIHx8IHVpU3R5bGVzPy5yb290Py5lcnJvckNvbG9yLFxuICAgICAgICAgICAgZm9udEZhbWlseTogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NGb250RmFtaWx5IHx8IHVpU3R5bGVzPy5yb290Py5mb250RmFtaWx5LFxuICAgICAgICAgICAgZm9udFNpemVCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemUgfHwgdWlTdHlsZXM/LnJvb3Q/LmZvbnRTaXplQmFzZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyB8fCB1aVN0eWxlcz8ucm9vdD8ucGFkZGluZyxcbiAgICAgICAgICAgIHByaW1hcnlDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc1ByaW1hcnlDb2xvciB8fCB1aVN0eWxlcz8ucm9vdD8ucHJpbWFyeUNvbG9yLFxuICAgICAgICB9LFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cyB8fCB1aVN0eWxlcz8uaW5wdXQ/LmJvcmRlclJhZGl1cyxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlckNvbG9yIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBmb2N1c0JvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0ZvY3VzQm9yZGVyQmFzZSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5pbnB1dD8uZm9jdXNCb3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8uaW5wdXQ/LmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICB0ZXh0Q29sb3JCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UgfHwgdWlTdHlsZXM/LmlucHV0Py50ZXh0Q29sb3JCYXNlLFxuICAgICAgICB9LFxuICAgICAgICB0b2dnbGU6IHtcbiAgICAgICAgICAgIGNvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IHx8IHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yUHJpbWFyeSxcbiAgICAgICAgICAgIGNvbG9yU2Vjb25kYXJ5OlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yU2Vjb25kYXJ5LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0NvbG9yIHx8IHVpU3R5bGVzPy50ZXh0Py5ib2R5Py5jb2xvcixcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzRm9udFNpemUgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmJvZHk/LmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHRpb246IHtcbiAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzQ29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmNhcHRpb24/LmNvbG9yLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZSB8fFxuICAgICAgICAgICAgICAgICAgICB1aVN0eWxlcz8udGV4dD8uY2FwdGlvbj8uZm9udFNpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBicmFuZGluZzogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVCcmFuZGluZ1NldHRpbmdzIHx8IHVpU3R5bGVzPy5icmFuZGluZyxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjbGVhblVwRmFzdGxhbmVTdHlsZXMoc3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbikge1xuICAgIGNvbnN0IGZhc3RsYW5lU3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiA9IHt9O1xuXG4gICAgY29uc3Qgcm9vdCA9IG9taXRCeShzdHlsZXMucm9vdCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGlucHV0ID0gb21pdEJ5KHN0eWxlcy5pbnB1dCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IHRvZ2dsZSA9IG9taXRCeShzdHlsZXMudG9nZ2xlLCBpc0ludmFsaWRTdHlsZU9wdGlvbik7XG4gICAgY29uc3QgdGV4dEJvZHkgPSBvbWl0Qnkoc3R5bGVzLnRleHQ/LmJvZHksIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCB0ZXh0Q2FwdGlvbiA9IG9taXRCeShzdHlsZXMudGV4dD8uY2FwdGlvbiwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGJyYW5kaW5nID0gc3R5bGVzLmJyYW5kaW5nO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHJvb3QpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5yb290ID0gcm9vdDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoaW5wdXQpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5pbnB1dCA9IGlucHV0O1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0b2dnbGUpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50b2dnbGUgPSB0b2dnbGU7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRleHRCb2R5KS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dCA9IHt9O1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0LmJvZHkgPSB0ZXh0Qm9keTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModGV4dENhcHRpb24pLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0ID0ge1xuICAgICAgICAgICAgLi4uZmFzdGxhbmVTdHlsZXMudGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dC5jYXB0aW9uID0gdGV4dENhcHRpb247XG4gICAgfVxuXG4gICAgaWYgKGJyYW5kaW5nKSB7XG4gICAgICAgIGZhc3RsYW5lU3R5bGVzLmJyYW5kaW5nID0gYnJhbmRpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhc3RsYW5lU3R5bGVzO1xufVxuIiwiaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5leHBvcnQgKiBmcm9tICcuL2JyYWludHJlZSc7XG5leHBvcnQgKiBmcm9tICcuL3BheXBhbCc7XG5leHBvcnQgKiBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBNb2R1bGVcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBUSW5zdGFuY2UsXG4gICAgVE9wdGlvbnMgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnLFxuICAgIFRFcnJvciA9IEJyYWludHJlZUVycm9yLFxuPiB7XG4gICAgY3JlYXRlKFxuICAgICAgICBjb25maWc6IFRPcHRpb25zLFxuICAgICAgICBjYWxsYmFjaz86IChlcnJvcjogVEVycm9yLCBpbnN0YW5jZTogVEluc3RhbmNlKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8VEluc3RhbmNlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnQ7XG4gICAgYXV0aG9yaXphdGlvbj86IHN0cmluZzsgLy8gSW5mbzogYXV0aG9yaXphdGlvbiB1c2VzIGNsaWVudFRva2VuIGFzIGEgdmFsdWVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVNb2R1bGUge1xuICAgIHRlYXJkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBXaW5kb3dcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlV2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgICBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnRDcmVhdG9yO1xuICAgIGJyYWludHJlZUZhc3RsYW5lPzogQnJhaW50cmVlRmFzdGxhbmU7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBDbGllbnRcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZUNsaWVudENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZUNsaWVudD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlQ2xpZW50IHtcbiAgICByZXF1ZXN0KHBheWxvYWQ6IEJyYWludHJlZUNsaWVudFJlcXVlc3RQYXlsb2FkKTogUHJvbWlzZTxCcmFpbnRyZWVDbGllbnRSZXF1ZXN0UmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUNsaWVudFJlcXVlc3RQYXlsb2FkIHtcbiAgICBkYXRhOiB7XG4gICAgICAgIGNyZWRpdENhcmQ6IHtcbiAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzPzoge1xuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlQWxwaGEyOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbG9jYWxpdHk6IHN0cmluZztcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICAgICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FyZGhvbGRlck5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIGN2dj86IHN0cmluZztcbiAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiBzdHJpbmc7XG4gICAgICAgICAgICBudW1iZXI6IHN0cmluZztcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogYm9vbGVhbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBlbmRwb2ludDogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBkZXRhaWxzOiB7XG4gICAgICAgIGJpbjogc3RyaW5nO1xuICAgICAgICBjYXJkVHlwZTogc3RyaW5nO1xuICAgICAgICBleHBpcmF0aW9uTW9udGg6IHN0cmluZztcbiAgICAgICAgZXhwaXJhdGlvblllYXI6IHN0cmluZztcbiAgICAgICAgbGFzdEZvdXI6IHN0cmluZztcbiAgICAgICAgbGFzdFR3bzogc3RyaW5nO1xuICAgIH07XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgYmluRGF0YToge1xuICAgICAgICBjb21tZXJjaWFsOiBzdHJpbmc7XG4gICAgICAgIGNvdW50cnlPZklzc3VhbmNlOiBzdHJpbmc7XG4gICAgICAgIGRlYml0OiBzdHJpbmc7XG4gICAgICAgIGR1cmJpblJlZ3VsYXRlZDogc3RyaW5nO1xuICAgICAgICBoZWFsdGhjYXJlOiBzdHJpbmc7XG4gICAgICAgIGlzc3VpbmdCYW5rOiBzdHJpbmc7XG4gICAgICAgIHBheXJvbGw6IHN0cmluZztcbiAgICAgICAgcHJlcGFpZDogc3RyaW5nO1xuICAgICAgICBwcm9kdWN0SWQ6IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUNsaWVudFJlcXVlc3RSZXNwb25zZSB7XG4gICAgY3JlZGl0Q2FyZHM6IEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZFtdO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRGF0YSBDb2xsZWN0b3JcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnIGV4dGVuZHMgQnJhaW50cmVlTW9kdWxlQ3JlYXRvckNvbmZpZyB7XG4gICAga291bnQ/OiBib29sZWFuOyAvLyBJbmZvOiB0aGlzIHBhcmFtIGlzIG5lZWRlZCBmb3IgZnJhdWQgZGV0ZWN0aW9uIChzaG91bGQgYWx3YXlzIGJlICd0cnVlJylcbiAgICBwYXlwYWw/OiBib29sZWFuOyAvLyBUT0RPOiBiYXNlZCBvbiBicmFpbnRyZWUgZG9jdW1lbnRhdGlvbiwgdGhpcyBwYXJhbSBpcyBkZXByZWNhdGVkLCBzbyB3ZSBkb250IG5lZWQgaXQgYW55bW9yZVxuICAgIHJpc2tDb3JyZWxhdGlvbklkPzogc3RyaW5nOyAvLyBJbmZvOiB0aGUgb3B0aW9uIGlzIG5lZWRlZCBmb3IgUGF5UGFsIEFuYWx5dGljc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZURhdGFDb2xsZWN0b3IgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIGRldmljZURhdGE/OiBzdHJpbmc7XG59XG5cbi8vIFRPRE86IHJlbW92ZSB0aGlzIGludGVyZmFjZSB3aGVuIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSB3aWxsIGJlIHJlbW92ZWRcbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRGF0YUNvbGxlY3RvcnMge1xuICAgIGRlZmF1bHQ/OiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yO1xuICAgIHBheXBhbD86IEJyYWludHJlZURhdGFDb2xsZWN0b3I7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBHb29nbGUgUGF5bWVudFxuICpcbiAqL1xudHlwZSBCcmFpbnRyZWVHb29nbGVQYXltZW50QWRkcmVzc0Zvcm1hdCA9ICdGVUxMJyB8ICdNSU4nO1xuXG5leHBvcnQgZW51bSBUb3RhbFByaWNlU3RhdHVzVHlwZSB7XG4gICAgRVNUSU1BVEVEID0gJ0VTVElNQVRFRCcsXG4gICAgRklOQUwgPSAnRklOQUwnLFxuICAgIE5PVF9DVVJSRU5UTFlfS05PV04gPSAnTk9UX0NVUlJFTlRMWV9LTk9XTicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlR29vZ2xlUGF5bWVudERhdGFSZXF1ZXN0T3B0aW9ucyB7XG4gICAgbWVyY2hhbnRJbmZvOiB7XG4gICAgICAgIGF1dGhKd3Q/OiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50SWQ/OiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50TmFtZT86IHN0cmluZztcbiAgICB9O1xuICAgIHRyYW5zYWN0aW9uSW5mbzoge1xuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZztcbiAgICAgICAgdG90YWxQcmljZVN0YXR1czogVG90YWxQcmljZVN0YXR1c1R5cGU7XG4gICAgICAgIHRvdGFsUHJpY2U6IHN0cmluZztcbiAgICB9O1xuICAgIGNhcmRSZXF1aXJlbWVudHM6IHtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NGb3JtYXQ6IEJyYWludHJlZUdvb2dsZVBheW1lbnRBZGRyZXNzRm9ybWF0O1xuICAgIH07XG4gICAgZW1haWxSZXF1aXJlZD86IGJvb2xlYW47XG4gICAgcGhvbmVOdW1iZXJSZXF1aXJlZD86IGJvb2xlYW47XG4gICAgc2hpcHBpbmdBZGRyZXNzUmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheW1lbnREYXRhUmVxdWVzdCB7XG4gICAgYWxsb3dlZFBheW1lbnRNZXRob2RzOiBzdHJpbmdbXTtcbiAgICBhcGlWZXJzaW9uOiBudW1iZXI7XG4gICAgY2FyZFJlcXVpcmVtZW50czoge1xuICAgICAgICBhbGxvd2VkQ2FyZE5ldHdvcmtzOiBzdHJpbmdbXTtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NGb3JtYXQ6IHN0cmluZztcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICB9O1xuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XG4gICAgaToge1xuICAgICAgICBnb29nbGVUcmFuc2FjdGlvbklkOiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0VGltZU1zOiBudW1iZXI7XG4gICAgfTtcbiAgICBtZXJjaGFudEluZm86IHtcbiAgICAgICAgbWVyY2hhbnRJZDogc3RyaW5nO1xuICAgICAgICBtZXJjaGFudE5hbWU6IHN0cmluZztcbiAgICAgICAgYXV0aEp3dD86IHN0cmluZztcbiAgICB9O1xuICAgIHBheW1lbnRNZXRob2RUb2tlbml6YXRpb25QYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICdicmFpbnRyZWU6YXBpVmVyc2lvbic6IHN0cmluZztcbiAgICAgICAgICAgICdicmFpbnRyZWU6YXV0aG9yaXphdGlvbkZpbmdlcnByaW50Jzogc3RyaW5nO1xuICAgICAgICAgICAgJ2JyYWludHJlZTptZXJjaGFudElkJzogc3RyaW5nO1xuICAgICAgICAgICAgJ2JyYWludHJlZTptZXRhZGF0YSc6IHN0cmluZztcbiAgICAgICAgICAgICdicmFpbnRyZWU6c2RrVmVyc2lvbic6IHN0cmluZztcbiAgICAgICAgICAgIGdhdGV3YXk6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgdG9rZW5pemF0aW9uVHlwZTogc3RyaW5nO1xuICAgIH07XG4gICAgc2hpcHBpbmdBZGRyZXNzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgcGhvbmVOdW1iZXJSZXF1aXJlZDogYm9vbGVhbjtcbiAgICB0cmFuc2FjdGlvbkluZm86IHtcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmc7XG4gICAgICAgIHRvdGFsUHJpY2U6IHN0cmluZztcbiAgICAgICAgdG90YWxQcmljZVN0YXR1czogVG90YWxQcmljZVN0YXR1c1R5cGU7XG4gICAgfTtcbn1cblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlR29vZ2xlUGF5bWVudENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZUdvb2dsZVBheW1lbnQ+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheW1lbnQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIGNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdChcbiAgICAgICAgb3B0aW9ucz86IEJyYWludHJlZUdvb2dsZVBheW1lbnREYXRhUmVxdWVzdE9wdGlvbnMsXG4gICAgKTogQnJhaW50cmVlR29vZ2xlUGF5bWVudERhdGFSZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheVRocmVlRFNlY3VyZSB7XG4gICAgdmVyaWZ5Q2FyZChvcHRpb25zOiBCcmFpbnRyZWVHb29nbGVQYXlUaHJlZURTZWN1cmVPcHRpb25zKTogUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVHb29nbGVQYXlUaHJlZURTZWN1cmVPcHRpb25zIHtcbiAgICBub25jZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGJpbjogc3RyaW5nO1xuICAgIHNob3dMb2FkZXI/OiBib29sZWFuO1xuICAgIG9uTG9va3VwQ29tcGxldGUoZGF0YTogQnJhaW50cmVlVGhyZWVEU2VjdXJlVmVyaWZpY2F0aW9uRGF0YSwgbmV4dDogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSAzRCBTZWN1cmVcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPFxuICAgIEJyYWludHJlZVRocmVlRFNlY3VyZSxcbiAgICBCcmFpbnRyZWVUaHJlZURTZWN1cmVDcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZSBleHRlbmRzIEJyYWludHJlZU1vZHVsZSB7XG4gICAgdmVyaWZ5Q2FyZChcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucyxcbiAgICAgICAgY2FsbGJhY2s/OiBCcmFpbnRyZWUzRFNWZXJpZnlDYXJkQ2FsbGJhY2ssXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPjtcbiAgICBjYW5jZWxWZXJpZnlDYXJkKCk6IFByb21pc2U8QnJhaW50cmVlVmVyaWZ5UGF5bG9hZD47XG4gICAgb248SyBleHRlbmRzIGtleW9mIEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwPihcbiAgICAgICAgZXZlbnQ6IEssXG4gICAgICAgIGhhbmRsZXI6IEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwW0tdLFxuICAgICk6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRDYWxsYmFjayA9IChcbiAgICB2ZXJpZnlFcnJvcjogQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZEVycm9yLFxuICAgIHBheWxvYWQ6IEJyYWludHJlZTNEU1ZlcmlmeUNhcmRQYXlsb2FkLFxuKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwIHtcbiAgICAnY3VzdG9tZXItY2FuY2VsZWQnOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRFcnJvciB7XG4gICAgY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRQYXlsb2FkIHtcbiAgICBub25jZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3JDb25maWcgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICB2ZXJzaW9uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnMge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgYW1vdW50OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgY2hhbGxlbmdlUmVxdWVzdGVkPzogYm9vbGVhbjtcbiAgICBzaG93TG9hZGVyPzogYm9vbGVhbjtcbiAgICBiaW4/OiBzdHJpbmc7XG4gICAgYWRkaXRpb25hbEluZm9ybWF0aW9uPzoge1xuICAgICAgICBhY3NXaW5kb3dTaXplPzogJzAxJyB8ICcwMicgfCAnMDMnIHwgJzA0JyB8ICcwNSc7XG4gICAgfTtcbiAgICBjb2xsZWN0RGV2aWNlRGF0YT86IGJvb2xlYW47XG4gICAgYWRkRnJhbWU/KFxuICAgICAgICBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgIGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsXG4gICAgICAgIGNhbmNlbDogKCkgPT4gUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPiB8IHVuZGVmaW5lZCxcbiAgICApOiB2b2lkO1xuICAgIHJlbW92ZUZyYW1lPygpOiB2b2lkO1xuICAgIG9uTG9va3VwQ29tcGxldGU/KGRhdGE6IEJyYWludHJlZVRocmVlRFNlY3VyZVZlcmlmaWNhdGlvbkRhdGEsIG5leHQ6ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZVZlcmlmaWNhdGlvbkRhdGEge1xuICAgIGxvb2t1cDoge1xuICAgICAgICB0aHJlZURTZWN1cmVWZXJzaW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwYXltZW50TWV0aG9kOiBCcmFpbnRyZWVWZXJpZnlQYXlsb2FkO1xuICAgIHJlcXVpcmVzVXNlckF1dGhlbnRpY2F0aW9uOiBib29sZWFuO1xuICAgIHRocmVlRFNlY3VyZUluZm86IHtcbiAgICAgICAgbGlhYmlsaXR5U2hpZnRQb3NzaWJsZTogYm9vbGVhbjtcbiAgICAgICAgbGlhYmlsaXR5U2hpZnRlZDogYm9vbGVhbjtcbiAgICB9O1xufVxuXG5leHBvcnQgZW51bSBCcmFpbnRyZWVPcmRlclN0YXR1cyB7XG4gICAgQ29tcGxldGVkID0gJ0NPTVBMRVRFRCcsXG4gICAgUGVuZGluZyA9ICdQRU5ESU5HJyxcbiAgICBGYWlsZWQgPSAnRkFJTEVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVPcmRlclN0YXR1c0RhdGEge1xuICAgIHN0YXR1czogQnJhaW50cmVlT3JkZXJTdGF0dXM7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBVUyBCYW5rIEFjY291bnQgKEFDSClcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVVzQmFua0FjY291bnRDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxCcmFpbnRyZWVVc0JhbmtBY2NvdW50PjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50IHtcbiAgICB0b2tlbml6ZShcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlVXNCYW5rQWNjb3VudFRva2VuaXphdGlvbk9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVVc0JhbmtBY2NvdW50VG9rZW5pemF0aW9uUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVVzQmFua0FjY291bnRUb2tlbml6YXRpb25PcHRpb25zIHtcbiAgICBiYW5rRGV0YWlsczogQnJhaW50cmVlVXNCYW5rQWNjb3VudERldGFpbHM7XG4gICAgbWFuZGF0ZVRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50VG9rZW5pemF0aW9uUmVzcG9uc2Uge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgZGV0YWlsczogQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50RGV0YWlscyB7XG4gICAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICAgIHJvdXRpbmdOdW1iZXI6IHN0cmluZztcbiAgICBvd25lcnNoaXBUeXBlOiBzdHJpbmc7XG4gICAgYWNjb3VudFR5cGU6IHN0cmluZztcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgYnVzaW5lc3NOYW1lPzogc3RyaW5nO1xuICAgIGJpbGxpbmdBZGRyZXNzOiB7XG4gICAgICAgIHN0cmVldEFkZHJlc3M6IHN0cmluZztcbiAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBzdHJpbmc7XG4gICAgICAgIGxvY2FsaXR5OiBzdHJpbmc7XG4gICAgICAgIHJlZ2lvbjogc3RyaW5nO1xuICAgICAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuLy8gVE9ETzogbW92ZSB0aGlzIGludGVyZmFjZSBpbiBzZXBhcmF0ZSB0eXBlcyBncm91cCBpZiBpdCB3aWxsIGJlIHVzZWQgaW4gYW5vdGhlciAobm90IEFDSCkgc3RyYXRlZ2llc1xuLy8gVGhpcyBzZWVtcyB0byBiZSBhbiBpbnRlcmZhY2Ugd2hpY2ggd2lsbCBiZSB1c2VkIGluIGRpZmZlcmVudCBwbGFjZXNcbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyB7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgZW1haWw/OiBzdHJpbmc7XG4gICAgcGF5ZXJJZD86IHN0cmluZztcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGU/OiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gICAgc2hpcHBpbmdBZGRyZXNzPzogQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzO1xuICAgIGJpbGxpbmdBZGRyZXNzPzogQnJhaW50cmVlQWRkcmVzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVBZGRyZXNzIHtcbiAgICBsaW5lMTogc3RyaW5nO1xuICAgIGxpbmUyOiBzdHJpbmc7XG4gICAgY2l0eTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzIGV4dGVuZHMgQnJhaW50cmVlQWRkcmVzcyB7XG4gICAgcmVjaXBpZW50TmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgbm9uLWluc3RhbnQgcGF5bWVudCBtZXRob2RzXG4gKlxuICovXG5leHBvcnQgZW51bSBOb25JbnN0YW50TG9jYWxQYXltZW50TWV0aG9kcyB7XG4gICAgVFJVU1RMWSA9ICd0cnVzdGx5Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRNZXRob2RSZWRpcmVjdEFjdGlvbiB7XG4gICAgYm9keToge1xuICAgICAgICBhZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZDoge1xuICAgICAgICAgICAgdHlwZTogJ29mZnNpdGVfcmVkaXJlY3QnO1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VybDogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZSB7XG4gICAgYm9keToge1xuICAgICAgICBhZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZDoge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG9yZGVyX2lkX3NhdmVkX3N1Y2Nlc3NmdWxseTogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRmFzdGxhbmVcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZUZhc3RsYW5lQ3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8XG4gICAgQnJhaW50cmVlRmFzdGxhbmUsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDb25maWdcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDb25maWcge1xuICAgIGF1dGhvcml6YXRpb246IHN0cmluZztcbiAgICBjbGllbnQ6IEJyYWludHJlZUNsaWVudDtcbiAgICBkZXZpY2VEYXRhPzogc3RyaW5nO1xuICAgIHN0eWxlcz86IEJyYWludHJlZUZhc3RsYW5lU3R5bGVzT3B0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lIHtcbiAgICBpZGVudGl0eTogQnJhaW50cmVlRmFzdGxhbmVJZGVudGl0eTtcbiAgICBwcm9maWxlOiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGU7XG4gICAgRmFzdGxhbmVDYXJkQ29tcG9uZW50OiAoXG4gICAgICAgIG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudE9wdGlvbnMsXG4gICAgKSA9PiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudD47XG4gICAgZXZlbnRzOiBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGUge1xuICAgIHNob3dDYXJkU2VsZWN0b3IoKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUNhcmRTZWxlY3RvclJlc3BvbnNlPjtcbiAgICBzaG93U2hpcHBpbmdBZGRyZXNzU2VsZWN0b3IoKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZVNoaXBwaW5nQWRkcmVzc1NlbGVjdG9yUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzU2VsZWN0b3JSZXNwb25zZSB7XG4gICAgc2VsZWN0aW9uQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBzZWxlY3RlZEFkZHJlc3M6IEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzIHtcbiAgICBuYW1lOiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVOYW1lO1xuICAgIHBob25lTnVtYmVyOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgZmlyc3ROYW1lPzogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIGNvbXBhbnk/OiBzdHJpbmc7XG4gICAgc3RyZWV0QWRkcmVzczogc3RyaW5nO1xuICAgIGV4dGVuZGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhbGl0eTogc3RyaW5nO1xuICAgIHJlZ2lvbjogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZU51bWVyaWM/OiBudW1iZXI7XG4gICAgY291bnRyeUNvZGVBbHBoYTI6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZUFscGhhMz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVOYW1lIHtcbiAgICBmdWxsTmFtZTogc3RyaW5nO1xuICAgIGZpcnN0TmFtZT86IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUNhcmRTZWxlY3RvclJlc3BvbnNlIHtcbiAgICBzZWxlY3Rpb25DaGFuZ2VkOiBib29sZWFuO1xuICAgIHNlbGVjdGVkQ2FyZDogQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gICAgYnJhaW50cmVlRmFzdGxhbmU6IEJyYWludHJlZUZhc3RsYW5lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lSWRlbnRpdHkge1xuICAgIGxvb2t1cEN1c3RvbWVyQnlFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUxvb2t1cEN1c3RvbWVyQnlFbWFpbFJlc3VsdD47XG4gICAgdHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyhcbiAgICAgICAgY3VzdG9tZXJJZDogc3RyaW5nLFxuICAgICAgICBvcHRpb25zPzogQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvbk9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uQ3VzdG9tZXJSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lTG9va3VwQ3VzdG9tZXJCeUVtYWlsUmVzdWx0IHtcbiAgICBjdXN0b21lckNvbnRleHRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uT3B0aW9ucyB7XG4gICAgc3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24ge1xuICAgIHJvb3Q/OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk/OiBzdHJpbmc7XG4gICAgICAgIGVycm9yQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplQmFzZT86IHN0cmluZztcbiAgICAgICAgcGFkZGluZz86IHN0cmluZztcbiAgICAgICAgcHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIH07XG4gICAgaW5wdXQ/OiB7XG4gICAgICAgIGJvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICAgICAgYm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvY3VzQm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIHRleHRDb2xvckJhc2U/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0b2dnbGU/OiB7XG4gICAgICAgIGNvbG9yUHJpbWFyeT86IHN0cmluZztcbiAgICAgICAgY29sb3JTZWNvbmRhcnk/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0ZXh0Pzoge1xuICAgICAgICBib2R5Pzoge1xuICAgICAgICAgICAgY29sb3I/OiBzdHJpbmc7XG4gICAgICAgICAgICBmb250U2l6ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgY2FwdGlvbj86IHtcbiAgICAgICAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgICAgICAgZm9udFNpemU/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBicmFuZGluZz86IHN0cmluZzsgLy8gJ2xpZ2h0JyB8ICdkYXJrJ1xufVxuXG5leHBvcnQgZW51bSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUge1xuICAgIFNVQ0NFRURFRCA9ICdzdWNjZWVkZWQnLFxuICAgIEZBSUxFRCA9ICdmYWlsZWQnLFxuICAgIENBTkNFTEVEID0gJ2NhbmNlbGxlZCcsXG4gICAgVU5SRUNPR05JWkVEID0gJ3VucmVjb2duaXplZCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvbkN1c3RvbWVyUmVzdWx0IHtcbiAgICBhdXRoZW50aWNhdGlvblN0YXRlOiBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgcHJvZmlsZURhdGE6IEJyYWludHJlZUZhc3RsYW5lUHJvZmlsZURhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVQcm9maWxlRGF0YSB7XG4gICAgZmFzdGxhbmVDdXN0b21lckF1dGhBc3NlcnRpb25Ub2tlbjogc3RyaW5nO1xuICAgIGZhc3RsYW5lQ3VzdG9tZXJJZDogc3RyaW5nO1xuICAgIHNoaXBwaW5nQWRkcmVzczogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzO1xuICAgIGNhcmQ6IEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQ7XG4gICAgbmFtZTogQnJhaW50cmVlRmFzdGxhbmVOYW1lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lTmFtZSB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3Mge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGZpcnN0TmFtZT86IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbiAgICBjb21wYW55Pzogc3RyaW5nO1xuICAgIHN0cmVldEFkZHJlc3M6IHN0cmluZztcbiAgICBleHRlbmRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYWxpdHk6IHN0cmluZztcbiAgICByZWdpb246IHN0cmluZztcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGVOdW1lcmljPzogbnVtYmVyO1xuICAgIGNvdW50cnlDb2RlQWxwaGEyOiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGVBbHBoYTM/OiBzdHJpbmc7XG4gICAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDYXJkUGF5bWVudFNvdXJjZSB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnk6IHN0cmluZztcbiAgICBsYXN0RGlnaXRzOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBiaWxsaW5nQWRkcmVzczogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzO1xuICAgIGJpbkRldGFpbHM/OiB7XG4gICAgICAgIGJpbjogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U291cmNlIHtcbiAgICBjYXJkOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRQYXltZW50U291cmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQge1xuICAgIGlkOiBzdHJpbmc7IC8vIFRoaXMgaXMgdGhlIG5vbmNlIC8gdG9rZW5cbiAgICBwYXltZW50U291cmNlOiBCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRTb3VyY2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyB7XG4gICAgc3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbjtcbiAgICBmaWVsZHM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudEZpZWxkcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnRGaWVsZHMge1xuICAgIGNhcmRob2xkZXJOYW1lPzoge1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xuICAgIHBob25lTnVtYmVyPzoge1xuICAgICAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhc3RsYW5lU3R5bGVzU2V0dGluZ3Mge1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NQYWRkaW5nPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemU/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJXaWR0aD86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2U/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzVGV4dENvbG9yQmFzZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5Pzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZUJyYW5kaW5nU2V0dGluZ3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVUb2tlbml6ZU9wdGlvbnMge1xuICAgIG5hbWU/OiB7XG4gICAgICAgIGZ1bGxOYW1lOiBzdHJpbmc7XG4gICAgfTtcbiAgICBiaWxsaW5nQWRkcmVzcz86IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcztcbiAgICBzaGlwcGluZ0FkZHJlc3M/OiBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVFdmVudHMge1xuICAgIGFwbVNlbGVjdGVkOiAob3B0aW9uczogQnJhaW50cmVlRmFzdGxhbmVBcG1TZWxlY3RlZEV2ZW50T3B0aW9ucykgPT4gdm9pZDtcbiAgICBlbWFpbFN1Ym1pdHRlZDogKG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lRW1haWxFbnRlcmVkRXZlbnRPcHRpb25zKSA9PiB2b2lkO1xuICAgIG9yZGVyUGxhY2VkOiAob3B0aW9uczogQnJhaW50cmVlRmFzdGxhbmVPcmRlclBsYWNlZEV2ZW50T3B0aW9ucykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgY29udGV4dF90eXBlOiAnY3NfaWQnO1xuICAgIGNvbnRleHRfaWQ6IHN0cmluZzsgLy8gY2hlY2tvdXQgc2Vzc2lvbiBpZFxuICAgIHBhZ2VfdHlwZTogJ2NoZWNrb3V0X3BhZ2UnO1xuICAgIHBhZ2VfbmFtZTogc3RyaW5nOyAvLyB0aXRsZSBvZiB0aGUgY2hlY2tvdXQgaW5pdGlhdGlvbiBwYWdlXG4gICAgcGFydG5lcl9uYW1lOiAnYmlnYyc7XG4gICAgdXNlcl90eXBlOiAnc3RvcmVfbWVtYmVyJyB8ICdzdG9yZV9ndWVzdCc7IC8vIHR5cGUgb2YgdGhlIHVzZXIgb24gdGhlIG1lcmNoYW50IHNpdGVcbiAgICBzdG9yZV9pZDogc3RyaW5nO1xuICAgIG1lcmNoYW50X25hbWU6IHN0cmluZztcbiAgICBleHBlcmltZW50OiBzdHJpbmc7IC8vIHN0cmluZ2lmeSBKU09OIG9iamVjdCBcIlt7IHRyZWF0bWVudF9ncm91cDogJ3Rlc3QnIHwgJ2NvbnRyb2wnIH1dXCJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUFwbVNlbGVjdGVkRXZlbnRPcHRpb25zXG4gICAgZXh0ZW5kcyBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgYXBtX3Nob3duOiAnMCcgfCAnMSc7IC8vIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIHRoZSBjaGVja291dCBwYWdlXG4gICAgYXBtX2xpc3Q6IHN0cmluZzsgLy8gbGlzdCBvZiBhbHRlcm5hdGUgcGF5bWVudCBzaG93biBvbiBjaGVja291dCBwYWdlXG4gICAgYXBtX3NlbGVjdGVkOiBzdHJpbmc7IC8vIGFsdGVybmF0ZSBwYXltZW50IG1ldGhvZCBzZWxlY3RlZCAvIG1ldGhvZElkXG4gICAgYXBtX2xvY2F0aW9uOiAncHJlLWVtYWlsIHNlY3Rpb24nIHwgJ3BheW1lbnQgc2VjdGlvbic7IC8vIHBsYWNlbWVudCBvZiBBUE0sIHdoZXRoZXIgaXQgYmUgYWJvdmUgdGhlIGVtYWlsIGVudHJ5IG9yIGluIHRoZSByYWRpbyBidXR0b25zXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVFbWFpbEVudGVyZWRFdmVudE9wdGlvbnNcbiAgICBleHRlbmRzIEJyYWludHJlZUZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICB1c2VyX2VtYWlsX3NhdmVkOiBib29sZWFuOyAvLyBzaG93cyB3aGV0aGVyIGNoZWNrb3V0IHdhcyBsb2FkZWQgd2l0aCBvciB3aXRob3V0IGEgc2F2ZWQgZW1haWxcbiAgICBhcG1fc2hvd246ICcwJyB8ICcxJzsgLy8gYWx0ZXJuYXRlIHBheW1lbnQgc2hvd24gb24gdGhlIGNoZWNrb3V0IHBhZ2VcbiAgICBhcG1fbGlzdDogc3RyaW5nOyAvLyBsaXN0IG9mIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIGNoZWNrb3V0IHBhZ2UgJ2FwcGxlcGF5LGdvb2dsZXBheSxwYXlwYWwnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVPcmRlclBsYWNlZEV2ZW50T3B0aW9uc1xuICAgIGV4dGVuZHMgQnJhaW50cmVlRmFzdGxhbmVFdmVudENvbW1vbk9wdGlvbnMge1xuICAgIHNlbGVjdGVkX3BheW1lbnRfbWV0aG9kOiBzdHJpbmc7XG4gICAgY3VycmVuY3lfY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudCB7XG4gICAgKG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudE9wdGlvbnMpOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnQ7XG4gICAgZ2V0UGF5bWVudFRva2VuKFxuICAgICAgICBvcHRpb25zOiBCcmFpbnRyZWVGYXN0bGFuZVRva2VuaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQ+O1xuICAgIHJlbmRlcihlbGVtZW50OiBzdHJpbmcpOiB2b2lkO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgUGF5bG9hZCBWZXJpZmljYXRpb25cbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVmVyaWZ5UGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBkZXRhaWxzOiB7XG4gICAgICAgIGNhcmRUeXBlOiBzdHJpbmc7XG4gICAgICAgIGxhc3RGb3VyOiBzdHJpbmc7XG4gICAgICAgIGxhc3RUd286IHN0cmluZztcbiAgICB9O1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgbGlhYmlsaXR5U2hpZnRQb3NzaWJsZTogYm9vbGVhbjtcbiAgICBsaWFiaWxpdHlTaGlmdGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRXJyb3JzXG4gKlxuICovXG5leHBvcnQgZW51bSBCcmFpbnRyZWVFcnJvclR5cGUge1xuICAgIEN1c3RvbWVyID0gJ0NVU1RPTUVSJyxcbiAgICBNZXJjaGFudCA9ICdNRVJDSEFOVCcsXG4gICAgTmV0d29yayA9ICdORVRXT1JLJyxcbiAgICBJbnRlcm5hbCA9ICdJTlRFUk5BTCcsXG4gICAgVW5rbm93biA9ICdVTktOT1dOJyxcbn1cblxuZXhwb3J0IGVudW0gQnJhaW50cmVlRXJyb3JDb2RlIHtcbiAgICBLb3VudE5vdEVuYWJsZWQgPSAnREFUQV9DT0xMRUNUT1JfS09VTlRfTk9UX0VOQUJMRUQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yVHlwZTtcbiAgICBjb2RlOiBzdHJpbmcgfCBCcmFpbnRyZWVFcnJvckNvZGUuS291bnROb3RFbmFibGVkO1xuICAgIGRldGFpbHM/OiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVJlZGlyZWN0RXJyb3Ige1xuICAgIGJvZHk6IHtcbiAgICAgICAgYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmw6IHN0cmluZztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIEJpbGxpbmdBZGRyZXNzIGV4dGVuZHMgQWRkcmVzcyB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBlbWFpbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyB7XG4gICAgVmlzYSA9ICd2aXNhJyxcbiAgICBNYXN0ZXJjYXJkID0gJ21hc3RlcmNhcmQnLFxuICAgIEFtZXJpY2FuRXhwcmVzcyA9ICdhbWVyaWNhbi1leHByZXNzJyxcbiAgICBEaW5lcnNDbHViID0gJ2RpbmVycy1jbHViJyxcbiAgICBEaXNjb3ZlciA9ICdkaXNjb3ZlcicsXG4gICAgSmNiID0gJ2pjYicsXG4gICAgVW5pb25QYXkgPSAndW5pb24tcGF5JyxcbiAgICBNYWVzdHJvID0gJ21hZXN0cm8nLFxuICAgIEVsbyA9ICdlbG8nLFxuICAgIE1pciA9ICdtaXInLFxuICAgIEhpcGVyID0gJ2hpcGVyJyxcbiAgICBIaXBlcmNhcmQgPSAnaGlwZXJjYXJkJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCaWxsaW5nQWRkcmVzc1N0YXRlIHtcbiAgICBkYXRhPzogQmlsbGluZ0FkZHJlc3M7XG4gICAgZXJyb3JzOiBCaWxsaW5nQWRkcmVzc0Vycm9yc1N0YXRlO1xuICAgIHN0YXR1c2VzOiBCaWxsaW5nQWRkcmVzc1N0YXR1c2VzU3RhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmlsbGluZ0FkZHJlc3NFcnJvcnNTdGF0ZSB7XG4gICAgbG9hZEVycm9yPzogRXJyb3I7XG4gICAgdXBkYXRlRXJyb3I/OiBFcnJvcjtcbiAgICBjb250aW51ZUFzR3Vlc3RFcnJvcj86IEVycm9yO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbGxpbmdBZGRyZXNzU3RhdHVzZXNTdGF0ZSB7XG4gICAgaXNMb2FkaW5nPzogYm9vbGVhbjtcbiAgICBpc1VwZGF0aW5nPzogYm9vbGVhbjtcbiAgICBpc0NvbnRpbnVpbmdBc0d1ZXN0PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVSZXF1ZXN0RGF0YSB7XG4gICAgZGF0YToge1xuICAgICAgICBjcmVkaXRDYXJkOiB7XG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzcz86IHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGxvY2FsaXR5OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgY291bnRyeU5hbWU6IHN0cmluZztcbiAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgc3RyZWV0QWRkcmVzczogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICBjdnY/OiBzdHJpbmc7XG4gICAgICAgICAgICBleHBpcmF0aW9uRGF0ZTogc3RyaW5nO1xuICAgICAgICAgICAgbnVtYmVyOiBzdHJpbmc7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGJvb2xlYW47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgZW5kcG9pbnQ6IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IEhvc3RlZEluc3RydW1lbnQsIE5vbmNlSW5zdHJ1bWVudCB9IGZyb20gJy4vcGF5bWVudCc7XG5cbnR5cGUgUGF5bWVudEluc3RydW1lbnQgPSBDYXJkSW5zdHJ1bWVudCB8IEFjY291bnRJbnN0cnVtZW50IHwgSG9zdGVkSW5zdHJ1bWVudCB8IE5vbmNlSW5zdHJ1bWVudDtcblxuZXhwb3J0IGRlZmF1bHQgUGF5bWVudEluc3RydW1lbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUluc3RydW1lbnQge1xuICAgIGJpZ3BheVRva2VuOiBzdHJpbmc7XG4gICAgZGVmYXVsdEluc3RydW1lbnQ6IGJvb2xlYW47XG4gICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzOiBib29sZWFuO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSB7XG4gICAgQ1ZWID0gJ2N2dicsXG4gICAgUEFOID0gJ3BhbicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlSW5zdHJ1bWVudCB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnlNb250aDogc3RyaW5nO1xuICAgIGV4cGlyeVllYXI6IHN0cmluZztcbiAgICBpaW46IHN0cmluZztcbiAgICBsYXN0NDogc3RyaW5nO1xuICAgIHR5cGU6ICdjYXJkJztcbiAgICB1bnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25Nb2RlOiBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlO1xufVxuXG5pbnRlcmZhY2UgQmFzZUFjY291bnRJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUluc3RydW1lbnQge1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6ICdhY2NvdW50JyB8ICdiYW5rJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XG4gICAgbWV0aG9kOiAncGF5cGFsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2hJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBpc3N1ZXI6IHN0cmluZztcbiAgICBhY2NvdW50TnVtYmVyOiBzdHJpbmc7XG4gICAgdHlwZTogJ2JhbmsnO1xuICAgIG1ldGhvZDogJ2FjaCcgfCAnZWNwJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYW5rSW5zdHJ1bWVudCBleHRlbmRzIEJhc2VBY2NvdW50SW5zdHJ1bWVudCB7XG4gICAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICAgIGlzc3Vlcjogc3RyaW5nO1xuICAgIGliYW46IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICB0eXBlOiAnYmFuayc7XG59XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJbnN0cnVtZW50ID0gUGF5UGFsSW5zdHJ1bWVudCB8IEJhbmtJbnN0cnVtZW50IHwgQWNoSW5zdHJ1bWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBWYXVsdEFjY2Vzc1Rva2VuIHtcbiAgICB2YXVsdEFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gICAgdmF1bHRBY2Nlc3NFeHBpcnk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uQ29udGV4dCB7XG4gICAgY3VzdG9tZXJJZDogbnVtYmVyO1xuICAgIHN0b3JlSWQ6IHN0cmluZztcbiAgICBjdXJyZW5jeUNvZGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdHJ1bWVudFJlcXVlc3RDb250ZXh0IGV4dGVuZHMgU2Vzc2lvbkNvbnRleHQge1xuICAgIGF1dGhUb2tlbjogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgZ2V0RmFzdGxhbmVTdHlsZXMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQ3VzdG9tZXJDcmVkZW50aWFscyxcbiAgICBDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgIEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgV2l0aEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVVdGlscyBmcm9tICcuL2JyYWludHJlZS1mYXN0bGFuZS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneSBpbXBsZW1lbnRzIEN1c3RvbWVyU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVGYXN0bGFuZVV0aWxzOiBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoe1xuICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUsXG4gICAgfTogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gYXdhaXQgdGhpcy5nZXRWYWxpZFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCB7IGlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQsIGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZCB9ID1cbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MgPSBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWRcbiAgICAgICAgICAgID8gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmZhc3RsYW5lU3R5bGVzXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQgPSAhIWlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYXN0bGFuZVN0eWxlcyA9IGdldEZhc3RsYW5lU3R5bGVzKFxuICAgICAgICAgICAgICAgICAgICBwYXlwYWxGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVmYXN0bGFuZT8uc3R5bGVzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuaW5pdGlhbGl6ZUJyYWludHJlZUZhc3RsYW5lT3JUaHJvdyhcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgZmFzdGxhbmVTdHlsZXMsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgLy8gSW5mbzogRG8gbm90IHRocm93IGFueXRoaW5nIGhlcmUgdG8gYXZvaWQgYmxvY2tpbmcgY3VzdG9tZXIgZnJvbSBwYXNzaW5nIGNoZWNrb3V0IGZsb3dcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChcbiAgICAgICAgb3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkLCBjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwiY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFja1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBhbmQgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lck9yVGhyb3coKTtcblxuICAgICAgICBpZiAodGhpcy5pc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkICYmIGN1c3RvbWVyLmlzR3Vlc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdyA9IGF3YWl0IHRoaXMuc2hvdWxkUnVuQXV0aGVudGljYXRpb25GbG93KCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5ydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBtZXRob2QgYWZ0ZXIgQS9CIHRlc3RpbmcgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgcHJpbWFyeU1ldGhvZElkID0gJ2JyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXQnO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSBzaG91bGQgbG9hZCBwYXltZW50IG1ldGhvZCBlYWNoIHRpbWUgdG8gZGV0ZWN0IGlmIHRoZSB1c2VyXG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgaW4gYSB0ZXN0IG9yIGluIGEgY29udHJvbCBncm91cFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKHByaW1hcnlNZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KHByaW1hcnlNZXRob2RJZCk7XG5cbiAgICAgICAgICAgIC8vIEluZm86IHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBmbG93IG9mIEEvQiB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgICAgICAgICAvLyB3aGVuIHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQgaXMgdHJ1ZSwgdGhlIGxvb2t1cCBQYXlQYWwgQ29ubmVjdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCxcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBBY2NlbGVyYXRlZENoZWNrb3V0IHNob3VsZCBub3QgYmUgYXZhaWxhYmxlIGZvciB0aGUgY3VzdG9tZXJcbiAgICAgICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uc2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dCB8fCBmYWxzZTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRWYWxpZFBheW1lbnRNZXRob2RPclRocm93KFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8UGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+PiB7XG4gICAgICAgIGxldCB2YWxpZFBheW1lbnRNZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QodmFsaWRQYXltZW50TWV0aG9kSWQpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHZhbGlkUGF5bWVudE1ldGhvZElkID1cbiAgICAgICAgICAgICAgICBtZXRob2RJZCA9PT0gJ2JyYWludHJlZScgPyAnYnJhaW50cmVlYWNjZWxlcmF0ZWRjaGVja291dCcgOiAnYnJhaW50cmVlJztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZCh2YWxpZFBheW1lbnRNZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4odmFsaWRQYXltZW50TWV0aG9kSWQpO1xuICAgIH1cbn1cbiIsImludGVyZmFjZSBDb29raWVPcHRpb25zIHtcbiAgICBleHBpcmVzPzogRGF0ZTtcbiAgICBwYXRoPzogc3RyaW5nO1xuICAgIGRvbWFpbj86IHN0cmluZztcbiAgICBzZWN1cmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29raWVTdG9yYWdlIHtcbiAgICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCBjb29raWVLZXkgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoYCR7bmFtZX1gKX09YDtcbiAgICAgICAgY29uc3QgY29va2llID0gZG9jdW1lbnQuY29va2llO1xuXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKGNvb2tpZUtleSk7XG5cbiAgICAgICAgaWYgKGZpcnN0SW5kZXggPiAtMSkge1xuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKCc7JywgZmlyc3RJbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gY29va2llLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZyhmaXJzdEluZGV4ICsgY29va2llS2V5Lmxlbmd0aCwgbGFzdEluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7IHNlY3VyZTogdHJ1ZSB9KSB7XG4gICAgICAgIGxldCBjb29raWVUZXh0ID0gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcblxuICAgICAgICBjb25zdCB7IGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmIChleHBpcmVzKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtleHBpcmVzLnRvVVRDU3RyaW5nKCl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAvLyBpbmZvOiBkZWZhdWx0IGNvb2tpZSBleHBpcmF0aW9uIHRpbWUgYWZ0ZXIgc2V0dXBcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSA2MDtcblxuICAgICAgICAgICAgbm93LnNldFRpbWUobm93LmdldFRpbWUoKSArIG1pbnV0ZXMgKiA2MCAqIDEwMDApO1xuXG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtub3cudG9VVENTdHJpbmcoKX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgcGF0aD0ke3BhdGh9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgZG9tYWluPSR7ZG9tYWlufWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9ICc7IHNlY3VyZSc7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWVUZXh0O1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zPzogQ29va2llT3B0aW9ucykge1xuICAgICAgICBDb29raWVTdG9yYWdlLnNldChuYW1lLCAnJywgeyBleHBpcmVzOiBuZXcgRGF0ZSgwKSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc0VxdWFsLCBvbWl0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVGYXN0bGFuZSxcbiAgICBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3MsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLFxuICAgIEJyYWludHJlZUZhc3RsYW5lUHJvZmlsZURhdGEsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4gICAgQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIENhcmRJbnN0cnVtZW50LFxuICAgIEN1c3RvbWVyQWRkcmVzcyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IsXG4gICAgVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBDb29raWVTdG9yYWdlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9zdG9yYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlRmFzdGxhbmVVdGlscyB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVGYXN0bGFuZT86IEJyYWludHJlZUZhc3RsYW5lO1xuICAgIHByaXZhdGUgbWV0aG9kSWQ/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGdldERldmljZVNlc3Npb25JZCgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBjYXJ0ID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2FydCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRTZXNzaW9uSWQoY2FydD8uaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSW5pdGlhbGl6YXRpb24gbWV0aG9kXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBpbml0aWFsaXplQnJhaW50cmVlRmFzdGxhbmVPclRocm93KFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBzdHlsZXM/OiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbixcbiAgICApIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnQoKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmUgPSBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVGYXN0bGFuZShcbiAgICAgICAgICAgIGNhcnQ/LmlkLFxuICAgICAgICAgICAgY29uZmlnLnRlc3RNb2RlLFxuICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEJyYWludHJlZUZhc3RsYW5lT3JUaHJvdygpOiBCcmFpbnRyZWVGYXN0bGFuZSB7XG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVGYXN0bGFuZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVGYXN0bGFuZTtcbiAgICB9XG5cbiAgICBnZXRCcmFpbnRyZWVGYXN0bGFuZUNvbXBvbmVudE9yVGhyb3coKTogQnJhaW50cmVlRmFzdGxhbmVbJ0Zhc3RsYW5lQ2FyZENvbXBvbmVudCddIHtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlRmFzdGxhbmUgPSB0aGlzLmdldEJyYWludHJlZUZhc3RsYW5lT3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBicmFpbnRyZWVGYXN0bGFuZS5GYXN0bGFuZUNhcmRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBBdXRoZW50aWNhdGlvbiBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIC8vIFJlbW92ZSB0aGlzIHJ1bGUgZGlzYWJsaW5nIGFmdGVyIG1ldGhvZCByZWZhY3RvclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgYXN5bmMgcnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyhcbiAgICAgICAgZW1haWw/OiBzdHJpbmcsXG4gICAgICAgIHNob3VsZFNldFNoaXBwaW5nT3B0aW9uPzogYm9vbGVhbixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZElkID0gdGhpcy5nZXRNZXRob2RJZE9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IGJyYWludHJlZUZhc3RsYW5lID0gdGhpcy5nZXRCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbG9va3VwQ3VzdG9tZXJCeUVtYWlsLCB0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93IH0gPSBicmFpbnRyZWVGYXN0bGFuZS5pZGVudGl0eTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgeyBpc0Zhc3RsYW5lU2hpcHBpbmdPcHRpb25BdXRvU2VsZWN0RW5hYmxlZCB9ID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKVxuICAgICAgICAgICAgICAgICAgICAuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgICAgICBjb25zdCBjdXN0b21lckVtYWlsID0gZW1haWwgfHwgY3VzdG9tZXI/LmVtYWlsIHx8IGJpbGxpbmdBZGRyZXNzPy5lbWFpbCB8fCAnJztcblxuICAgICAgICAgICAgY29uc3QgeyBjdXN0b21lckNvbnRleHRJZCB9ID0gYXdhaXQgbG9va3VwQ3VzdG9tZXJCeUVtYWlsKGN1c3RvbWVyRW1haWwpO1xuXG4gICAgICAgICAgICBpZiAoIWN1c3RvbWVyQ29udGV4dElkKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5mbzogd2Ugc2hvdWxkIGNsZWFuIHVwIHByZXZpb3VzIGV4cGVyaWVuY2Ugd2l0aCBkZWZhdWx0IGRhdGEgYW5kIHJlbGF0ZWQgYXV0aGVudGljYXRpb25TdGF0ZVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGU6IEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5VTlJFQ09HTklaRUQsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NlczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRzOiBbXSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVNlc3Npb25JZFRvQ29va2llcyhjYXJ0LmlkKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvblN0YXRlLCBwcm9maWxlRGF0YSB9ID0gYXdhaXQgdHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyhcbiAgICAgICAgICAgICAgICBjdXN0b21lckNvbnRleHRJZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBob25lTnVtYmVyID0gcHJvZmlsZURhdGE/LnNoaXBwaW5nQWRkcmVzcz8ucGhvbmVOdW1iZXIgfHwgJyc7XG5cbiAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvblN0YXRlID09PSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUuQ0FOQ0VMRUQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50czogW10sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNlc3Npb25JZEZyb21Db29raWVzKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzc2VzID1cbiAgICAgICAgICAgICAgICB0aGlzLm1hcFBheVBhbFRvQmNBZGRyZXNzKFtwcm9maWxlRGF0YS5zaGlwcGluZ0FkZHJlc3NdLCBbcGhvbmVOdW1iZXJdKSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEJpbGxpbmdBZGRyZXNzID0gdGhpcy5nZXRQYXlQYWxCaWxsaW5nQWRkcmVzc2VzKHByb2ZpbGVEYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzZXMgPSBwYXlwYWxCaWxsaW5nQWRkcmVzc1xuICAgICAgICAgICAgICAgID8gdGhpcy5tYXBQYXlQYWxUb0JjQWRkcmVzcyhbcGF5cGFsQmlsbGluZ0FkZHJlc3NdLCBbcGhvbmVOdW1iZXJdKVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBjb25zdCBpbnN0cnVtZW50cyA9IHByb2ZpbGVEYXRhLmNhcmRcbiAgICAgICAgICAgICAgICA/IHRoaXMubWFwUGF5UGFsVG9CY0luc3RydW1lbnQobWV0aG9kSWQsIFtwcm9maWxlRGF0YS5jYXJkXSlcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gdGhpcy5tZXJnZVNoaXBwaW5nQW5kQmlsbGluZ0FkZHJlc3NlcyhcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NlcyxcbiAgICAgICAgICAgICAgICBiaWxsaW5nQWRkcmVzc2VzLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5zYXZlU2Vzc2lvbklkVG9Db29raWVzKGNhcnQuaWQpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUsXG4gICAgICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgICAgIGluc3RydW1lbnRzLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChiaWxsaW5nQWRkcmVzc2VzLmxlbmd0aCA+IDAgJiYgY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzZXNbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcmVmaWxsIGJpbGxpbmcgZm9ybSBpZiBvbmx5IGRpZ2l0YWwgaXRlbXMgaW4gY2FydCB3aXRoIGJpbGxpbmcgZGF0YSBhbmQgZmlyc3ROYW1lIGFuZCBsYXN0TmFtZVxuICAgICAgICAgICAgLy8gZnJvbSBzaGlwcGluZ0FkZHJlc3NlcyBiZWNhdXNlIHRoZXJlIGFyZSBlbXB0eSBpbiBiaWxsaW5nXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3Nlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgY2FydC5saW5lSXRlbXMuZGlnaXRhbEl0ZW1zLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lIH0gPSBhZGRyZXNzZXNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZGlnaXRhbEl0ZW1CaWxsaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5iaWxsaW5nQWRkcmVzc2VzWzBdLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoZGlnaXRhbEl0ZW1CaWxsaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNoaXBwaW5nQWRkcmVzc2VzLmxlbmd0aCA+IDAgJiYgY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3Nlc1swXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2V0U2hpcHBpbmdPcHRpb24gJiYgaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTaGlwcGluZ09wdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCBmaWd1cmUgb3V0IHdoYXQgdG8gZG8gaGVyZVxuICAgICAgICAgICAgLy8gVE9ETzogYmVjYXVzZSB3ZSBzaG91bGQgbm90IHRvIHN0b3AgdGhlIGZsb3cgaWYgdGhlIGVycm9yIG9jY3VycyBvbiBwYXlwYWwgc2lkZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTZXNzaW9uIGlkIG1hbmFnZW1lbnRcbiAgICAgKlxuICAgICAqL1xuICAgIGdldFNlc3Npb25JZEZyb21Db29raWVzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDb29raWVTdG9yYWdlLmdldCgnYmMtZmFzdGxhbmUtc2Vzc2lvbklkJykgfHwgJyc7XG4gICAgfVxuXG4gICAgc2F2ZVNlc3Npb25JZFRvQ29va2llcyhzZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBleHBpcmVzID0gbmV3IERhdGUoKTtcblxuICAgICAgICBleHBpcmVzLnNldERhdGUoZXhwaXJlcy5nZXREYXRlKCkgKyAxNCk7IC8vIDIgd2Vla3MgZXhwaXJ5XG5cbiAgICAgICAgQ29va2llU3RvcmFnZS5zZXQoJ2JjLWZhc3RsYW5lLXNlc3Npb25JZCcsIHNlc3Npb25JZCwge1xuICAgICAgICAgICAgZXhwaXJlcyxcbiAgICAgICAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlU2Vzc2lvbklkRnJvbUNvb2tpZXMoKTogdm9pZCB7XG4gICAgICAgIENvb2tpZVN0b3JhZ2UucmVtb3ZlKCdiYy1mYXN0bGFuZS1zZXNzaW9uSWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCB0byBCQyBkYXRhIG1hcHBlcnNcbiAgICAgKlxuICAgICAqICovXG4gICAgbWFwUGF5UGFsVG9CY0luc3RydW1lbnQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGluc3RydW1lbnRzPzogQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudFtdLFxuICAgICk6IENhcmRJbnN0cnVtZW50W10gfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoIWluc3RydW1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudHMubWFwKChpbnN0cnVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGlkLCBwYXltZW50U291cmNlIH0gPSBpbnN0cnVtZW50O1xuICAgICAgICAgICAgY29uc3QgeyBicmFuZCwgZXhwaXJ5LCBsYXN0RGlnaXRzLCBiaW5EZXRhaWxzIH0gPSBwYXltZW50U291cmNlLmNhcmQ7XG5cbiAgICAgICAgICAgIGNvbnN0IFtleHBpcnlZZWFyLCBleHBpcnlNb250aF0gPSBleHBpcnkuc3BsaXQoJy0nKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiaWdwYXlUb2tlbjogaWQsXG4gICAgICAgICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEluc3RydW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGV4cGlyeU1vbnRoLFxuICAgICAgICAgICAgICAgIGV4cGlyeVllYXIsXG4gICAgICAgICAgICAgICAgaWluOiBiaW5EZXRhaWxzPy5iaW4gfHwgJycsXG4gICAgICAgICAgICAgICAgbGFzdDQ6IGxhc3REaWdpdHMsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgdHJ1c3RlZFNoaXBwaW5nQWRkcmVzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2NhcmQnLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvbk1vZGU6IFVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUuUEFOLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBQYXlQYWxUb0JjQWRkcmVzcyhcbiAgICAgICAgYWRkcmVzc2VzPzogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzW10sXG4gICAgICAgIHBob25lcz86IHN0cmluZ1tdLFxuICAgICk6IEN1c3RvbWVyQWRkcmVzc1tdIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvdW50cmllcyA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENvdW50cmllcygpIHx8IFtdO1xuXG4gICAgICAgIGNvbnN0IGdldENvdW50cnlOYW1lQnlDb3VudHJ5Q29kZSA9IChjb3VudHJ5Q29kZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkQ291bnRyeSA9IGNvdW50cmllcy5maW5kKChjb3VudHJ5KSA9PiBjb3VudHJ5LmNvZGUgPT09IGNvdW50cnlDb2RlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWRDb3VudHJ5Py5uYW1lIHx8ICcnO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBhZGRyZXNzZXMubWFwKChhZGRyZXNzKSA9PiAoe1xuICAgICAgICAgICAgaWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICB0eXBlOiAncGF5cGFsLWFkZHJlc3MnLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSB8fCAnJyxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgY29tcGFueTogYWRkcmVzcy5jb21wYW55IHx8ICcnLFxuICAgICAgICAgICAgYWRkcmVzczE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3MyOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyB8fCAnJyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2U6IGFkZHJlc3MucmVnaW9uLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5OiBnZXRDb3VudHJ5TmFtZUJ5Q291bnRyeUNvZGUoYWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMiksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMixcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgICAgIHBob25lOiAocGhvbmVzICYmIHBob25lc1swXSkgfHwgJycsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IFtdLFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBHZXQgUGF5UGFsIGJpbGxpbmcgYWRkcmVzc2VzIGZyb20gc3RvcmVkIGJyYWludHJlZSBpbnN0cnVtZW50cyBpbmZvXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgZ2V0UGF5UGFsQmlsbGluZ0FkZHJlc3NlcyhcbiAgICAgICAgcHJvZmlsZURhdGE/OiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVEYXRhLFxuICAgICk6IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHsgY2FyZCwgbmFtZSB9ID0gcHJvZmlsZURhdGEgfHwge307XG5cbiAgICAgICAgaWYgKCFjYXJkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUgfSA9IGNhcmQucGF5bWVudFNvdXJjZS5jYXJkLmJpbGxpbmdBZGRyZXNzO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZTogZ2l2ZW5fbmFtZSwgbGFzdE5hbWU6IHN1cm5hbWUgfSA9IG5hbWUgfHwge307XG4gICAgICAgIGNvbnN0IHsgc2hpcHBpbmdBZGRyZXNzIH0gPSBwcm9maWxlRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IHtcbiAgICAgICAgICAgIC4uLmNhcmQucGF5bWVudFNvdXJjZS5jYXJkLmJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBmaXJzdE5hbWUgfHwgZ2l2ZW5fbmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBsYXN0TmFtZSB8fCBzdXJuYW1lLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGlzQWRkcmVzc0V4aXN0ID1cbiAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyAmJlxuICAgICAgICAgICAgaXNFcXVhbCh0aGlzLm5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzcyksIHRoaXMubm9ybWFsaXplQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3MpKTtcblxuICAgICAgICByZXR1cm4gaXNBZGRyZXNzRXhpc3QgPyBzaGlwcGluZ0FkZHJlc3MgOiBhZGRyZXNzO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzOiBDdXN0b21lckFkZHJlc3MgfCBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG9taXQoYWRkcmVzcywgWydpZCddKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1lcmdlU2hpcHBpbmdBbmRCaWxsaW5nQWRkcmVzc2VzKFxuICAgICAgICBzaGlwcGluZ0FkZHJlc3NlczogQ3VzdG9tZXJBZGRyZXNzW10sXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzZXM6IEN1c3RvbWVyQWRkcmVzc1tdLFxuICAgICk6IEN1c3RvbWVyQWRkcmVzc1tdIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRCaWxsaW5nQWRkcmVzc2VzID0gYmlsbGluZ0FkZHJlc3Nlcy5maWx0ZXIoXG4gICAgICAgICAgICAoYmlsbGluZ0FkZHJlc3M6IEN1c3RvbWVyQWRkcmVzcykgPT5cbiAgICAgICAgICAgICAgICAhc2hpcHBpbmdBZGRyZXNzZXMuc29tZSgoc2hpcHBpbmdBZGRyZXNzOiBDdXN0b21lckFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRXF1YWwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFkZHJlc3Moc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIFsuLi5zaGlwcGluZ0FkZHJlc3NlcywgLi4uZmlsdGVyZWRCaWxsaW5nQWRkcmVzc2VzXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE90aGVyXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgZ2V0TWV0aG9kSWRPclRocm93KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5tZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RJZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldFNoaXBwaW5nT3B0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjb25zaWdubWVudHMgPSBzdGF0ZS5nZXRDb25zaWdubWVudHMoKSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zID0gY29uc2lnbm1lbnRzWzBdPy5hdmFpbGFibGVTaGlwcGluZ09wdGlvbnMgfHwgW107XG4gICAgICAgIGNvbnN0IHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24gPSBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMuZmluZChcbiAgICAgICAgICAgIChvcHRpb24pID0+IG9wdGlvbi5pc1JlY29tbWVuZGVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChyZWNvbW1lbmRlZFNoaXBwaW5nT3B0aW9uIHx8IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gcmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiB8fCBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnNbMF07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzZWxlY3RlZE9wdGlvbi5pZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3knO1xuaW1wb3J0IEJyYWludHJlZUZhc3RsYW5lVXRpbHMgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtdXRpbHMnO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVGYXN0bGFuZVV0aWxzID0gbmV3IEJyYWludHJlZUZhc3RsYW5lVXRpbHMoXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kocGF5bWVudEludGVncmF0aW9uU2VydmljZSwgYnJhaW50cmVlRmFzdGxhbmVVdGlscyk7XG59O1xuXG4vLyBJbmZvOiBicmFpbnRyZWUgbWV0aG9kIGlkIHdhcyBhZGRlZCBvbmx5IGZvciBBL0IgdGVzdGluZyBwdXJwb3Nlcy5cbi8vIFRoZSBtYWluIHJlYXNvbiB3aHkgd2UgY2FuJ3QgZ28gaW4gb3RoZXIgd2F5LCBiZWNhdXNlIGJyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXRcbi8vIG1heSBiZSB0dXJuZWQgb24gb25seSB3aGVuIEJFIGtub3dzIGN1c3RvbWVyJ3MgZW1haWwgYWRkcmVzcyAodG8gdW5kZXJzdGFuZCBzaG91bGQgd2Ugc2hvdyB0aGUgZmVhdHVyZSBmb3IgdGhlIHVzZXIgb3Igbm90KS5cbi8vIFNvIHsgaWQ6ICdicmFpbnRyZWUnIH0sIHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIEEvQiB0ZXN0aW5nXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXQnIH0sXG4gICAgeyBpZDogJ2JyYWludHJlZScgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIFVuc3VwcG9ydGVkQnJvd3NlckVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVNjcmlwdExvYWRlciBmcm9tICcuL2JyYWludHJlZS1zY3JpcHQtbG9hZGVyJztcbmltcG9ydCB7XG4gICAgQnJhaW50cmVlQ2xpZW50LFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlRXJyb3JDb2RlLFxuICAgIEJyYWludHJlZUdvb2dsZVBheW1lbnQsXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50LFxuICAgIEJyYWludHJlZU1vZHVsZSxcbiAgICBCcmFpbnRyZWVUaHJlZURTZWN1cmUsXG4gICAgQnJhaW50cmVlVXNCYW5rQWNjb3VudCxcbiAgICBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0LFxuICAgIEJyYWludHJlZVZpc2FDaGVja291dCxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgaXNCcmFpbnRyZWVFcnJvciBmcm9tICcuL3V0aWxzL2lzLWJyYWludHJlZS1lcnJvcic7XG5pbXBvcnQgeyBWaXNhQ2hlY2tvdXRTREsgfSBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVNkayB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVWZW5tbz86IEJyYWludHJlZVZlbm1vQ2hlY2tvdXQ7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVMb2NhbFBheW1lbnQ/OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgcHJpdmF0ZSBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnQ7XG4gICAgcHJpdmF0ZSBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBwcml2YXRlIGRhdGFDb2xsZWN0b3I/OiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yO1xuICAgIHByaXZhdGUgZ29vZ2xlUGF5bWVudD86IEJyYWludHJlZUdvb2dsZVBheW1lbnQ7XG4gICAgcHJpdmF0ZSB0aHJlZURTPzogQnJhaW50cmVlVGhyZWVEU2VjdXJlO1xuICAgIHByaXZhdGUgdmlzYUNoZWNrb3V0PzogUHJvbWlzZTxCcmFpbnRyZWVWaXNhQ2hlY2tvdXQ+O1xuICAgIHByaXZhdGUgdmlzYUNoZWNrb3V0U0RLPzogVmlzYUNoZWNrb3V0U0RLO1xuICAgIHByaXZhdGUgdXNCYW5rQWNjb3VudD86IEJyYWludHJlZVVzQmFua0FjY291bnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyYWludHJlZVNjcmlwdExvYWRlcjogQnJhaW50cmVlU2NyaXB0TG9hZGVyKSB7fVxuXG4gICAgaW5pdGlhbGl6ZShjbGllbnRUb2tlbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0Q2xpZW50VG9rZW4oY2xpZW50VG9rZW4pO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy50ZWFyZG93bk1vZHVsZSh0aGlzLmRhdGFDb2xsZWN0b3IpO1xuXG4gICAgICAgIHRoaXMuZGF0YUNvbGxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBDbGllbnRcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2NsaWVudC5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXRDbGllbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVDbGllbnQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50VG9rZW4gPSB0aGlzLmdldENsaWVudFRva2VuT3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50Q3JlYXRvciA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRDbGllbnQoKTtcblxuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCBjbGllbnRDcmVhdG9yLmNyZWF0ZSh7IGF1dGhvcml6YXRpb246IGNsaWVudFRva2VuIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIERhdGEgY29sbGVjdG9yXG4gICAgICogYnJhaW50cmVlIGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl9kYXRhLWNvbGxlY3Rvci5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXREYXRhQ29sbGVjdG9yT3JUaHJvdyhcbiAgICAgICAgb3B0aW9ucz86IFBhcnRpYWw8QnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWc+LFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlRGF0YUNvbGxlY3Rvcj4ge1xuICAgICAgICBjb25zdCBlbXB0eURhdGFDb2xsZWN0b3IgPSB7XG4gICAgICAgICAgICBkZXZpY2VEYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0ZWFyZG93bjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0aGlzLmRhdGFDb2xsZWN0b3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhQ29sbGVjdG9yID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZERhdGFDb2xsZWN0b3IoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDb2xsZWN0b3JDb25maWc6IEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIGtvdW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFDb2xsZWN0b3IgPSBhd2FpdCBkYXRhQ29sbGVjdG9yLmNyZWF0ZShkYXRhQ29sbGVjdG9yQ29uZmlnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpICYmIGVycm9yLmNvZGUgPT09IEJyYWludHJlZUVycm9yQ29kZS5Lb3VudE5vdEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5RGF0YUNvbGxlY3RvcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFDb2xsZWN0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgR29vZ2xlIFBheW1lbnRcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2dvb2dsZS1wYXltZW50Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGdldEJyYWludHJlZUdvb2dsZVBheW1lbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVHb29nbGVQYXltZW50PiB7XG4gICAgICAgIGlmICghdGhpcy5nb29nbGVQYXltZW50KSB7XG4gICAgICAgICAgICBjb25zdCBbY2xpZW50LCBicmFpbnRyZWVHb29nbGVQYXltZW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRHb29nbGVQYXltZW50KCksXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgdGhpcy5nb29nbGVQYXltZW50ID0gYXdhaXQgYnJhaW50cmVlR29vZ2xlUGF5bWVudC5jcmVhdGUoeyBjbGllbnQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nb29nbGVQYXltZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIDNEU1xuICAgICAqIGJyYWludHJlZSBkb2M6IGh0dHBzOi8vYnJhaW50cmVlLmdpdGh1Yi5pby9icmFpbnRyZWUtd2ViL2N1cnJlbnQvbW9kdWxlLWJyYWludHJlZS13ZWJfdGhyZWUtZC1zZWN1cmUuaHRtbFxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnJhaW50cmVlVGhyZWVEUygpOiBQcm9taXNlPEJyYWludHJlZVRocmVlRFNlY3VyZT4ge1xuICAgICAgICBpZiAoIXRoaXMudGhyZWVEUykge1xuICAgICAgICAgICAgY29uc3QgW2NsaWVudCwgdGhyZWVEU2VjdXJlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWQzRFMoKSxcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICB0aGlzLnRocmVlRFMgPSBhd2FpdCB0aHJlZURTZWN1cmUuY3JlYXRlKHsgY2xpZW50LCB2ZXJzaW9uOiAyIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudGhyZWVEUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBMb2NhbCBQYXltZW50IE1ldGhvZHNcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2xvY2FsLXBheW1lbnQuaHRtbFxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnJhaW50cmVlTG9jYWxQYXltZW50KFxuICAgICAgICBtZXJjaGFudEFjY291bnRJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlTG9jYWxQYXltZW50IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IFtjbGllbnQsIGxvY2FsUGF5bWVudENyZWF0b3JdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZExvY2FsUGF5bWVudCgpLFxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlTG9jYWxQYXltZW50ID0gYXdhaXQgbmV3IFByb21pc2UoXG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiAoYnJhaW50cmVlTG9jYWxQYXltZW50OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQpID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdDogKGVycm9yOiBCcmFpbnRyZWVFcnJvcikgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCBsb2NhbFBheW1lbnRDcmVhdG9yLmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xpZW50LCBtZXJjaGFudEFjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVMb2NhbFBheW1lbnQ6IEJyYWludHJlZUxvY2FsUGF5bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYnJhaW50cmVlTG9jYWxQYXltZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgVXNCYW5rQWNjb3VudFxuICAgICAqIGJyYWludHJlZSBkb2M6IGh0dHBzOi8vYnJhaW50cmVlLmdpdGh1Yi5pby9icmFpbnRyZWUtd2ViL2N1cnJlbnQvbW9kdWxlLWJyYWludHJlZS13ZWJfdXMtYmFuay1hY2NvdW50Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGdldFVzQmFua0FjY291bnQoKSB7XG4gICAgICAgIGlmICghdGhpcy51c0JhbmtBY2NvdW50KSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgdXNCYW5rQWNjb3VudCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRVc0JhbmtBY2NvdW50KCk7XG5cbiAgICAgICAgICAgIHRoaXMudXNCYW5rQWNjb3VudCA9IGF3YWl0IHVzQmFua0FjY291bnQuY3JlYXRlKHsgY2xpZW50IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudXNCYW5rQWNjb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBWaXNhIENoZWNrb3V0XG4gICAgICogYnJhaW50cmVlIGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl92aXNhLWNoZWNrb3V0Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGdldEJyYWludHJlZVZpc2FDaGVja291dCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc2FDaGVja291dCkge1xuICAgICAgICAgICAgdGhpcy52aXNhQ2hlY2tvdXQgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDbGllbnQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkVmlzYUNoZWNrb3V0KCksXG4gICAgICAgICAgICBdKS50aGVuKChbY2xpZW50LCBwYXlwYWxdKSA9PiBwYXlwYWwuY3JlYXRlKHsgY2xpZW50IH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2FDaGVja291dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBWaXNhIENoZWNrb3V0IFNES1xuICAgICAqIHZpc2EgY2hlY2tvdXQgZG9jOiBodHRwczovL2RldmVsb3Blci52aXNhLmNvbS9jYXBhYmlsaXRpZXMvdmlzYV9jaGVja291dC9kb2NzLWhvdy10b1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VmlzYUNoZWNrb3V0U2RrKHRlc3RNb2RlPzogYm9vbGVhbikge1xuICAgICAgICBpZiAoIXRoaXMudmlzYUNoZWNrb3V0U0RLKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2FDaGVja291dFNESyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRWaXNhQ2hlY2tvdXRTZGsodGVzdE1vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzYUNoZWNrb3V0U0RLO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIFZlbm1vIENoZWNrb3V0XG4gICAgICogYnJhaW50cmVlIHZlbm1vIGNoZWNrb3V0IGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl92ZW5tby5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXRWZW5tb0NoZWNrb3V0T3JUaHJvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZVZlbm1vKSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgdmVubW9DaGVja291dCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRWZW5tb0NoZWNrb3V0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHZlbm1vQ2hlY2tvdXRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIGFsbG93RGVza3RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kVXNhZ2U6ICdtdWx0aV91c2UnLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgYnJhaW50cmVlVmVubW9DaGVja291dCA9IGF3YWl0IHZlbm1vQ2hlY2tvdXQuY3JlYXRlKHZlbm1vQ2hlY2tvdXRDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoYnJhaW50cmVlVmVubW9DaGVja291dC5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlVmVubW8gPSBicmFpbnRyZWVWZW5tb0NoZWNrb3V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZVZlbm1vO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUHJpdmF0ZSBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENsaWVudFRva2VuKGNsaWVudFRva2VuOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGllbnRUb2tlbiA9IGNsaWVudFRva2VuO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2xpZW50VG9rZW5PclRocm93KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFRva2VuO1xuICAgIH1cblxuICAgIHByaXZhdGUgdGVhcmRvd25Nb2R1bGUobW9kdWxlPzogQnJhaW50cmVlTW9kdWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBtb2R1bGUgPyBtb2R1bGUudGVhcmRvd24oKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgdHJ5IHRvIGNhbGwgYSBtZXRob2QgdGhhdCBpcyBvbmx5IGEgc3R1YiBhbmQgaGFzIG5vdFxuICogYmVlbiBmdWxseSBpbXBsZW1lbnRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnTm90IGltcGxlbWVudGVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdOb3RJbXBsZW1lbnRlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ25vdF9pbXBsZW1lbnRlZCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZVNkayxcbiAgICBCcmFpbnRyZWVWaXNhQ2hlY2tvdXQsXG4gICAgVmlzYUNoZWNrb3V0QWRkcmVzcyxcbiAgICBWaXNhQ2hlY2tvdXRQYXltZW50U3VjY2Vzc1BheWxvYWQsXG4gICAgVmlzYUNoZWNrb3V0VG9rZW5pemVkUGF5bG9hZCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBBZGRyZXNzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBMZWdhY3lBZGRyZXNzLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgTm90SW1wbGVtZW50ZWRFcnJvcixcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgV2l0aEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgfSBmcm9tICcuL2JyYWludHJlZS12aXNhLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGJ1dHRvbkNsYXNzTmFtZSA9ICd2aXNhLWNoZWNrb3V0LXdyYXBwZXInO1xuICAgIHByaXZhdGUgb25FcnJvciA9IG5vb3A7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlU2RrOiBCcmFpbnRyZWVTZGssXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXZpc2FjaGVja291dDogdmlzYUNoZWNrb3V0T3B0aW9ucywgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZpc2FDaGVja291dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVldmlzYWNoZWNrb3V0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmVDb25maWcgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKTtcblxuICAgICAgICBpZiAoIWNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFZpc2FDaGVja291dFNkayhjb25maWcudGVzdE1vZGUpO1xuXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSB2aXNhQ2hlY2tvdXRPcHRpb25zO1xuXG4gICAgICAgIHRoaXMub25FcnJvciA9IG9uRXJyb3IgfHwgbm9vcDtcblxuICAgICAgICBjb25zdCBpbml0T3B0aW9ucyA9IGJyYWludHJlZVZpc2FDaGVja291dC5jcmVhdGVJbml0T3B0aW9ucyh7XG4gICAgICAgICAgICBwYXltZW50UmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogc3RvcmVDb25maWcuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICAgICBzdWJ0b3RhbDogU3RyaW5nKGNoZWNrb3V0LnN1YnRvdGFsKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgIGxvY2FsZTogc3RvcmVDb25maWcuc3RvcmVQcm9maWxlLnN0b3JlTGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdFNoaXBwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzaWduSW5CdXR0b24gPSB0aGlzLmNyZWF0ZVNpZ25JbkJ1dHRvbihjb250YWluZXIsIHRoaXMuYnV0dG9uQ2xhc3NOYW1lKTtcblxuICAgICAgICBhd2FpdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbihcbiAgICAgICAgICAgICdwYXltZW50LnN1Y2Nlc3MnLFxuICAgICAgICAgICAgKHBheW1lbnRTdWNjZXNzUGF5bG9hZDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5pemVQYXltZW50KGJyYWludHJlZVZpc2FDaGVja291dCwgcGF5bWVudFN1Y2Nlc3NQYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KCkpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSxcbiAgICAgICAgKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbigncGF5bWVudC5lcnJvcicsIChfLCBlcnJvcikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnJvcikpO1xuXG4gICAgICAgIHNpZ25JbkJ1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZGVpbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgc2lnbkluKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgICAgICdJbiBvcmRlciB0byBzaWduIGluIHZpYSBWaXNhQ2hlY2tvdXQsIHRoZSBzaG9wcGVyIG11c3QgY2xpY2sgb24gXCJWaXNhIENoZWNrb3V0XCIgYnV0dG9uLicsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbk91dChvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25PdXRDdXN0b21lcihvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChvcHRpb25zPzogRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgb3B0aW9ucz8uY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjaz8uKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVWaXNhQ2hlY2tvdXQ6IEJyYWludHJlZVZpc2FDaGVja291dCxcbiAgICAgICAgcGF5bWVudDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgICkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0LnRva2VuaXplKHBheW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKSxcbiAgICAgICAgXSkudGhlbigoW3BheWxvYWQsIGRldmljZURhdGFdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZyA9IHN0YXRlLmdldFNoaXBwaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhzaGlwcGluZyksXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhiaWxsaW5nKSxcbiAgICAgICAgICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0Rm9ybShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb3N0Rm9ybShcbiAgICAgICAgcGF5bWVudERhdGE6IFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG4gICAgICAgIGRhdGFDb2xsZWN0b3I6IEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlckRhdGEsIGJpbGxpbmdBZGRyZXNzLCBzaGlwcGluZ0FkZHJlc3MsIGRldGFpbHM6IGNhcmRJbmZvcm1hdGlvbiB9ID0gcGF5bWVudERhdGE7XG4gICAgICAgIGNvbnN0IHsgdXNlckVtYWlsIH0gPSB1c2VyRGF0YTtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBkYXRhQ29sbGVjdG9yO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICBwYXltZW50X3R5cGU6IHBheW1lbnREYXRhLnR5cGUsXG4gICAgICAgICAgICBub25jZTogcGF5bWVudERhdGEubm9uY2UsXG4gICAgICAgICAgICBwcm92aWRlcjogJ2JyYWludHJlZXZpc2FjaGVja291dCcsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICBjYXJkX2luZm9ybWF0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogY2FyZEluZm9ybWF0aW9uLmNhcmRUeXBlLFxuICAgICAgICAgICAgICAgIG51bWJlcjogY2FyZEluZm9ybWF0aW9uLmxhc3RUd28sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRBZGRyZXNzKHVzZXJFbWFpbCwgYmlsbGluZ0FkZHJlc3MpKSxcbiAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIHNoaXBwaW5nQWRkcmVzcykpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhhZGRyZXNzPzogQWRkcmVzcyk6IFZpc2FDaGVja291dEFkZHJlc3Mge1xuICAgICAgICBpZiAoIWFkZHJlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGFkZHJlc3MubGFzdE5hbWUsXG4gICAgICAgICAgICBwaG9uZU51bWJlcjogYWRkcmVzcy5waG9uZSxcbiAgICAgICAgICAgIHN0cmVldEFkZHJlc3M6IGFkZHJlc3MuYWRkcmVzczEsXG4gICAgICAgICAgICBleHRlbmRlZEFkZHJlc3M6IGFkZHJlc3MuYWRkcmVzczIsXG4gICAgICAgICAgICBsb2NhbGl0eTogYWRkcmVzcy5jaXR5LFxuICAgICAgICAgICAgcmVnaW9uOiBhZGRyZXNzLnN0YXRlT3JQcm92aW5jZUNvZGUsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFkZHJlc3MoZW1haWw6IHN0cmluZywgYWRkcmVzczogVmlzYUNoZWNrb3V0QWRkcmVzcyA9IHt9KTogUGFydGlhbDxMZWdhY3lBZGRyZXNzPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiBhZGRyZXNzLnBob25lTnVtYmVyLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2lnbkluQnV0dG9uKGNvbnRhaW5lcklkOiBzdHJpbmcsIGJ1dHRvbkNsYXNzOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2NvbnRhaW5lcklkfWApO1xuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHByb3ZpZGVkIGNvbnRhaW5lciBJRCBpcyBub3QgdmFsaWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRWaXNhQ2hlY2tvdXRCdXR0b24oY29udGFpbmVyLCBidXR0b25DbGFzcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnNlcnRWaXNhQ2hlY2tvdXRCdXR0b24oY29udGFpbmVyOiBFbGVtZW50LCBidXR0b25DbGFzczogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBidXR0b25Tb3VyY2UgPVxuICAgICAgICAgICAgJ2h0dHBzOi8vc2VjdXJlLmNoZWNrb3V0LnZpc2EuY29tL3dhbGxldC1zZXJ2aWNlcy13ZWIveG8vYnV0dG9uLnBuZz9hY2NlcHRDYW5hZGlhblZpc2FEZWJpdD1mYWxzZSZjb2JyYW5kPXRydWUmaGVpZ2h0PTM0JndpZHRoPTE3OCc7XG4gICAgICAgIGNvbnN0IGJ1dHRvblRlbXBsYXRlID0gYFxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGFsdD1cIlZpc2EgQ2hlY2tvdXRcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwidi1idXR0b25cIlxuICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIHNyYz1cIiR7YnV0dG9uU291cmNlfVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwidi1sZWFybiB2LWxlYXJuLWRlZmF1bHRcIiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0OyBkaXNwbGF5OiBibG9jazsgZm9udC1zaXplOiAxMHB4OyBjb2xvcjogIzAwMzM2NjtcIiBocmVmPVwiI1wiIGRhdGEtbG9jYWxlPVwiZW5fVVNcIj5UZWxsIE1lIE1vcmU8L2E+YDtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLndpZHRoID0gJ21heC1jb250ZW50JztcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uY2xhc3NOYW1lID0gYnV0dG9uQ2xhc3M7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5pbm5lckhUTUwgPSBidXR0b25UZW1wbGF0ZTtcblxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmlzYUNoZWNrb3V0QnV0dG9uKTtcblxuICAgICAgICByZXR1cm4gdmlzYUNoZWNrb3V0QnV0dG9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS12aXNhLWNoZWNrb3V0LWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneTogQ3VzdG9tZXJTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgaG9zdFdpbmRvdzogVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyAmIEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihnZXRTY3JpcHRMb2FkZXIoKSwgaG9zdFdpbmRvdywgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVyU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlU2RrLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgRm9ybWF0dGVkUGF5bG9hZCxcbiAgICBGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4gICAgVmF1bHRlZEluc3RydW1lbnQsXG59IGZyb20gJy4vcGF5bWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgcmV0dXJuIEJvb2xlYW4oKGluc3RydW1lbnQgYXMgVmF1bHRlZEluc3RydW1lbnQpLmluc3RydW1lbnRJZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hvc3RlZFZhdWx0ZWRJbnN0cnVtZW50KFxuICAgIGluc3RydW1lbnQ6IFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbik6IGluc3RydW1lbnQgaXMgSG9zdGVkVmF1bHRlZEluc3RydW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICAgIEJvb2xlYW4oKGluc3RydW1lbnQgYXMgSG9zdGVkVmF1bHRlZEluc3RydW1lbnQpLmluc3RydW1lbnRJZCkgJiZcbiAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0cnVtZW50LCAnY2NOdW1iZXInKSAmJlxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RydW1lbnQsICdjY0N2dicpXG4gICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBGb3JtYXR0ZWRQYXlsb2FkPEZvcm1hdHRlZFZhdWx0ZWRJbnN0cnVtZW50PiB7XG4gICAgY29uc3QgZm9ybWF0dGVkSW5zdHJ1bWVudCA9IChpbnN0cnVtZW50IGFzIEZvcm1hdHRlZFBheWxvYWQ8Rm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQ+KVxuICAgICAgICAuZm9ybWF0dGVkUGF5bG9hZDtcblxuICAgIGlmICghZm9ybWF0dGVkSW5zdHJ1bWVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuID09PSAnc3RyaW5nJyB8fFxuICAgICAgICBCb29sZWFuKGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuICYmIGZvcm1hdHRlZEluc3RydW1lbnQuYmlncGF5X3Rva2VuLnRva2VuKVxuICAgICk7XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB0cnlpbmcgdG8gbWFrZSBhbiBvcmRlciBmaW5hbGl6YXRpb24gcmVxdWVzdCBmb3IgYVxuICogcGF5bWVudCBtZXRob2QgdGhhdCBkb2VzIG5vdCByZXF1aXJlIHN1Y2ggcHJvY2VkdXJlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1RoZSBjdXJyZW50IG9yZGVyIGRvZXMgbm90IG5lZWQgdG8gYmUgZmluYWxpemVkIGF0IHRoaXMgc3RhZ2UuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ09yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdvcmRlcl9maW5hbGl6YXRpb25fbm90X3JlcXVpcmVkJztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBIb3N0ZWRJbnN0cnVtZW50IH0gZnJvbSAnLi9wYXltZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShcbiAgICBpbnN0cnVtZW50OiB1bmtub3duLFxuKTogaW5zdHJ1bWVudCBpcyBIb3N0ZWRJbnN0cnVtZW50IHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgaW5zdHJ1bWVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5zdHJ1bWVudCAhPT0gbnVsbCAmJlxuICAgICAgICAodHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNhdmVJbnN0cnVtZW50ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgdHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNhdmVJbnN0cnVtZW50ID09PSAnYm9vbGVhbicpICYmXG4gICAgICAgICh0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiAoaW5zdHJ1bWVudCBhcyBIb3N0ZWRJbnN0cnVtZW50KS5zaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID09PSAnYm9vbGVhbicpXG4gICAgKTtcbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIGEgcGF5bWVudCBtZXRob2QgZXhwZXJpZW5jZXMgc29tZSBraW5kIG9mXG4gKiBmYWlsdXJlIChpLmUuOiBpdHMgY2xpZW50IGxpYnJhcnkgcmV0dXJucyBhIHJlamVjdGVkIHByb21pc2UpLiBBbmQgdGhlcmUgaXNcbiAqIG5vIG90aGVyIGVycm9yIHR5cGUgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRoYW4gdGhpcyBvbmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRNZXRob2RGYWlsZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBtZXNzYWdlIHx8XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIGNsaWVudCBsaWJyYXJ5IG9mIGEgcGF5bWVudCBtZXRob2QgaGFzIHRocm93biBhbiB1bmV4cGVjdGVkIGVycm9yLicsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRNZXRob2RGYWlsZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X21ldGhvZF9jbGllbnRfaW52YWxpZCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4gICAgV2l0aEJhbmtBY2NvdW50SW5zdHJ1bWVudCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVXNCYW5rQWNjb3VudEluc3RydW1lbnRMaWtlKFxuICAgIGluc3RydW1lbnQ/OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4pOiBpbnN0cnVtZW50IGlzIFdpdGhCYW5rQWNjb3VudEluc3RydW1lbnQge1xuICAgIGlmICghaW5zdHJ1bWVudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgJ2FjY291bnROdW1iZXInIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ3JvdXRpbmdOdW1iZXInIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ293bmVyc2hpcFR5cGUnIGluIGluc3RydW1lbnQgJiZcbiAgICAgICAgJ2FjY291bnRUeXBlJyBpbiBpbnN0cnVtZW50XG4gICAgKTtcbn1cbiIsImltcG9ydCB7XG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZVNkayxcbiAgICBCcmFpbnRyZWVVc0JhbmtBY2NvdW50LFxuICAgIEJyYWludHJlZVVzQmFua0FjY291bnREZXRhaWxzLFxuICAgIGlzQnJhaW50cmVlRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgaXNIb3N0ZWRJbnN0cnVtZW50TGlrZSxcbiAgICBpc1ZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvcixcbiAgICBOb3RJbml0aWFsaXplZEVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBXaXRoQmFua0FjY291bnRJbnN0cnVtZW50LFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IGlzVXNCYW5rQWNjb3VudEluc3RydW1lbnRMaWtlIGZyb20gJy4uL2lzLXVzLWJhbmstYWNjb3VudC1pbnN0cnVtZW50LWxpa2UnO1xuXG5pbXBvcnQgeyBXaXRoQnJhaW50cmVlQWNoUGF5bWVudEluaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi9icmFpbnRyZWUtYWNoLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUFjaFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSB1c0JhbmtBY2NvdW50PzogQnJhaW50cmVlVXNCYW5rQWNjb3VudDtcbiAgICBwcml2YXRlIGdldE1hbmRhdGVUZXh0PzogKCkgPT4gc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoQnJhaW50cmVlQWNoUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBicmFpbnRyZWVhY2ggfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5nZXRNYW5kYXRlVGV4dCA9IGJyYWludHJlZWFjaD8uZ2V0TWFuZGF0ZVRleHQ7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gcGF5bWVudE1ldGhvZDtcblxuICAgICAgICBpZiAoIWNsaWVudFRva2VuIHx8ICFpbml0aWFsaXphdGlvbkRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlU2RrLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnVzQmFua0FjY291bnQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRVc0JhbmtBY2NvdW50KCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUJyYWludHJlZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUob3JkZXJSZXF1ZXN0OiBPcmRlclJlcXVlc3RCb2R5LCBvcHRpb25zPzogUGF5bWVudFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudCwgLi4ub3JkZXIgfSA9IG9yZGVyUmVxdWVzdDtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNTdWJtaXR0aW5nV2l0aFZhdWx0aW5nSW5zdHJ1bWVudCA9IGlzVmF1bHRlZEluc3RydW1lbnQocGF5bWVudC5wYXltZW50RGF0YSB8fCB7fSk7XG5cbiAgICAgICAgY29uc3Qgbm9uY2UgPSBpc1N1Ym1pdHRpbmdXaXRoVmF1bHRpbmdJbnN0cnVtZW50XG4gICAgICAgICAgICA/IGF3YWl0IHRoaXMudG9rZW5pemVQYXltZW50Rm9yVmF1bHRlZEluc3RydW1lbnQocGF5bWVudClcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy50b2tlbml6ZVBheW1lbnQocGF5bWVudCk7XG5cbiAgICAgICAgY29uc3Qgc3VibWl0UGF5bWVudFBheWxvYWQgPSBpc1N1Ym1pdHRpbmdXaXRoVmF1bHRpbmdJbnN0cnVtZW50XG4gICAgICAgICAgICA/IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhRm9yVmF1bHRlZEluc3RydW1lbnQobm9uY2UsIHBheW1lbnQpXG4gICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKG5vbmNlLCBwYXltZW50KTtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudChzdWJtaXRQYXltZW50UGF5bG9hZCk7XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZGVpbml0aWFsaXplKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KHsgcGF5bWVudERhdGEgfTogT3JkZXJQYXltZW50UmVxdWVzdEJvZHkpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCB1c0JhbmtBY2NvdW50ID0gdGhpcy5nZXRVc0JhbmtBY2NvdW50T3JUaHJvdygpO1xuXG4gICAgICAgIGlmICghaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudC5wYXltZW50RGF0YSddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hbmRhdGVUZXh0ID0gaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSlcbiAgICAgICAgICAgID8gJ1RoZSBkYXRhIGFyZSB1c2VkIGZvciBzdG9yZWQgaW5zdHJ1bWVudCB2ZXJpZmljYXRpb24nXG4gICAgICAgICAgICA6IHR5cGVvZiB0aGlzLmdldE1hbmRhdGVUZXh0ID09PSAnZnVuY3Rpb24nICYmIHRoaXMuZ2V0TWFuZGF0ZVRleHQoKTtcblxuICAgICAgICBpZiAoIW1hbmRhdGVUZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgZ2V0TWFuZGF0ZVRleHQgaXMgbm90IHByb3ZpZGVkIG9yIHJldHVybmVkIHVuZGVmaW5lZCB2YWx1ZS4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSBhd2FpdCB1c0JhbmtBY2NvdW50LnRva2VuaXplKHtcbiAgICAgICAgICAgICAgICBiYW5rRGV0YWlsczogdGhpcy5nZXRCYW5rRGV0YWlscyhwYXltZW50RGF0YSksXG4gICAgICAgICAgICAgICAgbWFuZGF0ZVRleHQsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG5vbmNlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVCcmFpbnRyZWVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRva2VuaXplUGF5bWVudEZvclZhdWx0ZWRJbnN0cnVtZW50KFxuICAgICAgICBwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICApOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5bWVudERhdGEgPSB7fSB9ID0gcGF5bWVudDtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCB7IGNvbmZpZyB9ID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmICghY29uZmlnLmlzVmF1bHRpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1ZhdWx0aW5nIGlzIGRpc2FibGVkIGJ1dCBhIHZhdWx0ZWQgaW5zdHJ1bWVudCB3YXMgYmVpbmcgdXNlZCBmb3IgdGhpcyB0cmFuc2FjdGlvbicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hvdWxkVmVyaWZ5VmF1bHRpbmdJbnN0cnVtZW50ID0gaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpO1xuXG4gICAgICAgIHJldHVybiBzaG91bGRWZXJpZnlWYXVsdGluZ0luc3RydW1lbnQgPyB0aGlzLnRva2VuaXplUGF5bWVudChwYXltZW50KSA6IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlUGF5bWVudERhdGEoXG4gICAgICAgIG5vbmNlOiBzdHJpbmcgfCBudWxsLFxuICAgICAgICBwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICApOiBQcm9taXNlPFBheW1lbnQ+IHtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5bWVudERhdGEgPSB7fSB9ID0gcGF5bWVudDtcblxuICAgICAgICBpZiAoIWlzVXNCYW5rQWNjb3VudEluc3RydW1lbnRMaWtlKHBheW1lbnREYXRhKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQucGF5bWVudERhdGEnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGRldmljZURhdGEgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldERhdGFDb2xsZWN0b3JPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHsgc2hvdWxkU2F2ZUluc3RydW1lbnQsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsIHJvdXRpbmdOdW1iZXIsIGFjY291bnROdW1iZXIgfSA9XG4gICAgICAgICAgICBwYXltZW50RGF0YTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICBwYXltZW50RGF0YToge1xuICAgICAgICAgICAgICAgIGRldmljZVNlc3Npb25JZDogZGV2aWNlRGF0YSxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5pemVkX2JhbmtfYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVyOiByb3V0aW5nTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza2VkX2FjY291bnRfbnVtYmVyOiBhY2NvdW50TnVtYmVyLnN1YnN0cigtNCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogbm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlUGF5bWVudERhdGFGb3JWYXVsdGVkSW5zdHJ1bWVudChcbiAgICAgICAgbm9uY2U6IHN0cmluZyB8IG51bGwsXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICk6IFByb21pc2U8UGF5bWVudD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXltZW50RGF0YSA9IHt9IH0gPSBwYXltZW50O1xuXG4gICAgICAgIGlmICghaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkgfHwgIWlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudC5wYXltZW50RGF0YSddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgeyBpbnN0cnVtZW50SWQsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgfSA9IHBheW1lbnREYXRhO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgZGV2aWNlU2Vzc2lvbklkOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgICAgIGluc3RydW1lbnRJZCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgICAgIC4uLihub25jZSAmJiB7IG5vbmNlIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEJhbmtEZXRhaWxzKHBheW1lbnREYXRhOiBXaXRoQmFua0FjY291bnRJbnN0cnVtZW50KTogQnJhaW50cmVlVXNCYW5rQWNjb3VudERldGFpbHMge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuXG4gICAgICAgIGNvbnN0IG93bmVyc2hpcFR5cGUgPSBwYXltZW50RGF0YS5vd25lcnNoaXBUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGFjY291bnRUeXBlID0gcGF5bWVudERhdGEuYWNjb3VudFR5cGUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNjb3VudE51bWJlcjogcGF5bWVudERhdGEuYWNjb3VudE51bWJlcixcbiAgICAgICAgICAgIHJvdXRpbmdOdW1iZXI6IHBheW1lbnREYXRhLnJvdXRpbmdOdW1iZXIsXG4gICAgICAgICAgICBvd25lcnNoaXBUeXBlLFxuICAgICAgICAgICAgLi4uKG93bmVyc2hpcFR5cGUgPT09ICdwZXJzb25hbCdcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IHBheW1lbnREYXRhLmZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZTogcGF5bWVudERhdGEubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3NOYW1lOiBwYXltZW50RGF0YS5idXNpbmVzc05hbWUsXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFjY291bnRUeXBlLFxuICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3M6IHtcbiAgICAgICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMSxcbiAgICAgICAgICAgICAgICBleHRlbmRlZEFkZHJlc3M6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgICAgIGxvY2FsaXR5OiBiaWxsaW5nQWRkcmVzcy5jaXR5LFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogYmlsbGluZ0FkZHJlc3Muc3RhdGVPclByb3ZpbmNlQ29kZSxcbiAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBiaWxsaW5nQWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFVzQmFua0FjY291bnRPclRocm93KCk6IEJyYWludHJlZVVzQmFua0FjY291bnQge1xuICAgICAgICBpZiAoIXRoaXMudXNCYW5rQWNjb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnVzQmFua0FjY291bnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVCcmFpbnRyZWVFcnJvcihlcnJvcjogdW5rbm93bik6IG5ldmVyIHtcbiAgICAgICAgaWYgKCFpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUJyYWludHJlZVNkayB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5IGZyb20gJy4vYnJhaW50cmVlLWFjaC1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PEJyYWludHJlZUFjaFBheW1lbnRTdHJhdGVneT4gPSAoXG4gICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbikgPT4ge1xuICAgIHJldHVybiBuZXcgQnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVCcmFpbnRyZWVTZGsocGF5bWVudEludGVncmF0aW9uU2VydmljZSksXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVBY2hQYXltZW50U3RyYXRlZ3ksIFt7IGlkOiAnYnJhaW50cmVlYWNoJyB9XSk7XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVNjcmlwdExvYWRlciBmcm9tICcuL2JyYWludHJlZS1zY3JpcHQtbG9hZGVyJztcbmltcG9ydCBCcmFpbnRyZWVTZGsgZnJvbSAnLi9icmFpbnRyZWUtc2RrJztcbmltcG9ydCBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciBmcm9tICcuL2JyYWludHJlZS1zZGstdmVyc2lvbi1tYW5hZ2VyJztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlU2RrID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVTY3JpcHRMb2FkZXIgPSBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgd2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVTZGsoYnJhaW50cmVlU2NyaXB0TG9hZGVyKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyYWludHJlZVNkaztcbiIsImltcG9ydCB7IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0sXG59IGZyb20gJy4vYnJhaW50cmVlJztcbmltcG9ydCB7IE1lc3NhZ2VzU3R5bGVPcHRpb25zLCBNZXNzYWdpbmdQbGFjZW1lbnRzIH0gZnJvbSAnLi9wYXlwYWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVNZXNzYWdlcyB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSB7fVxuXG4gICAgcmVuZGVyKG1ldGhvZElkOiBzdHJpbmcsIGNvbnRhaW5lcklkOiBzdHJpbmcsIHBsYWNlbWVudDogTWVzc2FnaW5nUGxhY2VtZW50cyk6IHZvaWQge1xuICAgICAgICBjb25zdCBtZXNzYWdpbmdDb250YWluZXIgPSBjb250YWluZXJJZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5wYXlwYWwgJiYgbWVzc2FnaW5nQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGlmICghcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHsgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gPSBbXSB9ID0gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE7XG5cbiAgICAgICAgICAgIGNvbnN0IGJhbm5lZElkID0gcGxhY2VtZW50ID09PSBNZXNzYWdpbmdQbGFjZW1lbnRzLlBBWU1FTlQgPyAnY2hlY2tvdXQnIDogcGxhY2VtZW50O1xuICAgICAgICAgICAgY29uc3QgYmFubmVyQ29uZmlndXJhdGlvbiA9XG4gICAgICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24gJiZcbiAgICAgICAgICAgICAgICBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbi5maW5kKCh7IGlkIH0pID0+IGlkID09PSBiYW5uZWRJZCk7XG5cbiAgICAgICAgICAgIGlmICghYmFubmVyQ29uZmlndXJhdGlvbiB8fCAhYmFubmVyQ29uZmlndXJhdGlvbi5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGNvZGUgd2hlbiB0aGlzIGRhdGEgYXR0cmlidXRlcyB3aWxsIGJlIHJlbW92ZWQgZnJvbSBiYW5uZXIgZGl2IGNvbnRhaW5lciBpbiBjb250ZW50IHNlcnZpY2VcbiAgICAgICAgICAgIGlmIChwbGFjZW1lbnQgPT09IE1lc3NhZ2luZ1BsYWNlbWVudHMuQ0FSVCkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtbG9nby10eXBlJyk7XG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcC1zdHlsZS1sb2dvLXBvc2l0aW9uJyk7XG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcC1zdHlsZS10ZXh0LWNvbG9yJyk7XG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1wcC1zdHlsZS10ZXh0LXNpemUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVIb3N0V2luZG93LnBheXBhbFxuICAgICAgICAgICAgICAgIC5NZXNzYWdlcyh7XG4gICAgICAgICAgICAgICAgICAgIGFtb3VudDogY2FydC5jYXJ0QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICBidXllckNvdW50cnk6IGJpbGxpbmdBZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB0aGlzLmdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWcoYmFubmVyQ29uZmlndXJhdGlvbiksXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVuZGVyKGAjJHtjb250YWluZXJJZH1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyh7XG4gICAgICAgIHN0eWxlcyxcbiAgICB9OiBQYXlQYWxCTlBMQ29uZmlndXJhdGlvbkl0ZW0pOiBNZXNzYWdlc1N0eWxlT3B0aW9ucyB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzU3R5bGVzOiBNZXNzYWdlc1N0eWxlT3B0aW9ucyA9IHt9O1xuXG4gICAgICAgIGlmIChzdHlsZXMuY29sb3IpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLmNvbG9yID0gc3R5bGVzLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlcy5sYXlvdXQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxheW91dCA9IHN0eWxlcy5sYXlvdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGVzWydsb2dvLXR5cGUnXSB8fCBzdHlsZXNbJ2xvZ28tcG9zaXRpb24nXSkge1xuICAgICAgICAgICAgbWVzc2FnZXNTdHlsZXMubG9nbyA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoc3R5bGVzWydsb2dvLXR5cGUnXSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxvZ28udHlwZSA9IHN0eWxlc1snbG9nby10eXBlJ107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdHlsZXNbJ2xvZ28tcG9zaXRpb24nXSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxvZ28ucG9zaXRpb24gPSBzdHlsZXNbJ2xvZ28tcG9zaXRpb24nXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZXMucmF0aW8pIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLnJhdGlvID0gc3R5bGVzLnJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlc1sndGV4dC1jb2xvciddIHx8IHN0eWxlc1sndGV4dC1zaXplJ10pIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLnRleHQgPSB7fTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlc1sndGV4dC1jb2xvciddKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZXNTdHlsZXMudGV4dC5jb2xvciA9IHN0eWxlc1sndGV4dC1jb2xvciddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3R5bGVzWyd0ZXh0LXNpemUnXSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLnRleHQuc2l6ZSA9ICtzdHlsZXNbJ3RleHQtc2l6ZSddO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzU3R5bGVzO1xuICAgIH1cbn1cbiIsImltcG9ydCBnZXRPdmVybGF5U3R5bGUgZnJvbSAnLi9vdmVybGF5LXN0eWxlJztcblxuZXhwb3J0IGludGVyZmFjZSBPdmVybGF5T3B0aW9ucyB7XG4gICAgYmFja2dyb3VuZD86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gICAgaGFzQ2xvc2VCdXR0b24/OiBib29sZWFuO1xuICAgIGlubmVySHRtbD86IEhUTUxFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdmVybGF5U2hvd09wdGlvbnMge1xuICAgIG9uQ2xpY2s/KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbkNsaWNrQ2xvc2U/KGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbGVtZW50cyB7XG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgbWFpbkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIGNsb3NlRWxlbWVudD86IEhUTUxFbGVtZW50O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPdmVybGF5IHtcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF9tYWluRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfY2xvc2VFbGVtZW50PzogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfdW5yZWdpc3RlckNsaWNrPzogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBPdmVybGF5T3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIGNsb3NlRWxlbWVudCwgbWFpbkVsZW1lbnQgfSA9IHRoaXMuX2NyZWF0ZUVsZW1lbnRzKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQgPSBjbG9zZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX21haW5FbGVtZW50ID0gbWFpbkVsZW1lbnQ7XG4gICAgfVxuXG4gICAgc2hvdyhvcHRpb25zPzogT3ZlcmxheVNob3dPcHRpb25zKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9tYWluRWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWdpc3RlckNsaWNrKG9wdGlvbnMpO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fbWFpbkVsZW1lbnQpO1xuXG4gICAgICAgIC8vIEZhZGUgSW5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiAodGhpcy5fZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzEnKSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX21haW5FbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl91bnJlZ2lzdGVyQ2xpY2spIHtcbiAgICAgICAgICAgIHRoaXMuX3VucmVnaXN0ZXJDbGljaygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVtb3ZlQWZ0ZXJUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiAodGhpcy5fZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY3JlYXRlRWxlbWVudHMob3B0aW9ucz86IE92ZXJsYXlPcHRpb25zKTogRWxlbWVudHMge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQgPSAncmdiYSgwLCAwLCAwLCAwLjgpJyxcbiAgICAgICAgICAgIGlkID0gJ2NoZWNrb3V0T3ZlcmxheScsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSA0MDAsXG4gICAgICAgICAgICBoYXNDbG9zZUJ1dHRvbiA9IGZhbHNlLFxuICAgICAgICAgICAgaW5uZXJIdG1sID0gbnVsbCxcbiAgICAgICAgfSA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGxldCBtYWluRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIGxldCBjbG9zZUVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2xhc3NMYXlvdXQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNsYXNzQ2xvc2U6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IGNsYXNzT3ZlcmxheVRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuaWQgPSBpZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbm5lckh0bWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgICAgIGNsYXNzT3ZlcmxheVRleHQgPSBgJHtpZH0tLW92ZXJsYXlUZXh0YDtcbiAgICAgICAgICAgIG92ZXJsYXlUZXh0LmNsYXNzTmFtZSA9IGNsYXNzT3ZlcmxheVRleHQ7XG4gICAgICAgICAgICBvdmVybGF5VGV4dC5hcHBlbmRDaGlsZChpbm5lckh0bWwpO1xuXG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG92ZXJsYXlUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNDbG9zZUJ1dHRvbikge1xuICAgICAgICAgICAgY2xhc3NDbG9zZSA9IGAke2lkfS0tY2xvc2VgO1xuICAgICAgICAgICAgY2xvc2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjbG9zZUVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NDbG9zZTtcblxuICAgICAgICAgICAgY2xhc3NMYXlvdXQgPSBgJHtpZH0tLWxheW91dGA7XG4gICAgICAgICAgICBtYWluRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgbWFpbkVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NMYXlvdXQ7XG5cbiAgICAgICAgICAgIG1haW5FbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgbWFpbkVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VFbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1haW5FbGVtZW50LmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgZ2V0T3ZlcmxheVN0eWxlKHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgICAgICAgICBjbGFzc0xheW91dCxcbiAgICAgICAgICAgICAgICBjbGFzc092ZXJsYXlUZXh0LFxuICAgICAgICAgICAgICAgIGNsYXNzQ2xvc2UsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4geyBlbGVtZW50LCBjbG9zZUVsZW1lbnQsIG1haW5FbGVtZW50IH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50PzogSFRNTEVsZW1lbnQsIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICFvbkNsaWNrKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZWxlbWVudD86IEhUTUxFbGVtZW50LFxuICAgICAgICBvbkNsaWNrPzogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkLFxuICAgICk6IHZvaWQge1xuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIW9uQ2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZWdpc3RlckNsaWNrKG9wdGlvbnM/OiBPdmVybGF5U2hvd09wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX3VucmVnaXN0ZXJDbGljaykge1xuICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3RlckNsaWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgeyBvbkNsaWNrLCBvbkNsaWNrQ2xvc2UgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIodGhpcy5fZWxlbWVudCwgb25DbGljayk7XG4gICAgICAgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVyKHRoaXMuX2Nsb3NlRWxlbWVudCwgb25DbGlja0Nsb3NlKTtcblxuICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3RlckNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5fZWxlbWVudCwgb25DbGljayk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLl9jbG9zZUVsZW1lbnQsIG9uQ2xpY2tDbG9zZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3RlckNsaWNrID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3JlbW92ZUFmdGVyVHJhbnNpdGlvbigpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGFuZGxlVHJhbnNpdGlvbjogKGV2ZW50OiBFdmVudCkgPT4gdm9pZCA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gTk9URTogYGV2ZW50YCBpcyBub3QgY29ycmVjdGx5IHR5cGVkIGluIHRoaXMgdmVyc2lvbiBvZiBUU1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9uc1xuICAgICAgICAgICAgaWYgKChldmVudCBhcyBUcmFuc2l0aW9uRXZlbnQpLnByb3BlcnR5TmFtZSAhPT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fbWFpbkVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21haW5FbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uKTtcbiAgICB9XG59XG4iLCJpbnRlcmZhY2UgT3ZlcmxheVN0eWxlT3B0aW9ucyB7XG4gICAgYmFja2dyb3VuZD86IHN0cmluZztcbiAgICBpZD86IHN0cmluZztcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24/OiBudW1iZXI7XG4gICAgY2xhc3NMYXlvdXQ/OiBzdHJpbmc7XG4gICAgY2xhc3NPdmVybGF5VGV4dD86IHN0cmluZztcbiAgICBjbGFzc0Nsb3NlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPdmVybGF5U3R5bGUob3B0aW9uczogT3ZlcmxheVN0eWxlT3B0aW9ucyk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCB7IGlkLCBiYWNrZ3JvdW5kLCB0cmFuc2l0aW9uRHVyYXRpb24sIGNsYXNzTGF5b3V0LCBjbGFzc092ZXJsYXlUZXh0LCBjbGFzc0Nsb3NlIH0gPVxuICAgICAgICBvcHRpb25zO1xuICAgIGNvbnN0IHN0eWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgY29uc3QgYWRkQ2xhc3NMYXlvdXQgPSBjbGFzc0xheW91dCA/IGAsIC4ke2NsYXNzTGF5b3V0fWAgOiAnJztcblxuICAgIHN0eWxlcy5pZCA9IGAke2lkfS0tc3R5bGVzYDtcbiAgICBzdHlsZXMudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGVzLmlubmVyVGV4dCA9IGBcbiAgICAgICAgIyR7aWR9JHthZGRDbGFzc0xheW91dH0ge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICB6LWluZGV4OiAyMTQ3NDgzNjQ3O1xuICAgICAgICB9XG4gICAgICAgICMke2lkfSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5ICR7dHJhbnNpdGlvbkR1cmF0aW9ufW1zIGVhc2Utb3V0O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtiYWNrZ3JvdW5kfTtcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIH1cbiAgICBgO1xuXG4gICAgaWYgKGNsYXNzT3ZlcmxheVRleHQpIHtcbiAgICAgICAgc3R5bGVzLmlubmVyVGV4dCArPSBgXG4gICAgICAgICAgICAgIyR7aWR9IHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgICMke2lkfSAuJHtjbGFzc092ZXJsYXlUZXh0fSB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICAgICAgICAgIG1heC13aWR0aDogMzMwcHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgfVxuICAgICAgICBgO1xuICAgIH1cblxuICAgIGlmIChjbGFzc0Nsb3NlKSB7XG4gICAgICAgIHN0eWxlcy5pbm5lclRleHQgKz0gYFxuICAgICAgICAgICAgIyR7aWR9IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Y2xhc3NMYXlvdXR9IC4ke2NsYXNzQ2xvc2V9IHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgICAgICAgcmlnaHQ6IDE2cHg7XG4gICAgICAgICAgICAgICAgdG9wOiAxNnB4O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjY7XG4gICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgIHotaW5kZXg6IDMxNDc0ODM2NDc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjbGFzc0xheW91dH0gLiR7Y2xhc3NDbG9zZX06OmFmdGVyLCAuJHtjbGFzc0xheW91dH0gLiR7Y2xhc3NDbG9zZX06OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIGxlZnQ6IDhweDtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE2cHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDJweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Y2xhc3NMYXlvdXR9IC4ke2NsYXNzQ2xvc2V9OjphZnRlciB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2NsYXNzTGF5b3V0fSAuJHtjbGFzc0Nsb3NlfTo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlcztcbn1cbiIsImltcG9ydCB7XG4gICAgTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcyxcbiAgICBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzLFxufSBmcm9tICcuL2xvYWRpbmctaW5kaWNhdG9yLXN0eWxlcyc7XG5cbmNvbnN0IERFRkFVTFRfU1RZTEVTOiBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzID0ge1xuICAgIHNpemU6IDcwLFxuICAgIGNvbG9yOiAnI2Q5ZDlkOScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZmZmZicsXG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT05UQUlORVJfU1RZTEVTID0ge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJ3JnYmEoMCwgMCwgMCwgMC40KScsXG4gICAgJ3otaW5kZXgnOiAnMTAwMCcsXG59O1xuXG5jb25zdCBST1RBVElPTl9BTklNQVRJT04gPSAnZW1iZWRkZWQtY2hlY2tvdXQtbG9hZGluZy1pbmRpY2F0b3Itcm90YXRpb24nO1xuXG5pbnRlcmZhY2UgTG9hZGluZ0luZGljYXRvck9wdGlvbnMge1xuICAgIHN0eWxlcz86IExvYWRpbmdJbmRpY2F0b3JTdHlsZXM7XG4gICAgY29udGFpbmVyU3R5bGVzPzogTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9hZGluZ0luZGljYXRvciB7XG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgaW5kaWNhdG9yOiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIHN0eWxlczogTG9hZGluZ0luZGljYXRvclN0eWxlcztcbiAgICBwcml2YXRlIGNvbnRhaW5lclN0eWxlczogTG9hZGluZ0luZGljYXRvckNvbnRhaW5lclN0eWxlcztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBMb2FkaW5nSW5kaWNhdG9yT3B0aW9ucykge1xuICAgICAgICB0aGlzLnN0eWxlcyA9IHsgLi4uREVGQVVMVF9TVFlMRVMsIC4uLihvcHRpb25zICYmIG9wdGlvbnMuc3R5bGVzKSB9O1xuICAgICAgICB0aGlzLmNvbnRhaW5lclN0eWxlcyA9IHsgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5jb250YWluZXJTdHlsZXMpIH07XG5cbiAgICAgICAgdGhpcy5kZWZpbmVBbmltYXRpb24oKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuYnVpbGRDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3IgPSB0aGlzLmJ1aWxkSW5kaWNhdG9yKCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5pbmRpY2F0b3IpO1xuICAgIH1cblxuICAgIHNob3cocGFyZW50SWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHBhcmVudElkKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwYXJlbnRJZCk7XG5cbiAgICAgICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGF0dGFjaCB0aGUgbG9hZGluZyBpbmRpY2F0b3IgYmVjYXVzZSB0aGUgcGFyZW50IElEIGlzIG5vdCB2YWxpZC4nLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgIH1cblxuICAgIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGhhbmRsZVRyYW5zaXRpb25FbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgaGFuZGxlVHJhbnNpdGlvbkVuZCk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYm90dG9tID0gJzAnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUucmlnaHQgPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gJ2FsbCAyNTBtcyBlYXNlLW91dCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXG4gICAgICAgIHRoaXMuc2V0U3R5bGVBdHRyaWJ1dGUoY29udGFpbmVyLCB0aGlzLmNvbnRhaW5lclN0eWxlcyk7XG5cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkSW5kaWNhdG9yKCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUud2lkdGggPSBgJHt0aGlzLnN0eWxlcy5zaXplfXB4YDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuc3R5bGVzLnNpemV9cHhgO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuYm9yZGVyUmFkaXVzID0gYCR7dGhpcy5zdHlsZXMuc2l6ZX1weGA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5ib3JkZXIgPSAnc29saWQgMXB4JztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlckNvbG9yID0gYCR7dGhpcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfSAke3RoaXMuc3R5bGVzLmJhY2tncm91bmRDb2xvcn0gJHt0aGlzLnN0eWxlcy5jb2xvcn0gJHt0aGlzLnN0eWxlcy5jb2xvcn1gO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUubWFyZ2luID0gJzAgYXV0byc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUucmlnaHQgPSAnMCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS50b3AgPSAnNTAlJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC01MCUpIHJvdGF0ZSgwZGVnKSc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5hbmltYXRpb24gPSBgJHtST1RBVElPTl9BTklNQVRJT059IDUwMG1zIGluZmluaXRlIGN1YmljLWJlemllcigwLjY5LCAwLjMxLCAwLjU2LCAwLjgzKWA7XG5cbiAgICAgICAgcmV0dXJuIGluZGljYXRvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldFN0eWxlQXR0cmlidXRlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBhdHRyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSk6IHZvaWQge1xuICAgICAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShrLCBhdHRyc1trXSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVmaW5lQW5pbWF0aW9uKCk6IHZvaWQge1xuICAgICAgICAvLyBJbiBvcmRlciB0byBkZWZpbmUgQ1NTIGFuaW1hdGlvbiwgd2UgbmVlZCB0byBpbnNlcnQgYSBzdHlsZXNoZWV0IGludG8gdGhlIGhvc3QgZnJhbWUuXG4gICAgICAgIC8vIFdlIG9ubHkgaGF2ZSB0byBkbyBpdCBvbmNlLlxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUk9UQVRJT05fQU5JTUFUSU9OKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXG4gICAgICAgIHN0eWxlLmlkID0gUk9UQVRJT05fQU5JTUFUSU9OO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG4gICAgICAgIGRvY3VtZW50LmhlYWQ/LmFwcGVuZENoaWxkKHN0eWxlKTtcblxuICAgICAgICBpZiAoc3R5bGUuc2hlZXQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHByb3ZpZGUgdGhlIDJuZCBwYXJhbWV0ZXIgZm9yIElFMTEsIGV2ZW4gdGhvdWdoIGl0IGlzXG4gICAgICAgICAgICAvLyAwIGJ5IGRlZmF1bHQgZm9yIGFsbCBvdGhlciBicm93c2Vycy5cbiAgICAgICAgICAgIHN0eWxlLnNoZWV0Lmluc2VydFJ1bGUoXG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIEBrZXlmcmFtZXMgJHtST1RBVElPTl9BTklNQVRJT059IHtcbiAgICAgICAgICAgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDBkZWcpOyB9XG4gICAgICAgICAgICAgICAgICAgIDEwMCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDM2MGRlZyk7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IExPQURJTkdfSU5ESUNBVE9SX1NUWUxFUyA9IHtcbiAgICAnYmFja2dyb3VuZC1jb2xvcic6ICdyZ2JhKDAsIDAsIDAsIDAuNCknLFxuICAgICd6LWluZGV4JzogJzEwMDAnLFxufTtcbiIsImltcG9ydCB7IEJyYWludHJlZUVycm9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZUVycm9yKFxuICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IEVycm9yIHwgdW5rbm93bixcbik6IGVycm9yIGlzIEJyYWludHJlZUVycm9yIHtcbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmXG4gICAgICAgIGVycm9yICE9PSBudWxsICYmXG4gICAgICAgICduYW1lJyBpbiBlcnJvciAmJlxuICAgICAgICAoZXJyb3IgYXMgQnJhaW50cmVlRXJyb3IpLm5hbWUgPT09ICdCcmFpbnRyZWVFcnJvcidcbiAgICApO1xufVxuIiwiaW1wb3J0IHsgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoXG4gICAgYWRkcmVzczogQWRkcmVzcyxcbik6IEJyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWNpcGllbnROYW1lOiBgJHthZGRyZXNzLmZpcnN0TmFtZX0gJHthZGRyZXNzLmxhc3ROYW1lfWAsXG4gICAgICAgIGxpbmUxOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICBsaW5lMjogYWRkcmVzcy5hZGRyZXNzMixcbiAgICAgICAgY2l0eTogYWRkcmVzcy5jaXR5LFxuICAgICAgICBzdGF0ZTogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIGNvdW50cnlDb2RlOiBhZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICBwaG9uZTogYWRkcmVzcy5waG9uZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgTWVzc2FnaW5nUGxhY2VtZW50cyxcbiAgICBQYXlwYWxBdXRob3JpemVEYXRhLFxuICAgIFBheXBhbEJ1dHRvblJlbmRlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBpc1ZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvcixcbiAgICBOb3RJbml0aWFsaXplZEVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcixcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBQYXlwYWxJbnN0cnVtZW50LFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgaXNCcmFpbnRyZWVFcnJvciBmcm9tICcuLi9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IGlzQnJhaW50cmVlUGF5cGFsUHJvdmlkZXJFcnJvciBmcm9tICcuLi9pcy1icmFpbnRyZWUtcGF5cGFsLXByb3ZpZGVyLWVycm9yJztcbmltcG9ydCBtYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIGZyb20gJy4uL21hcC10by1icmFpbnRyZWUtc2hpcHBpbmctYWRkcmVzcy1vdmVycmlkZSc7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlUGF5cGFsUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFdpdGhCcmFpbnRyZWVQYXlwYWxQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vYnJhaW50cmVlLXBheXBhbC1wYXltZW50LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVBheXBhbFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBwcml2YXRlIGJyYWludHJlZT86IEJyYWludHJlZVBheXBhbFBheW1lbnRJbml0aWFsaXplT3B0aW9ucztcbiAgICBwcml2YXRlIGJyYWludHJlZVRva2VuaXplUGF5bG9hZD86IEJyYWludHJlZVRva2VuaXplUGF5bG9hZDtcbiAgICBwcml2YXRlIHBheXBhbEJ1dHRvblJlbmRlcj86IFBheXBhbEJ1dHRvblJlbmRlcjtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZU1lc3NhZ2VzOiBCcmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVlOiBicmFpbnRyZWVPcHRpb25zLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLmJyYWludHJlZSA9IGJyYWludHJlZU9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBheW1lbnRNZXRob2QgfHwgIXRoaXMucGF5bWVudE1ldGhvZC5ub25jZSkge1xuICAgICAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmdldFN0YXRlKClcbiAgICAgICAgICAgICAgICAuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGF5bWVudE1ldGhvZC5jbGllbnRUb2tlbiAmJiBicmFpbnRyZWVPcHRpb25zPy5iYW5uZXJDb250YWluZXJJZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5cGFsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRQYXlwYWxDaGVja291dEluc3RhbmNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkUGF5cGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmIChicmFpbnRyZWVPcHRpb25zPy5iYW5uZXJDb250YWluZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFBheXBhbENoZWNrb3V0SW5zdGFuY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkUGF5cGFsKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShvcmRlclJlcXVlc3Q6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gb3JkZXJSZXF1ZXN0O1xuXG4gICAgICAgIGNvbnN0IHsgb25FcnJvciB9ID0gdGhpcy5icmFpbnRyZWUgfHwge307XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQsIG9yZGVyLnVzZVN0b3JlQ3JlZGl0KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnREYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvdmlkZXJFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlwYWwoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uUmVuZGVyPy5jbG9zZSgpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKF9yZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IgJiYgdHlwZW9mIG9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IobmV3IEVycm9yKCdJTlNUUlVNRU5UX0RFQ0xJTkVEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b25SZW5kZXI/LmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlUGF5bWVudERhdGEoXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICAgICB1c2VTdG9yZUNyZWRpdD86IGJvb2xlYW4sXG4gICAgKTogUHJvbWlzZTxQYXltZW50PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgY29uc3QgZ3JhbmRUb3RhbCA9IHN0YXRlLmdldE91dHN0YW5kaW5nQmFsYW5jZSh1c2VTdG9yZUNyZWRpdCk7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHN0YXRlLmdldFN0b3JlQ29uZmlnKCk7XG5cbiAgICAgICAgaWYgKCFncmFuZFRvdGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2hlY2tvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDaGVja291dENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGF5bWVudE1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgc3RvcmVQcm9maWxlOiB7IHN0b3JlTGFuZ3VhZ2UgfSxcbiAgICAgICAgfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBjb25maWc6IHsgaXNWYXVsdGluZ0VuYWJsZWQgfSxcbiAgICAgICAgfSA9IHRoaXMucGF5bWVudE1ldGhvZDtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5bWVudERhdGEgPSB7fSB9ID0gcGF5bWVudDtcblxuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuYnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPy5ub25jZSB8fCBub25jZTtcblxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucGF5bWVudCxcbiAgICAgICAgICAgICAgICBwYXltZW50RGF0YTogdGhpcy5mb3JtYXR0ZWRQYXlsb2FkKHRva2VuKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkgfHwgaXNIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIGlmICghaXNWYXVsdGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdWYXVsdGluZyBpcyBkaXNhYmxlZCBidXQgYSB2YXVsdGVkIGluc3RydW1lbnQgd2FzIGJlaW5nIHVzZWQgZm9yIHRoaXMgdHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGF5bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50LCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IH0gPSBwYXltZW50RGF0YTtcblxuICAgICAgICBpZiAoc2hvdWxkU2F2ZUluc3RydW1lbnQgJiYgIWlzVmF1bHRpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1ZhdWx0aW5nIGlzIGRpc2FibGVkIGJ1dCBzaG91bGRTYXZlSW5zdHJ1bWVudCBpcyBzZXQgdG8gdHJ1ZScsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID0gc3RhdGUuZ2V0U2hpcHBpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgPSBzaGlwcGluZ0FkZHJlc3NcbiAgICAgICAgICAgID8gbWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZShzaGlwcGluZ0FkZHJlc3MpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucGF5cGFsKHtcbiAgICAgICAgICAgICAgICBhbW91bnQ6IGdyYW5kVG90YWwsXG4gICAgICAgICAgICAgICAgbG9jYWxlOiBzdG9yZUxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgICAgIG9mZmVyQ3JlZGl0OiB0aGlzLnBheW1lbnRNZXRob2QuaWQgPT09ICdicmFpbnRyZWVwYXlwYWxjcmVkaXQnLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLFxuICAgICAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50OiBzaG91bGRTYXZlSW5zdHJ1bWVudCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NFZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNlc3Npb25JZCgpLFxuICAgICAgICBdKS50aGVuKChbeyBub25jZSwgZGV0YWlscyB9ID0ge30gYXMgYW55LCBzZXNzaW9uSWRdKSA9PiAoe1xuICAgICAgICAgICAgLi4ucGF5bWVudCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB0aGlzLmZvcm1hdHRlZFBheWxvYWQoXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV0YWlscyAmJiBkZXRhaWxzLmVtYWlsLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0dGVkUGF5bG9hZChcbiAgICAgICAgdG9rZW46IHN0cmluZyxcbiAgICAgICAgZW1haWw/OiBzdHJpbmcsXG4gICAgICAgIHNlc3Npb25JZD86IHN0cmluZyxcbiAgICAgICAgdmF1bHRQYXltZW50SW5zdHJ1bWVudD86IGJvb2xlYW4sXG4gICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQ/OiBib29sZWFuLFxuICAgICk6IEZvcm1hdHRlZFBheWxvYWQ8UGF5cGFsSW5zdHJ1bWVudD4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIHZhdWx0X3BheW1lbnRfaW5zdHJ1bWVudDogdmF1bHRQYXltZW50SW5zdHJ1bWVudCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHNldF9hc19kZWZhdWx0X3N0b3JlZF9pbnN0cnVtZW50OiBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2luZm86IHNlc3Npb25JZCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRQYXlwYWxDaGVja291dEluc3RhbmNlKCkge1xuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEsIGlkOiBwYXltZW50TWV0aG9kSWQgfSA9IHRoaXMucGF5bWVudE1ldGhvZCB8fCB7fTtcblxuICAgICAgICBpZiAoIWNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuaW5pdGlhbGl6ZShjbGllbnRUb2tlbik7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KClcbiAgICAgICAgICAgICAgICAuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRDb25maWc6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IGluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgICAgIGlzQ3JlZGl0RW5hYmxlZDogaW5pdGlhbGl6YXRpb25EYXRhPy5pc0NyZWRpdEVuYWJsZWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBpc0JyYWludHJlZVBheXBhbENyZWRpdCA9IHBheW1lbnRNZXRob2RJZCA9PT0gJ2JyYWludHJlZXBheXBhbGNyZWRpdCc7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTaG93UGF5UGFsQ3JlZGl0QmFubmVyID1cbiAgICAgICAgICAgICAgICBpc0JyYWludHJlZVBheXBhbENyZWRpdCB8fCAhaW5pdGlhbGl6YXRpb25EYXRhPy5pc0NyZWRpdEVuYWJsZWQ7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheXBhbENoZWNrb3V0KFxuICAgICAgICAgICAgICAgIHBheXBhbENoZWNrb3V0Q29uZmlnLFxuICAgICAgICAgICAgICAgIChicmFpbnRyZWVQYXlwYWxDaGVja291dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRTaG93UGF5UGFsQ3JlZGl0QmFubmVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlPy5iYW5uZXJDb250YWluZXJJZFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsTWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlLmJhbm5lckNvbnRhaW5lcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKGJyYWludHJlZVBheXBhbENoZWNrb3V0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IsXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbE1lc3NhZ2VzKG1ldGhvZElkOiBzdHJpbmcsIGNvbnRhaW5lcklkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVNZXNzYWdlcy5yZW5kZXIobWV0aG9kSWQsIGNvbnRhaW5lcklkLCBNZXNzYWdpbmdQbGFjZW1lbnRzLlBBWU1FTlQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyUGF5UGFsQnV0dG9uKGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCkge1xuICAgICAgICBjb25zdCB7IG9uUGF5bWVudEVycm9yLCBzdWJtaXRGb3JtLCBvblJlbmRlckJ1dHRvbiwgY29udGFpbmVySWQsIG9uRXJyb3IgfSA9XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZSB8fCB7fTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGF5bWVudE1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IGNvbnRhaW5lcklkLnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBjb25maWc6IHsgdGVzdE1vZGUgfSxcbiAgICAgICAgfSA9IHRoaXMucGF5bWVudE1ldGhvZDtcblxuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlID0gcGF5cGFsPy5GVU5ESU5HLlBBWVBBTDtcblxuICAgICAgICBpZiAocGF5cGFsICYmIGZ1bmRpbmdTb3VyY2UpIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uUmVuZGVyID0gcGF5cGFsLkJ1dHRvbnMoe1xuICAgICAgICAgICAgICAgIGVudjogdGVzdE1vZGUgPyAnc2FuZGJveCcgOiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgY29tbWl0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmdW5kaW5nU291cmNlLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+IHRoaXMuc2V0dXBQYXltZW50KGJyYWludHJlZVBheXBhbENoZWNrb3V0LCBpZCwgb25QYXltZW50RXJyb3IpLFxuICAgICAgICAgICAgICAgIG9uQXBwcm92ZTogYXN5bmMgKGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgPSBhd2FpdCB0aGlzLnRva2VuaXplUGF5bWVudE9yVGhyb3coXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym1pdEZvcm0gJiYgdHlwZW9mIHN1Ym1pdEZvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yPy4oZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBheXBhbEJ1dHRvblJlbmRlci5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbEJ1dHRvblJlbmRlci5yZW5kZXIoYCR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVsZW1lbnQoY29udGFpbmVySWQuc3BsaXQoJyMnKVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldHVwUGF5bWVudChcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBtZXRob2Q6IHN0cmluZyxcbiAgICAgICAgb25QYXltZW50RXJyb3I6IEJyYWludHJlZVBheXBhbFBheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25QYXltZW50RXJyb3InXSxcbiAgICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2QpO1xuXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBzdGF0ZS5nZXRDaGVja291dE9yVGhyb3coKS5vdXRzdGFuZGluZ0JhbGFuY2U7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRTaGlwcGluZ0FkZHJlc3MoKTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YS5pbnRlbnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChvblBheW1lbnRFcnJvciAmJiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSkge1xuICAgICAgICAgICAgICAgIG9uUGF5bWVudEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRva2VuaXplUGF5bWVudE9yVGhyb3coXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgb25FcnJvcj86IChlcnJvcjogQnJhaW50cmVlRXJyb3IgfCBTdGFuZGFyZEVycm9yKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQudG9rZW5pemVQYXltZW50KGF1dGhvcml6ZURhdGEpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IgJiYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpIHx8IGVycm9yIGluc3RhbmNlb2YgU3RhbmRhcmRFcnJvcikpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRQYXlwYWwoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gdGhpcy5wYXltZW50TWV0aG9kIHx8IHt9O1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlwYWwoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgRXJyb3IgfCB1bmtub3duKTogbmV2ZXIge1xuICAgICAgICBpZiAoIWlzQnJhaW50cmVlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnUEFZUEFMX1BPUFVQX0NMT1NFRCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNQcm92aWRlckVycm9yKGVycm9yOiB1bmtub3duKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChpc0JyYWludHJlZVBheXBhbFByb3ZpZGVyRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxQcm92aWRlckVycm9yID0gZXJyb3I/LmVycm9ycz8uZmlsdGVyKChlKSA9PiBlLnByb3ZpZGVyX2Vycm9yKSB8fCBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHBheXBhbFByb3ZpZGVyRXJyb3JbMF0/LnByb3ZpZGVyX2Vycm9yPy5jb2RlID09PSAnMjA0Nic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVFbGVtZW50KGVsZW1lbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIExvYWRpbmcgSW5kaWNhdG9yIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGlzTG9hZGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoaXNMb2FkaW5nICYmIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLnNob3codGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIFByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZXJyb3JzPzogRXJyb3JFbGVtZW50W107XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIHRocmVlX2RzX3Jlc3VsdD86IHtcbiAgICAgICAgYWNzX3VybDogdW5rbm93bjtcbiAgICAgICAgcGF5ZXJfYXV0aF9yZXF1ZXN0OiB1bmtub3duO1xuICAgICAgICBtZXJjaGFudF9kYXRhOiB1bmtub3duO1xuICAgICAgICBjYWxsYmFja191cmw6IHVua25vd247XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckVsZW1lbnQge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcHJvdmlkZXJfZXJyb3I/OiB7XG4gICAgICAgIGNvZGU6IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZVBheXBhbFByb3ZpZGVyRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBQcm92aWRlckVycm9yIHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnZXJyb3JzJyBpbiBlcnJvcjtcbn1cbiIsImltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVNZXNzYWdlcyxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciwgT3ZlcmxheSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgeyBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMgfSBmcm9tICcuLi9icmFpbnRyZWUtcGF5cGFsLWNvbnN0YW50cyc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVQYXlwYWxQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgT3ZlcmxheSgpO1xuXG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlID0gbmV3IEJyYWludHJlZUludGVncmF0aW9uU2VydmljZShcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihcbiAgICAgICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgICAgIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxuICAgICAgICApLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBvdmVybGF5LFxuICAgICk7XG4gICAgY29uc3QgYnJhaW50cmVlTWVzc2FnZXMgPSBuZXcgQnJhaW50cmVlTWVzc2FnZXMocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVBheXBhbFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3Ioe1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzOiBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMsXG4gICAgICAgIH0pLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbCcgfSxcbiAgICB7IGlkOiAnYnJhaW50cmVlcGF5cGFsY3JlZGl0JyB9LFxuXSk7XG4iLCJlbnVtIENvbnRlbnRUeXBlIHtcbiAgICBKc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIEpzb25WMSA9ICdhcHBsaWNhdGlvbi92bmQuYmMudjEranNvbicsXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRlbnRUeXBlO1xuIiwiZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OX0hFQURFUlMgPSB7ICdYLUNoZWNrb3V0LVNESy1WZXJzaW9uJzogTElCUkFSWV9WRVJTSU9OIH07XG4iLCJpbXBvcnQgeyBSZXF1ZXN0U2VuZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IHsgQnJhaW50cmVlT3JkZXJTdGF0dXNEYXRhIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDb250ZW50VHlwZSxcbiAgICBJTlRFUk5BTF9VU0VfT05MWSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTREtfVkVSU0lPTl9IRUFERVJTLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlUmVxdWVzdFNlbmRlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZXF1ZXN0U2VuZGVyOiBSZXF1ZXN0U2VuZGVyKSB7fVxuXG4gICAgYXN5bmMgZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgIG1ldGhvZElkID0gJ2JyYWludHJlZWxvY2FsbWV0aG9kcycsXG4gICAgICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZU9yZGVyU3RhdHVzRGF0YT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L2luaXRpYWxpemF0aW9uLyR7bWV0aG9kSWR9YDtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdYLUFQSS1JTlRFUk5BTCc6IElOVEVSTkFMX1VTRV9PTkxZLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlLkpzb24sXG4gICAgICAgICAgICAuLi5TREtfVkVSU0lPTl9IRUFERVJTLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdFNlbmRlci5nZXQ8QnJhaW50cmVlT3JkZXJTdGF0dXNEYXRhPih1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IElOVEVSTkFMX1VTRV9PTkxZID1cbiAgICAnVGhpcyBBUEkgZW5kcG9pbnQgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5IGFuZCBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmUnO1xuIiwiaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuY29uc3QgREVGQVVMVF9SRVNQT05TRSA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBzdGF0dXM6IDAsXG59O1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgYXJlIHVuYWJsZSB0byBtYWtlIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLiBJdCB3cmFwc1xuICogYW55IHNlcnZlciByZXNwb25zZSBpbnRvIGEgSlMgZXJyb3Igb2JqZWN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0RXJyb3I8VEJvZHkgPSBhbnk+IGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgYm9keTogVEJvZHkgfCB7fTtcbiAgICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAgIGVycm9yczogQXJyYXk8eyBjb2RlOiBzdHJpbmc7IG1lc3NhZ2U/OiBzdHJpbmcgfT47XG4gICAgc3RhdHVzOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVzcG9uc2U/OiBSZXNwb25zZTxUQm9keSB8IHt9PixcbiAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGVycm9ycyxcbiAgICAgICAgfToge1xuICAgICAgICAgICAgbWVzc2FnZT86IHN0cmluZztcbiAgICAgICAgICAgIGVycm9ycz86IEFycmF5PHsgY29kZTogc3RyaW5nOyBtZXNzYWdlPzogc3RyaW5nIH0+O1xuICAgICAgICB9ID0ge30sXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycywgc3RhdHVzIH0gPSByZXNwb25zZSB8fCBERUZBVUxUX1JFU1BPTlNFO1xuXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAncmVxdWVzdCc7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB1bmFibGUgdG8gc3VjY2Vzc2Z1bGx5IHN1Ym1pdCBhIHNlcnZlciByZXF1ZXN0XG4gKiB1c2luZyBhIHBheW1lbnQgbWV0aG9kIGJlY2F1c2UgdGhlIG1ldGhvZCBoYXMgaW52YWxpZCBjb25maWd1cmF0aW9uIG9yIGlzIGluXG4gKiBhbiBpbnZhbGlkIHN0YXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlcmUgaXMgYSBwcm9ibGVtIHByb2Nlc3NpbmcgeW91ciBwYXltZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kSW52YWxpZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2ludmFsaWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFJlcXVlc3RFcnJvciBmcm9tICcuL3JlcXVlc3QtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgYSByZXF1ZXN0IGZhaWxzIHRvIGNvbXBsZXRlIHdpdGhpbiBpdHMgcmVxdWlyZWQgdGltZWZyYW1lXG4gKiBiZWNhdXNlIG9mIGEgbmV0d29yayBpc3N1ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZW91dEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlIHJlcXVlc3QgaGFzIHRpbWVkIG91dCBvciBhYm9ydGVkLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAndGltZW91dCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUxvY2FsUGF5bWVudCxcbiAgICBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcsXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50TWV0aG9kUmVkaXJlY3RBY3Rpb24sXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50c1BheWxvYWQsXG4gICAgQnJhaW50cmVlTFBNUGF5bWVudFN0YXJ0RGF0YSxcbiAgICBCcmFpbnRyZWVMUE1TdGFydFBheW1lbnRFcnJvcixcbiAgICBCcmFpbnRyZWVPcmRlclNhdmVkUmVzcG9uc2UsXG4gICAgQnJhaW50cmVlT3JkZXJTdGF0dXMsXG4gICAgQnJhaW50cmVlUmVkaXJlY3RFcnJvcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgTm9uSW5zdGFudExvY2FsUGF5bWVudE1ldGhvZHMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnN0cnVtZW50TWV0YSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBUaW1lb3V0RXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyIGZyb20gJy4uL2JyYWludHJlZS1yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFdpdGhCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vYnJhaW50cmVlLWxvY2FsLW1ldGhvZHMtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5jb25zdCBQT0xMSU5HX0lOVEVSVkFMID0gMzAwMDtcbmNvbnN0IE1BWF9QT0xMSU5HX1RJTUUgPSAzMDAwMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVsb2NhbG1ldGhvZHM/OiBCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVMb2NhbFBheW1lbnQ/OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgb3JkZXJJZD86IHN0cmluZztcbiAgICBwcml2YXRlIGdhdGV3YXlJZD86IHN0cmluZztcbiAgICBwcml2YXRlIGlzTFBNc1VwZGF0ZUV4cGVyaW1lbnRFbmFibGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBwb2xsaW5nVGltZXIgPSAwO1xuICAgIHByaXZhdGUgc3RvcFBvbGxpbmcgPSBub29wO1xuICAgIHByaXZhdGUgaXNQb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVSZXF1ZXN0U2VuZGVyOiBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHByaXZhdGUgcG9sbGluZ0ludGVydmFsOiBudW1iZXIgPSBQT0xMSU5HX0lOVEVSVkFMLFxuICAgICAgICBwcml2YXRlIG1heFBvbGxpbmdJbnRlcnZhbFRpbWU6IG51bWJlciA9IE1BWF9QT0xMSU5HX1RJTUUsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBnYXRld2F5SWQsIG1ldGhvZElkLCBicmFpbnRyZWVsb2NhbG1ldGhvZHMgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy5nYXRld2F5SWQgPSBnYXRld2F5SWQ7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnYXRld2F5SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nYXRld2F5SWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWxvY2FsbWV0aG9kcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZWxvY2FsbWV0aG9kc1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlbG9jYWxtZXRob2RzID0gYnJhaW50cmVlbG9jYWxtZXRob2RzO1xuICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIgPSBicmFpbnRyZWVsb2NhbG1ldGhvZHMuY29udGFpbmVyLnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKGdhdGV3YXlJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4oZ2F0ZXdheUlkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcblxuICAgICAgICB0aGlzLmlzUG9sbGluZ0VuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUEFZUEFMLTUyNTguYnJhaW50cmVlX2xvY2FsX21ldGhvZHNfcG9sbGluZycsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pc0xQTXNVcGRhdGVFeHBlcmltZW50RW5hYmxlZCA9IGlzRXhwZXJpbWVudEVuYWJsZWQoXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgICdQQVlQQUwtNDg1My5hZGRfbmV3X3BheW1lbnRfZmxvd19mb3JfYnJhaW50cmVlX2xwbXMnLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSB8fCAhY29uZmlnLm1lcmNoYW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTm9uSW5zdGFudFBheW1lbnRNZXRob2QobWV0aG9kSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVMb2NhbFBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5tZXJjaGFudElkLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IG1ldGhvZElkIH0gPSBwYXltZW50O1xuXG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuICAgICAgICBpZiAodGhpcy5pc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aE5vdEluc3RhbnRMUE0obWV0aG9kSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aEluc3RhbnRMUE0obWV0aG9kSWQsIG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhOb3RJbnN0YW50TFBNKG1ldGhvZElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2ljUGF5bWVudERhdGEgPSBhd2FpdCB0aGlzLmdldExQTXNCYXNpY1BheW1lbnREYXRhKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcigpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmJhc2ljUGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNCcmFpbnRyZWVSZWRpcmVjdEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VXJsID0gZXJyb3IuYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZC5kYXRhLnJlZGlyZWN0X3VybDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0VXJsKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhJbnN0YW50TFBNKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvcmRlcjogT21pdDxPcmRlclJlcXVlc3RCb2R5LCAncGF5bWVudCc+LFxuICAgICAgICBvcHRpb25zPzogUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIXRoaXMuYnJhaW50cmVlTG9jYWxQYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQ/LnN0YXJ0UGF5bWVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdldEluc3RhbnRMUE1Db25maWcobWV0aG9kSWQsIG9yZGVyLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldEluc3RhbnRMUE1DYWxsYmFjayhyZXNvbHZlLCByZWplY3QsIG1ldGhvZElkLCBvcmRlciwgb3B0aW9ucyksXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldExQTXNCYXNpY1BheW1lbnREYXRhKCk6IFByb21pc2U8UGF5bWVudEluc3RydW1lbnRNZXRhPiB7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKTtcblxuICAgICAgICByZXR1cm4geyBkZXZpY2VTZXNzaW9uSWQ6IGRldmljZURhdGEgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluc3RhbnRMUE1Db25maWcoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9yZGVyOiBPbWl0PE9yZGVyUmVxdWVzdEJvZHksICdwYXltZW50Jz4sXG4gICAgICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgICApOiBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIGNvdW50cnlDb2RlIH0gPSBiaWxsaW5nO1xuICAgICAgICBjb25zdCB7IGN1cnJlbmN5LCBlbWFpbCwgbGluZUl0ZW1zIH0gPSBjYXJ0O1xuICAgICAgICBjb25zdCBpc1NoaXBwaW5nUmVxdWlyZWQgPSBsaW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBncmFuZFRvdGFsID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCkub3V0c3RhbmRpbmdCYWxhbmNlO1xuICAgICAgICBjb25zdCBjaGVja291dFVybCA9IHN0YXRlLmdldFN0b3JlQ29uZmlnT3JUaHJvdygpLmxpbmtzLmNoZWNrb3V0TGluaztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF5bWVudFR5cGU6IG1ldGhvZElkLFxuICAgICAgICAgICAgYW1vdW50OiBncmFuZFRvdGFsLFxuICAgICAgICAgICAgZmFsbGJhY2s6IHtcbiAgICAgICAgICAgICAgICB1cmw6IGNoZWNrb3V0VXJsLFxuICAgICAgICAgICAgICAgIGJ1dHRvblRleHQ6ICdDb21wbGV0ZSBQYXltZW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGU6IGN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NSZXF1aXJlZDogaXNTaGlwcGluZ1JlcXVpcmVkLFxuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBnaXZlbk5hbWU6IGZpcnN0TmFtZSxcbiAgICAgICAgICAgIHN1cm5hbWU6IGxhc3ROYW1lLFxuICAgICAgICAgICAgYWRkcmVzczoge1xuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUGF5bWVudFN0YXJ0OiBhc3luYyAoZGF0YTogQnJhaW50cmVlTFBNUGF5bWVudFN0YXJ0RGF0YSwgc3RhcnQ6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gZGF0YS5wYXltZW50SWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzaWNQYXltZW50RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYmFzaWNQYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtgJHttZXRob2RJZH1fYWNjb3VudGBdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IGRhdGEucGF5bWVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VibWl0IG9yZGVyIGFuZCBwYXltZW50IHNob3VsZCBiZSBwZXJmb3JtZWQgdG8gcGFzcyBvcmRlcl9pZCB0byB0aGUgYmFja2VuZFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnREYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlKGVycm9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZC5kYXRhLm9yZGVyX2lkX3NhdmVkX3N1Y2Nlc3NmdWxseVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IG1ldGhvZCBjYWxsIGluaXRpYXRlcyB0aGUgcG9wdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluc3RhbnRMUE1DYWxsYmFjayhcbiAgICAgICAgcmVzb2x2ZTogKHZhbHVlOiB1bmtub3duKSA9PiB2b2lkLFxuICAgICAgICByZWplY3Q6IChyZWFzb24/OiB1bmtub3duKSA9PiB2b2lkLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvcmRlcjogT21pdDxPcmRlclJlcXVlc3RCb2R5LCAncGF5bWVudCc+LFxuICAgICAgICBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBhc3luYyAoXG4gICAgICAgICAgICBzdGFydFBheW1lbnRFcnJvcjogQnJhaW50cmVlTFBNU3RhcnRQYXltZW50RXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICBwYXlsb2FkRGF0YTogQnJhaW50cmVlTG9jYWxQYXltZW50c1BheWxvYWQsXG4gICAgICAgICkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXJ0UGF5bWVudEVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UGF5bWVudEVycm9yLmNvZGUgPT09ICdMT0NBTF9QQVlNRU5UX1dJTkRPV19DTE9TRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYmFzaWNQYXltZW50RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnREYXRhID0ge1xuICAgICAgICAgICAgICAgIC4uLmJhc2ljUGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICBbYCR7bWV0aG9kSWR9X2FjY291bnRgXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNhcnQuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogcGF5bG9hZERhdGEubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQgPyB7IG9yZGVyX2lkOiB0aGlzLm9yZGVySWQgfSA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bikge1xuICAgICAgICBjb25zdCB7IG9uRXJyb3IgfSA9IHRoaXMuYnJhaW50cmVlbG9jYWxtZXRob2RzIHx8IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBpc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZElkLnRvVXBwZXJDYXNlKCkgaW4gTm9uSW5zdGFudExvY2FsUGF5bWVudE1ldGhvZHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0JyYWludHJlZVJlZGlyZWN0RXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBCcmFpbnRyZWVSZWRpcmVjdEVycm9yIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvciAhPT0gJ29iamVjdCcgfHwgZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYm9keSB9OiBQYXJ0aWFsPEJyYWludHJlZUxvY2FsUGF5bWVudE1ldGhvZFJlZGlyZWN0QWN0aW9uPiA9IGVycm9yO1xuXG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZD8uZGF0YS5yZWRpcmVjdF91cmw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0JyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZShcbiAgICAgICAgcmVzcG9uc2U6IHVua25vd24sXG4gICAgKTogcmVzcG9uc2UgaXMgQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSAhPT0gJ29iamVjdCcgfHwgcmVzcG9uc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYm9keSB9OiBQYXJ0aWFsPEJyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZT4gPSByZXNwb25zZTtcblxuICAgICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib2R5LmFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkPy5kYXRhLmhhc093blByb3BlcnR5KCdvcmRlcl9pZF9zYXZlZF9zdWNjZXNzZnVsbHknKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBvbGxpbmcgbWVjaGFuaXNtXG4gICAgICpcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcmVzb2x2ZVByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIHJlamVjdFByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIGdhdGV3YXlJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucG9sbGluZ1RpbWVyICs9IHRoaXMucG9sbGluZ0ludGVydmFsO1xuXG4gICAgICAgICAgICBjb25zdCBvcmRlclN0YXR1cyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlUmVxdWVzdFNlbmRlci5nZXRPcmRlclN0YXR1cyhnYXRld2F5SWQsIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlTWV0YWRhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgaXNPcmRlclBlbmRpbmcgPSBvcmRlclN0YXR1cy5zdGF0dXMgPT09IEJyYWludHJlZU9yZGVyU3RhdHVzLlBlbmRpbmc7XG4gICAgICAgICAgICBjb25zdCBpc09yZGVyQXBwcm92ZWQgPSBvcmRlclN0YXR1cy5zdGF0dXMgPT09IEJyYWludHJlZU9yZGVyU3RhdHVzLkNvbXBsZXRlZDtcbiAgICAgICAgICAgIGNvbnN0IGlzUG9sbGluZ0Vycm9yID0gb3JkZXJTdGF0dXMuc3RhdHVzID09PSBCcmFpbnRyZWVPcmRlclN0YXR1cy5GYWlsZWQ7XG5cbiAgICAgICAgICAgIGlmIChpc09yZGVyQXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNQb2xsaW5nRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWlzT3JkZXJBcHByb3ZlZCAmJlxuICAgICAgICAgICAgICAgIGlzT3JkZXJQZW5kaW5nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wb2xsaW5nVGltZXIgPCB0aGlzLm1heFBvbGxpbmdJbnRlcnZhbFRpbWVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlaW5pdGlhbGl6ZVN0cmF0ZWd5KHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgYnJhaW50cmVlbG9jYWxtZXRob2RzOiB0aGlzLmJyYWludHJlZWxvY2FsbWV0aG9kcyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKG5ldyBUaW1lb3V0RXJyb3IoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3RQcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICAgICAgdGhpcy5wb2xsaW5nVGltZXIgPSAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJlaW5pdGlhbGl6ZVN0cmF0ZWd5KFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlaW5pdGlhbGl6ZSgpO1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlUmVxdWVzdFNlbmRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IEJyYWludHJlZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vYnJhaW50cmVlLXJlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1sb2NhbC1tZXRob2RzLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNkayA9IG5ldyBCcmFpbnRyZWVTZGsoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICApO1xuICAgIGNvbnN0IHJlcXVlc3RTZW5kZXIgPSBjcmVhdGVSZXF1ZXN0U2VuZGVyKCk7XG4gICAgY29uc3QgYnJhaW50cmVlUmVxdWVzdFNlbmRlciA9IG5ldyBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyKHJlcXVlc3RTZW5kZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZVNkayxcbiAgICAgICAgYnJhaW50cmVlUmVxdWVzdFNlbmRlcixcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3IoeyBzdHlsZXM6IHsgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snIH0gfSksXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGdhdGV3YXk6ICdicmFpbnRyZWVsb2NhbG1ldGhvZHMnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNCcmFpbnRyZWVBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIoXG4gICAgY3VzdG9tZXI/OiBQYXltZW50UHJvdmlkZXJDdXN0b21lcixcbik6IGN1c3RvbWVyIGlzIFBheVBhbENvbm5lY3RDdXN0b21lciB7XG4gICAgaWYgKCFjdXN0b21lcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgJ2F1dGhlbnRpY2F0aW9uU3RhdGUnIGluIGN1c3RvbWVyIHx8ICdhZGRyZXNzZXMnIGluIGN1c3RvbWVyIHx8ICdpbnN0cnVtZW50cycgaW4gY3VzdG9tZXJcbiAgICApO1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWUzRFNWZXJpZnlDYXJkRXJyb3IsXG4gICAgQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZFBheWxvYWQsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzLFxuICAgIEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZSxcbiAgICBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnQsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIGdldEZhc3RsYW5lU3R5bGVzLFxuICAgIGlzQnJhaW50cmVlQWNjZWxlcmF0ZWRDaGVja291dEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgQ2FyZEluc3RydW1lbnQsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudCxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLXBheW1lbnQtaW5pdGlhbGl6ZS1vcHRpb25zJztcbmltcG9ydCBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzIGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgaW1wbGVtZW50cyBQYXltZW50U3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnJhaW50cmVlQ2FyZENvbXBvbmVudD86IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudDtcbiAgICBwcml2YXRlIGlzM0RTRW5hYmxlZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlRmFzdGxhbmVVdGlsczogQnJhaW50cmVlRmFzdGxhbmVVdGlscyxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERlZmF1bHQgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUZhc3RsYW5lUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBicmFpbnRyZWVmYXN0bGFuZSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWZhc3RsYW5lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlZmFzdGxhbmVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWZhc3RsYW5lLm9uSW5pdCB8fCB0eXBlb2YgYnJhaW50cmVlZmFzdGxhbmUub25Jbml0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlZmFzdGxhbmUub25Jbml0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkIG9yIGl0IGlzIG5vdCBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFicmFpbnRyZWVmYXN0bGFuZS5vbkNoYW5nZSB8fCB0eXBlb2YgYnJhaW50cmVlZmFzdGxhbmUub25DaGFuZ2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVmYXN0bGFuZS5vbkNoYW5nZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGluaXRpYWxpemF0aW9uRGF0YSwgY2xpZW50VG9rZW4gfSA9IHBheW1lbnRNZXRob2QgfHwge307XG4gICAgICAgIGNvbnN0IHsgaXNGYXN0bGFuZVN0eWxpbmdFbmFibGVkIH0gPSBpbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcbiAgICAgICAgY29uc3QgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUFJPSkVDVC03MDgwLmJyYWludHJlZV9mYXN0bGFuZV90aHJlZV9kcycsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgPSBwYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG5cbiAgICAgICAgaWYgKGNsaWVudFRva2VuICYmIGlzVGhyZWVEU0V4cGVyaW1lbnRFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU3R5bGVTZXR0aW5ncyA9IGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZFxuICAgICAgICAgICAgPyBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uZmFzdGxhbmVTdHlsZXNcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lU3R5bGVzID0gZ2V0RmFzdGxhbmVTdHlsZXMoXG4gICAgICAgICAgICBwYXlwYWxGYXN0bGFuZVN0eWxlU2V0dGluZ3MsXG4gICAgICAgICAgICBicmFpbnRyZWVmYXN0bGFuZS5zdHlsZXMsXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3coXG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIGZhc3RsYW5lU3R5bGVzLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMucnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplQ2FyZENvbXBvbmVudCgpO1xuXG4gICAgICAgIHRoaXMub25FcnJvciA9IGJyYWludHJlZWZhc3RsYW5lLm9uRXJyb3I7XG5cbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUub25Jbml0KChjb250YWluZXIpID0+IHRoaXMucmVuZGVyQnJhaW50cmVlQ2FyZENvbXBvbmVudChjb250YWluZXIpKTtcbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUub25DaGFuZ2UoKCkgPT4gdGhpcy5oYW5kbGVCcmFpbnRyZWVTdG9yZWRJbnN0cnVtZW50Q2hhbmdlKG1ldGhvZElkKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShvcmRlclJlcXVlc3Q6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gb3JkZXJSZXF1ZXN0O1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IHBheW1lbnRQYXlsb2FkID0gYXdhaXQgdGhpcy5wcmVwYXJlUGF5bWVudFBheWxvYWQocGF5bWVudC5tZXRob2RJZCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQocGF5bWVudFBheWxvYWQpO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5yZW1vdmVTZXNzaW9uSWRGcm9tQ29va2llcygpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlQ2FyZENvbXBvbmVudCA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgRmFzdGxhbmUgQ29tcG9uZW50IHJlbmRlcmluZyBtZXRob2RcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZUNhcmRDb21wb25lbnQoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHsgcGhvbmUsIGZpcnN0TmFtZSwgbGFzdE5hbWUgfSA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBmdWxsTmFtZSA9IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX1gO1xuXG4gICAgICAgIGNvbnN0IGNhcmRDb21wb25lbnRPcHRpb25zOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgc3R5bGVzOiB7fSxcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IGZ1bGxOYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKHBob25lICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IHBob25lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxQYXltZW50Q29tcG9uZW50ID1cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5nZXRCcmFpbnRyZWVGYXN0bGFuZUNvbXBvbmVudE9yVGhyb3coKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUNhcmRDb21wb25lbnQgPSBhd2FpdCBwYXlwYWxQYXltZW50Q29tcG9uZW50KGNhcmRDb21wb25lbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJyYWludHJlZUNhcmRDb21wb25lbnQoY29udGFpbmVyPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGJyYWludHJlZUNhcmRDb21wb25lbnQgPSB0aGlzLmdldEJyYWludHJlZUNhcmRDb21wb25lbnRPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJhaW50cmVlQ2FyZENvbXBvbmVudC5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheW1lbnQgUGF5bG9hZCBwcmVwYXJhdGlvbiBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50UGF5bG9hZChtZXRob2RJZDogc3RyaW5nKTogUHJvbWlzZTxQYXltZW50PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGZ1bGxOYW1lID0gYCR7YmlsbGluZ0FkZHJlc3MuZmlyc3ROYW1lfSAke2JpbGxpbmdBZGRyZXNzLmxhc3ROYW1lfWA7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsSW5zdHJ1bWVudCA9IHRoaXMuZ2V0UGF5UGFsSW5zdHJ1bWVudHMoKVswXTtcblxuICAgICAgICBjb25zdCBkZXZpY2VTZXNzaW9uSWQgPSBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuZ2V0RGV2aWNlU2Vzc2lvbklkKCk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcbiAgICAgICAgY29uc3QgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUFJPSkVDVC03MDgwLmJyYWludHJlZV9mYXN0bGFuZV90aHJlZV9kcycsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHBheXBhbEluc3RydW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRocmVlRFNUb2tlbiA9XG4gICAgICAgICAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgJiYgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmdldDNEUyhwYXlwYWxJbnN0cnVtZW50LmJpZ3BheVRva2VuLCBwYXlwYWxJbnN0cnVtZW50Py5paW4gfHwgJycpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRldmljZVNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsX2Zhc3RsYW5lX3Rva2VuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRocmVlRFNUb2tlbiB8fCBwYXlwYWxJbnN0cnVtZW50LmJpZ3BheVRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZ2V0UGF5bWVudFRva2VuIH0gPSB0aGlzLmdldEJyYWludHJlZUNhcmRDb21wb25lbnRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgcGF5bWVudFRva2VuID0gYXdhaXQgZ2V0UGF5bWVudFRva2VuKHtcbiAgICAgICAgICAgIG5hbWU6IHsgZnVsbE5hbWUgfSxcbiAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzOiB0aGlzLm1hcFRvUGF5UGFsQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJpbkd1ZXN0ID0gcGF5bWVudFRva2VuLnBheW1lbnRTb3VyY2UuY2FyZD8uYmluRGV0YWlscz8uYmluIHx8ICcnO1xuICAgICAgICBjb25zdCB0aHJlZURTVG9rZW4gPVxuICAgICAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgJiYgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMuZ2V0M0RTKHBheW1lbnRUb2tlbi5pZCwgYmluR3Vlc3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgbm9uY2U6IHRocmVlRFNUb2tlbiB8fCBwYXltZW50VG9rZW4uaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDNEU1xuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZ2V0M0RTKG5vbmNlOiBzdHJpbmcsIGJpbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgdGhyZWVEU2VjdXJlID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0QnJhaW50cmVlVGhyZWVEUygpO1xuICAgICAgICBjb25zdCBvcmRlciA9IHN0YXRlLmdldE9yZGVyT3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHZvaWQgdGhyZWVEU2VjdXJlLnZlcmlmeUNhcmQoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IG9yZGVyPy5vcmRlckFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIGJpbixcbiAgICAgICAgICAgICAgICAgICAgb25Mb29rdXBDb21wbGV0ZTogKF9kYXRhLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJlZURTZWN1cmUub24oJ2N1c3RvbWVyLWNhbmNlbGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5RXJyb3I6IEJyYWludHJlZTNEU1ZlcmlmeUNhcmRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZFBheWxvYWQsXG4gICAgICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlFcnJvci5jb2RlID09PSAnVEhSRUVEU19WRVJJRllfQ0FSRF9DQU5DRUxFRF9CWV9NRVJDSEFOVCdcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHBheWxvYWQubm9uY2UpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE1hcHBlciBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIG1hcFRvUGF5UGFsQWRkcmVzcyhhZGRyZXNzPzogQWRkcmVzcyk6IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzPy5hZGRyZXNzMSB8fCAnJyxcbiAgICAgICAgICAgIGxvY2FsaXR5OiBhZGRyZXNzPy5jaXR5IHx8ICcnLFxuICAgICAgICAgICAgcmVnaW9uOiBhZGRyZXNzPy5zdGF0ZU9yUHJvdmluY2VDb2RlIHx8IGFkZHJlc3M/LnN0YXRlT3JQcm92aW5jZSB8fCAnJyxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3M/LnBvc3RhbENvZGUgfHwgJycsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogYWRkcmVzcz8uY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBPdGhlciBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXJPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICAgICAgICAgIHBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuICAgICAgICApXG4gICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICA6IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID0gdGhpcy5icmFpbnRyZWVGYXN0bGFuZVV0aWxzLmdldFNlc3Npb25JZEZyb21Db29raWVzKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWN1c3RvbWVyLmlzR3Vlc3QgfHxcbiAgICAgICAgICAgIGJyYWludHJlZVBheW1lbnRQcm92aWRlckN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAhYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXI/LmF1dGhlbnRpY2F0aW9uU3RhdGUgJiZcbiAgICAgICAgICAgIHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID09PSBjYXJ0LmlkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCcmFpbnRyZWVDYXJkQ29tcG9uZW50T3JUaHJvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZUNhcmRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlQ2FyZENvbXBvbmVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheVBhbEluc3RydW1lbnRzKCk6IENhcmRJbnN0cnVtZW50W10ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50UHJvdmlkZXJDdXN0b21lciA9IHN0YXRlLmdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBicmFpbnRyZWVQYXltZW50UHJvdmlkZXJDdXN0b21lciA9IGlzQnJhaW50cmVlQWNjZWxlcmF0ZWRDaGVja291dEN1c3RvbWVyKFxuICAgICAgICAgICAgcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgICAgIClcbiAgICAgICAgICAgID8gcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXJcbiAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgcmV0dXJuIGJyYWludHJlZVBheW1lbnRQcm92aWRlckN1c3RvbWVyLmluc3RydW1lbnRzIHx8IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIEZhc3RsYW5lIGluc3RydW1lbnQgY2hhbmdlXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUJyYWludHJlZVN0b3JlZEluc3RydW1lbnRDaGFuZ2UoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxDYXJkSW5zdHJ1bWVudCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBwYXlwYWxBeG9TZGsgPSB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuZ2V0QnJhaW50cmVlRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBzZWxlY3Rpb25DaGFuZ2VkLCBzZWxlY3RlZENhcmQgfSA9IGF3YWl0IHBheXBhbEF4b1Nkay5wcm9maWxlLnNob3dDYXJkU2VsZWN0b3IoKTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICAgICAgICAgICAgICBwYXltZW50UHJvdmlkZXJDdXN0b21lcixcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbnN0cnVtZW50cyA9IHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5tYXBQYXlQYWxUb0JjSW5zdHJ1bWVudChcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBbc2VsZWN0ZWRDYXJkXSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEluc3RydW1lbnRzICYmIHNlbGVjdGVkSW5zdHJ1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgICAgIC4uLmJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIsXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRzOiBbLi4uc2VsZWN0ZWRJbnN0cnVtZW50c10sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRJbnN0cnVtZW50c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneSc7XG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVVdGlscyBmcm9tICcuL2JyYWludHJlZS1mYXN0bGFuZS11dGlscyc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSA9IG5ldyBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlRmFzdGxhbmVVdGlscyA9IG5ldyBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzKFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKTtcblxuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhicmFpbnRyZWVTY3JpcHRMb2FkZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlRmFzdGxhbmVVdGlscyxcbiAgICAgICAgYnJhaW50cmVlU2RrLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVlYWNjZWxlcmF0ZWRjaGVja291dCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0LFxuICAgIFZpc2FDaGVja291dEFkZHJlc3MsXG4gICAgVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgIFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBMZWdhY3lBZGRyZXNzLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgfSBmcm9tICcuL2JyYWludHJlZS12aXNhLWNoZWNrb3V0LXBheW1lbnQtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNkazogQnJhaW50cmVlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVldmlzYWNoZWNrb3V0OiB2aXNhQ2hlY2tvdXRPcHRpb25zLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIXZpc2FDaGVja291dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWV2aXNhY2hlY2tvdXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHN0b3JlQ29uZmlnID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSB0aGlzLnBheW1lbnRNZXRob2QgfHwge307XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBvbkVycm9yID0gbm9vcCwgb25QYXltZW50U2VsZWN0ID0gbm9vcCB9ID0gdmlzYUNoZWNrb3V0T3B0aW9ucztcblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRTZGsgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRWaXNhQ2hlY2tvdXRTZGsoY29uZmlnPy50ZXN0TW9kZSk7XG5cbiAgICAgICAgY29uc3QgaW5pdE9wdGlvbnMgPSBicmFpbnRyZWVWaXNhQ2hlY2tvdXQuY3JlYXRlSW5pdE9wdGlvbnMoe1xuICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICBsb2NhbGU6IHN0b3JlQ29uZmlnLnN0b3JlUHJvZmlsZS5zdG9yZUxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RTaGlwcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXltZW50UmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogc3RvcmVDb25maWcuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICAgICBzdWJ0b3RhbDogU3RyaW5nKGNoZWNrb3V0LnN1YnRvdGFsKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IHZpc2FDaGVja291dFNkay5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRTZGsub24oXG4gICAgICAgICAgICAncGF5bWVudC5zdWNjZXNzJyxcbiAgICAgICAgICAgIChwYXltZW50U3VjY2Vzc1BheWxvYWQ6IFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChicmFpbnRyZWVWaXNhQ2hlY2tvdXQsIHBheW1lbnRTdWNjZXNzUGF5bG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IG9uUGF5bWVudFNlbGVjdCgpKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBvbkVycm9yKGVycm9yKSksXG4gICAgICAgICk7XG4gICAgICAgIHZpc2FDaGVja291dFNkay5vbigncGF5bWVudC5lcnJvcicsIChfLCBlcnJvcikgPT4gb25FcnJvcihlcnJvcikpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gc3VibWl0IHBheW1lbnQgYmVjYXVzZSBcInBheWxvYWQucGF5bWVudFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wYXltZW50TWV0aG9kPy5pbml0aWFsaXphdGlvbkRhdGE/Lm5vbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoe1xuICAgICAgICAgICAgICAgIC4uLnBheW1lbnQsXG4gICAgICAgICAgICAgICAgcGF5bWVudERhdGE6IHsgbm9uY2UgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5hbGl6ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmRlaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVWaXNhQ2hlY2tvdXQ6IEJyYWludHJlZVZpc2FDaGVja291dCxcbiAgICAgICAgcGF5bWVudDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgICkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0LnRva2VuaXplKHBheW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKSxcbiAgICAgICAgXSkudGhlbigoW3BheWxvYWQsIGRldmljZURhdGFdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZyA9IHN0YXRlLmdldFNoaXBwaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhzaGlwcGluZyksXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhiaWxsaW5nKSxcbiAgICAgICAgICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0Rm9ybShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBUb1Zpc2FDaGVja291dEFkZHJlc3MoYWRkcmVzcz86IEFkZHJlc3MpOiBWaXNhQ2hlY2tvdXRBZGRyZXNzIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGFkZHJlc3MucGhvbmUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgbG9jYWxpdHk6IGFkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIHJlZ2lvbjogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb3N0Rm9ybShcbiAgICAgICAgcGF5bWVudERhdGE6IFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG4gICAgICAgIGRhdGFDb2xsZWN0b3I6IEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlckRhdGEsIGJpbGxpbmdBZGRyZXNzLCBzaGlwcGluZ0FkZHJlc3MsIGRldGFpbHM6IGNhcmRJbmZvcm1hdGlvbiB9ID0gcGF5bWVudERhdGE7XG4gICAgICAgIGNvbnN0IHsgdXNlckVtYWlsIH0gPSB1c2VyRGF0YTtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBkYXRhQ29sbGVjdG9yO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICBwYXltZW50X3R5cGU6IHBheW1lbnREYXRhLnR5cGUsXG4gICAgICAgICAgICBub25jZTogcGF5bWVudERhdGEubm9uY2UsXG4gICAgICAgICAgICBwcm92aWRlcjogJ2JyYWludHJlZXZpc2FjaGVja291dCcsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICBjYXJkX2luZm9ybWF0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogY2FyZEluZm9ybWF0aW9uLmNhcmRUeXBlLFxuICAgICAgICAgICAgICAgIG51bWJlcjogY2FyZEluZm9ybWF0aW9uLmxhc3RUd28sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRBZGRyZXNzKHVzZXJFbWFpbCwgYmlsbGluZ0FkZHJlc3MpKSxcbiAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIHNoaXBwaW5nQWRkcmVzcykpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFkZHJlc3MoZW1haWw6IHN0cmluZywgYWRkcmVzczogVmlzYUNoZWNrb3V0QWRkcmVzcyA9IHt9KTogUGFydGlhbDxMZWdhY3lBZGRyZXNzPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiBhZGRyZXNzLnBob25lTnVtYmVyLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24pOiBuZXZlciB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgPT09ICdCcmFpbnRyZWVFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtdmlzYS1jaGVja291dC1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0UGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgaG9zdFdpbmRvdzogVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyAmIEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihnZXRTY3JpcHRMb2FkZXIoKSwgaG9zdFdpbmRvdywgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVTZGssXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVldmlzYWNoZWNrb3V0JyB9LFxuXSk7XG4iLCJpbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgQnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEZvcm1hdHRlZFBheWxvYWQsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcixcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxuICAgIFBheXBhbEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5pbXBvcnQgQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3lJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhCcmFpbnRyZWVWZW5tb0luaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL2JyYWludHJlZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGJyYWludHJlZVZlbm1vQ2hlY2tvdXQ/OiBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0O1xuICAgIHByaXZhdGUgdmVubW9PcHRpb25zPzogQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3lJbml0aWFsaXplT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVZlbm1vSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICB0aGlzLnZlbm1vT3B0aW9ucyA9IG9wdGlvbnMuYnJhaW50cmVldmVubW87XG5cbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVCcmFpbnRyZWVWZW5tbyhwYXltZW50TWV0aG9kKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKG9yZGVyUmVxdWVzdDogT3JkZXJSZXF1ZXN0Qm9keSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBvcmRlclJlcXVlc3Q7XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnREYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudGVhcmRvd24oKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bik6IG5ldmVyIHtcbiAgICAgICAgaWYgKCFpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1BBWVBBTF9QT1BVUF9DTE9TRUQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVCcmFpbnRyZWVWZW5tbyhwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4gfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuICAgICAgICBjb25zdCBpc0JyYWludHJlZVZlbm1vV2ViRmFsbGJhY2tTdXBwb3J0ID0gaXNFeHBlcmltZW50RW5hYmxlZChcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgJ1BBWVBBTC01NDA2LmJyYWludHJlZV92ZW5tb193ZWJfZmFsbGJhY2tfc3VwcG9ydCcsXG4gICAgICAgICk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVWZW5tb0NoZWNrb3V0ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmVubW9DaGVja291dCh7XG4gICAgICAgICAgICAgICAgLi4uKHRoaXMudmVubW9PcHRpb25zPy5hbGxvd0Rlc2t0b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHsgYWxsb3dEZXNrdG9wOiB0aGlzLnZlbm1vT3B0aW9ucy5hbGxvd0Rlc2t0b3AgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgICAgICAuLi4oaXNCcmFpbnRyZWVWZW5tb1dlYkZhbGxiYWNrU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlV2ViRmFsbEJhY2s6IGlzQnJhaW50cmVlVmVubW9XZWJGYWxsYmFja1N1cHBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YShwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSk6IFByb21pc2U8UGF5bWVudD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhwYXltZW50Lm1ldGhvZElkKTtcblxuICAgICAgICBpZiAobm9uY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnBheW1lbnQsIHBheW1lbnREYXRhOiB0aGlzLmZvcm1hdHRlZFBheWxvYWQobm9uY2UpIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5pemVSZXN1bHQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVZlbm1vVG9rZW5pemUoKTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2Vzc2lvbklkKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBheW1lbnQsXG4gICAgICAgICAgICBwYXltZW50RGF0YTogdGhpcy5mb3JtYXR0ZWRQYXlsb2FkKFxuICAgICAgICAgICAgICAgIHRva2VuaXplUmVzdWx0Lm5vbmNlLFxuICAgICAgICAgICAgICAgIHRva2VuaXplUmVzdWx0LmRldGFpbHMuZW1haWwsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdHRlZFBheWxvYWQoXG4gICAgICAgIHRva2VuOiBzdHJpbmcsXG4gICAgICAgIGVtYWlsPzogc3RyaW5nLFxuICAgICAgICBzZXNzaW9uSWQ/OiBzdHJpbmcsXG4gICAgKTogRm9ybWF0dGVkUGF5bG9hZDxQYXlwYWxJbnN0cnVtZW50PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgdmF1bHRfcGF5bWVudF9pbnN0cnVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNldF9hc19kZWZhdWx0X3N0b3JlZF9pbnN0cnVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIGRldmljZV9pbmZvOiBzZXNzaW9uSWQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBwYXlwYWxfYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBicmFpbnRyZWVWZW5tb1Rva2VuaXplKCk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVZlbm1vQ2hlY2tvdXQ/LnRva2VuaXplKFxuICAgICAgICAgICAgICAgIChlcnJvcjogQnJhaW50cmVlRXJyb3IgfCB1bmRlZmluZWQsIHBheWxvYWQ6IEJyYWludHJlZVRva2VuaXplUGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGZyb20gJy4vYnJhaW50cmVlLXZlbm1vLXBheW1lbnQtc3RyYXRlZ3knO1xuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IHNjcmlwdExvYWRlciA9IGdldFNjcmlwdExvYWRlcigpO1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIHNjcmlwdExvYWRlcixcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBicmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5LCBbeyBpZDogJ2JyYWludHJlZXZlbm1vJyB9XSk7XG4iLCJpbXBvcnQgeyBzb21lIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucyxcbiAgICBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcixcbiAgICBpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlLFxuICAgIGlzUmVxdWVzdEVycm9yLFxuICAgIGlzVmF1bHRlZEluc3RydW1lbnQsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBOb25jZUluc3RydW1lbnQsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW5zdHJ1bWVudCxcbiAgICBQYXltZW50SW5zdHJ1bWVudE1ldGEsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcixcbiAgICBQYXltZW50U3RyYXRlZ3ksXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlSG9zdGVkRm9ybSBmcm9tICcuLi9icmFpbnRyZWUtaG9zdGVkLWZvcm0vYnJhaW50cmVlLWhvc3RlZC1mb3JtJztcbmltcG9ydCBpc0JyYWludHJlZUVycm9yIGZyb20gJy4uL2lzLWJyYWludHJlZS1lcnJvcic7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudEluaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi9icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGlzM2RzRW5hYmxlZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc0hvc3RlZEZvcm1Jbml0aWFsaXplZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBkZXZpY2VTZXNzaW9uSWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDtcbiAgICBwcml2YXRlIHRocmVlRFNlY3VyZT86IEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RlZEZvcm06IEJyYWludHJlZUhvc3RlZEZvcm0sXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUNyZWRpdENhcmRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIGdhdGV3YXlJZCwgYnJhaW50cmVlIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICB0aGlzLnBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiB9ID0gdGhpcy5wYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGhyZWVEU2VjdXJlID0gYnJhaW50cmVlPy50aHJlZURTZWN1cmU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4sIHRoaXMudGhyZWVEU2VjdXJlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNIb3N0ZWRQYXltZW50Rm9ybUVuYWJsZWQobWV0aG9kSWQsIGdhdGV3YXlJZCkgJiYgYnJhaW50cmVlPy5mb3JtKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVIb3N0ZWRGb3JtLmluaXRpYWxpemUoXG4gICAgICAgICAgICAgICAgICAgIGJyYWludHJlZS5mb3JtLFxuICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWUudW5zdXBwb3J0ZWRDYXJkQnJhbmRzLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRUb2tlbixcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc0hvc3RlZEZvcm1Jbml0aWFsaXplZCA9IHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS5pc0luaXRpYWxpemVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXMzZHNFbmFibGVkID0gdGhpcy5wYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG4gICAgICAgICAgICB0aGlzLmRldmljZVNlc3Npb25JZCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNlc3Npb25JZCgpO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZSgpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplQnJhaW50cmVlRmFzdGxhbmVPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUob3JkZXJSZXF1ZXN0OiBPcmRlclJlcXVlc3RCb2R5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudCwgLi4ub3JkZXIgfSA9IG9yZGVyUmVxdWVzdDtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNIb3N0ZWRGb3JtSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS52YWxpZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBvcmRlckFtb3VudCA9IHN0YXRlLmdldE9yZGVyT3JUaHJvdygpLm9yZGVyQW1vdW50O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHRoaXMuaXNIb3N0ZWRGb3JtSW5pdGlhbGl6ZWRcbiAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMucHJlcGFyZUhvc3RlZFBheW1lbnREYXRhKHBheW1lbnQsIGJpbGxpbmdBZGRyZXNzLCBvcmRlckFtb3VudClcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQsIGJpbGxpbmdBZGRyZXNzLCBvcmRlckFtb3VudCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50LFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzQWRkaXRpb25hbEFjdGlvbihlcnJvciwgcGF5bWVudCwgb3JkZXJBbW91bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5pc0hvc3RlZEZvcm1Jbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCksXG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUhvc3RlZEZvcm0uZGVpbml0aWFsaXplKCksXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiB1bmtub3duKTogbmV2ZXIge1xuICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YShcbiAgICAgICAgcGF5bWVudDogT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzOiBBZGRyZXNzLFxuICAgICAgICBvcmRlckFtb3VudDogbnVtYmVyLFxuICAgICk6IFByb21pc2U8UGF5bWVudEluc3RydW1lbnQgJiBQYXltZW50SW5zdHJ1bWVudE1ldGE+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50RGF0YSB9ID0gcGF5bWVudDtcbiAgICAgICAgY29uc3QgY29tbW9uUGF5bWVudERhdGEgPSB7IGRldmljZVNlc3Npb25JZDogdGhpcy5kZXZpY2VTZXNzaW9uSWQgfTtcblxuICAgICAgICBpZiAodGhpcy5pc1N1Ym1pdHRpbmdXaXRoU3RvcmVkQ2FyZChwYXltZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50RGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50ID0gZmFsc2UsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPSBmYWxzZSB9ID1cbiAgICAgICAgICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEgOiB7fTtcblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudClcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudmVyaWZ5Q2FyZChcbiAgICAgICAgICAgICAgICAgIHBheW1lbnQsXG4gICAgICAgICAgICAgICAgICBiaWxsaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIG9yZGVyQW1vdW50LFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRva2VuaXplQ2FyZChwYXltZW50LCBiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vblBheW1lbnREYXRhLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlSG9zdGVkUGF5bWVudERhdGEoXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICAgICBiaWxsaW5nQWRkcmVzczogQWRkcmVzcyxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPFBheW1lbnRJbnN0cnVtZW50ICYgUGF5bWVudEluc3RydW1lbnRNZXRhPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG4gICAgICAgIGNvbnN0IGNvbW1vblBheW1lbnREYXRhID0geyBkZXZpY2VTZXNzaW9uSWQ6IHRoaXMuZGV2aWNlU2Vzc2lvbklkIH07XG5cbiAgICAgICAgaWYgKHRoaXMuaXNTdWJtaXR0aW5nV2l0aFN0b3JlZENhcmQocGF5bWVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS50b2tlbml6ZUZvclN0b3JlZENhcmRWZXJpZmljYXRpb24oKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50ID0gZmFsc2UsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPSBmYWxzZSB9ID1cbiAgICAgICAgICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEgOiB7fTtcblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudClcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy52ZXJpZnlDYXJkV2l0aEhvc3RlZEZvcm0oYmlsbGluZ0FkZHJlc3MsIG9yZGVyQW1vdW50KVxuICAgICAgICAgICAgOiBhd2FpdCB0aGlzLmJyYWludHJlZUhvc3RlZEZvcm0udG9rZW5pemUoYmlsbGluZ0FkZHJlc3MpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50LFxuICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdmVyaWZ5Q2FyZFdpdGhIb3N0ZWRGb3JtKFxuICAgICAgICBiaWxsaW5nQWRkcmVzczogQWRkcmVzcyxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPE5vbmNlSW5zdHJ1bWVudD4ge1xuICAgICAgICBjb25zdCB0b2tlbml6YXRpb25QYXlsb2FkID0gYXdhaXQgdGhpcy5icmFpbnRyZWVIb3N0ZWRGb3JtLnRva2VuaXplKGJpbGxpbmdBZGRyZXNzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uKFxuICAgICAgICAgICAgdG9rZW5pemF0aW9uUGF5bG9hZCxcbiAgICAgICAgICAgIG9yZGVyQW1vdW50LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcHJvY2Vzc0FkZGl0aW9uYWxBY3Rpb24oXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzUmVxdWVzdEVycm9yKGVycm9yKSB8fFxuICAgICAgICAgICAgIXNvbWUoZXJyb3IuYm9keS5lcnJvcnMsIHsgY29kZTogJ3RocmVlX2Rfc2VjdXJlX3JlcXVpcmVkJyB9KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHBheWVyX2F1dGhfcmVxdWVzdDogc3RvcmVkQ3JlZGl0Q2FyZE5vbmNlIH0gPVxuICAgICAgICAgICAgICAgIChpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IoZXJyb3IpICYmIGVycm9yLmJvZHkudGhyZWVfZHNfcmVzdWx0KSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIXBheW1lbnREYXRhIHx8ICFpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydpbnN0cnVtZW50SWQnXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluc3RydW1lbnQgPSBzdGF0ZS5nZXRDYXJkSW5zdHJ1bWVudE9yVGhyb3cocGF5bWVudERhdGEuaW5zdHJ1bWVudElkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmNoYWxsZW5nZTNEU1ZlcmlmaWNhdGlvbihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5vbmNlOiBzdG9yZWRDcmVkaXRDYXJkTm9uY2UgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGJpbjogaW5zdHJ1bWVudC5paW4sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcmRlckFtb3VudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50LFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRldmljZVNlc3Npb25JZDogdGhpcy5kZXZpY2VTZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNIb3N0ZWRQYXltZW50Rm9ybUVuYWJsZWQobWV0aG9kSWQ/OiBzdHJpbmcsIGdhdGV3YXlJZD86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQsIGdhdGV3YXlJZCk7XG5cbiAgICAgICAgcmV0dXJuIHBheW1lbnRNZXRob2QuY29uZmlnLmlzSG9zdGVkRm9ybUVuYWJsZWQgPT09IHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1N1Ym1pdHRpbmdXaXRoU3RvcmVkQ2FyZChwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISEocGF5bWVudC5wYXltZW50RGF0YSAmJiBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnQucGF5bWVudERhdGEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudDogT3JkZXJQYXltZW50UmVxdWVzdEJvZHkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuaXMzZHNFbmFibGVkICYmICF0aGlzLmlzU3VibWl0dGluZ1dpdGhTdG9yZWRDYXJkKHBheW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICBwcml2YXRlIHNob3VsZEluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIgPSBzdGF0ZS5nZXRQYXltZW50UHJvdmlkZXJDdXN0b21lck9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihwYXltZW50UHJvdmlkZXJDdXN0b21lcilcbiAgICAgICAgICAgID8gcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXJcbiAgICAgICAgICAgIDoge307XG4gICAgICAgIGNvbnN0IGlzRmFzdGxhbmVFbmFibGVkOiBib29sZWFuID1cbiAgICAgICAgICAgIHRoaXMucGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ7XG5cbiAgICAgICAgcmV0dXJuIGlzRmFzdGxhbmVFbmFibGVkICYmICFicmFpbnRyZWVDdXN0b21lcj8uYXV0aGVudGljYXRpb25TdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4sIHRoaXMudGhyZWVEU2VjdXJlKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVGYXN0bGFuZShjYXJ0LmlkLCBjb25maWcudGVzdE1vZGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLy8gSGF2ZSB0byB1c2UgYGFzYCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83Mzk4NzA0NC90eXBlZ3VhcmRpbmctYW4tdW5rbm93bi1uZXN0ZWQtb2JqZWN0IHNob3VsZCBiZSBmaXhlZCBpbiA0LjgrXG5jb25zdCBpc1JlcXVlc3RFcnJvciA9IChlcnJvcjogdW5rbm93bik6IGVycm9yIGlzIFJlcXVlc3RFcnJvciA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwgJiYgJ2JvZHknIGluIGVycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNSZXF1ZXN0RXJyb3I7XG4iLCJleHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVBheW1lbnQzRFNSZXF1ZXN0RXJyb3JzIHtcbiAgICBjb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlUGF5bWVudFJlcXVlc3QzRFNFcnJvciB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJvZHk6IHtcbiAgICAgICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgICAgIHRocmVlX2RzX3Jlc3VsdDoge1xuICAgICAgICAgICAgcGF5ZXJfYXV0aF9yZXF1ZXN0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGVycm9yczogQnJhaW50cmVlUGF5bWVudDNEU1JlcXVlc3RFcnJvcnNbXTtcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IoXG4gICAgZXJyb3I6IHVua25vd24sXG4pOiBlcnJvciBpcyBCcmFpbnRyZWVQYXltZW50UmVxdWVzdDNEU0Vycm9yIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSAnb2JqZWN0JyB8fCBlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9ucyAqL1xuICAgIHJldHVybiAoXG4gICAgICAgICduYW1lJyBpbiBlcnJvciAmJlxuICAgICAgICAnYm9keScgaW4gZXJyb3IgJiZcbiAgICAgICAgJ3N0YXR1cycgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkgJiZcbiAgICAgICAgJ3RocmVlX2RzX3Jlc3VsdCcgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkgJiZcbiAgICAgICAgJ3BheWVyX2F1dGhfcmVxdWVzdCcgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkudGhyZWVfZHNfcmVzdWx0ICYmXG4gICAgICAgICdlcnJvcnMnIGluIChlcnJvciBhcyBCcmFpbnRyZWVQYXltZW50UmVxdWVzdDNEU0Vycm9yKS5ib2R5XG4gICAgKTtcbn1cbiIsImltcG9ydCB7IEJyYWludHJlZUZvcm1GaWVsZHNNYXAsIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAgfSBmcm9tICcuLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JyYWludHJlZUZvcm1GaWVsZHNNYXAoXG4gICAgZmllbGRzOiBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHwgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCxcbik6IGZpZWxkcyBpcyBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHtcbiAgICByZXR1cm4gJ2NhcmROdW1iZXInIGluIGZpZWxkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcChcbiAgICBmaWVsZHM6IEJyYWludHJlZUZvcm1GaWVsZHNNYXAgfCBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRzTWFwLFxuKTogZmllbGRzIGlzIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAge1xuICAgIHJldHVybiAhIShcbiAgICAgICAgT2JqZWN0LmtleXMoZmllbGRzKS5sZW5ndGggPiAwICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgKChmaWVsZHMgYXMgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCkuY2FyZENvZGVWZXJpZmljYXRpb24gfHxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIChmaWVsZHMgYXMgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCkuY2FyZE51bWJlclZlcmlmaWNhdGlvbilcbiAgICApO1xufVxuIiwiaW1wb3J0IGlzQnJhaW50cmVlRXJyb3IgZnJvbSAnLi9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IHsgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkSW52YWxpZEZpZWxkS2V5cyhpbnZhbGlkRmllbGRLZXlzOiB1bmtub3duKTogaW52YWxpZEZpZWxkS2V5cyBpcyBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgQXJyYXkuaXNBcnJheShpbnZhbGlkRmllbGRLZXlzKSAmJiBpbnZhbGlkRmllbGRLZXlzLmV2ZXJ5KChrZXkpID0+IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKVxuICAgICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yKFxuICAgIGVycm9yOiB1bmtub3duLFxuKTogZXJyb3IgaXMgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yIHtcbiAgICBpZiAoIWlzQnJhaW50cmVlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRldGFpbHMgfSA9IGVycm9yO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgZGV0YWlscyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICh0eXBlb2YgZGV0YWlscyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGRldGFpbHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIChkZXRhaWxzIGFzIHsgaW52YWxpZEZpZWxkS2V5cz86IHVua25vd24gfSkuaW52YWxpZEZpZWxkS2V5cyA9PT0gdW5kZWZpbmVkKSB8fFxuICAgICAgICBpc1ZhbGlkSW52YWxpZEZpZWxkS2V5cyhkZXRhaWxzKVxuICAgICk7XG59XG4iLCJpbXBvcnQgeyBEaWN0aW9uYXJ5LCBpc0VtcHR5LCBpc05pbCwgb21pdEJ5IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT04sXG4gICAgQnJhaW50cmVlQmlsbGluZ0FkZHJlc3NSZXF1ZXN0RGF0YSxcbiAgICBCcmFpbnRyZWVDbGllbnQsXG4gICAgQnJhaW50cmVlRm9ybUVycm9yRGF0YUtleXMsXG4gICAgQnJhaW50cmVlRm9ybUVycm9yc0RhdGEsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkc01hcCxcbiAgICBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXMsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwLFxuICAgIEJyYWludHJlZUZvcm1GaWVsZFR5cGUsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGEsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFdmVudERhdGEsXG4gICAgQnJhaW50cmVlRm9ybU9wdGlvbnMsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzLFxuICAgIEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUsXG4gICAgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRzTWFwLFxuICAgIGlzQnJhaW50cmVlRm9ybUZpZWxkc01hcCxcbiAgICBpc0JyYWludHJlZUhvc3RlZEZvcm1FcnJvcixcbiAgICBpc0JyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZCxcbiAgICBUb2tlbml6YXRpb25QYXlsb2FkLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvcixcbiAgICBOb3RJbml0aWFsaXplZEVycm9yVHlwZSxcbiAgICBQYXltZW50SW52YWxpZEZvcm1FcnJvcixcbiAgICBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5lbnVtIEJyYWludHJlZUhvc3RlZEZvcm1UeXBlIHtcbiAgICBDcmVkaXRDYXJkLFxuICAgIFN0b3JlZENhcmRWZXJpZmljYXRpb24sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUhvc3RlZEZvcm0ge1xuICAgIHByaXZhdGUgY2FyZEZpZWxkcz86IEJyYWludHJlZUhvc3RlZEZpZWxkcztcbiAgICBwcml2YXRlIGZvcm1PcHRpb25zPzogQnJhaW50cmVlRm9ybU9wdGlvbnM7XG4gICAgcHJpdmF0ZSB0eXBlPzogQnJhaW50cmVlSG9zdGVkRm9ybVR5cGU7XG4gICAgcHJpdmF0ZSBjbGllbnQ/OiBQcm9taXNlPEJyYWludHJlZUNsaWVudD47XG4gICAgcHJpdmF0ZSBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBwcml2YXRlIGlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTY3JpcHRMb2FkZXI6IEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcjogQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlRm9ybU9wdGlvbnMsXG4gICAgICAgIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcz86IHN0cmluZ1tdLFxuICAgICAgICBjbGllbnRUb2tlbj86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5jbGllbnRUb2tlbiA9IGNsaWVudFRva2VuO1xuICAgICAgICB0aGlzLmZvcm1PcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy50eXBlID0gaXNCcmFpbnRyZWVGb3JtRmllbGRzTWFwKG9wdGlvbnMuZmllbGRzKVxuICAgICAgICAgICAgPyBCcmFpbnRyZWVIb3N0ZWRGb3JtVHlwZS5DcmVkaXRDYXJkXG4gICAgICAgICAgICA6IEJyYWludHJlZUhvc3RlZEZvcm1UeXBlLlN0b3JlZENhcmRWZXJpZmljYXRpb247XG5cbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5tYXBGaWVsZE9wdGlvbnMob3B0aW9ucy5maWVsZHMsIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcyk7XG5cbiAgICAgICAgaWYgKGlzRW1wdHkoZmllbGRzKSkge1xuICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkSG9zdGVkRm9ybSA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhcmRGaWVsZHMgPSBhd2FpdCB0aGlzLmNyZWF0ZUhvc3RlZEZpZWxkcyh7XG4gICAgICAgICAgICBmaWVsZHMsXG4gICAgICAgICAgICBzdHlsZXM6IG9wdGlvbnMuc3R5bGVzICYmIHRoaXMubWFwU3R5bGVPcHRpb25zKG9wdGlvbnMuc3R5bGVzKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jYXJkRmllbGRzPy5vbignYmx1cicsIHRoaXMuaGFuZGxlQmx1cik7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2NhcmRUeXBlQ2hhbmdlJywgdGhpcy5oYW5kbGVDYXJkVHlwZUNoYW5nZSk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ3ZhbGlkaXR5Q2hhbmdlJywgdGhpcy5oYW5kbGVWYWxpZGl0eUNoYW5nZSk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2lucHV0U3VibWl0UmVxdWVzdCcsIHRoaXMuaGFuZGxlSW5wdXRTdWJtaXRSZXF1ZXN0KTtcblxuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZEhvc3RlZEZvcm0pIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZEhvc3RlZEZvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2FyZEZpZWxkcz8udGVhcmRvd24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY2FyZEZpZWxkcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5jYXJkRmllbGRzLmdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRGb3JtKHN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVWYWxpZGl0eUNoYW5nZShzdGF0ZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubWFwVmFsaWRhdGlvbkVycm9ycyhzdGF0ZS5maWVsZHMpO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEludmFsaWRGb3JtRXJyb3IoZXJyb3JzIGFzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB0b2tlbml6ZShiaWxsaW5nQWRkcmVzczogQWRkcmVzcyk6IFByb21pc2U8VG9rZW5pemF0aW9uUGF5bG9hZD4ge1xuICAgICAgICBpZiAoIXRoaXMuY2FyZEZpZWxkcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5jYXJkRmllbGRzLnRva2VuaXplKFxuICAgICAgICAgICAgICAgIG9taXRCeShcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3M6IGJpbGxpbmdBZGRyZXNzICYmIHRoaXMubWFwQmlsbGluZ0FkZHJlc3MoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc05pbCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25WYWxpZGF0ZT8uKHsgaXNWYWxpZDogdHJ1ZSwgZXJyb3JzOiB7fSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBub25jZTogcGF5bG9hZC5ub25jZSxcbiAgICAgICAgICAgICAgICBiaW46IHBheWxvYWQuZGV0YWlscz8uYmluLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUhvc3RlZEZvcm1FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLm1hcFRva2VuaXplRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4oeyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEludmFsaWRGb3JtRXJyb3IoZXJyb3JzIGFzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHRva2VuaXplRm9yU3RvcmVkQ2FyZFZlcmlmaWNhdGlvbigpOiBQcm9taXNlPFRva2VuaXphdGlvblBheWxvYWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNhcmRGaWVsZHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbml0aWFsaXplZEVycm9yKE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuY2FyZEZpZWxkcy50b2tlbml6ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4oeyBpc1ZhbGlkOiB0cnVlLCBlcnJvcnM6IHt9IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5vbmNlOiBwYXlsb2FkLm5vbmNlLFxuICAgICAgICAgICAgICAgIGJpbjogcGF5bG9hZC5kZXRhaWxzPy5iaW4sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubWFwVG9rZW5pemVFcnJvcihlcnJvciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcnMgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50SW52YWxpZEZvcm1FcnJvcihlcnJvcnMgYXMgUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlSG9zdGVkRmllbGRzKFxuICAgICAgICBvcHRpb25zOiBQaWNrPEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWcsICdmaWVsZHMnIHwgJ3N0eWxlcyc+LFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlSG9zdGVkRmllbGRzPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGNvbnN0IGhvc3RlZEZpZWxkcyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRIb3N0ZWRGaWVsZHMoKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50U2RrVmVyc2lvbiA9IHRoaXMuYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIuZ2V0U0RLVmVyc2lvbigpO1xuICAgICAgICBjb25zdCBob3N0ZWRGaWVsZHNPcHRpb25zID1cbiAgICAgICAgICAgIGN1cnJlbnRTZGtWZXJzaW9uID09PSBCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT05cbiAgICAgICAgICAgICAgICA/IHsgLi4ub3B0aW9ucywgcHJldmVudEN1cnNvckp1bXBzOiB0cnVlIH1cbiAgICAgICAgICAgICAgICA6IG9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi5ob3N0ZWRGaWVsZHNPcHRpb25zLCBjbGllbnQgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2xpZW50KCk6IFByb21pc2U8QnJhaW50cmVlQ2xpZW50PiB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRDbGllbnQoKTtcblxuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQuY3JlYXRlKHsgYXV0aG9yaXphdGlvbjogdGhpcy5jbGllbnRUb2tlbiB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcEJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzOiBBZGRyZXNzKTogQnJhaW50cmVlQmlsbGluZ0FkZHJlc3NSZXF1ZXN0RGF0YSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb3VudHJ5TmFtZTogYmlsbGluZ0FkZHJlc3MuY291bnRyeSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMlxuICAgICAgICAgICAgICAgID8gYCR7YmlsbGluZ0FkZHJlc3MuYWRkcmVzczF9ICR7YmlsbGluZ0FkZHJlc3MuYWRkcmVzczJ9YFxuICAgICAgICAgICAgICAgIDogYmlsbGluZ0FkZHJlc3MuYWRkcmVzczEsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBGaWVsZE9wdGlvbnMoXG4gICAgICAgIGZpZWxkczogQnJhaW50cmVlRm9ybUZpZWxkc01hcCB8IEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAsXG4gICAgICAgIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcz86IHN0cmluZ1tdLFxuICAgICk6IEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWdbJ2ZpZWxkcyddIHtcbiAgICAgICAgaWYgKGlzQnJhaW50cmVlRm9ybUZpZWxkc01hcChmaWVsZHMpKSB7XG4gICAgICAgICAgICBjb25zdCBzdXBwb3J0ZWRDYXJkQnJhbmRzOiBQYXJ0aWFsPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PiA9IHt9O1xuXG4gICAgICAgICAgICB1bnN1cHBvcnRlZENhcmRCcmFuZHM/LmZvckVhY2goKGNhcmRCcmFuZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZChjYXJkQnJhbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZENhcmRCcmFuZHNbY2FyZEJyYW5kXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gb21pdEJ5KFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZE51bWJlci5jb250YWluZXJJZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZpZWxkcy5jYXJkTnVtYmVyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmROdW1iZXIuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKE9iamVjdC5rZXlzKHN1cHBvcnRlZENhcmRCcmFuZHMpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgc3VwcG9ydGVkQ2FyZEJyYW5kcyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZEV4cGlyeS5jb250YWluZXJJZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZpZWxkcy5jYXJkRXhwaXJ5LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmRFeHBpcnkuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjdnY6IGZpZWxkcy5jYXJkQ29kZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZENvZGUuY29udGFpbmVySWR9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZENvZGUucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbExhYmVsOiBmaWVsZHMuY2FyZENvZGUuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjYXJkaG9sZGVyTmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBgIyR7ZmllbGRzLmNhcmROYW1lLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZmllbGRzLmNhcmROYW1lLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmROYW1lLmFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzTmlsLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvbWl0QnkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiBmaWVsZHMuY2FyZE51bWJlclZlcmlmaWNhdGlvbiAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYCMke2ZpZWxkcy5jYXJkTnVtYmVyVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZE51bWJlclZlcmlmaWNhdGlvbi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN2djogZmllbGRzLmNhcmRDb2RlVmVyaWZpY2F0aW9uICYmIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBgIyR7ZmllbGRzLmNhcmRDb2RlVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZENvZGVWZXJpZmljYXRpb24ucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc05pbCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFN0eWxlT3B0aW9ucyhcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwLFxuICAgICk6IEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWdbJ3N0eWxlcyddIHtcbiAgICAgICAgY29uc3QgbWFwU3R5bGVzID0gKHN0eWxlczogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzID0ge30pID0+XG4gICAgICAgICAgICBvbWl0QnkoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3R5bGVzLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAnZm9udC1mYW1pbHknOiBzdHlsZXMuZm9udEZhbWlseSxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6IHN0eWxlcy5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0Jzogc3R5bGVzLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc05pbCxcbiAgICAgICAgICAgICkgYXMgRGljdGlvbmFyeTxzdHJpbmc+O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogbWFwU3R5bGVzKG9wdGlvbnMuZGVmYXVsdCksXG4gICAgICAgICAgICAnLmludmFsaWQnOiBtYXBTdHlsZXMob3B0aW9ucy5lcnJvciksXG4gICAgICAgICAgICAnOmZvY3VzJzogbWFwU3R5bGVzKG9wdGlvbnMuZm9jdXMpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwRmllbGRUeXBlKHR5cGU6IHN0cmluZyk6IEJyYWludHJlZUZvcm1GaWVsZFR5cGUge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gQnJhaW50cmVlSG9zdGVkRm9ybVR5cGUuU3RvcmVkQ2FyZFZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA6IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlcjtcblxuICAgICAgICAgICAgY2FzZSAnZXhwaXJhdGlvbkRhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRFeHBpcnk7XG5cbiAgICAgICAgICAgIGNhc2UgJ2N2dic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gQnJhaW50cmVlSG9zdGVkRm9ybVR5cGUuU3RvcmVkQ2FyZFZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgOiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRDb2RlO1xuXG4gICAgICAgICAgICBjYXNlICdjYXJkaG9sZGVyTmFtZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE5hbWU7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGZpZWxkIHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbWFwRXJyb3JzKGZpZWxkczogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGVbJ2ZpZWxkcyddKTogQnJhaW50cmVlRm9ybUVycm9yc0RhdGEge1xuICAgICAgICBjb25zdCBlcnJvcnM6IEJyYWludHJlZUZvcm1FcnJvcnNEYXRhID0ge307XG5cbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHRoaXMuaXNWYWxpZFBhcmFtKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpc1ZhbGlkLCBpc0VtcHR5LCBpc1BvdGVudGlhbGx5VmFsaWQgfSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGVycm9yc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW1wdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1BvdGVudGlhbGx5VmFsaWQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFZhbGlkYXRpb25FcnJvcnMoXG4gICAgICAgIGZpZWxkczogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGVbJ2ZpZWxkcyddLFxuICAgICk6IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXZlbnREYXRhWydlcnJvcnMnXSB7XG4gICAgICAgIHJldHVybiAoT2JqZWN0LmtleXMoZmllbGRzKSBhcyBBcnJheTxrZXlvZiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZVsnZmllbGRzJ10+KS5yZWR1Y2UoXG4gICAgICAgICAgICAocmVzdWx0LCBmaWVsZEtleSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgW3RoaXMubWFwRmllbGRUeXBlKGZpZWxkS2V5KV06IGZpZWxkc1tmaWVsZEtleV0/LmlzVmFsaWRcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBbdGhpcy5jcmVhdGVJbnZhbGlkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoZmllbGRLZXkpKV0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwVG9rZW5pemVFcnJvcihcbiAgICAgICAgZXJyb3I6IEJyYWludHJlZUhvc3RlZEZvcm1FcnJvcixcbiAgICAgICAgaXNTdG9yZWRDYXJkID0gZmFsc2UsXG4gICAgKTogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFdmVudERhdGFbJ2Vycm9ycyddIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdIT1NURURfRklFTERTX0ZJRUxEU19FTVBUWScpIHtcbiAgICAgICAgICAgIGNvbnN0IGN2diA9IFt0aGlzLmNyZWF0ZVJlcXVpcmVkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoJ2N2dicpKV07XG5cbiAgICAgICAgICAgIGlmIChpc1N0b3JlZENhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBbdGhpcy5tYXBGaWVsZFR5cGUoJ2N2dicpXTogY3Z2IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgW3RoaXMubWFwRmllbGRUeXBlKCdjdnYnKV06IGN2dixcbiAgICAgICAgICAgICAgICBbdGhpcy5tYXBGaWVsZFR5cGUoJ2V4cGlyYXRpb25EYXRlJyldOiBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWlyZWRFcnJvcih0aGlzLm1hcEZpZWxkVHlwZSgnZXhwaXJhdGlvbkRhdGUnKSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBbdGhpcy5tYXBGaWVsZFR5cGUoJ251bWJlcicpXTogW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVJlcXVpcmVkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoJ251bWJlcicpKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFt0aGlzLm1hcEZpZWxkVHlwZSgnY2FyZGhvbGRlck5hbWUnKV06IFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSZXF1aXJlZEVycm9yKHRoaXMubWFwRmllbGRUeXBlKCdjYXJkaG9sZGVyTmFtZScpKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvci5kZXRhaWxzPy5pbnZhbGlkRmllbGRLZXlzPy5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5tYXBGaWVsZFR5cGUoa2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgW3R5cGVdOiBbdGhpcy5jcmVhdGVJbnZhbGlkRXJyb3IodHlwZSldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVxdWlyZWRFcnJvcihcbiAgICAgICAgZmllbGRUeXBlOiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLFxuICAgICk6IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB7XG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV06ICdDVlYgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25dOiAnQ1ZWIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdOiAnQ3JlZGl0IGNhcmQgbnVtYmVyIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJWZXJpZmljYXRpb25dOiAnQ3JlZGl0IGNhcmQgbnVtYmVyIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRFeHBpcnldOiAnRXhwaXJhdGlvbiBkYXRlIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXTogJ0Z1bGwgbmFtZSBpcyByZXF1aXJlZCcsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzW2ZpZWxkVHlwZV0gPz8gJ0ZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIHR5cGU6ICdyZXF1aXJlZCcsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVJbnZhbGlkRXJyb3IoXG4gICAgICAgIGZpZWxkVHlwZTogQnJhaW50cmVlRm9ybUZpZWxkVHlwZSxcbiAgICApOiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YSB7XG4gICAgICAgIGNvbnN0IGZvcm1GaWVsZHMgPSB7XG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV06IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGNvZGUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25dOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBjb2RlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX2NvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBudW1iZXInLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfbnVtYmVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uXToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGNhcmQgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX251bWJlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZEV4cGlyeV06IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGV4cGlyeScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ludmFsaWRfY2FyZF9leHBpcnknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGNhcmQgbmFtZScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ludmFsaWRfY2FyZF9uYW1lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZvcm1GaWVsZHNbZmllbGRUeXBlXT8ubWVzc2FnZSA/PyAnSW52YWxpZCBmaWVsZCcsXG4gICAgICAgICAgICB0eXBlOiBmb3JtRmllbGRzW2ZpZWxkVHlwZV0/LnR5cGUgPz8gJ2ludmFsaWQnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQmx1ciA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25CbHVyPy4oe1xuICAgICAgICAgICAgZmllbGRUeXBlOiB0aGlzLm1hcEZpZWxkVHlwZShldmVudC5lbWl0dGVkQnkpLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLm1hcEVycm9ycyhldmVudC5maWVsZHMpLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBoYW5kbGVGb2N1cyA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25Gb2N1cz8uKHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZXZlbnQuZW1pdHRlZEJ5KSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaGFuZGxlQ2FyZFR5cGVDaGFuZ2UgPSAoZXZlbnQ6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGNhcmRUeXBlID1cbiAgICAgICAgICAgIGV2ZW50LmNhcmRzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgID8gZXZlbnQuY2FyZHNbMF0udHlwZS5yZXBsYWNlKC9ebWFzdGVyLWNhcmQkLywgJ21hc3RlcmNhcmQnKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uQ2FyZFR5cGVDaGFuZ2U/Lih7IGNhcmRUeXBlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGhhbmRsZUlucHV0U3VibWl0UmVxdWVzdCA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25FbnRlcj8uKHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZXZlbnQuZW1pdHRlZEJ5KSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaGFuZGxlVmFsaWRpdHlDaGFuZ2UgPSAoZXZlbnQ6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih7XG4gICAgICAgICAgICBpc1ZhbGlkOiB0aGlzLmlzVmFsaWRGb3JtKGV2ZW50KSxcbiAgICAgICAgICAgIGVycm9yczogdGhpcy5tYXBWYWxpZGF0aW9uRXJyb3JzKGV2ZW50LmZpZWxkcyksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGlzVmFsaWRGb3JtKGV2ZW50OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZXZlbnQuZmllbGRzKSBhcyBBcnJheTxrZXlvZiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZVsnZmllbGRzJ10+XG4gICAgICAgICkuZXZlcnkoKGtleSkgPT4gZXZlbnQuZmllbGRzW2tleV0/LmlzVmFsaWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNWYWxpZFBhcmFtKGtleTogc3RyaW5nKToga2V5IGlzIEJyYWludHJlZUZvcm1FcnJvckRhdGFLZXlzIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgJ2N2dicsXG4gICAgICAgICAgICAnZXhwaXJhdGlvbkRhdGUnLFxuICAgICAgICAgICAgJ3Bvc3RhbENvZGUnLFxuICAgICAgICAgICAgJ2NhcmRob2xkZXJOYW1lJyxcbiAgICAgICAgICAgICdjYXJkVHlwZScsXG4gICAgICAgIF0uaW5jbHVkZXMoa2V5KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaXNCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmQgPSAoXG4gICAgY2FyZEJyYW5kOiBzdHJpbmcsXG4pOiBjYXJkQnJhbmQgaXMgQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyA9PiB7XG4gICAgY29uc3Qgc3VwcG9ydGVkQ2FyZEJyYW5kcyA9IE9iamVjdC52YWx1ZXMoQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgcmV0dXJuIHN1cHBvcnRlZENhcmRCcmFuZHMuaW5jbHVkZXMoY2FyZEJyYW5kIGFzIEJyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmQ7XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5cbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1jcmVkaXQtY2FyZC1wYXltZW50LXN0cmF0ZWd5JztcbmltcG9ydCBCcmFpbnRyZWVIb3N0ZWRGb3JtIGZyb20gJy4uL2JyYWludHJlZS1ob3N0ZWQtZm9ybS9icmFpbnRyZWUtaG9zdGVkLWZvcm0nO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUNyZWRpdENhcmRQYXltZW50U3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG5cbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcblxuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlID0gbmV3IEJyYWludHJlZUludGVncmF0aW9uU2VydmljZShcbiAgICAgICAgYnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICk7XG5cbiAgICBjb25zdCBicmFpbnRyZWVIb3N0ZWRGb3JtID0gbmV3IEJyYWludHJlZUhvc3RlZEZvcm0oXG4gICAgICAgIGJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVIb3N0ZWRGb3JtLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneSwgW3sgaWQ6ICdicmFpbnRyZWUnIH1dKTtcbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIGEgc2hvcHBlciB0cmllcyB0byBzaWduIGluIGFzIGEgZ3Vlc3QgYnV0XG4gKiB0aGV5IGFyZSBhbHJlYWR5IHNpZ25lZCBpbiBhcyBhIHJlZ2lzdGVyZWQgY3VzdG9tZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIG1lc3NhZ2UgfHxcbiAgICAgICAgICAgICAgICAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJyZWQgZHVyaW5nIGJ1eSBub3cgY2FydCBjcmVhdGlvbiBwcm9jZXNzLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ0J1eU5vd0NhcnRDcmVhdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ2J1eV9ub3dfY2FydF9jcmVhdGlvbl9lcnJvcic7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNOaWwsIG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFBheXBhbFN0eWxlT3B0aW9ucyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZT86IFBheXBhbFN0eWxlT3B0aW9ucyk6IFBheXBhbFN0eWxlT3B0aW9ucyB7XG4gICAgY29uc3QgeyBjb2xvciwgZnVuZGluZ2ljb25zLCBoZWlnaHQgPSA0MCwgbGF5b3V0LCBzaGFwZSwgc2l6ZSwgdGFnbGluZSB9ID0gc3R5bGUgfHwge307XG5cbiAgICBjb25zdCB2YWxpZFN0eWxlcyA9IHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGZ1bmRpbmdpY29ucyxcbiAgICAgICAgaGVpZ2h0OiBnZXRWYWxpZEhlaWdodChoZWlnaHQpLFxuICAgICAgICBsYXlvdXQsXG4gICAgICAgIHNoYXBlOiBzaGFwZSB8fCAncmVjdCcsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHRhZ2xpbmUsXG4gICAgfTtcblxuICAgIHJldHVybiBvbWl0QnkodmFsaWRTdHlsZXMsIGlzTmlsKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWRIZWlnaHQoaGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IG1pbkhlaWdodCA9IDI1O1xuICAgIGNvbnN0IGRlZmF1bHRIZWlnaHQgPSA0MDtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSA1NTtcblxuICAgIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBOdW1iZXIoaGVpZ2h0KTtcblxuICAgIGlmICghY3VycmVudEhlaWdodCB8fCBOdW1iZXIuaXNOYU4oY3VycmVudEhlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRIZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRIZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG1heEhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEhlaWdodCA8IG1pbkhlaWdodCkge1xuICAgICAgICByZXR1cm4gbWluSGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50SGVpZ2h0O1xufVxuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgIEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlVG9rZW5pemVQYXlsb2FkLFxuICAgIGlzQnJhaW50cmVlRXJyb3IsXG4gICAgUGF5cGFsQXV0aG9yaXplRGF0YSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgZ2V0VmFsaWRCdXR0b25TdHlsZSBmcm9tICcuLi9nZXQtdmFsaWQtYnV0dG9uLXN0eWxlJztcbmltcG9ydCBtYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIGZyb20gJy4uL21hcC10by1icmFpbnRyZWUtc2hpcHBpbmctYWRkcmVzcy1vdmVycmlkZSc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxCdXR0b25Jbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhCcmFpbnRyZWVQYXlwYWxCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnV5Tm93Q2FydElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVBheXBhbEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXBheXBhbCwgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5jb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYnJhaW50cmVlcGF5cGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlcGF5cGFsXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGxldCBjdXJyZW5jeUNvZGU6IHN0cmluZztcblxuICAgICAgICBpZiAoYnJhaW50cmVlcGF5cGFsLmJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbC5jdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdC5jdXJyZW5jeUNvZGVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGUgPSBicmFpbnRyZWVwYXlwYWwuY3VycmVuY3lDb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcblxuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZSA9IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dE9wdGlvbnM6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgaW50ZW50OiBpbml0aWFsaXphdGlvbkRhdGEuaW50ZW50LFxuICAgICAgICAgICAgaXNDcmVkaXRFbmFibGVkOiBpbml0aWFsaXphdGlvbkRhdGEuaXNDcmVkaXRFbmFibGVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrID0gKFxuICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKFxuICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJJZCxcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAhIWNvbmZpZy50ZXN0TW9kZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayA9IChlcnJvcjogQnJhaW50cmVlRXJyb3IpID0+XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBjb250YWluZXJJZCwgYnJhaW50cmVlcGF5cGFsLm9uRXJyb3IpO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlwYWxDaGVja291dChcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0T3B0aW9ucyxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgICAgcGF5cGFsQ2hlY2tvdXRFcnJvckNhbGxiYWNrLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudGVhcmRvd24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWw6IEJyYWludHJlZVBheXBhbEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICB0ZXN0TW9kZTogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBzdHlsZSwgc2hvdWxkUHJvY2Vzc1BheW1lbnQsIG9uQXV0aG9yaXplRXJyb3IsIG9uRWxpZ2liaWxpdHlGYWlsdXJlIH0gPVxuICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsO1xuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuXG4gICAgICAgIGlmIChwYXlwYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvblJlbmRlciA9IHBheXBhbC5CdXR0b25zKHtcbiAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbC5GVU5ESU5HLlBBWVBBTCxcbiAgICAgICAgICAgICAgICBzdHlsZTogZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZSksXG4gICAgICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBQYXltZW50KGJyYWludHJlZVBheXBhbENoZWNrb3V0LCBicmFpbnRyZWVwYXlwYWwsIG1ldGhvZElkKSxcbiAgICAgICAgICAgICAgICBvbkFwcHJvdmU6IChhdXRob3JpemVEYXRhOiBQYXlwYWxBdXRob3JpemVEYXRhKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUHJvY2Vzc1BheW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkF1dGhvcml6ZUVycm9yLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uRWxpZ2liaWxpdHlGYWlsdXJlICYmIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uRWxpZ2liaWxpdHlGYWlsdXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2V0dXBQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dDogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgIGJyYWludHJlZXBheXBhbDogQnJhaW50cmVlUGF5cGFsQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgb25QYXltZW50RXJyb3IsIHNoaXBwaW5nQWRkcmVzcywgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMgfSA9IGJyYWludHJlZXBheXBhbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmNyZWF0ZUJ1eU5vd0NhcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSgpLFxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuYnV5Tm93Q2FydElkID0gYnV5Tm93Q2FydD8uaWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4gPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gYnV5Tm93Q2FydCA/IGJ1eU5vd0NhcnQuY2FydEFtb3VudCA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY2FydEFtb3VudDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGJ1eU5vd0NhcnRcbiAgICAgICAgICAgICAgICA/IGJyYWludHJlZXBheXBhbC5jdXJyZW5jeUNvZGVcbiAgICAgICAgICAgICAgICA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICBpZiAob25QYXltZW50RXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUGF5bWVudEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0b2tlbml6ZVBheW1lbnQoXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgc2hvdWxkUHJvY2Vzc1BheW1lbnQ/OiBib29sZWFuLFxuICAgICAgICBvbkVycm9yPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgfCB2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRldmljZURhdGEgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldERhdGFDb2xsZWN0b3Ioe1xuICAgICAgICAgICAgICAgIHBheXBhbDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdG9rZW5pemVQYXlsb2FkID0gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQudG9rZW5pemVQYXltZW50KGF1dGhvcml6ZURhdGEpO1xuICAgICAgICAgICAgY29uc3QgeyBkZXRhaWxzLCBub25jZSB9ID0gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLm1hcFRvTGVnYWN5QmlsbGluZ0FkZHJlc3MoZGV0YWlscyk7XG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLm1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKGRldGFpbHMpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICAgICAgcGF5bWVudF90eXBlOiAncGF5cGFsJyxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzaG91bGRQcm9jZXNzUGF5bWVudCA/ICdwcm9jZXNzX3BheW1lbnQnIDogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgYmlsbGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAuLi4odGhpcy5idXlOb3dDYXJ0SWQgJiYgeyBjYXJ0X2lkOiB0aGlzLmJ1eU5vd0NhcnRJZCB9KSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZUJ1eU5vd0NhcnQoYnV5Tm93Q2FyZFJlcXVlc3RCb2R5PzogQnV5Tm93Q2FydFJlcXVlc3RCb2R5IHwgdm9pZCkge1xuICAgICAgICBpZiAoIWJ1eU5vd0NhcmRSZXF1ZXN0Qm9keSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydChidXlOb3dDYXJkUmVxdWVzdEJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogdW5rbm93bixcbiAgICAgICAgYnV0dG9uQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgb25FcnJvckNhbGxiYWNrPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoYnV0dG9uQ29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChvbkVycm9yQ2FsbGJhY2sgJiYgaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIG9uRXJyb3JDYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZVBheXBhbEJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxCdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3ksIFt7IGlkOiAnYnJhaW50cmVlcGF5cGFsJyB9XSk7XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgaXNCcmFpbnRyZWVFcnJvcixcbiAgICBNZXNzYWdpbmdQbGFjZW1lbnRzLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsQnV0dG9uU3R5bGVMYWJlbE9wdGlvbixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBnZXRWYWxpZEJ1dHRvblN0eWxlIGZyb20gJy4uL2dldC12YWxpZC1idXR0b24tc3R5bGUnO1xuaW1wb3J0IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgZnJvbSAnLi4vbWFwLXRvLWJyYWludHJlZS1zaGlwcGluZy1hZGRyZXNzLW92ZXJyaWRlJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnV5Tm93Q2FydElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlTWVzc2FnZXM6IEJyYWludHJlZU1lc3NhZ2VzLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBicmFpbnRyZWVwYXlwYWxjcmVkaXQsIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbGNyZWRpdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBsZXQgY3VycmVuY3lDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgaWYgKGJyYWludHJlZXBheXBhbGNyZWRpdC5idXlOb3dJbml0aWFsaXplT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFicmFpbnRyZWVwYXlwYWxjcmVkaXQuY3VycmVuY3lDb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVwYXlwYWxjcmVkaXQuY3VycmVuY3lDb2RlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVuY3lDb2RlID0gYnJhaW50cmVlcGF5cGFsY3JlZGl0LmN1cnJlbmN5Q29kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCk7XG5cbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGNvbmZpZywgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRPcHRpb25zOiBQYXJ0aWFsPEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWc+ID0ge1xuICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgIGludGVudDogaW5pdGlhbGl6YXRpb25EYXRhLmludGVudCxcbiAgICAgICAgICAgIGlzQ3JlZGl0RW5hYmxlZDogaW5pdGlhbGl6YXRpb25EYXRhLmlzQ3JlZGl0RW5hYmxlZCxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYmFubmVyIHJlbmRlcmluZyBpbXBsZW1lbnRhdGlvbiBpbiB0aGlzIGZpbGUgd2hlbiBQQVlQQUwtNTY2My5oaWRlX2JyYWludHJlZV9jYXJkX2Jhbm5lcl9pbXBsZW1lbnRhdGlvbl9pbl9jaGVja291dF9zZGsgd2lsbCBiZSByb2xsZWQgb3V0IHRvIDEwMCVcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZygpPy5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzID8/IHt9O1xuICAgICAgICBjb25zdCBpc0Jhbm5lckltcGxlbWVudGF0aW9uRGlzYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUEFZUEFMLTU2NjMuaGlkZV9icmFpbnRyZWVfY2FyZF9iYW5uZXJfaW1wbGVtZW50YXRpb25faW5fY2hlY2tvdXRfc2RrJyxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayA9IChcbiAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzQmFubmVySW1wbGVtZW50YXRpb25EaXNhYmxlZCAmJiBicmFpbnRyZWVwYXlwYWxjcmVkaXQubWVzc2FnaW5nQ29udGFpbmVySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbE1lc3NhZ2VzKG1ldGhvZElkLCBicmFpbnRyZWVwYXlwYWxjcmVkaXQubWVzc2FnaW5nQ29udGFpbmVySWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgISFjb25maWcudGVzdE1vZGUsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVySWQsIGJyYWludHJlZXBheXBhbGNyZWRpdC5vbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJQYXlQYWxNZXNzYWdlcyhtZXRob2RJZDogc3RyaW5nLCBtZXNzYWdpbmdDb250YWluZXJJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlTWVzc2FnZXMucmVuZGVyKG1ldGhvZElkLCBtZXNzYWdpbmdDb250YWluZXJJZCwgTWVzc2FnaW5nUGxhY2VtZW50cy5DQVJUKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICB0ZXN0TW9kZTogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBzdHlsZSwgc2hvdWxkUHJvY2Vzc1BheW1lbnQsIG9uQXV0aG9yaXplRXJyb3IsIG9uRWxpZ2liaWxpdHlGYWlsdXJlIH0gPVxuICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0O1xuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuXG4gICAgICAgIGxldCBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHBheXBhbCkge1xuICAgICAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZXMgPSBbcGF5cGFsLkZVTkRJTkcuUEFZTEFURVIsIHBheXBhbC5GVU5ESU5HLkNSRURJVF07XG5cbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2VzLmZvckVhY2goKGZ1bmRpbmdTb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25TdHlsZSA9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UgPT09IHBheXBhbC5GVU5ESU5HLkNSRURJVFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogUGF5cGFsQnV0dG9uU3R5bGVMYWJlbE9wdGlvbi5DUkVESVQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5nZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBQYXltZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25BcHByb3ZlOiAoYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXplRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRQcm9jZXNzUGF5bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25BdXRob3JpemVFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uUmVuZGVyLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheXBhbC5GVU5ESU5HLkNSRURJVCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb25kaXRpb24gaXMgcmVsYXRlZCB0byBwYXlwYWwuRlVORElORy5DUkVESVQgYmVjYXVzZSB3aGVuIHBheXBhbC5GVU5ESU5HLlBBWUxBVEVSIGlzIG5vdCBlbGlnaWJsZSB0aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDUkVESVQgYnV0dG9uIHNob3VsZCBiZSBjb25maWd1cmVkIGFuZCB0cmlnZ2VyZWQgdG8gcmVuZGVyIHdpdGggZWxpZ2liaWxpdHkgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiBpdCBpcyBub3QgZWxpZ2libGUsIHRoZW4gb25FbGlnaWJpbGl0eUZhaWx1cmUgY2FsbGJhY2sgc2hvdWxkIGJlIGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWwgfHwgIWhhc1JlbmRlcmVkU21hcnRCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVySWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXR1cFBheW1lbnQoXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0OiBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHN0cmluZyB8IHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBvblBheW1lbnRFcnJvciwgc2hpcHBpbmdBZGRyZXNzLCBidXlOb3dJbml0aWFsaXplT3B0aW9ucyB9ID0gYnJhaW50cmVlcGF5cGFsY3JlZGl0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBidXlOb3dDYXJ0ID1cbiAgICAgICAgICAgICAgICB0eXBlb2YgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMuY3JlYXRlQnV5Tm93Q2FydChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMuZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5KCksXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdGhpcy5idXlOb3dDYXJ0SWQgPSBidXlOb3dDYXJ0Py5pZDtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPiA9XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBidXlOb3dDYXJ0ID8gYnV5Tm93Q2FydC5jYXJ0QW1vdW50IDogc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jYXJ0QW1vdW50OyAvLyBzdGF0ZS5nZXRDaGVja291dE9yVGhyb3coKS5vdXRzdGFuZGluZ0JhbGFuY2VcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGJ1eU5vd0NhcnRcbiAgICAgICAgICAgICAgICA/IGJyYWludHJlZXBheXBhbGNyZWRpdC5jdXJyZW5jeUNvZGVcbiAgICAgICAgICAgICAgICA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhPy5pbnRlbnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgICAgIGlmIChvblBheW1lbnRFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUVycm9yKGVycm9yKSB8fCBlcnJvciBpbnN0YW5jZW9mIFN0YW5kYXJkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25QYXltZW50RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRva2VuaXplUGF5bWVudChcbiAgICAgICAgYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSxcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBzaG91bGRQcm9jZXNzUGF5bWVudD86IGJvb2xlYW4sXG4gICAgICAgIG9uRXJyb3I/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZCB8IHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0RGF0YUNvbGxlY3Rvcih7XG4gICAgICAgICAgICAgICAgcGF5cGFsOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbml6ZVBheWxvYWQgPSBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC50b2tlbml6ZVBheW1lbnQoYXV0aG9yaXplRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGRldGFpbHMsIG5vbmNlIH0gPSB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lCaWxsaW5nQWRkcmVzcyhkZXRhaWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlscyk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgICAgICBwYXltZW50X3R5cGU6ICdwYXlwYWwnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHNob3VsZFByb2Nlc3NQYXltZW50ID8gJ3Byb2Nlc3NfcGF5bWVudCcgOiAnc2V0X2V4dGVybmFsX2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgICAgICBkZXZpY2VfZGF0YTogZGV2aWNlRGF0YSxcbiAgICAgICAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KGJpbGxpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShzaGlwcGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgIC4uLih0aGlzLmJ1eU5vd0NhcnRJZCAmJiB7IGNhcnRfaWQ6IHRoaXMuYnV5Tm93Q2FydElkIH0pLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUVycm9yKGVycm9yKSB8fCBlcnJvciBpbnN0YW5jZW9mIFN0YW5kYXJkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlQnV5Tm93Q2FydChidXlOb3dDYXJkUmVxdWVzdEJvZHk/OiBCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgfCB2b2lkKSB7XG4gICAgICAgIGlmICghYnV5Tm93Q2FyZFJlcXVlc3RCb2R5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2FydCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5jcmVhdGVCdXlOb3dDYXJ0KGJ1eU5vd0NhcmRSZXF1ZXN0Qm9keSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBidXR0b25Db250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBvbkVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChidXR0b25Db250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3JDYWxsYmFjayAmJiBpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgb25FcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVNZXNzYWdlcyA9IG5ldyBCcmFpbnRyZWVNZXNzYWdlcyhwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQ3JlZGl0QnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvblN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbGNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0LFxuICAgIFZpc2FDaGVja291dEFkZHJlc3MsXG4gICAgVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgIFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3ksXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTGVnYWN5QWRkcmVzcyxcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZm9ybVBvc3RlcjogRm9ybVBvc3RlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJJZCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmNvbnRhaW5lcklkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSwgY29uZmlnIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjdXJyZW5jeTogeyBjb2RlIH0sXG4gICAgICAgICAgICBjYXJ0QW1vdW50LFxuICAgICAgICB9ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFZpc2FDaGVja291dFNkayhjb25maWcudGVzdE1vZGUpO1xuXG4gICAgICAgIGNvbnN0IGluaXRPcHRpb25zID0gYnJhaW50cmVlVmlzYUNoZWNrb3V0LmNyZWF0ZUluaXRPcHRpb25zKHtcbiAgICAgICAgICAgIHBheW1lbnRSZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBjb2RlLFxuICAgICAgICAgICAgICAgIHN1YnRvdGFsOiBTdHJpbmcoY2FydEFtb3VudCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0U2hpcHBpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlU2lnbkluQnV0dG9uKGNvbnRhaW5lcklkKTtcblxuICAgICAgICBhd2FpdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbigncGF5bWVudC5zdWNjZXNzJywgYXN5bmMgKHBheW1lbnQpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudFN1Y2Nlc3MoYnJhaW50cmVlVmlzYUNoZWNrb3V0LCBwYXltZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwYXltZW50U3VjY2VzcyhcbiAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0OiBCcmFpbnRyZWVWaXNhQ2hlY2tvdXQsXG4gICAgICAgIHBheW1lbnQ6IFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCxcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGJyYWludHJlZVZpc2FDaGVja291dC50b2tlbml6ZShwYXltZW50KSxcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2RrLmdldERhdGFDb2xsZWN0b3JPclRocm93KCksXG4gICAgICAgIF0pLnRoZW4oKFtwYXlsb2FkLCBkZXZpY2VEYXRhXSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmcgPSBzdGF0ZS5nZXRTaGlwcGluZ0FkZHJlc3MoKTtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmcgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuXG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzID0gdGhpcy50b1Zpc2FDaGVja291dEFkZHJlc3Moc2hpcHBpbmcpLFxuICAgICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzID0gdGhpcy50b1Zpc2FDaGVja291dEFkZHJlc3MoYmlsbGluZyksXG4gICAgICAgICAgICB9ID0gcGF5bG9hZDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdEZvcm0oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGV2aWNlRGF0YSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcG9zdEZvcm0oXG4gICAgICAgIHBheW1lbnREYXRhOiBWaXNhQ2hlY2tvdXRUb2tlbml6ZWRQYXlsb2FkLFxuICAgICAgICBkYXRhQ29sbGVjdG9yOiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgICkge1xuICAgICAgICBjb25zdCB7IHVzZXJEYXRhLCBiaWxsaW5nQWRkcmVzcywgc2hpcHBpbmdBZGRyZXNzLCBkZXRhaWxzOiBjYXJkSW5mb3JtYXRpb24gfSA9IHBheW1lbnREYXRhO1xuICAgICAgICBjb25zdCB7IHVzZXJFbWFpbCB9ID0gdXNlckRhdGE7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gZGF0YUNvbGxlY3RvcjtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgcGF5bWVudF90eXBlOiBwYXltZW50RGF0YS50eXBlLFxuICAgICAgICAgICAgbm9uY2U6IHBheW1lbnREYXRhLm5vbmNlLFxuICAgICAgICAgICAgcHJvdmlkZXI6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnLFxuICAgICAgICAgICAgYWN0aW9uOiAnc2V0X2V4dGVybmFsX2NoZWNrb3V0JyxcbiAgICAgICAgICAgIGRldmljZV9kYXRhOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgY2FyZF9pbmZvcm1hdGlvbjogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IGNhcmRJbmZvcm1hdGlvbi5jYXJkVHlwZSxcbiAgICAgICAgICAgICAgICBudW1iZXI6IGNhcmRJbmZvcm1hdGlvbi5sYXN0VHdvLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIGJpbGxpbmdBZGRyZXNzKSksXG4gICAgICAgICAgICBzaGlwcGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeSh0aGlzLmdldEFkZHJlc3ModXNlckVtYWlsLCBzaGlwcGluZ0FkZHJlc3MpKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b1Zpc2FDaGVja291dEFkZHJlc3MoYWRkcmVzcz86IEFkZHJlc3MpOiBWaXNhQ2hlY2tvdXRBZGRyZXNzIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGFkZHJlc3MucGhvbmUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgbG9jYWxpdHk6IGFkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIHJlZ2lvbjogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRBZGRyZXNzKGVtYWlsOiBzdHJpbmcsIGFkZHJlc3M6IFZpc2FDaGVja291dEFkZHJlc3MgPSB7fSk6IFBhcnRpYWw8TGVnYWN5QWRkcmVzcz4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBmaXJzdF9uYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogYWRkcmVzcy5sYXN0TmFtZSxcbiAgICAgICAgICAgIHBob25lX251bWJlcjogYWRkcmVzcy5waG9uZU51bWJlcixcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8xOiBhZGRyZXNzLnN0cmVldEFkZHJlc3MsXG4gICAgICAgICAgICBhZGRyZXNzX2xpbmVfMjogYWRkcmVzcy5leHRlbmRlZEFkZHJlc3MsXG4gICAgICAgICAgICBjaXR5OiBhZGRyZXNzLmxvY2FsaXR5LFxuICAgICAgICAgICAgc3RhdGU6IGFkZHJlc3MucmVnaW9uLFxuICAgICAgICAgICAgY291bnRyeV9jb2RlOiBhZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcG9zdGFsX2NvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNpZ25JbkJ1dHRvbihjb250YWluZXJJZDogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtjb250YWluZXJJZH1gKTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWVkIGEgY29udGFpbmVyIHRvIHBsYWNlIHRoZSBidXR0b24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydFZpc2FDaGVja291dEJ1dHRvbihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5zZXJ0VmlzYUNoZWNrb3V0QnV0dG9uKGNvbnRhaW5lcjogRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgYnV0dG9uU291cmNlID1cbiAgICAgICAgICAgICdodHRwczovL3NlY3VyZS5jaGVja291dC52aXNhLmNvbS93YWxsZXQtc2VydmljZXMtd2ViL3hvL2J1dHRvbi5wbmc/YWNjZXB0Q2FuYWRpYW5WaXNhRGViaXQ9ZmFsc2UmY29icmFuZD10cnVlJmhlaWdodD0zNCZ3aWR0aD0xNzgnO1xuICAgICAgICBjb25zdCBidXR0b25UZW1wbGF0ZSA9IGBcbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBhbHQ9XCJWaXNhIENoZWNrb3V0XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInYtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIke2J1dHRvblNvdXJjZX1cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YSBjbGFzcz1cInYtbGVhcm4gdi1sZWFybi1kZWZhdWx0XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiByaWdodDsgZGlzcGxheTogYmxvY2s7IGZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICMwMDMzNjY7XCIgaHJlZj1cIiNcIiBkYXRhLWxvY2FsZT1cImVuX1VTXCI+VGVsbCBNZSBNb3JlPC9hPmA7XG5cbiAgICAgICAgY29uc3QgdmlzYUNoZWNrb3V0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5zdHlsZS5hbGlnbkl0ZW1zID0gJ2ZsZXgtZW5kJztcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uaW5uZXJIVE1MID0gYnV0dG9uVGVtcGxhdGU7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZpc2FDaGVja291dEJ1dHRvbik7XG5cbiAgICAgICAgcmV0dXJuIHZpc2FDaGVja291dEJ1dHRvbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlVmlzYUNoZWNrb3V0QnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtdmlzYS1jaGVja291dC1idXR0b24tc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneTogQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0QnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGhvc3RXaW5kb3c6IFZpc2FDaGVja291dEhvc3RXaW5kb3cgJiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNkayA9IG5ldyBCcmFpbnRyZWVTZGsoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoZ2V0U2NyaXB0TG9hZGVyKCksIGhvc3RXaW5kb3csIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVTZGssXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnIH0sXG5dKTtcbiIsImltcG9ydCB7IExlZ2FjeUFkZHJlc3MgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKFxuICAgIGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMsXG4pOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICBjb25zdCB7IGJpbGxpbmdBZGRyZXNzLCBlbWFpbCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgcGhvbmUsIHNoaXBwaW5nQWRkcmVzcyB9ID0gZGV0YWlscztcblxuICAgIGNvbnN0IGFkZHJlc3MgPSBiaWxsaW5nQWRkcmVzcyB8fCBzaGlwcGluZ0FkZHJlc3M7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbWFpbCxcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lLFxuICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lLFxuICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICBhZGRyZXNzX2xpbmVfMTogYWRkcmVzcz8ubGluZTEsXG4gICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzPy5saW5lMixcbiAgICAgICAgY2l0eTogYWRkcmVzcz8uY2l0eSxcbiAgICAgICAgc3RhdGU6IGFkZHJlc3M/LnN0YXRlLFxuICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3M/LmNvdW50cnlDb2RlLFxuICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgTGVnYWN5QWRkcmVzcyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgeyBCcmFpbnRyZWVUb2tlbml6YXRpb25EZXRhaWxzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKFxuICAgIGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMsXG4pOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICBjb25zdCB7IGVtYWlsLCBwaG9uZSwgc2hpcHBpbmdBZGRyZXNzIH0gPSBkZXRhaWxzO1xuXG4gICAgY29uc3QgcmVjaXBpZW50TmFtZSA9IHNoaXBwaW5nQWRkcmVzcz8ucmVjaXBpZW50TmFtZSB8fCAnJztcbiAgICBjb25zdCBbZmlyc3ROYW1lLCBsYXN0TmFtZV0gPSByZWNpcGllbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbWFpbCxcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lIHx8ICcnLFxuICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICBhZGRyZXNzX2xpbmVfMTogc2hpcHBpbmdBZGRyZXNzPy5saW5lMSxcbiAgICAgICAgYWRkcmVzc19saW5lXzI6IHNoaXBwaW5nQWRkcmVzcz8ubGluZTIsXG4gICAgICAgIGNpdHk6IHNoaXBwaW5nQWRkcmVzcz8uY2l0eSxcbiAgICAgICAgc3RhdGU6IHNoaXBwaW5nQWRkcmVzcz8uc3RhdGUsXG4gICAgICAgIGNvdW50cnlfY29kZTogc2hpcHBpbmdBZGRyZXNzPy5jb3VudHJ5Q29kZSxcbiAgICAgICAgcG9zdGFsX2NvZGU6IHNoaXBwaW5nQWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlVG9rZW5pemVQYXlsb2FkLFxuICAgIEJyYWludHJlZVZlbm1vQ2hlY2tvdXQsXG4gICAgbWFwVG9MZWdhY3lCaWxsaW5nQWRkcmVzcyxcbiAgICBtYXBUb0xlZ2FjeVNoaXBwaW5nQWRkcmVzcyxcbiAgICBQYXlwYWxCdXR0b25TdHlsZUNvbG9yT3B0aW9uLFxuICAgIFBheXBhbFN0eWxlT3B0aW9ucyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgQ2FydCxcbiAgICBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3ksXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2QsXG4gICAgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgaXNCcmFpbnRyZWVFcnJvciBmcm9tICcuLi9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IHsgaXNVbnN1cHBvcnRlZEJyb3dzZXJFcnJvciB9IGZyb20gJy4uL2lzVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3InO1xuXG5pbXBvcnQgeyBXaXRoQnJhaW50cmVlVmVubW9Jbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4vYnJhaW50cmVlLXZlbm1vLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmNvbnN0IGdldFZlbm1vQnV0dG9uU3R5bGUgPSAoc3R5bGVzOiBQYXlwYWxTdHlsZU9wdGlvbnMpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+IHtcbiAgICBjb25zdCB7IGNvbG9yLCBoZWlnaHQgfSA9IHN0eWxlcztcblxuICAgIGNvbnN0IGNvbG9yUGFyc2VyID0gKGM6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoYyA9PT0gUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbi5XSElURSkge1xuICAgICAgICAgICAgcmV0dXJuICcjRkZGRkZGJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnIzNEOTVDRSc7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JQYXJzZXIoY29sb3IgfHwgJycpLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICc1MCUgNTAlJyxcbiAgICAgICAgYmFja2dyb3VuZFNpemU6ICc4MHB4IGF1dG8nLFxuICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoXCIvYXBwL2Fzc2V0cy9pbWcvcGF5bWVudC1wcm92aWRlcnMvdmVubW8tbG9nby0ke1xuICAgICAgICAgICAgY29sb3IgPT09IFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24uV0hJVEVcbiAgICAgICAgICAgICAgICA/IFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24uQkxVRVxuICAgICAgICAgICAgICAgIDogUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbi5XSElURVxuICAgICAgICB9LnN2Z1wiKWAsXG4gICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJzAuMnMgZWFzZScsXG4gICAgICAgIG1pbkhlaWdodDogYCR7aGVpZ2h0IHx8IDQwfXB4YCxcbiAgICAgICAgbWluV2lkdGg6ICcxNTBweCcsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXI6IGNvbG9yID09PSBQYXlwYWxCdXR0b25TdHlsZUNvbG9yT3B0aW9uLldISVRFID8gJzFweCBzb2xpZCBibGFjaycgOiAnbm9uZScsXG4gICAgfTtcbn07XG5cbmNvbnN0IHZlbm1vQnV0dG9uU3R5bGVIb3ZlciA9IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMGE3ZmMyJyxcbn07XG5cbmludGVyZmFjZSBCdXlOb3dJbml0aWFsaXplT3B0aW9ucyB7XG4gICAgZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5PygpOiBCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgfCB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVWZW5tb0J1dHRvblN0cmF0ZWd5IGltcGxlbWVudHMgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBvbkVycm9yID0gbm9vcDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZm9ybVBvc3RlcjogRm9ybVBvc3RlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVZlbm1vSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVldmVubW8sIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEgfTogUGF5bWVudE1ldGhvZCA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gaW5pdGlhbGl6YXRpb25EYXRhO1xuICAgICAgICBjb25zdCB7IGNhcnRCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IGJyYWludHJlZXZlbm1vPy5zdHlsZSB8fCBjYXJ0QnV0dG9uU3R5bGVzO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmNvbnRhaW5lcklkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcblxuICAgICAgICB0aGlzLm9uRXJyb3IgPSBicmFpbnRyZWV2ZW5tbz8ub25FcnJvciB8fCB0aGlzLmhhbmRsZUVycm9yO1xuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYnJhaW50cmVlVmVubW9DaGVja291dCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFZlbm1vQ2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmVubW9CdXR0b24oXG4gICAgICAgICAgICAgICAgYnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJJZCxcbiAgICAgICAgICAgICAgICBicmFpbnRyZWV2ZW5tbz8uYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUVycm9yKGVycm9yKSB8fCBpc1Vuc3VwcG9ydGVkQnJvd3NlckVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSW5pdGlhbGl6YXRpb25WZW5tb0Vycm9yKGVycm9yLCBjb250YWluZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmRlaW5pdGlhbGl6ZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBCcmFpbnRyZWVFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVCdXlOb3dDYXJ0KFxuICAgICAgICBidXlOb3dJbml0aWFsaXplT3B0aW9ucz86IEJ1eU5vd0luaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8Q2FydCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBpZiAodHlwZW9mIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhcnRSZXF1ZXN0Qm9keSA9IGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkoKTtcblxuICAgICAgICAgICAgaWYgKCFjYXJ0UmVxdWVzdEJvZHkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2FydCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9IGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5jcmVhdGVCdXlOb3dDYXJ0KFxuICAgICAgICAgICAgICAgICAgICBjYXJ0UmVxdWVzdEJvZHksXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBidXlOb3dDYXJ0O1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVJbml0aWFsaXphdGlvblZlbm1vRXJyb3IoXG4gICAgICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFVuc3VwcG9ydGVkQnJvd3NlckVycm9yLFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZVZlbm1vQ29udGFpbmVyKGNvbnRhaW5lcklkKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVZlbm1vQ29udGFpbmVyKGNvbnRhaW5lcklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChidXR0b25Db250YWluZXIpIHtcbiAgICAgICAgICAgIGJ1dHRvbkNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVmVubW9CdXR0b24oXG4gICAgICAgIGJyYWludHJlZVZlbm1vQ2hlY2tvdXQ6IEJyYWludHJlZVZlbm1vQ2hlY2tvdXQsXG4gICAgICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPzogQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIGJ1dHRvblN0eWxlcz86IFBheXBhbFN0eWxlT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmVubW9CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJZCk7XG4gICAgICAgIGNvbnN0IHsgY29sb3IgfSA9IGJ1dHRvblN0eWxlcyB8fCB7fTtcblxuICAgICAgICBpZiAoIXZlbm1vQnV0dG9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBjcmVhdGUgd2FsbGV0IGJ1dHRvbiB3aXRob3V0IHZhbGlkIGNvbnRhaW5lciBJRC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZlbm1vQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdWZW5tbycpO1xuICAgICAgICBPYmplY3QuYXNzaWduKHZlbm1vQnV0dG9uLnN0eWxlLCBnZXRWZW5tb0J1dHRvblN0eWxlKGJ1dHRvblN0eWxlcyB8fCB7fSkpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbWlzdXNlZC1wcm9taXNlc1xuICAgICAgICB2ZW5tb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHZlbm1vQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xuXG4gICAgICAgICAgICBjb25zdCBidXlCb3dDYXJ0ID0gYXdhaXQgdGhpcy5jcmVhdGVCdXlOb3dDYXJ0KGJ1eU5vd0luaXRpYWxpemVPcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKGJyYWludHJlZVZlbm1vQ2hlY2tvdXQudG9rZW5pemUpIHtcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVWZW5tb0NoZWNrb3V0LnRva2VuaXplKFxuICAgICAgICAgICAgICAgICAgICBhc3luYyAoXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogQnJhaW50cmVlRXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVubW9CdXR0b24ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVBvc3RGb3JtKHBheWxvYWQsIGJ1eUJvd0NhcnQ/LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY29sb3IgPT09IFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24uQkxVRSkge1xuICAgICAgICAgICAgdmVubW9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICB2ZW5tb0J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSB2ZW5tb0J1dHRvblN0eWxlSG92ZXIuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZlbm1vQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmVubW9CdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gZ2V0VmVubW9CdXR0b25TdHlsZShcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uU3R5bGVzIHx8IHt9LFxuICAgICAgICAgICAgICAgICkuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZVBvc3RGb3JtKFxuICAgICAgICBwYXlsb2FkOiBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgICAgIGJ1eU5vd0NhcnRJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXREYXRhQ29sbGVjdG9yT3JUaHJvdygpO1xuICAgICAgICBjb25zdCB7IG5vbmNlLCBkZXRhaWxzIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgcHJvdmlkZXI6ICdicmFpbnRyZWV2ZW5tbycsXG4gICAgICAgICAgICBwYXltZW50X3R5cGU6ICdwYXlwYWwnLFxuICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgYmlsbGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKGRldGFpbHMpKSxcbiAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KG1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKGRldGFpbHMpKSxcbiAgICAgICAgICAgIC4uLihidXlOb3dDYXJ0SWQgJiYgeyBjYXJ0X2lkOiBidXlOb3dDYXJ0SWQgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFVuc3VwcG9ydGVkQnJvd3NlckVycm9yIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Vuc3VwcG9ydGVkQnJvd3NlckVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3Ige1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIFVuc3VwcG9ydGVkQnJvd3NlckVycm9yO1xufVxuIiwiaW1wb3J0IHsgY3JlYXRlRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVWZW5tb0J1dHRvblN0cmF0ZWd5IGZyb20gJy4vYnJhaW50cmVlLXZlbm1vLWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG4gICAgY29uc3Qgc2NyaXB0TG9hZGVyID0gZ2V0U2NyaXB0TG9hZGVyKCk7XG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlU2NyaXB0TG9hZGVyID0gbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihcbiAgICAgICAgc2NyaXB0TG9hZGVyLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhicmFpbnRyZWVTY3JpcHRMb2FkZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVWZW5tb0J1dHRvblN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVGb3JtUG9zdGVyKCksXG4gICAgICAgIGJyYWludHJlZVNkayxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3ksIFt7IGlkOiAnYnJhaW50cmVldmVubW8nIH1dKTtcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaXNFeHBlcmltZW50RW5hYmxlZCIsImZlYXR1cmVzIiwiZXhwZXJpbWVudE5hbWUiLCJmYWxsYmFja1ZhbHVlIiwiZCIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT04iLCJCUkFJTlRSRUVfU0RLX0RFRkFVTFRfVkVSU0lPTiIsIkJSQUlOVFJFRV9TREtfU1RBQkxFX1ZFUlNJT04iLCJCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwicGF5bWVudEludGVncmF0aW9uU2VydmljZSIsImJyYWludHJlZVdpbmRvdyIsIndpbmRvdyIsImdldFNES1ZlcnNpb24iLCJzdG9yZUNvbmZpZyIsInRoaXMiLCJnZXRTdGF0ZSIsImdldFN0b3JlQ29uZmlnIiwiY2hlY2tvdXRTZXR0aW5ncyIsImdldFByZWxvYWRlZFNES1ZlcnNpb24iLCJicmFpbnRyZWUiLCJwcmVsb2FkZWRWZXJzaW9uIiwiZmluZCIsInZhbHVlcyIsIm1vZHVsZSIsIlZFUlNJT04iLCJTdGFuZGFyZEVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwic3VwZXIiLCJuYW1lIiwidHlwZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsIlVuc3VwcG9ydGVkQnJvd3NlckVycm9yIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IiLCJpbnZhbGlkRmllbGRzIiwiam9pbiIsIlBheW1lbnRJbnZhbGlkRm9ybUVycm9yIiwiZGV0YWlscyIsIk5vdEluaXRpYWxpemVkRXJyb3JUeXBlIiwiTm90SW5pdGlhbGl6ZWRFcnJvciIsInN1YnR5cGUiLCJDdXN0b21lck5vdEluaXRpYWxpemVkIiwiUGF5bWVudE5vdEluaXRpYWxpemVkIiwiU2hpcHBpbmdOb3RJbml0aWFsaXplZCIsIlNwYW1Qcm90ZWN0aW9uTm90SW5pdGlhbGl6ZWQiLCJnZXRFcnJvck1lc3NhZ2UiLCJQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IiLCJDYW5jZWxsYWJsZVByb21pc2UiLCJwcm9taXNlIiwiY2FuY2VsbGFibGUiLCJQcm9taXNlIiwiXyIsInJlamVjdCIsImNhbmNlbCIsInJhY2UiLCJQQVlQQUxfQ09NUE9ORU5UUyIsIlBheXBhbEJ1dHRvblN0eWxlTGF5b3V0T3B0aW9uIiwiUGF5cGFsQnV0dG9uU3R5bGVTaXplT3B0aW9uIiwiUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbiIsIlBheXBhbEJ1dHRvblN0eWxlTGFiZWxPcHRpb24iLCJQYXlwYWxCdXR0b25TdHlsZVNoYXBlT3B0aW9uIiwiTWVzc2FnaW5nUGxhY2VtZW50cyIsIkJyYWludHJlZUVudiIsIkJyYWludHJlZU1vZHVsZU5hbWUiLCJCcmFpbnRyZWVGb3JtRmllbGRUeXBlIiwiaXNCcmFpbnRyZWVFcnJvciIsImVycm9yIiwiQm9vbGVhbiIsIkJyYWludHJlZUludGVncmF0aW9uU2VydmljZSIsImJyYWludHJlZVNjcmlwdExvYWRlciIsImJyYWludHJlZUhvc3RXaW5kb3ciLCJvdmVybGF5IiwiZGF0YUNvbGxlY3RvcnMiLCJpbml0aWFsaXplIiwiY2xpZW50VG9rZW4iLCJ0aHJlZURTZWN1cmVPcHRpb25zIiwiZ2V0QnJhaW50cmVlRmFzdGxhbmUiLCJjYXJkSWQiLCJpc1Rlc3RNb2RlRW5hYmxlZCIsInN0eWxlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJicmFpbnRyZWVGYXN0bGFuZSIsImdldENsaWVudFRva2VuT3JUaHJvdyIsImNsaWVudCIsImdldENsaWVudCIsImRldmljZURhdGEiLCJnZXRTZXNzaW9uSWQiLCJicmFpbnRyZWVGYXN0bGFuZUNyZWF0b3IiLCJsb2FkRmFzdGxhbmUiLCJkZWZhdWx0U3R5bGVzIiwicm9vdCIsImJhY2tncm91bmRDb2xvclByaW1hcnkiLCJjcmVhdGUiLCJhdXRob3JpemF0aW9uIiwiY2xpZW50Q3JlYXRvciIsImxvYWRDbGllbnQiLCJnZXRQYXlwYWwiLCJicmFpbnRyZWVQYXlwYWwiLCJhbGwiLCJsb2FkUGF5cGFsIiwidGhlbiIsInBheXBhbCIsInNob3VsZFNhdmVJbnN0cnVtZW50IiwiY29uZmlnIiwibmV3V2luZG93RmxvdyIsInN1cHBvcnRzUG9wdXBzIiwic2hvdyIsIm9uQ2xpY2siLCJmb2N1c1dpbmRvdyIsInRva2VuaXplIiwiZW5hYmxlU2hpcHBpbmdBZGRyZXNzIiwiZmxvdyIsInVzZXJhY3Rpb24iLCJyZXNwb25zZSIsInJlbW92ZSIsImNhdGNoIiwiZ2V0UGF5cGFsQ2hlY2tvdXQiLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwicGF5cGFsQ2hlY2tvdXQiLCJsb2FkUGF5cGFsQ2hlY2tvdXQiLCJwYXlwYWxDaGVja291dENvbmZpZyIsImJyYWludHJlZVBheXBhbENoZWNrb3V0IiwicGF5cGFsU2RrTG9hZENvbmZpZyIsImN1cnJlbmN5IiwiaXNDcmVkaXRFbmFibGVkIiwiY29tcG9uZW50cyIsInRvU3RyaW5nIiwiaW50ZW50IiwiY29tbWl0IiwibG9hZFBheVBhbFNESyIsImdldERhdGFDb2xsZWN0b3IiLCJvcHRpb25zIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJkYXRhQ29sbGVjdG9yIiwibG9hZERhdGFDb2xsZWN0b3IiLCJkYXRhQ29sbGVjdG9yQ29uZmlnIiwia291bnQiLCJjb2RlIiwidW5kZWZpbmVkIiwidGVhcmRvd24iLCJyZXNvbHZlIiwiZ2V0QnJhaW50cmVlRW52IiwiaXNUZXN0TW9kZSIsIlNhbmRib3giLCJQcm9kdWN0aW9uIiwibWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZSIsImFkZHJlc3MiLCJyZWNpcGllbnROYW1lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJsaW5lMSIsImFkZHJlc3MxIiwibGluZTIiLCJhZGRyZXNzMiIsImNpdHkiLCJzdGF0ZSIsInN0YXRlT3JQcm92aW5jZUNvZGUiLCJwb3N0YWxDb2RlIiwiY291bnRyeUNvZGUiLCJwaG9uZSIsIm1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzIiwiZW1haWwiLCJzaGlwcGluZ0FkZHJlc3MiLCJzcGxpdCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJwaG9uZV9udW1iZXIiLCJhZGRyZXNzX2xpbmVfMSIsImFkZHJlc3NfbGluZV8yIiwiY291bnRyeV9jb2RlIiwicG9zdGFsX2NvZGUiLCJtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzIiwiYmlsbGluZ0FkZHJlc3MiLCJyZW1vdmVFbGVtZW50IiwiZWxlbWVudElkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjYXJ0SWQiLCJyaXNrQ29ycmVsYXRpb25JZCIsInRlYXJkb3duTW9kdWxlIiwiZGVmYXVsdCIsImdldDNEUyIsInRocmVlRFMiLCJsb2FkM0RTIiwidGhyZWVEU2VjdXJlIiwidmVyc2lvbiIsImdldFZlbm1vQ2hlY2tvdXQiLCJ2ZW5tb0NvbmZpZyIsInZlbm1vQ2hlY2tvdXQiLCJsb2FkVmVubW9DaGVja291dCIsInZlbm1vQ2hlY2tvdXRDb25maWciLCJhbGxvd0Rlc2t0b3AiLCJwYXltZW50TWV0aG9kVXNhZ2UiLCJicmFpbnRyZWVWZW5tb0NoZWNrb3V0IiwiaXNCcm93c2VyU3VwcG9ydGVkIiwidmVyaWZ5Q2FyZCIsInBheW1lbnQiLCJhbW91bnQiLCJ0b2tlbml6YXRpb25QYXlsb2FkIiwidG9rZW5pemVDYXJkIiwiY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uIiwicGF5bWVudERhdGEiLCJpbnN0cnVtZW50IiwiY3JlZGl0Q2FyZEluc3RydW1lbnQiLCJjY0V4cGlyeSIsImNjTnVtYmVyIiwiY2NOYW1lIiwiaXNDcmVkaXRDYXJkSW5zdHJ1bWVudExpa2UiLCJlcnJvcnMiLCJnZXRFcnJvcnNSZXF1aXJlZEZpZWxkcyIsImlzRW1wdHkiLCJyZXF1ZXN0RGF0YSIsIm1hcFRvQ3JlZGl0Q2FyZCIsImNyZWRpdENhcmRzIiwicmVxdWVzdCIsIm5vbmNlIiwiYmluIiwicHJlc2VudDNEU0NoYWxsZW5nZSIsImNyZWRpdENhcmQiLCJkYXRhIiwiY2FyZGhvbGRlck5hbWUiLCJudW1iZXIiLCJjdnYiLCJjY0N2diIsImV4cGlyYXRpb25EYXRlIiwibW9udGgiLCJ5ZWFyIiwidmFsaWRhdGUiLCJjb3VudHJ5Q29kZUFscGhhMiIsImxvY2FsaXR5IiwiY291bnRyeU5hbWUiLCJjb3VudHJ5Iiwic3RyZWV0QWRkcmVzcyIsImVuZHBvaW50IiwibWV0aG9kIiwiYWRkRnJhbWUiLCJyZW1vdmVGcmFtZSIsImNoYWxsZW5nZVJlcXVlc3RlZCIsImFkZGl0aW9uYWxJbmZvcm1hdGlvbiIsImNhbmNlbFZlcmlmeUNhcmQiLCJ2ZXJpZmljYXRpb24iLCJyb3VuZGVkQW1vdW50IiwidG9GaXhlZCIsImlmcmFtZSIsIk51bWJlciIsIm9uTG9va3VwQ29tcGxldGUiLCJfZGF0YSIsIm5leHQiLCJjb2xsZWN0RGV2aWNlRGF0YSIsIlBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yIiwiQlJBSU5UUkVFX1NES19TQ1JJUFRTX0lOVEVHUklUWSIsIkNsaWVudCIsIlBheXBhbENoZWNrb3V0IiwiUGF5cGFsIiwiTG9jYWxQYXltZW50IiwiRGF0YUNvbGxlY3RvciIsIlVzQmFua0FjY291bnQiLCJHb29nbGVQYXltZW50IiwiVGhyZWVEU2VjdXJlIiwiVmlzYUNoZWNrb3V0IiwiVmVubW8iLCJIb3N0ZWRGaWVsZHMiLCJGYXN0bGFuZSIsIk1pc3NpbmdEYXRhRXJyb3JUeXBlIiwiQnJhaW50cmVlU2NyaXB0TG9hZGVyIiwic2NyaXB0TG9hZGVyIiwiYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIiLCJsb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdyIsImxvYWRMb2NhbFBheW1lbnQiLCJsb2FkVXNCYW5rQWNjb3VudCIsImxvYWRHb29nbGVQYXltZW50IiwibG9hZFZpc2FDaGVja291dCIsImxvYWRIb3N0ZWRGaWVsZHMiLCJsb2FkVmlzYUNoZWNrb3V0U2RrIiwidGVzdE1vZGUiLCJWIiwiaGFzaCIsImxvYWRTY3JpcHQiLCJhc3luYyIsImF0dHJpYnV0ZXMiLCJpbnRlZ3JpdHkiLCJjcm9zc29yaWdpbiIsImJyYWludHJlZU1vZHVsZU5hbWUiLCJmaWxlTmFtZSIsImdldEJyYWludHJlZU1vZHVsZSIsImJyYWludHJlZVNka1ZlcnNpb24iLCJzY3JpcHRQYXRoIiwiZ2V0SW50ZWdyaXR5VmFsdWVzQnlNb2R1bGVOYW1lIiwibW9kdWxlTmFtZSIsInRvUmVzb2x2YWJsZU1vZHVsZSIsInJlc29sdmVJZHMiLCJjb25zb2xlIiwibG9nIiwiYXNzaWduIiwiTWlzc2luZ0RhdGFFcnJvciIsIk1pc3NpbmdCaWxsaW5nQWRkcmVzcyIsIk1pc3NpbmdDYXJ0IiwiTWlzc2luZ0NvbnNpZ25tZW50cyIsIk1pc3NpbmdDaGVja291dCIsIk1pc3NpbmdDdXN0b21lciIsIk1pc3NpbmdDaGVja291dENvbmZpZyIsIk1pc3NpbmdPcmRlckNvbmZpZyIsIk1pc3NpbmdPcmRlciIsIk1pc3NpbmdPcmRlcklkIiwiTWlzc2luZ1BheW1lbnQiLCJNaXNzaW5nUGF5bWVudFRva2VuIiwiTWlzc2luZ1BheW1lbnRNZXRob2QiLCJNaXNzaW5nU2hpcHBpbmdBZGRyZXNzIiwiQnJhaW50cmVlUGF5cGFsQ3VzdG9tZXJTdHJhdGVneSIsImZvcm1Qb3N0ZXIiLCJicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UiLCJicmFpbnRyZWVwYXlwYWwiLCJtZXRob2RJZCIsImNvbnRhaW5lciIsInBheW1lbnRNZXRob2QiLCJnZXRQYXltZW50TWV0aG9kT3JUaHJvdyIsIl9lIiwibG9hZFBheW1lbnRNZXRob2QiLCJpbml0aWFsaXphdGlvbkRhdGEiLCJwYXltZW50QnV0dG9uU3R5bGVzIiwiY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMiLCJwYXlwYWxDaGVja291dE9wdGlvbnMiLCJnZXRDYXJ0T3JUaHJvdyIsInJlbmRlclBheVBhbEJ1dHRvbiIsImhhbmRsZUVycm9yIiwiZGVpbml0aWFsaXplIiwic2lnbkluIiwiY3JlZGVudGlhbHMiLCJzaWduSW5DdXN0b21lciIsInNpZ25PdXQiLCJzaWduT3V0Q3VzdG9tZXIiLCJleGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0IiwiY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjayIsImJ1dHRvblN0eWxlcyIsIm5vb3AiLCJmdW5kaW5nU291cmNlIiwiRlVORElORyIsIlBBWVBBTCIsInBheXBhbEJ1dHRvblJlbmRlciIsIkJ1dHRvbnMiLCJlbnYiLCJzdHlsZSIsImhlaWdodCIsImNyZWF0ZU9yZGVyIiwic2V0dXBQYXltZW50Iiwib25BcHByb3ZlIiwiYXV0aG9yaXplRGF0YSIsInRva2VuaXplUGF5bWVudCIsImlzRWxpZ2libGUiLCJyZW5kZXIiLCJsb2FkRGVmYXVsdENoZWNrb3V0IiwiZ2V0Q2hlY2tvdXRPclRocm93Iiwib3V0c3RhbmRpbmdCYWxhbmNlIiwiY3VzdG9tZXIiLCJnZXRDdXN0b21lciIsImFkZHJlc3NlcyIsInNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIiwiY3JlYXRlUGF5bWVudCIsInNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlIiwib2ZmZXJDcmVkaXQiLCJ0b2tlbml6ZVBheWxvYWQiLCJwb3N0Rm9ybSIsInBheW1lbnRfdHlwZSIsInByb3ZpZGVyIiwiYWN0aW9uIiwiZGV2aWNlX2RhdGEiLCJiaWxsaW5nX2FkZHJlc3MiLCJKU09OIiwic3RyaW5naWZ5Iiwic2hpcHBpbmdfYWRkcmVzcyIsImJ1dHRvbkNvbnRhaW5lcklkIiwib25FcnJvckNhbGxiYWNrIiwiZ2V0U2NyaXB0TG9hZGVyIiwiY3JlYXRlRm9ybVBvc3RlciIsImlkIiwiQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSIsImJyYWludHJlZXBheXBhbGNyZWRpdCIsImhhc1JlbmRlcmVkU21hcnRCdXR0b24iLCJQQVlMQVRFUiIsIkNSRURJVCIsImZvckVhY2giLCJpc0ludmFsaWRTdHlsZU9wdGlvbiIsInN0eWxlT3B0aW9uIiwiZ2V0RmFzdGxhbmVTdHlsZXMiLCJzdHlsZVNldHRpbmdzIiwidWlTdHlsZXMiLCJmYXN0bGFuZVN0eWxlcyIsIm9taXRCeSIsImlucHV0IiwidG9nZ2xlIiwidGV4dEJvZHkiLCJ0ZXh0IiwiYm9keSIsInRleHRDYXB0aW9uIiwiY2FwdGlvbiIsImJyYW5kaW5nIiwia2V5cyIsImxlbmd0aCIsImNsZWFuVXBGYXN0bGFuZVN0eWxlcyIsImZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yIiwiZXJyb3JDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvciIsImZvbnRGYW1pbHkiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHkiLCJmb250U2l6ZUJhc2UiLCJmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRTaXplIiwicGFkZGluZyIsImZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyIsInByaW1hcnlDb2xvciIsImZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yIiwiYm9yZGVyUmFkaXVzIiwiZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyUmFkaXVzIiwiYm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvciIsImZvY3VzQm9yZGVyQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJXaWR0aCIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIiwidGV4dENvbG9yQmFzZSIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UiLCJjb2xvclByaW1hcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JTZWNvbmRhcnkiLCJjb2xvciIsImZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0NvbG9yIiwiZm9udFNpemUiLCJmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NGb250U2l6ZSIsImZhc3RsYW5lVGV4dENhcHRpb25TZXR0aW5nc0NvbG9yIiwiZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzRm9udFNpemUiLCJmYXN0bGFuZUJyYW5kaW5nU2V0dGluZ3MiLCJtZXJnZUZhc3RsYW5lU3R5bGVzIiwiVG90YWxQcmljZVN0YXR1c1R5cGUiLCJCcmFpbnRyZWVPcmRlclN0YXR1cyIsIk5vbkluc3RhbnRMb2NhbFBheW1lbnRNZXRob2RzIiwiQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlIiwiQnJhaW50cmVlRXJyb3JUeXBlIiwiQnJhaW50cmVlRXJyb3JDb2RlIiwiQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyIsIlVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUiLCJCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kiLCJicmFpbnRyZWVGYXN0bGFuZVV0aWxzIiwiaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZCIsImJyYWludHJlZWZhc3RsYW5lIiwiZ2V0VmFsaWRQYXltZW50TWV0aG9kT3JUaHJvdyIsImlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZCIsInBheXBhbEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MiLCJpbml0aWFsaXplQnJhaW50cmVlRmFzdGxhbmVPclRocm93IiwiY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQiLCJnZXRDdXN0b21lck9yVGhyb3ciLCJpc0d1ZXN0Iiwic2hvdWxkUnVuQXV0aGVudGljYXRpb25GbG93IiwicnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyIsInByaW1hcnlNZXRob2RJZCIsInNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQiLCJ2YWxpZFBheW1lbnRNZXRob2RJZCIsIkNvb2tpZVN0b3JhZ2UiLCJjb29raWVLZXkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjb29raWUiLCJ2YWx1ZSIsImZpcnN0SW5kZXgiLCJpbmRleE9mIiwibGFzdEluZGV4IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3Vic3RyaW5nIiwic2V0Iiwic2VjdXJlIiwiY29va2llVGV4dCIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwidG9VVENTdHJpbmciLCJub3ciLCJEYXRlIiwibWludXRlcyIsInNldFRpbWUiLCJnZXRUaW1lIiwiQnJhaW50cmVlRmFzdGxhbmVVdGlscyIsImdldERldmljZVNlc3Npb25JZCIsImNhcnQiLCJnZXRDYXJ0IiwiZ2V0QnJhaW50cmVlRmFzdGxhbmVPclRocm93IiwiZ2V0QnJhaW50cmVlRmFzdGxhbmVDb21wb25lbnRPclRocm93IiwiRmFzdGxhbmVDYXJkQ29tcG9uZW50Iiwic2hvdWxkU2V0U2hpcHBpbmdPcHRpb24iLCJnZXRNZXRob2RJZE9yVGhyb3ciLCJsb29rdXBDdXN0b21lckJ5RW1haWwiLCJ0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93IiwiaWRlbnRpdHkiLCJnZXRCaWxsaW5nQWRkcmVzcyIsImlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkIiwiY3VzdG9tZXJFbWFpbCIsImN1c3RvbWVyQ29udGV4dElkIiwidXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIiLCJhdXRoZW50aWNhdGlvblN0YXRlIiwiVU5SRUNPR05JWkVEIiwiaW5zdHJ1bWVudHMiLCJzYXZlU2Vzc2lvbklkVG9Db29raWVzIiwicHJvZmlsZURhdGEiLCJwaG9uZU51bWJlciIsIkNBTkNFTEVEIiwicmVtb3ZlU2Vzc2lvbklkRnJvbUNvb2tpZXMiLCJzaGlwcGluZ0FkZHJlc3NlcyIsIm1hcFBheVBhbFRvQmNBZGRyZXNzIiwicGF5cGFsQmlsbGluZ0FkZHJlc3MiLCJnZXRQYXlQYWxCaWxsaW5nQWRkcmVzc2VzIiwiYmlsbGluZ0FkZHJlc3NlcyIsImNhcmQiLCJtYXBQYXlQYWxUb0JjSW5zdHJ1bWVudCIsIm1lcmdlU2hpcHBpbmdBbmRCaWxsaW5nQWRkcmVzc2VzIiwibGluZUl0ZW1zIiwicGh5c2ljYWxJdGVtcyIsInVwZGF0ZUJpbGxpbmdBZGRyZXNzIiwiZGlnaXRhbEl0ZW1zIiwiZGlnaXRhbEl0ZW1CaWxsaW5nIiwidXBkYXRlU2hpcHBpbmdBZGRyZXNzIiwic2V0U2hpcHBpbmdPcHRpb24iLCJnZXRTZXNzaW9uSWRGcm9tQ29va2llcyIsInNlc3Npb25JZCIsInNldERhdGUiLCJnZXREYXRlIiwibWFwIiwicGF5bWVudFNvdXJjZSIsImJyYW5kIiwiZXhwaXJ5IiwibGFzdERpZ2l0cyIsImJpbkRldGFpbHMiLCJleHBpcnlZZWFyIiwiZXhwaXJ5TW9udGgiLCJiaWdwYXlUb2tlbiIsImRlZmF1bHRJbnN0cnVtZW50IiwiaWluIiwibGFzdDQiLCJ0cnVzdGVkU2hpcHBpbmdBZGRyZXNzIiwidW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uTW9kZSIsIlBBTiIsInBob25lcyIsImNvdW50cmllcyIsImdldENvdW50cmllcyIsImdldENvdW50cnlOYW1lQnlDb3VudHJ5Q29kZSIsIm1hdGNoZWRDb3VudHJ5IiwiY29tcGFueSIsImV4dGVuZGVkQWRkcmVzcyIsInN0YXRlT3JQcm92aW5jZSIsInJlZ2lvbiIsImN1c3RvbUZpZWxkcyIsImdpdmVuX25hbWUiLCJzdXJuYW1lIiwiaXNFcXVhbCIsIm5vcm1hbGl6ZUFkZHJlc3MiLCJvbWl0IiwiZmlsdGVyZWRCaWxsaW5nQWRkcmVzc2VzIiwiZmlsdGVyIiwic29tZSIsImNvbnNpZ25tZW50cyIsImdldENvbnNpZ25tZW50cyIsImF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucyIsInJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24iLCJvcHRpb24iLCJpc1JlY29tbWVuZGVkIiwic2VsZWN0ZWRPcHRpb24iLCJzZWxlY3RTaGlwcGluZ09wdGlvbiIsIkJyYWludHJlZVNkayIsInNldENsaWVudFRva2VuIiwiZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3ciLCJlbXB0eURhdGFDb2xsZWN0b3IiLCJLb3VudE5vdEVuYWJsZWQiLCJnZXRCcmFpbnRyZWVHb29nbGVQYXltZW50IiwiZ29vZ2xlUGF5bWVudCIsImJyYWludHJlZUdvb2dsZVBheW1lbnQiLCJnZXRCcmFpbnRyZWVUaHJlZURTIiwiZ2V0QnJhaW50cmVlTG9jYWxQYXltZW50IiwibWVyY2hhbnRBY2NvdW50SWQiLCJicmFpbnRyZWVMb2NhbFBheW1lbnQiLCJsb2NhbFBheW1lbnRDcmVhdG9yIiwiZ2V0VXNCYW5rQWNjb3VudCIsInVzQmFua0FjY291bnQiLCJnZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQiLCJ2aXNhQ2hlY2tvdXQiLCJnZXRWaXNhQ2hlY2tvdXRTZGsiLCJ2aXNhQ2hlY2tvdXRTREsiLCJnZXRWZW5tb0NoZWNrb3V0T3JUaHJvdyIsImJyYWludHJlZVZlbm1vIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsIkJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVyU3RyYXRlZ3kiLCJicmFpbnRyZWVTZGsiLCJidXR0b25DbGFzc05hbWUiLCJicmFpbnRyZWV2aXNhY2hlY2tvdXQiLCJ2aXNhQ2hlY2tvdXRPcHRpb25zIiwiY2hlY2tvdXQiLCJnZXRTdG9yZUNvbmZpZ09yVGhyb3ciLCJicmFpbnRyZWVWaXNhQ2hlY2tvdXQiLCJ2aXNhQ2hlY2tvdXRJbnN0YW5jZSIsImluaXRPcHRpb25zIiwiY3JlYXRlSW5pdE9wdGlvbnMiLCJwYXltZW50UmVxdWVzdCIsImN1cnJlbmN5Q29kZSIsInN1YnRvdGFsIiwiU3RyaW5nIiwic2V0dGluZ3MiLCJsb2NhbGUiLCJzdG9yZVByb2ZpbGUiLCJzdG9yZUxhbmd1YWdlIiwic2hpcHBpbmciLCJjb2xsZWN0U2hpcHBpbmciLCJzaWduSW5CdXR0b24iLCJjcmVhdGVTaWduSW5CdXR0b24iLCJpbml0Iiwib24iLCJwYXltZW50U3VjY2Vzc1BheWxvYWQiLCJsb2FkQ2hlY2tvdXQiLCJ2aXNpYmlsaXR5IiwicGF5bG9hZCIsImdldFNoaXBwaW5nQWRkcmVzcyIsImJpbGxpbmciLCJtYXBUb1Zpc2FDaGVja291dEFkZHJlc3MiLCJ1c2VyRGF0YSIsImNhcmRJbmZvcm1hdGlvbiIsInVzZXJFbWFpbCIsImNhcmRfaW5mb3JtYXRpb24iLCJjYXJkVHlwZSIsImxhc3RUd28iLCJnZXRBZGRyZXNzIiwiY29udGFpbmVySWQiLCJidXR0b25DbGFzcyIsInF1ZXJ5U2VsZWN0b3IiLCJpbnNlcnRWaXNhQ2hlY2tvdXRCdXR0b24iLCJ2aXNhQ2hlY2tvdXRCdXR0b24iLCJjcmVhdGVFbGVtZW50IiwiZGlzcGxheSIsImZsZXhEaXJlY3Rpb24iLCJ3aWR0aCIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiaG9zdFdpbmRvdyIsImlzVmF1bHRlZEluc3RydW1lbnQiLCJpbnN0cnVtZW50SWQiLCJPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IiLCJpc0hvc3RlZEluc3RydW1lbnRMaWtlIiwic2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCIsIlBheW1lbnRNZXRob2RGYWlsZWRFcnJvciIsImlzVXNCYW5rQWNjb3VudEluc3RydW1lbnRMaWtlIiwiQnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5IiwiYnJhaW50cmVlYWNoIiwiZ2V0TWFuZGF0ZVRleHQiLCJoYW5kbGVCcmFpbnRyZWVFcnJvciIsImV4ZWN1dGUiLCJvcmRlclJlcXVlc3QiLCJvcmRlciIsImlzU3VibWl0dGluZ1dpdGhWYXVsdGluZ0luc3RydW1lbnQiLCJ0b2tlbml6ZVBheW1lbnRGb3JWYXVsdGVkSW5zdHJ1bWVudCIsInN1Ym1pdFBheW1lbnRQYXlsb2FkIiwicHJlcGFyZVBheW1lbnREYXRhRm9yVmF1bHRlZEluc3RydW1lbnQiLCJwcmVwYXJlUGF5bWVudERhdGEiLCJzdWJtaXRPcmRlciIsInN1Ym1pdFBheW1lbnQiLCJmaW5hbGl6ZSIsImdldFVzQmFua0FjY291bnRPclRocm93IiwibWFuZGF0ZVRleHQiLCJiYW5rRGV0YWlscyIsImdldEJhbmtEZXRhaWxzIiwiaXNWYXVsdGluZ0VuYWJsZWQiLCJyb3V0aW5nTnVtYmVyIiwiYWNjb3VudE51bWJlciIsImRldmljZVNlc3Npb25JZCIsImZvcm1hdHRlZFBheWxvYWQiLCJ0b2tlbml6ZWRfYmFua19hY2NvdW50IiwiaXNzdWVyIiwibWFza2VkX2FjY291bnRfbnVtYmVyIiwic3Vic3RyIiwidG9rZW4iLCJnZXRCaWxsaW5nQWRkcmVzc09yVGhyb3ciLCJvd25lcnNoaXBUeXBlIiwidG9Mb3dlckNhc2UiLCJhY2NvdW50VHlwZSIsImJ1c2luZXNzTmFtZSIsIkJyYWludHJlZU1lc3NhZ2VzIiwicGxhY2VtZW50IiwibWVzc2FnaW5nQ29udGFpbmVyIiwicGF5cGFsQk5QTENvbmZpZ3VyYXRpb24iLCJiYW5uZWRJZCIsIlBBWU1FTlQiLCJiYW5uZXJDb25maWd1cmF0aW9uIiwic3RhdHVzIiwiQ0FSVCIsInJlbW92ZUF0dHJpYnV0ZSIsIk1lc3NhZ2VzIiwiY2FydEFtb3VudCIsImJ1eWVyQ291bnRyeSIsImdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWciLCJtZXNzYWdlc1N0eWxlcyIsImxheW91dCIsImxvZ28iLCJwb3NpdGlvbiIsInJhdGlvIiwic2l6ZSIsIk92ZXJsYXkiLCJjbG9zZUVsZW1lbnQiLCJtYWluRWxlbWVudCIsIl9jcmVhdGVFbGVtZW50cyIsIl9lbGVtZW50IiwiX2Nsb3NlRWxlbWVudCIsIl9tYWluRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJfcmVnaXN0ZXJDbGljayIsInNldFRpbWVvdXQiLCJvcGFjaXR5IiwiX3VucmVnaXN0ZXJDbGljayIsIl9yZW1vdmVBZnRlclRyYW5zaXRpb24iLCJiYWNrZ3JvdW5kIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiaGFzQ2xvc2VCdXR0b24iLCJpbm5lckh0bWwiLCJjbGFzc0xheW91dCIsImNsYXNzQ2xvc2UiLCJjbGFzc092ZXJsYXlUZXh0Iiwib3ZlcmxheVRleHQiLCJhZGRDbGFzc0xheW91dCIsImlubmVyVGV4dCIsImdldE92ZXJsYXlTdHlsZSIsIl9hZGRFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9yZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uQ2xpY2tDbG9zZSIsImhhbmRsZVRyYW5zaXRpb24iLCJldmVudCIsInByb3BlcnR5TmFtZSIsIkRFRkFVTFRfU1RZTEVTIiwiUk9UQVRJT05fQU5JTUFUSU9OIiwiTG9hZGluZ0luZGljYXRvciIsImNvbnRhaW5lclN0eWxlcyIsImRlZmluZUFuaW1hdGlvbiIsImJ1aWxkQ29udGFpbmVyIiwiaW5kaWNhdG9yIiwiYnVpbGRJbmRpY2F0b3IiLCJwYXJlbnRJZCIsInBhcmVudCIsImhpZGUiLCJoYW5kbGVUcmFuc2l0aW9uRW5kIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwidG9wIiwidHJhbnNpdGlvbiIsInNldFN0eWxlQXR0cmlidXRlIiwiYm9yZGVyIiwibWFyZ2luIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtU3R5bGUiLCJhbmltYXRpb24iLCJhdHRycyIsImsiLCJzZXRQcm9wZXJ0eSIsImhlYWQiLCJzaGVldCIsIkNTU1N0eWxlU2hlZXQiLCJpbnNlcnRSdWxlIiwiTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIiwiQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5IiwiYnJhaW50cmVlTWVzc2FnZXMiLCJsb2FkaW5nSW5kaWNhdG9yIiwiYnJhaW50cmVlT3B0aW9ucyIsImJhbm5lckNvbnRhaW5lcklkIiwibG9hZFBheXBhbENoZWNrb3V0SW5zdGFuY2UiLCJ1c2VTdG9yZUNyZWRpdCIsImlzUHJvdmlkZXJFcnJvciIsImNsb3NlIiwiX3Jlc29sdmUiLCJicmFpbnRyZWVUb2tlbml6ZVBheWxvYWQiLCJncmFuZFRvdGFsIiwiZ2V0T3V0c3RhbmRpbmdCYWxhbmNlIiwiZ2V0UGF5bWVudE1ldGhvZCIsInZhdWx0UGF5bWVudEluc3RydW1lbnQiLCJ2YXVsdF9wYXltZW50X2luc3RydW1lbnQiLCJzZXRfYXNfZGVmYXVsdF9zdG9yZWRfaW5zdHJ1bWVudCIsImRldmljZV9pbmZvIiwicGF5cGFsX2FjY291bnQiLCJwYXltZW50TWV0aG9kSWQiLCJzaG91bGRTaG93UGF5UGFsQ3JlZGl0QmFubmVyIiwicmVuZGVyUGF5UGFsTWVzc2FnZXMiLCJvblBheW1lbnRFcnJvciIsInN1Ym1pdEZvcm0iLCJvblJlbmRlckJ1dHRvbiIsImxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIiLCJ0b2dnbGVMb2FkaW5nSW5kaWNhdG9yIiwidG9rZW5pemVQYXltZW50T3JUaHJvdyIsIm9uQ2FuY2VsIiwiaXNCcmFpbnRyZWVQYXlwYWxQcm92aWRlckVycm9yIiwiZSIsInByb3ZpZGVyX2Vycm9yIiwiaXNMb2FkaW5nIiwiQ29udGVudFR5cGUiLCJTREtfVkVSU0lPTl9IRUFERVJTIiwiQnJhaW50cmVlUmVxdWVzdFNlbmRlciIsInJlcXVlc3RTZW5kZXIiLCJnZXRPcmRlclN0YXR1cyIsInVybCIsImhlYWRlcnMiLCJKc29uIiwiREVGQVVMVF9SRVNQT05TRSIsIlJlcXVlc3RFcnJvciIsIlBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3kiLCJicmFpbnRyZWVSZXF1ZXN0U2VuZGVyIiwicG9sbGluZ0ludGVydmFsIiwibWF4UG9sbGluZ0ludGVydmFsVGltZSIsImlzTFBNc1VwZGF0ZUV4cGVyaW1lbnRFbmFibGVkIiwicG9sbGluZ1RpbWVyIiwic3RvcFBvbGxpbmciLCJpc1BvbGxpbmdFbmFibGVkIiwiZ2F0ZXdheUlkIiwiYnJhaW50cmVlbG9jYWxtZXRob2RzIiwibWVyY2hhbnRJZCIsImlzTm9uSW5zdGFudFBheW1lbnRNZXRob2QiLCJleGVjdXRlV2l0aE5vdEluc3RhbnRMUE0iLCJleGVjdXRlV2l0aEluc3RhbnRMUE0iLCJiYXNpY1BheW1lbnREYXRhIiwiZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEiLCJpc0JyYWludHJlZVJlZGlyZWN0RXJyb3IiLCJyZWRpcmVjdFVybCIsImFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkIiwicmVkaXJlY3RfdXJsIiwibG9jYXRpb24iLCJyZXBsYWNlIiwic3RhcnRQYXltZW50IiwiZ2V0SW5zdGFudExQTUNvbmZpZyIsImdldEluc3RhbnRMUE1DYWxsYmFjayIsImlzU2hpcHBpbmdSZXF1aXJlZCIsImNoZWNrb3V0VXJsIiwibGlua3MiLCJjaGVja291dExpbmsiLCJwYXltZW50VHlwZSIsImZhbGxiYWNrIiwiYnV0dG9uVGV4dCIsInNoaXBwaW5nQWRkcmVzc1JlcXVpcmVkIiwiZ2l2ZW5OYW1lIiwib25QYXltZW50U3RhcnQiLCJzdGFydCIsIm9yZGVySWQiLCJwYXltZW50SWQiLCJvcmRlcl9pZCIsImlzQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlIiwib3JkZXJfaWRfc2F2ZWRfc3VjY2Vzc2Z1bGx5IiwiaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20iLCJzdGFydFBheW1lbnRFcnJvciIsInBheWxvYWREYXRhIiwicmVzZXRQb2xsaW5nTWVjaGFuaXNtIiwidG9VcHBlckNhc2UiLCJyZXNvbHZlUHJvbWlzZSIsInJlamVjdFByb21pc2UiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwib3JkZXJTdGF0dXMiLCJwYXJhbXMiLCJ1c2VNZXRhZGF0YSIsImlzT3JkZXJQZW5kaW5nIiwiUGVuZGluZyIsImlzT3JkZXJBcHByb3ZlZCIsIkNvbXBsZXRlZCIsImlzUG9sbGluZ0Vycm9yIiwiRmFpbGVkIiwiZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSIsInJlaW5pdGlhbGl6ZVN0cmF0ZWd5IiwiY3JlYXRlUmVxdWVzdFNlbmRlciIsImdhdGV3YXkiLCJpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lciIsIkJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5Iiwib25Jbml0Iiwib25DaGFuZ2UiLCJpc1RocmVlRFNFeHBlcmltZW50RW5hYmxlZCIsImlzM0RTRW5hYmxlZCIsImlzM2RzRW5hYmxlZCIsImluaXRpYWxpemVDYXJkQ29tcG9uZW50IiwicmVuZGVyQnJhaW50cmVlQ2FyZENvbXBvbmVudCIsImhhbmRsZUJyYWludHJlZVN0b3JlZEluc3RydW1lbnRDaGFuZ2UiLCJwYXltZW50UGF5bG9hZCIsInByZXBhcmVQYXltZW50UGF5bG9hZCIsImJyYWludHJlZUNhcmRDb21wb25lbnQiLCJmdWxsTmFtZSIsImNhcmRDb21wb25lbnRPcHRpb25zIiwiZmllbGRzIiwicHJlZmlsbCIsImVuYWJsZWQiLCJwYXlwYWxQYXltZW50Q29tcG9uZW50IiwiZ2V0QnJhaW50cmVlQ2FyZENvbXBvbmVudE9yVGhyb3ciLCJwYXlwYWxJbnN0cnVtZW50IiwiZ2V0UGF5UGFsSW5zdHJ1bWVudHMiLCJ0aHJlZURTVG9rZW4iLCJwYXlwYWxfZmFzdGxhbmVfdG9rZW4iLCJnZXRQYXltZW50VG9rZW4iLCJwYXltZW50VG9rZW4iLCJtYXBUb1BheVBhbEFkZHJlc3MiLCJiaW5HdWVzdCIsImdldE9yZGVyT3JUaHJvdyIsIm9yZGVyQW1vdW50IiwidmVyaWZ5RXJyb3IiLCJwYXltZW50UHJvdmlkZXJDdXN0b21lciIsImdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIiLCJwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCIsImdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyT3JUaHJvdyIsInBheXBhbEF4b1NkayIsInNlbGVjdGlvbkNoYW5nZWQiLCJzZWxlY3RlZENhcmQiLCJwcm9maWxlIiwic2hvd0NhcmRTZWxlY3RvciIsImJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIiLCJzZWxlY3RlZEluc3RydW1lbnRzIiwiQnJhaW50cmVlVmlzYUNoZWNrb3V0UGF5bWVudFN0cmF0ZWd5Iiwib25QYXltZW50U2VsZWN0IiwidmlzYUNoZWNrb3V0U2RrIiwiQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3kiLCJ2ZW5tb09wdGlvbnMiLCJicmFpbnRyZWV2ZW5tbyIsImluaXRpYWxpemVCcmFpbnRyZWVWZW5tbyIsImlzQnJhaW50cmVlVmVubW9XZWJGYWxsYmFja1N1cHBvcnQiLCJtb2JpbGVXZWJGYWxsQmFjayIsInRva2VuaXplUmVzdWx0IiwiYnJhaW50cmVlVmVubW9Ub2tlbml6ZSIsIkJyYWludHJlZUNyZWRpdENhcmRQYXltZW50U3RyYXRlZ3kiLCJicmFpbnRyZWVIb3N0ZWRGb3JtIiwiaXNIb3N0ZWRQYXltZW50Rm9ybUVuYWJsZWQiLCJmb3JtIiwidW5zdXBwb3J0ZWRDYXJkQnJhbmRzIiwiaXNIb3N0ZWRGb3JtSW5pdGlhbGl6ZWQiLCJpc0luaXRpYWxpemVkIiwic2hvdWxkSW5pdGlhbGl6ZUJyYWludHJlZUZhc3RsYW5lIiwicHJlcGFyZUhvc3RlZFBheW1lbnREYXRhIiwicHJvY2Vzc0FkZGl0aW9uYWxBY3Rpb24iLCJjb21tb25QYXltZW50RGF0YSIsImlzU3VibWl0dGluZ1dpdGhTdG9yZWRDYXJkIiwic2hvdWxkUGVyZm9ybTNEU1ZlcmlmaWNhdGlvbiIsInRva2VuaXplRm9yU3RvcmVkQ2FyZFZlcmlmaWNhdGlvbiIsInZlcmlmeUNhcmRXaXRoSG9zdGVkRm9ybSIsInBheWVyX2F1dGhfcmVxdWVzdCIsInN0b3JlZENyZWRpdENhcmROb25jZSIsInRocmVlX2RzX3Jlc3VsdCIsImlzQnJhaW50cmVlUGF5bWVudFJlcXVlc3QzRFNFcnJvciIsImdldENhcmRJbnN0cnVtZW50T3JUaHJvdyIsImlzSG9zdGVkRm9ybUVuYWJsZWQiLCJicmFpbnRyZWVDdXN0b21lciIsImlzQnJhaW50cmVlRm9ybUZpZWxkc01hcCIsImlzQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yIiwiaW52YWxpZEZpZWxkS2V5cyIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiQnJhaW50cmVlSG9zdGVkRm9ybVR5cGUiLCJCcmFpbnRyZWVIb3N0ZWRGb3JtIiwiaXNJbml0aWFsaXplZEhvc3RlZEZvcm0iLCJoYW5kbGVCbHVyIiwiZm9ybU9wdGlvbnMiLCJvbkJsdXIiLCJmaWVsZFR5cGUiLCJtYXBGaWVsZFR5cGUiLCJlbWl0dGVkQnkiLCJtYXBFcnJvcnMiLCJoYW5kbGVGb2N1cyIsIm9uRm9jdXMiLCJoYW5kbGVDYXJkVHlwZUNoYW5nZSIsImNhcmRzIiwib25DYXJkVHlwZUNoYW5nZSIsImhhbmRsZUlucHV0U3VibWl0UmVxdWVzdCIsIm9uRW50ZXIiLCJoYW5kbGVWYWxpZGl0eUNoYW5nZSIsIm9uVmFsaWRhdGUiLCJpc1ZhbGlkIiwiaXNWYWxpZEZvcm0iLCJtYXBWYWxpZGF0aW9uRXJyb3JzIiwiQ3JlZGl0Q2FyZCIsIlN0b3JlZENhcmRWZXJpZmljYXRpb24iLCJtYXBGaWVsZE9wdGlvbnMiLCJjYXJkRmllbGRzIiwiY3JlYXRlSG9zdGVkRmllbGRzIiwibWFwU3R5bGVPcHRpb25zIiwibWFwQmlsbGluZ0FkZHJlc3MiLCJpc05pbCIsIm1hcFRva2VuaXplRXJyb3IiLCJob3N0ZWRGaWVsZHMiLCJob3N0ZWRGaWVsZHNPcHRpb25zIiwicHJldmVudEN1cnNvckp1bXBzIiwic3VwcG9ydGVkQ2FyZEJyYW5kcyIsImNhcmRCcmFuZCIsImluY2x1ZGVzIiwiY2FyZE51bWJlciIsInBsYWNlaG9sZGVyIiwiaW50ZXJuYWxMYWJlbCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImNhcmRFeHBpcnkiLCJjYXJkQ29kZSIsImNhcmROYW1lIiwiY2FyZE51bWJlclZlcmlmaWNhdGlvbiIsImNhcmRDb2RlVmVyaWZpY2F0aW9uIiwibWFwU3R5bGVzIiwiZm9udFdlaWdodCIsImZvY3VzIiwiQ2FyZE51bWJlclZlcmlmaWNhdGlvbiIsIkNhcmROdW1iZXIiLCJDYXJkRXhwaXJ5IiwiQ2FyZENvZGVWZXJpZmljYXRpb24iLCJDYXJkQ29kZSIsIkNhcmROYW1lIiwiZW50cmllcyIsImlzVmFsaWRQYXJhbSIsImlzUG90ZW50aWFsbHlWYWxpZCIsInJlZHVjZSIsInJlc3VsdCIsImZpZWxkS2V5IiwiY3JlYXRlSW52YWxpZEVycm9yIiwiaXNTdG9yZWRDYXJkIiwiY3JlYXRlUmVxdWlyZWRFcnJvciIsImZvcm1GaWVsZHMiLCJCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvciIsImdldFZhbGlkQnV0dG9uU3R5bGUiLCJmdW5kaW5naWNvbnMiLCJzaGFwZSIsInRhZ2xpbmUiLCJ2YWxpZFN0eWxlcyIsImdldFZhbGlkSGVpZ2h0IiwiY3VycmVudEhlaWdodCIsImlzTmFOIiwiQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3kiLCJidXlOb3dJbml0aWFsaXplT3B0aW9ucyIsInNob3VsZFByb2Nlc3NQYXltZW50Iiwib25BdXRob3JpemVFcnJvciIsIm9uRWxpZ2liaWxpdHlGYWlsdXJlIiwiYnV5Tm93Q2FydCIsImdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSIsImNyZWF0ZUJ1eU5vd0NhcnQiLCJidXlOb3dDYXJ0SWQiLCJjYXJ0X2lkIiwiYnV5Tm93Q2FyZFJlcXVlc3RCb2R5IiwiQnJhaW50cmVlUGF5cGFsQ3JlZGl0QnV0dG9uU3RyYXRlZ3kiLCJpc0Jhbm5lckltcGxlbWVudGF0aW9uRGlzYWJsZWQiLCJtZXNzYWdpbmdDb250YWluZXJJZCIsImJ1dHRvblN0eWxlIiwibGFiZWwiLCJCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSIsInBheW1lbnRTdWNjZXNzIiwidG9WaXNhQ2hlY2tvdXRBZGRyZXNzIiwiYWxpZ25JdGVtcyIsImdldFZlbm1vQnV0dG9uU3R5bGUiLCJjIiwiV0hJVEUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRJbWFnZSIsIkJMVUUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiY3Vyc29yIiwibWluSGVpZ2h0IiwibWluV2lkdGgiLCJCcmFpbnRyZWVWZW5tb0J1dHRvblN0cmF0ZWd5IiwiY2FydEJ1dHRvblN0eWxlcyIsInJlbmRlclZlbm1vQnV0dG9uIiwiaXNVbnN1cHBvcnRlZEJyb3dzZXJFcnJvciIsImhhbmRsZUluaXRpYWxpemF0aW9uVmVubW9FcnJvciIsImNhcnRSZXF1ZXN0Qm9keSIsInJlbW92ZVZlbm1vQ29udGFpbmVyIiwiYnV0dG9uQ29udGFpbmVyIiwidmVubW9CdXR0b24iLCJzZXRBdHRyaWJ1dGUiLCJidXlCb3dDYXJ0IiwiaGFuZGxlUG9zdEZvcm0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/braintree.js\n\n}");

/***/ })

}]);