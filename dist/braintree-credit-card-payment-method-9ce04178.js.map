{"version":3,"file":"braintree-credit-card-payment-method-9ce04178.js","mappings":"oNA2BA,MAsFA,GAAe,QApFV,I,IAAA,qBACDA,EAAoB,sCACpBC,EAAqC,eACrCC,EAAc,iCACdC,EAAgC,uBAChCC,EAAsB,kBACtBC,EAAiB,iBACjBC,EAAmB,EAAAC,MAAI,EACpBC,GAAI,cARN,sLAUD,MAAOC,EAAqBC,IAA0B,IAAAC,YAChDC,GAAM,IAAAC,QAA4C,CACpDC,wBAAwB,IAAAC,eAGtBC,GACF,IAAAC,cACI,CAAOC,EAASC,KAAuB,iDACnC,OAAOd,EAAkB,OAAD,wBACjBa,GAAO,CACVE,UAAW,CACPC,aAAc,CACV,QAAAC,CAASC,EAAOC,EAASC,GACrB,GAAIF,EACA,OAAOjB,EAAiBiB,GAG5Bb,EAAuBc,GACvBZ,EAAIc,QAAQC,+BAAiCF,CACjD,EACA,WAAAG,GACIlB,OAAuBmB,GACvBjB,EAAIc,QAAQC,oCAAiCE,CACjD,GAEJC,KACI9B,UACOA,EAAqBmB,OAG5C,KACA,CAACnB,EAAsBK,EAAmBC,IAG5CyB,GAA4B,IAAAd,cAAY,KACtCL,EAAIc,QAAQZ,uBAAuBY,SAAWjB,GAC9CG,EAAIc,QAAQZ,uBAAuBY,QAAQM,YAAYvB,KAE5D,CAACA,IAEEwB,GAA8B,IAAAhB,cAAY,KAC5CP,OAAuBmB,GAEnBjB,EAAIc,QAAQC,iCACZf,EAAIc,QAAQC,iCACZf,EAAIc,QAAQC,oCAAiCE,KAElD,IAEH,OACI,gCACI,gBAAC,IAAuB,iBAChBrB,EAAI,CACR0B,aAAchC,EACdiC,qBAAsB/B,EACtBgC,gCAAiCnC,EACjCI,kBAAmBW,EACnBV,iBAAkBA,EAClB+B,2BAA4BlC,KAGhC,gBAAC,IAAK,CACFmC,wBAAwB,qBACxBC,iBAAkB,gBAAC,IAAgB,CAACC,GAAG,wBACvCC,SAAUhC,EACViC,YAAaX,EACbY,eAAgBV,GAEhB,uBAAKrB,IAAKA,EAAIc,QAAQZ,6B,2CC3G/B,MAAM8B,EAAwB,eACxBC,EAAqC,uB","sources":["webpack://checkout/./packages/core/src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./packages/payment-integration-api/src/CheckoutRootWrapperIds.ts"],"sourcesContent":["import { noop } from 'lodash';\nimport React, {\n    createRef,\n    type FunctionComponent,\n    type RefObject,\n    useCallback,\n    useRef,\n    useState,\n} from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { Modal } from '../../ui/modal';\nimport {\n    withHostedCreditCardFieldset,\n    type WithInjectedHostedCreditCardFieldsetProps,\n} from '../hostedCreditCard';\n\nimport CreditCardPaymentMethod, { type CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<\n    BraintreeCreditCardPaymentMethodProps & WithInjectedHostedCreditCardFieldsetProps\n> = ({\n    getHostedFormOptions,\n    getHostedStoredCardValidationFieldset,\n    hostedFieldset,\n    hostedStoredCardValidationSchema,\n    hostedValidationSchema,\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment: BraintreeCreditCardPaymentMethodProps['initializePayment'] =\n        useCallback(\n            async (options, selectedInstrument) => {\n                return initializePayment({\n                    ...options,\n                    braintree: {\n                        threeDSecure: {\n                            addFrame(error, content, cancel) {\n                                if (error) {\n                                    return onUnhandledError(error);\n                                }\n\n                                setThreeDSecureContent(content);\n                                ref.current.cancelThreeDSecureVerification = cancel;\n                            },\n                            removeFrame() {\n                                setThreeDSecureContent(undefined);\n                                ref.current.cancelThreeDSecureVerification = undefined;\n                            },\n                        },\n                        form:\n                            getHostedFormOptions &&\n                            (await getHostedFormOptions(selectedInstrument)),\n                    },\n                });\n            },\n            [getHostedFormOptions, initializePayment, onUnhandledError],\n        );\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return (\n        <>\n            <CreditCardPaymentMethod\n                {...rest}\n                cardFieldset={hostedFieldset}\n                cardValidationSchema={hostedValidationSchema}\n                getStoredCardValidationFieldset={getHostedStoredCardValidationFieldset}\n                initializePayment={initializeBraintreePayment}\n                onUnhandledError={onUnhandledError}\n                storedCardValidationSchema={hostedStoredCardValidationSchema}\n            />\n\n            <Modal\n                additionalBodyClassName=\"modal-body--center\"\n                closeButtonLabel={<TranslatedString id=\"common.close_action\" />}\n                isOpen={!!threeDSecureContent}\n                onAfterOpen={appendThreeDSecureContent}\n                onRequestClose={cancelThreeDSecureModalFlow}\n            >\n                <div ref={ref.current.threeDSecureContentRef} />\n            </Modal>\n        </>\n    );\n};\n\nexport default withHostedCreditCardFieldset(BraintreeCreditCardPaymentMethod);\n","export const CHECKOUT_ROOT_NODE_ID = 'checkout-app';\nexport const MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID = 'micro-app-ng-checkout';\n"],"names":["getHostedFormOptions","getHostedStoredCardValidationFieldset","hostedFieldset","hostedStoredCardValidationSchema","hostedValidationSchema","initializePayment","onUnhandledError","noop","rest","threeDSecureContent","setThreeDSecureContent","useState","ref","useRef","threeDSecureContentRef","createRef","initializeBraintreePayment","useCallback","options","selectedInstrument","braintree","threeDSecure","addFrame","error","content","cancel","current","cancelThreeDSecureVerification","removeFrame","undefined","form","appendThreeDSecureContent","appendChild","cancelThreeDSecureModalFlow","cardFieldset","cardValidationSchema","getStoredCardValidationFieldset","storedCardValidationSchema","additionalBodyClassName","closeButtonLabel","id","isOpen","onAfterOpen","onRequestClose","CHECKOUT_ROOT_NODE_ID","MICRO_APP_NG_CHECKOUT_ROOT_NODE_ID"],"sourceRoot":""}