"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_td-bank_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/td-bank.js":
/*!***********************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/td-bank.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTDOnlineMartPaymentStrategy: () => (/* binding */ I)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\nvar s,o;class a extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class d extends a{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class c extends d{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(s||(s={}));class u extends a{constructor(e){super(function(e){switch(e){case s.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case s.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case s.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case s.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case s.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case s.MissingCheckoutConfig:case s.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case s.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case s.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case s.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case s.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case s.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case s.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class l extends a{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function h(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function m(){const{navigator:e}=window;let t;return t=e.language?e.language:e.userLanguage,{color_depth:window.screen.colorDepth||24,java_enabled:\"function\"==typeof e.javaEnabled&&e.javaEnabled(),language:t,screen_height:window.screen.height,screen_width:window.screen.width,time_zone_offset:(new Date).getTimezoneOffset().toString()}}!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(o||(o={}));class p extends a{constructor(e){super(function(e){switch(e){case o.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case o.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case o.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case o.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}function g(e){return\"object\"==typeof e&&null!==e&&\"bigpayToken\"in e&&\"defaultInstrument\"in e&&\"provider\"in e&&\"trustedShippingAddress\"in e&&\"method\"in e&&\"type\"in e}var y;!function(e){e.CARD_NUMBER=\"card-number\",e.CVV=\"cvv\",e.EXPIRY=\"expiry\"}(y||(y={}));var b=function(e,t,n,i){return new(n||(n=Promise))(function(r,s){function o(e){try{d(i.next(e))}catch(e){s(e)}}function a(e){try{d(i.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}d((i=i.apply(e,t||[])).next())})};class f{constructor(e,t,n){this.paymentIntegrationService=e,this.tdOnlineMartScriptLoader=t,this.formPoster=n,this.tdInputs=[{id:\"ccNumber\",fieldType:y.CARD_NUMBER},{id:\"ccCvv\",fieldType:y.CVV},{id:\"ccExpiry\",fieldType:y.EXPIRY}]}initialize(e){return b(this,void 0,void 0,function*(){const{methodId:t}=e;if(!t)throw new d('Unable to initialize payment because \"options.methodId\" argument is not provided.');this.tdOnlineMartClient=yield this.loadTDOnlineMartJs(),this.mountHostedFields(t)})}execute(e,t){return b(this,void 0,void 0,function*(){const{payment:n}=e,i=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(i=Object.getOwnPropertySymbols(e);r<i.length;r++)t.indexOf(i[r])<0&&Object.prototype.propertyIsEnumerable.call(e,i[r])&&(n[i[r]]=e[i[r]])}return n}(e,[\"payment\"]);if(!n)throw new c([\"payment\"]);if(!n.methodId)throw new u(s.MissingPaymentMethod);const r=yield this.getPaymentPayloadOrThrow(n);yield this.paymentIntegrationService.submitOrder(i,t);try{yield this.paymentIntegrationService.submitPayment(r)}catch(e){yield this.processWithAdditionalAction(e)}})}finalize(){return Promise.reject(new l)}deinitialize(){return this.tdOnlineMartClient=void 0,this.tdInputs.forEach(({inputElement:e})=>{null==e||e.unmount()}),Promise.resolve()}getPaymentPayloadOrThrow(e){return b(this,void 0,void 0,function*(){const{methodId:t,paymentData:n}=e,{shouldSaveInstrument:i=!1,shouldSetAsDefaultInstrument:r=!1}=h(n)?n:{},s={browser_info:m(),shouldSaveInstrument:i,shouldSetAsDefaultInstrument:r};if(h(n)&&Boolean(n.instrumentId)&&n.instrumentId){const e=!!this.paymentIntegrationService.getState().getCartOrThrow().lineItems.digitalItems.length,i=!this.isTrustedVaultingInstrument(n.instrumentId)||e;return{methodId:t,paymentData:Object.assign(Object.assign(Object.assign({},s),{instrumentId:n.instrumentId}),i?{nonce:n.instrumentId}:{})}}let o;try{o=yield this.getTokenOrThrow()}catch(e){this.throwTokenizationError(e)}return{methodId:t,paymentData:Object.assign(Object.assign({},s),{nonce:o})}})}mountHostedFields(e){const t=this.getHostedFieldsOptions(),n=this.getTDOnlineMartClientOrThrow();this.tdInputs.forEach(i=>{const r=`${e}-${i.id}`;document.getElementById(r)&&(i.inputElement=n.create(i.fieldType,t),i.inputElement.mount(`#${r}`))})}loadTDOnlineMartJs(){return b(this,void 0,void 0,function*(){return this.tdOnlineMartClient?this.tdOnlineMartClient:this.tdOnlineMartScriptLoader.load()})}getTokenOrThrow(){return new Promise((e,t)=>{this.getTDOnlineMartClientOrThrow().createToken(n=>{const{error:i,token:r}=n;if(i||!r)return t(i);e(r)})})}getTDOnlineMartClientOrThrow(){if(!this.tdOnlineMartClient)throw new p(o.PaymentNotInitialized);return this.tdOnlineMartClient}processWithAdditionalAction(e){return b(this,void 0,void 0,function*(){if(!function(e){return(e=>\"object\"==typeof e&&null!==e&&\"body\"in e)(e)&&(t=e.body,(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isObject)(t)&&\"object\"==typeof t&&\"errors\"in t&&\"three_ds_result\"in t&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isArray)(t.errors)&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.some)(t.errors,{code:\"three_d_secure_required\"}));// removed by dead control flow\n var t; }(e))throw e;const{three_ds_result:t}=e.body,{acs_url:s,payer_auth_request:o,merchant_data:a}=t||{};if(!s||!o||!a)throw new c([\"formUrl\",\"threeDSSessionData\",\"creq\"]);return new Promise(e=>{this.formPoster.postForm(s,{threeDSSessionData:o,creq:a},e,\"_top\")})})}throwTokenizationError(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"field\"in e&&\"type\"in e&&\"message\"in e}(e))throw new u(s.MissingPaymentToken);throw new Error(e.message)}getHostedFieldsOptions(){return{style:{error:{color:\"#d14343\"}},classes:{error:\"form-input--error\"}}}isTrustedVaultingInstrument(e){const t=this.paymentIntegrationService.getState().getInstruments(),n=null==t?void 0:t.find(t=>g(t)&&t.bigpayToken===e);return!(g(n)&&!n.trustedShippingAddress)}}class M extends a{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}class v{constructor(e,t=window){this.scriptLoader=e,this.tdOnlineMartWindow=t}load(){return e=this,t=void 0,i=function*(){if(this.tdOnlineMartWindow.customcheckout||(yield this.scriptLoader.loadScript(\"https://libs.na.bambora.com/customcheckout/1/customcheckout.js\")),!this.tdOnlineMartWindow.customcheckout)throw new M;return this.tdOnlineMartWindow.customcheckout()},new((n=void 0)||(n=Promise))(function(r,s){function o(e){try{d(i.next(e))}catch(e){s(e)}}function a(e){try{d(i.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,a)}d((i=i.apply(e,t||[])).next())});// removed by dead control flow\n var e, t, n, i; }}const I=(w=n=>new f(n,new v((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)()),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),O=[{id:\"tdonlinemart\"}],Object.assign(w,{resolveIds:O}));var w,O;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/td-bank.js\n\n}");

/***/ })

}]);