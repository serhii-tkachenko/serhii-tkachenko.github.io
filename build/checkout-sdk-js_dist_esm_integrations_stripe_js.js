"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_stripe_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/stripe.js":
/*!**********************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/stripe.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStripeLinkV2CustomerStrategy: () => (/* binding */ ye),\n/* harmony export */   createStripeOCSPaymentStrategy: () => (/* binding */ re),\n/* harmony export */   createStripeUPECustomerStrategy: () => (/* binding */ se),\n/* harmony export */   createStripeUPEPaymentStrategy: () => (/* binding */ te),\n/* harmony export */   createStripeV3PaymentStrategy: () => (/* binding */ N)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\nvar s,a,d={};function l(e,t){return console.log(\"resolveIds\",t),Object.assign(e,{resolveIds:t})}d.d=(e,t)=>{for(var i in t)d.o(t,i)&&!d.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);class c extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class u extends c{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class h extends u{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}function p(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}function m(e){return Boolean(e.instrumentId)}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(s||(s={}));class y extends c{constructor(e){super(function(e){switch(e){case s.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case s.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case s.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case s.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case s.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case s.MissingCheckoutConfig:case s.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case s.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case s.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case s.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case s.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case s.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case s.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}class g extends c{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(a||(a={}));class v extends c{constructor(e){super(function(e){switch(e){case a.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case a.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case a.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case a.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}const S=e=>\"object\"==typeof e&&null!==e&&\"body\"in e;class f extends c{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}function _(e){return null!==e&&\"object\"==typeof e&&\"cardNumberElementOptions\"in e&&\"cardCvcElementOptions\"in e&&\"cardExpiryElementOptions\"in e&&void 0!==e.cardNumberElementOptions&&void 0!==e.cardCvcElementOptions&&void 0!==e.cardExpiryElementOptions}var I,E,b,P;!function(e){e.Solid=\"solid\",e.Default=\"default\"}(I||(I={})),function(e){e.Alipay=\"alipay\",e.CardCvc=\"cardCvc\",e.CardExpiry=\"cardExpiry\",e.CardNumber=\"cardNumber\",e.CreditCard=\"card\",e.IDEAL=\"idealBank\",e.Sepa=\"iban\"}(E||(E={})),function(e){e.Alipay=\"alipay\",e.CreditCard=\"card\",e.IDEAL=\"ideal\",e.Sepa=\"sepa_debit\"}(b||(b={})),function(e){e.AuthFailure=\"auth_failure\"}(P||(P={}));class C extends c{constructor(e){super(e===P.AuthFailure?\"User did not authenticate\":\"There was an error while processing your payment. Please try again or contact us.\"),this.type=\"stripev3_error\",this.subtype=e}}var w=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};const A=[E.Alipay,E.IDEAL];class O{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t}initialize(e){return w(this,void 0,void 0,function*(){const{stripev3:t,methodId:i,gatewayId:n}=e;if(!n)throw new u('Unable to initialize payment because \"gatewayId\" argument is not provided.');this.initializeOptions=t,this.isDeinitialize=!1;const r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i),{initializationData:{stripePublishableKey:o,stripeConnectedAccount:s,useIndividualCardFields:a,allowRedisplayForStoredInstruments:d}}=r;this._allowRedisplayForStoredInstruments=d;const l=this.getInitializeOptions().form;this.useIndividualCardFields=a,this.stripeV3Client=yield this.loadStripeJs(o,s),this.isCreditCard(i)&&this.shouldShowTSVHostedForm(i,n)&&l?this.hostedForm=yield this.mountCardVerificationFields(l):this.stripeElement=yield this.mountCardFields(i)})}execute(e,i){var n,r;return w(this,void 0,void 0,function*(){const{payment:o}=e,a=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);let d,l;if(!o||!o.paymentData)throw new h([\"payment.paymentData\"]);const{paymentData:c,gatewayId:u,methodId:g}=o,{shouldSaveInstrument:v,shouldSetAsDefaultInstrument:S}=p(c)?c:{shouldSaveInstrument:!1,shouldSetAsDefaultInstrument:!1},f=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.includes)(A,g),{isStoreCreditApplied:_}=this.paymentIntegrationService.getState().getCheckoutOrThrow();_&&(yield this.paymentIntegrationService.applyStoreCredit(_));try{f&&(yield this.paymentIntegrationService.submitOrder(a,i)),u&&(yield this.paymentIntegrationService.loadPaymentMethod(u,{params:{method:g}}));const e=this.paymentIntegrationService.getState();if(m(c)){yield this.paymentIntegrationService.submitOrder(a,i);const{instrumentId:t}=c,n=e.getPaymentMethodOrThrow(o.methodId).clientToken;if(!n)throw new y(s.MissingPaymentMethod);return yield this.executeWithVaulted(o,t,S,n)}const t=e.getPaymentMethodOrThrow(g),h=yield this.confirmStripePayment(t),{clientToken:p,method:_}=t,{id:I}=null!==(r=null!==(n=h.paymentIntent)&&void 0!==n?n:h.paymentMethod)&&void 0!==r?r:{id:\"\"};l=h.error,d={credit_card_token:{token:I},vault_payment_instrument:v,confirm:!1,set_as_default_stored_instrument:S},_===E.CreditCard&&(d.client_token=p),f||(yield this.paymentIntegrationService.submitOrder(a,i));const b=this.buildPaymentPayload(g,d,S);yield this.paymentIntegrationService.submitPayment(b)}catch(e){yield this.processAdditionalAction(this.handleEmptyPaymentIntentError(e,l),g,v,S)}})}finalize(){return Promise.reject(new g)}deinitialize(){return this.hostedForm&&this.hostedForm.detach(),this.isDeinitialize=!0,this.unmountElement(),Promise.resolve()}buildPaymentPayload(e,t,i){return{methodId:e,paymentData:i?{formattedPayload:Object.assign(Object.assign({},t),{set_as_default_stored_instrument:i})}:{formattedPayload:t}}}isCancellationError(e){var t,i;return e&&-1!==(null===(i=null===(t=e.payment_intent.last_payment_error)||void 0===t?void 0:t.message)||void 0===i?void 0:i.indexOf(\"canceled\"))}isAuthError(e){return\"payment_intent_authentication_failure\"===(null==e?void 0:e.code)}isCreditCard(e){return e===b.CreditCard}isHostedFieldAvailable(){var e;const t=this.getInitializeOptions(),r=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.omitBy)(null===(e=t.form)||void 0===e?void 0:e.fields,lodash__WEBPACK_IMPORTED_MODULE_1__.isEmpty);return!(0,lodash__WEBPACK_IMPORTED_MODULE_1__.isEmpty)(r)}isHostedPaymentFormEnabled(e,t){const{getPaymentMethodOrThrow:i}=this.paymentIntegrationService.getState(),n=i(e,t);return Boolean(n.config.isHostedFormEnabled)}confirmStripePayment(e){return w(this,void 0,void 0,function*(){const{clientToken:t,method:i,returnUrl:n}=e;if(!t)throw new y(s.MissingPaymentMethod);switch(i){case E.Alipay:return this.getStripeJs().confirmAlipayPayment(t,{return_url:n},{handleActions:!1});case E.IDEAL:{const e=this.mapStripePaymentData(b.IDEAL,n);return this.getStripeJs().confirmIdealPayment(t,e,{handleActions:!1})}case E.Sepa:{const e=this.mapStripePaymentData(b.Sepa);return this.getStripeJs().confirmSepaDebitPayment(t,e)}default:{const e=this.useIndividualCardFields?this.getStripeCardElements()[0]:this.getStripeElement(),t=this.mapStripeBillingDetails(this.paymentIntegrationService.getState().getBillingAddress(),this.paymentIntegrationService.getState().getCustomer()),i=this._allowRedisplayForStoredInstruments;return this.getStripeJs().createPaymentMethod(Object.assign({type:b.CreditCard,card:e,billing_details:t},i?{allow_redisplay:\"always\"}:{}))}}})}executeWithVaulted(e,t,i,n){var r;return w(this,void 0,void 0,function*(){const o={bigpay_token:{token:t},confirm:!0,client_token:n,set_as_default_stored_instrument:i};if(this.isHostedPaymentFormEnabled(e.methodId,e.gatewayId)&&this.hostedForm){const t=this.hostedForm;return e.paymentData&&m(e.paymentData)&&(e.paymentData=Object.assign(Object.assign({},e.paymentData),{instrumentId:JSON.stringify({token:(null===(r=e.paymentData)||void 0===r?void 0:r.instrumentId)||\"\",client_token:n})})),yield t.validate(),yield t.submit(e),this.paymentIntegrationService.loadCurrentOrder()}const s=this.buildPaymentPayload(e.methodId,o,i);return this.paymentIntegrationService.submitPayment(s)})}getInitializeOptions(){if(!this.initializeOptions)throw new v(a.PaymentNotInitialized);return this.initializeOptions}getStripeCardElements(){if(!this.stripeCardElements)throw new v(a.PaymentNotInitialized);return this.stripeCardElements}getStripeElement(){if(!this.stripeElement)throw new v(a.PaymentNotInitialized);return this.stripeElement}getStripeJs(){if(!this.stripeV3Client)throw new v(a.PaymentNotInitialized);return this.stripeV3Client}handleEmptyPaymentIntentError(e,t){return S(e)&&(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"required_field\"})&&t?new Error(t.message):e}loadStripeJs(e,t){return w(this,void 0,void 0,function*(){return this.stripeV3Client?Promise.resolve(this.stripeV3Client):this.scriptLoader.load(e,t,this.paymentIntegrationService.getState().getLocale())})}mapStripeAddress(e){if(e){const{city:t,countryCode:i,address1:n,address2:r,postalCode:o,stateOrProvinceCode:s}=e;return{city:t,country:i,line1:n,line2:r,postal_code:o,state:s}}return{line1:\"\"}}mapStripeBillingDetails(e,t){const{firstName:i,lastName:n}=e||t||{firstName:\"Guest\",lastName:\"\"},r=`${i} ${n}`.trim(),{options:o}=this.getInitializeOptions();if(this.useIndividualCardFields&&_(o)){const{zipCodeElementOptions:t}=o;if(t){const i=document.getElementById(t.containerId)?document.getElementById(t.containerId).value:\"\";i&&e&&(e=Object.assign(Object.assign({},e),{postalCode:i}))}}const s={address:this.mapStripeAddress(e)};if(t&&t.addresses[0]&&function(e){return\"object\"==typeof e&&null!==e&&\"id\"in e&&void 0!==e.id}(t.addresses[0])){const e=t.addresses[0],{email:i}=t,{phone:n}=e;return n?Object.assign(Object.assign({},s),{email:i,name:r,phone:n}):Object.assign(Object.assign({},s),{email:i,name:r})}if(e){const{email:t,phone:i}=e;return i?Object.assign(Object.assign({},s),{email:t,name:r,phone:i}):Object.assign(Object.assign({},s),{email:t,name:r})}return Object.assign(Object.assign({},s),{name:r})}mapStripePaymentData(e,t){const i=this.paymentIntegrationService.getState().getCustomer(),n=this.paymentIntegrationService.getState().getBillingAddress(),r={payment_method:{[e]:this.getStripeElement(),billing_details:this.mapStripeBillingDetails(n,i)}};return e===b.IDEAL?Object.assign(Object.assign({},r),{return_url:t}):r}mountCardFields(e){const{options:t,containerId:i}=this.getInitializeOptions();let n;return new Promise((r,o)=>{switch(this.stripeElements||(this.stripeElements=this.getStripeJs().elements()),e){case E.CreditCard:if(this.useIndividualCardFields&&_(t)){const{cardNumberElementOptions:e,cardExpiryElementOptions:i,cardCvcElementOptions:r}=t,s=this.stripeElements.getElement(E.CardNumber)||this.stripeElements.create(E.CardNumber,e),a=this.stripeElements.getElement(E.CardExpiry)||this.stripeElements.create(E.CardExpiry,i),d=this.stripeElements.getElement(E.CardCvc)||this.stripeElements.create(E.CardCvc,r);this.stripeCardElements=[s,a,d],n=this.stripeCardElements[0];try{s.mount(`#${e.containerId}`),a.mount(`#${i.containerId}`),d.mount(`#${r.containerId}`)}catch(e){this.isDeinitialize||o(new u(\"Unable to mount Stripe component without valid container ID.\"))}}else{n=this.stripeElements.getElement(e)||this.stripeElements.create(e,t);try{n.mount(`#${i}`)}catch(e){this.isDeinitialize||o(new u(\"Unable to mount Stripe component without valid container ID.\"))}}break;case E.IDEAL:case E.Sepa:n=this.stripeElements.getElement(e)||this.stripeElements.create(e,t);try{n.mount(`#${i}`)}catch(e){this.isDeinitialize||o(new u(\"Unable to mount Stripe component without valid container ID.\"))}case E.Alipay:}r(n)})}mountCardVerificationFields(e){return w(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getStoreConfig();if(!t)throw new y(s.MissingCheckoutConfig);const i=t.paymentSettings.bigpayBaseUrl,n=this.paymentIntegrationService.createHostedForm(i,e);return yield n.attach(),n})}processAdditionalAction(e,t,i=!1,n=!1){return w(this,void 0,void 0,function*(){if(!S(e))throw e;const r=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"additional_action_required\"}),s=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"three_d_secure_required\"});if(r){const t=e.body.additional_action_required;if(t&&\"redirect_to_url\"===t.type)return new Promise(()=>{t.data.redirect_url&&window.location.replace(t.data.redirect_url)})}if(s){const r=e.body.three_ds_result.token,o=!1;let s,a=!1;try{s=yield this.getStripeJs().confirmCardPayment(r)}catch(e){a=!0}if(null==s?void 0:s.error){if(this.isCancellationError(s.error))throw new f;if(this.isAuthError(s.error))throw new C(P.AuthFailure);throw new Error(s.error.message)}const d={credit_card_token:{token:this.getPaymentToken(null==s?void 0:s.paymentIntent,r,a)},vault_payment_instrument:i,confirm:o},l=this.buildPaymentPayload(t,d,n);try{return yield this.paymentIntegrationService.submitPayment(l)}catch(e){throw this.handleEmptyPaymentIntentError(e,null==s?void 0:s.error)}}throw e})}getPaymentToken(e,t,i){return!e||i?t:e.id}shouldShowTSVHostedForm(e,t){return this.isHostedFieldAvailable()&&this.isHostedPaymentFormEnabled(e,t)}unmountElement(){this.stripeElement&&(this.stripeElement.unmount(),this.stripeElement=void 0)}}class M extends c{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}class T{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}load(e,t,i){return this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\").then(()=>{if(!this.stripeWindow.Stripe)throw new M;return this.stripeWindow.Stripe(e,{stripeAccount:t,locale:i,betas:[\"payment_intent_beta_3\",\"alipay_pm_beta_1\"],apiVersion:\"2020-03-02;alipay_beta=v1\"})})}}const N=l(t=>new O(t,new T((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)())),[{gateway:\"stripev3\"}]);var k,D,z,R,U,L,x,j,B=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class F{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}getStripeClient(e,t,i){return B(this,void 0,void 0,function*(){if(this.stripeWindow.bcStripeClient)return this.stripeWindow.bcStripeClient;const n=yield this.load(),{stripePublishableKey:r,stripeConnectedAccount:o}=e,s=n(r,Object.assign(Object.assign(Object.assign({},o?{stripeAccount:o}:{}),t?{betas:t}:{}),i?{apiVersion:i}:{}));return Object.assign(this.stripeWindow,{bcStripeClient:s}),s})}getElements(e,t){return B(this,void 0,void 0,function*(){let i=this.stripeWindow.bcStripeElements;return i?yield this.updateStripeElements(t):(i=e.elements(t),Object.assign(this.stripeWindow,{bcStripeElements:i})),i})}updateStripeElements(e){return B(this,void 0,void 0,function*(){const t=this.stripeWindow.bcStripeElements;t&&(t.update(e),yield t.fetchUpdates())})}load(){return B(this,void 0,void 0,function*(){if(!this.stripeWindow.Stripe&&(yield this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\"),!this.stripeWindow.Stripe))throw new M;return this.stripeWindow.Stripe})}}class V extends c{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}!function(e){e.SHIPPING=\"shipping\",e.BILLING=\"billing\"}(k||(k={})),function(e){e.SPLIT=\"split\",e.FULL=\"full\",e.ORGANIZATION=\"organization\"}(D||(D={})),function(e){e.CreditCard=\"card\",e.Link=\"link\",e.EPS=\"eps\",e.GRABPAY=\"grabpay\",e.BANCONTACT=\"bancontact\",e.IDEAL=\"ideal\",e.ALIPAY=\"alipay\",e.KLARNA=\"klarna\",e.OCS=\"optimized_checkout\"}(z||(z={})),function(e){e.NEVER=\"never\",e.AUTO=\"auto\",e.ALWAYS=\"always\",e.PAYMENT=\"payment\",e.IF_REQUIRED=\"if_required\"}(R||(R={})),function(e){e.PAYMENT=\"payment\",e.AUTHENTICATION=\"linkAuthentication\",e.SHIPPING=\"address\",e.EXPRESS_CHECKOUT=\"expressCheckout\"}(U||(U={})),function(e){e.REQUIRES_PAYMENT_METHOD=\"requires_payment_method\",e.REQUIRES_CONFIRMATION=\"requires_confirmation\",e.REQUIRES_ACTION=\"requires_action\",e.PROCESSING=\"processing\",e.SUCCEEDED=\"succeeded\",e.CANCELED=\"canceled\"}(L||(L={})),function(e){e.CLICK=\"click\",e.CHANGE=\"change\",e.READY=\"ready\",e.SHIPPING_ADDRESS_CHANGE=\"shippingaddresschange\",e.SHIPPING_RATE_CHANGE=\"shippingratechange\",e.CONFIRM=\"confirm\",e.CANCEL=\"cancel\",e.LOADER_START=\"loaderstart\"}(x||(x={})),function(e){e.ON_SESSION=\"on_session\",e.OFF_SESSION=\"off_session\"}(j||(j={}));var G=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class H{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t,this.isMounted=!1}deinitialize(){var e;null===(e=this.checkoutEventsUnsubscribe)||void 0===e||e.call(this),this.isMounted=!1}initCheckoutEventsSubscription(e,t,i,n){this.checkoutEventsUnsubscribe=this.paymentIntegrationService.subscribe(()=>G(this,void 0,void 0,function*(){var r;const o=null==n?void 0:n.getElement(U.PAYMENT);if(o){try{yield this.updateStripePaymentIntent(e,t)}catch(e){return this.isMounted&&(o.unmount(),this.isMounted=!1),void(e instanceof Error&&(null===(r=i.onError)||void 0===r||r.call(i,e)))}this.isMounted||(yield null==n?void 0:n.fetchUpdates(),this.mountElement(o,i.containerId))}}),e=>{var t;return null===(t=e.getCheckout())||void 0===t?void 0:t.outstandingBalance},e=>{var t;return null===(t=e.getCheckout())||void 0===t?void 0:t.coupons})}mountElement(e,t){document.getElementById(t)&&(e.mount(`#${t}`),this.isMounted=!0)}mapAppearanceVariables(e){return{colorPrimary:e.fieldInnerShadow,colorBackground:e.fieldBackground,colorText:e.labelText,colorDanger:e.fieldErrorText,colorTextSecondary:e.labelText,colorTextPlaceholder:e.fieldPlaceholderText,colorIcon:e.fieldPlaceholderText}}mapInputAppearanceRules(e){return{borderColor:e.fieldBorder,color:e.fieldText,boxShadow:e.fieldInnerShadow}}throwStripeError(e){if(\"object\"==typeof(t=e)&&null!==t&&\"type\"in t&&(this.throwDisplayableStripeError(e),this.isCancellationError(e)))throw new f;var t;throw new V}throwDisplayableStripeError(e){if((0,lodash__WEBPACK_IMPORTED_MODULE_1__.includes)([\"card_error\",\"invalid_request_error\",\"validation_error\"],e.type))throw new Error(e.message)}isCancellationError(e){var t;const i=null===(t=null==e?void 0:e.payment_intent.last_payment_error)||void 0===t?void 0:t.message;return!!i&&-1!==i.indexOf(\"canceled\")}throwPaymentConfirmationProceedMessage(){throw new V(\"We've received your order and are processing your payment. Once the payment is verified, your order will be completed. We will send you an email when it's completed. Please note, this process may take a few minutes depending on the processing times of your chosen method.\")}isPaymentCompleted(e,t){return G(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getPaymentMethodOrThrow(e),{features:r}=i.getStoreConfigOrThrow().checkoutSettings;if(!n.clientToken||!t||!r[\"PI-626.Block_unnecessary_payment_confirmation_for_StripeUPE\"])return!1;const{paymentIntent:o}=yield t.retrievePaymentIntent(n.clientToken);return(null==o?void 0:o.status)===L.SUCCEEDED})}mapStripePaymentData(e,t,i=!1){const n=this.paymentIntegrationService.getState().getBillingAddress(),{firstName:r=\"\",lastName:o=\"\",email:d=\"\"}=n||{},l=this._mapStripeAddress(n);if(!e)throw new v(a.PaymentNotInitialized);if(!(d&&l&&l.city&&l.country&&r&&o))throw new y(s.MissingBillingAddress);return{elements:e,redirect:R.IF_REQUIRED,confirmParams:Object.assign({payment_method_data:Object.assign(Object.assign({},i?{allow_redisplay:\"always\"}:{}),{billing_details:{email:d,address:l,name:`${r} ${o}`}})},t&&{return_url:t})}}isAdditionalActionError(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e,{code:\"additional_action_required\"})}isRedirectAction(e){const{type:t,data:{redirect_url:i}}=e;return\"redirect_to_url\"===t&&!!i}isOnPageAdditionalAction(e){const{type:t,data:{token:i}}=e;return\"additional_action_requires_payment_method\"===t&&!!i}updateStripePaymentIntent(e,t){return G(this,void 0,void 0,function*(){const i=yield this.paymentIntegrationService.loadPaymentMethod(e,{params:{method:t}}),{clientToken:n}=i.getPaymentMethodOrThrow(t);if(!n)throw new y(s.MissingPaymentMethod);this.scriptLoader.updateStripeElements({clientSecret:n})})}_mapStripeAddress(e){if(e){const{city:t,address1:i,address2:n,countryCode:r,postalCode:o,stateOrProvinceCode:s}=e;return Object.assign({city:t,country:r,postal_code:o,line1:i,line2:n},s?{state:s}:{})}throw new y(s.MissingBillingAddress)}}const W={body:{},headers:{},status:0};class Y extends c{constructor(e,{message:t,errors:i}={}){const{body:n,headers:r,status:o}=e||W;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=r,this.status=o,this.errors=i||[]}}function q(e){return\"object\"==typeof e&&null!==e&&\"initializationData\"in e&&void 0!==e.initializationData&&null!==e.initializationData&&\"object\"==typeof e.initializationData&&\"stripePublishableKey\"in e.initializationData&&\"stripeConnectedAccount\"in e.initializationData&&\"shopperLanguage\"in e.initializationData&&void 0!==e.initializationData.stripePublishableKey&&void 0!==e.initializationData.stripeConnectedAccount&&void 0!==e.initializationData.shopperLanguage}const K={ar:[\"ar\"],bg:[\"bg\"],cs:[\"cs\"],da:[\"da\"],de:[\"de\"],el:[\"el\"],en:[\"en\",\"en-GB\"],es:[\"es\",\"es-419\"],et:[\"et\"],fi:[\"fi\"],fil:[\"fil\"],fr:[\"fr\",\"fr-CA\"],he:[\"he\"],hr:[\"hr\"],hu:[\"hu\"],id:[\"id\"],it:[\"it\"],ja:[\"ja\"],ko:[\"ko\"],lt:[\"lt\"],lv:[\"lv\"],ms:[\"ms\"],mt:[\"mt\"],nb:[\"nb\"],nl:[\"nl\"],pl:[\"pl\"],pt:[\"pt\",\"pt-BR\"],ro:[\"ro\"],ru:[\"ru\"],sk:[\"sk\"],sl:[\"sl\"],sv:[\"sv\"],th:[\"th\"],tr:[\"tr\"],vi:[\"vi\"],zh:[\"zh\",\"zh-HK\",\"zh-TW\"]};function $(e){const[t,i]=e.replace(/_/g,\"-\").toLowerCase().split(\"-\"),n=K[t];if(!n)return\"auto\";const r=i?`${t}-${i.toUpperCase()}`:t;return n.indexOf(r)>-1?r:n[0]}const J=[\"payment_element_beta_2\",\"alipay_pm_beta_1\",\"link_default_integration_beta_1\",\"shipping_address_element_beta_1\",\"address_element_beta_1\"],Z=\"2020-03-02;alipay_beta=v1;link_beta=v1\";function Q(e){return\"stripeLinkAuthenticationState\"in e}var X=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class ee{constructor(e,t,i){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i}initialize(e){return X(this,void 0,void 0,function*(){const{stripeupe:t,methodId:i,gatewayId:n}=e;if(!(null==t?void 0:t.containerId))throw new v(a.PaymentNotInitialized);if(!n)throw new u('Unable to initialize payment because \"gatewayId\" argument is not provided.');return this._loadStripeElement(t,n,i).catch(e=>{var i;return null===(i=t.onError)||void 0===i?void 0:i.call(t,e)}),this.stripeIntegrationService.initCheckoutEventsSubscription(n,i,t,this._stripeElements),Promise.resolve()})}execute(e,t){return X(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i||!i.paymentData)throw new h([\"payment.paymentData\"]);if(!this._stripeUPEClient)throw new v(a.PaymentNotInitialized);const{paymentData:r,methodId:o,gatewayId:s}=i,{shouldSaveInstrument:d=!1,shouldSetAsDefaultInstrument:l=!1}=p(r)?r:{},c=this.paymentIntegrationService.getState(),{isStoreCreditApplied:u}=c.getCheckoutOrThrow(),y=c.getPaymentProviderCustomerOrThrow(),g=(Q(y)?y:{}).stripeLinkAuthenticationState;if(u&&(yield this.paymentIntegrationService.applyStoreCredit(u)),s){yield this.stripeIntegrationService.updateStripePaymentIntent(s,o);const{email:e}=c.getCustomerOrThrow();if(void 0!==g&&!e){const e=c.getBillingAddressOrThrow();yield this.paymentIntegrationService.updateBillingAddress(e)}}if(yield this.paymentIntegrationService.submitOrder(n,t),m(r)){const{instrumentId:e}=r;return void(yield this._executeWithVaulted(i.methodId,e,l))}yield this._executeWithStripeConfirmation(i.methodId,!g&&d,l)})}finalize(){return Promise.reject(new g)}deinitialize(){var e,t;return null===(t=null===(e=this._stripeElements)||void 0===e?void 0:e.getElement(U.PAYMENT))||void 0===t||t.unmount(),this.stripeIntegrationService.deinitialize(),this._stripeElements=void 0,this._stripeUPEClient=void 0,Promise.resolve()}_executeWithStripeConfirmation(e,t,i){return X(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),{clientToken:r}=n.getPaymentMethodOrThrow(e),o=this._getPaymentPayload(e,r||\"\",t,i);try{yield this.paymentIntegrationService.submitPayment(o)}catch(n){yield this._processAdditionalActionWithStripeConfirmation(n,e,t,i)}})}_executeWithVaulted(e,t,i){var n;return X(this,void 0,void 0,function*(){const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(e),s=null===(n=r.getCart())||void 0===n?void 0:n.id;try{const n={methodId:e,paymentData:{formattedPayload:{cart_id:s,bigpay_token:{token:t},confirm:!1,client_token:o.clientToken,set_as_default_stored_instrument:i}}};return yield this.paymentIntegrationService.submitPayment(n)}catch(t){return this._processVaultedAdditionalAction(t,e,i)}})}_loadStripeElement(e,t,i){return X(this,void 0,void 0,function*(){const{containerId:n,style:r,render:o,initStripeElementUpdateTrigger:a}=e,d=yield this.paymentIntegrationService.loadPaymentMethod(t,{params:{method:i}}),l=d.getPaymentMethodOrThrow(i),{checkoutSettings:c}=d.getStoreConfigOrThrow();if(!q(l))throw new y(s.MissingPaymentMethod);const{clientToken:u,initializationData:h}=l,{shopperLanguage:p,allowRedisplayForStoredInstruments:m=!1}=h;if(this._allowRedisplayForStoredInstruments=m,!u)throw new y(s.MissingPaymentMethod);let g;if(this._stripeUPEClient=yield this._loadStripeJs(h),this._isStripeElementUpdateEnabled=!!c.features[\"PI-1679.trigger_update_stripe_payment_element\"]&&\"function\"==typeof a,r){const e=r;g={variables:this.stripeIntegrationService.mapAppearanceVariables(r),rules:{\".Input\":this.stripeIntegrationService.mapInputAppearanceRules(e)}}}this._stripeElements=yield this.scriptLoader.getElements(this._stripeUPEClient,{clientSecret:u,locale:$(p),appearance:g});const{getBillingAddress:v,getShippingAddress:S}=d,{postalCode:f}=S()||v()||{},_=this._stripeElements.getElement(U.PAYMENT)||this._stripeElements.create(U.PAYMENT,Object.assign({fields:{billingDetails:{email:R.NEVER,address:{country:R.NEVER,city:R.NEVER,postalCode:f?R.NEVER:R.AUTO}}},wallets:{applePay:R.NEVER,googlePay:R.NEVER}},this._getStripeElementTerms()));this.stripeIntegrationService.mountElement(_,n),_.on(x.READY,()=>{o()}),_.on(x.CHANGE,e=>{(null==e?void 0:e.value)&&\"type\"in e.value&&this._updateStripeLinkStateByElementType(e.value.type)}),this._isStripeElementUpdateEnabled&&(null==a||a(this._updateStripeElement.bind(this)))})}_processAdditionalActionWithStripeConfirmation(e,t,i=!1,n=!1){return X(this,void 0,void 0,function*(){if(!S(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this._stripeUPEClient||!this._stripeElements)throw new v(a.PaymentNotInitialized);const{data:r}=e.body.additional_action_required,{token:o}=r,{paymentIntent:s}=yield this._confirmStripePaymentOrThrow(t,r),d=this._getPaymentPayload(t,(null==s?void 0:s.id)||o,i,n);try{yield this.paymentIntegrationService.submitPayment(d)}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}})}_confirmStripePaymentOrThrow(e,t){var i,n;return X(this,void 0,void 0,function*(){const{token:r,redirect_url:o}=t,s=this.stripeIntegrationService.mapStripePaymentData(this._stripeElements,o,!!this._allowRedisplayForStoredInstruments);let a;try{const t=(yield this.stripeIntegrationService.isPaymentCompleted(e,this._stripeUPEClient))?yield null===(n=this._stripeUPEClient)||void 0===n?void 0:n.retrievePaymentIntent(r||\"\"):yield null===(i=this._stripeUPEClient)||void 0===i?void 0:i.confirmPayment(s);if(a=null==t?void 0:t.error,a||!(null==t?void 0:t.paymentIntent))throw new V;return t}catch(e){this.stripeIntegrationService.throwStripeError(a)}})}_processVaultedAdditionalAction(e,t,i=!1){var n;return X(this,void 0,void 0,function*(){if(!t||!S(e)||!(0,lodash__WEBPACK_IMPORTED_MODULE_1__.some)(e.body.errors,{code:\"three_d_secure_required\"}))throw e;if(!this._stripeUPEClient||!this._stripeElements)throw new v(a.PaymentNotInitialized);const r=e.body.three_ds_result.token;let s,d=!1;try{s=yield this._stripeUPEClient.confirmCardPayment(r)}catch(e){try{s=yield this._stripeUPEClient.retrievePaymentIntent(r)}catch(e){d=!0}}if((null==s?void 0:s.error)&&this.stripeIntegrationService.throwStripeError(s.error),!(null==s?void 0:s.paymentIntent)&&!d)throw new Y;const l=this._getPaymentPayload(t,d?r:null===(n=null==s?void 0:s.paymentIntent)||void 0===n?void 0:n.id,!1,i);return this.paymentIntegrationService.submitPayment(l)})}_loadStripeJs(e){return X(this,void 0,void 0,function*(){return this._stripeUPEClient?this._stripeUPEClient:this.scriptLoader.getStripeClient(e,J,Z)})}_getPaymentPayload(e,t,i=!1,n=!1){var r;return{methodId:e,paymentData:{formattedPayload:{cart_id:(null===(r=this.paymentIntegrationService.getState().getCart())||void 0===r?void 0:r.id)||\"\",credit_card_token:{token:t},confirm:!1,vault_payment_instrument:i,set_as_default_stored_instrument:n}}}}_updateStripeElement({shouldShowTerms:e}){var t;const i=null===(t=this._stripeElements)||void 0===t?void 0:t.getElement(U.PAYMENT);null==i||i.update(Object.assign({},this._getStripeElementTerms(e)))}_getStripeElementTerms(e){let t=R.AUTO;return this._isStripeElementUpdateEnabled&&(t=e?R.AUTO:R.NEVER),{terms:{card:t}}}_updateStripeLinkStateByElementType(e){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow(),i=e===z.Link;!Q(t)&&i&&this.paymentIntegrationService.updatePaymentProviderCustomer({stripeLinkAuthenticationState:i})}}const te=l(t=>{const i=new F((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)());return new ee(t,i,new H(t,i))},[{gateway:\"stripeupe\"},{gateway:\"stripeupe\",id:\"klarna\"}]);var ie=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class ne{constructor(e,t,i){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i}initialize(e){var t;return ie(this,void 0,void 0,function*(){const{stripeocs:i,methodId:n,gatewayId:r}=e;if(!(null==i?void 0:i.containerId))throw new v(a.PaymentNotInitialized);if(!r)throw new u('Unable to initialize payment because \"gatewayId\" argument is not provided.');try{yield this._initializeStripeElement(i,r,n)}catch(e){e instanceof Error&&(null===(t=i.onError)||void 0===t||t.call(i,e))}this.stripeIntegrationService.initCheckoutEventsSubscription(r,n,i,this.stripeElements)})}execute(e,t){return ie(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]),{methodId:r,gatewayId:o}=i||{};if(!this.stripeClient)throw new v(a.PaymentNotInitialized);if(!o||!r)throw new u('Unable to initialize payment because \"gatewayId\" or \"methodId\" argument is not provided.');const s=this.paymentIntegrationService.getState(),{isStoreCreditApplied:d}=s.getCheckoutOrThrow();d&&(yield this.paymentIntegrationService.applyStoreCredit(d)),yield this.stripeIntegrationService.updateStripePaymentIntent(o,r),yield this.paymentIntegrationService.submitOrder(n,t);const{clientToken:l}=s.getPaymentMethodOrThrow(r),c=this._getPaymentPayload(r,l||\"\");try{yield this.paymentIntegrationService.submitPayment(c)}catch(e){yield this._processAdditionalAction(e,r)}})}finalize(){return Promise.reject(new g)}deinitialize(){var e;const t=null===(e=this.stripeElements)||void 0===e?void 0:e.getElement(U.PAYMENT);return null==t||t.unmount(),null==t||t.destroy(),this.stripeIntegrationService.deinitialize(),this.stripeElements=void 0,this.stripeClient=void 0,Promise.resolve()}_initializeStripeElement(e,t,i){return ie(this,void 0,void 0,function*(){let n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i);if((null==n?void 0:n.clientToken)||(n=(yield this.paymentIntegrationService.loadPaymentMethod(t,{params:{method:i}})).getPaymentMethodOrThrow(i)),!q(n))throw new y(s.MissingPaymentMethod);const{clientToken:r,initializationData:o}=n,{shopperLanguage:a,customerSessionToken:d,enableLink:l}=o;if(!r)throw new y(s.MissingPaymentMethod);this.stripeClient=yield this._loadStripeJs(o);const{appearance:c,containerId:u,fonts:h,layout:p,render:m,paymentMethodSelect:g,handleClosePaymentMethod:v,togglePreloader:S}=e;this.stripeElements=yield this.scriptLoader.getElements(this.stripeClient,{clientSecret:r,customerSessionClientSecret:d,locale:$(a),appearance:c,fonts:h});const{getBillingAddress:f,getShippingAddress:_}=this.paymentIntegrationService.getState(),I=f(),{postalCode:E}=_()||I||{},b=this.stripeElements.getElement(U.PAYMENT)||this.stripeElements.create(U.PAYMENT,{fields:{billingDetails:{email:R.NEVER,address:{country:R.NEVER,city:R.NEVER,postalCode:E?R.NEVER:R.AUTO}}},wallets:{applePay:R.NEVER,googlePay:R.NEVER,link:l?R.AUTO:R.NEVER},layout:p,savePaymentMethod:{maxVisiblePaymentMethods:20},defaultValues:{billingDetails:{email:(null==I?void 0:I.email)||\"\"}}});this.stripeIntegrationService.mountElement(b,u),b.on(x.LOADER_START,()=>{null==S||S(!1)}),b.on(x.READY,()=>{m()}),b.on(x.CHANGE,e=>{this._onStripeElementChange(e,t,i,g)}),null==v||v(this._collapseStripeElement.bind(this))})}_loadStripeJs(e){return ie(this,void 0,void 0,function*(){return this.stripeClient?this.stripeClient:this.scriptLoader.getStripeClient(e)})}_collapseStripeElement(){var e;const t=null===(e=this.stripeElements)||void 0===e?void 0:e.getElement(U.PAYMENT);null==t||t.collapse()}_getPaymentPayload(e,t,i){var n;const r=(null===(n=this.paymentIntegrationService.getState().getCart())||void 0===n?void 0:n.id)||\"\",{card:o,us_bank_account:s}=i||{},a=this._shouldSaveInstrument(o)||this._shouldSaveInstrument(s),d=this._getTokenizedOptions(t,i);return{methodId:e,paymentData:{formattedPayload:Object.assign({cart_id:r,confirm:!1,method:this.selectedMethodId,vault_payment_instrument:a},d)}}}_processAdditionalAction(e,t){return ie(this,void 0,void 0,function*(){if(!S(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this.stripeClient||!this.stripeElements)throw new v(a.PaymentNotInitialized);const{data:i}=e.body.additional_action_required,{token:n}=i,{paymentIntent:r}=yield this._confirmStripePaymentOrThrow(t,i),{client_secret:o,payment_method_options:s}=r||{},d=this._getPaymentPayload(t,o||n,s);try{return yield this.paymentIntegrationService.submitPayment(d)}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}})}_confirmStripePaymentOrThrow(e,t){var i,n;return ie(this,void 0,void 0,function*(){const{token:r,redirect_url:o}=t,s=this.stripeIntegrationService.mapStripePaymentData(this.stripeElements,o);let a;try{const t=(yield this.stripeIntegrationService.isPaymentCompleted(e,this.stripeClient))?yield null===(n=this.stripeClient)||void 0===n?void 0:n.retrievePaymentIntent(r||\"\"):yield null===(i=this.stripeClient)||void 0===i?void 0:i.confirmPayment(s);if(a=null==t?void 0:t.error,a||!(null==t?void 0:t.paymentIntent))throw new V;return t}catch(e){return this.stripeIntegrationService.throwStripeError(a)}})}_onStripeElementChange(e,t,i,n){(e=>\"object\"==typeof e&&null!==e&&\"value\"in e&&\"collapsed\"in e)(e)&&!e.collapsed&&(this.selectedMethodId=e.value.type,null==n||n(`${t}-${i}`))}_shouldSaveInstrument(e){const t=null==e?void 0:e.setup_future_usage;return t===j.ON_SESSION||t===j.OFF_SESSION}_getTokenizedOptions(e,t){return this._shouldSaveInstrument(null==t?void 0:t.us_bank_account)?{tokenized_ach:{token:e}}:{credit_card_token:{token:e}}}}const re=l(t=>{const i=new F((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)());return new ne(t,i,new H(t,i))},[{gateway:\"stripeocs\",id:\"optimized_checkout\"}]);class oe{constructor(e,t){this.paymentIntegrationService=e,this.scriptLoader=t}initialize(e){var t,i,n,r,o;return i=this,n=void 0,o=function*(){let i;if(!e.stripeupe)throw new u('Unable to proceed because \"options\" argument is not provided.');const{container:n,gatewayId:r,methodId:o,onEmailChange:a,getStyles:d,isLoading:l}=e.stripeupe;Object.entries(e.stripeupe).forEach(([e,t])=>{if(!t)throw new u(`Unable to proceed because \"${e}\" argument is not provided.`)}),yield this.paymentIntegrationService.loadPaymentMethod(r,{params:{method:o}});const c=this.paymentIntegrationService.getState(),h=c.getPaymentMethodOrThrow(o,r),{clientToken:p}=h;if(!q(h)||!p)throw new y(s.MissingPaymentToken);const{email:m}=c.getCustomerOrThrow(),g=c.getPaymentProviderCustomerOrThrow(),v=(Q(g)?g:{}).stripeLinkAuthenticationState;if(!m){let e;const r=\"function\"==typeof d&&d();e=r?{variables:{colorPrimary:r.fieldInnerShadow,colorBackground:r.fieldBackground,colorText:r.labelText,colorDanger:r.fieldErrorText,colorTextSecondary:r.labelText,colorTextPlaceholder:r.fieldPlaceholderText},rules:{\".Input\":{borderColor:r.fieldBorder,color:r.fieldText,boxShadow:r.fieldInnerShadow}}}:{},i=yield this.scriptLoader.getStripeClient(h.initializationData,J,Z),this._stripeElements=yield this.scriptLoader.getElements(i,{clientSecret:p,appearance:e});const{getBillingAddress:o,getConsignments:c}=this.paymentIntegrationService.getState(),u=c(),m=null===(t=null==u?void 0:u[0])||void 0===t?void 0:t.id,{email:g}=o()||{},S=g?{defaultValues:{mode:k.SHIPPING,email:g}}:{},f=this._stripeElements.getElement(U.AUTHENTICATION)||this._stripeElements.create(U.AUTHENTICATION,S);f.on(x.CHANGE,e=>{if(!(\"authenticated\"in e))throw new y(s.MissingCustomer);this.paymentIntegrationService.updatePaymentProviderCustomer({stripeLinkAuthenticationState:e.authenticated}),e.complete?a(e.authenticated,e.value.email):a(!1,\"\"),l&&l(!1),void 0===v&&e.authenticated&&m&&this.paymentIntegrationService.deleteConsignment(m)}),f.mount(`#${n}`)}},new((r=void 0)||(r=Promise))(function(e,t){function s(e){try{d(o.next(e))}catch(e){t(e)}}function a(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r(function(e){e(i)})).then(s,a)}d((o=o.apply(i,n||[])).next())})}deinitialize(){var e,t;return null===(t=null===(e=this._stripeElements)||void 0===e?void 0:e.getElement(U.AUTHENTICATION))||void 0===t||t.unmount(),Promise.resolve()}signIn(e,t){return this.paymentIntegrationService.signInCustomer(e,t),Promise.resolve()}signOut(e){return this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}}const se=l(t=>new oe(t,new F((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)())),[{id:\"stripeupe\"}]),ae={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},de={position:\"fixed\",\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"},le=\"embedded-checkout-loading-indicator-rotation\";class ce{constructor(e){this.styles=Object.assign(Object.assign({},ae),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${le} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(le))return;const t=document.createElement(\"style\");t.id=le,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${le} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}class ue{constructor(e){this._decimalPlaces=e}toInteger(e){return Math.round(e*Math.pow(10,this._decimalPlaces))}}const he=[\"AC\",\"AD\",\"AE\",\"AF\",\"AG\",\"AI\",\"AL\",\"AM\",\"AO\",\"AQ\",\"AR\",\"AT\",\"AU\",\"AW\",\"AX\",\"AZ\",\"BA\",\"BB\",\"BD\",\"BE\",\"BF\",\"BG\",\"BH\",\"BI\",\"BJ\",\"BL\",\"BM\",\"BN\",\"BO\",\"BQ\",\"BR\",\"BS\",\"BT\",\"BV\",\"BW\",\"BY\",\"BZ\",\"CA\",\"CD\",\"CF\",\"CG\",\"CH\",\"CI\",\"CK\",\"CL\",\"CM\",\"CN\",\"CO\",\"CR\",\"CV\",\"CW\",\"CY\",\"CZ\",\"DE\",\"DJ\",\"DK\",\"DM\",\"DO\",\"DZ\",\"EC\",\"EE\",\"EG\",\"EH\",\"ER\",\"ES\",\"ET\",\"FI\",\"FJ\",\"FK\",\"FO\",\"FR\",\"GA\",\"GB\",\"GD\",\"GE\",\"GF\",\"GG\",\"GH\",\"GI\",\"GL\",\"GM\",\"GN\",\"GP\",\"GQ\",\"GR\",\"GS\",\"GT\",\"GU\",\"GW\",\"GY\",\"HK\",\"HN\",\"HR\",\"HT\",\"HU\",\"ID\",\"IE\",\"IL\",\"IM\",\"IN\",\"IO\",\"IQ\",\"IS\",\"IT\",\"JE\",\"JM\",\"JO\",\"JP\",\"KE\",\"KG\",\"KH\",\"KI\",\"KM\",\"KN\",\"KR\",\"KW\",\"KY\",\"KZ\",\"LA\",\"LB\",\"LC\",\"LI\",\"LK\",\"LR\",\"LS\",\"LT\",\"LU\",\"LV\",\"LY\",\"MA\",\"MC\",\"MD\",\"ME\",\"MF\",\"MG\",\"MK\",\"ML\",\"MM\",\"MN\",\"MO\",\"MQ\",\"MR\",\"MS\",\"MT\",\"MU\",\"MV\",\"MW\",\"MX\",\"MY\",\"MZ\",\"NA\",\"NC\",\"NE\",\"NG\",\"NI\",\"NL\",\"NO\",\"NP\",\"NR\",\"NU\",\"NZ\",\"OM\",\"PA\",\"PE\",\"PF\",\"PG\",\"PH\",\"PK\",\"PL\",\"PM\",\"PN\",\"PR\",\"PS\",\"PT\",\"PY\",\"QA\",\"RE\",\"RO\",\"RS\",\"RU\",\"RW\",\"SA\",\"SB\",\"SC\",\"SD\",\"SE\",\"SG\",\"SH\",\"SI\",\"SJ\",\"SK\",\"SL\",\"SM\",\"SN\",\"SO\",\"SR\",\"SS\",\"ST\",\"SV\",\"SX\",\"SZ\",\"TA\",\"TC\",\"TD\",\"TF\",\"TG\",\"TH\",\"TJ\",\"TK\",\"TL\",\"TM\",\"TN\",\"TO\",\"TR\",\"TT\",\"TV\",\"TW\",\"TZ\",\"UA\",\"UG\",\"US\",\"UY\",\"UZ\",\"VA\",\"VC\",\"VE\",\"VG\",\"VN\",\"VU\",\"WF\",\"WS\",\"XK\",\"YE\",\"YT\",\"ZA\",\"ZM\",\"ZW\",\"ZZ\"];var pe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function a(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(s,a)}d((n=n.apply(e,t||[])).next())})};class me{constructor(e,t,i,n){this.paymentIntegrationService=e,this.scriptLoader=t,this.stripeIntegrationService=i,this.loadingIndicator=n}initialize(e){return pe(this,void 0,void 0,function*(){const{stripeocs:t}=e||{};if(!t)throw new u('Unable to proceed because \"options\" argument is not provided.');const{methodId:i,gatewayId:n,container:r}=t;if(!r||!i||!n)throw new v(a.PaymentNotInitialized);const o=(yield this.paymentIntegrationService.loadPaymentMethod(n,{params:{method:i}})).getPaymentMethodOrThrow(i,n),{loadingContainerId:d,buttonHeight:l,onComplete:c}=t;if(this._loadingIndicatorContainer=d,this._onComplete=c,!q(o))throw new y(s.MissingPaymentMethod);const{initializationData:h}=o,{captureMethod:p}=h;return this._captureMethod=p,this._stripeClient=yield this.scriptLoader.getStripeClient(h),yield this._mountExpressCheckoutElement(i,r,this._stripeClient,l),Promise.resolve()})}signIn(){return Promise.resolve()}signOut(){return Promise.resolve()}executePaymentMethodCheckout(){return Promise.resolve()}deinitialize(){return Promise.resolve()}_mountExpressCheckoutElement(e,t,i,n=40){return pe(this,void 0,void 0,function*(){const r=this._shouldRequireShippingAddress(),o=Object.assign(Object.assign(Object.assign({shippingAddressRequired:r},r?{allowedShippingCountries:yield this._getAvailableCountries()}:{}),r?{shippingRates:[{id:\"_\",amount:0,displayName:\"Pending rates\"}]}:{}),{billingAddressRequired:!0,emailRequired:!0,phoneNumberRequired:!0,paymentMethods:{link:R.AUTO,applePay:R.NEVER,googlePay:R.NEVER,amazonPay:R.NEVER,paypal:R.NEVER,klarna:R.NEVER},buttonHeight:n}),{cartAmount:s}=this.paymentIntegrationService.getState().getCartOrThrow(),a=Object.assign({mode:\"payment\",amount:this._toCents(s),currency:this._getCurrency()},this._captureMethod?{captureMethod:this._captureMethod}:{});this._stripeElements=i.elements(a),this._linkV2Element=this._stripeElements.create(U.EXPRESS_CHECKOUT,o),this._linkV2Element.mount(`#${t}`),this._initializeEvents(this._linkV2Element,e)})}_initializeEvents(e,t){this._shouldRequireShippingAddress()&&(e.on(x.SHIPPING_ADDRESS_CHANGE,e=>pe(this,void 0,void 0,function*(){return this._onShippingAddressChange(e)})),e.on(x.SHIPPING_RATE_CHANGE,e=>pe(this,void 0,void 0,function*(){return this._onShippingRateChange(e)}))),e.on(x.CONFIRM,e=>pe(this,void 0,void 0,function*(){return this._onConfirm(e,t)})),e.on(x.CANCEL,this._onCancel)}_onShippingAddressChange(e){return pe(this,void 0,void 0,function*(){if(\"address\"in e){const t=e.address,i={firstName:\"\",lastName:\"\",phone:\"\",company:\"\",address1:\"\",address2:\"\",city:(null==t?void 0:t.city)||\"\",countryCode:(null==t?void 0:t.country)||\"\",postalCode:(null==t?void 0:t.postal_code)||\"\",stateOrProvince:(null==t?void 0:t.state)||\"\",stateOrProvinceCode:\"\",customFields:[]};yield this.paymentIntegrationService.updateShippingAddress(i);const n=yield this._getAvailableShippingOptions();yield this._updateDisplayedPrice(),e.resolve({shippingRates:n})}})}_onCancel(){throw new f}_onShippingRateChange(e){return pe(this,void 0,void 0,function*(){if(\"shippingRate\"in e){const{shippingRate:t}=e;yield this._handleShippingOptionChange(null==t?void 0:t.id),yield this._updateDisplayedPrice(),e.resolve({})}})}_onConfirm(e,t){return pe(this,void 0,void 0,function*(){if(\"billingDetails\"in e&&\"shippingAddress\"in e&&this._stripeClient&&this._stripeElements){yield this._updateShippingAndBillingAddress(e),yield this.paymentIntegrationService.submitOrder();const i=this._getPaymentPayload(t);try{yield this.paymentIntegrationService.submitPayment(i)}catch(e){yield this._processAdditionalAction(e,t)}}return Promise.resolve()})}_updateShippingAndBillingAddress(e){var t,i,n,r,o,s,a,d;return pe(this,void 0,void 0,function*(){const l=this._shouldRequireShippingAddress(),c=(null===(i=null===(t=e.shippingAddress)||void 0===t?void 0:t.name)||void 0===i?void 0:i.split(\" \")[0])||(null===(r=null===(n=e.billingDetails)||void 0===n?void 0:n.name)||void 0===r?void 0:r.split(\" \")[0])||\"\",u=(null===(s=null===(o=e.shippingAddress)||void 0===o?void 0:o.name)||void 0===s?void 0:s.split(\" \")[1])||(null===(d=null===(a=e.billingDetails)||void 0===a?void 0:a.name)||void 0===d?void 0:d.split(\" \")[1])||\"\";if(l){const t=this._mapShippingAddress(e.shippingAddress,e.billingDetails,c,u);yield this.paymentIntegrationService.updateShippingAddress(t)}const h=this._mapBillingAddress(e.shippingAddress,e.billingDetails,c,u);yield this.paymentIntegrationService.updateBillingAddress(h)})}_mapShippingAddress(e,t,i,n){var r,o,s,a,d,l,c;return{firstName:i,lastName:n,phone:(null==t?void 0:t.phone)||\"\",company:\"\",address1:(null===(r=null==e?void 0:e.address)||void 0===r?void 0:r.line1)||\"\",address2:(null===(o=null==e?void 0:e.address)||void 0===o?void 0:o.line2)||\"\",city:(null===(s=null==e?void 0:e.address)||void 0===s?void 0:s.city)||\"\",countryCode:(null===(a=null==e?void 0:e.address)||void 0===a?void 0:a.country)||\"\",postalCode:(null===(d=null==e?void 0:e.address)||void 0===d?void 0:d.postal_code)||\"\",stateOrProvince:(null===(l=null==e?void 0:e.address)||void 0===l?void 0:l.state)||\"\",stateOrProvinceCode:(null===(c=null==e?void 0:e.address)||void 0===c?void 0:c.state)||\"\",customFields:[]}}_mapBillingAddress(e,t,i,n){var r,o,s,a,d,l;return{email:(null==t?void 0:t.email)||\"\",firstName:i,lastName:n,phone:(null==t?void 0:t.phone)||\"\",company:\"\",address1:(null===(r=null==t?void 0:t.address)||void 0===r?void 0:r.line1)||\"\",address2:\"\",city:(null===(o=null==t?void 0:t.address)||void 0===o?void 0:o.city)||\"\",countryCode:(null===(s=null==t?void 0:t.address)||void 0===s?void 0:s.country)||\"\",postalCode:(null===(a=null==t?void 0:t.address)||void 0===a?void 0:a.postal_code)||\"\",stateOrProvince:(null===(d=null==t?void 0:t.address)||void 0===d?void 0:d.state)||\"\",stateOrProvinceCode:(null===(l=null==e?void 0:e.address)||void 0===l?void 0:l.state)||\"\",customFields:[]}}_processAdditionalAction(e,t){return pe(this,void 0,void 0,function*(){if(!S(e)||!this.stripeIntegrationService.isAdditionalActionError(e.body.errors))throw e;if(!this._stripeClient||!this._stripeElements)throw new v(a.PaymentNotInitialized);const{data:i}=e.body.additional_action_required,{token:n}=i,{paymentIntent:r}=yield this._confirmStripePaymentOrThrow(i,t),o=this._getPaymentPayload(t,(null==r?void 0:r.id)||n);try{this._toggleLoadingIndicator(!0),yield this.paymentIntegrationService.submitPayment(o),yield this._completeCheckoutFlow()}catch(e){this.stripeIntegrationService.throwPaymentConfirmationProceedMessage()}finally{this._toggleLoadingIndicator(!1)}})}_confirmStripePaymentOrThrow(e,t){var i,n,r;return pe(this,void 0,void 0,function*(){const{token:o,redirect_url:s}=e,a=this.stripeIntegrationService.mapStripePaymentData(this._stripeElements,s);let d;try{const e=(yield this.stripeIntegrationService.isPaymentCompleted(t,this._stripeClient))?yield null===(r=this._stripeClient)||void 0===r?void 0:r.retrievePaymentIntent(o||\"\"):yield null===(i=this._stripeClient)||void 0===i?void 0:i.confirmPayment({elements:a.elements,clientSecret:o,redirect:R.IF_REQUIRED,confirmParams:{return_url:null===(n=a.confirmParams)||void 0===n?void 0:n.return_url}});if(d=null==e?void 0:e.error,d||!(null==e?void 0:e.paymentIntent))throw new V;return e}catch(e){return this.stripeIntegrationService.throwStripeError(d)}})}_completeCheckoutFlow(){return pe(this,void 0,void 0,function*(){return\"function\"==typeof this._onComplete?this._onComplete():(window.location.replace(\"/order-confirmation\"),Promise.resolve())})}_getPaymentPayload(e,t){var i;const n=(null===(i=this.paymentIntegrationService.getState().getCart())||void 0===i?void 0:i.id)||\"\";return{methodId:e,paymentData:{formattedPayload:Object.assign(Object.assign({cart_id:n},t?{credit_card_token:{token:t}}:{}),{confirm:!1,payment_method_id:z.Link})}}}_shouldRequireShippingAddress(){const{getCartOrThrow:e}=this.paymentIntegrationService.getState(),{lineItems:t}=e();return!!t.physicalItems.length}_updateDisplayedPrice(){return pe(this,void 0,void 0,function*(){this._stripeElements&&this._stripeElements.update({currency:this._getCurrency(),mode:\"payment\",amount:yield this._getTotalPrice()})})}_getCurrency(){if(!this._currencyCode){const{code:e}=this.paymentIntegrationService.getState().getCartOrThrow().currency;this._currencyCode=e.toLowerCase()}return this._currencyCode}_getTotalPrice(){return pe(this,void 0,void 0,function*(){yield this.paymentIntegrationService.loadCheckout();const{getCheckoutOrThrow:e,getCartOrThrow:t}=this.paymentIntegrationService.getState(),{decimalPlaces:i}=t().currency,n=(0,lodash__WEBPACK_IMPORTED_MODULE_1__.round)(e().outstandingBalance,i).toFixed(i);return this._toCents(+n)})}_getAvailableCountries(){var e;return pe(this,void 0,void 0,function*(){const t=yield this.paymentIntegrationService.loadShippingCountries();return((null===(e=t.getShippingCountries())||void 0===e?void 0:e.map(e=>e.code))||[]).filter(e=>he.includes(e))})}_getAvailableShippingOptions(){var e,t;return pe(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState().getConsignments();if(!(null==i?void 0:i[0]))return;const n=i[0],r=(n.availableShippingOptions||[]).map(this._getStripeShippingOption.bind(this)),o=null===(e=n.selectedShippingOption)||void 0===e?void 0:e.id;return o?r.sort(e=>e.id===o?-1:0):yield this._handleShippingOptionChange(null===(t=r[0])||void 0===t?void 0:t.id),r})}_getStripeShippingOption({id:e,cost:t,description:i}){return{id:e,displayName:i,amount:this._toCents(t)}}_handleShippingOptionChange(e){return pe(this,void 0,void 0,function*(){if(e&&\"shipping_option_unselected\"!==e)return this.paymentIntegrationService.selectShippingOption(e)})}_getAmountTransformer(){if(this._amountTransformer)return this._amountTransformer;const{getCart:e}=this.paymentIntegrationService.getState(),{currency:t}=e()||{};return t?new ue(t.decimalPlaces):void 0}_toCents(e){const t=Math.round(100*e),i=this._getAmountTransformer();return i?i.toInteger(e):t}_toggleLoadingIndicator(e){e&&this._loadingIndicatorContainer?this.loadingIndicator.show(this._loadingIndicatorContainer):this.loadingIndicator.hide()}}const ye=l(t=>{const i=new F((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_0__.getScriptLoader)()),n=new ce({containerStyles:de});return new me(t,i,new H(t,i),n)},[{id:\"stripeocs\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/stripe.js\n\n}");

/***/ })

}]);