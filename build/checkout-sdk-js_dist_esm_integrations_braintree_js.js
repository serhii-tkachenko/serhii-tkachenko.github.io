"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["checkout-sdk-js_dist_esm_integrations_braintree_js"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/braintree.js":
/*!*************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/braintree.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBraintreeAchPaymentStrategy: () => (/* binding */ Je),\n/* harmony export */   createBraintreeCreditCardPaymentStrategy: () => (/* binding */ Mt),\n/* harmony export */   createBraintreeFastlaneCustomerStrategy: () => (/* binding */ me),\n/* harmony export */   createBraintreeFastlanePaymentStrategy: () => (/* binding */ ft),\n/* harmony export */   createBraintreeLocalMethodsPaymentStrategy: () => (/* binding */ mt),\n/* harmony export */   createBraintreePaypalButtonStrategy: () => (/* binding */ Ee),\n/* harmony export */   createBraintreePaypalCreditButtonStrategy: () => (/* binding */ Ne),\n/* harmony export */   createBraintreePaypalCreditCustomerStrategy: () => (/* binding */ Q),\n/* harmony export */   createBraintreePaypalCustomerStrategy: () => (/* binding */ J),\n/* harmony export */   createBraintreePaypalPaymentStrategy: () => (/* binding */ nt),\n/* harmony export */   createBraintreeVenmoButtonStrategy: () => (/* binding */ Ue),\n/* harmony export */   createBraintreeVenmoPaymentStrategy: () => (/* binding */ It),\n/* harmony export */   createBraintreeVisaCheckoutButtonStrategy: () => (/* binding */ _e),\n/* harmony export */   createBraintreeVisaCheckoutCustomerStrategy: () => (/* binding */ we),\n/* harmony export */   createBraintreeVisaCheckoutPaymentStrategy: () => (/* binding */ Ct)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _braintree_browser_detection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/browser-detection */ \"../checkout-sdk-js/node_modules/@braintree/browser-detection/dist/browser-detection.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\nvar h={};function y(e,t,i=!0){var n;return null!==(n=e[t])&&void 0!==n?n:i}h.d=(e,t)=>{for(var i in t)h.o(t,i)&&!h.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},h.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const m=\"3.128.0\",p=\"3.123.2\",g=\"3.106.0\";class v{constructor(e){this.paymentIntegrationService=e,this.braintreeWindow=window}getSDKVersion(){const e=this.paymentIntegrationService.getState().getStoreConfig(),t=(null==e?void 0:e.checkoutSettings.features)||{};return this.getPreloadedSDKVersion()||(y(t,\"PAYPAL-5809.braintree_hosted_fields_fix_version\")?m:y(t,\"PAYPAL-5636.update_braintree_sdk_version\")?p:g)}getPreloadedSDKVersion(){const e=this.braintreeWindow.braintree;if(e){const t=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.find)(Object.values(e),e=>!!e.VERSION);return null==t?void 0:t.VERSION}}}class f extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class b extends f{constructor(e){super(e||\"Unsupported browser error\"),this.name=\"UnsupportedBrowserError\",this.type=\"unsupported_browser\"}}class w extends f{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}class C extends w{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class S extends f{constructor(e,t){super(t||\"Unable to proceed because the payment form contains invalid data.\"),this.details=e,this.name=\"PaymentInvalidFormError\",this.type=\"payment_invalid_form\"}}var P;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(P||(P={}));class I extends f{constructor(e){super(function(e){switch(e){case P.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case P.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case P.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case P.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}class O extends f{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}class k{constructor(e){const t=new Promise((e,t)=>{this.cancel=t});this.promise=Promise.race([e,t])}}const E=[\"buttons\",\"messages\"];var T,A,z,N,M,D,_,B,x;function F(e){return Boolean(\"object\"==typeof e&&null!==e&&(\"type\"in e||\"message\"in e||\"code\"in e))}!function(e){e.HORIZONTAL=\"horizontal\",e.VERTICAL=\"vertical\"}(T||(T={})),function(e){e.SMALL=\"small\",e.MEDIUM=\"medium\",e.LARGE=\"large\",e.RESPONSIVE=\"responsive\"}(A||(A={})),function(e){e.GOLD=\"gold\",e.BLUE=\"blue\",e.SIlVER=\"silver\",e.BLACK=\"black\",e.WHITE=\"white\"}(z||(z={})),function(e){e.CHECKOUT=\"checkout\",e.PAY=\"pay\",e.BUYNOW=\"buynow\",e.PAYPAL=\"paypal\",e.CREDIT=\"credit\"}(N||(N={})),function(e){e.PILL=\"pill\",e.RECT=\"rect\"}(M||(M={})),function(e){e.CART=\"cart\",e.HOME=\"homepage\",e.PAYMENT=\"payment\",e.PRODUCT=\"product\"}(D||(D={})),function(e){e.Sandbox=\"sandbox\",e.Production=\"production\"}(_||(_={})),function(e){e.Client=\"client\",e.DataCollector=\"dataCollector\",e.Fastlane=\"fastlane\",e.GooglePayment=\"googlePayment\",e.HostedFields=\"hostedFields\",e.LocalPayment=\"localPayment\",e.Paypal=\"paypal\",e.PaypalCheckout=\"paypalCheckout\",e.ThreeDSecure=\"threeDSecure\",e.UsBankAccount=\"usBankAccount\",e.Venmo=\"venmo\",e.VisaCheckout=\"visaCheckout\"}(B||(B={})),function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\"}(x||(x={}));var L=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class V{constructor(e,t,i){this.braintreeScriptLoader=e,this.braintreeHostWindow=t,this.overlay=i,this.dataCollectors={}}initialize(e,t){this.clientToken=e,this.threeDSecureOptions=t}getBraintreeFastlane(e,t,i){return L(this,void 0,void 0,function*(){if(t&&(window.localStorage.setItem(\"axoEnv\",\"sandbox\"),window.localStorage.setItem(\"fastlaneEnv\",\"sandbox\")),!this.braintreeHostWindow.braintreeFastlane){const t=this.getClientTokenOrThrow(),n=yield this.getClient(),r=yield this.getSessionId(e),o=yield this.braintreeScriptLoader.loadFastlane(),a={root:{backgroundColorPrimary:\"transparent\"}};this.braintreeHostWindow.braintreeFastlane=yield o.create({authorization:t,client:n,deviceData:r,styles:i||a})}return this.braintreeHostWindow.braintreeFastlane})}getClient(){return L(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=t.create({authorization:e})}return this.client})}getPaypal(){return this.braintreePaypal||(this.braintreePaypal=Promise.all([this.getClient(),this.braintreeScriptLoader.loadPaypal()]).then(([e,t])=>t.create({client:e}))),this.braintreePaypal}paypal(e){var{shouldSaveInstrument:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"shouldSaveInstrument\"]);const n=(0,_braintree_browser_detection__WEBPACK_IMPORTED_MODULE_3__.supportsPopups)();return this.getPaypal().then(e=>{var r;return n&&(null===(r=this.overlay)||void 0===r||r.show({onClick:()=>e.focusWindow()})),e.tokenize(Object.assign({enableShippingAddress:!0,flow:t?\"vault\":\"checkout\",useraction:\"commit\"},i))}).then(e=>{var t;return null===(t=this.overlay)||void 0===t||t.remove(),e}).catch(e=>{var t;throw null===(t=this.overlay)||void 0===t||t.remove(),e})}getPaypalCheckout(e,t,i){return L(this,void 0,void 0,function*(){const n=yield this.getClient(),r=yield this.braintreeScriptLoader.loadPaypalCheckout(),o={client:n};return this.paypalCheckout=yield r.create(o,(n,r)=>{var o;if(n)return i(n);const a=Object.assign(Object.assign({currency:e.currency},e.isCreditEnabled&&{\"enable-funding\":\"paylater\"}),{components:E.toString(),intent:e.intent,commit:null===(o=e.commit)||void 0===o||o});this.braintreeHostWindow.paypal?t(r):r.loadPayPalSDK(a,()=>t(r))}),this.paypalCheckout})}getDataCollector(e){return L(this,void 0,void 0,function*(){const t=(null==e?void 0:e.paypal)?\"paypal\":\"default\";let i=this.dataCollectors[t];if(!i){try{const t=yield this.getClient(),n=yield this.braintreeScriptLoader.loadDataCollector(),r=Object.assign({client:t,kount:!0},e);i=yield n.create(r)}catch(e){if(!F(e)||\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"!==e.code)throw e;i={deviceData:void 0,teardown:()=>Promise.resolve()}}this.dataCollectors[t]=i}return i})}getBraintreeEnv(e=!1){return e?_.Sandbox:_.Production}mapToBraintreeShippingAddressOverride(e){return{recipientName:`${e.firstName} ${e.lastName}`,line1:e.address1,line2:e.address2,city:e.city,state:e.stateOrProvinceCode,postalCode:e.postalCode,countryCode:e.countryCode,phone:e.phone}}mapToLegacyShippingAddress(e){const{email:t,phone:i,shippingAddress:n}=e,r=(null==n?void 0:n.recipientName)||\"\",[o,a]=r.split(\" \");return{email:t,first_name:o||\"\",last_name:a||\"\",phone_number:i,address_line_1:null==n?void 0:n.line1,address_line_2:null==n?void 0:n.line2,city:null==n?void 0:n.city,state:null==n?void 0:n.state,country_code:null==n?void 0:n.countryCode,postal_code:null==n?void 0:n.postalCode}}mapToLegacyBillingAddress(e){const{billingAddress:t,email:i,firstName:n,lastName:r,phone:o,shippingAddress:a}=e,s=t||a;return{email:i,first_name:n,last_name:r,phone_number:o,address_line_1:null==s?void 0:s.line1,address_line_2:null==s?void 0:s.line2,city:null==s?void 0:s.city,state:null==s?void 0:s.state,country_code:null==s?void 0:s.countryCode,postal_code:null==s?void 0:s.postalCode}}removeElement(e){const t=e&&document.getElementById(e);t&&t.remove()}getSessionId(e){return L(this,void 0,void 0,function*(){const{deviceData:t}=yield this.getDataCollector({riskCorrelationId:e});return t})}teardown(){return L(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollectors.default),yield this.teardownModule(this.dataCollectors.paypal),this.dataCollectors={},yield this.teardownModule(this.paypalCheckout),this.paypalCheckout=void 0})}get3DS(){return L(this,void 0,void 0,function*(){return this.threeDS||(this.threeDS=Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]).then(([e,t])=>t.create({client:e,version:2}))),this.threeDS})}getVenmoCheckout(e){return L(this,void 0,void 0,function*(){if(!this.venmoCheckout){const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadVenmoCheckout(),n=Object.assign({client:t,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},e||{});this.venmoCheckout=yield new Promise((e,t)=>{i.create(n,(i,n)=>i?t(i):n.isBrowserSupported()?void e(n):t(new b))})}return this.venmoCheckout})}verifyCard(e,t,i){return L(this,void 0,void 0,function*(){const n=yield this.tokenizeCard(e,t);return this.challenge3DSVerification(n,i)})}tokenizeCard(e,t){return L(this,void 0,void 0,function*(){const{paymentData:i}=e;if(!function(e){if(\"object\"!=typeof e||null===e)return!1;const t=e;return\"object\"==typeof t.ccExpiry&&null!==t.ccExpiry&&\"string\"==typeof t.ccNumber&&\"string\"==typeof t.ccName}(i))throw new C([\"payment.paymentData\"]);const r=this.getErrorsRequiredFields(i);if(!(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(r))throw new S(r);const o=this.mapToCreditCard(i,t),a=yield this.getClient(),{creditCards:s}=yield a.request(o);return{nonce:s[0].nonce,bin:s[0].details.bin}})}challenge3DSVerification(e,t){return L(this,void 0,void 0,function*(){const i=yield this.get3DS();return this.present3DSChallenge(i,t,e)})}teardownModule(e){return e?e.teardown():Promise.resolve()}getClientTokenOrThrow(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);return this.clientToken}getErrorsRequiredFields(e){const{ccNumber:t,ccExpiry:i}=e,n={};return t||(n.ccNumber=[{message:\"Credit card number is required\",type:\"required\"}]),i||(n.ccExpiry=[{message:\"Expiration date is required\",type:\"required\"}]),n}mapToCreditCard(e,t){return{data:{creditCard:{cardholderName:e.ccName,number:e.ccNumber,cvv:e.ccCvv,expirationDate:`${e.ccExpiry.month}/${e.ccExpiry.year}`,options:{validate:!1},billingAddress:t&&{countryCodeAlpha2:t.countryCode,locality:t.city,countryName:t.country,postalCode:t.postalCode,streetAddress:t.address2?`${t.address1} ${t.address2}`:t.address1}}},endpoint:\"payment_methods/credit_cards\",method:\"post\"}}present3DSChallenge(e,t,i){const{nonce:n,bin:r}=i;if(!this.threeDSecureOptions||!n)throw new I(P.PaymentNotInitialized);const{addFrame:o,removeFrame:a,challengeRequested:s=!0,additionalInformation:d}=this.threeDSecureOptions,l=()=>L(this,void 0,void 0,function*(){const t=yield e.cancelVerifyCard();return u.cancel(new O),t}),c=t.toFixed(2),u=new k(e.verifyCard({addFrame:(e,t)=>{o&&o(e,t,l)},amount:Number(c),bin:r,challengeRequested:s,nonce:n,removeFrame:a,onLookupComplete:(e,t)=>{t()},collectDeviceData:!0,additionalInformation:d}));return u.promise}}class j extends f{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}const U={[g]:{[B.Client]:\"sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt\",[B.PaypalCheckout]:\"sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O\",[B.Paypal]:\"sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+\",[B.LocalPayment]:\"sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT\",[B.DataCollector]:\"sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV\",[B.UsBankAccount]:\"sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ\",[B.GooglePayment]:\"sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe\",[B.ThreeDSecure]:\"sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB\",[B.VisaCheckout]:\"sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT\",[B.Venmo]:\"sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov\",[B.HostedFields]:\"sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy\",[B.Fastlane]:\"sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa\"},[p]:{[B.Client]:\"sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO\",[B.PaypalCheckout]:\"sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/\",[B.Paypal]:\"sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt\",[B.LocalPayment]:\"sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH\",[B.DataCollector]:\"sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO\",[B.UsBankAccount]:\"sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW\",[B.GooglePayment]:\"sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO\",[B.ThreeDSecure]:\"sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym\",[B.VisaCheckout]:\"sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS\",[B.Venmo]:\"sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU\",[B.HostedFields]:\"sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P\",[B.Fastlane]:\"sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y\"},[m]:{[B.Client]:\"sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq\",[B.PaypalCheckout]:\"sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh\",[B.Paypal]:\"sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH\",[B.LocalPayment]:\"sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC\",[B.DataCollector]:\"sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc\",[B.UsBankAccount]:\"sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F\",[B.GooglePayment]:\"sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i\",[B.ThreeDSecure]:\"sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D\",[B.VisaCheckout]:\"sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv\",[B.Venmo]:\"sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz\",[B.HostedFields]:\"sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z\",[B.Fastlane]:\"sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr\"}};var R,H=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class W{constructor(e,t,i){this.scriptLoader=e,this.braintreeHostWindow=t,this.braintreeSDKVersionManager=i}loadClient(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Client,\"client.min.js\")})}loadFastlane(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Fastlane,\"fastlane.min.js\")})}loadPaypalCheckout(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.PaypalCheckout,\"paypal-checkout.min.js\")})}loadPaypal(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.Paypal,\"paypal.min.js\")})}loadLocalPayment(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.LocalPayment,\"local-payment.min.js\")})}loadDataCollector(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.DataCollector,\"data-collector.min.js\")})}loadUsBankAccount(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.UsBankAccount,\"us-bank-account.min.js\")})}loadGooglePayment(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.GooglePayment,\"google-payment.min.js\")})}load3DS(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.ThreeDSecure,\"three-d-secure.min.js\")})}loadVisaCheckout(){return this.loadBraintreeModuleOrThrow(B.VisaCheckout,\"visa-checkout.min.js\")}loadVenmoCheckout(){return this.loadBraintreeModuleOrThrow(B.Venmo,\"venmo.min.js\")}loadHostedFields(){return H(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(B.HostedFields,\"hosted-fields.min.js\")})}loadVisaCheckoutSdk(e){return H(this,void 0,void 0,function*(){if(this.braintreeHostWindow.V)return this.braintreeHostWindow.V;const t=e?\"sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm\":\"sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6\";return this.scriptLoader.loadScript(`//${e?\"sandbox-\":\"\"}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,{async:!0,attributes:{integrity:t,crossorigin:\"anonymous\"}}).then(()=>{if(!this.braintreeHostWindow.V)throw new j;return this.braintreeHostWindow.V})})}loadBraintreeModuleOrThrow(e,t){return H(this,void 0,void 0,function*(){let i=this.getBraintreeModule(e);if(i)return i;const n=this.braintreeSDKVersionManager.getSDKVersion(),r=`//js.braintreegateway.com/web/${n}/js/${t}`,o=n in U?this.getIntegrityValuesByModuleName(e,n):void 0;if(yield this.scriptLoader.loadScript(r,o?{async:!0,attributes:{integrity:o,crossorigin:\"anonymous\"}}:void 0),i=this.getBraintreeModule(e),!i)throw new j;return i})}getBraintreeModule(e){var t;return null===(t=this.braintreeHostWindow.braintree)||void 0===t?void 0:t[e]}getIntegrityValuesByModuleName(e,t){const i=U[t][e];if(!i)throw new Error(\"Unexpected fileName value\");return i}}function q(e,t){return Object.assign(e,{resolveIds:t})}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(R||(R={}));class $ extends f{constructor(e){super(function(e){switch(e){case R.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case R.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case R.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case R.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case R.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case R.MissingCheckoutConfig:case R.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case R.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case R.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case R.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case R.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case R.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case R.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}var G=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Y{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return G(this,void 0,void 0,function*(){const{braintreepaypal:t,methodId:i}=e,{container:n,onError:r}=t||{};if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypal.container\" argument is not provided.');let o,a=this.paymentIntegrationService.getState();try{if(o=a.getPaymentMethodOrThrow(i),!o.clientToken)throw new $(R.MissingPaymentToken)}catch(e){a=yield this.paymentIntegrationService.loadPaymentMethod(i),o=a.getPaymentMethodOrThrow(i)}const{clientToken:s,config:d,initializationData:l}=o,{paymentButtonStyles:c}=l||{},{checkoutTopButtonStyles:u}=c||{};if(!s||!l)throw new $(R.MissingPaymentMethod);const h={currency:a.getCartOrThrow().currency.code,intent:l.intent,isCreditEnabled:l.isCreditEnabled,commit:!1};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{this.renderPayPalButton(e,t,i,Boolean(d.testMode),u)},e=>this.handleError(e,n,r))})}deinitialize(){return G(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}signIn(e,t){return G(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return G(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderPayPalButton(e,t,i,n,r){const{container:o,onClick:s=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t,{paypal:d}=this.braintreeHostWindow,l=null==d?void 0:d.FUNDING.PAYPAL;if(d&&l){const a=d.Buttons({env:this.braintreeIntegrationService.getBraintreeEnv(n),fundingSource:l,style:Object.assign(Object.assign({},r),{height:36}),createOrder:()=>this.setupPayment(e,t,i),onApprove:n=>this.tokenizePayment(n,e,i,t),onClick:s});a.isEligible()&&a.render(`#${o}`)}else this.braintreeIntegrationService.removeElement(o)}setupPayment(e,t,i){var n;return G(this,void 0,void 0,function*(){try{yield this.paymentIntegrationService.loadDefaultCheckout();const t=this.paymentIntegrationService.getState(),r=t.getCheckoutOrThrow().outstandingBalance,o=t.getCartOrThrow().currency.code,a=t.getCustomer(),s=t.getPaymentMethodOrThrow(i),d=null==a?void 0:a.addresses[0],l=d?this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(d):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:l,amount:r,currency:o,offerCredit:!1,intent:null===(n=s.initializationData)||void 0===n?void 0:n.intent})}catch(e){const{container:i,onError:n}=t;this.handleError(e,i,n)}})}tokenizePayment(e,t,i,n){return G(this,void 0,void 0,function*(){try{const{deviceData:n}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),r=yield t.tokenizePayment(e),{details:o,nonce:a}=r,s=this.braintreeIntegrationService.mapToLegacyBillingAddress(o),d=this.braintreeIntegrationService.mapToLegacyShippingAddress(o);return this.formPoster.postForm(\"/checkout.php\",{payment_type:\"paypal\",provider:i,action:\"set_external_checkout\",nonce:a,device_data:n,billing_address:JSON.stringify(s),shipping_address:JSON.stringify(d)}),r}catch(e){const{container:t,onError:i}=n;this.handleError(e,t,i)}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const J=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new Y(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypal\"}]);var K=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class X{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return K(this,void 0,void 0,function*(){const{braintreepaypalcredit:t,methodId:i}=e,{container:n,onError:r}=t||{};if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.container\" argument is not provided.');let o,a=this.paymentIntegrationService.getState();try{if(o=a.getPaymentMethodOrThrow(i),!o.clientToken)throw new $(R.MissingPaymentToken)}catch(e){a=yield this.paymentIntegrationService.loadPaymentMethod(i),o=a.getPaymentMethodOrThrow(i)}const{clientToken:s,config:d,initializationData:l}=o,{paymentButtonStyles:c}=l||{},{checkoutTopButtonStyles:u}=c||{};if(!s||!l)throw new $(R.MissingPaymentMethod);const h={currency:a.getCartOrThrow().currency.code,intent:l.intent,isCreditEnabled:l.isCreditEnabled,commit:!1};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{this.renderPayPalButton(e,t,i,Boolean(d.testMode),Object.assign(Object.assign({},u),{height:36}))},e=>this.handleError(e,n,r))})}deinitialize(){return K(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}signIn(e,t){return K(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return K(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}renderPayPalButton(e,t,i,n,r){const{container:o,onClick:s=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t,{paypal:d}=this.braintreeHostWindow;let l=!1;d&&[d.FUNDING.PAYLATER,d.FUNDING.CREDIT].forEach(a=>{if(!l){const c=d.Buttons({env:n?\"sandbox\":\"production\",fundingSource:a,style:r,createOrder:()=>this.setupPayment(e,t,i),onApprove:n=>this.tokenizePayment(n,e,i,t),onClick:s});c.isEligible()&&(c.render(`#${o}`),l=!0)}}),d&&l||this.braintreeIntegrationService.removeElement(o)}setupPayment(e,t,i){var n;return K(this,void 0,void 0,function*(){try{yield this.paymentIntegrationService.loadDefaultCheckout();const t=this.paymentIntegrationService.getState(),r=t.getCheckoutOrThrow().outstandingBalance,o=t.getCartOrThrow().currency.code,a=t.getCustomer(),s=t.getPaymentMethodOrThrow(i),d=null==a?void 0:a.addresses[0],l=d?this.braintreeIntegrationService.mapToBraintreeShippingAddressOverride(d):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:l,amount:r,currency:o,offerCredit:!0,intent:null===(n=s.initializationData)||void 0===n?void 0:n.intent})}catch(e){const{container:i,onError:n}=t;this.handleError(e,i,n)}})}tokenizePayment(e,t,i,n){return K(this,void 0,void 0,function*(){try{const{deviceData:n}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),r=yield t.tokenizePayment(e),{details:o,nonce:a}=r,s=this.braintreeIntegrationService.mapToLegacyBillingAddress(o),d=this.braintreeIntegrationService.mapToLegacyShippingAddress(o);return this.formPoster.postForm(\"/checkout.php\",{payment_type:\"paypal\",provider:i,action:\"set_external_checkout\",nonce:a,device_data:n,billing_address:JSON.stringify(s),shipping_address:JSON.stringify(d)}),r}catch(e){const{container:t,onError:i}=n;this.handleError(e,t,i)}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const Q=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new X(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypalcredit\"}]);function Z(e){return\"string\"!=typeof e}function ee(e,t){if(t||e)return function(e){var t,i;const n={},r=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.root,Z),o=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.input,Z),a=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(e.toggle,Z),s=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(null===(t=e.text)||void 0===t?void 0:t.body,Z),l=(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(null===(i=e.text)||void 0===i?void 0:i.caption,Z),c=e.branding;return Object.keys(r).length&&(n.root=r),Object.keys(o).length&&(n.input=o),Object.keys(a).length&&(n.toggle=a),Object.keys(s).length&&(n.text={},n.text.body=s),Object.keys(l).length&&(n.text=Object.assign({},n.text),n.text.caption=l),c&&(n.branding=c),n}(function(e,t){var i,n,r,o,a,s,d,l,c,u,h,y,m,p,g,v,f,b,w,C,S,P;return{root:{backgroundColorPrimary:(null==e?void 0:e.fastlaneRootSettingsBackgroundColor)||(null===(i=null==t?void 0:t.root)||void 0===i?void 0:i.backgroundColorPrimary),errorColor:(null==e?void 0:e.fastlaneRootSettingsErrorColor)||(null===(n=null==t?void 0:t.root)||void 0===n?void 0:n.errorColor),fontFamily:(null==e?void 0:e.fastlaneRootSettingsFontFamily)||(null===(r=null==t?void 0:t.root)||void 0===r?void 0:r.fontFamily),fontSizeBase:(null==e?void 0:e.fastlaneRootSettingsFontSize)||(null===(o=null==t?void 0:t.root)||void 0===o?void 0:o.fontSizeBase),padding:(null==e?void 0:e.fastlaneRootSettingsPadding)||(null===(a=null==t?void 0:t.root)||void 0===a?void 0:a.padding),primaryColor:(null==e?void 0:e.fastlaneRootSettingsPrimaryColor)||(null===(s=null==t?void 0:t.root)||void 0===s?void 0:s.primaryColor)},input:{borderRadius:(null==e?void 0:e.fastlaneInputSettingsBorderRadius)||(null===(d=null==t?void 0:t.input)||void 0===d?void 0:d.borderRadius),borderColor:(null==e?void 0:e.fastlaneInputSettingsBorderColor)||(null===(l=null==t?void 0:t.input)||void 0===l?void 0:l.borderColor),focusBorderColor:(null==e?void 0:e.fastlaneInputSettingsFocusBorderBase)||(null===(c=null==t?void 0:t.input)||void 0===c?void 0:c.focusBorderColor),backgroundColor:(null==e?void 0:e.fastlaneInputSettingsBackgroundColor)||(null===(u=null==t?void 0:t.input)||void 0===u?void 0:u.backgroundColor),borderWidth:(null==e?void 0:e.fastlaneInputSettingsBorderWidth)||(null===(h=null==t?void 0:t.input)||void 0===h?void 0:h.borderWidth),textColorBase:(null==e?void 0:e.fastlaneInputSettingsTextColorBase)||(null===(y=null==t?void 0:t.input)||void 0===y?void 0:y.textColorBase)},toggle:{colorPrimary:(null==e?void 0:e.fastlaneToggleSettingsColorPrimary)||(null===(m=null==t?void 0:t.toggle)||void 0===m?void 0:m.colorPrimary),colorSecondary:(null==e?void 0:e.fastlaneToggleSettingsColorSecondary)||(null===(p=null==t?void 0:t.toggle)||void 0===p?void 0:p.colorSecondary)},text:{body:{color:(null==e?void 0:e.fastlaneTextBodySettingsColor)||(null===(v=null===(g=null==t?void 0:t.text)||void 0===g?void 0:g.body)||void 0===v?void 0:v.color),fontSize:(null==e?void 0:e.fastlaneTextBodySettingsFontSize)||(null===(b=null===(f=null==t?void 0:t.text)||void 0===f?void 0:f.body)||void 0===b?void 0:b.fontSize)},caption:{color:(null==e?void 0:e.fastlaneTextCaptionSettingsColor)||(null===(C=null===(w=null==t?void 0:t.text)||void 0===w?void 0:w.caption)||void 0===C?void 0:C.color),fontSize:(null==e?void 0:e.fastlaneTextCaptionSettingsFontSize)||(null===(P=null===(S=null==t?void 0:t.text)||void 0===S?void 0:S.caption)||void 0===P?void 0:P.fontSize)}},branding:(null==e?void 0:e.fastlaneBrandingSettings)||(null==t?void 0:t.branding)}}(e,t))}var te,ie,ne,re,oe,ae,se,de,le=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ce{constructor(e,t){this.paymentIntegrationService=e,this.braintreeFastlaneUtils=t,this.isAcceleratedCheckoutEnabled=!1}initialize({methodId:e,braintreefastlane:t}){var i;return le(this,void 0,void 0,function*(){if(!e)throw new w('Unable to proceed because \"methodId\" argument is not provided.');const n=yield this.getValidPaymentMethodOrThrow(e),{isAcceleratedCheckoutEnabled:r,isFastlaneStylingEnabled:o}=n.initializationData||{},a=o?null===(i=n.initializationData)||void 0===i?void 0:i.fastlaneStyles:void 0;this.isAcceleratedCheckoutEnabled=!!r;try{if(this.isAcceleratedCheckoutEnabled){const e=ee(a,null==t?void 0:t.styles);yield this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(n.id,e)}}catch(e){}return Promise.resolve()})}deinitialize(){return le(this,void 0,void 0,function*(){return Promise.resolve()})}signIn(e,t){return le(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signInCustomer(e,t)})}signOut(e){return le(this,void 0,void 0,function*(){yield this.paymentIntegrationService.signOutCustomer(e)})}executePaymentMethodCheckout(e){return le(this,void 0,void 0,function*(){const{checkoutPaymentMethodExecuted:t,continueWithCheckoutCallback:i}=e||{};if(\"function\"!=typeof i)throw new w('Unable to proceed because \"continueWithCheckoutCallback\" argument is not provided and it must be a function.');const n=this.paymentIntegrationService.getState().getCustomerOrThrow();if(this.isAcceleratedCheckoutEnabled&&n.isGuest){const e=yield this.shouldRunAuthenticationFlow();t&&\"function\"==typeof t&&t(),e&&(yield this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow(void 0,!0))}i()})}shouldRunAuthenticationFlow(){var e;return le(this,void 0,void 0,function*(){const t=\"braintreeacceleratedcheckout\";try{yield this.paymentIntegrationService.loadPaymentMethod(t);const i=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t);return(null===(e=i.initializationData)||void 0===e?void 0:e.shouldRunAcceleratedCheckout)||!1}catch(e){return!1}})}getValidPaymentMethodOrThrow(e){return le(this,void 0,void 0,function*(){let t=e;try{yield this.paymentIntegrationService.loadPaymentMethod(t)}catch(i){t=\"braintree\"===e?\"braintreeacceleratedcheckout\":\"braintree\",yield this.paymentIntegrationService.loadPaymentMethod(t)}return this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t)})}}!function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(te||(te={})),function(e){e.Completed=\"COMPLETED\",e.Pending=\"PENDING\",e.Failed=\"FAILED\"}(ie||(ie={})),function(e){e.TRUSTLY=\"trustly\"}(ne||(ne={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"cancelled\",e.UNRECOGNIZED=\"unrecognized\"}(re||(re={})),function(e){e.Customer=\"CUSTOMER\",e.Merchant=\"MERCHANT\",e.Network=\"NETWORK\",e.Internal=\"INTERNAL\",e.Unknown=\"UNKNOWN\"}(oe||(oe={})),function(e){e.KountNotEnabled=\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"}(ae||(ae={})),function(e){e.Visa=\"visa\",e.Mastercard=\"mastercard\",e.AmericanExpress=\"american-express\",e.DinersClub=\"diners-club\",e.Discover=\"discover\",e.Jcb=\"jcb\",e.UnionPay=\"union-pay\",e.Maestro=\"maestro\",e.Elo=\"elo\",e.Mir=\"mir\",e.Hiper=\"hiper\",e.Hipercard=\"hipercard\"}(se||(se={})),function(e){e.CVV=\"cvv\",e.PAN=\"pan\"}(de||(de={}));class ue{static get(e){const t=`${encodeURIComponent(`${e}`)}=`,i=document.cookie;let n=null;const r=i.indexOf(t);if(r>-1){let e=i.indexOf(\";\",r);-1===e&&(e=i.length),n=decodeURIComponent(i.substring(r+t.length,e))}return n}static set(e,t,i={secure:!0}){let n=`${encodeURIComponent(e)}=${encodeURIComponent(t)}`;const{expires:r,path:o,domain:a,secure:s}=i;if(r)n+=`; expires=${r.toUTCString()}`;else{const e=new Date,t=60;e.setTime(e.getTime()+60*t*1e3),n+=`; expires=${e.toUTCString()}`}o&&(n+=`; path=${o}`),a&&(n+=`; domain=${a}`),s&&(n+=\"; secure\"),document.cookie=n}static remove(e,t){ue.set(e,\"\",Object.assign({expires:new Date(0)},t))}}var he=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ye{constructor(e,t){this.paymentIntegrationService=e,this.braintreeIntegrationService=t}getDeviceSessionId(){return he(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState().getCart();return this.braintreeIntegrationService.getSessionId(null==e?void 0:e.id)})}initializeBraintreeFastlaneOrThrow(e,t){return he(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=i.getCart(),{clientToken:r,config:o}=i.getPaymentMethodOrThrow(e);if(!r)throw new $(R.MissingPaymentMethod);this.methodId=e,this.braintreeIntegrationService.initialize(r),this.braintreeFastlane=yield this.braintreeIntegrationService.getBraintreeFastlane(null==n?void 0:n.id,o.testMode,t)})}getBraintreeFastlaneOrThrow(){if(!this.braintreeFastlane)throw new j;return this.braintreeFastlane}getBraintreeFastlaneComponentOrThrow(){return this.getBraintreeFastlaneOrThrow().FastlaneCardComponent}runPayPalAuthenticationFlowOrThrow(e,t){var i;return he(this,void 0,void 0,function*(){try{const n=this.getMethodIdOrThrow(),r=this.getBraintreeFastlaneOrThrow(),{lookupCustomerByEmail:o,triggerAuthenticationFlow:a}=r.identity,s=this.paymentIntegrationService.getState(),d=s.getCartOrThrow(),l=s.getCustomer(),c=s.getBillingAddress(),{isFastlaneShippingOptionAutoSelectEnabled:u}=s.getPaymentMethodOrThrow(n).initializationData||{},h=e||(null==l?void 0:l.email)||(null==c?void 0:c.email)||\"\",{customerContextId:y}=yield o(h);if(!y)return yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:re.UNRECOGNIZED,addresses:[],instruments:[]}),void this.saveSessionIdToCookies(d.id);const{authenticationState:m,profileData:p}=yield a(y),g=(null===(i=null==p?void 0:p.shippingAddress)||void 0===i?void 0:i.phoneNumber)||\"\";if(m===re.CANCELED)return yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:m,addresses:[],instruments:[]}),void this.removeSessionIdFromCookies();const v=this.mapPayPalToBcAddress([p.shippingAddress],[g])||[],f=this.getPayPalBillingAddresses(p),b=f?this.mapPayPalToBcAddress([f],[g]):[],w=p.card?this.mapPayPalToBcInstrument(n,[p.card]):[],C=this.mergeShippingAndBillingAddresses(v,b);if(this.saveSessionIdToCookies(d.id),yield this.paymentIntegrationService.updatePaymentProviderCustomer({authenticationState:m,addresses:C,instruments:w}),b.length>0&&d.lineItems.physicalItems.length>0&&(yield this.paymentIntegrationService.updateBillingAddress(b[0])),b.length>0&&d.lineItems.digitalItems.length>0&&0===d.lineItems.physicalItems.length){const{firstName:e,lastName:t}=C[0],i=Object.assign(Object.assign({},b[0]),{firstName:e,lastName:t});yield this.paymentIntegrationService.updateBillingAddress(i)}v.length>0&&d.lineItems.physicalItems.length>0&&(yield this.paymentIntegrationService.updateShippingAddress(v[0]),t&&u&&(yield this.setShippingOption()))}catch(e){}})}getSessionIdFromCookies(){return ue.get(\"bc-fastlane-sessionId\")||\"\"}saveSessionIdToCookies(e){const t=new Date;t.setDate(t.getDate()+14),ue.set(\"bc-fastlane-sessionId\",e,{expires:t,secure:!0})}removeSessionIdFromCookies(){ue.remove(\"bc-fastlane-sessionId\")}mapPayPalToBcInstrument(e,t){if(t)return t.map(t=>{const{id:i,paymentSource:n}=t,{brand:r,expiry:o,lastDigits:a,binDetails:s}=n.card,[d,l]=o.split(\"-\");return{bigpayToken:i,brand:r,defaultInstrument:!1,expiryMonth:l,expiryYear:d,iin:(null==s?void 0:s.bin)||\"\",last4:a,method:e,provider:e,trustedShippingAddress:!1,type:\"card\",untrustedShippingCardVerificationMode:de.PAN}})}mapPayPalToBcAddress(e,t){if(!e)return[];const i=this.paymentIntegrationService.getState().getCountries()||[],n=e=>{const t=i.find(t=>t.code===e);return(null==t?void 0:t.name)||\"\"};return e.map(e=>({id:Date.now(),type:\"paypal-address\",firstName:e.firstName||\"\",lastName:e.lastName||\"\",company:e.company||\"\",address1:e.streetAddress,address2:e.extendedAddress||\"\",city:e.locality,stateOrProvince:e.region,stateOrProvinceCode:e.region,country:n(e.countryCodeAlpha2),countryCode:e.countryCodeAlpha2,postalCode:e.postalCode,phone:t&&t[0]||\"\",customFields:[]}))}getPayPalBillingAddresses(e){const{card:t,name:i}=e||{};if(!t)return;const{firstName:n,lastName:o}=t.paymentSource.card.billingAddress,{firstName:a,lastName:s}=i||{},{shippingAddress:d}=e||{},l=Object.assign(Object.assign({},t.paymentSource.card.billingAddress),{firstName:n||a,lastName:o||s});return d&&(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEqual)(this.normalizeAddress(l),this.normalizeAddress(d))?d:l}normalizeAddress(e){return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omit)(e,[\"id\"])}mergeShippingAndBillingAddresses(e,t){const i=t.filter(t=>!e.some(e=>(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEqual)(this.normalizeAddress(e),this.normalizeAddress(t))));return[...e,...i]}getMethodIdOrThrow(){if(!this.methodId)throw new w('Unable to proceed because \"methodId\" argument is not provided.');return this.methodId}setShippingOption(){var e;return he(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState().getConsignments()||[],i=(null===(e=t[0])||void 0===e?void 0:e.availableShippingOptions)||[],n=i.find(e=>e.isRecommended);if(n||i.length){const e=n||i[0];yield this.paymentIntegrationService.selectShippingOption(e.id)}})}}const me=q(e=>{const i=window,n=new v(e),r=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),i),o=new ye(e,r);return new ce(e,o)},[{id:\"braintreeacceleratedcheckout\"},{id:\"braintree\"}]);var pe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ge{constructor(e){this.braintreeScriptLoader=e}initialize(e){this.setClientToken(e)}deinitialize(){return pe(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollector),this.dataCollector=void 0})}getClient(){return pe(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=yield t.create({authorization:e})}return this.client})}getDataCollectorOrThrow(e){return pe(this,void 0,void 0,function*(){const t={deviceData:void 0,teardown:()=>Promise.resolve()};if(!this.dataCollector)try{const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadDataCollector(),n=Object.assign({client:t,kount:!0},e);this.dataCollector=yield i.create(n)}catch(e){if(F(e)&&e.code===ae.KountNotEnabled)return t;throw e}return this.dataCollector})}getBraintreeGooglePayment(){return pe(this,void 0,void 0,function*(){if(!this.googlePayment){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadGooglePayment()]);this.googlePayment=yield t.create({client:e})}return this.googlePayment})}getBraintreeThreeDS(){return pe(this,void 0,void 0,function*(){if(!this.threeDS){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]);this.threeDS=yield t.create({client:e,version:2})}return this.threeDS})}getBraintreeLocalPayment(e){return pe(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment){const[t,i]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadLocalPayment()]);this.braintreeLocalPayment=yield new Promise((n,r)=>{i.create({client:t,merchantAccountId:e},(e,t)=>{e&&r(e),n(t)})})}return this.braintreeLocalPayment})}getUsBankAccount(){return pe(this,void 0,void 0,function*(){if(!this.usBankAccount){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadUsBankAccount();this.usBankAccount=yield t.create({client:e})}return this.usBankAccount})}getBraintreeVisaCheckout(){return this.visaCheckout||(this.visaCheckout=Promise.all([this.getClient(),this.braintreeScriptLoader.loadVisaCheckout()]).then(([e,t])=>t.create({client:e}))),this.visaCheckout}getVisaCheckoutSdk(e){return pe(this,void 0,void 0,function*(){return this.visaCheckoutSDK||(this.visaCheckoutSDK=yield this.braintreeScriptLoader.loadVisaCheckoutSdk(e)),this.visaCheckoutSDK})}getVenmoCheckoutOrThrow(){return pe(this,void 0,void 0,function*(){if(!this.braintreeVenmo){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadVenmoCheckout(),i={client:e,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},n=yield t.create(i);if(!n.isBrowserSupported())throw new b;this.braintreeVenmo=n}return this.braintreeVenmo})}setClientToken(e){this.clientToken=e}getClientTokenOrThrow(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);return this.clientToken}teardownModule(e){return e?e.teardown():Promise.resolve()}}class ve extends f{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}var fe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class be{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i,this.buttonClassName=\"visa-checkout-wrapper\",this.onError=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}initialize(e){return fe(this,void 0,void 0,function*(){const{braintreevisacheckout:t,methodId:i}=e;if(!i)throw new w('Unable to proceed because \"methodId\" argument is not provided.');if(!t)throw new w('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState(),r=n.getCheckoutOrThrow(),{clientToken:o,config:s}=n.getPaymentMethodOrThrow(i),d=n.getStoreConfigOrThrow();if(!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(o);const l=yield this.braintreeSdk.getBraintreeVisaCheckout(),c=yield this.braintreeSdk.getVisaCheckoutSdk(s.testMode),{container:u,onError:h}=t;this.onError=h||lodash__WEBPACK_IMPORTED_MODULE_2__.noop;const y=l.createInitOptions({paymentRequest:{currencyCode:d.currency.code,subtotal:String(r.subtotal)},settings:{locale:d.storeProfile.storeLanguage,shipping:{collectShipping:!0}}}),m=this.createSignInButton(u,this.buttonClassName);yield c.init(y),c.on(\"payment.success\",e=>this.tokenizePayment(l,e).then(()=>this.paymentIntegrationService.loadCheckout()).catch(e=>this.handleError(e))),c.on(\"payment.error\",(e,t)=>this.handleError(t)),m.style.visibility=\"visible\"})}deinitialize(){return fe(this,void 0,void 0,function*(){yield this.braintreeSdk.deinitialize()})}signIn(){throw new ve('In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.')}signOut(e){return fe(this,void 0,void 0,function*(){return yield this.paymentIntegrationService.signOutCustomer(e),Promise.resolve()})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}tokenizePayment(e,t){return fe(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.mapToVisaCheckoutAddress(n),billingAddress:a=this.mapToVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}mapToVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}createSignInButton(e,t){const i=document.querySelector(`#${e}`);if(!i)throw new Error(\"Unable to proceed because the provided container ID is not valid.\");return this.insertVisaCheckoutButton(i,t)}insertVisaCheckoutButton(e,t){const i=document.createElement(\"div\");return i.style.display=\"flex\",i.style.flexDirection=\"column\",i.style.visibility=\"hidden\",i.style.width=\"max-content\",i.className=t,i.innerHTML='\\n            <img\\n                alt=\"Visa Checkout\"\\n                class=\"v-button\"\\n                role=\"button\"\\n                src=\"https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178\"\\n                />\\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>',e.appendChild(i),i}handleError(e){if(\"function\"!=typeof this.onError)throw e;this.onError(e)}}const we=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new be(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);class Ce extends f{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}function Se(e){const{color:t,fundingicons:i,height:n=40,layout:r,shape:a,size:s,tagline:l}=e||{},c={color:t,fundingicons:i,height:Pe(n),layout:r,shape:a||\"rect\",size:s,tagline:l};return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)(c,lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}function Pe(e){const t=Number(e);return!t||Number.isNaN(t)?40:t>55?55:t<25?25:t}function Ie(e){return{recipientName:`${e.firstName} ${e.lastName}`,line1:e.address1,line2:e.address2,city:e.city,state:e.stateOrProvinceCode,postalCode:e.postalCode,countryCode:e.countryCode,phone:e.phone}}var Oe=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ke{constructor(e,t,i,n){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeHostWindow=n}initialize(e){return Oe(this,void 0,void 0,function*(){const{braintreepaypal:t,containerId:i,methodId:n}=e;if(!n)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!i)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.braintreepaypal\" argument is not provided.');let r,o=this.paymentIntegrationService.getState();if(t.buyNowInitializeOptions){if(!t.currencyCode)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.');r=t.currencyCode}else yield this.paymentIntegrationService.loadDefaultCheckout(),o=this.paymentIntegrationService.getState(),r=o.getCartOrThrow().currency.code;const a=o.getPaymentMethodOrThrow(n),{clientToken:s,config:d,initializationData:l}=a;if(!s||!l)throw new $(R.MissingPaymentMethod);const c={currency:r,intent:l.intent,isCreditEnabled:l.isCreditEnabled};this.braintreeIntegrationService.initialize(s),yield this.braintreeIntegrationService.getPaypalCheckout(c,e=>{this.renderPayPalButton(e,t,i,n,!!d.testMode)},e=>this.handleError(e,i,t.onError))})}deinitialize(){return Oe(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}renderPayPalButton(e,t,i,n,r){const{style:o,shouldProcessPayment:a,onAuthorizeError:s,onEligibilityFailure:d}=t,{paypal:l}=this.braintreeHostWindow;if(l){const c=l.Buttons({env:r?\"sandbox\":\"production\",fundingSource:l.FUNDING.PAYPAL,style:Se(o),createOrder:()=>this.setupPayment(e,t,n),onApprove:t=>this.tokenizePayment(t,e,n,a,s)});c.isEligible()?c.render(`#${i}`):d&&\"function\"==typeof d&&d()}else this.braintreeIntegrationService.removeElement(i)}setupPayment(e,t,i){var n;return Oe(this,void 0,void 0,function*(){const{onPaymentError:r,shippingAddress:o,buyNowInitializeOptions:a}=t;try{const r=\"function\"==typeof(null==a?void 0:a.getBuyNowCartRequestBody)?yield this.createBuyNowCart(a.getBuyNowCartRequestBody()):void 0;this.buyNowCartId=null==r?void 0:r.id;const s=this.paymentIntegrationService.getState(),d=s.getCustomer(),l=s.getPaymentMethodOrThrow(i),c=r?r.cartAmount:s.getCartOrThrow().cartAmount,u=r?t.currencyCode:s.getCartOrThrow().currency.code,h=o||(null==d?void 0:d.addresses[0]),y=h?Ie(h):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:y,amount:c,currency:u,offerCredit:!1,intent:null===(n=l.initializationData)||void 0===n?void 0:n.intent})}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}tokenizePayment(e,t,i,n,r){return Oe(this,void 0,void 0,function*(){try{const{deviceData:r}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),o=yield t.tokenizePayment(e),{details:a,nonce:s}=o,d=this.braintreeIntegrationService.mapToLegacyBillingAddress(a),l=this.braintreeIntegrationService.mapToLegacyShippingAddress(a);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",provider:i,action:n?\"process_payment\":\"set_external_checkout\",nonce:s,device_data:r,billing_address:JSON.stringify(d),shipping_address:JSON.stringify(l)},this.buyNowCartId&&{cart_id:this.buyNowCartId})),o}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}createBuyNowCart(e){return Oe(this,void 0,void 0,function*(){if(!e)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(e)}catch(e){throw new Ce}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const Ee=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n);return new ke(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,n)},[{id:\"braintreepaypal\"}]);class Te{constructor(e){this.paymentIntegrationService=e,this.braintreeHostWindow=window}render(e,t,i){const n=t&&document.getElementById(t);if(this.braintreeHostWindow.paypal&&n){const r=this.paymentIntegrationService.getState(),o=r.getCartOrThrow(),a=r.getBillingAddressOrThrow(),s=r.getPaymentMethodOrThrow(e);if(!s.initializationData)return;const{paypalBNPLConfiguration:d=[]}=s.initializationData,l=i===D.PAYMENT?\"checkout\":i,c=d&&d.find(({id:e})=>e===l);if(!c||!c.status)return;i===D.CART&&(n.removeAttribute(\"data-pp-style-logo-type\"),n.removeAttribute(\"data-pp-style-logo-position\"),n.removeAttribute(\"data-pp-style-text-color\"),n.removeAttribute(\"data-pp-style-text-size\")),this.braintreeHostWindow.paypal.Messages({amount:o.cartAmount,buyerCountry:a.countryCode,placement:i,style:this.getPaypalMessagesStylesFromBNPLConfig(c)}).render(`#${t}`)}}getPaypalMessagesStylesFromBNPLConfig({styles:e}){const t={};return e.color&&(t.color=e.color),e.layout&&(t.layout=e.layout),(e[\"logo-type\"]||e[\"logo-position\"])&&(t.logo={},e[\"logo-type\"]&&(t.logo.type=e[\"logo-type\"]),e[\"logo-position\"]&&(t.logo.position=e[\"logo-position\"])),e.ratio&&(t.ratio=e.ratio),(e[\"text-color\"]||e[\"text-size\"])&&(t.text={},e[\"text-color\"]&&(t.text.color=e[\"text-color\"]),e[\"text-size\"]&&(t.text.size=+e[\"text-size\"])),t}}var Ae=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class ze{constructor(e,t,i,n,r){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeIntegrationService=i,this.braintreeMessages=n,this.braintreeHostWindow=r}initialize(e){var t,i;return Ae(this,void 0,void 0,function*(){const{braintreepaypalcredit:n,containerId:r,methodId:o}=e;if(!o)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!r)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit\" argument is not provided.');let a,s=this.paymentIntegrationService.getState();if(n.buyNowInitializeOptions){if(!n.currencyCode)throw new w('Unable to initialize payment because \"options.braintreepaypalcredit.currencyCode\" argument is not provided.');a=n.currencyCode}else yield this.paymentIntegrationService.loadDefaultCheckout(),s=this.paymentIntegrationService.getState(),a=s.getCartOrThrow().currency.code;const d=s.getPaymentMethodOrThrow(o),{clientToken:l,config:c,initializationData:u}=d;if(!l||!u)throw new $(R.MissingPaymentMethod);const h={currency:a,intent:u.intent,isCreditEnabled:u.isCreditEnabled},m=y(null!==(i=null===(t=s.getStoreConfig())||void 0===t?void 0:t.checkoutSettings.features)&&void 0!==i?i:{},\"PAYPAL-5663.hide_braintree_card_banner_implementation_in_checkout_sdk\");this.braintreeIntegrationService.initialize(l),yield this.braintreeIntegrationService.getPaypalCheckout(h,e=>{!m&&n.messagingContainerId&&this.renderPayPalMessages(o,n.messagingContainerId),this.renderPayPalButton(e,n,r,o,!!c.testMode)},e=>this.handleError(e,r,n.onError))})}deinitialize(){return Ae(this,void 0,void 0,function*(){yield this.braintreeIntegrationService.teardown()})}renderPayPalMessages(e,t){this.braintreeMessages.render(e,t,D.CART)}renderPayPalButton(e,t,i,n,r){const{style:o,shouldProcessPayment:a,onAuthorizeError:s,onEligibilityFailure:d}=t,{paypal:l}=this.braintreeHostWindow;let c=!1;l&&[l.FUNDING.PAYLATER,l.FUNDING.CREDIT].forEach(u=>{const h=u===l.FUNDING.CREDIT?Object.assign({label:N.CREDIT},Se(o)):Se(o);if(!c){const o=l.Buttons({env:r?\"sandbox\":\"production\",fundingSource:u,style:h,createOrder:()=>this.setupPayment(e,t,n),onApprove:t=>this.tokenizePayment(t,e,n,a,s)});o.isEligible()?(o.render(`#${i}`),c=!0):l.FUNDING.CREDIT&&d&&\"function\"==typeof d&&d()}}),l&&c||this.braintreeIntegrationService.removeElement(i)}setupPayment(e,t,i){var n;return Ae(this,void 0,void 0,function*(){const{onPaymentError:r,shippingAddress:o,buyNowInitializeOptions:a}=t;try{const r=\"function\"==typeof(null==a?void 0:a.getBuyNowCartRequestBody)?yield this.createBuyNowCart(a.getBuyNowCartRequestBody()):void 0;this.buyNowCartId=null==r?void 0:r.id;const s=this.paymentIntegrationService.getState(),d=s.getCustomer(),l=s.getPaymentMethodOrThrow(i),c=r?r.cartAmount:s.getCartOrThrow().cartAmount,u=r?t.currencyCode:s.getCartOrThrow().currency.code,h=o||(null==d?void 0:d.addresses[0]),y=h?Ie(h):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:y,amount:c,currency:u,offerCredit:!0,intent:null===(n=l.initializationData)||void 0===n?void 0:n.intent})}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}tokenizePayment(e,t,i,n,r){return Ae(this,void 0,void 0,function*(){try{const{deviceData:r}=yield this.braintreeIntegrationService.getDataCollector({paypal:!0}),o=yield t.tokenizePayment(e),{details:a,nonce:s}=o,d=this.braintreeIntegrationService.mapToLegacyBillingAddress(a),l=this.braintreeIntegrationService.mapToLegacyShippingAddress(a);return this.formPoster.postForm(\"/checkout.php\",Object.assign({payment_type:\"paypal\",provider:i,action:n?\"process_payment\":\"set_external_checkout\",nonce:s,device_data:r,billing_address:JSON.stringify(d),shipping_address:JSON.stringify(l)},this.buyNowCartId&&{cart_id:this.buyNowCartId})),o}catch(e){throw r&&(F(e)||e instanceof f)&&r(e),e}})}createBuyNowCart(e){return Ae(this,void 0,void 0,function*(){if(!e)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(e)}catch(e){throw new Ce}})}handleError(e,t,i){if(this.braintreeIntegrationService.removeElement(t),!i||!F(e))throw e;i(e)}}const Ne=q(i=>{const n=window,r=new v(i),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r),n),a=new Te(i);return new ze(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o,a,n)},[{id:\"braintreepaypalcredit\"}]);var Me=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class De{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i}initialize(e){return Me(this,void 0,void 0,function*(){const{containerId:t,methodId:i}=e;if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState(),{clientToken:r,initializationData:o,config:a}=n.getPaymentMethodOrThrow(i);if(!r||!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(r);const s=yield this.braintreeSdk.getBraintreeVisaCheckout(),{currency:{code:d},cartAmount:l}=n.getCartOrThrow(),c=yield this.braintreeSdk.getVisaCheckoutSdk(a.testMode),u=s.createInitOptions({paymentRequest:{currencyCode:d,subtotal:String(l)},settings:{shipping:{collectShipping:!0}}});this.createSignInButton(t),yield c.init(u),c.on(\"payment.success\",e=>Me(this,void 0,void 0,function*(){yield this.paymentSuccess(s,e)}))})}deinitialize(){return Promise.resolve()}paymentSuccess(e,t){return Me(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.toVisaCheckoutAddress(n),billingAddress:a=this.toVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}toVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}createSignInButton(e){const t=document.querySelector(`#${e}`);if(!t)throw new Error(\"Need a container to place the button\");return this.insertVisaCheckoutButton(t)}insertVisaCheckoutButton(e){const t=document.createElement(\"div\");return t.style.display=\"flex\",t.style.flexDirection=\"column\",t.style.alignItems=\"flex-end\",t.innerHTML='\\n            <img\\n                alt=\"Visa Checkout\"\\n                class=\"v-button\"\\n                role=\"button\"\\n                src=\"https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&height=34&width=178\"\\n                />\\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>',e.appendChild(t),t}}const _e=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new De(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);function Be(e){const{billingAddress:t,email:i,firstName:n,lastName:r,phone:o,shippingAddress:a}=e,s=t||a;return{email:i,first_name:n,last_name:r,phone_number:o,address_line_1:null==s?void 0:s.line1,address_line_2:null==s?void 0:s.line2,city:null==s?void 0:s.city,state:null==s?void 0:s.state,country_code:null==s?void 0:s.countryCode,postal_code:null==s?void 0:s.postalCode}}function xe(e){const{email:t,phone:i,shippingAddress:n}=e,r=(null==n?void 0:n.recipientName)||\"\",[o,a]=r.split(\" \");return{email:t,first_name:o||\"\",last_name:a||\"\",phone_number:i,address_line_1:null==n?void 0:n.line1,address_line_2:null==n?void 0:n.line2,city:null==n?void 0:n.city,state:null==n?void 0:n.state,country_code:null==n?void 0:n.countryCode,postal_code:null==n?void 0:n.postalCode}}function Fe(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"BraintreeError\"===e.name}var Le=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};const Ve=e=>{const{color:t,height:i}=e;return{backgroundColor:(n=t||\"\",n===z.WHITE?\"#FFFFFF\":\"#3D95CE\"),backgroundPosition:\"50% 50%\",backgroundSize:\"80px auto\",backgroundImage:`url(\"/app/assets/img/payment-providers/venmo-logo-${t===z.WHITE?z.BLUE:z.WHITE}.svg\")`,backgroundRepeat:\"no-repeat\",borderRadius:\"4px\",cursor:\"pointer\",transition:\"0.2s ease\",minHeight:`${i||40}px`,minWidth:\"150px\",height:\"100%\",width:\"100%\",border:t===z.WHITE?\"1px solid black\":\"none\"};// removed by dead control flow\n var n; };class je{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i,this.onError=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}initialize(e){return Le(this,void 0,void 0,function*(){const{braintreevenmo:t,containerId:i,methodId:n}=e;if(!n)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');const r=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(n),{clientToken:o,initializationData:a}=r,{paymentButtonStyles:s}=a,{cartButtonStyles:d}=s||{},l=(null==t?void 0:t.style)||d;if(!o||!a)throw new $(R.MissingPaymentMethod);if(!i)throw new w('Unable to initialize payment because \"options.containerId\" argument is not provided.');yield this.paymentIntegrationService.loadDefaultCheckout(),this.onError=(null==t?void 0:t.onError)||this.handleError,this.braintreeSdk.initialize(o);try{const e=yield this.braintreeSdk.getVenmoCheckoutOrThrow();this.renderVenmoButton(e,i,null==t?void 0:t.buyNowInitializeOptions,l)}catch(e){(Fe(e)||function(e){return e instanceof b}(e))&&this.handleInitializationVenmoError(e,i)}})}deinitialize(){return Le(this,void 0,void 0,function*(){return yield this.braintreeSdk.deinitialize(),Promise.resolve()})}handleError(e){throw new Error(e.message)}createBuyNowCart(e){return Le(this,void 0,void 0,function*(){if(\"function\"==typeof(null==e?void 0:e.getBuyNowCartRequestBody)){const t=null==e?void 0:e.getBuyNowCartRequestBody();if(!t)throw new $(R.MissingCart);try{return yield this.paymentIntegrationService.createBuyNowCart(t)}catch(e){throw new Ce}}})}handleInitializationVenmoError(e,t){return this.removeVenmoContainer(t),this.onError(e)}removeVenmoContainer(e){const t=document.getElementById(e);t&&t.remove()}renderVenmoButton(e,t,i,n){const r=document.getElementById(t),{color:o}=n||{};if(!r)throw new w(\"Unable to create wallet button without valid container ID.\");r.setAttribute(\"aria-label\",\"Venmo\"),Object.assign(r.style,Ve(n||{})),r.addEventListener(\"click\",()=>Le(this,void 0,void 0,function*(){r.setAttribute(\"disabled\",\"true\");const t=yield this.createBuyNowCart(i);e.tokenize&&e.tokenize((e,i)=>Le(this,void 0,void 0,function*(){r.removeAttribute(\"disabled\"),e&&this.onError(e),yield this.handlePostForm(i,null==t?void 0:t.id)}))})),o===z.BLUE&&(r.addEventListener(\"mouseenter\",()=>{r.style.backgroundColor=\"#0a7fc2\"}),r.addEventListener(\"mouseleave\",()=>{r.style.backgroundColor=Ve(n||{}).backgroundColor}))}handlePostForm(e,t){return Le(this,void 0,void 0,function*(){const{deviceData:i}=yield this.braintreeSdk.getDataCollectorOrThrow(),{nonce:n,details:r}=e;this.formPoster.postForm(\"/checkout.php\",Object.assign({nonce:n,provider:\"braintreevenmo\",payment_type:\"paypal\",device_data:i,action:\"set_external_checkout\",billing_address:JSON.stringify(Be(r)),shipping_address:JSON.stringify(xe(r))},t&&{cart_id:t}))})}}const Ue=q(i=>{const n=window,r=(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),o=new v(i),a=new W(r,n,o),s=new ge(a);return new je(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),s)},[{id:\"braintreevenmo\"}]);function Re(e){return Boolean(e.instrumentId)}class He extends f{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}function We(e){return!(\"object\"!=typeof e||null===e||void 0!==e.shouldSaveInstrument&&\"boolean\"!=typeof e.shouldSaveInstrument||void 0!==e.shouldSetAsDefaultInstrument&&\"boolean\"!=typeof e.shouldSetAsDefaultInstrument)}class qe extends f{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}function $e(e){return!!e&&\"accountNumber\"in e&&\"routingNumber\"in e&&\"ownershipType\"in e&&\"accountType\"in e}var Ge=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Ye{constructor(e,t){this.paymentIntegrationService=e,this.braintreeSdk=t}initialize(e){return Ge(this,void 0,void 0,function*(){const{methodId:t,braintreeach:i}=e||{};if(!t)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');this.getMandateText=null==i?void 0:i.getMandateText,yield this.paymentIntegrationService.loadPaymentMethod(t);const n=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(t),{clientToken:r,initializationData:o}=n;if(!r||!o)throw new $(R.MissingPaymentMethod);this.braintreeSdk.initialize(r);try{this.usBankAccount=yield this.braintreeSdk.getUsBankAccount()}catch(e){this.handleBraintreeError(e)}})}execute(e,t){return Ge(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);const r=Re(i.paymentData||{}),o=r?yield this.tokenizePaymentForVaultedInstrument(i):yield this.tokenizePayment(i),a=r?yield this.preparePaymentDataForVaultedInstrument(o,i):yield this.preparePaymentData(o,i);yield this.paymentIntegrationService.submitOrder(n,t),yield this.paymentIntegrationService.submitPayment(a)})}finalize(){return Promise.reject(new He)}deinitialize(){return Ge(this,void 0,void 0,function*(){return yield this.braintreeSdk.deinitialize(),Promise.resolve()})}tokenizePayment({paymentData:e}){return Ge(this,void 0,void 0,function*(){const t=this.getUsBankAccountOrThrow();if(!$e(e))throw new C([\"payment.paymentData\"]);const i=Re(e)?\"The data are used for stored instrument verification\":\"function\"==typeof this.getMandateText&&this.getMandateText();if(!i)throw new w(\"Unable to proceed because getMandateText is not provided or returned undefined value.\");try{const{nonce:n}=yield t.tokenize({bankDetails:this.getBankDetails(e),mandateText:i});return n}catch(e){this.handleBraintreeError(e)}})}tokenizePaymentForVaultedInstrument(e){return Ge(this,void 0,void 0,function*(){const{methodId:t,paymentData:i={}}=e,n=this.paymentIntegrationService.getState(),{config:r}=n.getPaymentMethodOrThrow(t);if(!r.isVaultingEnabled)throw new w(\"Vaulting is disabled but a vaulted instrument was being used for this transaction\");return $e(i)?this.tokenizePayment(e):null})}preparePaymentData(e,t){return Ge(this,void 0,void 0,function*(){const{methodId:i,paymentData:n={}}=t;if(!$e(n))throw new C([\"payment.paymentData\"]);const{deviceData:r}=yield this.braintreeSdk.getDataCollectorOrThrow(),{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,routingNumber:s,accountNumber:d}=n;return{methodId:i,paymentData:{deviceSessionId:r,shouldSetAsDefaultInstrument:a,shouldSaveInstrument:o,formattedPayload:{tokenized_bank_account:{issuer:s,masked_account_number:d.substr(-4),token:e}}}}})}preparePaymentDataForVaultedInstrument(e,t){return Ge(this,void 0,void 0,function*(){const{methodId:i,paymentData:n={}}=t;if(!Re(n)||!We(n))throw new C([\"payment.paymentData\"]);const{deviceData:r}=yield this.braintreeSdk.getDataCollectorOrThrow(),{instrumentId:o,shouldSetAsDefaultInstrument:a}=n;return{methodId:i,paymentData:Object.assign({deviceSessionId:r,instrumentId:o,shouldSetAsDefaultInstrument:a},e&&{nonce:e})}})}getBankDetails(e){const t=this.paymentIntegrationService.getState().getBillingAddressOrThrow(),i=e.ownershipType.toLowerCase(),n=e.accountType.toLowerCase();return Object.assign(Object.assign({accountNumber:e.accountNumber,routingNumber:e.routingNumber,ownershipType:i},\"personal\"===i?{firstName:e.firstName,lastName:e.lastName}:{businessName:e.businessName}),{accountType:n,billingAddress:{streetAddress:t.address1,extendedAddress:t.address2,locality:t.city,region:t.stateOrProvinceCode,postalCode:t.postalCode}})}getUsBankAccountOrThrow(){if(!this.usBankAccount)throw new I(P.PaymentNotInitialized);return this.usBankAccount}handleBraintreeError(e){if(!F(e))throw e;throw new qe(e.message)}}const Je=q(e=>new Ye(e,(e=>{const i=new v(e),n=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),window,i);return new ge(n)})(e)),[{id:\"braintreeach\"}]);class Ke{constructor(e){const{element:t,closeElement:i,mainElement:n}=this._createElements(e);this._element=t,this._closeElement=i,this._mainElement=n}show(e){this._mainElement.parentElement||(this._registerClick(e),document.body.appendChild(this._mainElement),setTimeout(()=>this._element.style.opacity=\"1\"))}remove(){this._mainElement.parentElement&&(this._unregisterClick&&this._unregisterClick(),this._removeAfterTransition(),setTimeout(()=>this._element.style.opacity=\"0\"))}_createElements(e){const t=document.createElement(\"div\"),{background:i=\"rgba(0, 0, 0, 0.8)\",id:n=\"checkoutOverlay\",transitionDuration:r=400,hasCloseButton:o=!1,innerHtml:a=null}=e||{};let s,d,l,c,u=t;if(n&&(t.id=n),a){const e=document.createElement(\"div\");c=`${n}--overlayText`,e.className=c,e.appendChild(a),t.appendChild(e)}return o&&(l=`${n}--close`,s=document.createElement(\"div\"),s.className=l,d=`${n}--layout`,u=document.createElement(\"div\"),u.className=d,u.appendChild(t),u.appendChild(s)),u.appendChild(function(e){const{id:t,background:i,transitionDuration:n,classLayout:r,classOverlayText:o,classClose:a}=e,s=document.createElement(\"style\"),d=r?`, .${r}`:\"\";return s.id=`${t}--styles`,s.type=\"text/css\",s.innerText=`\\n        #${t}${d} {\\n            display: block;\\n            height: 100%;\\n            width: 100%;\\n            left: 0;\\n            top: 0;\\n            position: fixed;\\n            z-index: 2147483647;\\n        }\\n        #${t} {\\n            transition: opacity ${n}ms ease-out;\\n            background: ${i};\\n            opacity: 0;\\n        }\\n    `,o&&(s.innerText+=`\\n             #${t} {\\n                display: flex;\\n                align-items: center;\\n                justify-content: center;\\n             }\\n             #${t} .${o} {\\n                color: white;\\n                max-width: 330px;\\n                font-size: 1.2em;\\n                text-align: center;\\n             }\\n        `),a&&(s.innerText+=`\\n            #${t} {\\n                opacity: 1;\\n            }\\n            .${r} .${a} {\\n                position: fixed;\\n                right: 16px;\\n                top: 16px;\\n                width: 16px;\\n                height: 16px;\\n                opacity: 0.6;\\n                cursor: pointer;\\n                z-index: 3147483647;\\n            }\\n            .${r} .${a}::after, .${r} .${a}::before {\\n                position: absolute;\\n                left: 8px;\\n                content: '';\\n                height: 16px;\\n                width: 2px;\\n                background-color: #fff;\\n            }\\n            .${r} .${a}::after {\\n                transform: rotate(-45deg);\\n            }\\n            .${r} .${a}::before {\\n                transform: rotate(45deg);\\n            }\\n        `),s}({id:n,background:i,transitionDuration:r,classLayout:d,classOverlayText:c,classClose:l})),{element:t,closeElement:s,mainElement:u}}_addEventListener(e,t){e&&t&&e.addEventListener(\"click\",t)}_removeEventListener(e,t){e&&t&&e.removeEventListener(\"click\",t)}_registerClick(e){if(this._unregisterClick&&this._unregisterClick(),e){const{onClick:t,onClickClose:i}=e;this._addEventListener(this._element,t),this._addEventListener(this._closeElement,i),this._unregisterClick=()=>{this._removeEventListener(this._element,t),this._removeEventListener(this._closeElement,i),this._unregisterClick=void 0}}}_removeAfterTransition(){const e=t=>{\"opacity\"===t.propertyName&&(this._mainElement.parentElement&&this._mainElement.remove(),this._element.removeEventListener(\"transitionend\",e))};this._element.addEventListener(\"transitionend\",e)}}const Xe={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},Qe=\"embedded-checkout-loading-indicator-rotation\";class Ze{constructor(e){this.styles=Object.assign(Object.assign({},Xe),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${Qe} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(i=>{e.style.setProperty(i,t[i])})}defineAnimation(){var e;if(document.getElementById(Qe))return;const t=document.createElement(\"style\");t.id=Qe,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${Qe} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}const et={\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"};var tt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class it{constructor(e,t,i,n){this.paymentIntegrationService=e,this.braintreeIntegrationService=t,this.braintreeMessages=i,this.loadingIndicator=n,this.braintreeHostWindow=window}initialize(e){return tt(this,void 0,void 0,function*(){const{braintree:t,methodId:i}=e;if(this.braintree=t,this.paymentMethod&&this.paymentMethod.nonce||(this.paymentMethod=this.paymentIntegrationService.getState().getPaymentMethodOrThrow(i)),this.paymentMethod.clientToken&&(null==t?void 0:t.bannerContainerId))return yield this.loadPaypal(),this.loadPaypalCheckoutInstance();if(this.paymentMethod.clientToken)return this.loadPaypal();const n=yield this.paymentIntegrationService.loadPaymentMethod(i);if(this.paymentMethod=n.getPaymentMethodOrThrow(i),null==t?void 0:t.bannerContainerId)return this.loadPaypalCheckoutInstance();if(!this.paymentMethod.clientToken)throw new $(R.MissingPaymentMethod);return this.loadPaypal()})}execute(e,t){var i;return tt(this,void 0,void 0,function*(){const{payment:n}=e,r=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]),{onError:o}=this.braintree||{};if(!n)throw new C([\"payment\"]);try{const e=yield this.preparePaymentData(n,r.useStoreCredit);yield this.paymentIntegrationService.submitOrder(r,t),yield this.paymentIntegrationService.submitPayment(e)}catch(e){this.isProviderError(e)&&(yield this.loadPaypal(),null===(i=this.paypalButtonRender)||void 0===i||i.close(),yield this.loadPaypalCheckoutInstance(),yield new Promise((e,t)=>{o&&\"function\"==typeof o&&o(new Error(\"INSTRUMENT_DECLINED\")),t()})),this.handleError(e)}})}finalize(){return Promise.reject(new He)}deinitialize(){var e;return this.braintreeTokenizePayload=void 0,null===(e=this.paypalButtonRender)||void 0===e||e.close(),this.braintreeIntegrationService.teardown()}preparePaymentData(e,t){var i;return tt(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),r=n.getOutstandingBalance(t),o=n.getStoreConfig();if(!r)throw new $(R.MissingCheckout);if(!o)throw new $(R.MissingCheckoutConfig);if(!this.paymentMethod)throw new I(P.PaymentNotInitialized);const{currency:a,storeProfile:{storeLanguage:s}}=o,{nonce:d,config:{isVaultingEnabled:l}}=this.paymentMethod,{methodId:c,paymentData:u={}}=e,h=(null===(i=this.braintreeTokenizePayload)||void 0===i?void 0:i.nonce)||d;if(h){const t=yield this.paymentIntegrationService.loadPaymentMethod(c);return this.paymentMethod=t.getPaymentMethod(c),Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(h)})}if(Re(u)||(y=u,Boolean(y.instrumentId)&&!Object.prototype.hasOwnProperty.call(y,\"ccNumber\")&&!Object.prototype.hasOwnProperty.call(y,\"ccCvv\"))){if(!l)throw new w(\"Vaulting is disabled but a vaulted instrument was being used for this transaction\");return Promise.resolve(e)}var y;if(!We(u))throw new $(R.MissingPayment);const{shouldSaveInstrument:m,shouldSetAsDefaultInstrument:p}=u;if(m&&!l)throw new w(\"Vaulting is disabled but shouldSaveInstrument is set to true\");const g=n.getShippingAddress(),v=g?Ie(g):void 0;return Promise.all([this.braintreeIntegrationService.paypal({amount:r,locale:s,currency:a.code,offerCredit:\"braintreepaypalcredit\"===this.paymentMethod.id,shippingAddressOverride:v,shouldSaveInstrument:m||!1,shippingAddressEditable:!1}),this.braintreeIntegrationService.getSessionId()]).then(([{nonce:t,details:i}={},n])=>Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(t,i&&i.email,n,m,p)}))})}formattedPayload(e,t,i,n,r){return{formattedPayload:{vault_payment_instrument:n||null,set_as_default_stored_instrument:r||null,device_info:i||null,paypal_account:{token:e,email:t||null}}}}loadPaypalCheckoutInstance(){return tt(this,void 0,void 0,function*(){const{clientToken:e,initializationData:t,id:i}=this.paymentMethod||{};if(!e)throw new $(R.MissingPaymentMethod);try{this.braintreeIntegrationService.initialize(e);const n={currency:this.paymentIntegrationService.getState().getCartOrThrow().currency.code,intent:null==t?void 0:t.intent,isCreditEnabled:null==t?void 0:t.isCreditEnabled},r=\"braintreepaypalcredit\"===i||!(null==t?void 0:t.isCreditEnabled);yield this.braintreeIntegrationService.getPaypalCheckout(n,e=>{var t;r&&i&&(null===(t=this.braintree)||void 0===t?void 0:t.bannerContainerId)&&this.renderPayPalMessages(i,this.braintree.bannerContainerId),this.renderPayPalButton(e)},this.handleError)}catch(e){this.handleError(e)}})}renderPayPalMessages(e,t){this.braintreeMessages.render(e,t,D.PAYMENT)}renderPayPalButton(e){const{onPaymentError:t,submitForm:i,onRenderButton:n,containerId:r,onError:o}=this.braintree||{};if(!r)return;if(!this.paymentMethod)throw new I(P.PaymentNotInitialized);this.loadingIndicatorContainer=r.split(\"#\")[1];const{id:a,config:{testMode:s}}=this.paymentMethod,{paypal:d}=this.braintreeHostWindow,l=null==d?void 0:d.FUNDING.PAYPAL;d&&l?(this.paypalButtonRender=d.Buttons({env:s?\"sandbox\":\"production\",commit:!1,fundingSource:l,onClick:()=>{this.toggleLoadingIndicator(!0)},createOrder:()=>this.setupPayment(e,a,t),onApprove:t=>tt(this,void 0,void 0,function*(){this.braintreeTokenizePayload=yield this.tokenizePaymentOrThrow(t,e),i&&\"function\"==typeof i&&i()}),onCancel:()=>{this.toggleLoadingIndicator(!1)},onError:e=>{this.toggleLoadingIndicator(!1),null==o||o(e)}}),n&&\"function\"==typeof n&&n(),this.paypalButtonRender.isEligible()&&this.paypalButtonRender.render(`${r}`)):this.removeElement(r.split(\"#\")[1])}setupPayment(e,t,i){return tt(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState();try{const i=n.getCustomer(),r=n.getPaymentMethodOrThrow(t),o=n.getCheckoutOrThrow().outstandingBalance,a=n.getStoreConfigOrThrow().currency.code,s=n.getShippingAddress()||(null==i?void 0:i.addresses[0]),d=s?Ie(s):void 0;return yield e.createPayment({flow:\"checkout\",enableShippingAddress:!0,shippingAddressEditable:!1,shippingAddressOverride:d,amount:o,currency:a,offerCredit:!1,intent:r.initializationData.intent})}catch(e){throw i&&(Fe(e)||e instanceof f)&&i(e),e}})}tokenizePaymentOrThrow(e,t,i){return tt(this,void 0,void 0,function*(){try{return yield t.tokenizePayment(e)}catch(e){throw i&&(Fe(e)||e instanceof f)&&i(e),e}})}loadPaypal(){return tt(this,void 0,void 0,function*(){const{clientToken:e,initializationData:t}=this.paymentMethod||{};if(!e||!t)throw new $(R.MissingPaymentMethod);try{this.braintreeIntegrationService.initialize(e),yield this.braintreeIntegrationService.getPaypal()}catch(e){this.handleError(e)}return Promise.resolve()})}handleError(e){if(!Fe(e))throw e;if(\"PAYPAL_POPUP_CLOSED\"===e.code)throw new O(e.message);throw new qe(e.message)}isProviderError(e){var t,i,n;return!!function(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e}(e)&&\"2046\"===(null===(n=null===(i=((null===(t=null==e?void 0:e.errors)||void 0===t?void 0:t.filter(e=>e.provider_error))||[])[0])||void 0===i?void 0:i.provider_error)||void 0===n?void 0:n.code)}removeElement(e){const t=e&&document.getElementById(e);t&&t.remove()}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}}const nt=q(e=>{const i=window,n=new Ke,r=new v(e),o=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,r),i,n),a=new Te(e);return new it(e,o,a,new Ze({containerStyles:et}))},[{id:\"braintreepaypal\"},{id:\"braintreepaypalcredit\"}]);var rt;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(rt||(rt={}));const ot=rt,at={\"X-Checkout-SDK-Version\":\"1.819.0\"};class st{constructor(e){this.requestSender=e}getOrderStatus(e=\"braintreelocalmethods\",t){return i=this,n=void 0,o=function*(){const i=`/api/storefront/initialization/${e}`,n=Object.assign({\"X-API-INTERNAL\":\"This API endpoint is for internal use only and may change in the future\",\"Content-Type\":ot.Json},at);return(yield this.requestSender.get(i,Object.assign({headers:n},t))).body},new((r=void 0)||(r=Promise))(function(e,t){function a(e){try{d(o.next(e))}catch(e){t(e)}}function s(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r(function(e){e(i)})).then(a,s)}d((o=o.apply(i,n||[])).next())});// removed by dead control flow\n var i, n, r, o; }}const dt={body:{},headers:{},status:0};class lt extends f{constructor(e,{message:t,errors:i}={}){const{body:n,headers:r,status:o}=e||dt;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=n,this.headers=r,this.status=o,this.errors=i||[]}}class ct extends lt{constructor(e){super(e,{message:\"There is a problem processing your payment. Please try again later.\"}),this.name=\"PaymentMethodInvalidError\",this.type=\"payment_method_invalid\"}}class ut extends lt{constructor(e){super(e,{message:\"The request has timed out or aborted.\"}),this.name=\"TimeoutError\",this.type=\"timeout\"}}var ht=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class yt{constructor(e,t,i,n,r=3e3,o=3e5){this.paymentIntegrationService=e,this.braintreeSdk=t,this.braintreeRequestSender=i,this.loadingIndicator=n,this.pollingInterval=r,this.maxPollingIntervalTime=o,this.isLPMsUpdateExperimentEnabled=!1,this.pollingTimer=0,this.stopPolling=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,this.isPollingEnabled=!1}initialize(e){return ht(this,void 0,void 0,function*(){const{gatewayId:t,methodId:i,braintreelocalmethods:n}=e;if(this.gatewayId=t,!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!t)throw new w('Unable to initialize payment because \"options.gatewayId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreelocalmethods\" argument is not provided.');this.braintreelocalmethods=n,this.loadingIndicatorContainer=n.container.split(\"#\")[1],yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(t),{clientToken:a,config:s,initializationData:d}=o,l=r.getStoreConfigOrThrow().checkoutSettings.features;if(this.isPollingEnabled=y(l,\"PAYPAL-5258.braintree_local_methods_polling\"),this.isLPMsUpdateExperimentEnabled=y(l,\"PAYPAL-4853.add_new_payment_flow_for_braintree_lpms\"),!a||!d||!s.merchantId)throw new $(R.MissingPaymentMethod);try{this.braintreeSdk.initialize(a),this.isNonInstantPaymentMethod(i)||(this.braintreeLocalPayment=yield this.braintreeSdk.getBraintreeLocalPayment(s.merchantId))}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new He)}deinitialize(){return ht(this,void 0,void 0,function*(){return this.toggleLoadingIndicator(!1),Promise.resolve()})}execute(e,t){return ht(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);const{methodId:r}=i;this.toggleLoadingIndicator(!0),this.isNonInstantPaymentMethod(r)?yield this.executeWithNotInstantLPM(r):yield this.executeWithInstantLPM(r,n,t)})}executeWithNotInstantLPM(e){return ht(this,void 0,void 0,function*(){try{const t=yield this.getLPMsBasicPaymentData();yield this.paymentIntegrationService.submitOrder(),yield this.paymentIntegrationService.submitPayment({methodId:e,paymentData:Object.assign(Object.assign({},t),{formattedPayload:{method:e}})})}catch(e){if(this.isBraintreeRedirectError(e)){const t=e.body.additional_action_required.data.redirect_url;return new Promise((e,i)=>{window.location.replace(t),this.toggleLoadingIndicator(!1),i()})}return this.handleError(e),Promise.reject(e)}})}executeWithInstantLPM(e,t,i){return ht(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment)throw new ct;yield new Promise((n,r)=>{var o;null===(o=this.braintreeLocalPayment)||void 0===o||o.startPayment(this.getInstantLPMConfig(e,t,i),this.getInstantLPMCallback(n,r,e,t,i))})})}getLPMsBasicPaymentData(){return ht(this,void 0,void 0,function*(){const{deviceData:e}=yield this.braintreeSdk.getDataCollectorOrThrow();return{deviceSessionId:e}})}getInstantLPMConfig(e,t,i){const n=this.paymentIntegrationService.getState(),r=n.getCartOrThrow(),o=n.getBillingAddressOrThrow(),{firstName:a,lastName:s,countryCode:d}=o,{currency:l,email:c,lineItems:u}=r,h=u.physicalItems.length>0,y=n.getCheckoutOrThrow().outstandingBalance,m=n.getStoreConfigOrThrow().links.checkoutLink;return{paymentType:e,amount:y,fallback:{url:m,buttonText:\"Complete Payment\"},currencyCode:l.code,shippingAddressRequired:h,email:c,givenName:a,surname:s,address:{countryCode:d},onPaymentStart:(n,r)=>ht(this,void 0,void 0,function*(){if(!this.isLPMsUpdateExperimentEnabled)return this.orderId=n.paymentId,void r();const o=yield this.getLPMsBasicPaymentData(),a=Object.assign(Object.assign({},o),{formattedPayload:{method:e,[`${e}_account`]:{order_id:n.paymentId}}});try{yield this.paymentIntegrationService.submitOrder(t,i),yield this.paymentIntegrationService.submitPayment({methodId:e,paymentData:a})}catch(t){if(this.isBraintreeOrderSavedResponse(t)&&t.body.additional_action_required.data.order_id_saved_successfully)return r(),this.isPollingEnabled?new Promise((t,i)=>{this.initializePollingMechanism(e,t,i,this.gatewayId)}):void 0;throw t}})}}getInstantLPMCallback(e,t,i,n,r){const o=this.paymentIntegrationService.getState().getCartOrThrow();return(a,s)=>ht(this,void 0,void 0,function*(){if(a)return\"LOCAL_PAYMENT_WINDOW_CLOSED\"===a.code?(this.toggleLoadingIndicator(!1),this.resetPollingMechanism(),t()):(this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t(new ct));const d=yield this.getLPMsBasicPaymentData(),l=Object.assign(Object.assign({},d),{formattedPayload:{method:i,[`${i}_account`]:Object.assign({email:o.email,token:s.nonce},this.isLPMsUpdateExperimentEnabled?{}:{order_id:this.orderId})}});try{return this.isLPMsUpdateExperimentEnabled||(yield this.paymentIntegrationService.submitOrder(n,r)),yield this.paymentIntegrationService.submitPayment({methodId:i,paymentData:l}),e(void 0)}catch(e){return this.handleError(e),t(e)}})}toggleLoadingIndicator(e){e&&this.loadingIndicatorContainer?this.loadingIndicator.show(this.loadingIndicatorContainer):this.loadingIndicator.hide()}handleError(e){const{onError:t}=this.braintreelocalmethods||{};this.isPollingEnabled&&this.resetPollingMechanism(),this.toggleLoadingIndicator(!1),t&&\"function\"==typeof t&&t(e)}isNonInstantPaymentMethod(e){return e.toUpperCase()in ne}isBraintreeRedirectError(e){var t;if(\"object\"!=typeof e||null===e)return!1;const{body:i}=e;return!!i&&!!(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.redirect_url)}isBraintreeOrderSavedResponse(e){var t;if(\"object\"!=typeof e||null===e)return!1;const{body:i}=e;return!!i&&(null===(t=i.additional_action_required)||void 0===t?void 0:t.data.hasOwnProperty(\"order_id_saved_successfully\"))}initializePollingMechanism(e,t,i,n){return ht(this,void 0,void 0,function*(){yield new Promise((e,t)=>{const i=setTimeout(e,this.pollingInterval);this.stopPolling=()=>(clearTimeout(i),this.toggleLoadingIndicator(!1),t())});try{this.pollingTimer+=this.pollingInterval;const r=yield this.braintreeRequestSender.getOrderStatus(n,{params:{useMetadata:!1}}),o=r.status===ie.Pending,a=r.status===ie.Completed,s=r.status===ie.Failed;if(a)return this.deinitializePollingMechanism(),t();if(s)return i();if(!a&&o&&this.pollingTimer<this.maxPollingIntervalTime)return yield this.initializePollingMechanism(e,t,i,n);yield this.reinitializeStrategy({methodId:e,gatewayId:n,braintreelocalmethods:this.braintreelocalmethods}),this.handleError(new ut)}catch(e){i()}})}deinitializePollingMechanism(){this.stopPolling(),this.pollingTimer=0}resetPollingMechanism(){this.deinitializePollingMechanism()}reinitializeStrategy(e){return ht(this,void 0,void 0,function*(){yield this.deinitialize(),yield this.initialize(e)})}}const mt=q(e=>{const i=window,n=new v(e),r=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n)),o=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_4__.createRequestSender)(),a=new st(o);return new yt(e,r,a,new Ze({styles:{backgroundColor:\"black\"}}))},[{gateway:\"braintreelocalmethods\"}]);function pt(e){return!!e&&(\"authenticationState\"in e||\"addresses\"in e||\"instruments\"in e)}var gt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class vt{constructor(e,t,i){this.paymentIntegrationService=e,this.braintreeFastlaneUtils=t,this.braintreeSdk=i}initialize(e){var t;return gt(this,void 0,void 0,function*(){const{methodId:i,braintreefastlane:n}=e;if(!i)throw new w('Unable to initialize payment because \"options.methodId\" argument is not provided.');if(!n)throw new w('Unable to initialize payment because \"options.braintreefastlane\" argument is not provided.');if(!n.onInit||\"function\"!=typeof n.onInit)throw new w('Unable to initialize payment because \"options.braintreefastlane.onInit\" argument is not provided or it is not a function.');if(!n.onChange||\"function\"!=typeof n.onChange)throw new w('Unable to initialize payment because \"options.braintreefastlane.onChange\" argument is not provided or it is not a function.');yield this.paymentIntegrationService.loadPaymentMethod(i);const r=this.paymentIntegrationService.getState(),o=r.getPaymentMethodOrThrow(i),{initializationData:a,clientToken:s}=o||{},{isFastlaneStylingEnabled:d}=a||{},l=y(r.getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.braintree_fastlane_three_ds\");this.is3DSEnabled=o.config.is3dsEnabled,s&&l&&this.braintreeSdk.initialize(s);const c=ee(d?null===(t=o.initializationData)||void 0===t?void 0:t.fastlaneStyles:void 0,n.styles);yield this.braintreeFastlaneUtils.initializeBraintreeFastlaneOrThrow(i,c),this.shouldRunAuthenticationFlow()&&(yield this.braintreeFastlaneUtils.runPayPalAuthenticationFlowOrThrow()),yield this.initializeCardComponent(),this.onError=n.onError,n.onInit(e=>this.renderBraintreeCardComponent(e)),n.onChange(()=>this.handleBraintreeStoredInstrumentChange(i))})}execute(e,t){return gt(this,void 0,void 0,function*(){const{payment:i}=e,n=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!i)throw new C([\"payment\"]);yield this.paymentIntegrationService.submitOrder(n,t);const r=yield this.preparePaymentPayload(i.methodId);yield this.paymentIntegrationService.submitPayment(r),this.braintreeFastlaneUtils.removeSessionIdFromCookies()})}finalize(){return Promise.reject(new He)}deinitialize(){return gt(this,void 0,void 0,function*(){return this.braintreeCardComponent=void 0,Promise.resolve()})}initializeCardComponent(){return gt(this,void 0,void 0,function*(){const e=this.paymentIntegrationService.getState(),{phone:t,firstName:i,lastName:n}=e.getBillingAddressOrThrow(),r=`${i} ${n}`,o={styles:{},fields:Object.assign({cardholderName:{prefill:r,enabled:!0}},t&&{phoneNumber:{prefill:t}})},a=this.braintreeFastlaneUtils.getBraintreeFastlaneComponentOrThrow();this.braintreeCardComponent=yield a(o)})}renderBraintreeCardComponent(e){const t=this.getBraintreeCardComponentOrThrow();if(!e)throw new w('Unable to initialize payment because \"container\" argument is not provided.');t.render(e)}preparePaymentPayload(e){var t,i;return gt(this,void 0,void 0,function*(){const n=this.paymentIntegrationService.getState(),r=n.getBillingAddressOrThrow(),o=`${r.firstName} ${r.lastName}`,a=this.getPayPalInstruments()[0],s=yield this.braintreeFastlaneUtils.getDeviceSessionId(),d=y(n.getStoreConfigOrThrow().checkoutSettings.features,\"PROJECT-7080.braintree_fastlane_three_ds\");if(a){const t=this.is3DSEnabled&&d?yield this.get3DS(a.bigpayToken,(null==a?void 0:a.iin)||\"\"):void 0;return{methodId:e,paymentData:{deviceSessionId:s,formattedPayload:{paypal_fastlane_token:{token:t||a.bigpayToken}}}}}const{getPaymentToken:l}=this.getBraintreeCardComponentOrThrow(),c=yield l({name:{fullName:o},billingAddress:this.mapToPayPalAddress(r)}),u=(null===(i=null===(t=c.paymentSource.card)||void 0===t?void 0:t.binDetails)||void 0===i?void 0:i.bin)||\"\",h=this.is3DSEnabled&&d?yield this.get3DS(c.id,u):void 0;return{methodId:e,paymentData:{deviceSessionId:s,nonce:h||c.id}}})}get3DS(e,t){return gt(this,void 0,void 0,function*(){const i=this.paymentIntegrationService.getState(),n=yield this.braintreeSdk.getBraintreeThreeDS(),r=i.getOrderOrThrow();return new Promise((i,o)=>{n.verifyCard({amount:null==r?void 0:r.orderAmount,nonce:e,bin:t,onLookupComplete:(e,t)=>{n.on(\"customer-canceled\",()=>{\"function\"==typeof this.onError&&this.onError(new O),o(new O)}),t()}},(e,t)=>(e&&\"THREEDS_VERIFY_CARD_CANCELED_BY_MERCHANT\"===e.code&&(\"function\"==typeof this.onError&&this.onError(new O),o(new O)),i(t.nonce)))})})}mapToPayPalAddress(e){return{streetAddress:(null==e?void 0:e.address1)||\"\",locality:(null==e?void 0:e.city)||\"\",region:(null==e?void 0:e.stateOrProvinceCode)||(null==e?void 0:e.stateOrProvince)||\"\",postalCode:(null==e?void 0:e.postalCode)||\"\",countryCodeAlpha2:(null==e?void 0:e.countryCode)||\"\"}}shouldRunAuthenticationFlow(){const e=this.paymentIntegrationService.getState(),t=e.getCartOrThrow(),i=e.getCustomerOrThrow(),n=e.getPaymentProviderCustomer(),r=pt(n)?n:{},o=this.braintreeFastlaneUtils.getSessionIdFromCookies();return!(!i.isGuest||(null==r?void 0:r.authenticationState)===re.CANCELED||(null==r?void 0:r.authenticationState)||o!==t.id)}getBraintreeCardComponentOrThrow(){if(!this.braintreeCardComponent)throw new j;return this.braintreeCardComponent}getPayPalInstruments(){const e=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow();return(pt(e)?e:{}).instruments||[]}handleBraintreeStoredInstrumentChange(e){return gt(this,void 0,void 0,function*(){const t=this.braintreeFastlaneUtils.getBraintreeFastlaneOrThrow(),{selectionChanged:i,selectedCard:n}=yield t.profile.showCardSelector();if(i){const t=this.paymentIntegrationService.getState().getPaymentProviderCustomer(),i=pt(t)?t:{},r=this.braintreeFastlaneUtils.mapPayPalToBcInstrument(e,[n]);if(r&&r.length>0)return yield this.paymentIntegrationService.updatePaymentProviderCustomer(Object.assign(Object.assign({},i),{instruments:[...r]})),r[0]}})}}const ft=q(e=>{const i=window,n=new v(e),r=new V(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),i),o=new ye(e,r),a=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),s=new ge(a);return new vt(e,o,s)},[{id:\"braintreeacceleratedcheckout\"}]);var bt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class wt{constructor(e,t,i){this.paymentIntegrationService=e,this.formPoster=t,this.braintreeSdk=i}initialize(e){return bt(this,void 0,void 0,function*(){const{braintreevisacheckout:t,methodId:i}=e;if(!t)throw new w('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');yield this.paymentIntegrationService.loadPaymentMethod(i);const n=this.paymentIntegrationService.getState();this.paymentMethod=n.getPaymentMethodOrThrow(i);const r=n.getCheckoutOrThrow(),o=n.getStoreConfigOrThrow(),{clientToken:s,config:d}=this.paymentMethod||{};if(!s)throw new $(R.MissingPaymentMethod);const{onError:l=lodash__WEBPACK_IMPORTED_MODULE_2__.noop,onPaymentSelect:c=lodash__WEBPACK_IMPORTED_MODULE_2__.noop}=t;this.braintreeSdk.initialize(s);const u=yield this.braintreeSdk.getBraintreeVisaCheckout(),h=yield this.braintreeSdk.getVisaCheckoutSdk(null==d?void 0:d.testMode),y=u.createInitOptions({settings:{locale:o.storeProfile.storeLanguage,shipping:{collectShipping:!1}},paymentRequest:{currencyCode:o.currency.code,subtotal:String(r.subtotal)}});yield h.init(y),h.on(\"payment.success\",e=>this.tokenizePayment(u,e).then(()=>Promise.all([this.paymentIntegrationService.loadCheckout(),this.paymentIntegrationService.loadPaymentMethod(i)])).then(()=>c()).catch(e=>l(e))),h.on(\"payment.error\",(e,t)=>l(t))})}execute(e,t){var i,n;return bt(this,void 0,void 0,function*(){const{payment:r}=e,o=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!r)throw new w('Unable to submit payment because \"payload.payment\" argument is not provided.');if(!(null===(n=null===(i=this.paymentMethod)||void 0===i?void 0:i.initializationData)||void 0===n?void 0:n.nonce))throw new $(R.MissingPaymentMethod);const{nonce:a}=this.paymentMethod.initializationData;try{yield this.paymentIntegrationService.submitOrder(o,t),yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},r),{paymentData:{nonce:a}}))}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new He)}deinitialize(){return bt(this,void 0,void 0,function*(){yield this.braintreeSdk.deinitialize()})}tokenizePayment(e,t){return bt(this,void 0,void 0,function*(){return Promise.all([e.tokenize(t),this.braintreeSdk.getDataCollectorOrThrow()]).then(([e,t])=>{const i=this.paymentIntegrationService.getState(),n=i.getShippingAddress(),r=i.getBillingAddress(),{shippingAddress:o=this.mapToVisaCheckoutAddress(n),billingAddress:a=this.mapToVisaCheckoutAddress(r)}=e;return this.postForm(Object.assign(Object.assign({},e),{shippingAddress:o,billingAddress:a}),t)})})}mapToVisaCheckoutAddress(e){return e?{firstName:e.firstName,lastName:e.lastName,phoneNumber:e.phone,streetAddress:e.address1,extendedAddress:e.address2,locality:e.city,region:e.stateOrProvinceCode,countryCode:e.countryCode,postalCode:e.postalCode}:{}}postForm(e,t){const{userData:i,billingAddress:n,shippingAddress:r,details:o}=e,{userEmail:a}=i,{deviceData:s}=t;return this.formPoster.postForm(\"/checkout.php\",{payment_type:e.type,nonce:e.nonce,provider:\"braintreevisacheckout\",action:\"set_external_checkout\",device_data:s,card_information:JSON.stringify({type:o.cardType,number:o.lastTwo}),billing_address:JSON.stringify(this.getAddress(a,n)),shipping_address:JSON.stringify(this.getAddress(a,r))})}getAddress(e,t={}){return{email:e,first_name:t.firstName,last_name:t.lastName,phone_number:t.phoneNumber,address_line_1:t.streetAddress,address_line_2:t.extendedAddress,city:t.locality,state:t.region,country_code:t.countryCode,postal_code:t.postalCode}}handleError(e){if(e instanceof Error&&\"BraintreeError\"===e.name)throw new qe(e.message);throw e}}const Ct=q(i=>{const n=window,r=new v(i),o=new ge(new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),n,r));return new wt(i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)(),o)},[{id:\"braintreevisacheckout\"}]);var St=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class Pt{constructor(e,t){this.paymentIntegrationService=e,this.braintreeIntegrationService=t}initialize(e){return St(this,void 0,void 0,function*(){const{methodId:t}=e;yield this.paymentIntegrationService.loadPaymentMethod(t);const i=this.paymentIntegrationService.getState();this.venmoOptions=e.braintreevenmo;const n=i.getPaymentMethodOrThrow(t);yield this.initializeBraintreeVenmo(n)})}execute(e){return St(this,void 0,void 0,function*(){const{payment:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!t)throw new C([\"payment\"]);try{const e=yield this.preparePaymentData(t);yield this.paymentIntegrationService.submitOrder(i),yield this.paymentIntegrationService.submitPayment(e)}catch(e){this.handleError(e)}})}finalize(){return Promise.reject(new He)}deinitialize(){return St(this,void 0,void 0,function*(){return yield this.braintreeIntegrationService.teardown(),Promise.resolve()})}handleError(e){if(!F(e))throw e;if(\"PAYPAL_POPUP_CLOSED\"===e.code)throw new O(e.message);throw new qe(e.message)}initializeBraintreeVenmo(e){var t;return St(this,void 0,void 0,function*(){const{clientToken:i}=e;if(!i)throw new $(R.MissingPaymentMethod);const n=y(this.paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features,\"PAYPAL-5406.braintree_venmo_web_fallback_support\");try{this.braintreeIntegrationService.initialize(i),this.braintreeVenmoCheckout=yield this.braintreeIntegrationService.getVenmoCheckout(Object.assign(Object.assign({},void 0!==(null===(t=this.venmoOptions)||void 0===t?void 0:t.allowDesktop)?{allowDesktop:this.venmoOptions.allowDesktop}:{}),n?{mobileWebFallBack:n}:{}))}catch(e){this.handleError(e)}})}preparePaymentData(e){return St(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),{nonce:i}=t.getPaymentMethodOrThrow(e.methodId);if(i)return Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(i)});const n=yield this.braintreeVenmoTokenize(),r=yield this.braintreeIntegrationService.getSessionId();return Object.assign(Object.assign({},e),{paymentData:this.formattedPayload(n.nonce,n.details.email,r)})})}formattedPayload(e,t,i){return{formattedPayload:{vault_payment_instrument:null,set_as_default_stored_instrument:null,device_info:i||null,paypal_account:{token:e,email:t||null}}}}braintreeVenmoTokenize(){return new Promise((e,t)=>{var i;null===(i=this.braintreeVenmoCheckout)||void 0===i||i.tokenize((i,n)=>{if(i)return t(i);e(n)})})}}const It=q(e=>{const i=window,n=(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),r=new v(e),o=new W(n,i,r),a=new V(o,i);return new Pt(e,a)},[{id:\"braintreevenmo\"}]);var Ot=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};class kt{constructor(e,t,i){this.paymentIntegrationService=e,this.braintreeIntegrationService=t,this.braintreeHostedForm=i}initialize(e){return Ot(this,void 0,void 0,function*(){const{methodId:t,gatewayId:i,braintree:n}=e;yield this.paymentIntegrationService.loadPaymentMethod(t);const r=this.paymentIntegrationService.getState();this.paymentMethod=r.getPaymentMethodOrThrow(t);const{clientToken:o}=this.paymentMethod;if(!o)throw new $(R.MissingPaymentMethod);this.threeDSecure=null==n?void 0:n.threeDSecure;try{this.braintreeIntegrationService.initialize(o,this.threeDSecure),this.isHostedPaymentFormEnabled(t,i)&&(null==n?void 0:n.form)&&(yield this.braintreeHostedForm.initialize(n.form,n.unsupportedCardBrands,o),this.isHostedFormInitialized=this.braintreeHostedForm.isInitialized()),this.is3dsEnabled=this.paymentMethod.config.is3dsEnabled,this.deviceSessionId=yield this.braintreeIntegrationService.getSessionId(),this.shouldInitializeBraintreeFastlane()&&(yield this.initializeBraintreeFastlaneOrThrow(t))}catch(e){return this.handleError(e)}})}execute(e){return Ot(this,void 0,void 0,function*(){const{payment:t}=e,i=function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var r=0;for(n=Object.getOwnPropertySymbols(e);r<n.length;r++)t.indexOf(n[r])<0&&Object.prototype.propertyIsEnumerable.call(e,n[r])&&(i[n[r]]=e[n[r]])}return i}(e,[\"payment\"]);if(!t)throw new C([\"payment\"]);this.isHostedFormInitialized&&this.braintreeHostedForm.validate(),yield this.paymentIntegrationService.submitOrder(i);const n=this.paymentIntegrationService.getState(),r=n.getBillingAddressOrThrow(),o=n.getOrderOrThrow().orderAmount;try{const e=this.isHostedFormInitialized?yield this.prepareHostedPaymentData(t,r,o):yield this.preparePaymentData(t,r,o);yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},t),{paymentData:e}))}catch(e){return this.processAdditionalAction(e,t,o)}})}finalize(){return Promise.reject(new He)}deinitialize(){return Ot(this,void 0,void 0,function*(){return this.isHostedFormInitialized=!1,yield Promise.all([this.braintreeIntegrationService.teardown(),this.braintreeHostedForm.deinitialize()]),Promise.resolve()})}handleError(e){if(Fe(e))throw new qe(e.message);throw e}preparePaymentData(e,t,i){return Ot(this,void 0,void 0,function*(){const{paymentData:n}=e,r={deviceSessionId:this.deviceSessionId};if(this.isSubmittingWithStoredCard(e))return Object.assign(Object.assign({},r),n);const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=We(n)?n:{},{nonce:s}=this.shouldPerform3DSVerification(e)?yield this.braintreeIntegrationService.verifyCard(e,t,i):yield this.braintreeIntegrationService.tokenizeCard(e,t);return Object.assign(Object.assign({},r),{nonce:s,shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a})})}prepareHostedPaymentData(e,t,i){return Ot(this,void 0,void 0,function*(){const{paymentData:n}=e,r={deviceSessionId:this.deviceSessionId};if(this.isSubmittingWithStoredCard(e)){const{nonce:e}=yield this.braintreeHostedForm.tokenizeForStoredCardVerification();return Object.assign(Object.assign(Object.assign({},r),n),{nonce:e})}const{shouldSaveInstrument:o=!1,shouldSetAsDefaultInstrument:a=!1}=We(n)?n:{},{nonce:s}=this.shouldPerform3DSVerification(e)?yield this.verifyCardWithHostedForm(t,i):yield this.braintreeHostedForm.tokenize(t);return Object.assign(Object.assign({},r),{shouldSaveInstrument:o,shouldSetAsDefaultInstrument:a,nonce:s})})}verifyCardWithHostedForm(e,t){return Ot(this,void 0,void 0,function*(){const i=yield this.braintreeHostedForm.tokenize(e);return this.braintreeIntegrationService.challenge3DSVerification(i,t)})}processAdditionalAction(e,t,i){return Ot(this,void 0,void 0,function*(){if(!(e=>\"object\"==typeof e&&null!==e&&\"body\"in e)(e)||!(0,lodash__WEBPACK_IMPORTED_MODULE_2__.some)(e.body.errors,{code:\"three_d_secure_required\"}))return this.handleError(e);try{const{payer_auth_request:n}=function(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"body\"in e&&\"status\"in e.body&&\"three_ds_result\"in e.body&&\"payer_auth_request\"in e.body.three_ds_result&&\"errors\"in e.body}(e)&&e.body.three_ds_result||{},{paymentData:r}=t,o=this.paymentIntegrationService.getState();if(!r||!Re(r))throw new C([\"instrumentId\"]);const a=o.getCardInstrumentOrThrow(r.instrumentId),{nonce:s}=yield this.braintreeIntegrationService.challenge3DSVerification({nonce:n||\"\",bin:a.iin},i);yield this.paymentIntegrationService.submitPayment(Object.assign(Object.assign({},t),{paymentData:{deviceSessionId:this.deviceSessionId,nonce:s}}))}catch(e){return this.handleError(e)}})}isHostedPaymentFormEnabled(e,t){return!!e&&!0===this.paymentIntegrationService.getState().getPaymentMethodOrThrow(e,t).config.isHostedFormEnabled}isSubmittingWithStoredCard(e){return!(!e.paymentData||!Re(e.paymentData))}shouldPerform3DSVerification(e){return!(!this.is3dsEnabled||this.isSubmittingWithStoredCard(e))}shouldInitializeBraintreeFastlane(){var e;const t=this.paymentIntegrationService.getState().getPaymentProviderCustomerOrThrow(),i=pt(t)?t:{};return(null===(e=this.paymentMethod)||void 0===e?void 0:e.initializationData.isAcceleratedCheckoutEnabled)&&!(null==i?void 0:i.authenticationState)}initializeBraintreeFastlaneOrThrow(e){return Ot(this,void 0,void 0,function*(){const t=this.paymentIntegrationService.getState(),i=t.getCartOrThrow(),n=t.getPaymentMethodOrThrow(e),{clientToken:r,config:o}=n;if(!r)throw new $(R.MissingPaymentMethod);this.braintreeIntegrationService.initialize(r,this.threeDSecure),yield this.braintreeIntegrationService.getBraintreeFastlane(i.id,o.testMode)})}}function Et(e){return\"cardNumber\"in e}function Tt(e){if(!F(e))return!1;const{details:t}=e;return void 0===t||\"object\"==typeof t&&null!==t&&void 0===t.invalidFieldKeys||(i=t,Array.isArray(i)&&i.every(e=>\"string\"==typeof e));// removed by dead control flow\n var i; }var At,zt=function(e,t,i,n){return new(i||(i=Promise))(function(r,o){function a(e){try{d(n.next(e))}catch(e){o(e)}}function s(e){try{d(n.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(a,s)}d((n=n.apply(e,t||[])).next())})};!function(e){e[e.CreditCard=0]=\"CreditCard\",e[e.StoredCardVerification=1]=\"StoredCardVerification\"}(At||(At={}));class Nt{constructor(e,t){this.braintreeScriptLoader=e,this.braintreeSDKVersionManager=t,this.isInitializedHostedForm=!1,this.handleBlur=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onBlur)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy),errors:this.mapErrors(e.fields)})},this.handleFocus=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onFocus)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy)})},this.handleCardTypeChange=e=>{var t,i;const n=1===e.cards.length?e.cards[0].type.replace(/^master-card$/,\"mastercard\"):void 0;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onCardTypeChange)||void 0===i||i.call(t,{cardType:n})},this.handleInputSubmitRequest=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onEnter)||void 0===i||i.call(t,{fieldType:this.mapFieldType(e.emittedBy)})},this.handleValidityChange=e=>{var t,i;null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onValidate)||void 0===i||i.call(t,{isValid:this.isValidForm(e),errors:this.mapValidationErrors(e.fields)})}}initialize(e,t,i){var r,o,a,s,d;return zt(this,void 0,void 0,function*(){this.clientToken=i,this.formOptions=e,this.type=Et(e.fields)?At.CreditCard:At.StoredCardVerification;const l=this.mapFieldOptions(e.fields,t);(0,lodash__WEBPACK_IMPORTED_MODULE_2__.isEmpty)(l)?this.isInitializedHostedForm=!1:(this.cardFields=yield this.createHostedFields({fields:l,styles:e.styles&&this.mapStyleOptions(e.styles)}),null===(r=this.cardFields)||void 0===r||r.on(\"blur\",this.handleBlur),null===(o=this.cardFields)||void 0===o||o.on(\"focus\",this.handleFocus),null===(a=this.cardFields)||void 0===a||a.on(\"cardTypeChange\",this.handleCardTypeChange),null===(s=this.cardFields)||void 0===s||s.on(\"validityChange\",this.handleValidityChange),null===(d=this.cardFields)||void 0===d||d.on(\"inputSubmitRequest\",this.handleInputSubmitRequest),this.isInitializedHostedForm=!0)})}isInitialized(){return!!this.isInitializedHostedForm}deinitialize(){var e;return zt(this,void 0,void 0,function*(){this.isInitializedHostedForm&&(this.isInitializedHostedForm=!1,yield null===(e=this.cardFields)||void 0===e?void 0:e.teardown())})}validate(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);const e=this.cardFields.getState();if(!this.isValidForm(e)){this.handleValidityChange(e);const t=this.mapValidationErrors(e.fields);throw new S(t)}}tokenize(e){var t,i,n,r,a;return zt(this,void 0,void 0,function*(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);try{const r=yield this.cardFields.tokenize((0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({billingAddress:e&&this.mapBillingAddress(e)},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil));return null===(i=null===(t=this.formOptions)||void 0===t?void 0:t.onValidate)||void 0===i||i.call(t,{isValid:!0,errors:{}}),{nonce:r.nonce,bin:null===(n=r.details)||void 0===n?void 0:n.bin}}catch(e){if(Tt(e)){const t=this.mapTokenizeError(e);if(t)throw null===(a=null===(r=this.formOptions)||void 0===r?void 0:r.onValidate)||void 0===a||a.call(r,{isValid:!1,errors:t}),new S(t)}throw e}})}tokenizeForStoredCardVerification(){var e,t,i,n,r;return zt(this,void 0,void 0,function*(){if(!this.cardFields)throw new I(P.PaymentNotInitialized);try{const n=yield this.cardFields.tokenize();return null===(t=null===(e=this.formOptions)||void 0===e?void 0:e.onValidate)||void 0===t||t.call(e,{isValid:!0,errors:{}}),{nonce:n.nonce,bin:null===(i=n.details)||void 0===i?void 0:i.bin}}catch(e){if(Tt(e)){const t=this.mapTokenizeError(e,!0);if(t)throw null===(r=null===(n=this.formOptions)||void 0===n?void 0:n.onValidate)||void 0===r||r.call(n,{isValid:!1,errors:t}),new S(t)}throw e}})}createHostedFields(e){return zt(this,void 0,void 0,function*(){const t=yield this.getClient(),i=yield this.braintreeScriptLoader.loadHostedFields(),n=this.braintreeSDKVersionManager.getSDKVersion()===m?Object.assign(Object.assign({},e),{preventCursorJumps:!0}):e;return i.create(Object.assign(Object.assign({},n),{client:t}))})}getClient(){return zt(this,void 0,void 0,function*(){if(!this.clientToken)throw new I(P.PaymentNotInitialized);if(!this.client){const e=yield this.braintreeScriptLoader.loadClient();this.client=e.create({authorization:this.clientToken})}return this.client})}mapBillingAddress(e){return{countryName:e.country,postalCode:e.postalCode,streetAddress:e.address2?`${e.address1} ${e.address2}`:e.address1}}mapFieldOptions(e,t){if(Et(e)){const i={};return null==t||t.forEach(e=>{(e=>Object.values(se).includes(e))(e)&&(i[e]=!1)}),(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({number:Object.assign({container:`#${e.cardNumber.containerId}`,placeholder:e.cardNumber.placeholder,internalLabel:e.cardNumber.accessibilityLabel},Object.keys(i).length>0?{supportedCardBrands:i}:{}),expirationDate:{container:`#${e.cardExpiry.containerId}`,placeholder:e.cardExpiry.placeholder,internalLabel:e.cardExpiry.accessibilityLabel},cvv:e.cardCode&&{container:`#${e.cardCode.containerId}`,placeholder:e.cardCode.placeholder,internalLabel:e.cardCode.accessibilityLabel},cardholderName:{container:`#${e.cardName.containerId}`,placeholder:e.cardName.placeholder,internalLabel:e.cardName.accessibilityLabel}},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}return (0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({number:e.cardNumberVerification&&{container:`#${e.cardNumberVerification.containerId}`,placeholder:e.cardNumberVerification.placeholder},cvv:e.cardCodeVerification&&{container:`#${e.cardCodeVerification.containerId}`,placeholder:e.cardCodeVerification.placeholder}},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil)}mapStyleOptions(e){const t=(e={})=>(0,lodash__WEBPACK_IMPORTED_MODULE_2__.omitBy)({color:e.color,\"font-family\":e.fontFamily,\"font-size\":e.fontSize,\"font-weight\":e.fontWeight},lodash__WEBPACK_IMPORTED_MODULE_2__.isNil);return{input:t(e.default),\".invalid\":t(e.error),\":focus\":t(e.focus)}}mapFieldType(e){switch(e){case\"number\":return this.type===At.StoredCardVerification?x.CardNumberVerification:x.CardNumber;case\"expirationDate\":return x.CardExpiry;case\"cvv\":return this.type===At.StoredCardVerification?x.CardCodeVerification:x.CardCode;case\"cardholderName\":return x.CardName;default:throw new Error(\"Unexpected field type\")}}mapErrors(e){const t={};if(e)for(const[i,n]of Object.entries(e))if(n&&this.isValidParam(i)){const{isValid:e,isEmpty:r,isPotentiallyValid:o}=n;t[i]={isValid:e,isEmpty:r,isPotentiallyValid:o}}return t}mapValidationErrors(e){return Object.keys(e).reduce((t,i)=>{var n;return Object.assign(Object.assign({},t),{[this.mapFieldType(i)]:(null===(n=e[i])||void 0===n?void 0:n.isValid)?void 0:[this.createInvalidError(this.mapFieldType(i))]})},{})}mapTokenizeError(e,t=!1){var i,n;if(\"HOSTED_FIELDS_FIELDS_EMPTY\"===e.code){const e=[this.createRequiredError(this.mapFieldType(\"cvv\"))];return t?{[this.mapFieldType(\"cvv\")]:e}:{[this.mapFieldType(\"cvv\")]:e,[this.mapFieldType(\"expirationDate\")]:[this.createRequiredError(this.mapFieldType(\"expirationDate\"))],[this.mapFieldType(\"number\")]:[this.createRequiredError(this.mapFieldType(\"number\"))],[this.mapFieldType(\"cardholderName\")]:[this.createRequiredError(this.mapFieldType(\"cardholderName\"))]}}return null===(n=null===(i=e.details)||void 0===i?void 0:i.invalidFieldKeys)||void 0===n?void 0:n.reduce((e,t)=>{const i=this.mapFieldType(t);return Object.assign(Object.assign({},e),{[i]:[this.createInvalidError(i)]})},{})}createRequiredError(e){var t;return{fieldType:e,message:null!==(t={[x.CardCode]:\"CVV is required\",[x.CardCodeVerification]:\"CVV is required\",[x.CardNumber]:\"Credit card number is required\",[x.CardNumberVerification]:\"Credit card number is required\",[x.CardExpiry]:\"Expiration date is required\",[x.CardName]:\"Full name is required\"}[e])&&void 0!==t?t:\"Field is required\",type:\"required\"}}createInvalidError(e){var t,i,n,r;const o={[x.CardCode]:{message:\"Invalid card code\",type:\"invalid_card_code\"},[x.CardCodeVerification]:{message:\"Invalid card code\",type:\"invalid_card_code\"},[x.CardNumber]:{message:\"Invalid card number\",type:\"invalid_card_number\"},[x.CardNumberVerification]:{message:\"Invalid card number\",type:\"invalid_card_number\"},[x.CardExpiry]:{message:\"Invalid card expiry\",type:\"invalid_card_expiry\"},[x.CardName]:{message:\"Invalid card name\",type:\"invalid_card_name\"}};return{fieldType:e,message:null!==(i=null===(t=o[e])||void 0===t?void 0:t.message)&&void 0!==i?i:\"Invalid field\",type:null!==(r=null===(n=o[e])||void 0===n?void 0:n.type)&&void 0!==r?r:\"invalid\"}}isValidForm(e){return Object.keys(e.fields).every(t=>{var i;return null===(i=e.fields[t])||void 0===i?void 0:i.isValid})}isValidParam(e){return[\"number\",\"cvv\",\"expirationDate\",\"postalCode\",\"cardholderName\",\"cardType\"].includes(e)}}const Mt=q(e=>{const i=window,n=new v(e),r=new W((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_1__.getScriptLoader)(),i,n),o=new V(r,i),a=new Nt(r,n);return new kt(e,o,a)},[{id:\"braintree\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY2hlY2tvdXQtc2RrLWpzL2Rpc3QvZXNtL2ludGVncmF0aW9ucy9icmFpbnRyZWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBSUEsRUFBc0IsQ0FBQyxFQ0daLFNBQVNDLEVBQ3BCQyxFQUNBQyxFQUNBQyxHQUFnQixHLE1BRWhCLE9BQStCLFFBQXhCLEVBQUFGLEVBQVNDLFVBQWUsUUFBSUMsQ0FDdkMsQ0NUQUosRUFBb0JLLEVBQUksQ0FBQ0MsRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYUCxFQUFvQlMsRUFBRUYsRUFBWUMsS0FBU1IsRUFBb0JTLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsTUNKM0VSLEVBQW9CUyxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQTNFLE1BQU1JLEVBQTBDLFVBQzFDQyxFQUFnQyxVQUNoQ0MsRUFBK0IsVUNVN0IsTUFBTUMsRUFHakIsV0FBQUMsQ0FBb0JDLEdBQUEsS0FBQUEsMEJBQUFBLEVBRlosS0FBQUMsZ0JBQXVDQyxNQUU0QixDQUUzRSxhQUFBQyxHQUNJLE1BQ01DLEVBRFFDLEtBQUtMLDBCQUEwQk0sV0FDbkJDLGlCQUNwQjdCLEdBQVcwQixhQUFXLEVBQVhBLEVBQWFJLGlCQUFpQjlCLFdBQVksQ0FBQyxFQUk1RCxPQUZ5QjJCLEtBQUtJLDJCQU0xQmhDLEVBQW9CQyxFQUFVLG1EQUN2QmlCLEVBR1BsQixFQUFvQkMsRUFBVSw0Q0FDdkJrQixFQUdKQyxFQUNYLENBRVEsc0JBQUFZLEdBQ0osTUFBTUMsRUFBWUwsS0FBS0osZ0JBQWdCUyxVQUV2QyxHQUFJQSxFQUFXLENBQ1gsTUFBTUMsRUFBbUJDLDRDQUFBQSxDQUNyQjFCLE9BQU8yQixPQUFPSCxHQUNiSSxLQUFhQSxFQUFPQyxTQUd6QixPQUFPSixhQUFnQixF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LFVBRTdDLENBcUNRLFdBQUEwK0IsQ0FBWTdPLEdBQ2hCLE9BQ0loeUIsT0FBT3VaLEtBQUt5WSxFQUFNdUosUUFDcEJpRSxNQUFPMS9CLElBQU8sTUFBQyxPQUFpQixRQUFqQixFQUFBa3lCLEVBQU11SixPQUFPejdCLFVBQUksZUFBRThnQyxTQUN4QyxDQUVRLFlBQUFvQyxDQUFhbGpDLEdBQ2pCLE1BQU8sQ0FDSCxTQUNBLE1BQ0EsaUJBQ0EsYUFDQSxpQkFDQSxZQUNGOGhDLFNBQVM5aEMsRUFDZixFRTVkSixNQThCQSxHQUFlZ1QsRUE1QlZoUyxJQUNELE1BQU1pRSxFQUEyQy9ELE9BRTNDdVEsRUFBNkIsSUFBSTNRLEVBQTJCRSxHQUU1RGdFLEVBQXdCLElBQUl1TSxFQUM5QjBHLDJFQUFBQSxHQUNBaFQsRUFDQXdNLEdBR0UwQyxFQUE4QixJQUFJcFAsRUFDcENDLEVBQ0FDLEdBR0UrNEIsRUFBc0IsSUFBSTRCLEdBQzVCNTZCLEVBQ0F5TSxHQUdKLE9BQU8sSUFBSXNzQixHQUNQLzhCLEVBQ0FtVCxFQUNBNnBCLElBSW9FLENBQUMsQ0FBRTdsQixHQUFJLGUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3dlYnBhY2svYm9vdHN0cmFwP2ZmY2MiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3V0aWxpdHkvc3JjL2lzLWV4cGVyaW1lbnQtZW5hYmxlZC9pcy1leHBlcmltZW50LWVuYWJsZWQudHM/YzlhNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycz85OTRjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZD85ZWE0Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2JyYWludHJlZS1zZGstdmVyaXNvbi50cz9mOWFiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2JyYWludHJlZS1zZGstdmVyc2lvbi1tYW5hZ2VyLnRzPzA0ZjgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvc3RhbmRhcmQtZXJyb3IudHM/OGEwMyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9zZXQtcHJvdG90eXBlLW9mLnRzPzg0NWEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy91bnN1cHBvcnRlZC1icm93c2VyLWVycm9yLnRzPzk5N2QiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvaW52YWxpZC1hcmd1bWVudC1lcnJvci50cz8zOTIxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtYXJndW1lbnQtaW52YWxpZC1lcnJvci50cz9hNTAxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtaW52YWxpZC1mb3JtLWVycm9yLnRzP2MwZmIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvbm90LWluaXRpYWxpemVkLWVycm9yLnRzPzhiNGQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvcGF5bWVudC1tZXRob2QtY2FuY2VsbGVkLWVycm9yLnRzPzA4OTAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9jb21tb24vY2FuY2VsbGFibGUtcHJvbWlzZS9jYW5jZWxsYWJsZS1wcm9taXNlLnRzP2Y3NGEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvcGF5cGFsLnRzPzg5YzYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLnRzP2E3OGUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvdXRpbHMvaXMtYnJhaW50cmVlLWVycm9yLnRzPzMyODgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLWludGVncmF0aW9uLXNlcnZpY2UudHM/NTljYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1jcmVkaXQtY2FyZC1pbnN0cnVtZW50LWxpa2UudHM/MTkyOSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1jbGllbnQtdW5hdmFpbGFibGUtZXJyb3IudHM/ZjhlYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9icmFpbnRyZWUtc2RrLXNjcmlwdHMtaW50ZWdyaXR5LnRzP2IyODciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvbWlzc2luZy1kYXRhLWVycm9yLnRzP2I3ZGMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLXNjcmlwdC1sb2FkZXIudHM/NjZhYiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9pc01hbmFnZWFibGVCcmFpbnRyZWVTREtWZXJzaW9uLnRzP2ZkNzAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy90by1yZXNvbHZhYmxlLW1vZHVsZS50cz9kNTIwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvYnJhaW50cmVlLXBheXBhbC1jdXN0b21lci1zdHJhdGVneS50cz84MGI1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY2hlY2tvdXQtYnV0dG9ucy9kZWZhdWx0LWNoZWNrb3V0LWJ1dHRvbi1oZWlnaHQudHM/ZDQyNSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsL2NyZWF0ZS1icmFpbnRyZWUtcGF5cGFsLWN1c3RvbWVyLXN0cmF0ZWd5LnRzPzBmZGMiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC1jcmVkaXQvYnJhaW50cmVlLXBheXBhbC1jcmVkaXQtY3VzdG9tZXItc3RyYXRlZ3kudHM/YjAzMSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC9jcmVhdGUtYnJhaW50cmVlLXBheXBhbC1jcmVkaXQtY3VzdG9tZXItc3RyYXRlZ3kudHM/NjZjZSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9nZXQtZmFzdGxhbmUtc3R5bGVzLnRzPzM4MDgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvdHlwZXMudHM/MzAyMCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3BheW1lbnQvaW5zdHJ1bWVudC50cz9mMmI2Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1mYXN0bGFuZS9icmFpbnRyZWUtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3kudHM/YmQwNyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvc3RvcmFnZS9zcmMvY29va2llLXN0b3JhZ2UudHM/MTUzYyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvYnJhaW50cmVlLWZhc3RsYW5lLXV0aWxzLnRzPzFlZGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLWZhc3RsYW5lL2NyZWF0ZS1icmFpbnRyZWUtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3kudHM/NWU3MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9icmFpbnRyZWUtc2RrLnRzPzgwNjQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvbm90LWltcGxlbWVudGVkLWVycm9yLnRzPzNhMzUiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQtY3VzdG9tZXItc3RyYXRlZ3kudHM/ZGNhZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtdmlzYS1jaGVja291dC9jcmVhdGUtYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQtY3VzdG9tZXItc3RyYXRlZ3kudHM/YjdiMiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9idXktbm93LWNhcnQtY3JlYXRpb24tZXJyb3IudHM/ZDYwNCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9nZXQtdmFsaWQtYnV0dG9uLXN0eWxlLnRzP2UzODgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvbWFwLXRvLWJyYWludHJlZS1zaGlwcGluZy1hZGRyZXNzLW92ZXJyaWRlLnRzP2UzZTYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC9icmFpbnRyZWUtcGF5cGFsLWJ1dHRvbi1zdHJhdGVneS50cz9kYjFhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvY3JlYXRlLWJyYWludHJlZS1wYXlwYWwtYnV0dG9uLXN0cmF0ZWd5LnRzP2ZmMTQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvYnJhaW50cmVlLW1lc3NhZ2VzLnRzPzgwM2UiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC1jcmVkaXQvYnJhaW50cmVlLXBheXBhbC1jcmVkaXQtYnV0dG9uLXN0cmF0ZWd5LnRzPzUzY2QiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXBheXBhbC1jcmVkaXQvY3JlYXRlLWJyYWludHJlZS1wYXlwYWwtY3JlZGl0LWJ1dHRvbi1zdHJhdGVneS50cz84NjQyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12aXNhLWNoZWNrb3V0L2JyYWludHJlZS12aXNhLWNoZWNrb3V0LWJ1dHRvbi1zdHJhdGVneS50cz9mMjRmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12aXNhLWNoZWNrb3V0L2NyZWF0ZS1icmFpbnRyZWUtdmlzYS1jaGVja291dC1idXR0b24tc3RyYXRlZ3kudHM/NjA3NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy9tYXAtdG8tbGVnYWN5LWJpbGxpbmctYWRkcmVzcy50cz85ZDM5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL21hcC10by1sZWdhY3ktc2hpcHBpbmctYWRkcmVzcy50cz80MTQwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2lzLWJyYWludHJlZS1lcnJvci50cz82OWIxIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12ZW5tby9icmFpbnRyZWUtdmVubW8tYnV0dG9uLXN0cmF0ZWd5LnRzPzM5YjgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvaXNVbnN1cHBvcnRlZEJyb3dzZXJFcnJvci50cz9iZTFjIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12ZW5tby9jcmVhdGUtYnJhaW50cmVlLXZlbm1vLWJ1dHRvbi1zdHJhdGVneS50cz83OGE5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvcGF5bWVudC9pcy12YXVsdGVkLWluc3RydW1lbnQudHM/MTgwZiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9vcmRlci1maW5hbGl6YXRpb24tbm90LXJlcXVpcmVkLWVycm9yLnRzP2I1YTEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9wYXltZW50L2lzLWhvc3RlZC1pbnRydW1lbnQtbGlrZS50cz84NzYzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3BheW1lbnQtbWV0aG9kLWZhaWxlZC1lcnJvci50cz8wN2RkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2lzLXVzLWJhbmstYWNjb3VudC1pbnN0cnVtZW50LWxpa2UudHM/MTUwMCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtYWNoL2JyYWludHJlZS1hY2gtcGF5bWVudC1zdHJhdGVneS50cz9hZWNkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1hY2gvY3JlYXRlLWJyYWludHJlZS1hY2gtcGF5bWVudC1zdHJhdGVneS50cz81NWM2Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL2NyZWF0ZS1icmFpbnRyZWUtc2RrLnRzPzM0ZTQiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3VpL3NyYy9vdmVybGF5L292ZXJsYXkudHM/ZWY2OCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvdWkvc3JjL292ZXJsYXkvb3ZlcmxheS1zdHlsZS50cz83NzFmIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy91aS9zcmMvbG9hZGluZy1pbmRpY2F0b3IvbG9hZGluZy1pbmRpY2F0b3IudHM/YjA4NyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtcGF5cGFsLWNvbnN0YW50cy50cz8xNWFhIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvYnJhaW50cmVlLXBheXBhbC1wYXltZW50LXN0cmF0ZWd5LnRzPzAyOGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvaXMtYnJhaW50cmVlLXBheXBhbC1wcm92aWRlci1lcnJvci50cz84NDAwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1wYXlwYWwvY3JlYXRlLWJyYWludHJlZS1wYXlwYWwtcGF5bWVudC1zdHJhdGVneS50cz8yYjEzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9jb250ZW50LXR5cGUudHM/NTA0ZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2NvbW1vbi9odHRwLXJlcXVlc3Qvc2RrLXZlcnNpb24taGVhZGVycy50cz83YmYwIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1yZXF1ZXN0LXNlbmRlci50cz8zOGZiIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvY29tbW9uL2h0dHAtcmVxdWVzdC9pbnRlcm5hbC1hcGktaGVhZGVycy50cz80MTExIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL3JlcXVlc3QtZXJyb3IudHM/Yzg0MCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9wYXltZW50LW1ldGhvZC1pbnZhbGlkLWVycm9yLnRzPzNhZGYiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9lcnJvcnMvdGltZW91dC1lcnJvci50cz8wODBkIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1sb2NhbC1wYXltZW50LW1ldGhvZHMvYnJhaW50cmVlLWxvY2FsLW1ldGhvZHMtcGF5bWVudC1zdHJhdGVneS50cz8zYTIzIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1sb2NhbC1wYXltZW50LW1ldGhvZHMvY3JlYXRlLWJyYWludHJlZS1sb2NhbC1tZXRob2RzLXBheW1lbnQtc3RyYXRlZ3kudHM/ZmRjMyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtYWNjZWxlcmF0ZWQtY2hlY2tvdXQtY3VzdG9tZXIudHM/NzU0MSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvYnJhaW50cmVlLWZhc3RsYW5lLXBheW1lbnQtc3RyYXRlZ3kudHM/YzExYiIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtZmFzdGxhbmUvY3JlYXRlLWJyYWludHJlZS1mYXN0bGFuZS1wYXltZW50LXN0cmF0ZWd5LnRzP2ZjNTAiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQvYnJhaW50cmVlLXZpc2EtY2hlY2tvdXQtcGF5bWVudC1zdHJhdGVneS50cz8xNDIyIiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS12aXNhLWNoZWNrb3V0L2NyZWF0ZS1icmFpbnRyZWUtdmlzYS1jaGVja291dC1wYXltZW50LXN0cmF0ZWd5LnRzPzVlODgiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2JyYWludHJlZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5LnRzPzMwNzIiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLXZlbm1vL2NyZWF0ZS1icmFpbnRyZWUtdmVubW8tcGF5bWVudC1zdHJhdGVneS50cz82MzY1Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtaW50ZWdyYXRpb24vc3JjL2JyYWludHJlZS1jcmVkaXQtY2FyZC9icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1zdHJhdGVneS50cz9hOWE5Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL2lzLXJlcXVlc3QtZXJyb3IudHM/YjQzZCIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtcGF5bWVudC1yZXF1ZXN0LTNkcy1lcnJvci50cz9iODM3Iiwid2VicGFjazovL2NoZWNrb3V0L0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvLi9wYWNrYWdlcy9icmFpbnRyZWUtdXRpbHMvc3JjL3V0aWxzL2lzLWJyYWludHJlZS1mb3JtLWZpZWxkcy1tYXAudHM/MWU0YyIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLXV0aWxzL3NyYy91dGlscy9pcy1icmFpbnRyZWUtaG9zdGVkLWZvcm0tZXJyb3IudHM/ZWQ1OSIsIndlYnBhY2s6Ly9jaGVja291dC9AYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrLy4vcGFja2FnZXMvYnJhaW50cmVlLWludGVncmF0aW9uL3NyYy9icmFpbnRyZWUtaG9zdGVkLWZvcm0vYnJhaW50cmVlLWhvc3RlZC1mb3JtLnRzPzUxYzEiLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS11dGlscy9zcmMvdXRpbHMvaXMtYnJhaW50cmVlLXN1cHBvcnRlZC1jYXJkLWJyYW5kLnRzP2Y5ZTciLCJ3ZWJwYWNrOi8vY2hlY2tvdXQvQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay8uL3BhY2thZ2VzL2JyYWludHJlZS1pbnRlZ3JhdGlvbi9zcmMvYnJhaW50cmVlLWNyZWRpdC1jYXJkL2NyZWF0ZS1icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1zdHJhdGVneS50cz9hNTBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCJleHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVzIHtcbiAgICBbZmVhdHVyZU5hbWU6IHN0cmluZ106IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRXhwZXJpbWVudEVuYWJsZWQoXG4gICAgZmVhdHVyZXM6IEZlYXR1cmVzLFxuICAgIGV4cGVyaW1lbnROYW1lOiBzdHJpbmcsXG4gICAgZmFsbGJhY2tWYWx1ZSA9IHRydWUsXG4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmVhdHVyZXNbZXhwZXJpbWVudE5hbWVdID8/IGZhbGxiYWNrVmFsdWU7XG59XG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiZXhwb3J0IGNvbnN0IEJSQUlOVFJFRV9TREtfSE9TVEVEX0ZJRUxEU19GSVhfVkVSU0lPTiA9ICczLjEyOC4wJztcbmV4cG9ydCBjb25zdCBCUkFJTlRSRUVfU0RLX0RFRkFVTFRfVkVSU0lPTiA9ICczLjEyMy4yJztcbmV4cG9ydCBjb25zdCBCUkFJTlRSRUVfU0RLX1NUQUJMRV9WRVJTSU9OID0gJzMuMTA2LjAnO1xuIiwiaW1wb3J0IHsgZmluZCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IGlzRXhwZXJpbWVudEVuYWJsZWQgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3V0aWxpdHknO1xuXG5pbXBvcnQgeyBCcmFpbnRyZWVIb3N0V2luZG93IH0gZnJvbSAnLi9icmFpbnRyZWUnO1xuaW1wb3J0IHtcbiAgICBCUkFJTlRSRUVfU0RLX0RFRkFVTFRfVkVSU0lPTixcbiAgICBCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT04sXG4gICAgQlJBSU5UUkVFX1NES19TVEFCTEVfVkVSU0lPTixcbn0gZnJvbSAnLi9icmFpbnRyZWUtc2RrLXZlcmlzb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpIHt9XG5cbiAgICBnZXRTREtWZXJzaW9uKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBzdG9yZUNvbmZpZyA9IHN0YXRlLmdldFN0b3JlQ29uZmlnKCk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RvcmVDb25maWc/LmNoZWNrb3V0U2V0dGluZ3MuZmVhdHVyZXMgfHwge307XG5cbiAgICAgICAgY29uc3QgcHJlbG9hZGVkVmVyc2lvbiA9IHRoaXMuZ2V0UHJlbG9hZGVkU0RLVmVyc2lvbigpO1xuXG4gICAgICAgIGlmIChwcmVsb2FkZWRWZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlbG9hZGVkVmVyc2lvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0V4cGVyaW1lbnRFbmFibGVkKGZlYXR1cmVzLCAnUEFZUEFMLTU4MDkuYnJhaW50cmVlX2hvc3RlZF9maWVsZHNfZml4X3ZlcnNpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuIEJSQUlOVFJFRV9TREtfSE9TVEVEX0ZJRUxEU19GSVhfVkVSU0lPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0V4cGVyaW1lbnRFbmFibGVkKGZlYXR1cmVzLCAnUEFZUEFMLTU2MzYudXBkYXRlX2JyYWludHJlZV9zZGtfdmVyc2lvbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gQlJBSU5UUkVFX1NES19ERUZBVUxUX1ZFUlNJT047XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQlJBSU5UUkVFX1NES19TVEFCTEVfVkVSU0lPTjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFByZWxvYWRlZFNES1ZlcnNpb24oKTogdm9pZCB8IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGJyYWludHJlZSA9IHRoaXMuYnJhaW50cmVlV2luZG93LmJyYWludHJlZTtcblxuICAgICAgICBpZiAoYnJhaW50cmVlKSB7XG4gICAgICAgICAgICBjb25zdCBwcmVsb2FkZWRWZXJzaW9uID0gZmluZDx7IFZFUlNJT04/OiBzdHJpbmcgfT4oXG4gICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhicmFpbnRyZWUpLFxuICAgICAgICAgICAgICAgIChtb2R1bGUpID0+ICEhbW9kdWxlLlZFUlNJT04sXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4gcHJlbG9hZGVkVmVyc2lvbj8uVkVSU0lPTjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCBDdXN0b21FcnJvciBmcm9tICcuL2N1c3RvbS1lcnJvcic7XG5pbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSAnLi9zZXQtcHJvdG90eXBlLW9mJztcblxuLyoqXG4gKiBUaGlzIGVycm9yIHR5cGUgc2hvdWxkIG5vdCBiZSBjb25zdHJ1Y3RlZCBkaXJlY3RseS4gSXQgaXMgYSBiYXNlIGNsYXNzIGZvclxuICogYWxsIGN1c3RvbSBlcnJvcnMgdGhyb3duIGluIHRoaXMgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU3RhbmRhcmRFcnJvciBleHRlbmRzIEVycm9yIGltcGxlbWVudHMgQ3VzdG9tRXJyb3Ige1xuICAgIG5hbWUgPSAnU3RhbmRhcmRFcnJvcic7XG4gICAgdHlwZSA9ICdzdGFuZGFyZCc7XG5cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkLicpO1xuXG4gICAgICAgIHNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcblxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBuZXcudGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKS5zdGFjaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKG9iamVjdDogYW55LCBwcm90b3R5cGU6IG9iamVjdCkge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iamVjdCwgcHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59XG4iLCJpbXBvcnQgeyBTdGFuZGFyZEVycm9yIH0gZnJvbSAnLi9pbmRleCc7XG5cbi8qKlxuICogVGhyb3cgdGhpcyBlcnJvciBpZiB0aGUgc2hvcHBlciBpcyB1c2luZyBhIGJyb3dzZXIgdmVyc2lvbiB0aGF0IGlzIG5vdFxuICogc3VwcG9ydGVkIGJ5IHVzIG9yIGFueSB0aGlyZCBwYXJ0eSBwcm92aWRlciB3ZSB1c2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuc3VwcG9ydGVkQnJvd3NlckVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdVbnN1cHBvcnRlZCBicm93c2VyIGVycm9yJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3VwcG9ydGVkQnJvd3NlckVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3Vuc3VwcG9ydGVkX2Jyb3dzZXInO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIGEgbWV0aG9kIGlzIHVuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlXG4gKiBjYWxsZXIgaGFzIG5vdCBwcm92aWRlZCBhbGwgdGhlIGFyZ3VtZW50cyBhY2NvcmRpbmcgdG8gdGhlaXIgcmVxdWlyZW1lbnRzLFxuICogaS5lLjogaWYgYW4gYXJndW1lbnQgaXMgbWlzc2luZyBvciBpdCBpcyBub3QgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0ludmFsaWQgYXJndW1lbnRzIGhhdmUgYmVlbiBwcm92aWRlZC4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnSW52YWxpZEFyZ3VtZW50RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnaW52YWxpZF9hcmd1bWVudCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IEludmFsaWRBcmd1bWVudEVycm9yIGZyb20gJy4vaW52YWxpZC1hcmd1bWVudC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gd2UgYXJlIHVuYWJsZSB0byBzdWJtaXQgYSBwYXltZW50IGJlY2F1c2VcbiAqIHRoZSBjYWxsZXIgaGFzIG5vdCBwcm92aWRlZCBhbGwgdGhlIHJlcXVpcmVkIGZpZWxkcywgaS5lLjogaWYgYW4gYXJndW1lbnQgaXNcbiAqIG1pc3Npbmcgb3IgaXQgaXMgbm90IHRoZSBleHBlY3RlZCBkYXRhIHR5cGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvciBleHRlbmRzIEludmFsaWRBcmd1bWVudEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihpbnZhbGlkRmllbGRzPzogc3RyaW5nW10pIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnVW5hYmxlIHRvIHN1Ym1pdCBwYXltZW50IGZvciB0aGUgb3JkZXIgYmVjYXVzZSB0aGUgcGF5bG9hZCBpcyBpbnZhbGlkLic7XG5cbiAgICAgICAgaWYgKGludmFsaWRGaWVsZHMpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBNYWtlIHN1cmUgdGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIHByb3ZpZGVkIGNvcnJlY3RseTogJHtpbnZhbGlkRmllbGRzLmpvaW4oXG4gICAgICAgICAgICAgICAgJywgJyxcbiAgICAgICAgICAgICl9LmA7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yJztcbiAgICB9XG59XG4iLCJpbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuZXhwb3J0IGludGVyZmFjZSBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMge1xuICAgIFtrZXk6IHN0cmluZ106IEFycmF5PHsgbWVzc2FnZTogc3RyaW5nOyB0eXBlOiBzdHJpbmcgfT47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGRldGFpbHM6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscywgbWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihtZXNzYWdlIHx8ICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBwYXltZW50IGZvcm0gY29udGFpbnMgaW52YWxpZCBkYXRhLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50SW52YWxpZEZvcm1FcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X2ludmFsaWRfZm9ybSc7XG4gICAgfVxufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbmV4cG9ydCBlbnVtIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlIHtcbiAgICBDaGVja291dEJ1dHRvbk5vdEluaXRpYWxpemVkLFxuICAgIEN1c3RvbWVyTm90SW5pdGlhbGl6ZWQsXG4gICAgUGF5bWVudE5vdEluaXRpYWxpemVkLFxuICAgIFNoaXBwaW5nTm90SW5pdGlhbGl6ZWQsXG4gICAgU3BhbVByb3RlY3Rpb25Ob3RJbml0aWFsaXplZCxcbn1cblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIGEgbWV0aG9kIHJlcXVpcmVzIGEgY2VydGFpbiBpbml0aWFsaXphdGlvbiBjYWxsIHRvIGJlXG4gKiBtYWRlIGZpcnN0LiBTb21lIG9iamVjdHMgY2FuIGJlIGNvbnN0cnVjdGVkIGJ1dCB0aGV5IGNhbm5vdCBiZSB1c2VkIHVudGlsIGFcbiAqIHNlcGFyYXRlIGluaXRpYWxpemF0aW9uIGNhbGwgaXMgbWFkZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90SW5pdGlhbGl6ZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdWJ0eXBlOiBOb3RJbml0aWFsaXplZEVycm9yVHlwZSkge1xuICAgICAgICBzdXBlcihnZXRFcnJvck1lc3NhZ2Uoc3VidHlwZSkpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdOb3RJbml0aWFsaXplZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ25vdF9pbml0aWFsaXplZCc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRFcnJvck1lc3NhZ2UodHlwZTogTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLkN1c3RvbWVyTm90SW5pdGlhbGl6ZWQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIGN1c3RvbWVyIHN0ZXAgb2YgY2hlY2tvdXQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG5cbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5QYXltZW50Tm90SW5pdGlhbGl6ZWQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHBheW1lbnQgc3RlcCBvZiBjaGVja291dCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJztcblxuICAgICAgICBjYXNlIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlNoaXBwaW5nTm90SW5pdGlhbGl6ZWQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHNoaXBwaW5nIHN0ZXAgb2YgY2hlY2tvdXQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG5cbiAgICAgICAgY2FzZSBOb3RJbml0aWFsaXplZEVycm9yVHlwZS5TcGFtUHJvdGVjdGlvbk5vdEluaXRpYWxpemVkOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjaGVja291dCBzcGFtIHByb3RlY3Rpb24gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLic7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgcmVxdWlyZWQgY29tcG9uZW50IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4nO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIHRoZSBwYXltZW50IGZsb3cgaXMgY2FuY2VsbGVkLiBJdCBjb3VsZCBiZVxuICogZHVlIHRvIGEgZGVsaWJlcmF0ZSB1c2VyIGludGVyYWN0aW9uLCBpLmUuOiB0aGUgdXNlciBjbGlja3Mgb24gYSBjYW5jZWxcbiAqIGJ1dHRvbiB3aGljaCBkaXNtaXNzZXMgdGhlIHBheW1lbnQgbW9kYWwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnUGF5bWVudCBwcm9jZXNzIHdhcyBjYW5jZWxsZWQuJyk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ1BheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X2NhbmNlbGxlZCc7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FuY2VsbGFibGVQcm9taXNlPFQ+IHtcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+O1xuICAgIGNhbmNlbCE6IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9taXNlOiBQcm9taXNlPFQ+KSB7XG4gICAgICAgIGNvbnN0IGNhbmNlbGxhYmxlID0gbmV3IFByb21pc2U8VD4oKF8sIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IFByb21pc2UucmFjZShbcHJvbWlzZSwgY2FuY2VsbGFibGVdKTtcbiAgICB9XG59XG4iLCIvLyB0aGUgUGF5UGFsIHNpZGUgb2YgdGhpbmdzIHVzZXMgdXBwZXJjYXNlIGtleXMgaW5zdGVhZCBvZiBjYW1lbCBjYXNlXG5cbi8qKlxuICpcbiAqIFBheVBhbCBjb25zdGFudHNcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCBQQVlQQUxfQ09NUE9ORU5UUyA9IFsnYnV0dG9ucycsICdtZXNzYWdlcyddO1xuXG5leHBvcnQgZW51bSBQYXlwYWxCdXR0b25TdHlsZUxheW91dE9wdGlvbiB7XG4gICAgSE9SSVpPTlRBTCA9ICdob3Jpem9udGFsJyxcbiAgICBWRVJUSUNBTCA9ICd2ZXJ0aWNhbCcsXG59XG5cbmV4cG9ydCBlbnVtIFBheXBhbEJ1dHRvblN0eWxlU2l6ZU9wdGlvbiB7XG4gICAgU01BTEwgPSAnc21hbGwnLFxuICAgIE1FRElVTSA9ICdtZWRpdW0nLFxuICAgIExBUkdFID0gJ2xhcmdlJyxcbiAgICBSRVNQT05TSVZFID0gJ3Jlc3BvbnNpdmUnLFxufVxuXG5leHBvcnQgZW51bSBQYXlwYWxCdXR0b25TdHlsZUNvbG9yT3B0aW9uIHtcbiAgICBHT0xEID0gJ2dvbGQnLFxuICAgIEJMVUUgPSAnYmx1ZScsXG4gICAgU0lsVkVSID0gJ3NpbHZlcicsXG4gICAgQkxBQ0sgPSAnYmxhY2snLFxuICAgIFdISVRFID0gJ3doaXRlJyxcbn1cblxuZXhwb3J0IGVudW0gUGF5cGFsQnV0dG9uU3R5bGVMYWJlbE9wdGlvbiB7XG4gICAgQ0hFQ0tPVVQgPSAnY2hlY2tvdXQnLFxuICAgIFBBWSA9ICdwYXknLFxuICAgIEJVWU5PVyA9ICdidXlub3cnLFxuICAgIFBBWVBBTCA9ICdwYXlwYWwnLFxuICAgIENSRURJVCA9ICdjcmVkaXQnLFxufVxuXG5leHBvcnQgZW51bSBQYXlwYWxCdXR0b25TdHlsZVNoYXBlT3B0aW9uIHtcbiAgICBQSUxMID0gJ3BpbGwnLFxuICAgIFJFQ1QgPSAncmVjdCcsXG59XG5cbi8qKlxuICpcbiAqIFBheVBhbCBpbnRlcmZhY2VzXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbFNESyB7XG4gICAgQnV0dG9uOiBQYXlwYWxCdXR0b247XG4gICAgY2hlY2tvdXQ6IFBheXBhbEV4cHJlc3NDaGVja291dDtcbiAgICBGVU5ESU5HOiBQYXlwYWxGdW5kaW5nVHlwZUxpc3Q7XG4gICAgQnV0dG9ucyhvcHRpb25zOiBQYXlwYWxCdXR0b25PcHRpb25zKTogUGF5cGFsQnV0dG9uUmVuZGVyO1xuICAgIE1lc3NhZ2VzKG9wdGlvbnM6IE1lc3NhZ2luZ09wdGlvbnMpOiBNZXNzYWdpbmdSZW5kZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGF5cGFsQnV0dG9uIHtcbiAgICByZW5kZXIob3B0aW9uczogUGF5cGFsQnV0dG9uT3B0aW9ucywgY29udGFpbmVyOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEV4cHJlc3NDaGVja291dCB7XG4gICAgaW5pdFhPKCk6IHZvaWQ7XG4gICAgc3RhcnRGbG93KHVybDogc3RyaW5nKTogdm9pZDtcbiAgICBjbG9zZUZsb3coKTogdm9pZDtcbiAgICBzZXR1cChtZXJjaGFudElkOiBzdHJpbmcsIG9wdGlvbnM6IFBheXBhbEV4cHJlc3NDaGVja291dE9wdGlvbnMpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEV4cHJlc3NDaGVja291dE9wdGlvbnMge1xuICAgIGJ1dHRvbjogc3RyaW5nO1xuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnaW5nT3B0aW9ucyB7XG4gICAgYW1vdW50OiBudW1iZXI7XG4gICAgYnV5ZXJDb3VudHJ5Pzogc3RyaW5nO1xuICAgIHBsYWNlbWVudDogc3RyaW5nO1xuICAgIHN0eWxlPzogTWVzc2FnZXNTdHlsZU9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZXNTdHlsZU9wdGlvbnMge1xuICAgIGNvbG9yPzogc3RyaW5nOyAvLyAnYmx1ZScgfCAnYmxhY2snIHwgJ3doaXRlJyB8ICd3aGl0ZS1uby1ib3JkZXInIHwgJ2dyYXknIHwgJ21vbm9jaHJvbWUnIHwgJ2dyYXlzY2FsZSdcbiAgICBsYXlvdXQ/OiBzdHJpbmc7IC8vICd0ZXh0JyB8ICdmbGV4J1xuICAgIGxvZ28/OiB7XG4gICAgICAgIHR5cGU/OiBzdHJpbmc7IC8vICdwcmltYXJ5JyB8ICdhbHRlcm5hdGl2ZScgfCAnaW5saW5lJyB8ICdub25lJ1xuICAgICAgICBwb3NpdGlvbj86IHN0cmluZzsgLy8gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICd0b3AnXG4gICAgfTtcbiAgICByYXRpbz86IHN0cmluZzsgLy8gJzF4MScgfCAnMXg0JyB8ICc4eDEnIHwgJzIweDEnXG4gICAgdGV4dD86IHtcbiAgICAgICAgYWxpZ24/OiBzdHJpbmc7IC8vICdsZWZ0JyB8ICdyaWdodCcgfCAnY2VudGVyJ1xuICAgICAgICBjb2xvcj86IHN0cmluZzsgLy8gJ2JsYWNrJyB8ICd3aGl0ZScgfCAnbW9ub2Nocm9tZScgfCAnZ3JheXNjYWxlJ1xuICAgICAgICBzaXplPzogbnVtYmVyOyAvLyBmcm9tIDEwIHRvIDE2XG4gICAgfTtcbn1cblxuZXhwb3J0IGVudW0gTWVzc2FnaW5nUGxhY2VtZW50cyB7XG4gICAgQ0FSVCA9ICdjYXJ0JyxcbiAgICBIT01FID0gJ2hvbWVwYWdlJyxcbiAgICBQQVlNRU5UID0gJ3BheW1lbnQnLFxuICAgIFBST0RVQ1QgPSAncHJvZHVjdCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnaW5nUmVuZGVyIHtcbiAgICByZW5kZXIoY29udGFpbmVyOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEJ1dHRvbk9wdGlvbnMge1xuICAgIGVudj86IHN0cmluZztcbiAgICBjb21taXQ/OiBib29sZWFuO1xuICAgIHN0eWxlPzogUGF5cGFsU3R5bGVPcHRpb25zO1xuICAgIGZ1bmRpbmc/OiBQYXlwYWxGdW5kaW5nVHlwZTtcbiAgICBmdW5kaW5nU291cmNlPzogc3RyaW5nO1xuICAgIGNsaWVudD86IFBheXBhbENsaWVudFRva2VuO1xuICAgIHBheW1lbnQ/KGRhdGE/OiBQYXlwYWxBdXRob3JpemVEYXRhLCBhY3Rpb25zPzogUGF5cGFsQWN0aW9ucyk6IFByb21pc2U8dW5rbm93bj47XG4gICAgb25BdXRob3JpemU/KGRhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsIGFjdGlvbnM/OiBQYXlwYWxBY3Rpb25zKTogUHJvbWlzZTx1bmtub3duPjtcbiAgICBjcmVhdGVPcmRlcj8oZGF0YT86IFBheXBhbEF1dGhvcml6ZURhdGEsIGFjdGlvbnM/OiBQYXlwYWxBY3Rpb25zKTogUHJvbWlzZTx1bmtub3duPjtcbiAgICBvbkFwcHJvdmU/KGRhdGE/OiBQYXlwYWxBdXRob3JpemVEYXRhLCBhY3Rpb25zPzogUGF5cGFsQWN0aW9ucyk6IFByb21pc2U8dW5rbm93bj47XG4gICAgb25DbGljaz8oKTogdm9pZDtcbiAgICBvbkNhbmNlbD8oKTogdm9pZDtcbiAgICBvbkVycm9yPyhlcnJvcjogRXJyb3IpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbFN0eWxlT3B0aW9ucyB7XG4gICAgbGF5b3V0PzogUGF5cGFsQnV0dG9uU3R5bGVMYXlvdXRPcHRpb247XG4gICAgc2l6ZT86IFBheXBhbEJ1dHRvblN0eWxlU2l6ZU9wdGlvbjtcbiAgICBjb2xvcj86IFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb247XG4gICAgbGFiZWw/OiBQYXlwYWxCdXR0b25TdHlsZUxhYmVsT3B0aW9uO1xuICAgIHNoYXBlPzogUGF5cGFsQnV0dG9uU3R5bGVTaGFwZU9wdGlvbjtcbiAgICB0YWdsaW5lPzogYm9vbGVhbjtcbiAgICBmdW5kaW5naWNvbnM/OiBib29sZWFuO1xuICAgIGhlaWdodD86IG51bWJlciB8IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxDbGllbnRUb2tlbiB7XG4gICAgcHJvZHVjdGlvbj86IHN0cmluZztcbiAgICBzYW5kYm94Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEZ1bmRpbmdUeXBlIHtcbiAgICBhbGxvd2VkPzogc3RyaW5nW107XG4gICAgZGlzYWxsb3dlZD86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEFjdGlvbnMge1xuICAgIHBheW1lbnQ6IFBheXBhbFBheW1lbnRBY3Rpb25zO1xuICAgIHJlcXVlc3Q6IFBheXBhbFJlcXVlc3RBY3Rpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbEJ1dHRvblJlbmRlciB7XG4gICAgcmVuZGVyKGNvbnRhaW5lcjogc3RyaW5nKTogdm9pZDtcbiAgICBpc0VsaWdpYmxlKCk6IGJvb2xlYW47XG4gICAgY2xvc2UoKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxBdXRob3JpemVEYXRhIHtcbiAgICBwYXllcklkOiBzdHJpbmc7XG4gICAgcGF5bWVudElkPzogc3RyaW5nO1xuICAgIGJpbGxpbmdUb2tlbj86IHN0cmluZztcbiAgICBwYXllcklEPzogc3RyaW5nO1xuICAgIHBheW1lbnRJRD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxGdW5kaW5nVHlwZUxpc3Qge1xuICAgIENBUkQ/OiBzdHJpbmc7XG4gICAgQ1JFRElUPzogc3RyaW5nO1xuICAgIFBBWVBBTD86IHN0cmluZztcbiAgICBQQVlMQVRFUj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxQYXltZW50QWN0aW9ucyB7XG4gICAgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPHVua25vd24+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheXBhbFJlcXVlc3RBY3Rpb25zIHtcbiAgICBwb3N0KHVybDogc3RyaW5nLCBwYXlsb2FkPzogb2JqZWN0LCBvcHRpb25zPzogb2JqZWN0KTogUHJvbWlzZTx7IGlkOiBzdHJpbmcgfT47XG59XG4iLCJpbXBvcnQgeyBPbWl0IH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7XG4gICAgUGF5cGFsQXV0aG9yaXplRGF0YSxcbiAgICBQYXlwYWxCdXR0b25PcHRpb25zLFxuICAgIFBheXBhbEJ1dHRvblJlbmRlcixcbiAgICBQYXlwYWxTREssXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICcuL3BheXBhbCc7XG5pbXBvcnQge1xuICAgIEJyYWludHJlZUNsaWVudENyZWF0b3IsXG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3IsXG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDcmVhdG9yLFxuICAgIEJyYWludHJlZUdvb2dsZVBheW1lbnRDcmVhdG9yLFxuICAgIEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZCxcbiAgICBCcmFpbnRyZWVNb2R1bGUsXG4gICAgQnJhaW50cmVlTW9kdWxlQ3JlYXRvcixcbiAgICBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3IsXG4gICAgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyxcbiAgICBCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVXaW5kb3csXG4gICAgRmFzdGxhbmVTdHlsZXNTZXR0aW5ncyxcbiAgICBWaXNhQ2hlY2tvdXRTREssXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBWaXNhQ2hlY2tvdXRJbml0T3B0aW9ucyxcbiAgICBWaXNhQ2hlY2tvdXRQYXltZW50U3VjY2Vzc1BheWxvYWQsXG4gICAgVmlzYUNoZWNrb3V0VG9rZW5pemVkUGF5bG9hZCxcbn0gZnJvbSAnLi92aXNhY2hlY2tvdXQnO1xuXG4vKipcbiAqXG4gKiBDb25zdGFudHNcbiAqXG4gKi9cbmV4cG9ydCBlbnVtIEJyYWludHJlZUVudiB7XG4gICAgU2FuZGJveCA9ICdzYW5kYm94JyxcbiAgICBQcm9kdWN0aW9uID0gJ3Byb2R1Y3Rpb24nLFxufVxuXG4vKipcbiAqXG4gKiBDb21tb25cbiAqXG4gKi9cbmV4cG9ydCBlbnVtIEJyYWludHJlZU1vZHVsZU5hbWUge1xuICAgIENsaWVudCA9ICdjbGllbnQnLFxuICAgIERhdGFDb2xsZWN0b3IgPSAnZGF0YUNvbGxlY3RvcicsXG4gICAgRmFzdGxhbmUgPSAnZmFzdGxhbmUnLFxuICAgIEdvb2dsZVBheW1lbnQgPSAnZ29vZ2xlUGF5bWVudCcsXG4gICAgSG9zdGVkRmllbGRzID0gJ2hvc3RlZEZpZWxkcycsXG4gICAgTG9jYWxQYXltZW50ID0gJ2xvY2FsUGF5bWVudCcsXG4gICAgUGF5cGFsID0gJ3BheXBhbCcsXG4gICAgUGF5cGFsQ2hlY2tvdXQgPSAncGF5cGFsQ2hlY2tvdXQnLFxuICAgIFRocmVlRFNlY3VyZSA9ICd0aHJlZURTZWN1cmUnLFxuICAgIFVzQmFua0FjY291bnQgPSAndXNCYW5rQWNjb3VudCcsXG4gICAgVmVubW8gPSAndmVubW8nLFxuICAgIFZpc2FDaGVja291dCA9ICd2aXNhQ2hlY2tvdXQnLFxufVxuXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9ycyA9XG4gICAgfCBCcmFpbnRyZWVDbGllbnRDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVGYXN0bGFuZUNyZWF0b3JcbiAgICB8IEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVHb29nbGVQYXltZW50Q3JlYXRvclxuICAgIHwgQnJhaW50cmVlSG9zdGVkRmllbGRzQ3JlYXRvclxuICAgIHwgQnJhaW50cmVlUGF5cGFsQ3JlYXRvclxuICAgIHwgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXRDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVUaHJlZURTZWN1cmVDcmVhdG9yXG4gICAgfCBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0Q3JlYXRvclxuICAgIHwgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3JlYXRvclxuICAgIHwgQnJhaW50cmVlVXNCYW5rQWNjb3VudENyZWF0b3JcbiAgICB8IEJyYWludHJlZUxvY2FsUGF5bWVudENyZWF0b3I7XG5cbi8vIFRPRE86IHJlbmFtZSB0byBCcmFpbnRyZWVTZGtNb2R1bGVzXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVNESyB7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuQ2xpZW50XT86IEJyYWludHJlZUNsaWVudENyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuRmFzdGxhbmVdPzogQnJhaW50cmVlRmFzdGxhbmVDcmVhdG9yO1xuICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkRhdGFDb2xsZWN0b3JdPzogQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuR29vZ2xlUGF5bWVudF0/OiBCcmFpbnRyZWVHb29nbGVQYXltZW50Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Ib3N0ZWRGaWVsZHNdPzogQnJhaW50cmVlSG9zdGVkRmllbGRzQ3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxdPzogQnJhaW50cmVlUGF5cGFsQ3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5QYXlwYWxDaGVja291dF0/OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dENyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVGhyZWVEU2VjdXJlXT86IEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmVubW9dPzogQnJhaW50cmVlVmVubW9DaGVja291dENyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmlzYUNoZWNrb3V0XT86IEJyYWludHJlZVZpc2FDaGVja291dENyZWF0b3I7XG4gICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVXNCYW5rQWNjb3VudF0/OiBCcmFpbnRyZWVVc0JhbmtBY2NvdW50Q3JlYXRvcjtcbiAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Mb2NhbFBheW1lbnRdPzogQnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRvcjtcbn1cblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8XG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50LFxuICAgIEJyYWludHJlZUxvY2FsUGF5bWVudENyZWF0ZUNvbmZpZyxcbiAgICBCcmFpbnRyZWVFcnJvciB8IHVuZGVmaW5lZFxuPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdGVDb25maWcgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICBtZXJjaGFudEFjY291bnRJZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSB7XG4gICAgY2xpZW50VG9rZW46IHN0cmluZztcbiAgICBlbmFibGVDaGVja291dFBheXdhbGxCYW5uZXI/OiBib29sZWFuO1xuICAgIGludGVudD86ICdhdXRob3JpemUnIHwgJ29yZGVyJyB8ICdzYWxlJztcbiAgICBpc0NyZWRpdEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZD86IGJvb2xlYW47XG4gICAgaXNGYXN0bGFuZUVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGlzRmFzdGxhbmVTaGlwcGluZ09wdGlvbkF1dG9TZWxlY3RFbmFibGVkPzogYm9vbGVhbjtcbiAgICBmYXN0bGFuZVN0eWxlcz86IEZhc3RsYW5lU3R5bGVzU2V0dGluZ3M7XG4gICAgaXNCcmFpbnRyZWVBbmFseXRpY3NWMkVuYWJsZWQ/OiBib29sZWFuO1xuICAgIHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQ/OiBib29sZWFuOyAvLyBUT0RPOiBvbmx5IGZvciBCVCBBWE8gQS9CIHRlc3RpbmcgcHVycG9zZXMsIGhlbmNlIHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIHRlc3RpbmdcbiAgICBwYXltZW50QnV0dG9uU3R5bGVzPzogUmVjb3JkPHN0cmluZywgUGF5cGFsU3R5bGVPcHRpb25zPjtcbiAgICBwYXlwYWxCTlBMQ29uZmlndXJhdGlvbj86IFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbVtdIHwgbnVsbDtcbiAgICBub25jZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVQYXlwYWxSZXF1ZXN0IHtcbiAgICBhbW91bnQ6IHN0cmluZyB8IG51bWJlcjtcbiAgICBiaWxsaW5nQWdyZWVtZW50RGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgY3VycmVuY3k/OiBzdHJpbmc7XG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlO1xuICAgIGZsb3c6ICdjaGVja291dCcgfCAndmF1bHQnO1xuICAgIGludGVudD86ICdhdXRob3JpemUnIHwgJ29yZGVyJyB8ICdzYWxlJztcbiAgICBsYW5kaW5nUGFnZVR5cGU/OiAnbG9naW4nIHwgJ2JpbGxpbmcnO1xuICAgIGxvY2FsZT86IHN0cmluZztcbiAgICBvZmZlckNyZWRpdD86IGJvb2xlYW47XG4gICAgc2hpcHBpbmdBZGRyZXNzRWRpdGFibGU/OiBib29sZWFuO1xuICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlPzogQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGU7XG4gICAgdXNlcmFjdGlvbj86ICdjb21taXQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIHtcbiAgICBsaW5lMTogc3RyaW5nO1xuICAgIGxpbmUyPzogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nO1xuICAgIHBob25lPzogc3RyaW5nO1xuICAgIHJlY2lwaWVudE5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVG9rZW5pemVQYXlsb2FkIHtcbiAgICBub25jZTogc3RyaW5nO1xuICAgIHR5cGU6ICdQYXlwYWxBY2NvdW50JyB8ICdWZW5tb0FjY291bnQnO1xuICAgIGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHM7XG4gICAgY3JlZGl0RmluYW5jaW5nT2ZmZXJlZD86IHtcbiAgICAgICAgdG90YWxDb3N0OiB7XG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgICAgICAgY3VycmVuY3k6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgdGVybTogbnVtYmVyO1xuICAgICAgICBtb250aGx5UGF5bWVudDoge1xuICAgICAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICAgICAgICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIHRvdGFsSW5zdGVyZXN0OiB7XG4gICAgICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgICAgICAgICAgY3VycmVuY3k6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgcGF5ZXJBY2NlcHRhbmNlOiBib29sZWFuO1xuICAgICAgICBjYXJ0QW1vdW50SW1tdXRhYmxlOiBib29sZWFuO1xuICAgIH07XG59XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZUZvcm1FcnJvckRhdGEgPSBPbWl0PEJyYWludHJlZUZvcm1GaWVsZFN0YXRlLCAnaXNGb2N1c2VkJz47XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZUZvcm1FcnJvckRhdGFLZXlzID1cbiAgICB8ICdudW1iZXInXG4gICAgfCAnZXhwaXJhdGlvbkRhdGUnXG4gICAgfCAnZXhwaXJhdGlvbk1vbnRoJ1xuICAgIHwgJ2V4cGlyYXRpb25ZZWFyJ1xuICAgIHwgJ2N2didcbiAgICB8ICdwb3N0YWxDb2RlJztcblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUVycm9yc0RhdGEgPSBQYXJ0aWFsPFxuICAgIFJlY29yZDxCcmFpbnRyZWVGb3JtRXJyb3JEYXRhS2V5cywgQnJhaW50cmVlRm9ybUVycm9yRGF0YT5cbj47XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBIb3N0ZWQgRmllbGRzXG4gKlxuICovXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBCcmFpbnRyZWVIb3N0ZWRGaWVsZHMsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzQ3JlYXRvckNvbmZpZ1xuPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHMge1xuICAgIGdldFN0YXRlKCk6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlO1xuICAgIHRlYXJkb3duKCk6IFByb21pc2U8dm9pZD47XG4gICAgdG9rZW5pemUoXG4gICAgICAgIG9wdGlvbnM/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNUb2tlbml6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVIb3N0ZWRGaWVsZHNUb2tlbml6ZVBheWxvYWQ+O1xuICAgIG9uKGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogKGV2ZW50OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZSkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlSG9zdGVkRmllbGRzQ3JlYXRvckNvbmZpZyBleHRlbmRzIEJyYWludHJlZU1vZHVsZUNyZWF0b3JDb25maWcge1xuICAgIGZpZWxkczoge1xuICAgICAgICBudW1iZXI/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICAgICAgZXhwaXJhdGlvbkRhdGU/OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbjtcbiAgICAgICAgZXhwaXJhdGlvbk1vbnRoPzogQnJhaW50cmVlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIGV4cGlyYXRpb25ZZWFyPzogQnJhaW50cmVlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIGN2dj86IEJyYWludHJlZUhvc3RlZEZpZWxkT3B0aW9uO1xuICAgICAgICBwb3N0YWxDb2RlPzogQnJhaW50cmVlSG9zdGVkRmllbGRPcHRpb247XG4gICAgICAgIGNhcmRob2xkZXJOYW1lPzogQnJhaW50cmVlSG9zdGVkRmllbGRPcHRpb247XG4gICAgfTtcbiAgICBzdHlsZXM/OiB7XG4gICAgICAgIGlucHV0PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICAgICAgJy5pbnZhbGlkJz86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XG4gICAgICAgICcudmFsaWQnPzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgICAgICAgJzpmb2N1cyc/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICAgIH07XG4gICAgcHJldmVudEN1cnNvckp1bXBzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZE9wdGlvbiB7XG4gICAgY29udGFpbmVyOiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICB0eXBlPzogc3RyaW5nO1xuICAgIGZvcm1hdElucHV0PzogYm9vbGVhbjtcbiAgICBtYXNrSW5wdXQ/OiBib29sZWFuIHwgeyBjaGFyYWN0ZXI/OiBzdHJpbmc7IHNob3dMYXN0Rm91cj86IHN0cmluZyB9O1xuICAgIHNlbGVjdD86IGJvb2xlYW4gfCB7IG9wdGlvbnM/OiBzdHJpbmdbXSB9O1xuICAgIG1heENhcmRMZW5ndGg/OiBudW1iZXI7XG4gICAgbWF4bGVuZ3RoPzogbnVtYmVyO1xuICAgIG1pbmxlbmd0aD86IG51bWJlcjtcbiAgICBwcmVmaWxsPzogc3RyaW5nO1xuICAgIHJlamVjdFVuc3VwcG9ydGVkQ2FyZHM/OiBib29sZWFuO1xuICAgIHN1cHBvcnRlZENhcmRCcmFuZHM/OiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZSB7XG4gICAgY2FyZHM6IEJyYWludHJlZUhvc3RlZEZpZWxkc0NhcmRbXTtcbiAgICBlbWl0dGVkQnk6IHN0cmluZztcbiAgICBmaWVsZHM6IHtcbiAgICAgICAgbnVtYmVyPzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBleHBpcmF0aW9uRGF0ZT86IEJyYWludHJlZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgZXhwaXJhdGlvbk1vbnRoPzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBleHBpcmF0aW9uWWVhcj86IEJyYWludHJlZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YTtcbiAgICAgICAgY3Z2PzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgICAgICBwb3N0YWxDb2RlPzogQnJhaW50cmVlSG9zdGVkRmllbGRzRmllbGREYXRhO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlSG9zdGVkRmllbGRzQ2FyZCB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIG5pY2VUeXBlOiBzdHJpbmc7XG4gICAgY29kZTogeyBuYW1lOiBzdHJpbmc7IHNpemU6IG51bWJlciB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkc0ZpZWxkRGF0YSB7XG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG4gICAgaXNFbXB0eTogYm9vbGVhbjtcbiAgICBpc1BvdGVudGlhbGx5VmFsaWQ6IGJvb2xlYW47XG4gICAgaXNWYWxpZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNUb2tlbml6ZU9wdGlvbnMge1xuICAgIHZhdWx0PzogYm9vbGVhbjtcbiAgICBmaWVsZHNUb1Rva2VuaXplPzogc3RyaW5nW107XG4gICAgY2FyZGhvbGRlck5hbWU/OiBzdHJpbmc7XG4gICAgYmlsbGluZ0FkZHJlc3M/OiBCcmFpbnRyZWVCaWxsaW5nQWRkcmVzc1JlcXVlc3REYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUJpbGxpbmdBZGRyZXNzUmVxdWVzdERhdGEge1xuICAgIHBvc3RhbENvZGU/OiBzdHJpbmc7XG4gICAgZmlyc3ROYW1lPzogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIGNvbXBhbnk/OiBzdHJpbmc7XG4gICAgc3RyZWV0QWRkcmVzcz86IHN0cmluZztcbiAgICBleHRlbmRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYWxpdHk/OiBzdHJpbmc7XG4gICAgcmVnaW9uPzogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlTnVtZXJpYz86IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZUFscGhhMj86IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZUFscGhhMz86IHN0cmluZztcbiAgICBjb3VudHJ5TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVIb3N0ZWRGb3JtRXJyb3IgZXh0ZW5kcyBCcmFpbnRyZWVFcnJvciB7XG4gICAgZGV0YWlscz86IHtcbiAgICAgICAgaW52YWxpZEZpZWxkS2V5cz86IHN0cmluZ1tdO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkU3RhdGUge1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICBpc0VtcHR5OiBib29sZWFuO1xuICAgIGlzUG90ZW50aWFsbHlWYWxpZDogYm9vbGVhbjtcbiAgICBpc1ZhbGlkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuaXphdGlvblBheWxvYWQge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgYmluOiBzdHJpbmc7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBQYXlQYWxcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVBheXBhbENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZVBheXBhbD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlUGF5cGFsIHtcbiAgICBjbG9zZVdpbmRvdygpOiB2b2lkO1xuICAgIGZvY3VzV2luZG93KCk6IHZvaWQ7XG4gICAgdG9rZW5pemUob3B0aW9uczogQnJhaW50cmVlUGF5cGFsUmVxdWVzdCk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPjtcbiAgICBCdXR0b25zPyhvcHRpb25zOiBQYXlwYWxCdXR0b25PcHRpb25zKTogUGF5cGFsQnV0dG9uUmVuZGVyO1xufVxuXG4vKipcbiAqIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBhcmUgcmVxdWlyZWQgdG8gc3VwcG9ydCAzRCBTZWN1cmUgYXV0aGVudGljYXRpb24gZmxvdy5cbiAqXG4gKiBJZiB0aGUgY3VzdG9tZXIgdXNlcyBhIGNyZWRpdCBjYXJkIHRoYXQgaGFzIDNEIFNlY3VyZSBlbmFibGVkLCB0aGV5IHdpbGwgYmVcbiAqIGFza2VkIHRvIHZlcmlmeSB0aGVpciBpZGVudGl0eSB3aGVuIHRoZXkgcGF5LiBUaGUgdmVyaWZpY2F0aW9uIGlzIGRvbmVcbiAqIHRocm91Z2ggYSB3ZWIgcGFnZSB2aWEgYW4gaWZyYW1lIHByb3ZpZGVkIGJ5IHRoZSBjYXJkIGlzc3Vlci5cbiAqL1xuLy8gZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVUaHJlZURTZWN1cmVPcHRpb25zIHtcbi8vICAgICAvKipcbi8vICAgICAgKiBBIGNhbGxiYWNrIHRoYXQgZ2V0cyBjYWxsZWQgd2hlbiB0aGUgaWZyYW1lIGlzIHJlYWR5IHRvIGJlIGFkZGVkIHRvIHRoZVxuLy8gICAgICAqIGN1cnJlbnQgcGFnZS4gSXQgaXMgcmVzcG9uc2libGUgZm9yIGRldGVybWluaW5nIHdoZXJlIHRoZSBpZnJhbWUgc2hvdWxkXG4vLyAgICAgICogYmUgaW5zZXJ0ZWQgaW4gdGhlIERPTS5cbi8vICAgICAgKlxuLy8gICAgICAqIEBwYXJhbSBlcnJvciAtIEFueSBlcnJvciByYWlzZWQgZHVyaW5nIHRoZSB2ZXJpZmljYXRpb24gcHJvY2Vzcztcbi8vICAgICAgKiB1bmRlZmluZWQgaWYgdGhlcmUgaXMgbm9uZS5cbi8vICAgICAgKiBAcGFyYW0gaWZyYW1lIC0gVGhlIGlmcmFtZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIHZlcmlmaWNhdGlvbiB3ZWIgcGFnZVxuLy8gICAgICAqIHByb3ZpZGVkIGJ5IHRoZSBjYXJkIGlzc3Vlci5cbi8vICAgICAgKiBAcGFyYW0gY2FuY2VsIC0gQSBmdW5jdGlvbiwgd2hlbiBjYWxsZWQsIHdpbGwgY2FuY2VsIHRoZSB2ZXJpZmljYXRpb25cbi8vICAgICAgKiBwcm9jZXNzIGFuZCByZW1vdmUgdGhlIGlmcmFtZS5cbi8vICAgICAgKi9cbi8vICAgICBhZGRGcmFtZShcbi8vICAgICAgICAgZXJyb3I6IEVycm9yIHwgdW5kZWZpbmVkLFxuLy8gICAgICAgICBpZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50LFxuLy8gICAgICAgICBjYW5jZWw6ICgpID0+IFByb21pc2U8QnJhaW50cmVlVmVyaWZ5UGF5bG9hZD4gfCB1bmRlZmluZWQsXG4vLyAgICAgKTogdm9pZDtcbi8vXG4vLyAgICAgLyoqXG4vLyAgICAgICogQSBjYWxsYmFjayB0aGF0IGdldHMgY2FsbGVkIHdoZW4gdGhlIGlmcmFtZSBpcyBhYm91dCB0byBiZSByZW1vdmVkIGZyb21cbi8vICAgICAgKiB0aGUgY3VycmVudCBwYWdlLlxuLy8gICAgICAqL1xuLy8gICAgIHJlbW92ZUZyYW1lKCk6IHZvaWQ7XG4vLyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybU9wdGlvbnMge1xuICAgIGZpZWxkczogQnJhaW50cmVlRm9ybUZpZWxkc01hcCB8IEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXA7XG4gICAgc3R5bGVzPzogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwO1xuICAgIG9uQmx1cj8oZGF0YTogQnJhaW50cmVlRm9ybUZpZWxkQmx1ckV2ZW50RGF0YSk6IHZvaWQ7XG4gICAgb25DYXJkVHlwZUNoYW5nZT8oZGF0YTogQnJhaW50cmVlRm9ybUZpZWxkQ2FyZFR5cGVDaGFuZ2VFdmVudERhdGEpOiB2b2lkO1xuICAgIG9uRm9jdXM/KGRhdGE6IEJyYWludHJlZUZvcm1GaWVsZEZvY3VzRXZlbnREYXRhKTogdm9pZDtcbiAgICBvblZhbGlkYXRlPyhkYXRhOiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUV2ZW50RGF0YSk6IHZvaWQ7XG4gICAgb25FbnRlcj8oZGF0YTogQnJhaW50cmVlRm9ybUZpZWxkRW50ZXJFdmVudERhdGEpOiB2b2lkO1xufVxuXG5leHBvcnQgZW51bSBCcmFpbnRyZWVGb3JtRmllbGRUeXBlIHtcbiAgICBDYXJkQ29kZSA9ICdjYXJkQ29kZScsXG4gICAgQ2FyZENvZGVWZXJpZmljYXRpb24gPSAnY2FyZENvZGVWZXJpZmljYXRpb24nLFxuICAgIENhcmRFeHBpcnkgPSAnY2FyZEV4cGlyeScsXG4gICAgQ2FyZE5hbWUgPSAnY2FyZE5hbWUnLFxuICAgIENhcmROdW1iZXIgPSAnY2FyZE51bWJlcicsXG4gICAgQ2FyZE51bWJlclZlcmlmaWNhdGlvbiA9ICdjYXJkTnVtYmVyVmVyaWZpY2F0aW9uJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHtcbiAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV0/OiBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zO1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRFeHBpcnldOiBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zO1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXTogQnJhaW50cmVlRm9ybUZpZWxkT3B0aW9ucztcbiAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkTnVtYmVyXTogQnJhaW50cmVlRm9ybUZpZWxkT3B0aW9ucztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRzTWFwIHtcbiAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZVZlcmlmaWNhdGlvbl0/OiBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRPcHRpb25zO1xuICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJWZXJpZmljYXRpb25dPzogQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkT3B0aW9ucztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGb3JtRmllbGRPcHRpb25zIHtcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWw/OiBzdHJpbmc7XG4gICAgY29udGFpbmVySWQ6IHN0cmluZztcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRPcHRpb25zIGV4dGVuZHMgQnJhaW50cmVlRm9ybUZpZWxkT3B0aW9ucyB7XG4gICAgaW5zdHJ1bWVudElkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwIHtcbiAgICBkZWZhdWx0PzogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzO1xuICAgIGVycm9yPzogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzO1xuICAgIGZvY3VzPzogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzO1xufVxuXG5leHBvcnQgdHlwZSBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXMgPSBQYXJ0aWFsPFxuICAgIFBpY2s8Q1NTU3R5bGVEZWNsYXJhdGlvbiwgJ2NvbG9yJyB8ICdmb250RmFtaWx5JyB8ICdmb250U2l6ZScgfCAnZm9udFdlaWdodCc+XG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZvcm1GaWVsZEtleWJvYXJkRXZlbnREYXRhIHtcbiAgICBmaWVsZFR5cGU6IHN0cmluZztcbiAgICBlcnJvcnM/OiBCcmFpbnRyZWVGb3JtRXJyb3JzRGF0YTtcbn1cblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUZpZWxkQmx1ckV2ZW50RGF0YSA9IEJyYWludHJlZUZvcm1GaWVsZEtleWJvYXJkRXZlbnREYXRhO1xuZXhwb3J0IHR5cGUgQnJhaW50cmVlRm9ybUZpZWxkRW50ZXJFdmVudERhdGEgPSBCcmFpbnRyZWVGb3JtRmllbGRLZXlib2FyZEV2ZW50RGF0YTtcbmV4cG9ydCB0eXBlIEJyYWludHJlZUZvcm1GaWVsZEZvY3VzRXZlbnREYXRhID0gQnJhaW50cmVlRm9ybUZpZWxkS2V5Ym9hcmRFdmVudERhdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkQ2FyZFR5cGVDaGFuZ2VFdmVudERhdGEge1xuICAgIGNhcmRUeXBlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXZlbnREYXRhIHtcbiAgICBlcnJvcnM6IHtcbiAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVdPzogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGFbXTtcbiAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZEV4cGlyeV0/OiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YVtdO1xuICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkTmFtZV0/OiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YVtdO1xuICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkTnVtYmVyXT86IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhW107XG4gICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRDb2RlVmVyaWZpY2F0aW9uXT86IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhW107XG4gICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJWZXJpZmljYXRpb25dPzogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGFbXTtcbiAgICB9O1xuICAgIGlzVmFsaWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGEge1xuICAgIGZpZWxkVHlwZTogc3RyaW5nO1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBQYXlQYWwgQ2hlY2tvdXRcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVBheXBhbENoZWNrb3V0Q3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8QnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVBheXBhbENoZWNrb3V0IHtcbiAgICBsb2FkUGF5UGFsU0RLKFxuICAgICAgICBjb25maWc6IEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWcsXG4gICAgICAgIGNhbGxiYWNrOiAoaW5zdGFuY2U6IEJyYWludHJlZVBheXBhbENoZWNrb3V0KSA9PiB2b2lkLFxuICAgICk6IHZvaWQ7XG4gICAgY3JlYXRlUGF5bWVudChvcHRpb25zOiBCcmFpbnRyZWVQYXlwYWxSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIHRlYXJkb3duKCk6IFByb21pc2U8dm9pZD47XG4gICAgdG9rZW5pemVQYXltZW50KG9wdGlvbnM6IFBheXBhbEF1dGhvcml6ZURhdGEpOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyB7XG4gICAgY29tcG9uZW50cz86IHN0cmluZztcbiAgICBjdXJyZW5jeT86IHN0cmluZztcbiAgICBpbnRlbnQ/OiBzdHJpbmc7XG4gICAgaXNDcmVkaXRFbmFibGVkPzogYm9vbGVhbjtcbiAgICBjb21taXQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgVmVubW9cbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVZlbm1vQ2hlY2tvdXRDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0LFxuICAgIEJyYWludHJlZVZlbm1vQ3JlYXRvckNvbmZpZ1xuPjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0IGV4dGVuZHMgQnJhaW50cmVlTW9kdWxlIHtcbiAgICB0b2tlbml6ZShjYWxsYmFjazogKGVycm9yOiBCcmFpbnRyZWVFcnJvciwgcGF5bG9hZDogQnJhaW50cmVlVG9rZW5pemVQYXlsb2FkKSA9PiB1bmtub3duKTogdm9pZDtcbiAgICBpc0Jyb3dzZXJTdXBwb3J0ZWQoKTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVWZW5tb0NyZWF0b3JDb25maWcgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICBhbGxvd0Rlc2t0b3A/OiBib29sZWFuO1xuICAgIHBheW1lbnRNZXRob2RVc2FnZT86IHN0cmluZztcbn1cblxuLyoqXG4gKlxuICogQnJhaW50cmVlIFZpc2EgQ2hlY2tvdXRcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVZpc2FDaGVja291dENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZVZpc2FDaGVja291dD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVmlzYUNoZWNrb3V0IGV4dGVuZHMgQnJhaW50cmVlTW9kdWxlIHtcbiAgICB0b2tlbml6ZShwYXltZW50OiBWaXNhQ2hlY2tvdXRQYXltZW50U3VjY2Vzc1BheWxvYWQpOiBQcm9taXNlPFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQ+O1xuICAgIGNyZWF0ZUluaXRPcHRpb25zKG9wdGlvbnM6IFBhcnRpYWw8VmlzYUNoZWNrb3V0SW5pdE9wdGlvbnM+KTogVmlzYUNoZWNrb3V0SW5pdE9wdGlvbnM7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBCTlBMIENvbmZpZ3VyYXRvciByZWxhdGVkIHR5cGVzXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEJOUExDb25maWd1cmF0aW9uSXRlbSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBib29sZWFuO1xuICAgIHN0eWxlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKlxuICogQnJhaW50cmVlIExvY2FsIE1ldGhvZHNcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlTG9jYWxQYXltZW50Q29uZmlnIHtcbiAgICBwYXltZW50VHlwZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGZhbGxiYWNrOiB7XG4gICAgICAgIHVybDogc3RyaW5nO1xuICAgICAgICBidXR0b25UZXh0OiBzdHJpbmc7XG4gICAgfTtcbiAgICBjdXJyZW5jeUNvZGU6IHN0cmluZztcbiAgICBzaGlwcGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIGdpdmVuTmFtZTogc3RyaW5nO1xuICAgIHN1cm5hbWU6IHN0cmluZztcbiAgICBhZGRyZXNzOiB7XG4gICAgICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG4gICAgfTtcbiAgICBvblBheW1lbnRTdGFydChkYXRhOiBCcmFpbnRyZWVMUE1QYXltZW50U3RhcnREYXRhLCBzdGFydDogKCkgPT4gUHJvbWlzZTx2b2lkPik6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlTFBNU3RhcnRQYXltZW50RXJyb3Ige1xuICAgIGNvZGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMUE1QYXltZW50U3RhcnREYXRhIHtcbiAgICBwYXltZW50SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRzUGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIHN0YXJ0UGF5bWVudChcbiAgICAgICAgY29uZmlnOiBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcsXG4gICAgICAgIGNhbGxiYWNrOiAoXG4gICAgICAgICAgICBzdGFydFBheW1lbnRFcnJvcjogQnJhaW50cmVlTFBNU3RhcnRQYXltZW50RXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBCcmFpbnRyZWVMb2NhbFBheW1lbnRzUGF5bG9hZCxcbiAgICAgICAgKSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgICk6IHZvaWQ7XG59XG5cbi8qKlxuICpcbiAqIE90aGVyXG4gKlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RXaW5kb3cgZXh0ZW5kcyBCcmFpbnRyZWVXaW5kb3cge1xuICAgIGJyYWludHJlZT86IEJyYWludHJlZVNESztcbiAgICBwYXlwYWw/OiBQYXlwYWxTREs7XG4gICAgVj86IFZpc2FDaGVja291dFNESztcbn1cbiIsImltcG9ydCB7IEJyYWludHJlZUVycm9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZUVycm9yKGVycm9yOiB1bmtub3duKTogZXJyb3IgaXMgQnJhaW50cmVlRXJyb3Ige1xuICAgIHJldHVybiBCb29sZWFuKFxuICAgICAgICB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgKCd0eXBlJyBpbiBlcnJvciB8fCAnbWVzc2FnZScgaW4gZXJyb3IgfHwgJ2NvZGUnIGluIGVycm9yKSxcbiAgICApO1xufVxuIiwiaW1wb3J0IHsgc3VwcG9ydHNQb3B1cHMgfSBmcm9tICdAYnJhaW50cmVlL2Jyb3dzZXItZGV0ZWN0aW9uJztcblxuaW1wb3J0IHtcbiAgICBBZGRyZXNzLFxuICAgIENhbmNlbGxhYmxlUHJvbWlzZSxcbiAgICBDcmVkaXRDYXJkSW5zdHJ1bWVudCxcbiAgICBMZWdhY3lBZGRyZXNzLFxuICAgIE5vbmNlSW5zdHJ1bWVudCxcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIFBheW1lbnQsXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yLFxuICAgIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyxcbiAgICBQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IsXG4gICAgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgQnJhaW50cmVlU2NyaXB0TG9hZGVyIGZyb20gJy4vYnJhaW50cmVlLXNjcmlwdC1sb2FkZXInO1xuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVDbGllbnQsXG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvcixcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9ycyxcbiAgICBCcmFpbnRyZWVFbnYsXG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlRmFzdGxhbmUsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVNb2R1bGUsXG4gICAgQnJhaW50cmVlUGF5cGFsLFxuICAgIEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgIEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlUmVxdWVzdERhdGEsXG4gICAgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlLFxuICAgIEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnMsXG4gICAgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgQnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICBCcmFpbnRyZWVWZW5tb0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlVmVyaWZ5UGF5bG9hZCxcbiAgICBQQVlQQUxfQ09NUE9ORU5UUyxcbiAgICBUb2tlbml6YXRpb25QYXlsb2FkLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpc0JyYWludHJlZUVycm9yIGZyb20gJy4vdXRpbHMvaXMtYnJhaW50cmVlLWVycm9yJztcbmltcG9ydCB7IGlzRW1wdHkgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGlzQ3JlZGl0Q2FyZEluc3RydW1lbnRMaWtlIGZyb20gJy4vdXRpbHMvaXMtY3JlZGl0LWNhcmQtaW5zdHJ1bWVudC1saWtlJztcblxuZXhwb3J0IGludGVyZmFjZSBQYXlwYWxDb25maWcge1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGN1cnJlbmN5OiBzdHJpbmc7XG4gICAgbG9jYWxlOiBzdHJpbmc7XG4gICAgb2ZmZXJDcmVkaXQ/OiBib29sZWFuO1xuICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlPzogYm9vbGVhbjtcbiAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZT86IEJyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlO1xuICAgIHNob3VsZFNhdmVJbnN0cnVtZW50PzogYm9vbGVhbjtcbn1cblxuLy8gSW5mbzogdGhpcyBjbGFzcyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBuZWFyZXN0IGZ1dHVyZS4gUGxlYXNlLCBkbyBub3QgYWRkIGFueXRoaW5nIGhlcmUuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgY2xpZW50PzogUHJvbWlzZTxCcmFpbnRyZWVDbGllbnQ+O1xuICAgIHByaXZhdGUgY2xpZW50VG9rZW4/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkYXRhQ29sbGVjdG9yczogQnJhaW50cmVlRGF0YUNvbGxlY3RvcnMgPSB7fTtcbiAgICBwcml2YXRlIHBheXBhbENoZWNrb3V0PzogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVQYXlwYWw/OiBQcm9taXNlPEJyYWludHJlZVBheXBhbD47XG4gICAgcHJpdmF0ZSB0aHJlZURTZWN1cmVPcHRpb25zPzogQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucztcbiAgICBwcml2YXRlIHRocmVlRFM/OiBQcm9taXNlPEJyYWludHJlZVRocmVlRFNlY3VyZT47XG4gICAgcHJpdmF0ZSB2ZW5tb0NoZWNrb3V0PzogQnJhaW50cmVlVmVubW9DaGVja291dDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNjcmlwdExvYWRlcjogQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgIHByaXZhdGUgb3ZlcmxheT86IE92ZXJsYXksXG4gICAgKSB7fVxuXG4gICAgaW5pdGlhbGl6ZShjbGllbnRUb2tlbjogc3RyaW5nLCB0aHJlZURTZWN1cmVPcHRpb25zPzogQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucykge1xuICAgICAgICB0aGlzLmNsaWVudFRva2VuID0gY2xpZW50VG9rZW47XG4gICAgICAgIHRoaXMudGhyZWVEU2VjdXJlT3B0aW9ucyA9IHRocmVlRFNlY3VyZU9wdGlvbnM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QnJhaW50cmVlRmFzdGxhbmUoXG4gICAgICAgIGNhcmRJZD86IHN0cmluZyxcbiAgICAgICAgaXNUZXN0TW9kZUVuYWJsZWQ/OiBib29sZWFuLFxuICAgICAgICBzdHlsZXM/OiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbixcbiAgICApOiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lPiB7XG4gICAgICAgIGlmIChpc1Rlc3RNb2RlRW5hYmxlZCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdheG9FbnYnLCAnc2FuZGJveCcpO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdmYXN0bGFuZUVudicsICdzYW5kYm94Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5icmFpbnRyZWVGYXN0bGFuZSkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50VG9rZW4gPSB0aGlzLmdldENsaWVudFRva2VuT3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IGRldmljZURhdGEgPSBhd2FpdCB0aGlzLmdldFNlc3Npb25JZChjYXJkSWQpO1xuXG4gICAgICAgICAgICBjb25zdCBicmFpbnRyZWVGYXN0bGFuZUNyZWF0b3IgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkRmFzdGxhbmUoKTtcblxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFN0eWxlcyA9IHtcbiAgICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk6ICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5icmFpbnRyZWVGYXN0bGFuZSA9IGF3YWl0IGJyYWludHJlZUZhc3RsYW5lQ3JlYXRvci5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIGF1dGhvcml6YXRpb246IGNsaWVudFRva2VuLFxuICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzIHx8IGRlZmF1bHRTdHlsZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cuYnJhaW50cmVlRmFzdGxhbmU7XG4gICAgfVxuXG4gICAgLy8gSW5mbzogVGhpcyBtZXRob2QgaXMgZGVwcmVjYXRlZC4gVXNlIGdldENsaWVudCBtZXRob2QgZnJvbSBCcmFpbnRyZWVTZGsgY2xhc3MgaW5zdGVhZFxuICAgIGFzeW5jIGdldENsaWVudCgpOiBQcm9taXNlPEJyYWludHJlZUNsaWVudD4ge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50KSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRUb2tlbiA9IHRoaXMuZ2V0Q2xpZW50VG9rZW5PclRocm93KCk7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRDcmVhdG9yID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZENsaWVudCgpO1xuXG4gICAgICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudENyZWF0b3IuY3JlYXRlKHsgYXV0aG9yaXphdGlvbjogY2xpZW50VG9rZW4gfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQ7XG4gICAgfVxuXG4gICAgZ2V0UGF5cGFsKCk6IFByb21pc2U8QnJhaW50cmVlUGF5cGFsPiB7XG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVQYXlwYWwpIHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlUGF5cGFsID0gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZFBheXBhbCgpLFxuICAgICAgICAgICAgXSkudGhlbigoW2NsaWVudCwgcGF5cGFsXSkgPT4gcGF5cGFsLmNyZWF0ZSh7IGNsaWVudCB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVQYXlwYWw7XG4gICAgfVxuXG4gICAgcGF5cGFsKHsgc2hvdWxkU2F2ZUluc3RydW1lbnQsIC4uLmNvbmZpZyB9OiBQYXlwYWxDb25maWcpOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZD4ge1xuICAgICAgICBjb25zdCBuZXdXaW5kb3dGbG93ID0gc3VwcG9ydHNQb3B1cHMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXlwYWwoKVxuICAgICAgICAgICAgLnRoZW4oKHBheXBhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZXdXaW5kb3dGbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheT8uc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiAoKSA9PiBwYXlwYWwuZm9jdXNXaW5kb3coKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBheXBhbC50b2tlbml6ZSh7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZVNoaXBwaW5nQWRkcmVzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZmxvdzogc2hvdWxkU2F2ZUluc3RydW1lbnQgPyAndmF1bHQnIDogJ2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICAgICAgdXNlcmFjdGlvbjogJ2NvbW1pdCcsXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXk/LnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXk/LnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRQYXlwYWxDaGVja291dChcbiAgICAgICAgY29uZmlnOiBQYXJ0aWFsPEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWc+LFxuICAgICAgICBvblN1Y2Nlc3M6IChpbnN0YW5jZTogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQpID0+IHZvaWQsXG4gICAgICAgIG9uRXJyb3I6IChlcnJvcjogQnJhaW50cmVlRXJyb3IpID0+IHZvaWQsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVQYXlwYWxDaGVja291dD4ge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRQYXlwYWxDaGVja291dCgpO1xuXG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0Q29uZmlnID0geyBjbGllbnQgfTtcbiAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRDYWxsYmFjayA9IChcbiAgICAgICAgICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBheXBhbFNka0xvYWRDYWxsYmFjayA9ICgpID0+IG9uU3VjY2VzcyhicmFpbnRyZWVQYXlwYWxDaGVja291dCk7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxTZGtMb2FkQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjb25maWcuY3VycmVuY3ksXG4gICAgICAgICAgICAgICAgLi4uKGNvbmZpZy5pc0NyZWRpdEVuYWJsZWQgJiYgeyAnZW5hYmxlLWZ1bmRpbmcnOiAncGF5bGF0ZXInIH0pLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IFBBWVBBTF9DT01QT05FTlRTLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgaW50ZW50OiBjb25maWcuaW50ZW50LFxuICAgICAgICAgICAgICAgIGNvbW1pdDogY29uZmlnLmNvbW1pdCA/PyB0cnVlLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cucGF5cGFsKSB7XG4gICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQubG9hZFBheVBhbFNESyhwYXlwYWxTZGtMb2FkQ29uZmlnLCBwYXlwYWxTZGtMb2FkQ2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MoYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGF5cGFsQ2hlY2tvdXQgPSBhd2FpdCBwYXlwYWxDaGVja291dC5jcmVhdGUoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dENvbmZpZyxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0Q2FsbGJhY2ssXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGF5cGFsQ2hlY2tvdXQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RGF0YUNvbGxlY3RvcihcbiAgICAgICAgb3B0aW9ucz86IFBhcnRpYWw8QnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWc+LFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlRGF0YUNvbGxlY3Rvcj4ge1xuICAgICAgICBjb25zdCBjYWNoZUtleToga2V5b2YgQnJhaW50cmVlRGF0YUNvbGxlY3RvcnMgPSBvcHRpb25zPy5wYXlwYWwgPyAncGF5cGFsJyA6ICdkZWZhdWx0JztcblxuICAgICAgICBsZXQgY2FjaGVkID0gdGhpcy5kYXRhQ29sbGVjdG9yc1tjYWNoZUtleV07XG5cbiAgICAgICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhQ29sbGVjdG9yID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZERhdGFDb2xsZWN0b3IoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDb2xsZWN0b3JDb25maWc6IEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIGtvdW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjYWNoZWQgPSBhd2FpdCBkYXRhQ29sbGVjdG9yLmNyZWF0ZShkYXRhQ29sbGVjdG9yQ29uZmlnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpICYmIGVycm9yLmNvZGUgPT09ICdEQVRBX0NPTExFQ1RPUl9LT1VOVF9OT1RfRU5BQkxFRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVhcmRvd246ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kYXRhQ29sbGVjdG9yc1tjYWNoZUtleV0gPSBjYWNoZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cblxuICAgIGdldEJyYWludHJlZUVudihpc1Rlc3RNb2RlID0gZmFsc2UpOiBCcmFpbnRyZWVFbnYge1xuICAgICAgICByZXR1cm4gaXNUZXN0TW9kZSA/IEJyYWludHJlZUVudi5TYW5kYm94IDogQnJhaW50cmVlRW52LlByb2R1Y3Rpb247XG4gICAgfVxuXG4gICAgbWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZShhZGRyZXNzOiBBZGRyZXNzKTogQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVjaXBpZW50TmFtZTogYCR7YWRkcmVzcy5maXJzdE5hbWV9ICR7YWRkcmVzcy5sYXN0TmFtZX1gLFxuICAgICAgICAgICAgbGluZTE6IGFkZHJlc3MuYWRkcmVzczEsXG4gICAgICAgICAgICBsaW5lMjogYWRkcmVzcy5hZGRyZXNzMixcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIHN0YXRlOiBhZGRyZXNzLnN0YXRlT3JQcm92aW5jZUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBob25lOiBhZGRyZXNzLnBob25lLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMpOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICAgICAgY29uc3QgeyBlbWFpbCwgcGhvbmUsIHNoaXBwaW5nQWRkcmVzcyB9ID0gZGV0YWlscztcbiAgICAgICAgY29uc3QgcmVjaXBpZW50TmFtZSA9IHNoaXBwaW5nQWRkcmVzcz8ucmVjaXBpZW50TmFtZSB8fCAnJztcbiAgICAgICAgY29uc3QgW2ZpcnN0TmFtZSwgbGFzdE5hbWVdID0gcmVjaXBpZW50TmFtZS5zcGxpdCgnICcpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGZpcnN0TmFtZSB8fCAnJyxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogbGFzdE5hbWUgfHwgJycsXG4gICAgICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IHNoaXBwaW5nQWRkcmVzcz8ubGluZTEsXG4gICAgICAgICAgICBhZGRyZXNzX2xpbmVfMjogc2hpcHBpbmdBZGRyZXNzPy5saW5lMixcbiAgICAgICAgICAgIGNpdHk6IHNoaXBwaW5nQWRkcmVzcz8uY2l0eSxcbiAgICAgICAgICAgIHN0YXRlOiBzaGlwcGluZ0FkZHJlc3M/LnN0YXRlLFxuICAgICAgICAgICAgY291bnRyeV9jb2RlOiBzaGlwcGluZ0FkZHJlc3M/LmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcG9zdGFsX2NvZGU6IHNoaXBwaW5nQWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMpOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICAgICAgY29uc3QgeyBiaWxsaW5nQWRkcmVzcywgZW1haWwsIGZpcnN0TmFtZSwgbGFzdE5hbWUsIHBob25lLCBzaGlwcGluZ0FkZHJlc3MgfSA9IGRldGFpbHM7XG5cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGJpbGxpbmdBZGRyZXNzIHx8IHNoaXBwaW5nQWRkcmVzcztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBmaXJzdF9uYW1lOiBmaXJzdE5hbWUsXG4gICAgICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiBwaG9uZSxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8xOiBhZGRyZXNzPy5saW5lMSxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzPy5saW5lMixcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3M/LmNpdHksXG4gICAgICAgICAgICBzdGF0ZTogYWRkcmVzcz8uc3RhdGUsXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3M/LmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcG9zdGFsX2NvZGU6IGFkZHJlc3M/LnBvc3RhbENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtb3ZlRWxlbWVudChlbGVtZW50SWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRJZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuXG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2Vzc2lvbklkKGNhcnRJZD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5nZXREYXRhQ29sbGVjdG9yKHtcbiAgICAgICAgICAgIHJpc2tDb3JyZWxhdGlvbklkOiBjYXJ0SWQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkZXZpY2VEYXRhO1xuICAgIH1cblxuICAgIGFzeW5jIHRlYXJkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnRlYXJkb3duTW9kdWxlKHRoaXMuZGF0YUNvbGxlY3RvcnMuZGVmYXVsdCk7XG4gICAgICAgIGF3YWl0IHRoaXMudGVhcmRvd25Nb2R1bGUodGhpcy5kYXRhQ29sbGVjdG9ycy5wYXlwYWwpO1xuICAgICAgICB0aGlzLmRhdGFDb2xsZWN0b3JzID0ge307XG5cbiAgICAgICAgYXdhaXQgdGhpcy50ZWFyZG93bk1vZHVsZSh0aGlzLnBheXBhbENoZWNrb3V0KTtcbiAgICAgICAgdGhpcy5wYXlwYWxDaGVja291dCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBhd2FpdCB0aGlzLnRlYXJkb3duTW9kdWxlKHRoaXMuX3Zlbm1vQ2hlY2tvdXQpO1xuICAgICAgICAvLyB0aGlzLl92ZW5tb0NoZWNrb3V0ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIGF3YWl0IHRoaXMudGVhcmRvd25Nb2R1bGUodGhpcy5fdmlzYUNoZWNrb3V0KTtcbiAgICAgICAgLy8gdGhpcy5fdmlzYUNoZWNrb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGFzeW5jIGdldDNEUygpOiBQcm9taXNlPEJyYWludHJlZVRocmVlRFNlY3VyZT4ge1xuICAgICAgICBpZiAoIXRoaXMudGhyZWVEUykge1xuICAgICAgICAgICAgdGhpcy50aHJlZURTID0gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZDNEUygpLFxuICAgICAgICAgICAgXSkudGhlbigoW2NsaWVudCwgdGhyZWVEU2VjdXJlXSkgPT4gdGhyZWVEU2VjdXJlLmNyZWF0ZSh7IGNsaWVudCwgdmVyc2lvbjogMiB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy50aHJlZURTO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFZlbm1vQ2hlY2tvdXQoXG4gICAgICAgIHZlbm1vQ29uZmlnPzogQnJhaW50cmVlVmVubW9DcmVhdG9yQ29uZmlnLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVmVubW9DaGVja291dD4ge1xuICAgICAgICBpZiAoIXRoaXMudmVubW9DaGVja291dCkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHZlbm1vQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkVmVubW9DaGVja291dCgpO1xuXG4gICAgICAgICAgICBjb25zdCB2ZW5tb0NoZWNrb3V0Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgIGNsaWVudCxcbiAgICAgICAgICAgICAgICBhbGxvd0Rlc2t0b3A6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZFVzYWdlOiAnbXVsdGlfdXNlJyxcbiAgICAgICAgICAgICAgICAuLi4odmVubW9Db25maWcgfHwge30pLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy52ZW5tb0NoZWNrb3V0ID0gYXdhaXQgbmV3IFByb21pc2U8QnJhaW50cmVlVmVubW9DaGVja291dD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgICAgICB2ZW5tb0NoZWNrb3V0LmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgdmVubW9DaGVja291dENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yOiBCcmFpbnRyZWVFcnJvciwgYnJhaW50cmVlVmVubW9DaGVja291dDogQnJhaW50cmVlVmVubW9DaGVja291dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJyYWludHJlZVZlbm1vQ2hlY2tvdXQuaXNCcm93c2VyU3VwcG9ydGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBVbnN1cHBvcnRlZEJyb3dzZXJFcnJvcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShicmFpbnRyZWVWZW5tb0NoZWNrb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy52ZW5tb0NoZWNrb3V0O1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgQnJhaW50cmVlIENyZWRpdCBDYXJkIGFuZCBCcmFpbnRyZWUgSG9zdGVkIEZvcm1cbiAgICovXG4gICAgYXN5bmMgdmVyaWZ5Q2FyZChcbiAgICAgICAgcGF5bWVudDogUGF5bWVudCxcbiAgICAgICAgYmlsbGluZ0FkZHJlc3M6IEFkZHJlc3MsXG4gICAgICAgIGFtb3VudDogbnVtYmVyLFxuICAgICk6IFByb21pc2U8Tm9uY2VJbnN0cnVtZW50PiB7XG4gICAgICAgIGNvbnN0IHRva2VuaXphdGlvblBheWxvYWQgPSBhd2FpdCB0aGlzLnRva2VuaXplQ2FyZChwYXltZW50LCBiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uKHRva2VuaXphdGlvblBheWxvYWQsIGFtb3VudCk7XG4gICAgfVxuXG4gICAgYXN5bmMgdG9rZW5pemVDYXJkKHBheW1lbnQ6IFBheW1lbnQsIGJpbGxpbmdBZGRyZXNzOiBBZGRyZXNzKTogUHJvbWlzZTxUb2tlbml6YXRpb25QYXlsb2FkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG5cbiAgICAgICAgaWYgKCFpc0NyZWRpdENhcmRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50LnBheW1lbnREYXRhJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gdGhpcy5nZXRFcnJvcnNSZXF1aXJlZEZpZWxkcyhwYXltZW50RGF0YSk7XG5cbiAgICAgICAgaWYgKCFpc0VtcHR5KGVycm9ycykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50SW52YWxpZEZvcm1FcnJvcihlcnJvcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSB0aGlzLm1hcFRvQ3JlZGl0Q2FyZChwYXltZW50RGF0YSwgYmlsbGluZ0FkZHJlc3MpO1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICBjb25zdCB7IGNyZWRpdENhcmRzIH0gPSBhd2FpdCBjbGllbnQucmVxdWVzdChyZXF1ZXN0RGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vbmNlOiBjcmVkaXRDYXJkc1swXS5ub25jZSxcbiAgICAgICAgICAgIGJpbjogY3JlZGl0Q2FyZHNbMF0uZGV0YWlscy5iaW4sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uKFxuICAgICAgICB0b2tlbml6YXRpb25QYXlsb2FkOiBUb2tlbml6YXRpb25QYXlsb2FkLFxuICAgICAgICBhbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVZlcmlmeVBheWxvYWQ+IHtcbiAgICAgICAgY29uc3QgdGhyZWVEU2VjdXJlID0gYXdhaXQgdGhpcy5nZXQzRFMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wcmVzZW50M0RTQ2hhbGxlbmdlKHRocmVlRFNlY3VyZSwgYW1vdW50LCB0b2tlbml6YXRpb25QYXlsb2FkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHRlYXJkb3duTW9kdWxlKG1vZHVsZT86IEJyYWludHJlZU1vZHVsZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlID8gbW9kdWxlLnRlYXJkb3duKCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldENsaWVudFRva2VuT3JUaHJvdygpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbml0aWFsaXplZEVycm9yKE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnRUb2tlbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEVycm9yc1JlcXVpcmVkRmllbGRzKFxuICAgICAgICBwYXltZW50RGF0YTogQ3JlZGl0Q2FyZEluc3RydW1lbnQsXG4gICAgKTogUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzIHtcbiAgICAgICAgY29uc3QgeyBjY051bWJlciwgY2NFeHBpcnkgfSA9IHBheW1lbnREYXRhO1xuICAgICAgICBjb25zdCBlcnJvcnM6IFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyA9IHt9O1xuXG4gICAgICAgIGlmICghY2NOdW1iZXIpIHtcbiAgICAgICAgICAgIGVycm9ycy5jY051bWJlciA9IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDcmVkaXQgY2FyZCBudW1iZXIgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVxdWlyZWQnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgaWYgKCFjY0V4cGlyeSkge1xuICAgICAgICAgICAgZXJyb3JzLmNjRXhwaXJ5ID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0V4cGlyYXRpb24gZGF0ZSBpcyByZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZXF1aXJlZCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JzO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwVG9DcmVkaXRDYXJkKFxuICAgICAgICBjcmVkaXRDYXJkOiBDcmVkaXRDYXJkSW5zdHJ1bWVudCxcbiAgICAgICAgYmlsbGluZ0FkZHJlc3M/OiBBZGRyZXNzLFxuICAgICk6IEJyYWludHJlZVJlcXVlc3REYXRhIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjcmVkaXRDYXJkOiB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBjcmVkaXRDYXJkLmNjTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiBjcmVkaXRDYXJkLmNjTnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBjdnY6IGNyZWRpdENhcmQuY2NDdnYsXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiBgJHtjcmVkaXRDYXJkLmNjRXhwaXJ5Lm1vbnRofS8ke2NyZWRpdENhcmQuY2NFeHBpcnkueWVhcn1gLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzOiBiaWxsaW5nQWRkcmVzcyAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogYmlsbGluZ0FkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGl0eTogYmlsbGluZ0FkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnlOYW1lOiBiaWxsaW5nQWRkcmVzcy5jb3VudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogYmlsbGluZ0FkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVldEFkZHJlc3M6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgJHtiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMX0gJHtiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMn1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZHBvaW50OiAncGF5bWVudF9tZXRob2RzL2NyZWRpdF9jYXJkcycsXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHByZXNlbnQzRFNDaGFsbGVuZ2UoXG4gICAgICAgIHRocmVlRFNlY3VyZTogQnJhaW50cmVlVGhyZWVEU2VjdXJlLFxuICAgICAgICBhbW91bnQ6IG51bWJlcixcbiAgICAgICAgdG9rZW5pemF0aW9uUGF5bG9hZDogVG9rZW5pemF0aW9uUGF5bG9hZCxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVZlcmlmeVBheWxvYWQ+IHtcbiAgICAgICAgY29uc3QgeyBub25jZSwgYmluIH0gPSB0b2tlbml6YXRpb25QYXlsb2FkO1xuXG4gICAgICAgIGlmICghdGhpcy50aHJlZURTZWN1cmVPcHRpb25zIHx8ICFub25jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGFkZEZyYW1lLFxuICAgICAgICAgICAgcmVtb3ZlRnJhbWUsXG4gICAgICAgICAgICBjaGFsbGVuZ2VSZXF1ZXN0ZWQgPSB0cnVlLFxuICAgICAgICAgICAgYWRkaXRpb25hbEluZm9ybWF0aW9uLFxuICAgICAgICB9ID0gdGhpcy50aHJlZURTZWN1cmVPcHRpb25zO1xuICAgICAgICBjb25zdCBjYW5jZWxWZXJpZnlDYXJkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aHJlZURTZWN1cmUuY2FuY2VsVmVyaWZ5Q2FyZCgpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICAgICAgdmVyaWZpY2F0aW9uLmNhbmNlbChuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgcm91bmRlZEFtb3VudCA9IGFtb3VudC50b0ZpeGVkKDIpO1xuXG4gICAgICAgIGNvbnN0IHZlcmlmaWNhdGlvbiA9IG5ldyBDYW5jZWxsYWJsZVByb21pc2UoXG4gICAgICAgICAgICB0aHJlZURTZWN1cmUudmVyaWZ5Q2FyZCh7XG4gICAgICAgICAgICAgICAgYWRkRnJhbWU6IChlcnJvciwgaWZyYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRGcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRnJhbWUoZXJyb3IsIGlmcmFtZSwgY2FuY2VsVmVyaWZ5Q2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFtb3VudDogTnVtYmVyKHJvdW5kZWRBbW91bnQpLFxuICAgICAgICAgICAgICAgIGJpbixcbiAgICAgICAgICAgICAgICBjaGFsbGVuZ2VSZXF1ZXN0ZWQsXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJhbWUsXG4gICAgICAgICAgICAgICAgb25Mb29rdXBDb21wbGV0ZTogKF9kYXRhLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbGxlY3REZXZpY2VEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxJbmZvcm1hdGlvbixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB2ZXJpZmljYXRpb24ucHJvbWlzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDcmVkaXRDYXJkSW5zdHJ1bWVudCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NyZWRpdENhcmRJbnN0cnVtZW50TGlrZShcbiAgICBpbnN0cnVtZW50OiB1bmtub3duLFxuKTogaW5zdHJ1bWVudCBpcyBDcmVkaXRDYXJkSW5zdHJ1bWVudCB7XG4gICAgaWYgKHR5cGVvZiBpbnN0cnVtZW50ICE9PSAnb2JqZWN0JyB8fCBpbnN0cnVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgY29uc3QgY3JlZGl0Q2FyZEluc3RydW1lbnQgPSBpbnN0cnVtZW50IGFzIFBhcnRpYWw8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIGNyZWRpdENhcmRJbnN0cnVtZW50LmNjRXhwaXJ5ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBjcmVkaXRDYXJkSW5zdHJ1bWVudC5jY0V4cGlyeSAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2YgY3JlZGl0Q2FyZEluc3RydW1lbnQuY2NOdW1iZXIgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIHR5cGVvZiBjcmVkaXRDYXJkSW5zdHJ1bWVudC5jY05hbWUgPT09ICdzdHJpbmcnXG4gICAgKTtcbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIHRoZSBjbGllbnQgbGlicmFyeSBvZiBhIHBheW1lbnQgbWV0aG9kIGZhaWxzXG4gKiB0byBsb2FkLCBvciBmb3Igc29tZSByZWFzb24sIGl0IGlzIGluYWNjZXNzaWJsZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IgZXh0ZW5kcyBTdGFuZGFyZEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgbWVzc2FnZSB8fFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSBjbGllbnQgbGlicmFyeSBvZiBhIHBheW1lbnQgbWV0aG9kIGlzIG5vdCBsb2FkZWQgb3IgcmVhZHkgdG8gYmUgdXNlZC4nLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcic7XG4gICAgICAgIHRoaXMudHlwZSA9ICdwYXltZW50X21ldGhvZF9jbGllbnRfdW5hdmFpbGFibGUnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJyYWludHJlZU1vZHVsZU5hbWUgfSBmcm9tICcuL2JyYWludHJlZSc7XG5pbXBvcnQge1xuICAgIEJSQUlOVFJFRV9TREtfREVGQVVMVF9WRVJTSU9OLFxuICAgIEJSQUlOVFJFRV9TREtfSE9TVEVEX0ZJRUxEU19GSVhfVkVSU0lPTixcbiAgICBCUkFJTlRSRUVfU0RLX1NUQUJMRV9WRVJTSU9OLFxufSBmcm9tICcuL2JyYWludHJlZS1zZGstdmVyaXNvbic7XG5cbmV4cG9ydCBjb25zdCBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZID0ge1xuICAgIFtCUkFJTlRSRUVfU0RLX1NUQUJMRV9WRVJTSU9OXToge1xuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5DbGllbnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC0yNkJYRE5uSkkyM0pZUnlGQmo0eGU0c1ZOclVTU2lTU3UxMWt4VlhOTS92RVBPTm00THVMMDB3NlphVGdRZXd0JyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsQ2hlY2tvdXRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1CK3Z6Ylp3blF0eldCdGhwa1Q0VFhLVWliTzY1dHllSzdlQ3hTdnBibGdwclRlcDIrSUFYQjJDeHhqcm43MTBPJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsXTpcbiAgICAgICAgICAgICdzaGEzODQtdXlBR0wxLzMrWEpBSG5Hb055NGVDb1hkeko0ZjdJbHpwKzZ3OVBObkVqczZEQ0N6OVdNeUpqTU4xZ3pjNzhVKycsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkxvY2FsUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LUxJdk9FTWtJVkV3VnVZQmRWT1FjMUFDNVliR0dsd3lmVWhlUzBBQ0syMThEMlNUdVZZUWxaNEZ5RVBvd0FFZlQnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5EYXRhQ29sbGVjdG9yXTpcbiAgICAgICAgICAgICdzaGEzODQtMWJvOUpEeitLc2N0aGMwODVjQ0tXdXI4Q0x3VW9CcG9OeXhzRGk3OTMybUNsMHpGcTNBNW12K0ZRTHc5R0hwVicsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlVzQmFua0FjY291bnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC14bUhCVmFVK3c3NFYrT2ViRDNBYVBPTkZ4SFVHTWYrUVJzOEcvSnhWUFhOTlA3TURhMmpMMElDV0hJZTJ0VGZKJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuR29vZ2xlUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LVdLREpsOG1xb1A4MnFacE1HSDZBYlp4bnZYblNXOElMVjRNNjRDeU1MaXVnR013dTdMeVA4OXdqQ2tIcXNpQmUnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5UaHJlZURTZWN1cmVdOlxuICAgICAgICAgICAgJ3NoYTM4NC1WUVVscEdIenNHdnM1WGVpR0ZpcDdFWFJzdm9IV0VYRFZtZ0NhY2ZieWllWkk5bWRCT3FxM05Tb3lvMjhPQ09CJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmlzYUNoZWNrb3V0XTpcbiAgICAgICAgICAgICdzaGEzODQteXg3bUFEZnpUTjBUNDNRNnJsSDQ5TElnMUVKMGlVWmdCcC9FY3pYOUxYc1VHa3lTZ3hyRCtuV0hRUkJreWZvVCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlZlbm1vXTpcbiAgICAgICAgICAgICdzaGEzODQtUVg0clBqb2oxWkRodUcwYVN5S3M1NmxFS0RxVE1UY2pZeFVIWTFTek81VlpEc3FJRTJOVGtxb3Q3S05TQ3lvdicsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkhvc3RlZEZpZWxkc106XG4gICAgICAgICAgICAnc2hhMzg0LVZ2WUJBQ2ZTdTBDci9KMzJ1S214RzdBWGNOT0pFMUF6SUlMM2tiaWt5UzdZS3A1Zno1SXMrTnpOUC9seWF1TnknLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5GYXN0bGFuZV06XG4gICAgICAgICAgICAnc2hhMzg0LTlvR3NaTVJad3BHdERFRFlhL2RGdDc2ZEVDcWoxeEFuaTlnSUtnYzNLZk1JaVJuUjczbkVlZVVETGlCenhoRmEnLFxuICAgIH0sXG4gICAgW0JSQUlOVFJFRV9TREtfREVGQVVMVF9WRVJTSU9OXToge1xuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5DbGllbnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1vK25iUUdjd05OeElCZVhldTMrWG1iU3ErQ2c4UjNFTjNOMGw1aFhDZ01NVTJSR1kwdDF6MExyb1NFSUFiZkFPJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsQ2hlY2tvdXRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1XcmZiV1BCUzRtSDg2R0FveWNQU2dpSDhoUThLSDdBNjdDOTNIamh1bnYveGhOazJZcEJuM3diRkE0RmhnOVUvJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsXTpcbiAgICAgICAgICAgICdzaGEzODQtVkYzODludnZyUlVnRHNUWE14VFlPUkR0VmVnQjlJUWEzQ3hyLy9EeUpuTFluejgvWDhWQ3pFdmNrMmMrTWVndCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkxvY2FsUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LXRaS3gyckVRYmZtWnBvUFNZNVZQbUpFaGFxNFg3NWRMdndITXMzVkU5VStDOGxQeXcraFdUSUwxK0dQdldDSUgnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5EYXRhQ29sbGVjdG9yXTpcbiAgICAgICAgICAgICdzaGEzODQtRTZrM3dPcFA3c3lDRER3YVJETEYwNjk0MlkwME5rYndKdldpMk9RWHd3S3pHd0c1ZmQzRTdSRlV2Q0NlY2Z2TycsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlVzQmFua0FjY291bnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC0yNThGT044TFpHRzBXOVFhejRKaWo4M3BaSHUzMFluS2pKQTdnTnVsTEJoNkNjbGt1Y2dGK3RIRFF1WUZSWWZXJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuR29vZ2xlUGF5bWVudF06XG4gICAgICAgICAgICAnc2hhMzg0LXRhSjJwLzArbjBWSDMyOFBPQW9CaXVFYkwzdG5IVVRFOVM0MmhLMVYrVHhzM1grUVlqWk95S1czNUpnSFJGZk8nLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5UaHJlZURTZWN1cmVdOlxuICAgICAgICAgICAgJ3NoYTM4NC0rTlNaSDRaajNzTzViZFd2UEtoVTVOMTZRRHhldWVUVlRuVVZlbGVlRVNraExTYXo0T2IxaGgvNW15ZWNjOVltJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVmlzYUNoZWNrb3V0XTpcbiAgICAgICAgICAgICdzaGEzODQtNjZEaUJqZ2h4azFPbUJqOGFrc044Z2JRK0N3b1FjeDF2UGZpWFVOMDhnMWlRVk0rQndld0YwcDd0b00zaTdTUycsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlZlbm1vXTpcbiAgICAgICAgICAgICdzaGEzODQtQjVVd1k0MmtFNFJvTG9XYlE3WXBxb3NVbFVhZDIvRGxHV2l3MEhob1piU1BrMzBDUUFhU0ExMG9oeUxEVGtEVScsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkhvc3RlZEZpZWxkc106XG4gICAgICAgICAgICAnc2hhMzg0LUF3OUVlc1NhVWVXeGUzNlBxRUhpT3lPeU9xOE02Q0liMWd3Ny95SE5WUFJ6R3RGWFhjZDJPUThxWHJJbE9qMlAnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5GYXN0bGFuZV06XG4gICAgICAgICAgICAnc2hhMzg0LXJoQkwxaHBaNzFKcUcrMlRzVDBEaWg0N21iang4Y2pKQ3BlWmprOXR3M2RmMWdGTUtmQ1RtTXladW5ocjdINFknLFxuICAgIH0sXG4gICAgW0JSQUlOVFJFRV9TREtfSE9TVEVEX0ZJRUxEU19GSVhfVkVSU0lPTl06IHtcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuQ2xpZW50XTpcbiAgICAgICAgICAgICdzaGEzODQtMFdOeGtzSXBSUCtmWVppSWRyMTJnNkRCVVFmTER6WUNRSlp0Ui9DOEtrY3dTR2hQSGZjRnAzdFRhR2NNeUZUcScsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlBheXBhbENoZWNrb3V0XTpcbiAgICAgICAgICAgICdzaGEzODQtbFdNMWprNEJPeG9ETlY2S29wN3RWTnZRZ0lObG1FVnowYy9Pd00rSE5ISzNRQzh4cXdkNTRPdnJ0MlFSRFRqaCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlBheXBhbF06XG4gICAgICAgICAgICAnc2hhMzg0LWZYVW1WeEMyRU1aQkRYWjdlVEhTVEwvTEZCckhlai9NU1hUL3ZUQlh2cmE0bHpnTE5HdlJFQXAreDBHWU9idUgnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Mb2NhbFBheW1lbnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1waGExeEd1R1NrbVpINXg5YXFIdlJhTzR4TGVhN3JtUS83OVBGajl6eE56eHVGY09XWmc3Z09QN0ZpYnlnT0VDJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuRGF0YUNvbGxlY3Rvcl06XG4gICAgICAgICAgICAnc2hhMzg0LVE2UEkyRjllZWtXYkF4aHJveWJsK2FFY3ZxaGRvd04vRVFsR3dCVXlKT3pQRm45OTgydTl4bDZTVTZYZkdLemMnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Vc0JhbmtBY2NvdW50XTpcbiAgICAgICAgICAgICdzaGEzODQtVzNSTFFTS0pMMXRRMytZN21QNnRta2FtdFo4YlY0WXcvWHhMOUpqNUp0WEhyYUQ4bG9NRjhoQUlHNW0yeks3RicsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLkdvb2dsZVBheW1lbnRdOlxuICAgICAgICAgICAgJ3NoYTM4NC1USVRRTXNGV0EzZWxETkdQMm1XejJvS0JvNHFqdCtUbHF6b3ZjYVBvZUJpQWgvd1BCaTZuYWU1MEFEZGdVMS9pJyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuVGhyZWVEU2VjdXJlXTpcbiAgICAgICAgICAgICdzaGEzODQtWWl5Y1lOODlabEwvRXZjYXE0eTFhalcxbWhkN0pZZlpCRHVPd0h0SW40L0pubTIwR0wrL1hDTSt6WUF3V0Q4RCcsXG4gICAgICAgIFtCcmFpbnRyZWVNb2R1bGVOYW1lLlZpc2FDaGVja291dF06XG4gICAgICAgICAgICAnc2hhMzg0LS9PZGFUdjlxcmtLempPYnRVZTZ5emZEaEhvekZXLyt1WGxyU2w3MzZzT1pSSnBqR1FFVHZwWVhxTUZGZzY5eHYnLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5WZW5tb106XG4gICAgICAgICAgICAnc2hhMzg0LWRBK29qZFc5dmJKUzRKYXZjWHlPczlkNXVaSEpnNWROdFl1cG9QU0gyenNYSWlZRFZTNWFtTGIvdThxbVE2b3onLFxuICAgICAgICBbQnJhaW50cmVlTW9kdWxlTmFtZS5Ib3N0ZWRGaWVsZHNdOlxuICAgICAgICAgICAgJ3NoYTM4NC0zMVprUzU4K2lhV3NXMDZmdFc1Mnp6VlpGcDQzV1BkN3BOWVJpZGRZeW5TTmc2T2g3V0diU0ZHb3JBVUg2VDF6JyxcbiAgICAgICAgW0JyYWludHJlZU1vZHVsZU5hbWUuRmFzdGxhbmVdOlxuICAgICAgICAgICAgJ3NoYTM4NC1qbGJyd052TDNIdkxBVUN0TFNtcm5RMkdIMXVkQ1VyUlMvYlZtUmVBUzVmdUlWdmNXOFBrby9Ha2c4MnRsZ3RyJyxcbiAgICB9LFxufTtcbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG5leHBvcnQgZW51bSBNaXNzaW5nRGF0YUVycm9yVHlwZSB7XG4gICAgTWlzc2luZ0JpbGxpbmdBZGRyZXNzLFxuICAgIE1pc3NpbmdDYXJ0LFxuICAgIE1pc3NpbmdDaGVja291dCxcbiAgICBNaXNzaW5nQ29uc2lnbm1lbnRzLFxuICAgIE1pc3NpbmdDdXN0b21lcixcbiAgICBNaXNzaW5nQ2hlY2tvdXRDb25maWcsXG4gICAgTWlzc2luZ09yZGVyLFxuICAgIE1pc3NpbmdPcmRlckNvbmZpZyxcbiAgICBNaXNzaW5nT3JkZXJJZCxcbiAgICBNaXNzaW5nUGF5bWVudCxcbiAgICBNaXNzaW5nUGF5bWVudElkLFxuICAgIE1pc3NpbmdQYXltZW50SW5zdHJ1bWVudCxcbiAgICBNaXNzaW5nUGF5bWVudE1ldGhvZCxcbiAgICBNaXNzaW5nUGF5bWVudFJlZGlyZWN0VXJsLFxuICAgIE1pc3NpbmdQYXltZW50U3RhdHVzLFxuICAgIE1pc3NpbmdQYXltZW50VG9rZW4sXG4gICAgTWlzc2luZ1NoaXBwaW5nQWRkcmVzcyxcbn1cblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIHdoZW4gZGF0YSB0aGF0IGlzIGV4cGVjdGVkIHRvIGV4aXN0IGlzIG1pc3NpbmcuIFVzdWFsbHkgaXRcbiAqIGlzIGR1ZSB0byB0aGUgZmFjdCB0aGF0IGNlcnRhaW4gZGF0YSBoYXMgbm90IGJlZW4gcmV0cmlldmVkIGZyb20gb3Igc2F2ZWQgdG9cbiAqIHRoZSBzZXJ2ZXIgeWV0LiBBbmQgc3VjaCBkYXRhIGlzIHJlcXVpcmVkIHRvIHBlcmZvcm0gY2VydGFpbiBhY3Rpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaXNzaW5nRGF0YUVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHN1YnR5cGU6IE1pc3NpbmdEYXRhRXJyb3JUeXBlKSB7XG4gICAgICAgIHN1cGVyKGdldEVycm9yTWVzc2FnZShzdWJ0eXBlKSk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ01pc3NpbmdEYXRhRXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAnbWlzc2luZ19kYXRhJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZSh0eXBlOiBNaXNzaW5nRGF0YUVycm9yVHlwZSk6IHN0cmluZyB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0JpbGxpbmdBZGRyZXNzOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIGJpbGxpbmcgYWRkcmVzcyBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2FydDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjYXJ0IGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDb25zaWdubWVudHM6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY29uc2lnbm1lbnRzIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDaGVja291dDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjaGVja291dCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ3VzdG9tZXI6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgY3VzdG9tZXIgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NoZWNrb3V0Q29uZmlnOlxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlckNvbmZpZzpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBjb25maWd1cmF0aW9uIGRhdGEgaXMgdW5hdmFpbGFibGUuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdPcmRlcjpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBvcmRlciBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nT3JkZXJJZDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBvcmRlciBJRCBpcyB1bmF2YWlsYWJsZSBvciBub3QgZ2VuZXJhdGVkIHlldC4nO1xuXG4gICAgICAgIGNhc2UgTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgcGF5bWVudCBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgY2FzZSBNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudFRva2VuOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHRoZSB0b2tlbiByZXF1aXJlZCB0byBzdWJtaXQgYSBwYXltZW50IGlzIG1pc3NpbmcuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kOlxuICAgICAgICAgICAgcmV0dXJuICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIHBheW1lbnQgbWV0aG9kIGRhdGEgaXMgdW5hdmFpbGFibGUgb3Igbm90IHByb3Blcmx5IGNvbmZpZ3VyZWQuJztcblxuICAgICAgICBjYXNlIE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdTaGlwcGluZ0FkZHJlc3M6XG4gICAgICAgICAgICByZXR1cm4gJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2Ugc2hpcHBpbmcgYWRkcmVzcyBkYXRhIGlzIHVuYXZhaWxhYmxlLic7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgcmVxdWlyZWQgZGF0YSBpcyB1bmF2YWlsYWJsZS4nO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHsgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgQlJBSU5UUkVFX1NES19TQ1JJUFRTX0lOVEVHUklUWSB9IGZyb20gJy4vYnJhaW50cmVlLXNkay1zY3JpcHRzLWludGVncml0eSc7XG5pbXBvcnQgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgZnJvbSAnLi9icmFpbnRyZWUtc2RrLXZlcnNpb24tbWFuYWdlcic7XG5pbXBvcnQgaXNNYW5hZ2VhYmxlQnJhaW50cmVlU0RLVmVyc2lvbiBmcm9tICcuL2lzTWFuYWdlYWJsZUJyYWludHJlZVNES1ZlcnNpb24nO1xuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVDbGllbnRDcmVhdG9yLFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yLFxuICAgIEJyYWludHJlZUZhc3RsYW5lQ3JlYXRvcixcbiAgICBCcmFpbnRyZWVHb29nbGVQYXltZW50Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yLFxuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVNb2R1bGVDcmVhdG9ycyxcbiAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLFxuICAgIEJyYWludHJlZVBheXBhbENoZWNrb3V0Q3JlYXRvcixcbiAgICBCcmFpbnRyZWVQYXlwYWxDcmVhdG9yLFxuICAgIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3IsXG4gICAgQnJhaW50cmVlVXNCYW5rQWNjb3VudENyZWF0b3IsXG4gICAgQnJhaW50cmVlVmVubW9DaGVja291dENyZWF0b3IsXG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3JlYXRvcixcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBWaXNhQ2hlY2tvdXRTREsgfSBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVNjcmlwdExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgc2NyaXB0TG9hZGVyOiBTY3JpcHRMb2FkZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcjogQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgbG9hZENsaWVudCgpOiBQcm9taXNlPEJyYWludHJlZUNsaWVudENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlQ2xpZW50Q3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLkNsaWVudCxcbiAgICAgICAgICAgICdjbGllbnQubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkRmFzdGxhbmUoKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUNyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlRmFzdGxhbmVDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuRmFzdGxhbmUsXG4gICAgICAgICAgICAnZmFzdGxhbmUubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkUGF5cGFsQ2hlY2tvdXQoKTogUHJvbWlzZTxCcmFpbnRyZWVQYXlwYWxDaGVja291dENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlUGF5cGFsQ2hlY2tvdXRDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAncGF5cGFsLWNoZWNrb3V0Lm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFBheXBhbCgpOiBQcm9taXNlPEJyYWludHJlZVBheXBhbENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlUGF5cGFsQ3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLlBheXBhbCxcbiAgICAgICAgICAgICdwYXlwYWwubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkTG9jYWxQYXltZW50KCk6IFByb21pc2U8QnJhaW50cmVlTG9jYWxQYXltZW50Q3JlYXRvcj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdzxCcmFpbnRyZWVMb2NhbFBheW1lbnRDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuTG9jYWxQYXltZW50LFxuICAgICAgICAgICAgJ2xvY2FsLXBheW1lbnQubWluLmpzJyxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2FkRGF0YUNvbGxlY3RvcigpOiBQcm9taXNlPEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRCcmFpbnRyZWVNb2R1bGVPclRocm93PEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yPihcbiAgICAgICAgICAgIEJyYWludHJlZU1vZHVsZU5hbWUuRGF0YUNvbGxlY3RvcixcbiAgICAgICAgICAgICdkYXRhLWNvbGxlY3Rvci5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRVc0JhbmtBY2NvdW50KCk6IFByb21pc2U8QnJhaW50cmVlVXNCYW5rQWNjb3VudENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlVXNCYW5rQWNjb3VudENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5Vc0JhbmtBY2NvdW50LFxuICAgICAgICAgICAgJ3VzLWJhbmstYWNjb3VudC5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRHb29nbGVQYXltZW50KCk6IFByb21pc2U8QnJhaW50cmVlR29vZ2xlUGF5bWVudENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlR29vZ2xlUGF5bWVudENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5Hb29nbGVQYXltZW50LFxuICAgICAgICAgICAgJ2dvb2dsZS1wYXltZW50Lm1pbi5qcycsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZDNEUygpOiBQcm9taXNlPEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlVGhyZWVEU2VjdXJlQ3JlYXRvcj4oXG4gICAgICAgICAgICBCcmFpbnRyZWVNb2R1bGVOYW1lLlRocmVlRFNlY3VyZSxcbiAgICAgICAgICAgICd0aHJlZS1kLXNlY3VyZS5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGxvYWRWaXNhQ2hlY2tvdXQoKTogUHJvbWlzZTxCcmFpbnRyZWVWaXNhQ2hlY2tvdXRDcmVhdG9yPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRCcmFpbnRyZWVNb2R1bGVPclRocm93PEJyYWludHJlZVZpc2FDaGVja291dENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5WaXNhQ2hlY2tvdXQsXG4gICAgICAgICAgICAndmlzYS1jaGVja291dC5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGxvYWRWZW5tb0NoZWNrb3V0KCk6IFByb21pc2U8QnJhaW50cmVlVmVubW9DaGVja291dENyZWF0b3I+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEJyYWludHJlZU1vZHVsZU9yVGhyb3c8QnJhaW50cmVlVmVubW9DaGVja291dENyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5WZW5tbyxcbiAgICAgICAgICAgICd2ZW5tby5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRIb3N0ZWRGaWVsZHMoKTogUHJvbWlzZTxCcmFpbnRyZWVIb3N0ZWRGaWVsZHNDcmVhdG9yPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRCcmFpbnRyZWVNb2R1bGVPclRocm93PEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3I+KFxuICAgICAgICAgICAgQnJhaW50cmVlTW9kdWxlTmFtZS5Ib3N0ZWRGaWVsZHMsXG4gICAgICAgICAgICAnaG9zdGVkLWZpZWxkcy5taW4uanMnLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGxvYWRWaXNhQ2hlY2tvdXRTZGsodGVzdE1vZGU/OiBib29sZWFuKTogUHJvbWlzZTxWaXNhQ2hlY2tvdXRTREs+IHtcbiAgICAgICAgaWYgKHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5WKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93LlY7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoID0gdGVzdE1vZGVcbiAgICAgICAgICAgID8gJ3NoYTM4NC0wZXUxczFHdHF6WGxMOUR0TGdtd3pDNVdXbEVIL0FEUk0wbjM4Y1ZRa3Z0VCtXL2dleTk2cmNiMUx3dVVPUERtJ1xuICAgICAgICAgICAgOiAnc2hhMzg0LTFmMWNzdlAzWkZ4ZzRkSUxIMUdhWTRMSGxaMG9YN1JrODNyeG1MbHdibklpNFRNME5ZelhvZXYxVm9FaVZEUzYnO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNjcmlwdExvYWRlclxuICAgICAgICAgICAgLmxvYWRTY3JpcHQoXG4gICAgICAgICAgICAgICAgYC8vJHtcbiAgICAgICAgICAgICAgICAgICAgdGVzdE1vZGUgPyAnc2FuZGJveC0nIDogJydcbiAgICAgICAgICAgICAgICB9YXNzZXRzLnNlY3VyZS5jaGVja291dC52aXNhLmNvbS9jaGVja291dC13aWRnZXQvcmVzb3VyY2VzL2pzL2ludGVncmF0aW9uL3YxL3Nkay5qc2AsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdyaXR5OiBoYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NvcmlnaW46ICdhbm9ueW1vdXMnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cuVikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93LlY7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRCcmFpbnRyZWVNb2R1bGVPclRocm93PFQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGVDcmVhdG9ycz4oXG4gICAgICAgIGJyYWludHJlZU1vZHVsZU5hbWU6IEJyYWludHJlZU1vZHVsZU5hbWUsXG4gICAgICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxUPiB7XG4gICAgICAgIGxldCBtb2R1bGUgPSB0aGlzLmdldEJyYWludHJlZU1vZHVsZShicmFpbnRyZWVNb2R1bGVOYW1lKTtcblxuICAgICAgICBpZiAobW9kdWxlKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlIGFzIFQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBicmFpbnRyZWVTZGtWZXJzaW9uID0gdGhpcy5icmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlci5nZXRTREtWZXJzaW9uKCk7XG5cbiAgICAgICAgY29uc3Qgc2NyaXB0UGF0aCA9IGAvL2pzLmJyYWludHJlZWdhdGV3YXkuY29tL3dlYi8ke2JyYWludHJlZVNka1ZlcnNpb259L2pzLyR7ZmlsZU5hbWV9YDtcblxuICAgICAgICBjb25zdCBpbnRlZ3JpdHkgPSBpc01hbmFnZWFibGVCcmFpbnRyZWVTREtWZXJzaW9uKGJyYWludHJlZVNka1ZlcnNpb24pXG4gICAgICAgICAgICA/IHRoaXMuZ2V0SW50ZWdyaXR5VmFsdWVzQnlNb2R1bGVOYW1lKGJyYWludHJlZU1vZHVsZU5hbWUsIGJyYWludHJlZVNka1ZlcnNpb24pXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBhd2FpdCB0aGlzLnNjcmlwdExvYWRlci5sb2FkU2NyaXB0KFxuICAgICAgICAgICAgc2NyaXB0UGF0aCxcbiAgICAgICAgICAgIGludGVncml0eVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZWdyaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc29yaWdpbjogJ2Fub255bW91cycsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgKTtcblxuICAgICAgICBtb2R1bGUgPSB0aGlzLmdldEJyYWludHJlZU1vZHVsZShicmFpbnRyZWVNb2R1bGVOYW1lKTtcblxuICAgICAgICBpZiAoIW1vZHVsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgICAgIHJldHVybiBtb2R1bGUgYXMgVDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEJyYWludHJlZU1vZHVsZShcbiAgICAgICAgYnJhaW50cmVlTW9kdWxlTmFtZTogQnJhaW50cmVlTW9kdWxlTmFtZSxcbiAgICApOiBCcmFpbnRyZWVNb2R1bGVDcmVhdG9ycyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cuYnJhaW50cmVlPy5bYnJhaW50cmVlTW9kdWxlTmFtZV07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRJbnRlZ3JpdHlWYWx1ZXNCeU1vZHVsZU5hbWUoXG4gICAgICAgIG1vZHVsZU5hbWU6IEJyYWludHJlZU1vZHVsZU5hbWUsXG4gICAgICAgIHZlcnNpb246IGtleW9mIHR5cGVvZiBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZLFxuICAgICk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGludGVncml0eSA9IEJSQUlOVFJFRV9TREtfU0NSSVBUU19JTlRFR1JJVFlbdmVyc2lvbl1bbW9kdWxlTmFtZV07XG5cbiAgICAgICAgaWYgKCFpbnRlZ3JpdHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBmaWxlTmFtZSB2YWx1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGludGVncml0eTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZIH0gZnJvbSAnLi9icmFpbnRyZWUtc2RrLXNjcmlwdHMtaW50ZWdyaXR5JztcblxuZnVuY3Rpb24gaXNNYW5hZ2VhYmxlQnJhaW50cmVlU0RLVmVyc2lvbihcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXG4pOiB2ZXJzaW9uIGlzIGtleW9mIHR5cGVvZiBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZIHtcbiAgICByZXR1cm4gdmVyc2lvbiBpbiBCUkFJTlRSRUVfU0RLX1NDUklQVFNfSU5URUdSSVRZO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hbmFnZWFibGVCcmFpbnRyZWVTREtWZXJzaW9uO1xuIiwiaW1wb3J0IFJlc29sdmFibGVNb2R1bGUgZnJvbSAnLi9yZXNvbHZhYmxlLW1vZHVsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUmVzb2x2YWJsZU1vZHVsZTxUTW9kdWxlLCBUSWRlbnRpZmllcj4oXG4gICAgbW9kdWxlOiBUTW9kdWxlLFxuICAgIHJlc29sdmVJZHM6IFRJZGVudGlmaWVyW10sXG4pOiBSZXNvbHZhYmxlTW9kdWxlPFRNb2R1bGUsIFRJZGVudGlmaWVyPiB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obW9kdWxlLCB7IHJlc29sdmVJZHMgfSk7XG59XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICBCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyQ3JlZGVudGlhbHMsXG4gICAgQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICBDdXN0b21lclN0cmF0ZWd5LFxuICAgIERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTdGFuZGFyZEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoQnJhaW50cmVlUGF5cGFsQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVBheXBhbEN1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDdXN0b21lckluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVlcGF5cGFsLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbCB8fCB7fTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlcGF5cGFsLmNvbnRhaW5lclwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBsZXQgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QuY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudFRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoX2UpIHtcbiAgICAgICAgICAgIHN0YXRlID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBjb25maWcsIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gcGF5bWVudE1ldGhvZDtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBpbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IHsgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMgfSA9IHBheW1lbnRCdXR0b25TdHlsZXMgfHwge307XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0T3B0aW9uczogUGFydGlhbDxCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnPiA9IHtcbiAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICBpbnRlbnQ6IGluaXRpYWxpemF0aW9uRGF0YS5pbnRlbnQsXG4gICAgICAgICAgICBpc0NyZWRpdEVuYWJsZWQ6IGluaXRpYWxpemF0aW9uRGF0YS5pc0NyZWRpdEVuYWJsZWQsXG4gICAgICAgICAgICBjb21taXQ6IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrID0gKFxuICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKFxuICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBCb29sZWFuKGNvbmZpZy50ZXN0TW9kZSksXG4gICAgICAgICAgICAgICAgY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWw6IEJyYWludHJlZVBheXBhbEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHRlc3RNb2RlOiBib29sZWFuLFxuICAgICAgICBidXR0b25TdHlsZXM6IFBheXBhbFN0eWxlT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2sgPSBub29wIH0gPSBicmFpbnRyZWVwYXlwYWw7XG5cbiAgICAgICAgY29uc3QgeyBwYXlwYWwgfSA9IHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdztcbiAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZSA9IHBheXBhbD8uRlVORElORy5QQVlQQUw7XG5cbiAgICAgICAgaWYgKHBheXBhbCAmJiBmdW5kaW5nU291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgZW52OiB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVFbnYodGVzdE1vZGUpLFxuICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHsgLi4uYnV0dG9uU3R5bGVzLCBoZWlnaHQ6IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwUGF5bWVudChicmFpbnRyZWVQYXlwYWxDaGVja291dCwgYnJhaW50cmVlcGF5cGFsLCBtZXRob2RJZCksXG4gICAgICAgICAgICAgICAgb25BcHByb3ZlOiAoYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSkgPT5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZVBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChjb250YWluZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXR1cFBheW1lbnQoXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsOiBCcmFpbnRyZWVQYXlwYWxDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8c3RyaW5nIHwgdm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudCA9IHN0YXRlLmdldENoZWNrb3V0T3JUaHJvdygpLm91dHN0YW5kaW5nQmFsYW5jZTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZDogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+ID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG4gICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gY3VzdG9tZXI/LmFkZHJlc3Nlc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlID0gYWRkcmVzc1xuICAgICAgICAgICAgICAgID8gdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZShhZGRyZXNzKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQuY3JlYXRlUGF5bWVudCh7XG4gICAgICAgICAgICAgICAgZmxvdzogJ2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBlbmFibGVTaGlwcGluZ0FkZHJlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzRWRpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLFxuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICBjdXJyZW5jeSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNvbnRhaW5lciwgb25FcnJvciB9ID0gYnJhaW50cmVlcGF5cGFsO1xuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBjb250YWluZXIsIG9uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0b2tlbml6ZVBheW1lbnQoXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsOiBCcmFpbnRyZWVQYXlwYWxDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkIHwgdm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXREYXRhQ29sbGVjdG9yKHtcbiAgICAgICAgICAgICAgICBwYXlwYWw6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuaXplUGF5bG9hZCA9IGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LnRva2VuaXplUGF5bWVudChhdXRob3JpemVEYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV0YWlscywgbm9uY2UgfSA9IHRva2VuaXplUGF5bG9hZDtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKGRldGFpbHMpO1xuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID1cbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0xlZ2FjeVNoaXBwaW5nQWRkcmVzcyhkZXRhaWxzKTtcblxuICAgICAgICAgICAgdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgICAgIHBheW1lbnRfdHlwZTogJ3BheXBhbCcsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgYmlsbGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBidXR0b25Db250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBvbkVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChidXR0b25Db250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3JDYWxsYmFjayAmJiBpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgb25FcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiY29uc3QgRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0ID0gMzY7XG5cbmV4cG9ydCBkZWZhdWx0IERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodDtcbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQ3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3VzdG9tZXItc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5OiBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSA9IG5ldyBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5KFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBjcmVhdGVGb3JtUG9zdGVyKCksXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVBheXBhbEN1c3RvbWVyU3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVlcGF5cGFsJyB9LFxuXSk7XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICBCcmFpbnRyZWVQYXlwYWxTZGtDcmVhdG9yQ29uZmlnLFxuICAgIEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyQ3JlZGVudGlhbHMsXG4gICAgQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICBDdXN0b21lclN0cmF0ZWd5LFxuICAgIERlZmF1bHRDaGVja291dEJ1dHRvbkhlaWdodCxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTdGFuZGFyZEVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsIHtcbiAgICBXaXRoQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWNyZWRpdC1jdXN0b21lci1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lclN0cmF0ZWd5IGltcGxlbWVudHMgQ3VzdG9tZXJTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXBheXBhbGNyZWRpdCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQgfHwge307XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFicmFpbnRyZWVwYXlwYWxjcmVkaXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVwYXlwYWxjcmVkaXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdC5jb250YWluZXJcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgbGV0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPjtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICAgICAgaWYgKCFwYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRUb2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG4gICAgICAgICAgICBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudEJ1dHRvblN0eWxlcyB9ID0gaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0VG9wQnV0dG9uU3R5bGVzIH0gPSBwYXltZW50QnV0dG9uU3R5bGVzIHx8IHt9O1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3VycmVuY3lDb2RlID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dE9wdGlvbnM6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgaW50ZW50OiBpbml0aWFsaXphdGlvbkRhdGEuaW50ZW50LFxuICAgICAgICAgICAgaXNDcmVkaXRFbmFibGVkOiBpbml0aWFsaXphdGlvbkRhdGEuaXNDcmVkaXRFbmFibGVkLFxuICAgICAgICAgICAgY29tbWl0OiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayA9IChcbiAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQsXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgQm9vbGVhbihjb25maWcudGVzdE1vZGUpLFxuICAgICAgICAgICAgICAgIHsgLi4uY2hlY2tvdXRUb3BCdXR0b25TdHlsZXMsIGhlaWdodDogRGVmYXVsdENoZWNrb3V0QnV0dG9uSGVpZ2h0IH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbkluKGNyZWRlbnRpYWxzOiBDdXN0b21lckNyZWRlbnRpYWxzLCBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25JbkN1c3RvbWVyKGNyZWRlbnRpYWxzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduT3V0KG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbk91dEN1c3RvbWVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQob3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIG9wdGlvbnM/LmNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2s/LigpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIHRlc3RNb2RlOiBib29sZWFuLFxuICAgICAgICBidXR0b25TdHlsZXM6IFBheXBhbFN0eWxlT3B0aW9ucyxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uQ2xpY2sgPSBub29wIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQ7XG4gICAgICAgIGNvbnN0IHsgcGF5cGFsIH0gPSB0aGlzLmJyYWludHJlZUhvc3RXaW5kb3c7XG5cbiAgICAgICAgbGV0IGhhc1JlbmRlcmVkU21hcnRCdXR0b24gPSBmYWxzZTtcblxuICAgICAgICBpZiAocGF5cGFsKSB7XG4gICAgICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlcyA9IFtwYXlwYWwuRlVORElORy5QQVlMQVRFUiwgcGF5cGFsLkZVTkRJTkcuQ1JFRElUXTtcblxuICAgICAgICAgICAgZnVuZGluZ1NvdXJjZXMuZm9yRWFjaCgoZnVuZGluZ1NvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25TdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVPcmRlcjogKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbGNyZWRpdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQXBwcm92ZTogKGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZVBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uUmVuZGVyLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVyfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGF5cGFsIHx8ICFoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldHVwUGF5bWVudChcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpO1xuXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCkub3V0c3RhbmRpbmdCYWxhbmNlO1xuICAgICAgICAgICAgY29uc3QgY3VycmVuY3kgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4gPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgPSBhZGRyZXNzXG4gICAgICAgICAgICAgICAgPyB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5tYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlKGFkZHJlc3MpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC5jcmVhdGVQYXltZW50KHtcbiAgICAgICAgICAgICAgICBmbG93OiAnY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIGVuYWJsZVNoaXBwaW5nQWRkcmVzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NFZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUsXG4gICAgICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgICAgIG9mZmVyQ3JlZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGludGVudDogcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmludGVudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgeyBjb250YWluZXIsIG9uRXJyb3IgfSA9IGJyYWludHJlZXBheXBhbGNyZWRpdDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVyLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBhdXRob3JpemVEYXRhOiBQYXlwYWxBdXRob3JpemVEYXRhLFxuICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dDogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGJyYWludHJlZXBheXBhbGNyZWRpdDogQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZCB8IHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0RGF0YUNvbGxlY3Rvcih7XG4gICAgICAgICAgICAgICAgcGF5cGFsOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbml6ZVBheWxvYWQgPSBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC50b2tlbml6ZVBheW1lbnQoYXV0aG9yaXplRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGRldGFpbHMsIG5vbmNlIH0gPSB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lCaWxsaW5nQWRkcmVzcyhkZXRhaWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlscyk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgICAgICBwYXltZW50X3R5cGU6ICdwYXlwYWwnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgIGRldmljZV9kYXRhOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHNoaXBwaW5nQWRkcmVzcyksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRva2VuaXplUGF5bG9hZDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSBicmFpbnRyZWVwYXlwYWxjcmVkaXQ7XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIGNvbnRhaW5lciwgb25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogdW5rbm93bixcbiAgICAgICAgYnV0dG9uQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgb25FcnJvckNhbGxiYWNrPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoYnV0dG9uQ29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChvbkVycm9yQ2FsbGJhY2sgJiYgaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIG9uRXJyb3JDYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneTogQ3VzdG9tZXJTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQ3JlZGl0Q3VzdG9tZXJTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbGNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgb21pdEJ5IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sIEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MgfSBmcm9tICcuLi9pbmRleCc7XG5cbmZ1bmN0aW9uIGlzSW52YWxpZFN0eWxlT3B0aW9uKHN0eWxlT3B0aW9uOiB1bmtub3duKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzdHlsZU9wdGlvbiAhPT0gJ3N0cmluZyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZhc3RsYW5lU3R5bGVzKFxuICAgIHN0eWxlU2V0dGluZ3M/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIHVpU3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4pOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF1aVN0eWxlcyAmJiAhc3R5bGVTZXR0aW5ncykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBjbGVhblVwRmFzdGxhbmVTdHlsZXMobWVyZ2VGYXN0bGFuZVN0eWxlcyhzdHlsZVNldHRpbmdzLCB1aVN0eWxlcykpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUZhc3RsYW5lU3R5bGVzKFxuICAgIHN0eWxlU2V0dGluZ3M/OiBGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgIHVpU3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4pOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc0JhY2tncm91bmRDb2xvciB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5yb290Py5iYWNrZ3JvdW5kQ29sb3JQcmltYXJ5LFxuICAgICAgICAgICAgZXJyb3JDb2xvcjogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NFcnJvckNvbG9yIHx8IHVpU3R5bGVzPy5yb290Py5lcnJvckNvbG9yLFxuICAgICAgICAgICAgZm9udEZhbWlseTogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVSb290U2V0dGluZ3NGb250RmFtaWx5IHx8IHVpU3R5bGVzPy5yb290Py5mb250RmFtaWx5LFxuICAgICAgICAgICAgZm9udFNpemVCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemUgfHwgdWlTdHlsZXM/LnJvb3Q/LmZvbnRTaXplQmFzZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lUm9vdFNldHRpbmdzUGFkZGluZyB8fCB1aVN0eWxlcz8ucm9vdD8ucGFkZGluZyxcbiAgICAgICAgICAgIHByaW1hcnlDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVJvb3RTZXR0aW5nc1ByaW1hcnlDb2xvciB8fCB1aVN0eWxlcz8ucm9vdD8ucHJpbWFyeUNvbG9yLFxuICAgICAgICB9LFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cyB8fCB1aVN0eWxlcz8uaW5wdXQ/LmJvcmRlclJhZGl1cyxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlckNvbG9yIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBmb2N1c0JvcmRlckNvbG9yOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0ZvY3VzQm9yZGVyQmFzZSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy5pbnB1dD8uZm9jdXNCb3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZUlucHV0U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IgfHxcbiAgICAgICAgICAgICAgICB1aVN0eWxlcz8uaW5wdXQ/LmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlcldpZHRoIHx8IHVpU3R5bGVzPy5pbnB1dD8uYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICB0ZXh0Q29sb3JCYXNlOlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lSW5wdXRTZXR0aW5nc1RleHRDb2xvckJhc2UgfHwgdWlTdHlsZXM/LmlucHV0Py50ZXh0Q29sb3JCYXNlLFxuICAgICAgICB9LFxuICAgICAgICB0b2dnbGU6IHtcbiAgICAgICAgICAgIGNvbG9yUHJpbWFyeTpcbiAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5IHx8IHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yUHJpbWFyeSxcbiAgICAgICAgICAgIGNvbG9yU2Vjb25kYXJ5OlxuICAgICAgICAgICAgICAgIHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeSB8fFxuICAgICAgICAgICAgICAgIHVpU3R5bGVzPy50b2dnbGU/LmNvbG9yU2Vjb25kYXJ5LFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHN0eWxlU2V0dGluZ3M/LmZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0NvbG9yIHx8IHVpU3R5bGVzPy50ZXh0Py5ib2R5Py5jb2xvcixcbiAgICAgICAgICAgICAgICBmb250U2l6ZTpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzRm9udFNpemUgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmJvZHk/LmZvbnRTaXplLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHRpb246IHtcbiAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzQ29sb3IgfHxcbiAgICAgICAgICAgICAgICAgICAgdWlTdHlsZXM/LnRleHQ/LmNhcHRpb24/LmNvbG9yLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOlxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNldHRpbmdzPy5mYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZSB8fFxuICAgICAgICAgICAgICAgICAgICB1aVN0eWxlcz8udGV4dD8uY2FwdGlvbj8uZm9udFNpemUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBicmFuZGluZzogc3R5bGVTZXR0aW5ncz8uZmFzdGxhbmVCcmFuZGluZ1NldHRpbmdzIHx8IHVpU3R5bGVzPy5icmFuZGluZyxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjbGVhblVwRmFzdGxhbmVTdHlsZXMoc3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbikge1xuICAgIGNvbnN0IGZhc3RsYW5lU3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbiA9IHt9O1xuXG4gICAgY29uc3Qgcm9vdCA9IG9taXRCeShzdHlsZXMucm9vdCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGlucHV0ID0gb21pdEJ5KHN0eWxlcy5pbnB1dCwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IHRvZ2dsZSA9IG9taXRCeShzdHlsZXMudG9nZ2xlLCBpc0ludmFsaWRTdHlsZU9wdGlvbik7XG4gICAgY29uc3QgdGV4dEJvZHkgPSBvbWl0Qnkoc3R5bGVzLnRleHQ/LmJvZHksIGlzSW52YWxpZFN0eWxlT3B0aW9uKTtcbiAgICBjb25zdCB0ZXh0Q2FwdGlvbiA9IG9taXRCeShzdHlsZXMudGV4dD8uY2FwdGlvbiwgaXNJbnZhbGlkU3R5bGVPcHRpb24pO1xuICAgIGNvbnN0IGJyYW5kaW5nID0gc3R5bGVzLmJyYW5kaW5nO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHJvb3QpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5yb290ID0gcm9vdDtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoaW5wdXQpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy5pbnB1dCA9IGlucHV0O1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyh0b2dnbGUpLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50b2dnbGUgPSB0b2dnbGU7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRleHRCb2R5KS5sZW5ndGgpIHtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dCA9IHt9O1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0LmJvZHkgPSB0ZXh0Qm9keTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXModGV4dENhcHRpb24pLmxlbmd0aCkge1xuICAgICAgICBmYXN0bGFuZVN0eWxlcy50ZXh0ID0ge1xuICAgICAgICAgICAgLi4uZmFzdGxhbmVTdHlsZXMudGV4dCxcbiAgICAgICAgfTtcbiAgICAgICAgZmFzdGxhbmVTdHlsZXMudGV4dC5jYXB0aW9uID0gdGV4dENhcHRpb247XG4gICAgfVxuXG4gICAgaWYgKGJyYW5kaW5nKSB7XG4gICAgICAgIGZhc3RsYW5lU3R5bGVzLmJyYW5kaW5nID0gYnJhbmRpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhc3RsYW5lU3R5bGVzO1xufVxuIiwiaW1wb3J0IHsgQWRkcmVzcyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5leHBvcnQgKiBmcm9tICcuL2JyYWludHJlZSc7XG5leHBvcnQgKiBmcm9tICcuL3BheXBhbCc7XG5leHBvcnQgKiBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBNb2R1bGVcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBUSW5zdGFuY2UsXG4gICAgVE9wdGlvbnMgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnLFxuICAgIFRFcnJvciA9IEJyYWludHJlZUVycm9yLFxuPiB7XG4gICAgY3JlYXRlKFxuICAgICAgICBjb25maWc6IFRPcHRpb25zLFxuICAgICAgICBjYWxsYmFjaz86IChlcnJvcjogVEVycm9yLCBpbnN0YW5jZTogVEluc3RhbmNlKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8VEluc3RhbmNlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnQ7XG4gICAgYXV0aG9yaXphdGlvbj86IHN0cmluZzsgLy8gSW5mbzogYXV0aG9yaXphdGlvbiB1c2VzIGNsaWVudFRva2VuIGFzIGEgdmFsdWVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVNb2R1bGUge1xuICAgIHRlYXJkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBXaW5kb3dcbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlV2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgICBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnRDcmVhdG9yO1xuICAgIGJyYWludHJlZUZhc3RsYW5lPzogQnJhaW50cmVlRmFzdGxhbmU7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBDbGllbnRcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZUNsaWVudENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZUNsaWVudD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlQ2xpZW50IHtcbiAgICByZXF1ZXN0KHBheWxvYWQ6IEJyYWludHJlZUNsaWVudFJlcXVlc3RQYXlsb2FkKTogUHJvbWlzZTxCcmFpbnRyZWVDbGllbnRSZXF1ZXN0UmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUNsaWVudFJlcXVlc3RQYXlsb2FkIHtcbiAgICBkYXRhOiB7XG4gICAgICAgIGNyZWRpdENhcmQ6IHtcbiAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzPzoge1xuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlQWxwaGEyOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbG9jYWxpdHk6IHN0cmluZztcbiAgICAgICAgICAgICAgICBjb3VudHJ5TmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICAgICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBzdHJpbmc7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FyZGhvbGRlck5hbWU6IHN0cmluZztcbiAgICAgICAgICAgIGN2dj86IHN0cmluZztcbiAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiBzdHJpbmc7XG4gICAgICAgICAgICBudW1iZXI6IHN0cmluZztcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZTogYm9vbGVhbjtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBlbmRwb2ludDogc3RyaW5nO1xuICAgIG1ldGhvZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBkZXRhaWxzOiB7XG4gICAgICAgIGJpbjogc3RyaW5nO1xuICAgICAgICBjYXJkVHlwZTogc3RyaW5nO1xuICAgICAgICBleHBpcmF0aW9uTW9udGg6IHN0cmluZztcbiAgICAgICAgZXhwaXJhdGlvblllYXI6IHN0cmluZztcbiAgICAgICAgbGFzdEZvdXI6IHN0cmluZztcbiAgICAgICAgbGFzdFR3bzogc3RyaW5nO1xuICAgIH07XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgYmluRGF0YToge1xuICAgICAgICBjb21tZXJjaWFsOiBzdHJpbmc7XG4gICAgICAgIGNvdW50cnlPZklzc3VhbmNlOiBzdHJpbmc7XG4gICAgICAgIGRlYml0OiBzdHJpbmc7XG4gICAgICAgIGR1cmJpblJlZ3VsYXRlZDogc3RyaW5nO1xuICAgICAgICBoZWFsdGhjYXJlOiBzdHJpbmc7XG4gICAgICAgIGlzc3VpbmdCYW5rOiBzdHJpbmc7XG4gICAgICAgIHBheXJvbGw6IHN0cmluZztcbiAgICAgICAgcHJlcGFpZDogc3RyaW5nO1xuICAgICAgICBwcm9kdWN0SWQ6IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUNsaWVudFJlcXVlc3RSZXNwb25zZSB7XG4gICAgY3JlZGl0Q2FyZHM6IEJyYWludHJlZUhvc3RlZEZpZWxkc1Rva2VuaXplUGF5bG9hZFtdO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRGF0YSBDb2xsZWN0b3JcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnIGV4dGVuZHMgQnJhaW50cmVlTW9kdWxlQ3JlYXRvckNvbmZpZyB7XG4gICAga291bnQ/OiBib29sZWFuOyAvLyBJbmZvOiB0aGlzIHBhcmFtIGlzIG5lZWRlZCBmb3IgZnJhdWQgZGV0ZWN0aW9uIChzaG91bGQgYWx3YXlzIGJlICd0cnVlJylcbiAgICBwYXlwYWw/OiBib29sZWFuOyAvLyBUT0RPOiBiYXNlZCBvbiBicmFpbnRyZWUgZG9jdW1lbnRhdGlvbiwgdGhpcyBwYXJhbSBpcyBkZXByZWNhdGVkLCBzbyB3ZSBkb250IG5lZWQgaXQgYW55bW9yZVxuICAgIHJpc2tDb3JyZWxhdGlvbklkPzogc3RyaW5nOyAvLyBJbmZvOiB0aGUgb3B0aW9uIGlzIG5lZWRlZCBmb3IgUGF5UGFsIEFuYWx5dGljc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZURhdGFDb2xsZWN0b3IgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIGRldmljZURhdGE/OiBzdHJpbmc7XG59XG5cbi8vIFRPRE86IHJlbW92ZSB0aGlzIGludGVyZmFjZSB3aGVuIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSB3aWxsIGJlIHJlbW92ZWRcbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRGF0YUNvbGxlY3RvcnMge1xuICAgIGRlZmF1bHQ/OiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yO1xuICAgIHBheXBhbD86IEJyYWludHJlZURhdGFDb2xsZWN0b3I7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBHb29nbGUgUGF5bWVudFxuICpcbiAqL1xudHlwZSBCcmFpbnRyZWVHb29nbGVQYXltZW50QWRkcmVzc0Zvcm1hdCA9ICdGVUxMJyB8ICdNSU4nO1xuXG5leHBvcnQgZW51bSBUb3RhbFByaWNlU3RhdHVzVHlwZSB7XG4gICAgRVNUSU1BVEVEID0gJ0VTVElNQVRFRCcsXG4gICAgRklOQUwgPSAnRklOQUwnLFxuICAgIE5PVF9DVVJSRU5UTFlfS05PV04gPSAnTk9UX0NVUlJFTlRMWV9LTk9XTicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlR29vZ2xlUGF5bWVudERhdGFSZXF1ZXN0T3B0aW9ucyB7XG4gICAgbWVyY2hhbnRJbmZvOiB7XG4gICAgICAgIGF1dGhKd3Q/OiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50SWQ/OiBzdHJpbmc7XG4gICAgICAgIG1lcmNoYW50TmFtZT86IHN0cmluZztcbiAgICB9O1xuICAgIHRyYW5zYWN0aW9uSW5mbzoge1xuICAgICAgICBjdXJyZW5jeUNvZGU6IHN0cmluZztcbiAgICAgICAgdG90YWxQcmljZVN0YXR1czogVG90YWxQcmljZVN0YXR1c1R5cGU7XG4gICAgICAgIHRvdGFsUHJpY2U6IHN0cmluZztcbiAgICB9O1xuICAgIGNhcmRSZXF1aXJlbWVudHM6IHtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NGb3JtYXQ6IEJyYWludHJlZUdvb2dsZVBheW1lbnRBZGRyZXNzRm9ybWF0O1xuICAgIH07XG4gICAgZW1haWxSZXF1aXJlZD86IGJvb2xlYW47XG4gICAgcGhvbmVOdW1iZXJSZXF1aXJlZD86IGJvb2xlYW47XG4gICAgc2hpcHBpbmdBZGRyZXNzUmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheW1lbnREYXRhUmVxdWVzdCB7XG4gICAgYWxsb3dlZFBheW1lbnRNZXRob2RzOiBzdHJpbmdbXTtcbiAgICBhcGlWZXJzaW9uOiBudW1iZXI7XG4gICAgY2FyZFJlcXVpcmVtZW50czoge1xuICAgICAgICBhbGxvd2VkQ2FyZE5ldHdvcmtzOiBzdHJpbmdbXTtcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NGb3JtYXQ6IHN0cmluZztcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NSZXF1aXJlZDogYm9vbGVhbjtcbiAgICB9O1xuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XG4gICAgaToge1xuICAgICAgICBnb29nbGVUcmFuc2FjdGlvbklkOiBzdHJpbmc7XG4gICAgICAgIHN0YXJ0VGltZU1zOiBudW1iZXI7XG4gICAgfTtcbiAgICBtZXJjaGFudEluZm86IHtcbiAgICAgICAgbWVyY2hhbnRJZDogc3RyaW5nO1xuICAgICAgICBtZXJjaGFudE5hbWU6IHN0cmluZztcbiAgICAgICAgYXV0aEp3dD86IHN0cmluZztcbiAgICB9O1xuICAgIHBheW1lbnRNZXRob2RUb2tlbml6YXRpb25QYXJhbWV0ZXJzOiB7XG4gICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgICdicmFpbnRyZWU6YXBpVmVyc2lvbic6IHN0cmluZztcbiAgICAgICAgICAgICdicmFpbnRyZWU6YXV0aG9yaXphdGlvbkZpbmdlcnByaW50Jzogc3RyaW5nO1xuICAgICAgICAgICAgJ2JyYWludHJlZTptZXJjaGFudElkJzogc3RyaW5nO1xuICAgICAgICAgICAgJ2JyYWludHJlZTptZXRhZGF0YSc6IHN0cmluZztcbiAgICAgICAgICAgICdicmFpbnRyZWU6c2RrVmVyc2lvbic6IHN0cmluZztcbiAgICAgICAgICAgIGdhdGV3YXk6IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgdG9rZW5pemF0aW9uVHlwZTogc3RyaW5nO1xuICAgIH07XG4gICAgc2hpcHBpbmdBZGRyZXNzUmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgcGhvbmVOdW1iZXJSZXF1aXJlZDogYm9vbGVhbjtcbiAgICB0cmFuc2FjdGlvbkluZm86IHtcbiAgICAgICAgY3VycmVuY3lDb2RlOiBzdHJpbmc7XG4gICAgICAgIHRvdGFsUHJpY2U6IHN0cmluZztcbiAgICAgICAgdG90YWxQcmljZVN0YXR1czogVG90YWxQcmljZVN0YXR1c1R5cGU7XG4gICAgfTtcbn1cblxuZXhwb3J0IHR5cGUgQnJhaW50cmVlR29vZ2xlUGF5bWVudENyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPEJyYWludHJlZUdvb2dsZVBheW1lbnQ+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheW1lbnQgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGUge1xuICAgIGNyZWF0ZVBheW1lbnREYXRhUmVxdWVzdChcbiAgICAgICAgb3B0aW9ucz86IEJyYWludHJlZUdvb2dsZVBheW1lbnREYXRhUmVxdWVzdE9wdGlvbnMsXG4gICAgKTogQnJhaW50cmVlR29vZ2xlUGF5bWVudERhdGFSZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUdvb2dsZVBheVRocmVlRFNlY3VyZSB7XG4gICAgdmVyaWZ5Q2FyZChvcHRpb25zOiBCcmFpbnRyZWVHb29nbGVQYXlUaHJlZURTZWN1cmVPcHRpb25zKTogUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVHb29nbGVQYXlUaHJlZURTZWN1cmVPcHRpb25zIHtcbiAgICBub25jZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIGJpbjogc3RyaW5nO1xuICAgIHNob3dMb2FkZXI/OiBib29sZWFuO1xuICAgIG9uTG9va3VwQ29tcGxldGUoZGF0YTogQnJhaW50cmVlVGhyZWVEU2VjdXJlVmVyaWZpY2F0aW9uRGF0YSwgbmV4dDogKCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSAzRCBTZWN1cmVcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3IgPSBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yPFxuICAgIEJyYWludHJlZVRocmVlRFNlY3VyZSxcbiAgICBCcmFpbnRyZWVUaHJlZURTZWN1cmVDcmVhdG9yQ29uZmlnXG4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZSBleHRlbmRzIEJyYWludHJlZU1vZHVsZSB7XG4gICAgdmVyaWZ5Q2FyZChcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucyxcbiAgICAgICAgY2FsbGJhY2s/OiBCcmFpbnRyZWUzRFNWZXJpZnlDYXJkQ2FsbGJhY2ssXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPjtcbiAgICBjYW5jZWxWZXJpZnlDYXJkKCk6IFByb21pc2U8QnJhaW50cmVlVmVyaWZ5UGF5bG9hZD47XG4gICAgb248SyBleHRlbmRzIGtleW9mIEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwPihcbiAgICAgICAgZXZlbnQ6IEssXG4gICAgICAgIGhhbmRsZXI6IEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwW0tdLFxuICAgICk6IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRDYWxsYmFjayA9IChcbiAgICB2ZXJpZnlFcnJvcjogQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZEVycm9yLFxuICAgIHBheWxvYWQ6IEJyYWludHJlZTNEU1ZlcmlmeUNhcmRQYXlsb2FkLFxuKSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZUV2ZW50TWFwIHtcbiAgICAnY3VzdG9tZXItY2FuY2VsZWQnOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRFcnJvciB7XG4gICAgY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZTNEU1ZlcmlmeUNhcmRQYXlsb2FkIHtcbiAgICBub25jZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZUNyZWF0b3JDb25maWcgZXh0ZW5kcyBCcmFpbnRyZWVNb2R1bGVDcmVhdG9yQ29uZmlnIHtcbiAgICB2ZXJzaW9uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnMge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgYW1vdW50OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgY2hhbGxlbmdlUmVxdWVzdGVkPzogYm9vbGVhbjtcbiAgICBzaG93TG9hZGVyPzogYm9vbGVhbjtcbiAgICBiaW4/OiBzdHJpbmc7XG4gICAgYWRkaXRpb25hbEluZm9ybWF0aW9uPzoge1xuICAgICAgICBhY3NXaW5kb3dTaXplPzogJzAxJyB8ICcwMicgfCAnMDMnIHwgJzA0JyB8ICcwNSc7XG4gICAgfTtcbiAgICBjb2xsZWN0RGV2aWNlRGF0YT86IGJvb2xlYW47XG4gICAgYWRkRnJhbWU/KFxuICAgICAgICBlcnJvcjogRXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgIGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsXG4gICAgICAgIGNhbmNlbDogKCkgPT4gUHJvbWlzZTxCcmFpbnRyZWVWZXJpZnlQYXlsb2FkPiB8IHVuZGVmaW5lZCxcbiAgICApOiB2b2lkO1xuICAgIHJlbW92ZUZyYW1lPygpOiB2b2lkO1xuICAgIG9uTG9va3VwQ29tcGxldGU/KGRhdGE6IEJyYWludHJlZVRocmVlRFNlY3VyZVZlcmlmaWNhdGlvbkRhdGEsIG5leHQ6ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVRocmVlRFNlY3VyZVZlcmlmaWNhdGlvbkRhdGEge1xuICAgIGxvb2t1cDoge1xuICAgICAgICB0aHJlZURTZWN1cmVWZXJzaW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwYXltZW50TWV0aG9kOiBCcmFpbnRyZWVWZXJpZnlQYXlsb2FkO1xuICAgIHJlcXVpcmVzVXNlckF1dGhlbnRpY2F0aW9uOiBib29sZWFuO1xuICAgIHRocmVlRFNlY3VyZUluZm86IHtcbiAgICAgICAgbGlhYmlsaXR5U2hpZnRQb3NzaWJsZTogYm9vbGVhbjtcbiAgICAgICAgbGlhYmlsaXR5U2hpZnRlZDogYm9vbGVhbjtcbiAgICB9O1xufVxuXG5leHBvcnQgZW51bSBCcmFpbnRyZWVPcmRlclN0YXR1cyB7XG4gICAgQ29tcGxldGVkID0gJ0NPTVBMRVRFRCcsXG4gICAgUGVuZGluZyA9ICdQRU5ESU5HJyxcbiAgICBGYWlsZWQgPSAnRkFJTEVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVPcmRlclN0YXR1c0RhdGEge1xuICAgIHN0YXR1czogQnJhaW50cmVlT3JkZXJTdGF0dXM7XG59XG5cbi8qKlxuICpcbiAqIEJyYWludHJlZSBVUyBCYW5rIEFjY291bnQgKEFDSClcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZVVzQmFua0FjY291bnRDcmVhdG9yID0gQnJhaW50cmVlTW9kdWxlQ3JlYXRvcjxCcmFpbnRyZWVVc0JhbmtBY2NvdW50PjtcblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50IHtcbiAgICB0b2tlbml6ZShcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlVXNCYW5rQWNjb3VudFRva2VuaXphdGlvbk9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVVc0JhbmtBY2NvdW50VG9rZW5pemF0aW9uUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVVzQmFua0FjY291bnRUb2tlbml6YXRpb25PcHRpb25zIHtcbiAgICBiYW5rRGV0YWlsczogQnJhaW50cmVlVXNCYW5rQWNjb3VudERldGFpbHM7XG4gICAgbWFuZGF0ZVRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50VG9rZW5pemF0aW9uUmVzcG9uc2Uge1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgZGV0YWlsczogQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVVc0JhbmtBY2NvdW50RGV0YWlscyB7XG4gICAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICAgIHJvdXRpbmdOdW1iZXI6IHN0cmluZztcbiAgICBvd25lcnNoaXBUeXBlOiBzdHJpbmc7XG4gICAgYWNjb3VudFR5cGU6IHN0cmluZztcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgYnVzaW5lc3NOYW1lPzogc3RyaW5nO1xuICAgIGJpbGxpbmdBZGRyZXNzOiB7XG4gICAgICAgIHN0cmVldEFkZHJlc3M6IHN0cmluZztcbiAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBzdHJpbmc7XG4gICAgICAgIGxvY2FsaXR5OiBzdHJpbmc7XG4gICAgICAgIHJlZ2lvbjogc3RyaW5nO1xuICAgICAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgfTtcbn1cblxuLy8gVE9ETzogbW92ZSB0aGlzIGludGVyZmFjZSBpbiBzZXBhcmF0ZSB0eXBlcyBncm91cCBpZiBpdCB3aWxsIGJlIHVzZWQgaW4gYW5vdGhlciAobm90IEFDSCkgc3RyYXRlZ2llc1xuLy8gVGhpcyBzZWVtcyB0byBiZSBhbiBpbnRlcmZhY2Ugd2hpY2ggd2lsbCBiZSB1c2VkIGluIGRpZmZlcmVudCBwbGFjZXNcbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyB7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgZW1haWw/OiBzdHJpbmc7XG4gICAgcGF5ZXJJZD86IHN0cmluZztcbiAgICBmaXJzdE5hbWU/OiBzdHJpbmc7XG4gICAgbGFzdE5hbWU/OiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGU/OiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gICAgc2hpcHBpbmdBZGRyZXNzPzogQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzO1xuICAgIGJpbGxpbmdBZGRyZXNzPzogQnJhaW50cmVlQWRkcmVzcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVBZGRyZXNzIHtcbiAgICBsaW5lMTogc3RyaW5nO1xuICAgIGxpbmUyOiBzdHJpbmc7XG4gICAgY2l0eTogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nO1xuICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzIGV4dGVuZHMgQnJhaW50cmVlQWRkcmVzcyB7XG4gICAgcmVjaXBpZW50TmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgbm9uLWluc3RhbnQgcGF5bWVudCBtZXRob2RzXG4gKlxuICovXG5leHBvcnQgZW51bSBOb25JbnN0YW50TG9jYWxQYXltZW50TWV0aG9kcyB7XG4gICAgVFJVU1RMWSA9ICd0cnVzdGx5Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVMb2NhbFBheW1lbnRNZXRob2RSZWRpcmVjdEFjdGlvbiB7XG4gICAgYm9keToge1xuICAgICAgICBhZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZDoge1xuICAgICAgICAgICAgdHlwZTogJ29mZnNpdGVfcmVkaXJlY3QnO1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHJlZGlyZWN0X3VybDogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZSB7XG4gICAgYm9keToge1xuICAgICAgICBhZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZDoge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG9yZGVyX2lkX3NhdmVkX3N1Y2Nlc3NmdWxseTogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRmFzdGxhbmVcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIEJyYWludHJlZUZhc3RsYW5lQ3JlYXRvciA9IEJyYWludHJlZU1vZHVsZUNyZWF0b3I8XG4gICAgQnJhaW50cmVlRmFzdGxhbmUsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDb25maWdcbj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDb25maWcge1xuICAgIGF1dGhvcml6YXRpb246IHN0cmluZztcbiAgICBjbGllbnQ6IEJyYWludHJlZUNsaWVudDtcbiAgICBkZXZpY2VEYXRhPzogc3RyaW5nO1xuICAgIHN0eWxlcz86IEJyYWludHJlZUZhc3RsYW5lU3R5bGVzT3B0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lIHtcbiAgICBpZGVudGl0eTogQnJhaW50cmVlRmFzdGxhbmVJZGVudGl0eTtcbiAgICBwcm9maWxlOiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGU7XG4gICAgRmFzdGxhbmVDYXJkQ29tcG9uZW50OiAoXG4gICAgICAgIG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudE9wdGlvbnMsXG4gICAgKSA9PiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudD47XG4gICAgZXZlbnRzOiBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50cztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGUge1xuICAgIHNob3dDYXJkU2VsZWN0b3IoKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUNhcmRTZWxlY3RvclJlc3BvbnNlPjtcbiAgICBzaG93U2hpcHBpbmdBZGRyZXNzU2VsZWN0b3IoKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZVNoaXBwaW5nQWRkcmVzc1NlbGVjdG9yUmVzcG9uc2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzU2VsZWN0b3JSZXNwb25zZSB7XG4gICAgc2VsZWN0aW9uQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBzZWxlY3RlZEFkZHJlc3M6IEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lU2hpcHBpbmdBZGRyZXNzIHtcbiAgICBuYW1lOiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVOYW1lO1xuICAgIHBob25lTnVtYmVyOiBzdHJpbmc7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgZmlyc3ROYW1lPzogc3RyaW5nO1xuICAgIGxhc3ROYW1lPzogc3RyaW5nO1xuICAgIGNvbXBhbnk/OiBzdHJpbmc7XG4gICAgc3RyZWV0QWRkcmVzczogc3RyaW5nO1xuICAgIGV4dGVuZGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBsb2NhbGl0eTogc3RyaW5nO1xuICAgIHJlZ2lvbjogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZU51bWVyaWM/OiBudW1iZXI7XG4gICAgY291bnRyeUNvZGVBbHBoYTI6IHN0cmluZztcbiAgICBjb3VudHJ5Q29kZUFscGhhMz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVOYW1lIHtcbiAgICBmdWxsTmFtZTogc3RyaW5nO1xuICAgIGZpcnN0TmFtZT86IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUNhcmRTZWxlY3RvclJlc3BvbnNlIHtcbiAgICBzZWxlY3Rpb25DaGFuZ2VkOiBib29sZWFuO1xuICAgIHNlbGVjdGVkQ2FyZDogQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZVdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XG4gICAgYnJhaW50cmVlRmFzdGxhbmU6IEJyYWludHJlZUZhc3RsYW5lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lSWRlbnRpdHkge1xuICAgIGxvb2t1cEN1c3RvbWVyQnlFbWFpbChlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUxvb2t1cEN1c3RvbWVyQnlFbWFpbFJlc3VsdD47XG4gICAgdHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyhcbiAgICAgICAgY3VzdG9tZXJJZDogc3RyaW5nLFxuICAgICAgICBvcHRpb25zPzogQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvbk9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uQ3VzdG9tZXJSZXN1bHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lTG9va3VwQ3VzdG9tZXJCeUVtYWlsUmVzdWx0IHtcbiAgICBjdXN0b21lckNvbnRleHRJZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uT3B0aW9ucyB7XG4gICAgc3R5bGVzPzogQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24ge1xuICAgIHJvb3Q/OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvclByaW1hcnk/OiBzdHJpbmc7XG4gICAgICAgIGVycm9yQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgICAgIGZvbnRTaXplQmFzZT86IHN0cmluZztcbiAgICAgICAgcGFkZGluZz86IHN0cmluZztcbiAgICAgICAgcHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIH07XG4gICAgaW5wdXQ/OiB7XG4gICAgICAgIGJvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICAgICAgYm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGZvY3VzQm9yZGVyQ29sb3I/OiBzdHJpbmc7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBzdHJpbmc7XG4gICAgICAgIHRleHRDb2xvckJhc2U/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0b2dnbGU/OiB7XG4gICAgICAgIGNvbG9yUHJpbWFyeT86IHN0cmluZztcbiAgICAgICAgY29sb3JTZWNvbmRhcnk/OiBzdHJpbmc7XG4gICAgfTtcbiAgICB0ZXh0Pzoge1xuICAgICAgICBib2R5Pzoge1xuICAgICAgICAgICAgY29sb3I/OiBzdHJpbmc7XG4gICAgICAgICAgICBmb250U2l6ZT86IHN0cmluZztcbiAgICAgICAgfTtcbiAgICAgICAgY2FwdGlvbj86IHtcbiAgICAgICAgICAgIGNvbG9yPzogc3RyaW5nO1xuICAgICAgICAgICAgZm9udFNpemU/OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBicmFuZGluZz86IHN0cmluZzsgLy8gJ2xpZ2h0JyB8ICdkYXJrJ1xufVxuXG5leHBvcnQgZW51bSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUge1xuICAgIFNVQ0NFRURFRCA9ICdzdWNjZWVkZWQnLFxuICAgIEZBSUxFRCA9ICdmYWlsZWQnLFxuICAgIENBTkNFTEVEID0gJ2NhbmNlbGxlZCcsXG4gICAgVU5SRUNPR05JWkVEID0gJ3VucmVjb2duaXplZCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvbkN1c3RvbWVyUmVzdWx0IHtcbiAgICBhdXRoZW50aWNhdGlvblN0YXRlOiBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGU7XG4gICAgcHJvZmlsZURhdGE6IEJyYWludHJlZUZhc3RsYW5lUHJvZmlsZURhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVQcm9maWxlRGF0YSB7XG4gICAgZmFzdGxhbmVDdXN0b21lckF1dGhBc3NlcnRpb25Ub2tlbjogc3RyaW5nO1xuICAgIGZhc3RsYW5lQ3VzdG9tZXJJZDogc3RyaW5nO1xuICAgIHNoaXBwaW5nQWRkcmVzczogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzO1xuICAgIGNhcmQ6IEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQ7XG4gICAgbmFtZTogQnJhaW50cmVlRmFzdGxhbmVOYW1lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lTmFtZSB7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3Mge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGZpcnN0TmFtZT86IHN0cmluZztcbiAgICBsYXN0TmFtZT86IHN0cmluZztcbiAgICBjb21wYW55Pzogc3RyaW5nO1xuICAgIHN0cmVldEFkZHJlc3M6IHN0cmluZztcbiAgICBleHRlbmRlZEFkZHJlc3M/OiBzdHJpbmc7XG4gICAgbG9jYWxpdHk6IHN0cmluZztcbiAgICByZWdpb246IHN0cmluZztcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGVOdW1lcmljPzogbnVtYmVyO1xuICAgIGNvdW50cnlDb2RlQWxwaGEyOiBzdHJpbmc7XG4gICAgY291bnRyeUNvZGVBbHBoYTM/OiBzdHJpbmc7XG4gICAgcGhvbmVOdW1iZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDYXJkUGF5bWVudFNvdXJjZSB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnk6IHN0cmluZztcbiAgICBsYXN0RGlnaXRzOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBiaWxsaW5nQWRkcmVzczogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzO1xuICAgIGJpbkRldGFpbHM/OiB7XG4gICAgICAgIGJpbjogc3RyaW5nO1xuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U291cmNlIHtcbiAgICBjYXJkOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRQYXltZW50U291cmNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQge1xuICAgIGlkOiBzdHJpbmc7IC8vIFRoaXMgaXMgdGhlIG5vbmNlIC8gdG9rZW5cbiAgICBwYXltZW50U291cmNlOiBCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRTb3VyY2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyB7XG4gICAgc3R5bGVzOiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbjtcbiAgICBmaWVsZHM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudEZpZWxkcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnRGaWVsZHMge1xuICAgIGNhcmRob2xkZXJOYW1lPzoge1xuICAgICAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xuICAgIHBob25lTnVtYmVyPzoge1xuICAgICAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICAgICAgcHJlZmlsbD86IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZhc3RsYW5lU3R5bGVzU2V0dGluZ3Mge1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRXJyb3JDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVJvb3RTZXR0aW5nc0ZvbnRGYW1pbHk/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVSb290U2V0dGluZ3NQYWRkaW5nPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzUHJpbWFyeUNvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemU/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzQmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIGZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlclJhZGl1cz86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJXaWR0aD86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZUlucHV0U2V0dGluZ3NGb2N1c0JvcmRlckJhc2U/OiBzdHJpbmc7XG4gICAgZmFzdGxhbmVJbnB1dFNldHRpbmdzVGV4dENvbG9yQmFzZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRvZ2dsZVNldHRpbmdzQ29sb3JQcmltYXJ5Pzogc3RyaW5nO1xuICAgIGZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRCb2R5U2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZT86IHN0cmluZztcbiAgICBmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NDb2xvcj86IHN0cmluZztcbiAgICBmYXN0bGFuZUJyYW5kaW5nU2V0dGluZ3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVUb2tlbml6ZU9wdGlvbnMge1xuICAgIG5hbWU/OiB7XG4gICAgICAgIGZ1bGxOYW1lOiBzdHJpbmc7XG4gICAgfTtcbiAgICBiaWxsaW5nQWRkcmVzcz86IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcztcbiAgICBzaGlwcGluZ0FkZHJlc3M/OiBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3M7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVFdmVudHMge1xuICAgIGFwbVNlbGVjdGVkOiAob3B0aW9uczogQnJhaW50cmVlRmFzdGxhbmVBcG1TZWxlY3RlZEV2ZW50T3B0aW9ucykgPT4gdm9pZDtcbiAgICBlbWFpbFN1Ym1pdHRlZDogKG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lRW1haWxFbnRlcmVkRXZlbnRPcHRpb25zKSA9PiB2b2lkO1xuICAgIG9yZGVyUGxhY2VkOiAob3B0aW9uczogQnJhaW50cmVlRmFzdGxhbmVPcmRlclBsYWNlZEV2ZW50T3B0aW9ucykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgY29udGV4dF90eXBlOiAnY3NfaWQnO1xuICAgIGNvbnRleHRfaWQ6IHN0cmluZzsgLy8gY2hlY2tvdXQgc2Vzc2lvbiBpZFxuICAgIHBhZ2VfdHlwZTogJ2NoZWNrb3V0X3BhZ2UnO1xuICAgIHBhZ2VfbmFtZTogc3RyaW5nOyAvLyB0aXRsZSBvZiB0aGUgY2hlY2tvdXQgaW5pdGlhdGlvbiBwYWdlXG4gICAgcGFydG5lcl9uYW1lOiAnYmlnYyc7XG4gICAgdXNlcl90eXBlOiAnc3RvcmVfbWVtYmVyJyB8ICdzdG9yZV9ndWVzdCc7IC8vIHR5cGUgb2YgdGhlIHVzZXIgb24gdGhlIG1lcmNoYW50IHNpdGVcbiAgICBzdG9yZV9pZDogc3RyaW5nO1xuICAgIG1lcmNoYW50X25hbWU6IHN0cmluZztcbiAgICBleHBlcmltZW50OiBzdHJpbmc7IC8vIHN0cmluZ2lmeSBKU09OIG9iamVjdCBcIlt7IHRyZWF0bWVudF9ncm91cDogJ3Rlc3QnIHwgJ2NvbnRyb2wnIH1dXCJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVGYXN0bGFuZUFwbVNlbGVjdGVkRXZlbnRPcHRpb25zXG4gICAgZXh0ZW5kcyBCcmFpbnRyZWVGYXN0bGFuZUV2ZW50Q29tbW9uT3B0aW9ucyB7XG4gICAgYXBtX3Nob3duOiAnMCcgfCAnMSc7IC8vIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIHRoZSBjaGVja291dCBwYWdlXG4gICAgYXBtX2xpc3Q6IHN0cmluZzsgLy8gbGlzdCBvZiBhbHRlcm5hdGUgcGF5bWVudCBzaG93biBvbiBjaGVja291dCBwYWdlXG4gICAgYXBtX3NlbGVjdGVkOiBzdHJpbmc7IC8vIGFsdGVybmF0ZSBwYXltZW50IG1ldGhvZCBzZWxlY3RlZCAvIG1ldGhvZElkXG4gICAgYXBtX2xvY2F0aW9uOiAncHJlLWVtYWlsIHNlY3Rpb24nIHwgJ3BheW1lbnQgc2VjdGlvbic7IC8vIHBsYWNlbWVudCBvZiBBUE0sIHdoZXRoZXIgaXQgYmUgYWJvdmUgdGhlIGVtYWlsIGVudHJ5IG9yIGluIHRoZSByYWRpbyBidXR0b25zXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVFbWFpbEVudGVyZWRFdmVudE9wdGlvbnNcbiAgICBleHRlbmRzIEJyYWludHJlZUZhc3RsYW5lRXZlbnRDb21tb25PcHRpb25zIHtcbiAgICB1c2VyX2VtYWlsX3NhdmVkOiBib29sZWFuOyAvLyBzaG93cyB3aGV0aGVyIGNoZWNrb3V0IHdhcyBsb2FkZWQgd2l0aCBvciB3aXRob3V0IGEgc2F2ZWQgZW1haWxcbiAgICBhcG1fc2hvd246ICcwJyB8ICcxJzsgLy8gYWx0ZXJuYXRlIHBheW1lbnQgc2hvd24gb24gdGhlIGNoZWNrb3V0IHBhZ2VcbiAgICBhcG1fbGlzdDogc3RyaW5nOyAvLyBsaXN0IG9mIGFsdGVybmF0ZSBwYXltZW50IHNob3duIG9uIGNoZWNrb3V0IHBhZ2UgJ2FwcGxlcGF5LGdvb2dsZXBheSxwYXlwYWwnXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlRmFzdGxhbmVPcmRlclBsYWNlZEV2ZW50T3B0aW9uc1xuICAgIGV4dGVuZHMgQnJhaW50cmVlRmFzdGxhbmVFdmVudENvbW1vbk9wdGlvbnMge1xuICAgIHNlbGVjdGVkX3BheW1lbnRfbWV0aG9kOiBzdHJpbmc7XG4gICAgY3VycmVuY3lfY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudCB7XG4gICAgKG9wdGlvbnM6IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudE9wdGlvbnMpOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnQ7XG4gICAgZ2V0UGF5bWVudFRva2VuKFxuICAgICAgICBvcHRpb25zOiBCcmFpbnRyZWVGYXN0bGFuZVRva2VuaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZUZhc3RsYW5lVmF1bHRlZEluc3RydW1lbnQ+O1xuICAgIHJlbmRlcihlbGVtZW50OiBzdHJpbmcpOiB2b2lkO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgUGF5bG9hZCBWZXJpZmljYXRpb25cbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlVmVyaWZ5UGF5bG9hZCB7XG4gICAgbm9uY2U6IHN0cmluZztcbiAgICBkZXRhaWxzOiB7XG4gICAgICAgIGNhcmRUeXBlOiBzdHJpbmc7XG4gICAgICAgIGxhc3RGb3VyOiBzdHJpbmc7XG4gICAgICAgIGxhc3RUd286IHN0cmluZztcbiAgICB9O1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgbGlhYmlsaXR5U2hpZnRQb3NzaWJsZTogYm9vbGVhbjtcbiAgICBsaWFiaWxpdHlTaGlmdGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqXG4gKiBCcmFpbnRyZWUgRXJyb3JzXG4gKlxuICovXG5leHBvcnQgZW51bSBCcmFpbnRyZWVFcnJvclR5cGUge1xuICAgIEN1c3RvbWVyID0gJ0NVU1RPTUVSJyxcbiAgICBNZXJjaGFudCA9ICdNRVJDSEFOVCcsXG4gICAgTmV0d29yayA9ICdORVRXT1JLJyxcbiAgICBJbnRlcm5hbCA9ICdJTlRFUk5BTCcsXG4gICAgVW5rbm93biA9ICdVTktOT1dOJyxcbn1cblxuZXhwb3J0IGVudW0gQnJhaW50cmVlRXJyb3JDb2RlIHtcbiAgICBLb3VudE5vdEVuYWJsZWQgPSAnREFUQV9DT0xMRUNUT1JfS09VTlRfTk9UX0VOQUJMRUQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIHR5cGU6IEJyYWludHJlZUVycm9yVHlwZTtcbiAgICBjb2RlOiBzdHJpbmcgfCBCcmFpbnRyZWVFcnJvckNvZGUuS291bnROb3RFbmFibGVkO1xuICAgIGRldGFpbHM/OiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVJlZGlyZWN0RXJyb3Ige1xuICAgIGJvZHk6IHtcbiAgICAgICAgYWRkaXRpb25hbF9hY3Rpb25fcmVxdWlyZWQ6IHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmw6IHN0cmluZztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlIEJpbGxpbmdBZGRyZXNzIGV4dGVuZHMgQWRkcmVzcyB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBlbWFpbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyB7XG4gICAgVmlzYSA9ICd2aXNhJyxcbiAgICBNYXN0ZXJjYXJkID0gJ21hc3RlcmNhcmQnLFxuICAgIEFtZXJpY2FuRXhwcmVzcyA9ICdhbWVyaWNhbi1leHByZXNzJyxcbiAgICBEaW5lcnNDbHViID0gJ2RpbmVycy1jbHViJyxcbiAgICBEaXNjb3ZlciA9ICdkaXNjb3ZlcicsXG4gICAgSmNiID0gJ2pjYicsXG4gICAgVW5pb25QYXkgPSAndW5pb24tcGF5JyxcbiAgICBNYWVzdHJvID0gJ21hZXN0cm8nLFxuICAgIEVsbyA9ICdlbG8nLFxuICAgIE1pciA9ICdtaXInLFxuICAgIEhpcGVyID0gJ2hpcGVyJyxcbiAgICBIaXBlcmNhcmQgPSAnaGlwZXJjYXJkJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCaWxsaW5nQWRkcmVzc1N0YXRlIHtcbiAgICBkYXRhPzogQmlsbGluZ0FkZHJlc3M7XG4gICAgZXJyb3JzOiBCaWxsaW5nQWRkcmVzc0Vycm9yc1N0YXRlO1xuICAgIHN0YXR1c2VzOiBCaWxsaW5nQWRkcmVzc1N0YXR1c2VzU3RhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmlsbGluZ0FkZHJlc3NFcnJvcnNTdGF0ZSB7XG4gICAgbG9hZEVycm9yPzogRXJyb3I7XG4gICAgdXBkYXRlRXJyb3I/OiBFcnJvcjtcbiAgICBjb250aW51ZUFzR3Vlc3RFcnJvcj86IEVycm9yO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbGxpbmdBZGRyZXNzU3RhdHVzZXNTdGF0ZSB7XG4gICAgaXNMb2FkaW5nPzogYm9vbGVhbjtcbiAgICBpc1VwZGF0aW5nPzogYm9vbGVhbjtcbiAgICBpc0NvbnRpbnVpbmdBc0d1ZXN0PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFpbnRyZWVSZXF1ZXN0RGF0YSB7XG4gICAgZGF0YToge1xuICAgICAgICBjcmVkaXRDYXJkOiB7XG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzcz86IHtcbiAgICAgICAgICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGxvY2FsaXR5OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgY291bnRyeU5hbWU6IHN0cmluZztcbiAgICAgICAgICAgICAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgc3RyZWV0QWRkcmVzczogc3RyaW5nO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBzdHJpbmc7XG4gICAgICAgICAgICBjdnY/OiBzdHJpbmc7XG4gICAgICAgICAgICBleHBpcmF0aW9uRGF0ZTogc3RyaW5nO1xuICAgICAgICAgICAgbnVtYmVyOiBzdHJpbmc7XG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IGJvb2xlYW47XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH07XG4gICAgZW5kcG9pbnQ6IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IEhvc3RlZEluc3RydW1lbnQsIE5vbmNlSW5zdHJ1bWVudCB9IGZyb20gJy4vcGF5bWVudCc7XG5cbnR5cGUgUGF5bWVudEluc3RydW1lbnQgPSBDYXJkSW5zdHJ1bWVudCB8IEFjY291bnRJbnN0cnVtZW50IHwgSG9zdGVkSW5zdHJ1bWVudCB8IE5vbmNlSW5zdHJ1bWVudDtcblxuZXhwb3J0IGRlZmF1bHQgUGF5bWVudEluc3RydW1lbnQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUluc3RydW1lbnQge1xuICAgIGJpZ3BheVRva2VuOiBzdHJpbmc7XG4gICAgZGVmYXVsdEluc3RydW1lbnQ6IGJvb2xlYW47XG4gICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICB0cnVzdGVkU2hpcHBpbmdBZGRyZXNzOiBib29sZWFuO1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSB7XG4gICAgQ1ZWID0gJ2N2dicsXG4gICAgUEFOID0gJ3BhbicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZEluc3RydW1lbnQgZXh0ZW5kcyBCYXNlSW5zdHJ1bWVudCB7XG4gICAgYnJhbmQ6IHN0cmluZztcbiAgICBleHBpcnlNb250aDogc3RyaW5nO1xuICAgIGV4cGlyeVllYXI6IHN0cmluZztcbiAgICBpaW46IHN0cmluZztcbiAgICBsYXN0NDogc3RyaW5nO1xuICAgIHR5cGU6ICdjYXJkJztcbiAgICB1bnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25Nb2RlOiBVbnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25UeXBlO1xufVxuXG5pbnRlcmZhY2UgQmFzZUFjY291bnRJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUluc3RydW1lbnQge1xuICAgIG1ldGhvZDogc3RyaW5nO1xuICAgIHR5cGU6ICdhY2NvdW50JyB8ICdiYW5rJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXlQYWxJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XG4gICAgbWV0aG9kOiAncGF5cGFsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2hJbnN0cnVtZW50IGV4dGVuZHMgQmFzZUFjY291bnRJbnN0cnVtZW50IHtcbiAgICBpc3N1ZXI6IHN0cmluZztcbiAgICBhY2NvdW50TnVtYmVyOiBzdHJpbmc7XG4gICAgdHlwZTogJ2JhbmsnO1xuICAgIG1ldGhvZDogJ2FjaCcgfCAnZWNwJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYW5rSW5zdHJ1bWVudCBleHRlbmRzIEJhc2VBY2NvdW50SW5zdHJ1bWVudCB7XG4gICAgYWNjb3VudE51bWJlcjogc3RyaW5nO1xuICAgIGlzc3Vlcjogc3RyaW5nO1xuICAgIGliYW46IHN0cmluZztcbiAgICBtZXRob2Q6IHN0cmluZztcbiAgICB0eXBlOiAnYmFuayc7XG59XG5cbmV4cG9ydCB0eXBlIEFjY291bnRJbnN0cnVtZW50ID0gUGF5UGFsSW5zdHJ1bWVudCB8IEJhbmtJbnN0cnVtZW50IHwgQWNoSW5zdHJ1bWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBWYXVsdEFjY2Vzc1Rva2VuIHtcbiAgICB2YXVsdEFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gICAgdmF1bHRBY2Nlc3NFeHBpcnk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uQ29udGV4dCB7XG4gICAgY3VzdG9tZXJJZDogbnVtYmVyO1xuICAgIHN0b3JlSWQ6IHN0cmluZztcbiAgICBjdXJyZW5jeUNvZGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdHJ1bWVudFJlcXVlc3RDb250ZXh0IGV4dGVuZHMgU2Vzc2lvbkNvbnRleHQge1xuICAgIGF1dGhUb2tlbjogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgZ2V0RmFzdGxhbmVTdHlsZXMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQ3VzdG9tZXJDcmVkZW50aWFscyxcbiAgICBDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgIEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgV2l0aEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVVdGlscyBmcm9tICcuL2JyYWludHJlZS1mYXN0bGFuZS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneSBpbXBsZW1lbnRzIEN1c3RvbWVyU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgaXNBY2NlbGVyYXRlZENoZWNrb3V0RW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVGYXN0bGFuZVV0aWxzOiBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoe1xuICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUsXG4gICAgfTogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gYXdhaXQgdGhpcy5nZXRWYWxpZFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCB7IGlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQsIGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZCB9ID1cbiAgICAgICAgICAgIHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU3R5bGVzU2V0dGluZ3MgPSBpc0Zhc3RsYW5lU3R5bGluZ0VuYWJsZWRcbiAgICAgICAgICAgID8gcGF5bWVudE1ldGhvZC5pbml0aWFsaXphdGlvbkRhdGE/LmZhc3RsYW5lU3R5bGVzXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQgPSAhIWlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmYXN0bGFuZVN0eWxlcyA9IGdldEZhc3RsYW5lU3R5bGVzKFxuICAgICAgICAgICAgICAgICAgICBwYXlwYWxGYXN0bGFuZVN0eWxlc1NldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVmYXN0bGFuZT8uc3R5bGVzLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuaW5pdGlhbGl6ZUJyYWludHJlZUZhc3RsYW5lT3JUaHJvdyhcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZC5pZCxcbiAgICAgICAgICAgICAgICAgICAgZmFzdGxhbmVTdHlsZXMsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgLy8gSW5mbzogRG8gbm90IHRocm93IGFueXRoaW5nIGhlcmUgdG8gYXZvaWQgYmxvY2tpbmcgY3VzdG9tZXIgZnJvbSBwYXNzaW5nIGNoZWNrb3V0IGZsb3dcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBhc3luYyBzaWduSW4oY3JlZGVudGlhbHM6IEN1c3RvbWVyQ3JlZGVudGlhbHMsIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc2lnbkluQ3VzdG9tZXIoY3JlZGVudGlhbHMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIHNpZ25PdXQob3B0aW9ucz86IFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zaWduT3V0Q3VzdG9tZXIob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChcbiAgICAgICAgb3B0aW9ucz86IEV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXRPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGNoZWNrb3V0UGF5bWVudE1ldGhvZEV4ZWN1dGVkLCBjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrIH0gPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwiY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFja1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBhbmQgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lck9yVGhyb3coKTtcblxuICAgICAgICBpZiAodGhpcy5pc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkICYmIGN1c3RvbWVyLmlzR3Vlc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdyA9IGF3YWl0IHRoaXMuc2hvdWxkUnVuQXV0aGVudGljYXRpb25GbG93KCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tvdXRQYXltZW50TWV0aG9kRXhlY3V0ZWQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5ydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93KFxuICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlV2l0aENoZWNrb3V0Q2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBtZXRob2QgYWZ0ZXIgQS9CIHRlc3RpbmcgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgcHJpbWFyeU1ldGhvZElkID0gJ2JyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXQnO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJbmZvOiB3ZSBzaG91bGQgbG9hZCBwYXltZW50IG1ldGhvZCBlYWNoIHRpbWUgdG8gZGV0ZWN0IGlmIHRoZSB1c2VyXG4gICAgICAgICAgICAvLyBzaG91bGQgYmUgaW4gYSB0ZXN0IG9yIGluIGEgY29udHJvbCBncm91cFxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKHByaW1hcnlNZXRob2RJZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KHByaW1hcnlNZXRob2RJZCk7XG5cbiAgICAgICAgICAgIC8vIEluZm86IHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQgaXMgcmVzcG9uc2libGUgZm9yIHRoZSBmbG93IG9mIEEvQiB0ZXN0aW5nIHB1cnBvc2VzXG4gICAgICAgICAgICAvLyB3aGVuIHNob3VsZFJ1bkFjY2VsZXJhdGVkQ2hlY2tvdXQgaXMgdHJ1ZSwgdGhlIGxvb2t1cCBQYXlQYWwgQ29ubmVjdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCxcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBBY2NlbGVyYXRlZENoZWNrb3V0IHNob3VsZCBub3QgYmUgYXZhaWxhYmxlIGZvciB0aGUgY3VzdG9tZXJcbiAgICAgICAgICAgIHJldHVybiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uc2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dCB8fCBmYWxzZTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRWYWxpZFBheW1lbnRNZXRob2RPclRocm93KFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8UGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+PiB7XG4gICAgICAgIGxldCB2YWxpZFBheW1lbnRNZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QodmFsaWRQYXltZW50TWV0aG9kSWQpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIHZhbGlkUGF5bWVudE1ldGhvZElkID1cbiAgICAgICAgICAgICAgICBtZXRob2RJZCA9PT0gJ2JyYWludHJlZScgPyAnYnJhaW50cmVlYWNjZWxlcmF0ZWRjaGVja291dCcgOiAnYnJhaW50cmVlJztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZCh2YWxpZFBheW1lbnRNZXRob2RJZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4odmFsaWRQYXltZW50TWV0aG9kSWQpO1xuICAgIH1cbn1cbiIsImludGVyZmFjZSBDb29raWVPcHRpb25zIHtcbiAgICBleHBpcmVzPzogRGF0ZTtcbiAgICBwYXRoPzogc3RyaW5nO1xuICAgIGRvbWFpbj86IHN0cmluZztcbiAgICBzZWN1cmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29raWVTdG9yYWdlIHtcbiAgICBzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICBjb25zdCBjb29raWVLZXkgPSBgJHtlbmNvZGVVUklDb21wb25lbnQoYCR7bmFtZX1gKX09YDtcbiAgICAgICAgY29uc3QgY29va2llID0gZG9jdW1lbnQuY29va2llO1xuXG4gICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKGNvb2tpZUtleSk7XG5cbiAgICAgICAgaWYgKGZpcnN0SW5kZXggPiAtMSkge1xuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IGNvb2tpZS5pbmRleE9mKCc7JywgZmlyc3RJbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gY29va2llLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQoY29va2llLnN1YnN0cmluZyhmaXJzdEluZGV4ICsgY29va2llS2V5Lmxlbmd0aCwgbGFzdEluZGV4KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IENvb2tpZU9wdGlvbnMgPSB7IHNlY3VyZTogdHJ1ZSB9KSB7XG4gICAgICAgIGxldCBjb29raWVUZXh0ID0gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcblxuICAgICAgICBjb25zdCB7IGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmIChleHBpcmVzKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtleHBpcmVzLnRvVVRDU3RyaW5nKCl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAvLyBpbmZvOiBkZWZhdWx0IGNvb2tpZSBleHBpcmF0aW9uIHRpbWUgYWZ0ZXIgc2V0dXBcbiAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXMgPSA2MDtcblxuICAgICAgICAgICAgbm93LnNldFRpbWUobm93LmdldFRpbWUoKSArIG1pbnV0ZXMgKiA2MCAqIDEwMDApO1xuXG4gICAgICAgICAgICBjb29raWVUZXh0ICs9IGA7IGV4cGlyZXM9JHtub3cudG9VVENTdHJpbmcoKX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgcGF0aD0ke3BhdGh9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgIGNvb2tpZVRleHQgKz0gYDsgZG9tYWluPSR7ZG9tYWlufWA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlKSB7XG4gICAgICAgICAgICBjb29raWVUZXh0ICs9ICc7IHNlY3VyZSc7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWVUZXh0O1xuICAgIH1cblxuICAgIHN0YXRpYyByZW1vdmUobmFtZTogc3RyaW5nLCBvcHRpb25zPzogQ29va2llT3B0aW9ucykge1xuICAgICAgICBDb29raWVTdG9yYWdlLnNldChuYW1lLCAnJywgeyBleHBpcmVzOiBuZXcgRGF0ZSgwKSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBpc0VxdWFsLCBvbWl0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVGYXN0bGFuZSxcbiAgICBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3MsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVBdXRoZW50aWNhdGlvblN0YXRlLFxuICAgIEJyYWludHJlZUZhc3RsYW5lUHJvZmlsZURhdGEsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVTdHlsZXNPcHRpb24sXG4gICAgQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIENhcmRJbnN0cnVtZW50LFxuICAgIEN1c3RvbWVyQWRkcmVzcyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZENsaWVudFVuYXZhaWxhYmxlRXJyb3IsXG4gICAgVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5pbXBvcnQgeyBDb29raWVTdG9yYWdlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9zdG9yYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlRmFzdGxhbmVVdGlscyB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVGYXN0bGFuZT86IEJyYWludHJlZUZhc3RsYW5lO1xuICAgIHByaXZhdGUgbWV0aG9kSWQ/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICkge31cblxuICAgIGFzeW5jIGdldERldmljZVNlc3Npb25JZCgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBjYXJ0ID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCkuZ2V0Q2FydCgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRTZXNzaW9uSWQoY2FydD8uaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogSW5pdGlhbGl6YXRpb24gbWV0aG9kXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBpbml0aWFsaXplQnJhaW50cmVlRmFzdGxhbmVPclRocm93KFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBzdHlsZXM/OiBCcmFpbnRyZWVGYXN0bGFuZVN0eWxlc09wdGlvbixcbiAgICApIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnQoKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPVxuICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tZXRob2RJZCA9IG1ldGhvZElkO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmUgPSBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVGYXN0bGFuZShcbiAgICAgICAgICAgIGNhcnQ/LmlkLFxuICAgICAgICAgICAgY29uZmlnLnRlc3RNb2RlLFxuICAgICAgICAgICAgc3R5bGVzLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldEJyYWludHJlZUZhc3RsYW5lT3JUaHJvdygpOiBCcmFpbnRyZWVGYXN0bGFuZSB7XG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVGYXN0bGFuZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVGYXN0bGFuZTtcbiAgICB9XG5cbiAgICBnZXRCcmFpbnRyZWVGYXN0bGFuZUNvbXBvbmVudE9yVGhyb3coKTogQnJhaW50cmVlRmFzdGxhbmVbJ0Zhc3RsYW5lQ2FyZENvbXBvbmVudCddIHtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlRmFzdGxhbmUgPSB0aGlzLmdldEJyYWludHJlZUZhc3RsYW5lT3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBicmFpbnRyZWVGYXN0bGFuZS5GYXN0bGFuZUNhcmRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBBdXRoZW50aWNhdGlvbiBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIC8vIFJlbW92ZSB0aGlzIHJ1bGUgZGlzYWJsaW5nIGFmdGVyIG1ldGhvZCByZWZhY3RvclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gICAgYXN5bmMgcnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdyhcbiAgICAgICAgZW1haWw/OiBzdHJpbmcsXG4gICAgICAgIHNob3VsZFNldFNoaXBwaW5nT3B0aW9uPzogYm9vbGVhbixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZElkID0gdGhpcy5nZXRNZXRob2RJZE9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IGJyYWludHJlZUZhc3RsYW5lID0gdGhpcy5nZXRCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbG9va3VwQ3VzdG9tZXJCeUVtYWlsLCB0cmlnZ2VyQXV0aGVudGljYXRpb25GbG93IH0gPSBicmFpbnRyZWVGYXN0bGFuZS5pZGVudGl0eTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY3VzdG9tZXIgPSBzdGF0ZS5nZXRDdXN0b21lcigpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgeyBpc0Zhc3RsYW5lU2hpcHBpbmdPcHRpb25BdXRvU2VsZWN0RW5hYmxlZCB9ID1cbiAgICAgICAgICAgICAgICBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKVxuICAgICAgICAgICAgICAgICAgICAuaW5pdGlhbGl6YXRpb25EYXRhIHx8IHt9O1xuXG4gICAgICAgICAgICBjb25zdCBjdXN0b21lckVtYWlsID0gZW1haWwgfHwgY3VzdG9tZXI/LmVtYWlsIHx8IGJpbGxpbmdBZGRyZXNzPy5lbWFpbCB8fCAnJztcblxuICAgICAgICAgICAgY29uc3QgeyBjdXN0b21lckNvbnRleHRJZCB9ID0gYXdhaXQgbG9va3VwQ3VzdG9tZXJCeUVtYWlsKGN1c3RvbWVyRW1haWwpO1xuXG4gICAgICAgICAgICBpZiAoIWN1c3RvbWVyQ29udGV4dElkKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5mbzogd2Ugc2hvdWxkIGNsZWFuIHVwIHByZXZpb3VzIGV4cGVyaWVuY2Ugd2l0aCBkZWZhdWx0IGRhdGEgYW5kIHJlbGF0ZWQgYXV0aGVudGljYXRpb25TdGF0ZVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGU6IEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5VTlJFQ09HTklaRUQsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3NlczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRzOiBbXSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZVNlc3Npb25JZFRvQ29va2llcyhjYXJ0LmlkKTtcblxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgeyBhdXRoZW50aWNhdGlvblN0YXRlLCBwcm9maWxlRGF0YSB9ID0gYXdhaXQgdHJpZ2dlckF1dGhlbnRpY2F0aW9uRmxvdyhcbiAgICAgICAgICAgICAgICBjdXN0b21lckNvbnRleHRJZCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBob25lTnVtYmVyID0gcHJvZmlsZURhdGE/LnNoaXBwaW5nQWRkcmVzcz8ucGhvbmVOdW1iZXIgfHwgJyc7XG5cbiAgICAgICAgICAgIGlmIChhdXRoZW50aWNhdGlvblN0YXRlID09PSBCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUuQ0FOQ0VMRUQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvblN0YXRlLFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50czogW10sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNlc3Npb25JZEZyb21Db29raWVzKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzc2VzID1cbiAgICAgICAgICAgICAgICB0aGlzLm1hcFBheVBhbFRvQmNBZGRyZXNzKFtwcm9maWxlRGF0YS5zaGlwcGluZ0FkZHJlc3NdLCBbcGhvbmVOdW1iZXJdKSB8fCBbXTtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEJpbGxpbmdBZGRyZXNzID0gdGhpcy5nZXRQYXlQYWxCaWxsaW5nQWRkcmVzc2VzKHByb2ZpbGVEYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzZXMgPSBwYXlwYWxCaWxsaW5nQWRkcmVzc1xuICAgICAgICAgICAgICAgID8gdGhpcy5tYXBQYXlQYWxUb0JjQWRkcmVzcyhbcGF5cGFsQmlsbGluZ0FkZHJlc3NdLCBbcGhvbmVOdW1iZXJdKVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBjb25zdCBpbnN0cnVtZW50cyA9IHByb2ZpbGVEYXRhLmNhcmRcbiAgICAgICAgICAgICAgICA/IHRoaXMubWFwUGF5UGFsVG9CY0luc3RydW1lbnQobWV0aG9kSWQsIFtwcm9maWxlRGF0YS5jYXJkXSlcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgY29uc3QgYWRkcmVzc2VzID0gdGhpcy5tZXJnZVNoaXBwaW5nQW5kQmlsbGluZ0FkZHJlc3NlcyhcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NlcyxcbiAgICAgICAgICAgICAgICBiaWxsaW5nQWRkcmVzc2VzLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5zYXZlU2Vzc2lvbklkVG9Db29raWVzKGNhcnQuaWQpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0aW9uU3RhdGUsXG4gICAgICAgICAgICAgICAgYWRkcmVzc2VzLFxuICAgICAgICAgICAgICAgIGluc3RydW1lbnRzLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChiaWxsaW5nQWRkcmVzc2VzLmxlbmd0aCA+IDAgJiYgY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZUJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzZXNbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcmVmaWxsIGJpbGxpbmcgZm9ybSBpZiBvbmx5IGRpZ2l0YWwgaXRlbXMgaW4gY2FydCB3aXRoIGJpbGxpbmcgZGF0YSBhbmQgZmlyc3ROYW1lIGFuZCBsYXN0TmFtZVxuICAgICAgICAgICAgLy8gZnJvbSBzaGlwcGluZ0FkZHJlc3NlcyBiZWNhdXNlIHRoZXJlIGFyZSBlbXB0eSBpbiBiaWxsaW5nXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3Nlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgY2FydC5saW5lSXRlbXMuZGlnaXRhbEl0ZW1zLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBjYXJ0LmxpbmVJdGVtcy5waHlzaWNhbEl0ZW1zLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lIH0gPSBhZGRyZXNzZXNbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgZGlnaXRhbEl0ZW1CaWxsaW5nID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5iaWxsaW5nQWRkcmVzc2VzWzBdLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UudXBkYXRlQmlsbGluZ0FkZHJlc3MoZGlnaXRhbEl0ZW1CaWxsaW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNoaXBwaW5nQWRkcmVzc2VzLmxlbmd0aCA+IDAgJiYgY2FydC5saW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnVwZGF0ZVNoaXBwaW5nQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3Nlc1swXSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2V0U2hpcHBpbmdPcHRpb24gJiYgaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTaGlwcGluZ09wdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHdlIHNob3VsZCBmaWd1cmUgb3V0IHdoYXQgdG8gZG8gaGVyZVxuICAgICAgICAgICAgLy8gVE9ETzogYmVjYXVzZSB3ZSBzaG91bGQgbm90IHRvIHN0b3AgdGhlIGZsb3cgaWYgdGhlIGVycm9yIG9jY3VycyBvbiBwYXlwYWwgc2lkZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBTZXNzaW9uIGlkIG1hbmFnZW1lbnRcbiAgICAgKlxuICAgICAqL1xuICAgIGdldFNlc3Npb25JZEZyb21Db29raWVzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDb29raWVTdG9yYWdlLmdldCgnYmMtZmFzdGxhbmUtc2Vzc2lvbklkJykgfHwgJyc7XG4gICAgfVxuXG4gICAgc2F2ZVNlc3Npb25JZFRvQ29va2llcyhzZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBleHBpcmVzID0gbmV3IERhdGUoKTtcblxuICAgICAgICBleHBpcmVzLnNldERhdGUoZXhwaXJlcy5nZXREYXRlKCkgKyAxNCk7IC8vIDIgd2Vla3MgZXhwaXJ5XG5cbiAgICAgICAgQ29va2llU3RvcmFnZS5zZXQoJ2JjLWZhc3RsYW5lLXNlc3Npb25JZCcsIHNlc3Npb25JZCwge1xuICAgICAgICAgICAgZXhwaXJlcyxcbiAgICAgICAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlU2Vzc2lvbklkRnJvbUNvb2tpZXMoKTogdm9pZCB7XG4gICAgICAgIENvb2tpZVN0b3JhZ2UucmVtb3ZlKCdiYy1mYXN0bGFuZS1zZXNzaW9uSWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheVBhbCB0byBCQyBkYXRhIG1hcHBlcnNcbiAgICAgKlxuICAgICAqICovXG4gICAgbWFwUGF5UGFsVG9CY0luc3RydW1lbnQoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIGluc3RydW1lbnRzPzogQnJhaW50cmVlRmFzdGxhbmVWYXVsdGVkSW5zdHJ1bWVudFtdLFxuICAgICk6IENhcmRJbnN0cnVtZW50W10gfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAoIWluc3RydW1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudHMubWFwKChpbnN0cnVtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGlkLCBwYXltZW50U291cmNlIH0gPSBpbnN0cnVtZW50O1xuICAgICAgICAgICAgY29uc3QgeyBicmFuZCwgZXhwaXJ5LCBsYXN0RGlnaXRzLCBiaW5EZXRhaWxzIH0gPSBwYXltZW50U291cmNlLmNhcmQ7XG5cbiAgICAgICAgICAgIGNvbnN0IFtleHBpcnlZZWFyLCBleHBpcnlNb250aF0gPSBleHBpcnkuc3BsaXQoJy0nKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBiaWdwYXlUb2tlbjogaWQsXG4gICAgICAgICAgICAgICAgYnJhbmQsXG4gICAgICAgICAgICAgICAgZGVmYXVsdEluc3RydW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGV4cGlyeU1vbnRoLFxuICAgICAgICAgICAgICAgIGV4cGlyeVllYXIsXG4gICAgICAgICAgICAgICAgaWluOiBiaW5EZXRhaWxzPy5iaW4gfHwgJycsXG4gICAgICAgICAgICAgICAgbGFzdDQ6IGxhc3REaWdpdHMsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgdHJ1c3RlZFNoaXBwaW5nQWRkcmVzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2NhcmQnLFxuICAgICAgICAgICAgICAgIHVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvbk1vZGU6IFVudHJ1c3RlZFNoaXBwaW5nQ2FyZFZlcmlmaWNhdGlvblR5cGUuUEFOLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBQYXlQYWxUb0JjQWRkcmVzcyhcbiAgICAgICAgYWRkcmVzc2VzPzogQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzW10sXG4gICAgICAgIHBob25lcz86IHN0cmluZ1tdLFxuICAgICk6IEN1c3RvbWVyQWRkcmVzc1tdIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvdW50cmllcyA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENvdW50cmllcygpIHx8IFtdO1xuXG4gICAgICAgIGNvbnN0IGdldENvdW50cnlOYW1lQnlDb3VudHJ5Q29kZSA9IChjb3VudHJ5Q29kZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkQ291bnRyeSA9IGNvdW50cmllcy5maW5kKChjb3VudHJ5KSA9PiBjb3VudHJ5LmNvZGUgPT09IGNvdW50cnlDb2RlKTtcblxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWRDb3VudHJ5Py5uYW1lIHx8ICcnO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBhZGRyZXNzZXMubWFwKChhZGRyZXNzKSA9PiAoe1xuICAgICAgICAgICAgaWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICB0eXBlOiAncGF5cGFsLWFkZHJlc3MnLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSB8fCAnJyxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lIHx8ICcnLFxuICAgICAgICAgICAgY29tcGFueTogYWRkcmVzcy5jb21wYW55IHx8ICcnLFxuICAgICAgICAgICAgYWRkcmVzczE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3MyOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyB8fCAnJyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZU9yUHJvdmluY2U6IGFkZHJlc3MucmVnaW9uLFxuICAgICAgICAgICAgc3RhdGVPclByb3ZpbmNlQ29kZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5OiBnZXRDb3VudHJ5TmFtZUJ5Q291bnRyeUNvZGUoYWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMiksXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZUFscGhhMixcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgICAgIHBob25lOiAocGhvbmVzICYmIHBob25lc1swXSkgfHwgJycsXG4gICAgICAgICAgICBjdXN0b21GaWVsZHM6IFtdLFxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBHZXQgUGF5UGFsIGJpbGxpbmcgYWRkcmVzc2VzIGZyb20gc3RvcmVkIGJyYWludHJlZSBpbnN0cnVtZW50cyBpbmZvXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgZ2V0UGF5UGFsQmlsbGluZ0FkZHJlc3NlcyhcbiAgICAgICAgcHJvZmlsZURhdGE/OiBCcmFpbnRyZWVGYXN0bGFuZVByb2ZpbGVEYXRhLFxuICAgICk6IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IHsgY2FyZCwgbmFtZSB9ID0gcHJvZmlsZURhdGEgfHwge307XG5cbiAgICAgICAgaWYgKCFjYXJkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUgfSA9IGNhcmQucGF5bWVudFNvdXJjZS5jYXJkLmJpbGxpbmdBZGRyZXNzO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZTogZ2l2ZW5fbmFtZSwgbGFzdE5hbWU6IHN1cm5hbWUgfSA9IG5hbWUgfHwge307XG4gICAgICAgIGNvbnN0IHsgc2hpcHBpbmdBZGRyZXNzIH0gPSBwcm9maWxlRGF0YSB8fCB7fTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IHtcbiAgICAgICAgICAgIC4uLmNhcmQucGF5bWVudFNvdXJjZS5jYXJkLmJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBmaXJzdE5hbWUgfHwgZ2l2ZW5fbmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBsYXN0TmFtZSB8fCBzdXJuYW1lLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGlzQWRkcmVzc0V4aXN0ID1cbiAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyAmJlxuICAgICAgICAgICAgaXNFcXVhbCh0aGlzLm5vcm1hbGl6ZUFkZHJlc3MoYWRkcmVzcyksIHRoaXMubm9ybWFsaXplQWRkcmVzcyhzaGlwcGluZ0FkZHJlc3MpKTtcblxuICAgICAgICByZXR1cm4gaXNBZGRyZXNzRXhpc3QgPyBzaGlwcGluZ0FkZHJlc3MgOiBhZGRyZXNzO1xuICAgIH1cblxuICAgIHByaXZhdGUgbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzOiBDdXN0b21lckFkZHJlc3MgfCBCcmFpbnRyZWVGYXN0bGFuZUFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG9taXQoYWRkcmVzcywgWydpZCddKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1lcmdlU2hpcHBpbmdBbmRCaWxsaW5nQWRkcmVzc2VzKFxuICAgICAgICBzaGlwcGluZ0FkZHJlc3NlczogQ3VzdG9tZXJBZGRyZXNzW10sXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzZXM6IEN1c3RvbWVyQWRkcmVzc1tdLFxuICAgICk6IEN1c3RvbWVyQWRkcmVzc1tdIHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRCaWxsaW5nQWRkcmVzc2VzID0gYmlsbGluZ0FkZHJlc3Nlcy5maWx0ZXIoXG4gICAgICAgICAgICAoYmlsbGluZ0FkZHJlc3M6IEN1c3RvbWVyQWRkcmVzcykgPT5cbiAgICAgICAgICAgICAgICAhc2hpcHBpbmdBZGRyZXNzZXMuc29tZSgoc2hpcHBpbmdBZGRyZXNzOiBDdXN0b21lckFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzRXF1YWwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFkZHJlc3Moc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIFsuLi5zaGlwcGluZ0FkZHJlc3NlcywgLi4uZmlsdGVyZWRCaWxsaW5nQWRkcmVzc2VzXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE90aGVyXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgZ2V0TWV0aG9kSWRPclRocm93KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5tZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RJZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldFNoaXBwaW5nT3B0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjb25zaWdubWVudHMgPSBzdGF0ZS5nZXRDb25zaWdubWVudHMoKSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zID0gY29uc2lnbm1lbnRzWzBdPy5hdmFpbGFibGVTaGlwcGluZ09wdGlvbnMgfHwgW107XG4gICAgICAgIGNvbnN0IHJlY29tbWVuZGVkU2hpcHBpbmdPcHRpb24gPSBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnMuZmluZChcbiAgICAgICAgICAgIChvcHRpb24pID0+IG9wdGlvbi5pc1JlY29tbWVuZGVkLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChyZWNvbW1lbmRlZFNoaXBwaW5nT3B0aW9uIHx8IGF2YWlsYWJsZVNoaXBwaW5nT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gcmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiB8fCBhdmFpbGFibGVTaGlwcGluZ09wdGlvbnNbMF07XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zZWxlY3RTaGlwcGluZ09wdGlvbihzZWxlY3RlZE9wdGlvbi5pZCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtY3VzdG9tZXItc3RyYXRlZ3knO1xuaW1wb3J0IEJyYWludHJlZUZhc3RsYW5lVXRpbHMgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtdXRpbHMnO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3k6IEN1c3RvbWVyU3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVGYXN0bGFuZVV0aWxzID0gbmV3IEJyYWludHJlZUZhc3RsYW5lVXRpbHMoXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVGYXN0bGFuZUN1c3RvbWVyU3RyYXRlZ3kocGF5bWVudEludGVncmF0aW9uU2VydmljZSwgYnJhaW50cmVlRmFzdGxhbmVVdGlscyk7XG59O1xuXG4vLyBJbmZvOiBicmFpbnRyZWUgbWV0aG9kIGlkIHdhcyBhZGRlZCBvbmx5IGZvciBBL0IgdGVzdGluZyBwdXJwb3Nlcy5cbi8vIFRoZSBtYWluIHJlYXNvbiB3aHkgd2UgY2FuJ3QgZ28gaW4gb3RoZXIgd2F5LCBiZWNhdXNlIGJyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXRcbi8vIG1heSBiZSB0dXJuZWQgb24gb25seSB3aGVuIEJFIGtub3dzIGN1c3RvbWVyJ3MgZW1haWwgYWRkcmVzcyAodG8gdW5kZXJzdGFuZCBzaG91bGQgd2Ugc2hvdyB0aGUgZmVhdHVyZSBmb3IgdGhlIHVzZXIgb3Igbm90KS5cbi8vIFNvIHsgaWQ6ICdicmFpbnRyZWUnIH0sIHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIEEvQiB0ZXN0aW5nXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlRmFzdGxhbmVDdXN0b21lclN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZWFjY2VsZXJhdGVkY2hlY2tvdXQnIH0sXG4gICAgeyBpZDogJ2JyYWludHJlZScgfSxcbl0pO1xuIiwiaW1wb3J0IHtcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIFVuc3VwcG9ydGVkQnJvd3NlckVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVNjcmlwdExvYWRlciBmcm9tICcuL2JyYWludHJlZS1zY3JpcHQtbG9hZGVyJztcbmltcG9ydCB7XG4gICAgQnJhaW50cmVlQ2xpZW50LFxuICAgIEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlRXJyb3JDb2RlLFxuICAgIEJyYWludHJlZUdvb2dsZVBheW1lbnQsXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50LFxuICAgIEJyYWludHJlZU1vZHVsZSxcbiAgICBCcmFpbnRyZWVUaHJlZURTZWN1cmUsXG4gICAgQnJhaW50cmVlVXNCYW5rQWNjb3VudCxcbiAgICBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0LFxuICAgIEJyYWludHJlZVZpc2FDaGVja291dCxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgaXNCcmFpbnRyZWVFcnJvciBmcm9tICcuL3V0aWxzL2lzLWJyYWludHJlZS1lcnJvcic7XG5pbXBvcnQgeyBWaXNhQ2hlY2tvdXRTREsgfSBmcm9tICcuL3Zpc2FjaGVja291dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVNkayB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVWZW5tbz86IEJyYWludHJlZVZlbm1vQ2hlY2tvdXQ7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVMb2NhbFBheW1lbnQ/OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgcHJpdmF0ZSBjbGllbnQ/OiBCcmFpbnRyZWVDbGllbnQ7XG4gICAgcHJpdmF0ZSBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBwcml2YXRlIGRhdGFDb2xsZWN0b3I/OiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yO1xuICAgIHByaXZhdGUgZ29vZ2xlUGF5bWVudD86IEJyYWludHJlZUdvb2dsZVBheW1lbnQ7XG4gICAgcHJpdmF0ZSB0aHJlZURTPzogQnJhaW50cmVlVGhyZWVEU2VjdXJlO1xuICAgIHByaXZhdGUgdmlzYUNoZWNrb3V0PzogUHJvbWlzZTxCcmFpbnRyZWVWaXNhQ2hlY2tvdXQ+O1xuICAgIHByaXZhdGUgdmlzYUNoZWNrb3V0U0RLPzogVmlzYUNoZWNrb3V0U0RLO1xuICAgIHByaXZhdGUgdXNCYW5rQWNjb3VudD86IEJyYWludHJlZVVzQmFua0FjY291bnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJyYWludHJlZVNjcmlwdExvYWRlcjogQnJhaW50cmVlU2NyaXB0TG9hZGVyKSB7fVxuXG4gICAgaW5pdGlhbGl6ZShjbGllbnRUb2tlbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0Q2xpZW50VG9rZW4oY2xpZW50VG9rZW4pO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy50ZWFyZG93bk1vZHVsZSh0aGlzLmRhdGFDb2xsZWN0b3IpO1xuXG4gICAgICAgIHRoaXMuZGF0YUNvbGxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBDbGllbnRcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2NsaWVudC5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXRDbGllbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVDbGllbnQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNsaWVudCkge1xuICAgICAgICAgICAgY29uc3QgY2xpZW50VG9rZW4gPSB0aGlzLmdldENsaWVudFRva2VuT3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50Q3JlYXRvciA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRDbGllbnQoKTtcblxuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBhd2FpdCBjbGllbnRDcmVhdG9yLmNyZWF0ZSh7IGF1dGhvcml6YXRpb246IGNsaWVudFRva2VuIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIERhdGEgY29sbGVjdG9yXG4gICAgICogYnJhaW50cmVlIGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl9kYXRhLWNvbGxlY3Rvci5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXREYXRhQ29sbGVjdG9yT3JUaHJvdyhcbiAgICAgICAgb3B0aW9ucz86IFBhcnRpYWw8QnJhaW50cmVlRGF0YUNvbGxlY3RvckNyZWF0b3JDb25maWc+LFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlRGF0YUNvbGxlY3Rvcj4ge1xuICAgICAgICBjb25zdCBlbXB0eURhdGFDb2xsZWN0b3IgPSB7XG4gICAgICAgICAgICBkZXZpY2VEYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB0ZWFyZG93bjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCksXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0aGlzLmRhdGFDb2xsZWN0b3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgdGhpcy5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhQ29sbGVjdG9yID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZERhdGFDb2xsZWN0b3IoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFDb2xsZWN0b3JDb25maWc6IEJyYWludHJlZURhdGFDb2xsZWN0b3JDcmVhdG9yQ29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgICAgIGtvdW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFDb2xsZWN0b3IgPSBhd2FpdCBkYXRhQ29sbGVjdG9yLmNyZWF0ZShkYXRhQ29sbGVjdG9yQ29uZmlnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpICYmIGVycm9yLmNvZGUgPT09IEJyYWludHJlZUVycm9yQ29kZS5Lb3VudE5vdEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5RGF0YUNvbGxlY3RvcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFDb2xsZWN0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgR29vZ2xlIFBheW1lbnRcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2dvb2dsZS1wYXltZW50Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGdldEJyYWludHJlZUdvb2dsZVBheW1lbnQoKTogUHJvbWlzZTxCcmFpbnRyZWVHb29nbGVQYXltZW50PiB7XG4gICAgICAgIGlmICghdGhpcy5nb29nbGVQYXltZW50KSB7XG4gICAgICAgICAgICBjb25zdCBbY2xpZW50LCBicmFpbnRyZWVHb29nbGVQYXltZW50XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRHb29nbGVQYXltZW50KCksXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgdGhpcy5nb29nbGVQYXltZW50ID0gYXdhaXQgYnJhaW50cmVlR29vZ2xlUGF5bWVudC5jcmVhdGUoeyBjbGllbnQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nb29nbGVQYXltZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIDNEU1xuICAgICAqIGJyYWludHJlZSBkb2M6IGh0dHBzOi8vYnJhaW50cmVlLmdpdGh1Yi5pby9icmFpbnRyZWUtd2ViL2N1cnJlbnQvbW9kdWxlLWJyYWludHJlZS13ZWJfdGhyZWUtZC1zZWN1cmUuaHRtbFxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnJhaW50cmVlVGhyZWVEUygpOiBQcm9taXNlPEJyYWludHJlZVRocmVlRFNlY3VyZT4ge1xuICAgICAgICBpZiAoIXRoaXMudGhyZWVEUykge1xuICAgICAgICAgICAgY29uc3QgW2NsaWVudCwgdGhyZWVEU2VjdXJlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLmdldENsaWVudCgpLFxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWQzRFMoKSxcbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICB0aGlzLnRocmVlRFMgPSBhd2FpdCB0aHJlZURTZWN1cmUuY3JlYXRlKHsgY2xpZW50LCB2ZXJzaW9uOiAyIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudGhyZWVEUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBMb2NhbCBQYXltZW50IE1ldGhvZHNcbiAgICAgKiBicmFpbnRyZWUgZG9jOiBodHRwczovL2JyYWludHJlZS5naXRodWIuaW8vYnJhaW50cmVlLXdlYi9jdXJyZW50L21vZHVsZS1icmFpbnRyZWUtd2ViX2xvY2FsLXBheW1lbnQuaHRtbFxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QnJhaW50cmVlTG9jYWxQYXltZW50KFxuICAgICAgICBtZXJjaGFudEFjY291bnRJZDogc3RyaW5nLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlTG9jYWxQYXltZW50IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGlmICghdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IFtjbGllbnQsIGxvY2FsUGF5bWVudENyZWF0b3JdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2xpZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTY3JpcHRMb2FkZXIubG9hZExvY2FsUGF5bWVudCgpLFxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlTG9jYWxQYXltZW50ID0gYXdhaXQgbmV3IFByb21pc2UoXG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiAoYnJhaW50cmVlTG9jYWxQYXltZW50OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQpID0+IHZvaWQsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdDogKGVycm9yOiBCcmFpbnRyZWVFcnJvcikgPT4gdm9pZCxcbiAgICAgICAgICAgICAgICApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCBsb2NhbFBheW1lbnRDcmVhdG9yLmNyZWF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgY2xpZW50LCBtZXJjaGFudEFjY291bnRJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVMb2NhbFBheW1lbnQ6IEJyYWludHJlZUxvY2FsUGF5bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYnJhaW50cmVlTG9jYWxQYXltZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgVXNCYW5rQWNjb3VudFxuICAgICAqIGJyYWludHJlZSBkb2M6IGh0dHBzOi8vYnJhaW50cmVlLmdpdGh1Yi5pby9icmFpbnRyZWUtd2ViL2N1cnJlbnQvbW9kdWxlLWJyYWludHJlZS13ZWJfdXMtYmFuay1hY2NvdW50Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGdldFVzQmFua0FjY291bnQoKSB7XG4gICAgICAgIGlmICghdGhpcy51c0JhbmtBY2NvdW50KSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgdXNCYW5rQWNjb3VudCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRVc0JhbmtBY2NvdW50KCk7XG5cbiAgICAgICAgICAgIHRoaXMudXNCYW5rQWNjb3VudCA9IGF3YWl0IHVzQmFua0FjY291bnQuY3JlYXRlKHsgY2xpZW50IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudXNCYW5rQWNjb3VudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBWaXNhIENoZWNrb3V0XG4gICAgICogYnJhaW50cmVlIGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl92aXNhLWNoZWNrb3V0Lmh0bWxcbiAgICAgKlxuICAgICAqL1xuICAgIGdldEJyYWludHJlZVZpc2FDaGVja291dCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpc2FDaGVja291dCkge1xuICAgICAgICAgICAgdGhpcy52aXNhQ2hlY2tvdXQgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDbGllbnQoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmJyYWludHJlZVNjcmlwdExvYWRlci5sb2FkVmlzYUNoZWNrb3V0KCksXG4gICAgICAgICAgICBdKS50aGVuKChbY2xpZW50LCBwYXlwYWxdKSA9PiBwYXlwYWwuY3JlYXRlKHsgY2xpZW50IH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnZpc2FDaGVja291dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEJyYWludHJlZSBWaXNhIENoZWNrb3V0IFNES1xuICAgICAqIHZpc2EgY2hlY2tvdXQgZG9jOiBodHRwczovL2RldmVsb3Blci52aXNhLmNvbS9jYXBhYmlsaXRpZXMvdmlzYV9jaGVja291dC9kb2NzLWhvdy10b1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VmlzYUNoZWNrb3V0U2RrKHRlc3RNb2RlPzogYm9vbGVhbikge1xuICAgICAgICBpZiAoIXRoaXMudmlzYUNoZWNrb3V0U0RLKSB7XG4gICAgICAgICAgICB0aGlzLnZpc2FDaGVja291dFNESyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRWaXNhQ2hlY2tvdXRTZGsodGVzdE1vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudmlzYUNoZWNrb3V0U0RLO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIFZlbm1vIENoZWNrb3V0XG4gICAgICogYnJhaW50cmVlIHZlbm1vIGNoZWNrb3V0IGRvYzogaHR0cHM6Ly9icmFpbnRyZWUuZ2l0aHViLmlvL2JyYWludHJlZS13ZWIvY3VycmVudC9tb2R1bGUtYnJhaW50cmVlLXdlYl92ZW5tby5odG1sXG4gICAgICpcbiAgICAgKi9cbiAgICBhc3luYyBnZXRWZW5tb0NoZWNrb3V0T3JUaHJvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZVZlbm1vKSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLmdldENsaWVudCgpO1xuICAgICAgICAgICAgY29uc3QgdmVubW9DaGVja291dCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRWZW5tb0NoZWNrb3V0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHZlbm1vQ2hlY2tvdXRDb25maWcgPSB7XG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIGFsbG93RGVza3RvcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kVXNhZ2U6ICdtdWx0aV91c2UnLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgYnJhaW50cmVlVmVubW9DaGVja291dCA9IGF3YWl0IHZlbm1vQ2hlY2tvdXQuY3JlYXRlKHZlbm1vQ2hlY2tvdXRDb25maWcpO1xuXG4gICAgICAgICAgICBpZiAoYnJhaW50cmVlVmVubW9DaGVja291dC5pc0Jyb3dzZXJTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlVmVubW8gPSBicmFpbnRyZWVWZW5tb0NoZWNrb3V0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmJyYWludHJlZVZlbm1vO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUHJpdmF0ZSBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENsaWVudFRva2VuKGNsaWVudFRva2VuOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGllbnRUb2tlbiA9IGNsaWVudFRva2VuO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2xpZW50VG9rZW5PclRocm93KCk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudFRva2VuO1xuICAgIH1cblxuICAgIHByaXZhdGUgdGVhcmRvd25Nb2R1bGUobW9kdWxlPzogQnJhaW50cmVlTW9kdWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBtb2R1bGUgPyBtb2R1bGUudGVhcmRvd24oKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgdHJ5IHRvIGNhbGwgYSBtZXRob2QgdGhhdCBpcyBvbmx5IGEgc3R1YiBhbmQgaGFzIG5vdFxuICogYmVlbiBmdWxseSBpbXBsZW1lbnRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U/OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSB8fCAnTm90IGltcGxlbWVudGVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdOb3RJbXBsZW1lbnRlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ25vdF9pbXBsZW1lbnRlZCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZVNkayxcbiAgICBCcmFpbnRyZWVWaXNhQ2hlY2tvdXQsXG4gICAgVmlzYUNoZWNrb3V0QWRkcmVzcyxcbiAgICBWaXNhQ2hlY2tvdXRQYXltZW50U3VjY2Vzc1BheWxvYWQsXG4gICAgVmlzYUNoZWNrb3V0VG9rZW5pemVkUGF5bG9hZCxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBBZGRyZXNzLFxuICAgIEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBFeGVjdXRlUGF5bWVudE1ldGhvZENoZWNrb3V0T3B0aW9ucyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBMZWdhY3lBZGRyZXNzLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgTm90SW1wbGVtZW50ZWRFcnJvcixcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFJlcXVlc3RPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgV2l0aEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVySW5pdGlhbGl6ZU9wdGlvbnMgfSBmcm9tICcuL2JyYWludHJlZS12aXNhLWN1c3RvbWVyLWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVyU3RyYXRlZ3kgaW1wbGVtZW50cyBDdXN0b21lclN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGJ1dHRvbkNsYXNzTmFtZSA9ICd2aXNhLWNoZWNrb3V0LXdyYXBwZXInO1xuICAgIHByaXZhdGUgb25FcnJvciA9IG5vb3A7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlU2RrOiBCcmFpbnRyZWVTZGssXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ3VzdG9tZXJJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRDdXN0b21lckluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXZpc2FjaGVja291dDogdmlzYUNoZWNrb3V0T3B0aW9ucywgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gcHJvY2VlZCBiZWNhdXNlIFwibWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZpc2FDaGVja291dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVldmlzYWNoZWNrb3V0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmVDb25maWcgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKTtcblxuICAgICAgICBpZiAoIWNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFZpc2FDaGVja291dFNkayhjb25maWcudGVzdE1vZGUpO1xuXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyLCBvbkVycm9yIH0gPSB2aXNhQ2hlY2tvdXRPcHRpb25zO1xuXG4gICAgICAgIHRoaXMub25FcnJvciA9IG9uRXJyb3IgfHwgbm9vcDtcblxuICAgICAgICBjb25zdCBpbml0T3B0aW9ucyA9IGJyYWludHJlZVZpc2FDaGVja291dC5jcmVhdGVJbml0T3B0aW9ucyh7XG4gICAgICAgICAgICBwYXltZW50UmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogc3RvcmVDb25maWcuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICAgICBzdWJ0b3RhbDogU3RyaW5nKGNoZWNrb3V0LnN1YnRvdGFsKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgIGxvY2FsZTogc3RvcmVDb25maWcuc3RvcmVQcm9maWxlLnN0b3JlTGFuZ3VhZ2UsXG4gICAgICAgICAgICAgICAgc2hpcHBpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdFNoaXBwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzaWduSW5CdXR0b24gPSB0aGlzLmNyZWF0ZVNpZ25JbkJ1dHRvbihjb250YWluZXIsIHRoaXMuYnV0dG9uQ2xhc3NOYW1lKTtcblxuICAgICAgICBhd2FpdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbihcbiAgICAgICAgICAgICdwYXltZW50LnN1Y2Nlc3MnLFxuICAgICAgICAgICAgKHBheW1lbnRTdWNjZXNzUGF5bG9hZDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5pemVQYXltZW50KGJyYWludHJlZVZpc2FDaGVja291dCwgcGF5bWVudFN1Y2Nlc3NQYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KCkpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSxcbiAgICAgICAgKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbigncGF5bWVudC5lcnJvcicsIChfLCBlcnJvcikgPT4gdGhpcy5oYW5kbGVFcnJvcihlcnJvcikpO1xuXG4gICAgICAgIHNpZ25JbkJ1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZGVpbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgc2lnbkluKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihcbiAgICAgICAgICAgICdJbiBvcmRlciB0byBzaWduIGluIHZpYSBWaXNhQ2hlY2tvdXQsIHRoZSBzaG9wcGVyIG11c3QgY2xpY2sgb24gXCJWaXNhIENoZWNrb3V0XCIgYnV0dG9uLicsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbk91dChvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnNpZ25PdXRDdXN0b21lcihvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dChvcHRpb25zPzogRXhlY3V0ZVBheW1lbnRNZXRob2RDaGVja291dE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgb3B0aW9ucz8uY29udGludWVXaXRoQ2hlY2tvdXRDYWxsYmFjaz8uKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVWaXNhQ2hlY2tvdXQ6IEJyYWludHJlZVZpc2FDaGVja291dCxcbiAgICAgICAgcGF5bWVudDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgICkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0LnRva2VuaXplKHBheW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKSxcbiAgICAgICAgXSkudGhlbigoW3BheWxvYWQsIGRldmljZURhdGFdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZyA9IHN0YXRlLmdldFNoaXBwaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhzaGlwcGluZyksXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhiaWxsaW5nKSxcbiAgICAgICAgICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0Rm9ybShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb3N0Rm9ybShcbiAgICAgICAgcGF5bWVudERhdGE6IFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG4gICAgICAgIGRhdGFDb2xsZWN0b3I6IEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlckRhdGEsIGJpbGxpbmdBZGRyZXNzLCBzaGlwcGluZ0FkZHJlc3MsIGRldGFpbHM6IGNhcmRJbmZvcm1hdGlvbiB9ID0gcGF5bWVudERhdGE7XG4gICAgICAgIGNvbnN0IHsgdXNlckVtYWlsIH0gPSB1c2VyRGF0YTtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBkYXRhQ29sbGVjdG9yO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICBwYXltZW50X3R5cGU6IHBheW1lbnREYXRhLnR5cGUsXG4gICAgICAgICAgICBub25jZTogcGF5bWVudERhdGEubm9uY2UsXG4gICAgICAgICAgICBwcm92aWRlcjogJ2JyYWludHJlZXZpc2FjaGVja291dCcsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICBjYXJkX2luZm9ybWF0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogY2FyZEluZm9ybWF0aW9uLmNhcmRUeXBlLFxuICAgICAgICAgICAgICAgIG51bWJlcjogY2FyZEluZm9ybWF0aW9uLmxhc3RUd28sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRBZGRyZXNzKHVzZXJFbWFpbCwgYmlsbGluZ0FkZHJlc3MpKSxcbiAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIHNoaXBwaW5nQWRkcmVzcykpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhhZGRyZXNzPzogQWRkcmVzcyk6IFZpc2FDaGVja291dEFkZHJlc3Mge1xuICAgICAgICBpZiAoIWFkZHJlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmaXJzdE5hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdE5hbWU6IGFkZHJlc3MubGFzdE5hbWUsXG4gICAgICAgICAgICBwaG9uZU51bWJlcjogYWRkcmVzcy5waG9uZSxcbiAgICAgICAgICAgIHN0cmVldEFkZHJlc3M6IGFkZHJlc3MuYWRkcmVzczEsXG4gICAgICAgICAgICBleHRlbmRlZEFkZHJlc3M6IGFkZHJlc3MuYWRkcmVzczIsXG4gICAgICAgICAgICBsb2NhbGl0eTogYWRkcmVzcy5jaXR5LFxuICAgICAgICAgICAgcmVnaW9uOiBhZGRyZXNzLnN0YXRlT3JQcm92aW5jZUNvZGUsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZTogYWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFkZHJlc3MoZW1haWw6IHN0cmluZywgYWRkcmVzczogVmlzYUNoZWNrb3V0QWRkcmVzcyA9IHt9KTogUGFydGlhbDxMZWdhY3lBZGRyZXNzPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiBhZGRyZXNzLnBob25lTnVtYmVyLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlU2lnbkluQnV0dG9uKGNvbnRhaW5lcklkOiBzdHJpbmcsIGJ1dHRvbkNsYXNzOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2NvbnRhaW5lcklkfWApO1xuXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBwcm9jZWVkIGJlY2F1c2UgdGhlIHByb3ZpZGVkIGNvbnRhaW5lciBJRCBpcyBub3QgdmFsaWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRWaXNhQ2hlY2tvdXRCdXR0b24oY29udGFpbmVyLCBidXR0b25DbGFzcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbnNlcnRWaXNhQ2hlY2tvdXRCdXR0b24oY29udGFpbmVyOiBFbGVtZW50LCBidXR0b25DbGFzczogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBidXR0b25Tb3VyY2UgPVxuICAgICAgICAgICAgJ2h0dHBzOi8vc2VjdXJlLmNoZWNrb3V0LnZpc2EuY29tL3dhbGxldC1zZXJ2aWNlcy13ZWIveG8vYnV0dG9uLnBuZz9hY2NlcHRDYW5hZGlhblZpc2FEZWJpdD1mYWxzZSZjb2JyYW5kPXRydWUmaGVpZ2h0PTM0JndpZHRoPTE3OCc7XG4gICAgICAgIGNvbnN0IGJ1dHRvblRlbXBsYXRlID0gYFxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgIGFsdD1cIlZpc2EgQ2hlY2tvdXRcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwidi1idXR0b25cIlxuICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgIHNyYz1cIiR7YnV0dG9uU291cmNlfVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxhIGNsYXNzPVwidi1sZWFybiB2LWxlYXJuLWRlZmF1bHRcIiBzdHlsZT1cInRleHQtYWxpZ246IHJpZ2h0OyBkaXNwbGF5OiBibG9jazsgZm9udC1zaXplOiAxMHB4OyBjb2xvcjogIzAwMzM2NjtcIiBocmVmPVwiI1wiIGRhdGEtbG9jYWxlPVwiZW5fVVNcIj5UZWxsIE1lIE1vcmU8L2E+YDtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLndpZHRoID0gJ21heC1jb250ZW50JztcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uY2xhc3NOYW1lID0gYnV0dG9uQ2xhc3M7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5pbm5lckhUTUwgPSBidXR0b25UZW1wbGF0ZTtcblxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmlzYUNoZWNrb3V0QnV0dG9uKTtcblxuICAgICAgICByZXR1cm4gdmlzYUNoZWNrb3V0QnV0dG9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDdXN0b21lclN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS12aXNhLWNoZWNrb3V0LWN1c3RvbWVyLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneTogQ3VzdG9tZXJTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgaG9zdFdpbmRvdzogVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyAmIEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihnZXRTY3JpcHRMb2FkZXIoKSwgaG9zdFdpbmRvdywgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVZpc2FDaGVja291dEN1c3RvbWVyU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlU2RrLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnIH0sXG5dKTtcbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRoaXMgZXJyb3Igc2hvdWxkIGJlIHRocm93biB3aGVuIGEgc2hvcHBlciB0cmllcyB0byBzaWduIGluIGFzIGEgZ3Vlc3QgYnV0XG4gKiB0aGV5IGFyZSBhbHJlYWR5IHNpZ25lZCBpbiBhcyBhIHJlZ2lzdGVyZWQgY3VzdG9tZXIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIG1lc3NhZ2UgfHxcbiAgICAgICAgICAgICAgICAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXMgb2NjdXJyZWQgZHVyaW5nIGJ1eSBub3cgY2FydCBjcmVhdGlvbiBwcm9jZXNzLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gJ0J1eU5vd0NhcnRDcmVhdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ2J1eV9ub3dfY2FydF9jcmVhdGlvbl9lcnJvcic7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNOaWwsIG9taXRCeSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFBheXBhbFN0eWxlT3B0aW9ucyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZT86IFBheXBhbFN0eWxlT3B0aW9ucyk6IFBheXBhbFN0eWxlT3B0aW9ucyB7XG4gICAgY29uc3QgeyBjb2xvciwgZnVuZGluZ2ljb25zLCBoZWlnaHQgPSA0MCwgbGF5b3V0LCBzaGFwZSwgc2l6ZSwgdGFnbGluZSB9ID0gc3R5bGUgfHwge307XG5cbiAgICBjb25zdCB2YWxpZFN0eWxlcyA9IHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGZ1bmRpbmdpY29ucyxcbiAgICAgICAgaGVpZ2h0OiBnZXRWYWxpZEhlaWdodChoZWlnaHQpLFxuICAgICAgICBsYXlvdXQsXG4gICAgICAgIHNoYXBlOiBzaGFwZSB8fCAncmVjdCcsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHRhZ2xpbmUsXG4gICAgfTtcblxuICAgIHJldHVybiBvbWl0QnkodmFsaWRTdHlsZXMsIGlzTmlsKTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWRIZWlnaHQoaGVpZ2h0OiBudW1iZXIgfCBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IG1pbkhlaWdodCA9IDI1O1xuICAgIGNvbnN0IGRlZmF1bHRIZWlnaHQgPSA0MDtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSA1NTtcblxuICAgIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBOdW1iZXIoaGVpZ2h0KTtcblxuICAgIGlmICghY3VycmVudEhlaWdodCB8fCBOdW1iZXIuaXNOYU4oY3VycmVudEhlaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRIZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRIZWlnaHQgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG1heEhlaWdodDtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEhlaWdodCA8IG1pbkhlaWdodCkge1xuICAgICAgICByZXR1cm4gbWluSGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50SGVpZ2h0O1xufVxuIiwiaW1wb3J0IHsgQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQgeyBBZGRyZXNzIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoXG4gICAgYWRkcmVzczogQWRkcmVzcyxcbik6IEJyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZWNpcGllbnROYW1lOiBgJHthZGRyZXNzLmZpcnN0TmFtZX0gJHthZGRyZXNzLmxhc3ROYW1lfWAsXG4gICAgICAgIGxpbmUxOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICBsaW5lMjogYWRkcmVzcy5hZGRyZXNzMixcbiAgICAgICAgY2l0eTogYWRkcmVzcy5jaXR5LFxuICAgICAgICBzdGF0ZTogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIGNvdW50cnlDb2RlOiBhZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICBwaG9uZTogYWRkcmVzcy5waG9uZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlRXJyb3IsXG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgIEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlVG9rZW5pemVQYXlsb2FkLFxuICAgIGlzQnJhaW50cmVlRXJyb3IsXG4gICAgUGF5cGFsQXV0aG9yaXplRGF0YSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgZ2V0VmFsaWRCdXR0b25TdHlsZSBmcm9tICcuLi9nZXQtdmFsaWQtYnV0dG9uLXN0eWxlJztcbmltcG9ydCBtYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIGZyb20gJy4uL21hcC10by1icmFpbnRyZWUtc2hpcHBpbmctYWRkcmVzcy1vdmVycmlkZSc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxCdXR0b25Jbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhCcmFpbnRyZWVQYXlwYWxCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbn0gZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnV5Tm93Q2FydElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKFxuICAgICAgICBvcHRpb25zOiBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVBheXBhbEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGJyYWludHJlZXBheXBhbCwgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udGFpbmVySWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5jb250YWluZXJJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYnJhaW50cmVlcGF5cGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlcGF5cGFsXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGxldCBjdXJyZW5jeUNvZGU6IHN0cmluZztcblxuICAgICAgICBpZiAoYnJhaW50cmVlcGF5cGFsLmJ1eU5vd0luaXRpYWxpemVPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbC5jdXJyZW5jeUNvZGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdC5jdXJyZW5jeUNvZGVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGUgPSBicmFpbnRyZWVwYXlwYWwuY3VycmVuY3lDb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWREZWZhdWx0Q2hlY2tvdXQoKTtcblxuICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGN1cnJlbmN5Q29kZSA9IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dE9wdGlvbnM6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICBjdXJyZW5jeTogY3VycmVuY3lDb2RlLFxuICAgICAgICAgICAgaW50ZW50OiBpbml0aWFsaXphdGlvbkRhdGEuaW50ZW50LFxuICAgICAgICAgICAgaXNDcmVkaXRFbmFibGVkOiBpbml0aWFsaXphdGlvbkRhdGEuaXNDcmVkaXRFbmFibGVkLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrID0gKFxuICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKFxuICAgICAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICAgICAgICAgIGJyYWludHJlZXBheXBhbCxcbiAgICAgICAgICAgICAgICBjb250YWluZXJJZCxcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAhIWNvbmZpZy50ZXN0TW9kZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayA9IChlcnJvcjogQnJhaW50cmVlRXJyb3IpID0+XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBjb250YWluZXJJZCwgYnJhaW50cmVlcGF5cGFsLm9uRXJyb3IpO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlwYWxDaGVja291dChcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0T3B0aW9ucyxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0U3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgICAgcGF5cGFsQ2hlY2tvdXRFcnJvckNhbGxiYWNrLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudGVhcmRvd24oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWw6IEJyYWludHJlZVBheXBhbEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICB0ZXN0TW9kZTogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBzdHlsZSwgc2hvdWxkUHJvY2Vzc1BheW1lbnQsIG9uQXV0aG9yaXplRXJyb3IsIG9uRWxpZ2liaWxpdHlGYWlsdXJlIH0gPVxuICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsO1xuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuXG4gICAgICAgIGlmIChwYXlwYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBheXBhbEJ1dHRvblJlbmRlciA9IHBheXBhbC5CdXR0b25zKHtcbiAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2U6IHBheXBhbC5GVU5ESU5HLlBBWVBBTCxcbiAgICAgICAgICAgICAgICBzdHlsZTogZ2V0VmFsaWRCdXR0b25TdHlsZShzdHlsZSksXG4gICAgICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBQYXltZW50KGJyYWludHJlZVBheXBhbENoZWNrb3V0LCBicmFpbnRyZWVwYXlwYWwsIG1ldGhvZElkKSxcbiAgICAgICAgICAgICAgICBvbkFwcHJvdmU6IChhdXRob3JpemVEYXRhOiBQYXlwYWxBdXRob3JpemVEYXRhKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZURhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkUHJvY2Vzc1BheW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkF1dGhvcml6ZUVycm9yLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChwYXlwYWxCdXR0b25SZW5kZXIuaXNFbGlnaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uRWxpZ2liaWxpdHlGYWlsdXJlICYmIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uRWxpZ2liaWxpdHlGYWlsdXJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5yZW1vdmVFbGVtZW50KGNvbnRhaW5lcklkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2V0dXBQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dDogQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgIGJyYWludHJlZXBheXBhbDogQnJhaW50cmVlUGF5cGFsQnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxzdHJpbmcgfCB2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgb25QYXltZW50RXJyb3IsIHNoaXBwaW5nQWRkcmVzcywgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMgfSA9IGJyYWludHJlZXBheXBhbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYnV5Tm93Q2FydCA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPy5nZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmNyZWF0ZUJ1eU5vd0NhcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zLmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSgpLFxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRoaXMuYnV5Tm93Q2FydElkID0gYnV5Tm93Q2FydD8uaWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kPEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4gPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gYnV5Tm93Q2FydCA/IGJ1eU5vd0NhcnQuY2FydEFtb3VudCA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY2FydEFtb3VudDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGJ1eU5vd0NhcnRcbiAgICAgICAgICAgICAgICA/IGJyYWludHJlZXBheXBhbC5jdXJyZW5jeUNvZGVcbiAgICAgICAgICAgICAgICA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICBpZiAob25QYXltZW50RXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uUGF5bWVudEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0b2tlbml6ZVBheW1lbnQoXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgc2hvdWxkUHJvY2Vzc1BheW1lbnQ/OiBib29sZWFuLFxuICAgICAgICBvbkVycm9yPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogUHJvbWlzZTxCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgfCB2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRldmljZURhdGEgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldERhdGFDb2xsZWN0b3Ioe1xuICAgICAgICAgICAgICAgIHBheXBhbDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdG9rZW5pemVQYXlsb2FkID0gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQudG9rZW5pemVQYXltZW50KGF1dGhvcml6ZURhdGEpO1xuICAgICAgICAgICAgY29uc3QgeyBkZXRhaWxzLCBub25jZSB9ID0gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLm1hcFRvTGVnYWN5QmlsbGluZ0FkZHJlc3MoZGV0YWlscyk7XG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPVxuICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLm1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKGRldGFpbHMpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICAgICAgcGF5bWVudF90eXBlOiAncGF5cGFsJyxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzaG91bGRQcm9jZXNzUGF5bWVudCA/ICdwcm9jZXNzX3BheW1lbnQnIDogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgYmlsbGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkoc2hpcHBpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICAuLi4odGhpcy5idXlOb3dDYXJ0SWQgJiYgeyBjYXJ0X2lkOiB0aGlzLmJ1eU5vd0NhcnRJZCB9KSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5pemVQYXlsb2FkO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZUJ1eU5vd0NhcnQoYnV5Tm93Q2FyZFJlcXVlc3RCb2R5PzogQnV5Tm93Q2FydFJlcXVlc3RCb2R5IHwgdm9pZCkge1xuICAgICAgICBpZiAoIWJ1eU5vd0NhcmRSZXF1ZXN0Qm9keSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ0NhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuY3JlYXRlQnV5Tm93Q2FydChidXlOb3dDYXJkUmVxdWVzdEJvZHkpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKFxuICAgICAgICBlcnJvcjogdW5rbm93bixcbiAgICAgICAgYnV0dG9uQ29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgb25FcnJvckNhbGxiYWNrPzogKGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IFN0YW5kYXJkRXJyb3IpID0+IHZvaWQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoYnV0dG9uQ29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmIChvbkVycm9yQ2FsbGJhY2sgJiYgaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIG9uRXJyb3JDYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUZvcm1Qb3N0ZXIgfSBmcm9tICdAYmlnY29tbWVyY2UvZm9ybS1wb3N0ZXInO1xuaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZVBheXBhbEJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxCdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlUGF5cGFsQnV0dG9uU3RyYXRlZ3ksIFt7IGlkOiAnYnJhaW50cmVlcGF5cGFsJyB9XSk7XG4iLCJpbXBvcnQgeyBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtLFxufSBmcm9tICcuL2JyYWludHJlZSc7XG5pbXBvcnQgeyBNZXNzYWdlc1N0eWxlT3B0aW9ucywgTWVzc2FnaW5nUGxhY2VtZW50cyB9IGZyb20gJy4vcGF5cGFsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlTWVzc2FnZXMge1xuICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSkge31cblxuICAgIHJlbmRlcihtZXRob2RJZDogc3RyaW5nLCBjb250YWluZXJJZDogc3RyaW5nLCBwbGFjZW1lbnQ6IE1lc3NhZ2luZ1BsYWNlbWVudHMpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbWVzc2FnaW5nQ29udGFpbmVyID0gY29udGFpbmVySWQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySWQpO1xuXG4gICAgICAgIGlmICh0aGlzLmJyYWludHJlZUhvc3RXaW5kb3cucGF5cGFsICYmIG1lc3NhZ2luZ0NvbnRhaW5lcikge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzc09yVGhyb3coKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPVxuICAgICAgICAgICAgICAgIHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBpZiAoIXBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7IHBheXBhbEJOUExDb25maWd1cmF0aW9uID0gW10gfSA9IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgICAgICBjb25zdCBiYW5uZWRJZCA9IHBsYWNlbWVudCA9PT0gTWVzc2FnaW5nUGxhY2VtZW50cy5QQVlNRU5UID8gJ2NoZWNrb3V0JyA6IHBsYWNlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGJhbm5lckNvbmZpZ3VyYXRpb24gPVxuICAgICAgICAgICAgICAgIHBheXBhbEJOUExDb25maWd1cmF0aW9uICYmXG4gICAgICAgICAgICAgICAgcGF5cGFsQk5QTENvbmZpZ3VyYXRpb24uZmluZCgoeyBpZCB9KSA9PiBpZCA9PT0gYmFubmVkSWQpO1xuXG4gICAgICAgICAgICBpZiAoIWJhbm5lckNvbmZpZ3VyYXRpb24gfHwgIWJhbm5lckNvbmZpZ3VyYXRpb24uc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgdGhpcyBjb2RlIHdoZW4gdGhpcyBkYXRhIGF0dHJpYnV0ZXMgd2lsbCBiZSByZW1vdmVkIGZyb20gYmFubmVyIGRpdiBjb250YWluZXIgaW4gY29udGVudCBzZXJ2aWNlXG4gICAgICAgICAgICBpZiAocGxhY2VtZW50ID09PSBNZXNzYWdpbmdQbGFjZW1lbnRzLkNBUlQpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdpbmdDb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXBwLXN0eWxlLWxvZ28tdHlwZScpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtbG9nby1wb3NpdGlvbicpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtdGV4dC1jb2xvcicpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0NvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtcHAtc3R5bGUtdGV4dC1zaXplJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSG9zdFdpbmRvdy5wYXlwYWxcbiAgICAgICAgICAgICAgICAuTWVzc2FnZXMoe1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGNhcnQuY2FydEFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgYnV5ZXJDb3VudHJ5OiBiaWxsaW5nQWRkcmVzcy5jb3VudHJ5Q29kZSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogdGhpcy5nZXRQYXlwYWxNZXNzYWdlc1N0eWxlc0Zyb21CTlBMQ29uZmlnKGJhbm5lckNvbmZpZ3VyYXRpb24pLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheXBhbE1lc3NhZ2VzU3R5bGVzRnJvbUJOUExDb25maWcoe1xuICAgICAgICBzdHlsZXMsXG4gICAgfTogUGF5UGFsQk5QTENvbmZpZ3VyYXRpb25JdGVtKTogTWVzc2FnZXNTdHlsZU9wdGlvbnMge1xuICAgICAgICBjb25zdCBtZXNzYWdlc1N0eWxlczogTWVzc2FnZXNTdHlsZU9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAoc3R5bGVzLmNvbG9yKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5jb2xvciA9IHN0eWxlcy5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZXMubGF5b3V0KSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5sYXlvdXQgPSBzdHlsZXMubGF5b3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlc1snbG9nby10eXBlJ10gfHwgc3R5bGVzWydsb2dvLXBvc2l0aW9uJ10pIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLmxvZ28gPSB7fTtcblxuICAgICAgICAgICAgaWYgKHN0eWxlc1snbG9nby10eXBlJ10pIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5sb2dvLnR5cGUgPSBzdHlsZXNbJ2xvZ28tdHlwZSddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3R5bGVzWydsb2dvLXBvc2l0aW9uJ10pIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5sb2dvLnBvc2l0aW9uID0gc3R5bGVzWydsb2dvLXBvc2l0aW9uJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGVzLnJhdGlvKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy5yYXRpbyA9IHN0eWxlcy5yYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHlsZXNbJ3RleHQtY29sb3InXSB8fCBzdHlsZXNbJ3RleHQtc2l6ZSddKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy50ZXh0ID0ge307XG5cbiAgICAgICAgICAgIGlmIChzdHlsZXNbJ3RleHQtY29sb3InXSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzU3R5bGVzLnRleHQuY29sb3IgPSBzdHlsZXNbJ3RleHQtY29sb3InXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0eWxlc1sndGV4dC1zaXplJ10pIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlc1N0eWxlcy50ZXh0LnNpemUgPSArc3R5bGVzWyd0ZXh0LXNpemUnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlc1N0eWxlcztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgaXNCcmFpbnRyZWVFcnJvcixcbiAgICBNZXNzYWdpbmdQbGFjZW1lbnRzLFxuICAgIFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgUGF5cGFsQnV0dG9uU3R5bGVMYWJlbE9wdGlvbixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcixcbiAgICBCdXlOb3dDYXJ0UmVxdWVzdEJvZHksXG4gICAgQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5LFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBnZXRWYWxpZEJ1dHRvblN0eWxlIGZyb20gJy4uL2dldC12YWxpZC1idXR0b24tc3R5bGUnO1xuaW1wb3J0IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgZnJvbSAnLi4vbWFwLXRvLWJyYWludHJlZS1zaGlwcGluZy1hZGRyZXNzLW92ZXJyaWRlJztcblxuaW1wb3J0IEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLCB7XG4gICAgV2l0aEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWJ1dHRvbi1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnV5Tm93Q2FydElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGZvcm1Qb3N0ZXI6IEZvcm1Qb3N0ZXIsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlTWVzc2FnZXM6IEJyYWludHJlZU1lc3NhZ2VzLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQ2hlY2tvdXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBicmFpbnRyZWVwYXlwYWxjcmVkaXQsIGNvbnRhaW5lcklkLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZXBheXBhbGNyZWRpdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZXBheXBhbGNyZWRpdFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBsZXQgY3VycmVuY3lDb2RlOiBzdHJpbmc7XG5cbiAgICAgICAgaWYgKGJyYWludHJlZXBheXBhbGNyZWRpdC5idXlOb3dJbml0aWFsaXplT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFicmFpbnRyZWVwYXlwYWxjcmVkaXQuY3VycmVuY3lDb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVwYXlwYWxjcmVkaXQuY3VycmVuY3lDb2RlXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVuY3lDb2RlID0gYnJhaW50cmVlcGF5cGFsY3JlZGl0LmN1cnJlbmN5Q29kZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkRGVmYXVsdENoZWNrb3V0KCk7XG5cbiAgICAgICAgICAgIHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpLmN1cnJlbmN5LmNvZGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3c8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPihtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGNvbmZpZywgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRPcHRpb25zOiBQYXJ0aWFsPEJyYWludHJlZVBheXBhbFNka0NyZWF0b3JDb25maWc+ID0ge1xuICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgIGludGVudDogaW5pdGlhbGl6YXRpb25EYXRhLmludGVudCxcbiAgICAgICAgICAgIGlzQ3JlZGl0RW5hYmxlZDogaW5pdGlhbGl6YXRpb25EYXRhLmlzQ3JlZGl0RW5hYmxlZCxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUT0RPOiByZW1vdmUgYmFubmVyIHJlbmRlcmluZyBpbXBsZW1lbnRhdGlvbiBpbiB0aGlzIGZpbGUgd2hlbiBQQVlQQUwtNTY2My5oaWRlX2JyYWludHJlZV9jYXJkX2Jhbm5lcl9pbXBsZW1lbnRhdGlvbl9pbl9jaGVja291dF9zZGsgd2lsbCBiZSByb2xsZWQgb3V0IHRvIDEwMCVcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZygpPy5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzID8/IHt9O1xuICAgICAgICBjb25zdCBpc0Jhbm5lckltcGxlbWVudGF0aW9uRGlzYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUEFZUEFMLTU2NjMuaGlkZV9icmFpbnRyZWVfY2FyZF9iYW5uZXJfaW1wbGVtZW50YXRpb25faW5fY2hlY2tvdXRfc2RrJyxcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayA9IChcbiAgICAgICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzQmFubmVySW1wbGVtZW50YXRpb25EaXNhYmxlZCAmJiBicmFpbnRyZWVwYXlwYWxjcmVkaXQubWVzc2FnaW5nQ29udGFpbmVySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbE1lc3NhZ2VzKG1ldGhvZElkLCBicmFpbnRyZWVwYXlwYWxjcmVkaXQubWVzc2FnaW5nQ29udGFpbmVySWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQsXG4gICAgICAgICAgICAgICAgY29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgISFjb25maWcudGVzdE1vZGUsXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXlwYWxDaGVja291dEVycm9yQ2FsbGJhY2sgPSAoZXJyb3I6IEJyYWludHJlZUVycm9yKSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgY29udGFpbmVySWQsIGJyYWludHJlZXBheXBhbGNyZWRpdC5vbkVycm9yKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0UGF5cGFsQ2hlY2tvdXQoXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dE9wdGlvbnMsXG4gICAgICAgICAgICBwYXlwYWxDaGVja291dFN1Y2Nlc3NDYWxsYmFjayxcbiAgICAgICAgICAgIHBheXBhbENoZWNrb3V0RXJyb3JDYWxsYmFjayxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJQYXlQYWxNZXNzYWdlcyhtZXRob2RJZDogc3RyaW5nLCBtZXNzYWdpbmdDb250YWluZXJJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlTWVzc2FnZXMucmVuZGVyKG1ldGhvZElkLCBtZXNzYWdpbmdDb250YWluZXJJZCwgTWVzc2FnaW5nUGxhY2VtZW50cy5DQVJUKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbEJ1dHRvbihcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBicmFpbnRyZWVwYXlwYWxjcmVkaXQ6IEJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgICAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICB0ZXN0TW9kZTogYm9vbGVhbixcbiAgICApOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBzdHlsZSwgc2hvdWxkUHJvY2Vzc1BheW1lbnQsIG9uQXV0aG9yaXplRXJyb3IsIG9uRWxpZ2liaWxpdHlGYWlsdXJlIH0gPVxuICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0O1xuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuXG4gICAgICAgIGxldCBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHBheXBhbCkge1xuICAgICAgICAgICAgY29uc3QgZnVuZGluZ1NvdXJjZXMgPSBbcGF5cGFsLkZVTkRJTkcuUEFZTEFURVIsIHBheXBhbC5GVU5ESU5HLkNSRURJVF07XG5cbiAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2VzLmZvckVhY2goKGZ1bmRpbmdTb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b25TdHlsZSA9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmRpbmdTb3VyY2UgPT09IHBheXBhbC5GVU5ESU5HLkNSRURJVFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogUGF5cGFsQnV0dG9uU3R5bGVMYWJlbE9wdGlvbi5DUkVESVQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5nZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRWYWxpZEJ1dHRvblN0eWxlKHN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGlmICghaGFzUmVuZGVyZWRTbWFydEJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlwYWxCdXR0b25SZW5kZXIgPSBwYXlwYWwuQnV0dG9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnY6IHRlc3RNb2RlID8gJ3NhbmRib3gnIDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuZGluZ1NvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBidXR0b25TdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZU9yZGVyOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBQYXltZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25BcHByb3ZlOiAoYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXplRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRQcm9jZXNzUGF5bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25BdXRob3JpemVFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5cGFsQnV0dG9uUmVuZGVyLmlzRWxpZ2libGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsQnV0dG9uUmVuZGVyLnJlbmRlcihgIyR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNSZW5kZXJlZFNtYXJ0QnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheXBhbC5GVU5ESU5HLkNSRURJVCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBvbkVsaWdpYmlsaXR5RmFpbHVyZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjb25kaXRpb24gaXMgcmVsYXRlZCB0byBwYXlwYWwuRlVORElORy5DUkVESVQgYmVjYXVzZSB3aGVuIHBheXBhbC5GVU5ESU5HLlBBWUxBVEVSIGlzIG5vdCBlbGlnaWJsZSB0aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDUkVESVQgYnV0dG9uIHNob3VsZCBiZSBjb25maWd1cmVkIGFuZCB0cmlnZ2VyZWQgdG8gcmVuZGVyIHdpdGggZWxpZ2liaWxpdHkgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiBpdCBpcyBub3QgZWxpZ2libGUsIHRoZW4gb25FbGlnaWJpbGl0eUZhaWx1cmUgY2FsbGJhY2sgc2hvdWxkIGJlIGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgb25FbGlnaWJpbGl0eUZhaWx1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXlwYWwgfHwgIWhhc1JlbmRlcmVkU21hcnRCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnJlbW92ZUVsZW1lbnQoY29udGFpbmVySWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXR1cFBheW1lbnQoXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgYnJhaW50cmVlcGF5cGFsY3JlZGl0OiBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25Jbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHN0cmluZyB8IHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBvblBheW1lbnRFcnJvciwgc2hpcHBpbmdBZGRyZXNzLCBidXlOb3dJbml0aWFsaXplT3B0aW9ucyB9ID0gYnJhaW50cmVlcGF5cGFsY3JlZGl0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBidXlOb3dDYXJ0ID1cbiAgICAgICAgICAgICAgICB0eXBlb2YgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMuY3JlYXRlQnV5Tm93Q2FydChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMuZ2V0QnV5Tm93Q2FydFJlcXVlc3RCb2R5KCksXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdGhpcy5idXlOb3dDYXJ0SWQgPSBidXlOb3dDYXJ0Py5pZDtcblxuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2Q8QnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhPiA9XG4gICAgICAgICAgICAgICAgc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBidXlOb3dDYXJ0ID8gYnV5Tm93Q2FydC5jYXJ0QW1vdW50IDogc3RhdGUuZ2V0Q2FydE9yVGhyb3coKS5jYXJ0QW1vdW50OyAvLyBzdGF0ZS5nZXRDaGVja291dE9yVGhyb3coKS5vdXRzdGFuZGluZ0JhbGFuY2VcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IGJ1eU5vd0NhcnRcbiAgICAgICAgICAgICAgICA/IGJyYWludHJlZXBheXBhbGNyZWRpdC5jdXJyZW5jeUNvZGVcbiAgICAgICAgICAgICAgICA6IHN0YXRlLmdldENhcnRPclRocm93KCkuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IHBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhPy5pbnRlbnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IHVua25vd24pIHtcbiAgICAgICAgICAgIGlmIChvblBheW1lbnRFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUVycm9yKGVycm9yKSB8fCBlcnJvciBpbnN0YW5jZW9mIFN0YW5kYXJkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25QYXltZW50RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRva2VuaXplUGF5bWVudChcbiAgICAgICAgYXV0aG9yaXplRGF0YTogUGF5cGFsQXV0aG9yaXplRGF0YSxcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBzaG91bGRQcm9jZXNzUGF5bWVudD86IGJvb2xlYW4sXG4gICAgICAgIG9uRXJyb3I/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZVRva2VuaXplUGF5bG9hZCB8IHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0RGF0YUNvbGxlY3Rvcih7XG4gICAgICAgICAgICAgICAgcGF5cGFsOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCB0b2tlbml6ZVBheWxvYWQgPSBhd2FpdCBicmFpbnRyZWVQYXlwYWxDaGVja291dC50b2tlbml6ZVBheW1lbnQoYXV0aG9yaXplRGF0YSk7XG4gICAgICAgICAgICBjb25zdCB7IGRldGFpbHMsIG5vbmNlIH0gPSB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lCaWxsaW5nQWRkcmVzcyhkZXRhaWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBwaW5nQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UubWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlscyk7XG5cbiAgICAgICAgICAgIHRoaXMuZm9ybVBvc3Rlci5wb3N0Rm9ybSgnL2NoZWNrb3V0LnBocCcsIHtcbiAgICAgICAgICAgICAgICBwYXltZW50X3R5cGU6ICdwYXlwYWwnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHNob3VsZFByb2Nlc3NQYXltZW50ID8gJ3Byb2Nlc3NfcGF5bWVudCcgOiAnc2V0X2V4dGVybmFsX2NoZWNrb3V0JyxcbiAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgICAgICBkZXZpY2VfZGF0YTogZGV2aWNlRGF0YSxcbiAgICAgICAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KGJpbGxpbmdBZGRyZXNzKSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeShzaGlwcGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgIC4uLih0aGlzLmJ1eU5vd0NhcnRJZCAmJiB7IGNhcnRfaWQ6IHRoaXMuYnV5Tm93Q2FydElkIH0pLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b2tlbml6ZVBheWxvYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUVycm9yKGVycm9yKSB8fCBlcnJvciBpbnN0YW5jZW9mIFN0YW5kYXJkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlQnV5Tm93Q2FydChidXlOb3dDYXJkUmVxdWVzdEJvZHk/OiBCdXlOb3dDYXJ0UmVxdWVzdEJvZHkgfCB2b2lkKSB7XG4gICAgICAgIGlmICghYnV5Tm93Q2FyZFJlcXVlc3RCb2R5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2FydCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5jcmVhdGVCdXlOb3dDYXJ0KGJ1eU5vd0NhcmRSZXF1ZXN0Qm9keSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBidXR0b25Db250YWluZXJJZDogc3RyaW5nLFxuICAgICAgICBvbkVycm9yQ2FsbGJhY2s/OiAoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgU3RhbmRhcmRFcnJvcikgPT4gdm9pZCxcbiAgICApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucmVtb3ZlRWxlbWVudChidXR0b25Db250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKG9uRXJyb3JDYWxsYmFjayAmJiBpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgb25FcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1wYXlwYWwtY3JlZGl0LWJ1dHRvbi1zdHJhdGVneSc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvblN0cmF0ZWd5OiBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeTxcbiAgICBCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICAgICAgZ2V0U2NyaXB0TG9hZGVyKCksXG4gICAgICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgICAgICksXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVNZXNzYWdlcyA9IG5ldyBCcmFpbnRyZWVNZXNzYWdlcyhwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlUGF5cGFsQ3JlZGl0QnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVBheXBhbENyZWRpdEJ1dHRvblN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbGNyZWRpdCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlRGF0YUNvbGxlY3RvcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0LFxuICAgIFZpc2FDaGVja291dEFkZHJlc3MsXG4gICAgVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgIFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBDaGVja291dEJ1dHRvbkluaXRpYWxpemVPcHRpb25zLFxuICAgIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3ksXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTGVnYWN5QWRkcmVzcyxcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSBpbXBsZW1lbnRzIENoZWNrb3V0QnV0dG9uU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZm9ybVBvc3RlcjogRm9ybVBvc3RlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICBhc3luYyBpbml0aWFsaXplKG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJJZCwgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250YWluZXJJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmNvbnRhaW5lcklkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLmAsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSwgY29uZmlnIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjdXJyZW5jeTogeyBjb2RlIH0sXG4gICAgICAgICAgICBjYXJ0QW1vdW50LFxuICAgICAgICB9ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFZpc2FDaGVja291dFNkayhjb25maWcudGVzdE1vZGUpO1xuXG4gICAgICAgIGNvbnN0IGluaXRPcHRpb25zID0gYnJhaW50cmVlVmlzYUNoZWNrb3V0LmNyZWF0ZUluaXRPcHRpb25zKHtcbiAgICAgICAgICAgIHBheW1lbnRSZXF1ZXN0OiB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3lDb2RlOiBjb2RlLFxuICAgICAgICAgICAgICAgIHN1YnRvdGFsOiBTdHJpbmcoY2FydEFtb3VudCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZzoge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0U2hpcHBpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlU2lnbkluQnV0dG9uKGNvbnRhaW5lcklkKTtcblxuICAgICAgICBhd2FpdCB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRJbnN0YW5jZS5vbigncGF5bWVudC5zdWNjZXNzJywgYXN5bmMgKHBheW1lbnQpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudFN1Y2Nlc3MoYnJhaW50cmVlVmlzYUNoZWNrb3V0LCBwYXltZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwYXltZW50U3VjY2VzcyhcbiAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0OiBCcmFpbnRyZWVWaXNhQ2hlY2tvdXQsXG4gICAgICAgIHBheW1lbnQ6IFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCxcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGJyYWludHJlZVZpc2FDaGVja291dC50b2tlbml6ZShwYXltZW50KSxcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlU2RrLmdldERhdGFDb2xsZWN0b3JPclRocm93KCksXG4gICAgICAgIF0pLnRoZW4oKFtwYXlsb2FkLCBkZXZpY2VEYXRhXSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpcHBpbmcgPSBzdGF0ZS5nZXRTaGlwcGluZ0FkZHJlc3MoKTtcbiAgICAgICAgICAgIGNvbnN0IGJpbGxpbmcgPSBzdGF0ZS5nZXRCaWxsaW5nQWRkcmVzcygpO1xuXG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgc2hpcHBpbmdBZGRyZXNzID0gdGhpcy50b1Zpc2FDaGVja291dEFkZHJlc3Moc2hpcHBpbmcpLFxuICAgICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzID0gdGhpcy50b1Zpc2FDaGVja291dEFkZHJlc3MoYmlsbGluZyksXG4gICAgICAgICAgICB9ID0gcGF5bG9hZDtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdEZvcm0oXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAuLi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGV2aWNlRGF0YSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcG9zdEZvcm0oXG4gICAgICAgIHBheW1lbnREYXRhOiBWaXNhQ2hlY2tvdXRUb2tlbml6ZWRQYXlsb2FkLFxuICAgICAgICBkYXRhQ29sbGVjdG9yOiBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgICkge1xuICAgICAgICBjb25zdCB7IHVzZXJEYXRhLCBiaWxsaW5nQWRkcmVzcywgc2hpcHBpbmdBZGRyZXNzLCBkZXRhaWxzOiBjYXJkSW5mb3JtYXRpb24gfSA9IHBheW1lbnREYXRhO1xuICAgICAgICBjb25zdCB7IHVzZXJFbWFpbCB9ID0gdXNlckRhdGE7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gZGF0YUNvbGxlY3RvcjtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgcGF5bWVudF90eXBlOiBwYXltZW50RGF0YS50eXBlLFxuICAgICAgICAgICAgbm9uY2U6IHBheW1lbnREYXRhLm5vbmNlLFxuICAgICAgICAgICAgcHJvdmlkZXI6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnLFxuICAgICAgICAgICAgYWN0aW9uOiAnc2V0X2V4dGVybmFsX2NoZWNrb3V0JyxcbiAgICAgICAgICAgIGRldmljZV9kYXRhOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgY2FyZF9pbmZvcm1hdGlvbjogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIHR5cGU6IGNhcmRJbmZvcm1hdGlvbi5jYXJkVHlwZSxcbiAgICAgICAgICAgICAgICBudW1iZXI6IGNhcmRJbmZvcm1hdGlvbi5sYXN0VHdvLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIGJpbGxpbmdBZGRyZXNzKSksXG4gICAgICAgICAgICBzaGlwcGluZ19hZGRyZXNzOiBKU09OLnN0cmluZ2lmeSh0aGlzLmdldEFkZHJlc3ModXNlckVtYWlsLCBzaGlwcGluZ0FkZHJlc3MpKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b1Zpc2FDaGVja291dEFkZHJlc3MoYWRkcmVzcz86IEFkZHJlc3MpOiBWaXNhQ2hlY2tvdXRBZGRyZXNzIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGFkZHJlc3MucGhvbmUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgbG9jYWxpdHk6IGFkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIHJlZ2lvbjogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRBZGRyZXNzKGVtYWlsOiBzdHJpbmcsIGFkZHJlc3M6IFZpc2FDaGVja291dEFkZHJlc3MgPSB7fSk6IFBhcnRpYWw8TGVnYWN5QWRkcmVzcz4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBmaXJzdF9uYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3RfbmFtZTogYWRkcmVzcy5sYXN0TmFtZSxcbiAgICAgICAgICAgIHBob25lX251bWJlcjogYWRkcmVzcy5waG9uZU51bWJlcixcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8xOiBhZGRyZXNzLnN0cmVldEFkZHJlc3MsXG4gICAgICAgICAgICBhZGRyZXNzX2xpbmVfMjogYWRkcmVzcy5leHRlbmRlZEFkZHJlc3MsXG4gICAgICAgICAgICBjaXR5OiBhZGRyZXNzLmxvY2FsaXR5LFxuICAgICAgICAgICAgc3RhdGU6IGFkZHJlc3MucmVnaW9uLFxuICAgICAgICAgICAgY291bnRyeV9jb2RlOiBhZGRyZXNzLmNvdW50cnlDb2RlLFxuICAgICAgICAgICAgcG9zdGFsX2NvZGU6IGFkZHJlc3MucG9zdGFsQ29kZSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVNpZ25JbkJ1dHRvbihjb250YWluZXJJZDogc3RyaW5nKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtjb250YWluZXJJZH1gKTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWVkIGEgY29udGFpbmVyIHRvIHBsYWNlIHRoZSBidXR0b24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydFZpc2FDaGVja291dEJ1dHRvbihjb250YWluZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5zZXJ0VmlzYUNoZWNrb3V0QnV0dG9uKGNvbnRhaW5lcjogRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3QgYnV0dG9uU291cmNlID1cbiAgICAgICAgICAgICdodHRwczovL3NlY3VyZS5jaGVja291dC52aXNhLmNvbS93YWxsZXQtc2VydmljZXMtd2ViL3hvL2J1dHRvbi5wbmc/YWNjZXB0Q2FuYWRpYW5WaXNhRGViaXQ9ZmFsc2UmY29icmFuZD10cnVlJmhlaWdodD0zNCZ3aWR0aD0xNzgnO1xuICAgICAgICBjb25zdCBidXR0b25UZW1wbGF0ZSA9IGBcbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBhbHQ9XCJWaXNhIENoZWNrb3V0XCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInYtYnV0dG9uXCJcbiAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICBzcmM9XCIke2J1dHRvblNvdXJjZX1cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YSBjbGFzcz1cInYtbGVhcm4gdi1sZWFybi1kZWZhdWx0XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiByaWdodDsgZGlzcGxheTogYmxvY2s7IGZvbnQtc2l6ZTogMTBweDsgY29sb3I6ICMwMDMzNjY7XCIgaHJlZj1cIiNcIiBkYXRhLWxvY2FsZT1cImVuX1VTXCI+VGVsbCBNZSBNb3JlPC9hPmA7XG5cbiAgICAgICAgY29uc3QgdmlzYUNoZWNrb3V0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgdmlzYUNoZWNrb3V0QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XG4gICAgICAgIHZpc2FDaGVja291dEJ1dHRvbi5zdHlsZS5hbGlnbkl0ZW1zID0gJ2ZsZXgtZW5kJztcblxuICAgICAgICB2aXNhQ2hlY2tvdXRCdXR0b24uaW5uZXJIVE1MID0gYnV0dG9uVGVtcGxhdGU7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHZpc2FDaGVja291dEJ1dHRvbik7XG5cbiAgICAgICAgcmV0dXJuIHZpc2FDaGVja291dEJ1dHRvbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlVmlzYUNoZWNrb3V0QnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtdmlzYS1jaGVja291dC1idXR0b24tc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneTogQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0QnV0dG9uU3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGhvc3RXaW5kb3c6IFZpc2FDaGVja291dEhvc3RXaW5kb3cgJiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNkayA9IG5ldyBCcmFpbnRyZWVTZGsoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoZ2V0U2NyaXB0TG9hZGVyKCksIGhvc3RXaW5kb3csIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKSxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVTZGssXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSwgW1xuICAgIHsgaWQ6ICdicmFpbnRyZWV2aXNhY2hlY2tvdXQnIH0sXG5dKTtcbiIsImltcG9ydCB7IExlZ2FjeUFkZHJlc3MgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IHsgQnJhaW50cmVlVG9rZW5pemF0aW9uRGV0YWlscyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzKFxuICAgIGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMsXG4pOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICBjb25zdCB7IGJpbGxpbmdBZGRyZXNzLCBlbWFpbCwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgcGhvbmUsIHNoaXBwaW5nQWRkcmVzcyB9ID0gZGV0YWlscztcblxuICAgIGNvbnN0IGFkZHJlc3MgPSBiaWxsaW5nQWRkcmVzcyB8fCBzaGlwcGluZ0FkZHJlc3M7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbWFpbCxcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lLFxuICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lLFxuICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICBhZGRyZXNzX2xpbmVfMTogYWRkcmVzcz8ubGluZTEsXG4gICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzPy5saW5lMixcbiAgICAgICAgY2l0eTogYWRkcmVzcz8uY2l0eSxcbiAgICAgICAgc3RhdGU6IGFkZHJlc3M/LnN0YXRlLFxuICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3M/LmNvdW50cnlDb2RlLFxuICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgTGVnYWN5QWRkcmVzcyB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgeyBCcmFpbnRyZWVUb2tlbml6YXRpb25EZXRhaWxzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzKFxuICAgIGRldGFpbHM6IEJyYWludHJlZVRva2VuaXphdGlvbkRldGFpbHMsXG4pOiBQYXJ0aWFsPExlZ2FjeUFkZHJlc3M+IHtcbiAgICBjb25zdCB7IGVtYWlsLCBwaG9uZSwgc2hpcHBpbmdBZGRyZXNzIH0gPSBkZXRhaWxzO1xuXG4gICAgY29uc3QgcmVjaXBpZW50TmFtZSA9IHNoaXBwaW5nQWRkcmVzcz8ucmVjaXBpZW50TmFtZSB8fCAnJztcbiAgICBjb25zdCBbZmlyc3ROYW1lLCBsYXN0TmFtZV0gPSByZWNpcGllbnROYW1lLnNwbGl0KCcgJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBlbWFpbCxcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3ROYW1lIHx8ICcnLFxuICAgICAgICBsYXN0X25hbWU6IGxhc3ROYW1lIHx8ICcnLFxuICAgICAgICBwaG9uZV9udW1iZXI6IHBob25lLFxuICAgICAgICBhZGRyZXNzX2xpbmVfMTogc2hpcHBpbmdBZGRyZXNzPy5saW5lMSxcbiAgICAgICAgYWRkcmVzc19saW5lXzI6IHNoaXBwaW5nQWRkcmVzcz8ubGluZTIsXG4gICAgICAgIGNpdHk6IHNoaXBwaW5nQWRkcmVzcz8uY2l0eSxcbiAgICAgICAgc3RhdGU6IHNoaXBwaW5nQWRkcmVzcz8uc3RhdGUsXG4gICAgICAgIGNvdW50cnlfY29kZTogc2hpcHBpbmdBZGRyZXNzPy5jb3VudHJ5Q29kZSxcbiAgICAgICAgcG9zdGFsX2NvZGU6IHNoaXBwaW5nQWRkcmVzcz8ucG9zdGFsQ29kZSxcbiAgICB9O1xufVxuIiwiaW1wb3J0IHsgQnJhaW50cmVlRXJyb3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQnJhaW50cmVlRXJyb3IoXG4gICAgZXJyb3I6IEJyYWludHJlZUVycm9yIHwgRXJyb3IgfCB1bmtub3duLFxuKTogZXJyb3IgaXMgQnJhaW50cmVlRXJyb3Ige1xuICAgIHJldHVybiAoXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgZXJyb3IgIT09IG51bGwgJiZcbiAgICAgICAgJ25hbWUnIGluIGVycm9yICYmXG4gICAgICAgIChlcnJvciBhcyBCcmFpbnRyZWVFcnJvcikubmFtZSA9PT0gJ0JyYWludHJlZUVycm9yJ1xuICAgICk7XG59XG4iLCJpbXBvcnQgeyBGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZVNkayxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgQnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICBtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzLFxuICAgIG1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzLFxuICAgIFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24sXG4gICAgUGF5cGFsU3R5bGVPcHRpb25zLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEJ1eU5vd0NhcnRDcmVhdGlvbkVycm9yLFxuICAgIEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSxcbiAgICBDYXJ0LFxuICAgIENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneSxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yLFxuICAgIE1pc3NpbmdEYXRhRXJyb3JUeXBlLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBVbnN1cHBvcnRlZEJyb3dzZXJFcnJvcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBpc0JyYWludHJlZUVycm9yIGZyb20gJy4uL2lzLWJyYWludHJlZS1lcnJvcic7XG5pbXBvcnQgeyBpc1Vuc3VwcG9ydGVkQnJvd3NlckVycm9yIH0gZnJvbSAnLi4vaXNVbnN1cHBvcnRlZEJyb3dzZXJFcnJvcic7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVWZW5tb0luaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi9icmFpbnRyZWUtdmVubW8taW5pdGlhbGl6ZS1vcHRpb25zJztcblxuY29uc3QgZ2V0VmVubW9CdXR0b25TdHlsZSA9IChzdHlsZXM6IFBheXBhbFN0eWxlT3B0aW9ucyk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IHsgY29sb3IsIGhlaWdodCB9ID0gc3R5bGVzO1xuXG4gICAgY29uc3QgY29sb3JQYXJzZXIgPSAoYzogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChjID09PSBQYXlwYWxCdXR0b25TdHlsZUNvbG9yT3B0aW9uLldISVRFKSB7XG4gICAgICAgICAgICByZXR1cm4gJyNGRkZGRkYnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcjM0Q5NUNFJztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvclBhcnNlcihjb2xvciB8fCAnJyksXG4gICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzUwJSA1MCUnLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJzgwcHggYXV0bycsXG4gICAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybChcIi9hcHAvYXNzZXRzL2ltZy9wYXltZW50LXByb3ZpZGVycy92ZW5tby1sb2dvLSR7XG4gICAgICAgICAgICBjb2xvciA9PT0gUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbi5XSElURVxuICAgICAgICAgICAgICAgID8gUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbi5CTFVFXG4gICAgICAgICAgICAgICAgOiBQYXlwYWxCdXR0b25TdHlsZUNvbG9yT3B0aW9uLldISVRFXG4gICAgICAgIH0uc3ZnXCIpYCxcbiAgICAgICAgYmFja2dyb3VuZFJlcGVhdDogJ25vLXJlcGVhdCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICB0cmFuc2l0aW9uOiAnMC4ycyBlYXNlJyxcbiAgICAgICAgbWluSGVpZ2h0OiBgJHtoZWlnaHQgfHwgNDB9cHhgLFxuICAgICAgICBtaW5XaWR0aDogJzE1MHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJvcmRlcjogY29sb3IgPT09IFBheXBhbEJ1dHRvblN0eWxlQ29sb3JPcHRpb24uV0hJVEUgPyAnMXB4IHNvbGlkIGJsYWNrJyA6ICdub25lJyxcbiAgICB9O1xufTtcblxuY29uc3QgdmVubW9CdXR0b25TdHlsZUhvdmVyID0ge1xuICAgIGJhY2tncm91bmRDb2xvcjogJyMwYTdmYzInLFxufTtcblxuaW50ZXJmYWNlIEJ1eU5vd0luaXRpYWxpemVPcHRpb25zIHtcbiAgICBnZXRCdXlOb3dDYXJ0UmVxdWVzdEJvZHk/KCk6IEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSB8IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3kgaW1wbGVtZW50cyBDaGVja291dEJ1dHRvblN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIG9uRXJyb3IgPSBub29wO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNkazogQnJhaW50cmVlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IENoZWNrb3V0QnV0dG9uSW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoQnJhaW50cmVlVmVubW9Jbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBicmFpbnRyZWV2ZW5tbywgY29udGFpbmVySWQsIG1ldGhvZElkIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGlmICghbWV0aG9kSWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5tZXRob2RJZFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSB9OiBQYXltZW50TWV0aG9kID0gcGF5bWVudE1ldGhvZDtcbiAgICAgICAgY29uc3QgeyBwYXltZW50QnV0dG9uU3R5bGVzIH0gPSBpbml0aWFsaXphdGlvbkRhdGE7XG4gICAgICAgIGNvbnN0IHsgY2FydEJ1dHRvblN0eWxlcyB9ID0gcGF5bWVudEJ1dHRvblN0eWxlcyB8fCB7fTtcbiAgICAgICAgY29uc3Qgc3R5bGVzID0gYnJhaW50cmVldmVubW8/LnN0eWxlIHx8IGNhcnRCdXR0b25TdHlsZXM7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbiB8fCAhaW5pdGlhbGl6YXRpb25EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgYFVuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuY29udGFpbmVySWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuYCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZERlZmF1bHRDaGVja291dCgpO1xuXG4gICAgICAgIHRoaXMub25FcnJvciA9IGJyYWludHJlZXZlbm1vPy5vbkVycm9yIHx8IHRoaXMuaGFuZGxlRXJyb3I7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlU2RrLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBicmFpbnRyZWVWZW5tb0NoZWNrb3V0ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0VmVubW9DaGVja291dE9yVGhyb3coKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJWZW5tb0J1dHRvbihcbiAgICAgICAgICAgICAgICBicmFpbnRyZWVWZW5tb0NoZWNrb3V0LFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcklkLFxuICAgICAgICAgICAgICAgIGJyYWludHJlZXZlbm1vPy5idXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBzdHlsZXMsXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpIHx8IGlzVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVJbml0aWFsaXphdGlvblZlbm1vRXJyb3IoZXJyb3IsIGNvbnRhaW5lcklkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZGVpbml0aWFsaXplKCk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEJyYWludHJlZUVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZUJ1eU5vd0NhcnQoXG4gICAgICAgIGJ1eU5vd0luaXRpYWxpemVPcHRpb25zPzogQnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTxDYXJ0IHwgdW5kZWZpbmVkPiB7XG4gICAgICAgIGlmICh0eXBlb2YgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgY2FydFJlcXVlc3RCb2R5ID0gYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/LmdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSgpO1xuXG4gICAgICAgICAgICBpZiAoIWNhcnRSZXF1ZXN0Qm9keSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDYXJ0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBidXlOb3dDYXJ0ID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmNyZWF0ZUJ1eU5vd0NhcnQoXG4gICAgICAgICAgICAgICAgICAgIGNhcnRSZXF1ZXN0Qm9keSxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1eU5vd0NhcnQ7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBCdXlOb3dDYXJ0Q3JlYXRpb25FcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUluaXRpYWxpemF0aW9uVmVubW9FcnJvcihcbiAgICAgICAgZXJyb3I6IEJyYWludHJlZUVycm9yIHwgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IsXG4gICAgICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVtb3ZlVmVubW9Db250YWluZXIoY29udGFpbmVySWQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlVmVubW9Db250YWluZXIoY29udGFpbmVySWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJZCk7XG5cbiAgICAgICAgaWYgKGJ1dHRvbkNvbnRhaW5lcikge1xuICAgICAgICAgICAgYnV0dG9uQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJWZW5tb0J1dHRvbihcbiAgICAgICAgYnJhaW50cmVlVmVubW9DaGVja291dDogQnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICAgICAgY29udGFpbmVySWQ6IHN0cmluZyxcbiAgICAgICAgYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnM/OiBCdXlOb3dJbml0aWFsaXplT3B0aW9ucyxcbiAgICAgICAgYnV0dG9uU3R5bGVzPzogUGF5cGFsU3R5bGVPcHRpb25zLFxuICAgICk6IHZvaWQge1xuICAgICAgICBjb25zdCB2ZW5tb0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcklkKTtcbiAgICAgICAgY29uc3QgeyBjb2xvciB9ID0gYnV0dG9uU3R5bGVzIHx8IHt9O1xuXG4gICAgICAgIGlmICghdmVubW9CdXR0b24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGNyZWF0ZSB3YWxsZXQgYnV0dG9uIHdpdGhvdXQgdmFsaWQgY29udGFpbmVyIElELicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmVubW9CdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1Zlbm1vJyk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odmVubW9CdXR0b24uc3R5bGUsIGdldFZlbm1vQnV0dG9uU3R5bGUoYnV0dG9uU3R5bGVzIHx8IHt9KSk7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzXG4gICAgICAgIHZlbm1vQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdmVubW9CdXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1eUJvd0NhcnQgPSBhd2FpdCB0aGlzLmNyZWF0ZUJ1eU5vd0NhcnQoYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMpO1xuXG4gICAgICAgICAgICBpZiAoYnJhaW50cmVlVmVubW9DaGVja291dC50b2tlbml6ZSkge1xuICAgICAgICAgICAgICAgIGJyYWludHJlZVZlbm1vQ2hlY2tvdXQudG9rZW5pemUoXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBCcmFpbnRyZWVFcnJvciB8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZW5tb0J1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlUG9zdEZvcm0ocGF5bG9hZCwgYnV5Qm93Q2FydD8uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjb2xvciA9PT0gUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbi5CTFVFKSB7XG4gICAgICAgICAgICB2ZW5tb0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZlbm1vQnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHZlbm1vQnV0dG9uU3R5bGVIb3Zlci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmVubW9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICB2ZW5tb0J1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBnZXRWZW5tb0J1dHRvblN0eWxlKFxuICAgICAgICAgICAgICAgICAgICBidXR0b25TdHlsZXMgfHwge30sXG4gICAgICAgICAgICAgICAgKS5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlUG9zdEZvcm0oXG4gICAgICAgIHBheWxvYWQ6IEJyYWludHJlZVRva2VuaXplUGF5bG9hZCxcbiAgICAgICAgYnV5Tm93Q2FydElkPzogc3RyaW5nLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IGRldmljZURhdGEgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldERhdGFDb2xsZWN0b3JPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHsgbm9uY2UsIGRldGFpbHMgfSA9IHBheWxvYWQ7XG5cbiAgICAgICAgdGhpcy5mb3JtUG9zdGVyLnBvc3RGb3JtKCcvY2hlY2tvdXQucGhwJywge1xuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBwcm92aWRlcjogJ2JyYWludHJlZXZlbm1vJyxcbiAgICAgICAgICAgIHBheW1lbnRfdHlwZTogJ3BheXBhbCcsXG4gICAgICAgICAgICBkZXZpY2VfZGF0YTogZGV2aWNlRGF0YSxcbiAgICAgICAgICAgIGFjdGlvbjogJ3NldF9leHRlcm5hbF9jaGVja291dCcsXG4gICAgICAgICAgICBiaWxsaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KG1hcFRvTGVnYWN5QmlsbGluZ0FkZHJlc3MoZGV0YWlscykpLFxuICAgICAgICAgICAgc2hpcHBpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkobWFwVG9MZWdhY3lTaGlwcGluZ0FkZHJlc3MoZGV0YWlscykpLFxuICAgICAgICAgICAgLi4uKGJ1eU5vd0NhcnRJZCAmJiB7IGNhcnRfaWQ6IGJ1eU5vd0NhcnRJZCB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBVbnN1cHBvcnRlZEJyb3dzZXJFcnJvciB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgVW5zdXBwb3J0ZWRCcm93c2VyRXJyb3I7XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuaW1wb3J0IEJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtdmVubW8tYnV0dG9uLXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmVubW9CdXR0b25TdHJhdGVneTogQ2hlY2tvdXRCdXR0b25TdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlVmVubW9CdXR0b25TdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBjb25zdCBzY3JpcHRMb2FkZXIgPSBnZXRTY3JpcHRMb2FkZXIoKTtcbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcbiAgICBjb25zdCBicmFpbnRyZWVTY3JpcHRMb2FkZXIgPSBuZXcgQnJhaW50cmVlU2NyaXB0TG9hZGVyKFxuICAgICAgICBzY3JpcHRMb2FkZXIsXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxuICAgICk7XG5cbiAgICBjb25zdCBicmFpbnRyZWVTZGsgPSBuZXcgQnJhaW50cmVlU2RrKGJyYWludHJlZVNjcmlwdExvYWRlcik7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVZlbm1vQnV0dG9uU3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUZvcm1Qb3N0ZXIoKSxcbiAgICAgICAgYnJhaW50cmVlU2RrLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlVmVubW9CdXR0b25TdHJhdGVneSwgW3sgaWQ6ICdicmFpbnRyZWV2ZW5tbycgfV0pO1xuIiwiaW1wb3J0IHtcbiAgICBGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIEZvcm1hdHRlZFZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIEhvc3RlZFZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbiAgICBWYXVsdGVkSW5zdHJ1bWVudCxcbn0gZnJvbSAnLi9wYXltZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYXVsdGVkSW5zdHJ1bWVudChcbiAgICBpbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4pOiBpbnN0cnVtZW50IGlzIFZhdWx0ZWRJbnN0cnVtZW50IHtcbiAgICByZXR1cm4gQm9vbGVhbigoaW5zdHJ1bWVudCBhcyBWYXVsdGVkSW5zdHJ1bWVudCkuaW5zdHJ1bWVudElkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdGVkVmF1bHRlZEluc3RydW1lbnQoXG4gICAgaW5zdHJ1bWVudDogUGF5bWVudEluc3RydW1lbnRQYXlsb2FkLFxuKTogaW5zdHJ1bWVudCBpcyBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgQm9vbGVhbigoaW5zdHJ1bWVudCBhcyBIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCkuaW5zdHJ1bWVudElkKSAmJlxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluc3RydW1lbnQsICdjY051bWJlcicpICYmXG4gICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdHJ1bWVudCwgJ2NjQ3Z2JylcbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudChcbiAgICBpbnN0cnVtZW50OiBQYXltZW50SW5zdHJ1bWVudFBheWxvYWQsXG4pOiBpbnN0cnVtZW50IGlzIEZvcm1hdHRlZFBheWxvYWQ8Rm9ybWF0dGVkVmF1bHRlZEluc3RydW1lbnQ+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRJbnN0cnVtZW50ID0gKGluc3RydW1lbnQgYXMgRm9ybWF0dGVkUGF5bG9hZDxGb3JtYXR0ZWRWYXVsdGVkSW5zdHJ1bWVudD4pXG4gICAgICAgIC5mb3JtYXR0ZWRQYXlsb2FkO1xuXG4gICAgaWYgKCFmb3JtYXR0ZWRJbnN0cnVtZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICB0eXBlb2YgZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgIEJvb2xlYW4oZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4gJiYgZm9ybWF0dGVkSW5zdHJ1bWVudC5iaWdwYXlfdG9rZW4udG9rZW4pXG4gICAgKTtcbn1cbiIsImltcG9ydCBTdGFuZGFyZEVycm9yIGZyb20gJy4vc3RhbmRhcmQtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgYXJlIHRyeWluZyB0byBtYWtlIGFuIG9yZGVyIGZpbmFsaXphdGlvbiByZXF1ZXN0IGZvciBhXG4gKiBwYXltZW50IG1ldGhvZCB0aGF0IGRvZXMgbm90IHJlcXVpcmUgc3VjaCBwcm9jZWR1cmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvciBleHRlbmRzIFN0YW5kYXJkRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignVGhlIGN1cnJlbnQgb3JkZXIgZG9lcyBub3QgbmVlZCB0byBiZSBmaW5hbGl6ZWQgYXQgdGhpcyBzdGFnZS4nKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ29yZGVyX2ZpbmFsaXphdGlvbl9ub3RfcmVxdWlyZWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEhvc3RlZEluc3RydW1lbnQgfSBmcm9tICcuL3BheW1lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0hvc3RlZEluc3RydW1lbnRMaWtlKFxuICAgIGluc3RydW1lbnQ6IHVua25vd24sXG4pOiBpbnN0cnVtZW50IGlzIEhvc3RlZEluc3RydW1lbnQge1xuICAgIHJldHVybiAoXG4gICAgICAgIHR5cGVvZiBpbnN0cnVtZW50ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBpbnN0cnVtZW50ICE9PSBudWxsICYmXG4gICAgICAgICh0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2F2ZUluc3RydW1lbnQgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICB0eXBlb2YgKGluc3RydW1lbnQgYXMgSG9zdGVkSW5zdHJ1bWVudCkuc2hvdWxkU2F2ZUluc3RydW1lbnQgPT09ICdib29sZWFuJykgJiZcbiAgICAgICAgKHR5cGVvZiAoaW5zdHJ1bWVudCBhcyBIb3N0ZWRJbnN0cnVtZW50KS5zaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50ID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgdHlwZW9mIChpbnN0cnVtZW50IGFzIEhvc3RlZEluc3RydW1lbnQpLnNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPT09ICdib29sZWFuJylcbiAgICApO1xufVxuIiwiaW1wb3J0IFN0YW5kYXJkRXJyb3IgZnJvbSAnLi9zdGFuZGFyZC1lcnJvcic7XG5cbi8qKlxuICogVGhpcyBlcnJvciBzaG91bGQgYmUgdGhyb3duIHdoZW4gYSBwYXltZW50IG1ldGhvZCBleHBlcmllbmNlcyBzb21lIGtpbmQgb2ZcbiAqIGZhaWx1cmUgKGkuZS46IGl0cyBjbGllbnQgbGlicmFyeSByZXR1cm5zIGEgcmVqZWN0ZWQgcHJvbWlzZSkuIEFuZCB0aGVyZSBpc1xuICogbm8gb3RoZXIgZXJyb3IgdHlwZSB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdGhhbiB0aGlzIG9uZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yIGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIG1lc3NhZ2UgfHxcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSB0aGUgY2xpZW50IGxpYnJhcnkgb2YgYSBwYXltZW50IG1ldGhvZCBoYXMgdGhyb3duIGFuIHVuZXhwZWN0ZWQgZXJyb3IuJyxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2NsaWVudF9pbnZhbGlkJztcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbiAgICBXaXRoQmFua0FjY291bnRJbnN0cnVtZW50LFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UoXG4gICAgaW5zdHJ1bWVudD86IFBheW1lbnRJbnN0cnVtZW50UGF5bG9hZCxcbik6IGluc3RydW1lbnQgaXMgV2l0aEJhbmtBY2NvdW50SW5zdHJ1bWVudCB7XG4gICAgaWYgKCFpbnN0cnVtZW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAnYWNjb3VudE51bWJlcicgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAncm91dGluZ051bWJlcicgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAnb3duZXJzaGlwVHlwZScgaW4gaW5zdHJ1bWVudCAmJlxuICAgICAgICAnYWNjb3VudFR5cGUnIGluIGluc3RydW1lbnRcbiAgICApO1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIEJyYWludHJlZVVzQmFua0FjY291bnQsXG4gICAgQnJhaW50cmVlVXNCYW5rQWNjb3VudERldGFpbHMsXG4gICAgaXNCcmFpbnRyZWVFcnJvcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlLFxuICAgIGlzVmF1bHRlZEluc3RydW1lbnQsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBOb3RJbml0aWFsaXplZEVycm9yLFxuICAgIE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLFxuICAgIE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcixcbiAgICBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICBPcmRlclJlcXVlc3RCb2R5LFxuICAgIFBheW1lbnQsXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcixcbiAgICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxuICAgIFdpdGhCYW5rQWNjb3VudEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UgZnJvbSAnLi4vaXMtdXMtYmFuay1hY2NvdW50LWluc3RydW1lbnQtbGlrZSc7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVBY2hQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgfSBmcm9tICcuL2JyYWludHJlZS1hY2gtaW5pdGlhbGl6ZS1vcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIHVzQmFua0FjY291bnQ/OiBCcmFpbnRyZWVVc0JhbmtBY2NvdW50O1xuICAgIHByaXZhdGUgZ2V0TWFuZGF0ZVRleHQ/OiAoKSA9PiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNkazogQnJhaW50cmVlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVBY2hQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIGJyYWludHJlZWFjaCB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdldE1hbmRhdGVUZXh0ID0gYnJhaW50cmVlYWNoPy5nZXRNYW5kYXRlVGV4dDtcblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdzxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgaW5pdGlhbGl6YXRpb25EYXRhIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5icmFpbnRyZWVTZGsuaW5pdGlhbGl6ZShjbGllbnRUb2tlbik7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudXNCYW5rQWNjb3VudCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmdldFVzQmFua0FjY291bnQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQnJhaW50cmVlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShvcmRlclJlcXVlc3Q6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gb3JkZXJSZXF1ZXN0O1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1N1Ym1pdHRpbmdXaXRoVmF1bHRpbmdJbnN0cnVtZW50ID0gaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50LnBheW1lbnREYXRhIHx8IHt9KTtcblxuICAgICAgICBjb25zdCBub25jZSA9IGlzU3VibWl0dGluZ1dpdGhWYXVsdGluZ0luc3RydW1lbnRcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy50b2tlbml6ZVBheW1lbnRGb3JWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50KVxuICAgICAgICAgICAgOiBhd2FpdCB0aGlzLnRva2VuaXplUGF5bWVudChwYXltZW50KTtcblxuICAgICAgICBjb25zdCBzdWJtaXRQYXltZW50UGF5bG9hZCA9IGlzU3VibWl0dGluZ1dpdGhWYXVsdGluZ0luc3RydW1lbnRcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy5wcmVwYXJlUGF5bWVudERhdGFGb3JWYXVsdGVkSW5zdHJ1bWVudChub25jZSwgcGF5bWVudClcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy5wcmVwYXJlUGF5bWVudERhdGEobm9uY2UsIHBheW1lbnQpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcihvcmRlciwgb3B0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHN1Ym1pdFBheW1lbnRQYXlsb2FkKTtcbiAgICB9XG5cbiAgICBmaW5hbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5kZWluaXRpYWxpemUoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyB0b2tlbml6ZVBheW1lbnQoeyBwYXltZW50RGF0YSB9OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IHVzQmFua0FjY291bnQgPSB0aGlzLmdldFVzQmFua0FjY291bnRPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFpc1VzQmFua0FjY291bnRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50LnBheW1lbnREYXRhJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWFuZGF0ZVRleHQgPSBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKVxuICAgICAgICAgICAgPyAnVGhlIGRhdGEgYXJlIHVzZWQgZm9yIHN0b3JlZCBpbnN0cnVtZW50IHZlcmlmaWNhdGlvbidcbiAgICAgICAgICAgIDogdHlwZW9mIHRoaXMuZ2V0TWFuZGF0ZVRleHQgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5nZXRNYW5kYXRlVGV4dCgpO1xuXG4gICAgICAgIGlmICghbWFuZGF0ZVRleHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIHByb2NlZWQgYmVjYXVzZSBnZXRNYW5kYXRlVGV4dCBpcyBub3QgcHJvdmlkZWQgb3IgcmV0dXJuZWQgdW5kZWZpbmVkIHZhbHVlLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IHVzQmFua0FjY291bnQudG9rZW5pemUoe1xuICAgICAgICAgICAgICAgIGJhbmtEZXRhaWxzOiB0aGlzLmdldEJhbmtEZXRhaWxzKHBheW1lbnREYXRhKSxcbiAgICAgICAgICAgICAgICBtYW5kYXRlVGV4dCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbm9uY2U7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUJyYWludHJlZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50Rm9yVmF1bHRlZEluc3RydW1lbnQoXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXltZW50RGF0YSA9IHt9IH0gPSBwYXltZW50O1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHsgY29uZmlnIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgaWYgKCFjb25maWcuaXNWYXVsdGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVmF1bHRpbmcgaXMgZGlzYWJsZWQgYnV0IGEgdmF1bHRlZCBpbnN0cnVtZW50IHdhcyBiZWluZyB1c2VkIGZvciB0aGlzIHRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzaG91bGRWZXJpZnlWYXVsdGluZ0luc3RydW1lbnQgPSBpc1VzQmFua0FjY291bnRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIHNob3VsZFZlcmlmeVZhdWx0aW5nSW5zdHJ1bWVudCA/IHRoaXMudG9rZW5pemVQYXltZW50KHBheW1lbnQpIDogbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YShcbiAgICAgICAgbm9uY2U6IHN0cmluZyB8IG51bGwsXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICk6IFByb21pc2U8UGF5bWVudD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBwYXltZW50RGF0YSA9IHt9IH0gPSBwYXltZW50O1xuXG4gICAgICAgIGlmICghaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudC5wYXltZW50RGF0YSddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgeyBzaG91bGRTYXZlSW5zdHJ1bWVudCwgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCwgcm91dGluZ051bWJlciwgYWNjb3VudE51bWJlciB9ID1cbiAgICAgICAgICAgIHBheW1lbnREYXRhO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgZGV2aWNlU2Vzc2lvbklkOiBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgc2hvdWxkU2F2ZUluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZWRfYmFua19hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXI6IHJvdXRpbmdOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrZWRfYWNjb3VudF9udW1iZXI6IGFjY291bnROdW1iZXIuc3Vic3RyKC00KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBub25jZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YUZvclZhdWx0ZWRJbnN0cnVtZW50KFxuICAgICAgICBub25jZTogc3RyaW5nIHwgbnVsbCxcbiAgICAgICAgcGF5bWVudDogT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgKTogUHJvbWlzZTxQYXltZW50PiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIHBheW1lbnREYXRhID0ge30gfSA9IHBheW1lbnQ7XG5cbiAgICAgICAgaWYgKCFpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKSB8fCAhaXNIb3N0ZWRJbnN0cnVtZW50TGlrZShwYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50LnBheW1lbnREYXRhJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXREYXRhQ29sbGVjdG9yT3JUaHJvdygpO1xuICAgICAgICBjb25zdCB7IGluc3RydW1lbnRJZCwgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCB9ID0gcGF5bWVudERhdGE7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXNzaW9uSWQ6IGRldmljZURhdGEsXG4gICAgICAgICAgICAgICAgaW5zdHJ1bWVudElkLFxuICAgICAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgICAgICAgICAgLi4uKG5vbmNlICYmIHsgbm9uY2UgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0QmFua0RldGFpbHMocGF5bWVudERhdGE6IFdpdGhCYW5rQWNjb3VudEluc3RydW1lbnQpOiBCcmFpbnRyZWVVc0JhbmtBY2NvdW50RGV0YWlscyB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG5cbiAgICAgICAgY29uc3Qgb3duZXJzaGlwVHlwZSA9IHBheW1lbnREYXRhLm93bmVyc2hpcFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgYWNjb3VudFR5cGUgPSBwYXltZW50RGF0YS5hY2NvdW50VHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2NvdW50TnVtYmVyOiBwYXltZW50RGF0YS5hY2NvdW50TnVtYmVyLFxuICAgICAgICAgICAgcm91dGluZ051bWJlcjogcGF5bWVudERhdGEucm91dGluZ051bWJlcixcbiAgICAgICAgICAgIG93bmVyc2hpcFR5cGUsXG4gICAgICAgICAgICAuLi4ob3duZXJzaGlwVHlwZSA9PT0gJ3BlcnNvbmFsJ1xuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogcGF5bWVudERhdGEuZmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBwYXltZW50RGF0YS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBidXNpbmVzc05hbWU6IHBheW1lbnREYXRhLmJ1c2luZXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgYWNjb3VudFR5cGUsXG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczoge1xuICAgICAgICAgICAgICAgIHN0cmVldEFkZHJlc3M6IGJpbGxpbmdBZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgICAgIGV4dGVuZGVkQWRkcmVzczogYmlsbGluZ0FkZHJlc3MuYWRkcmVzczIsXG4gICAgICAgICAgICAgICAgbG9jYWxpdHk6IGJpbGxpbmdBZGRyZXNzLmNpdHksXG4gICAgICAgICAgICAgICAgcmVnaW9uOiBiaWxsaW5nQWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICAgICAgICAgIHBvc3RhbENvZGU6IGJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0VXNCYW5rQWNjb3VudE9yVGhyb3coKTogQnJhaW50cmVlVXNCYW5rQWNjb3VudCB7XG4gICAgICAgIGlmICghdGhpcy51c0JhbmtBY2NvdW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTm90SW5pdGlhbGl6ZWRFcnJvcihOb3RJbml0aWFsaXplZEVycm9yVHlwZS5QYXltZW50Tm90SW5pdGlhbGl6ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMudXNCYW5rQWNjb3VudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUJyYWludHJlZUVycm9yKGVycm9yOiB1bmtub3duKTogbmV2ZXIge1xuICAgICAgICBpZiAoIWlzQnJhaW50cmVlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlQnJhaW50cmVlU2RrIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVBY2hQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtYWNoLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVBY2hQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8QnJhaW50cmVlQWNoUGF5bWVudFN0cmF0ZWd5PiA9IChcbiAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVBY2hQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGNyZWF0ZUJyYWludHJlZVNkayhwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZUFjaFBheW1lbnRTdHJhdGVneSwgW3sgaWQ6ICdicmFpbnRyZWVhY2gnIH1dKTtcbiIsImltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHsgUGF5bWVudEludGVncmF0aW9uU2VydmljZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlU2NyaXB0TG9hZGVyIGZyb20gJy4vYnJhaW50cmVlLXNjcmlwdC1sb2FkZXInO1xuaW1wb3J0IEJyYWludHJlZVNkayBmcm9tICcuL2JyYWludHJlZS1zZGsnO1xuaW1wb3J0IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyIGZyb20gJy4vYnJhaW50cmVlLXNkay12ZXJzaW9uLW1hbmFnZXInO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVTZGsgPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICB3aW5kb3csXG4gICAgICAgIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVNkayhicmFpbnRyZWVTY3JpcHRMb2FkZXIpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJhaW50cmVlU2RrO1xuIiwiaW1wb3J0IGdldE92ZXJsYXlTdHlsZSBmcm9tICcuL292ZXJsYXktc3R5bGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlPcHRpb25zIHtcbiAgICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAgIGlkPzogc3RyaW5nO1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgICBoYXNDbG9zZUJ1dHRvbj86IGJvb2xlYW47XG4gICAgaW5uZXJIdG1sPzogSFRNTEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlTaG93T3B0aW9ucyB7XG4gICAgb25DbGljaz8oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIG9uQ2xpY2tDbG9zZT8oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRzIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBtYWluRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgY2xvc2VFbGVtZW50PzogSFRNTEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE92ZXJsYXkge1xuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgX21haW5FbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF9jbG9zZUVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIF91bnJlZ2lzdGVyQ2xpY2s/OiAoKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IE92ZXJsYXlPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgY2xvc2VFbGVtZW50LCBtYWluRWxlbWVudCB9ID0gdGhpcy5fY3JlYXRlRWxlbWVudHMob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudCA9IGNsb3NlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fbWFpbkVsZW1lbnQgPSBtYWluRWxlbWVudDtcbiAgICB9XG5cbiAgICBzaG93KG9wdGlvbnM/OiBPdmVybGF5U2hvd09wdGlvbnMpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX21haW5FbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyQ2xpY2sob3B0aW9ucyk7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9tYWluRWxlbWVudCk7XG5cbiAgICAgICAgLy8gRmFkZSBJblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+ICh0aGlzLl9lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMScpKTtcbiAgICB9XG5cbiAgICByZW1vdmUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fbWFpbkVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3VucmVnaXN0ZXJDbGljaykge1xuICAgICAgICAgICAgdGhpcy5fdW5yZWdpc3RlckNsaWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW1vdmVBZnRlclRyYW5zaXRpb24oKTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+ICh0aGlzLl9lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCcpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVFbGVtZW50cyhvcHRpb25zPzogT3ZlcmxheU9wdGlvbnMpOiBFbGVtZW50cyB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYmFja2dyb3VuZCA9ICdyZ2JhKDAsIDAsIDAsIDAuOCknLFxuICAgICAgICAgICAgaWQgPSAnY2hlY2tvdXRPdmVybGF5JyxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IDQwMCxcbiAgICAgICAgICAgIGhhc0Nsb3NlQnV0dG9uID0gZmFsc2UsXG4gICAgICAgICAgICBpbm5lckh0bWwgPSBudWxsLFxuICAgICAgICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgbGV0IG1haW5FbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgbGV0IGNsb3NlRWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBjbGFzc0xheW91dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2xhc3NDbG9zZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICBsZXQgY2xhc3NPdmVybGF5VGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChpZCkge1xuICAgICAgICAgICAgZWxlbWVudC5pZCA9IGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlubmVySHRtbCkge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcmxheVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICAgICAgY2xhc3NPdmVybGF5VGV4dCA9IGAke2lkfS0tb3ZlcmxheVRleHRgO1xuICAgICAgICAgICAgb3ZlcmxheVRleHQuY2xhc3NOYW1lID0gY2xhc3NPdmVybGF5VGV4dDtcbiAgICAgICAgICAgIG92ZXJsYXlUZXh0LmFwcGVuZENoaWxkKGlubmVySHRtbCk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQob3ZlcmxheVRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0Nsb3NlQnV0dG9uKSB7XG4gICAgICAgICAgICBjbGFzc0Nsb3NlID0gYCR7aWR9LS1jbG9zZWA7XG4gICAgICAgICAgICBjbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNsb3NlRWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc0Nsb3NlO1xuXG4gICAgICAgICAgICBjbGFzc0xheW91dCA9IGAke2lkfS0tbGF5b3V0YDtcbiAgICAgICAgICAgIG1haW5FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBtYWluRWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc0xheW91dDtcblxuICAgICAgICAgICAgbWFpbkVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICBtYWluRWxlbWVudC5hcHBlbmRDaGlsZChjbG9zZUVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFpbkVsZW1lbnQuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICBnZXRPdmVybGF5U3R5bGUoe1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGNsYXNzTGF5b3V0LFxuICAgICAgICAgICAgICAgIGNsYXNzT3ZlcmxheVRleHQsXG4gICAgICAgICAgICAgICAgY2xhc3NDbG9zZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7IGVsZW1lbnQsIGNsb3NlRWxlbWVudCwgbWFpbkVsZW1lbnQgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQ/OiBIVE1MRWxlbWVudCwgb25DbGljaz86IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIW9uQ2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICBlbGVtZW50PzogSFRNTEVsZW1lbnQsXG4gICAgICAgIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQsXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhb25DbGljaykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2spO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3JlZ2lzdGVyQ2xpY2sob3B0aW9ucz86IE92ZXJsYXlTaG93T3B0aW9ucyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fdW5yZWdpc3RlckNsaWNrKSB7XG4gICAgICAgICAgICB0aGlzLl91bnJlZ2lzdGVyQ2xpY2soKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9uQ2xpY2ssIG9uQ2xpY2tDbG9zZSB9ID0gb3B0aW9ucztcblxuICAgICAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9lbGVtZW50LCBvbkNsaWNrKTtcbiAgICAgICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIodGhpcy5fY2xvc2VFbGVtZW50LCBvbkNsaWNrQ2xvc2UpO1xuXG4gICAgICAgICAgICB0aGlzLl91bnJlZ2lzdGVyQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLl9lbGVtZW50LCBvbkNsaWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2Nsb3NlRWxlbWVudCwgb25DbGlja0Nsb3NlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl91bnJlZ2lzdGVyQ2xpY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcmVtb3ZlQWZ0ZXJUcmFuc2l0aW9uKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBoYW5kbGVUcmFuc2l0aW9uOiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBOT1RFOiBgZXZlbnRgIGlzIG5vdCBjb3JyZWN0bHkgdHlwZWQgaW4gdGhpcyB2ZXJzaW9uIG9mIFRTXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgICAgICAgICBpZiAoKGV2ZW50IGFzIFRyYW5zaXRpb25FdmVudCkucHJvcGVydHlOYW1lICE9PSAnb3BhY2l0eScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9tYWluRWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFpbkVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZVRyYW5zaXRpb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZVRyYW5zaXRpb24pO1xuICAgIH1cbn1cbiIsImludGVyZmFjZSBPdmVybGF5U3R5bGVPcHRpb25zIHtcbiAgICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAgIGlkPzogc3RyaW5nO1xuICAgIHRyYW5zaXRpb25EdXJhdGlvbj86IG51bWJlcjtcbiAgICBjbGFzc0xheW91dD86IHN0cmluZztcbiAgICBjbGFzc092ZXJsYXlUZXh0Pzogc3RyaW5nO1xuICAgIGNsYXNzQ2xvc2U/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE92ZXJsYXlTdHlsZShvcHRpb25zOiBPdmVybGF5U3R5bGVPcHRpb25zKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IHsgaWQsIGJhY2tncm91bmQsIHRyYW5zaXRpb25EdXJhdGlvbiwgY2xhc3NMYXlvdXQsIGNsYXNzT3ZlcmxheVRleHQsIGNsYXNzQ2xvc2UgfSA9XG4gICAgICAgIG9wdGlvbnM7XG4gICAgY29uc3Qgc3R5bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBjb25zdCBhZGRDbGFzc0xheW91dCA9IGNsYXNzTGF5b3V0ID8gYCwgLiR7Y2xhc3NMYXlvdXR9YCA6ICcnO1xuXG4gICAgc3R5bGVzLmlkID0gYCR7aWR9LS1zdHlsZXNgO1xuICAgIHN0eWxlcy50eXBlID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZXMuaW5uZXJUZXh0ID0gYFxuICAgICAgICAjJHtpZH0ke2FkZENsYXNzTGF5b3V0fSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgIHotaW5kZXg6IDIxNDc0ODM2NDc7XG4gICAgICAgIH1cbiAgICAgICAgIyR7aWR9IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgJHt0cmFuc2l0aW9uRHVyYXRpb259bXMgZWFzZS1vdXQ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2JhY2tncm91bmR9O1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgfVxuICAgIGA7XG5cbiAgICBpZiAoY2xhc3NPdmVybGF5VGV4dCkge1xuICAgICAgICBzdHlsZXMuaW5uZXJUZXh0ICs9IGBcbiAgICAgICAgICAgICAjJHtpZH0ge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIyR7aWR9IC4ke2NsYXNzT3ZlcmxheVRleHR9IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAzMzBweDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgaWYgKGNsYXNzQ2xvc2UpIHtcbiAgICAgICAgc3R5bGVzLmlubmVyVGV4dCArPSBgXG4gICAgICAgICAgICAjJHtpZH0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjbGFzc0xheW91dH0gLiR7Y2xhc3NDbG9zZX0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICAgICAgICByaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICB0b3A6IDE2cHg7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgei1pbmRleDogMzE0NzQ4MzY0NztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC4ke2NsYXNzTGF5b3V0fSAuJHtjbGFzc0Nsb3NlfTo6YWZ0ZXIsIC4ke2NsYXNzTGF5b3V0fSAuJHtjbGFzc0Nsb3NlfTo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgbGVmdDogOHB4O1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuJHtjbGFzc0xheW91dH0gLiR7Y2xhc3NDbG9zZX06OmFmdGVyIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLiR7Y2xhc3NMYXlvdXR9IC4ke2NsYXNzQ2xvc2V9OjpiZWZvcmUge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xufVxuIiwiaW1wb3J0IHtcbiAgICBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzLFxuICAgIExvYWRpbmdJbmRpY2F0b3JTdHlsZXMsXG59IGZyb20gJy4vbG9hZGluZy1pbmRpY2F0b3Itc3R5bGVzJztcblxuY29uc3QgREVGQVVMVF9TVFlMRVM6IExvYWRpbmdJbmRpY2F0b3JTdHlsZXMgPSB7XG4gICAgc2l6ZTogNzAsXG4gICAgY29sb3I6ICcjZDlkOWQ5JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmZmZmJyxcbn07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPTlRBSU5FUl9TVFlMRVMgPSB7XG4gICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgJ2JhY2tncm91bmQtY29sb3InOiAncmdiYSgwLCAwLCAwLCAwLjQpJyxcbiAgICAnei1pbmRleCc6ICcxMDAwJyxcbn07XG5cbmNvbnN0IFJPVEFUSU9OX0FOSU1BVElPTiA9ICdlbWJlZGRlZC1jaGVja291dC1sb2FkaW5nLWluZGljYXRvci1yb3RhdGlvbic7XG5cbmludGVyZmFjZSBMb2FkaW5nSW5kaWNhdG9yT3B0aW9ucyB7XG4gICAgc3R5bGVzPzogTG9hZGluZ0luZGljYXRvclN0eWxlcztcbiAgICBjb250YWluZXJTdHlsZXM/OiBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkaW5nSW5kaWNhdG9yIHtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpbmRpY2F0b3I6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgc3R5bGVzOiBMb2FkaW5nSW5kaWNhdG9yU3R5bGVzO1xuICAgIHByaXZhdGUgY29udGFpbmVyU3R5bGVzOiBMb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyU3R5bGVzO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IExvYWRpbmdJbmRpY2F0b3JPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzID0geyAuLi5ERUZBVUxUX1NUWUxFUywgLi4uKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHlsZXMpIH07XG4gICAgICAgIHRoaXMuY29udGFpbmVyU3R5bGVzID0geyAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmNvbnRhaW5lclN0eWxlcykgfTtcblxuICAgICAgICB0aGlzLmRlZmluZUFuaW1hdGlvbigpO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5idWlsZENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmluZGljYXRvciA9IHRoaXMuYnVpbGRJbmRpY2F0b3IoKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmluZGljYXRvcik7XG4gICAgfVxuXG4gICAgc2hvdyhwYXJlbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAocGFyZW50SWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBhcmVudElkKTtcblxuICAgICAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdVbmFibGUgdG8gYXR0YWNoIHRoZSBsb2FkaW5nIGluZGljYXRvciBiZWNhdXNlIHRoZSBwYXJlbnQgSUQgaXMgbm90IHZhbGlkLicsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgfVxuXG4gICAgaGlkZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaGFuZGxlVHJhbnNpdGlvbkVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGhhbmRsZVRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBoYW5kbGVUcmFuc2l0aW9uRW5kKTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRDb250YWluZXIoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3R0b20gPSAnMCc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5yaWdodCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIDI1MG1zIGVhc2Utb3V0JztcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG5cbiAgICAgICAgdGhpcy5zZXRTdHlsZUF0dHJpYnV0ZShjb250YWluZXIsIHRoaXMuY29udGFpbmVyU3R5bGVzKTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRJbmRpY2F0b3IoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS53aWR0aCA9IGAke3RoaXMuc3R5bGVzLnNpemV9cHhgO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5zdHlsZXMuc2l6ZX1weGA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5ib3JkZXJSYWRpdXMgPSBgJHt0aGlzLnN0eWxlcy5zaXplfXB4YDtcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmJvcmRlciA9ICdzb2xpZCAxcHgnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuYm9yZGVyQ29sb3IgPSBgJHt0aGlzLnN0eWxlcy5iYWNrZ3JvdW5kQ29sb3J9ICR7dGhpcy5zdHlsZXMuYmFja2dyb3VuZENvbG9yfSAke3RoaXMuc3R5bGVzLmNvbG9yfSAke3RoaXMuc3R5bGVzLmNvbG9yfWA7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5tYXJnaW4gPSAnMCBhdXRvJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICAgIGluZGljYXRvci5zdHlsZS5yaWdodCA9ICcwJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRvcCA9ICc1MCUnO1xuICAgICAgICBpbmRpY2F0b3Iuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDBkZWcpJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLnRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcbiAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmFuaW1hdGlvbiA9IGAke1JPVEFUSU9OX0FOSU1BVElPTn0gNTAwbXMgaW5maW5pdGUgY3ViaWMtYmV6aWVyKDAuNjksIDAuMzEsIDAuNTYsIDAuODMpYDtcblxuICAgICAgICByZXR1cm4gaW5kaWNhdG9yO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3R5bGVBdHRyaWJ1dGUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGF0dHJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGssIGF0dHJzW2tdKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWZpbmVBbmltYXRpb24oKTogdm9pZCB7XG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGRlZmluZSBDU1MgYW5pbWF0aW9uLCB3ZSBuZWVkIHRvIGluc2VydCBhIHN0eWxlc2hlZXQgaW50byB0aGUgaG9zdCBmcmFtZS5cbiAgICAgICAgLy8gV2Ugb25seSBoYXZlIHRvIGRvIGl0IG9uY2UuXG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChST1RBVElPTl9BTklNQVRJT04pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgICAgICAgc3R5bGUuaWQgPSBST1RBVElPTl9BTklNQVRJT047XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgZG9jdW1lbnQuaGVhZD8uYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gICAgICAgIGlmIChzdHlsZS5zaGVldCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcHJvdmlkZSB0aGUgMm5kIHBhcmFtZXRlciBmb3IgSUUxMSwgZXZlbiB0aG91Z2ggaXQgaXNcbiAgICAgICAgICAgIC8vIDAgYnkgZGVmYXVsdCBmb3IgYWxsIG90aGVyIGJyb3dzZXJzLlxuICAgICAgICAgICAgc3R5bGUuc2hlZXQuaW5zZXJ0UnVsZShcbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgQGtleWZyYW1lcyAke1JPVEFUSU9OX0FOSU1BVElPTn0ge1xuICAgICAgICAgICAgICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAgICAgICAgICAgMTAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSByb3RhdGUoMzYwZGVnKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTID0ge1xuICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogJ3JnYmEoMCwgMCwgMCwgMC40KScsXG4gICAgJ3otaW5kZXgnOiAnMTAwMCcsXG59O1xuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVFcnJvcixcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlTWVzc2FnZXMsXG4gICAgQnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgQnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZyxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgTWVzc2FnaW5nUGxhY2VtZW50cyxcbiAgICBQYXlwYWxBdXRob3JpemVEYXRhLFxuICAgIFBheXBhbEJ1dHRvblJlbmRlcixcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBGb3JtYXR0ZWRQYXlsb2FkLFxuICAgIEludmFsaWRBcmd1bWVudEVycm9yLFxuICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UsXG4gICAgaXNIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudCxcbiAgICBpc1ZhdWx0ZWRJbnN0cnVtZW50LFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvcixcbiAgICBOb3RJbml0aWFsaXplZEVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcixcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBQYXlwYWxJbnN0cnVtZW50LFxuICAgIFN0YW5kYXJkRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgaXNCcmFpbnRyZWVFcnJvciBmcm9tICcuLi9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IGlzQnJhaW50cmVlUGF5cGFsUHJvdmlkZXJFcnJvciBmcm9tICcuLi9pcy1icmFpbnRyZWUtcGF5cGFsLXByb3ZpZGVyLWVycm9yJztcbmltcG9ydCBtYXBUb0JyYWludHJlZVNoaXBwaW5nQWRkcmVzc092ZXJyaWRlIGZyb20gJy4uL21hcC10by1icmFpbnRyZWUtc2hpcHBpbmctYWRkcmVzcy1vdmVycmlkZSc7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlUGF5cGFsUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFdpdGhCcmFpbnRyZWVQYXlwYWxQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vYnJhaW50cmVlLXBheXBhbC1wYXltZW50LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVBheXBhbFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuICAgIHByaXZhdGUgYnJhaW50cmVlSG9zdFdpbmRvdzogQnJhaW50cmVlSG9zdFdpbmRvdyA9IHdpbmRvdztcbiAgICBwcml2YXRlIGJyYWludHJlZT86IEJyYWludHJlZVBheXBhbFBheW1lbnRJbml0aWFsaXplT3B0aW9ucztcbiAgICBwcml2YXRlIGJyYWludHJlZVRva2VuaXplUGF5bG9hZD86IEJyYWludHJlZVRva2VuaXplUGF5bG9hZDtcbiAgICBwcml2YXRlIHBheXBhbEJ1dHRvblJlbmRlcj86IFBheXBhbEJ1dHRvblJlbmRlcjtcbiAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3JDb250YWluZXI/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZU1lc3NhZ2VzOiBCcmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yOiBMb2FkaW5nSW5kaWNhdG9yLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVQYXlwYWxQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVlOiBicmFpbnRyZWVPcHRpb25zLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICB0aGlzLmJyYWludHJlZSA9IGJyYWludHJlZU9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCF0aGlzLnBheW1lbnRNZXRob2QgfHwgIXRoaXMucGF5bWVudE1ldGhvZC5ub25jZSkge1xuICAgICAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlXG4gICAgICAgICAgICAgICAgLmdldFN0YXRlKClcbiAgICAgICAgICAgICAgICAuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucGF5bWVudE1ldGhvZC5jbGllbnRUb2tlbiAmJiBicmFpbnRyZWVPcHRpb25zPy5iYW5uZXJDb250YWluZXJJZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5cGFsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRQYXlwYWxDaGVja291dEluc3RhbmNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkUGF5cGFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgIGlmIChicmFpbnRyZWVPcHRpb25zPy5iYW5uZXJDb250YWluZXJJZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZFBheXBhbENoZWNrb3V0SW5zdGFuY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wYXltZW50TWV0aG9kLmNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkUGF5cGFsKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShvcmRlclJlcXVlc3Q6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gb3JkZXJSZXF1ZXN0O1xuXG4gICAgICAgIGNvbnN0IHsgb25FcnJvciB9ID0gdGhpcy5icmFpbnRyZWUgfHwge307XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQsIG9yZGVyLnVzZVN0b3JlQ3JlZGl0KTtcblxuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnREYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHJvdmlkZXJFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRQYXlwYWwoKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uUmVuZGVyPy5jbG9zZSgpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkUGF5cGFsQ2hlY2tvdXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKF9yZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IgJiYgdHlwZW9mIG9uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IobmV3IEVycm9yKCdJTlNUUlVNRU5UX0RFQ0xJTkVEJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdGhpcy5wYXlwYWxCdXR0b25SZW5kZXI/LmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlUGF5bWVudERhdGEoXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICAgICB1c2VTdG9yZUNyZWRpdD86IGJvb2xlYW4sXG4gICAgKTogUHJvbWlzZTxQYXltZW50PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgY29uc3QgZ3JhbmRUb3RhbCA9IHN0YXRlLmdldE91dHN0YW5kaW5nQmFsYW5jZSh1c2VTdG9yZUNyZWRpdCk7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHN0YXRlLmdldFN0b3JlQ29uZmlnKCk7XG5cbiAgICAgICAgaWYgKCFncmFuZFRvdGFsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nQ2hlY2tvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdDaGVja291dENvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGF5bWVudE1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgc3RvcmVQcm9maWxlOiB7IHN0b3JlTGFuZ3VhZ2UgfSxcbiAgICAgICAgfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBjb25maWc6IHsgaXNWYXVsdGluZ0VuYWJsZWQgfSxcbiAgICAgICAgfSA9IHRoaXMucGF5bWVudE1ldGhvZDtcbiAgICAgICAgY29uc3QgeyBtZXRob2RJZCwgcGF5bWVudERhdGEgPSB7fSB9ID0gcGF5bWVudDtcblxuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuYnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPy5ub25jZSB8fCBub25jZTtcblxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcblxuICAgICAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ucGF5bWVudCxcbiAgICAgICAgICAgICAgICBwYXltZW50RGF0YTogdGhpcy5mb3JtYXR0ZWRQYXlsb2FkKHRva2VuKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkgfHwgaXNIb3N0ZWRWYXVsdGVkSW5zdHJ1bWVudChwYXltZW50RGF0YSkpIHtcbiAgICAgICAgICAgIGlmICghaXNWYXVsdGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICdWYXVsdGluZyBpcyBkaXNhYmxlZCBidXQgYSB2YXVsdGVkIGluc3RydW1lbnQgd2FzIGJlaW5nIHVzZWQgZm9yIHRoaXMgdHJhbnNhY3Rpb24nLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGF5bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50LCBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IH0gPSBwYXltZW50RGF0YTtcblxuICAgICAgICBpZiAoc2hvdWxkU2F2ZUluc3RydW1lbnQgJiYgIWlzVmF1bHRpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1ZhdWx0aW5nIGlzIGRpc2FibGVkIGJ1dCBzaG91bGRTYXZlSW5zdHJ1bWVudCBpcyBzZXQgdG8gdHJ1ZScsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID0gc3RhdGUuZ2V0U2hpcHBpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUgPSBzaGlwcGluZ0FkZHJlc3NcbiAgICAgICAgICAgID8gbWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZShzaGlwcGluZ0FkZHJlc3MpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UucGF5cGFsKHtcbiAgICAgICAgICAgICAgICBhbW91bnQ6IGdyYW5kVG90YWwsXG4gICAgICAgICAgICAgICAgbG9jYWxlOiBzdG9yZUxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeS5jb2RlLFxuICAgICAgICAgICAgICAgIG9mZmVyQ3JlZGl0OiB0aGlzLnBheW1lbnRNZXRob2QuaWQgPT09ICdicmFpbnRyZWVwYXlwYWxjcmVkaXQnLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc092ZXJyaWRlLFxuICAgICAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50OiBzaG91bGRTYXZlSW5zdHJ1bWVudCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NFZGl0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNlc3Npb25JZCgpLFxuICAgICAgICBdKS50aGVuKChbeyBub25jZSwgZGV0YWlscyB9ID0ge30gYXMgYW55LCBzZXNzaW9uSWRdKSA9PiAoe1xuICAgICAgICAgICAgLi4ucGF5bWVudCxcbiAgICAgICAgICAgIHBheW1lbnREYXRhOiB0aGlzLmZvcm1hdHRlZFBheWxvYWQoXG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZGV0YWlscyAmJiBkZXRhaWxzLmVtYWlsLFxuICAgICAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgICAgICBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0dGVkUGF5bG9hZChcbiAgICAgICAgdG9rZW46IHN0cmluZyxcbiAgICAgICAgZW1haWw/OiBzdHJpbmcsXG4gICAgICAgIHNlc3Npb25JZD86IHN0cmluZyxcbiAgICAgICAgdmF1bHRQYXltZW50SW5zdHJ1bWVudD86IGJvb2xlYW4sXG4gICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQ/OiBib29sZWFuLFxuICAgICk6IEZvcm1hdHRlZFBheWxvYWQ8UGF5cGFsSW5zdHJ1bWVudD4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgIHZhdWx0X3BheW1lbnRfaW5zdHJ1bWVudDogdmF1bHRQYXltZW50SW5zdHJ1bWVudCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHNldF9hc19kZWZhdWx0X3N0b3JlZF9pbnN0cnVtZW50OiBzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IHx8IG51bGwsXG4gICAgICAgICAgICAgICAgZGV2aWNlX2luZm86IHNlc3Npb25JZCB8fCBudWxsLFxuICAgICAgICAgICAgICAgIHBheXBhbF9hY2NvdW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRQYXlwYWxDaGVja291dEluc3RhbmNlKCkge1xuICAgICAgICBjb25zdCB7IGNsaWVudFRva2VuLCBpbml0aWFsaXphdGlvbkRhdGEsIGlkOiBwYXltZW50TWV0aG9kSWQgfSA9IHRoaXMucGF5bWVudE1ldGhvZCB8fCB7fTtcblxuICAgICAgICBpZiAoIWNsaWVudFRva2VuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuaW5pdGlhbGl6ZShjbGllbnRUb2tlbik7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5Q29kZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpLmdldENhcnRPclRocm93KClcbiAgICAgICAgICAgICAgICAuY3VycmVuY3kuY29kZTtcblxuICAgICAgICAgICAgY29uc3QgcGF5cGFsQ2hlY2tvdXRDb25maWc6IFBhcnRpYWw8QnJhaW50cmVlUGF5cGFsU2RrQ3JlYXRvckNvbmZpZz4gPSB7XG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBpbnRlbnQ6IGluaXRpYWxpemF0aW9uRGF0YT8uaW50ZW50LFxuICAgICAgICAgICAgICAgIGlzQ3JlZGl0RW5hYmxlZDogaW5pdGlhbGl6YXRpb25EYXRhPy5pc0NyZWRpdEVuYWJsZWQsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBpc0JyYWludHJlZVBheXBhbENyZWRpdCA9IHBheW1lbnRNZXRob2RJZCA9PT0gJ2JyYWludHJlZXBheXBhbGNyZWRpdCc7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTaG93UGF5UGFsQ3JlZGl0QmFubmVyID1cbiAgICAgICAgICAgICAgICBpc0JyYWludHJlZVBheXBhbENyZWRpdCB8fCAhaW5pdGlhbGl6YXRpb25EYXRhPy5pc0NyZWRpdEVuYWJsZWQ7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFBheXBhbENoZWNrb3V0KFxuICAgICAgICAgICAgICAgIHBheXBhbENoZWNrb3V0Q29uZmlnLFxuICAgICAgICAgICAgICAgIChicmFpbnRyZWVQYXlwYWxDaGVja291dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRTaG93UGF5UGFsQ3JlZGl0QmFubmVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlPy5iYW5uZXJDb250YWluZXJJZFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsTWVzc2FnZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlLmJhbm5lckNvbnRhaW5lcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGF5UGFsQnV0dG9uKGJyYWludHJlZVBheXBhbENoZWNrb3V0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IsXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlclBheVBhbE1lc3NhZ2VzKG1ldGhvZElkOiBzdHJpbmcsIGNvbnRhaW5lcklkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5icmFpbnRyZWVNZXNzYWdlcy5yZW5kZXIobWV0aG9kSWQsIGNvbnRhaW5lcklkLCBNZXNzYWdpbmdQbGFjZW1lbnRzLlBBWU1FTlQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyUGF5UGFsQnV0dG9uKGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCkge1xuICAgICAgICBjb25zdCB7IG9uUGF5bWVudEVycm9yLCBzdWJtaXRGb3JtLCBvblJlbmRlckJ1dHRvbiwgY29udGFpbmVySWQsIG9uRXJyb3IgfSA9XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZSB8fCB7fTtcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcklkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMucGF5bWVudE1ldGhvZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lciA9IGNvbnRhaW5lcklkLnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBjb25maWc6IHsgdGVzdE1vZGUgfSxcbiAgICAgICAgfSA9IHRoaXMucGF5bWVudE1ldGhvZDtcblxuICAgICAgICBjb25zdCB7IHBheXBhbCB9ID0gdGhpcy5icmFpbnRyZWVIb3N0V2luZG93O1xuICAgICAgICBjb25zdCBmdW5kaW5nU291cmNlID0gcGF5cGFsPy5GVU5ESU5HLlBBWVBBTDtcblxuICAgICAgICBpZiAocGF5cGFsICYmIGZ1bmRpbmdTb3VyY2UpIHtcbiAgICAgICAgICAgIHRoaXMucGF5cGFsQnV0dG9uUmVuZGVyID0gcGF5cGFsLkJ1dHRvbnMoe1xuICAgICAgICAgICAgICAgIGVudjogdGVzdE1vZGUgPyAnc2FuZGJveCcgOiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgY29tbWl0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmdW5kaW5nU291cmNlLFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlT3JkZXI6ICgpID0+IHRoaXMuc2V0dXBQYXltZW50KGJyYWludHJlZVBheXBhbENoZWNrb3V0LCBpZCwgb25QYXltZW50RXJyb3IpLFxuICAgICAgICAgICAgICAgIG9uQXBwcm92ZTogYXN5bmMgKGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVUb2tlbml6ZVBheWxvYWQgPSBhd2FpdCB0aGlzLnRva2VuaXplUGF5bWVudE9yVGhyb3coXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRob3JpemVEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQsXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym1pdEZvcm0gJiYgdHlwZW9mIHN1Ym1pdEZvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdEZvcm0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yPy4oZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG9uUmVuZGVyQnV0dG9uICYmIHR5cGVvZiBvblJlbmRlckJ1dHRvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG9uUmVuZGVyQnV0dG9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBheXBhbEJ1dHRvblJlbmRlci5pc0VsaWdpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBheXBhbEJ1dHRvblJlbmRlci5yZW5kZXIoYCR7Y29udGFpbmVySWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVsZW1lbnQoY29udGFpbmVySWQuc3BsaXQoJyMnKVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNldHVwUGF5bWVudChcbiAgICAgICAgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQ6IEJyYWludHJlZVBheXBhbENoZWNrb3V0LFxuICAgICAgICBtZXRob2Q6IHN0cmluZyxcbiAgICAgICAgb25QYXltZW50RXJyb3I6IEJyYWludHJlZVBheXBhbFBheW1lbnRJbml0aWFsaXplT3B0aW9uc1snb25QYXltZW50RXJyb3InXSxcbiAgICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHN0YXRlLmdldEN1c3RvbWVyKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRNZXRob2Q6IFBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2QpO1xuXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBzdGF0ZS5nZXRDaGVja291dE9yVGhyb3coKS5vdXRzdGFuZGluZ0JhbGFuY2U7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jdXJyZW5jeS5jb2RlO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPSBzdGF0ZS5nZXRTaGlwcGluZ0FkZHJlc3MoKTtcblxuICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IHNoaXBwaW5nQWRkcmVzcyB8fCBjdXN0b21lcj8uYWRkcmVzc2VzWzBdO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSA9IGFkZHJlc3NcbiAgICAgICAgICAgICAgICA/IG1hcFRvQnJhaW50cmVlU2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUoYWRkcmVzcylcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGJyYWludHJlZVBheXBhbENoZWNrb3V0LmNyZWF0ZVBheW1lbnQoe1xuICAgICAgICAgICAgICAgIGZsb3c6ICdjaGVja291dCcsXG4gICAgICAgICAgICAgICAgZW5hYmxlU2hpcHBpbmdBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzc0VkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NPdmVycmlkZSxcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgY3VycmVuY3k6IGN1cnJlbmN5Q29kZSxcbiAgICAgICAgICAgICAgICBvZmZlckNyZWRpdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW50ZW50OiBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YS5pbnRlbnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChvblBheW1lbnRFcnJvciAmJiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikgfHwgZXJyb3IgaW5zdGFuY2VvZiBTdGFuZGFyZEVycm9yKSkge1xuICAgICAgICAgICAgICAgIG9uUGF5bWVudEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHRva2VuaXplUGF5bWVudE9yVGhyb3coXG4gICAgICAgIGF1dGhvcml6ZURhdGE6IFBheXBhbEF1dGhvcml6ZURhdGEsXG4gICAgICAgIGJyYWludHJlZVBheXBhbENoZWNrb3V0OiBCcmFpbnRyZWVQYXlwYWxDaGVja291dCxcbiAgICAgICAgb25FcnJvcj86IChlcnJvcjogQnJhaW50cmVlRXJyb3IgfCBTdGFuZGFyZEVycm9yKSA9PiB2b2lkLFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgYnJhaW50cmVlUGF5cGFsQ2hlY2tvdXQudG9rZW5pemVQYXltZW50KGF1dGhvcml6ZURhdGEpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IgJiYgKGlzQnJhaW50cmVlRXJyb3IoZXJyb3IpIHx8IGVycm9yIGluc3RhbmNlb2YgU3RhbmRhcmRFcnJvcikpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRQYXlwYWwoKSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4sIGluaXRpYWxpemF0aW9uRGF0YSB9ID0gdGhpcy5wYXltZW50TWV0aG9kIHx8IHt9O1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRQYXlwYWwoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEJyYWludHJlZUVycm9yIHwgRXJyb3IgfCB1bmtub3duKTogbmV2ZXIge1xuICAgICAgICBpZiAoIWlzQnJhaW50cmVlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnUEFZUEFMX1BPUFVQX0NMT1NFRCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNQcm92aWRlckVycm9yKGVycm9yOiB1bmtub3duKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChpc0JyYWludHJlZVBheXBhbFByb3ZpZGVyRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXlwYWxQcm92aWRlckVycm9yID0gZXJyb3I/LmVycm9ycz8uZmlsdGVyKChlKSA9PiBlLnByb3ZpZGVyX2Vycm9yKSB8fCBbXTtcblxuICAgICAgICAgICAgcmV0dXJuIHBheXBhbFByb3ZpZGVyRXJyb3JbMF0/LnByb3ZpZGVyX2Vycm9yPy5jb2RlID09PSAnMjA0Nic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVFbGVtZW50KGVsZW1lbnRJZD86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIExvYWRpbmcgSW5kaWNhdG9yIG1ldGhvZHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSB0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGlzTG9hZGluZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAoaXNMb2FkaW5nICYmIHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nSW5kaWNhdG9yLnNob3codGhpcy5sb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIFByb3ZpZGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZXJyb3JzPzogRXJyb3JFbGVtZW50W107XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIHRocmVlX2RzX3Jlc3VsdD86IHtcbiAgICAgICAgYWNzX3VybDogdW5rbm93bjtcbiAgICAgICAgcGF5ZXJfYXV0aF9yZXF1ZXN0OiB1bmtub3duO1xuICAgICAgICBtZXJjaGFudF9kYXRhOiB1bmtub3duO1xuICAgICAgICBjYWxsYmFja191cmw6IHVua25vd247XG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckVsZW1lbnQge1xuICAgIGNvZGU6IHN0cmluZztcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgcHJvdmlkZXJfZXJyb3I/OiB7XG4gICAgICAgIGNvZGU6IHN0cmluZztcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZVBheXBhbFByb3ZpZGVyRXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBQcm92aWRlckVycm9yIHtcbiAgICByZXR1cm4gdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiBlcnJvciAhPT0gbnVsbCAmJiAnZXJyb3JzJyBpbiBlcnJvcjtcbn1cbiIsImltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVNZXNzYWdlcyxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciwgT3ZlcmxheSB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuXG5pbXBvcnQgeyBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMgfSBmcm9tICcuLi9icmFpbnRyZWUtcGF5cGFsLWNvbnN0YW50cyc7XG5cbmltcG9ydCBCcmFpbnRyZWVQYXlwYWxQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtcGF5cGFsLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVQYXlwYWxQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IG92ZXJsYXkgPSBuZXcgT3ZlcmxheSgpO1xuXG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlID0gbmV3IEJyYWludHJlZUludGVncmF0aW9uU2VydmljZShcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihcbiAgICAgICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgICAgIGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxuICAgICAgICApLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBvdmVybGF5LFxuICAgICk7XG4gICAgY29uc3QgYnJhaW50cmVlTWVzc2FnZXMgPSBuZXcgQnJhaW50cmVlTWVzc2FnZXMocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVBheXBhbFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVNZXNzYWdlcyxcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3Ioe1xuICAgICAgICAgICAgY29udGFpbmVyU3R5bGVzOiBMT0FESU5HX0lORElDQVRPUl9TVFlMRVMsXG4gICAgICAgIH0pLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5LCBbXG4gICAgeyBpZDogJ2JyYWludHJlZXBheXBhbCcgfSxcbiAgICB7IGlkOiAnYnJhaW50cmVlcGF5cGFsY3JlZGl0JyB9LFxuXSk7XG4iLCJlbnVtIENvbnRlbnRUeXBlIHtcbiAgICBKc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIEpzb25WMSA9ICdhcHBsaWNhdGlvbi92bmQuYmMudjEranNvbicsXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRlbnRUeXBlO1xuIiwiZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OX0hFQURFUlMgPSB7ICdYLUNoZWNrb3V0LVNESy1WZXJzaW9uJzogTElCUkFSWV9WRVJTSU9OIH07XG4iLCJpbXBvcnQgeyBSZXF1ZXN0U2VuZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IHsgQnJhaW50cmVlT3JkZXJTdGF0dXNEYXRhIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBDb250ZW50VHlwZSxcbiAgICBJTlRFUk5BTF9VU0VfT05MWSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBTREtfVkVSU0lPTl9IRUFERVJTLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlUmVxdWVzdFNlbmRlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZXF1ZXN0U2VuZGVyOiBSZXF1ZXN0U2VuZGVyKSB7fVxuXG4gICAgYXN5bmMgZ2V0T3JkZXJTdGF0dXMoXG4gICAgICAgIG1ldGhvZElkID0gJ2JyYWludHJlZWxvY2FsbWV0aG9kcycsXG4gICAgICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgICApOiBQcm9taXNlPEJyYWludHJlZU9yZGVyU3RhdHVzRGF0YT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9zdG9yZWZyb250L2luaXRpYWxpemF0aW9uLyR7bWV0aG9kSWR9YDtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdYLUFQSS1JTlRFUk5BTCc6IElOVEVSTkFMX1VTRV9PTkxZLFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6IENvbnRlbnRUeXBlLkpzb24sXG4gICAgICAgICAgICAuLi5TREtfVkVSU0lPTl9IRUFERVJTLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucmVxdWVzdFNlbmRlci5nZXQ8QnJhaW50cmVlT3JkZXJTdGF0dXNEYXRhPih1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzLmJvZHk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IElOVEVSTkFMX1VTRV9PTkxZID1cbiAgICAnVGhpcyBBUEkgZW5kcG9pbnQgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5IGFuZCBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmUnO1xuIiwiaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdAYmlnY29tbWVyY2UvcmVxdWVzdC1zZW5kZXInO1xuXG5pbXBvcnQgU3RhbmRhcmRFcnJvciBmcm9tICcuL3N0YW5kYXJkLWVycm9yJztcblxuY29uc3QgREVGQVVMVF9SRVNQT05TRSA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICBzdGF0dXM6IDAsXG59O1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgd2UgYXJlIHVuYWJsZSB0byBtYWtlIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLiBJdCB3cmFwc1xuICogYW55IHNlcnZlciByZXNwb25zZSBpbnRvIGEgSlMgZXJyb3Igb2JqZWN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0RXJyb3I8VEJvZHkgPSBhbnk+IGV4dGVuZHMgU3RhbmRhcmRFcnJvciB7XG4gICAgYm9keTogVEJvZHkgfCB7fTtcbiAgICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAgIGVycm9yczogQXJyYXk8eyBjb2RlOiBzdHJpbmc7IG1lc3NhZ2U/OiBzdHJpbmcgfT47XG4gICAgc3RhdHVzOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVzcG9uc2U/OiBSZXNwb25zZTxUQm9keSB8IHt9PixcbiAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGVycm9ycyxcbiAgICAgICAgfToge1xuICAgICAgICAgICAgbWVzc2FnZT86IHN0cmluZztcbiAgICAgICAgICAgIGVycm9ycz86IEFycmF5PHsgY29kZTogc3RyaW5nOyBtZXNzYWdlPzogc3RyaW5nIH0+O1xuICAgICAgICB9ID0ge30sXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgYm9keSwgaGVhZGVycywgc3RhdHVzIH0gPSByZXNwb25zZSB8fCBERUZBVUxUX1JFU1BPTlNFO1xuXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkLicpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAncmVxdWVzdCc7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycyB8fCBbXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLyoqXG4gKiBUaHJvdyB0aGlzIGVycm9yIGlmIHdlIGFyZSB1bmFibGUgdG8gc3VjY2Vzc2Z1bGx5IHN1Ym1pdCBhIHNlcnZlciByZXF1ZXN0XG4gKiB1c2luZyBhIHBheW1lbnQgbWV0aG9kIGJlY2F1c2UgdGhlIG1ldGhvZCBoYXMgaW52YWxpZCBjb25maWd1cmF0aW9uIG9yIGlzIGluXG4gKiBhbiBpbnZhbGlkIHN0YXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXltZW50TWV0aG9kSW52YWxpZEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlcmUgaXMgYSBwcm9ibGVtIHByb2Nlc3NpbmcgeW91ciBwYXltZW50LiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdQYXltZW50TWV0aG9kSW52YWxpZEVycm9yJztcbiAgICAgICAgdGhpcy50eXBlID0gJ3BheW1lbnRfbWV0aG9kX2ludmFsaWQnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3JlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IFJlcXVlc3RFcnJvciBmcm9tICcuL3JlcXVlc3QtZXJyb3InO1xuXG4vKipcbiAqIFRocm93IHRoaXMgZXJyb3IgaWYgYSByZXF1ZXN0IGZhaWxzIHRvIGNvbXBsZXRlIHdpdGhpbiBpdHMgcmVxdWlyZWQgdGltZWZyYW1lXG4gKiBiZWNhdXNlIG9mIGEgbmV0d29yayBpc3N1ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZW91dEVycm9yPFQgPSBhbnk+IGV4dGVuZHMgUmVxdWVzdEVycm9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFJlc3BvbnNlPFQ+KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnVGhlIHJlcXVlc3QgaGFzIHRpbWVkIG91dCBvciBhYm9ydGVkLicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICAgICAgICB0aGlzLnR5cGUgPSAndGltZW91dCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSW5pdGlhbGl6YXRpb25EYXRhLFxuICAgIEJyYWludHJlZUxvY2FsUGF5bWVudCxcbiAgICBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcsXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50TWV0aG9kUmVkaXJlY3RBY3Rpb24sXG4gICAgQnJhaW50cmVlTG9jYWxQYXltZW50c1BheWxvYWQsXG4gICAgQnJhaW50cmVlTFBNUGF5bWVudFN0YXJ0RGF0YSxcbiAgICBCcmFpbnRyZWVMUE1TdGFydFBheW1lbnRFcnJvcixcbiAgICBCcmFpbnRyZWVPcmRlclNhdmVkUmVzcG9uc2UsXG4gICAgQnJhaW50cmVlT3JkZXJTdGF0dXMsXG4gICAgQnJhaW50cmVlUmVkaXJlY3RFcnJvcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgTm9uSW5zdGFudExvY2FsUGF5bWVudE1ldGhvZHMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnN0cnVtZW50TWV0YSxcbiAgICBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIFBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbiAgICBSZXF1ZXN0T3B0aW9ucyxcbiAgICBUaW1lb3V0RXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdWknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyIGZyb20gJy4uL2JyYWludHJlZS1yZXF1ZXN0LXNlbmRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFdpdGhCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG59IGZyb20gJy4vYnJhaW50cmVlLWxvY2FsLW1ldGhvZHMtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5jb25zdCBQT0xMSU5HX0lOVEVSVkFMID0gMzAwMDtcbmNvbnN0IE1BWF9QT0xMSU5HX1RJTUUgPSAzMDAwMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVsb2NhbG1ldGhvZHM/OiBCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBicmFpbnRyZWVMb2NhbFBheW1lbnQ/OiBCcmFpbnRyZWVMb2NhbFBheW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2FkaW5nSW5kaWNhdG9yQ29udGFpbmVyPzogc3RyaW5nO1xuICAgIHByaXZhdGUgb3JkZXJJZD86IHN0cmluZztcbiAgICBwcml2YXRlIGdhdGV3YXlJZD86IHN0cmluZztcbiAgICBwcml2YXRlIGlzTFBNc1VwZGF0ZUV4cGVyaW1lbnRFbmFibGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBwb2xsaW5nVGltZXIgPSAwO1xuICAgIHByaXZhdGUgc3RvcFBvbGxpbmcgPSBub29wO1xuICAgIHByaXZhdGUgaXNQb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVSZXF1ZXN0U2VuZGVyOiBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyLFxuICAgICAgICBwcml2YXRlIGxvYWRpbmdJbmRpY2F0b3I6IExvYWRpbmdJbmRpY2F0b3IsXG4gICAgICAgIHByaXZhdGUgcG9sbGluZ0ludGVydmFsOiBudW1iZXIgPSBQT0xMSU5HX0lOVEVSVkFMLFxuICAgICAgICBwcml2YXRlIG1heFBvbGxpbmdJbnRlcnZhbFRpbWU6IG51bWJlciA9IE1BWF9QT0xMSU5HX1RJTUUsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBnYXRld2F5SWQsIG1ldGhvZElkLCBicmFpbnRyZWVsb2NhbG1ldGhvZHMgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy5nYXRld2F5SWQgPSBnYXRld2F5SWQ7XG5cbiAgICAgICAgaWYgKCFtZXRob2RJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLm1ldGhvZElkXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFnYXRld2F5SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5nYXRld2F5SWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWxvY2FsbWV0aG9kcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgIGBVbmFibGUgdG8gaW5pdGlhbGl6ZSBwYXltZW50IGJlY2F1c2UgXCJvcHRpb25zLmJyYWludHJlZWxvY2FsbWV0aG9kc1wiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC5gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlbG9jYWxtZXRob2RzID0gYnJhaW50cmVlbG9jYWxtZXRob2RzO1xuICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIgPSBicmFpbnRyZWVsb2NhbG1ldGhvZHMuY29udGFpbmVyLnNwbGl0KCcjJylbMV07XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKGdhdGV3YXlJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4oZ2F0ZXdheUlkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnLCBpbml0aWFsaXphdGlvbkRhdGEgfSA9IHBheW1lbnRNZXRob2Q7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcblxuICAgICAgICB0aGlzLmlzUG9sbGluZ0VuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUEFZUEFMLTUyNTguYnJhaW50cmVlX2xvY2FsX21ldGhvZHNfcG9sbGluZycsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pc0xQTXNVcGRhdGVFeHBlcmltZW50RW5hYmxlZCA9IGlzRXhwZXJpbWVudEVuYWJsZWQoXG4gICAgICAgICAgICBmZWF0dXJlcyxcbiAgICAgICAgICAgICdQQVlQQUwtNDg1My5hZGRfbmV3X3BheW1lbnRfZmxvd19mb3JfYnJhaW50cmVlX2xwbXMnLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4gfHwgIWluaXRpYWxpemF0aW9uRGF0YSB8fCAhY29uZmlnLm1lcmNoYW50SWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTm9uSW5zdGFudFBheW1lbnRNZXRob2QobWV0aG9kSWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVMb2NhbFBheW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5tZXJjaGFudElkLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiB1bmtub3duKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IG1ldGhvZElkIH0gPSBwYXltZW50O1xuXG4gICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuICAgICAgICBpZiAodGhpcy5pc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aE5vdEluc3RhbnRMUE0obWV0aG9kSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlV2l0aEluc3RhbnRMUE0obWV0aG9kSWQsIG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhOb3RJbnN0YW50TFBNKG1ldGhvZElkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2ljUGF5bWVudERhdGEgPSBhd2FpdCB0aGlzLmdldExQTXNCYXNpY1BheW1lbnREYXRhKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRPcmRlcigpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmJhc2ljUGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kSWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNCcmFpbnRyZWVSZWRpcmVjdEVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZGlyZWN0VXJsID0gZXJyb3IuYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZC5kYXRhLnJlZGlyZWN0X3VybDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0VXJsKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhJbnN0YW50TFBNKFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvcmRlcjogT21pdDxPcmRlclJlcXVlc3RCb2R5LCAncGF5bWVudCc+LFxuICAgICAgICBvcHRpb25zPzogUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIXRoaXMuYnJhaW50cmVlTG9jYWxQYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVMb2NhbFBheW1lbnQ/LnN0YXJ0UGF5bWVudChcbiAgICAgICAgICAgICAgICB0aGlzLmdldEluc3RhbnRMUE1Db25maWcobWV0aG9kSWQsIG9yZGVyLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldEluc3RhbnRMUE1DYWxsYmFjayhyZXNvbHZlLCByZWplY3QsIG1ldGhvZElkLCBvcmRlciwgb3B0aW9ucyksXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldExQTXNCYXNpY1BheW1lbnREYXRhKCk6IFByb21pc2U8UGF5bWVudEluc3RydW1lbnRNZXRhPiB7XG4gICAgICAgIGNvbnN0IHsgZGV2aWNlRGF0YSB9ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKTtcblxuICAgICAgICByZXR1cm4geyBkZXZpY2VTZXNzaW9uSWQ6IGRldmljZURhdGEgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluc3RhbnRMUE1Db25maWcoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgICAgIG9yZGVyOiBPbWl0PE9yZGVyUmVxdWVzdEJvZHksICdwYXltZW50Jz4sXG4gICAgICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgICApOiBCcmFpbnRyZWVMb2NhbFBheW1lbnRDb25maWcge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIGNvdW50cnlDb2RlIH0gPSBiaWxsaW5nO1xuICAgICAgICBjb25zdCB7IGN1cnJlbmN5LCBlbWFpbCwgbGluZUl0ZW1zIH0gPSBjYXJ0O1xuICAgICAgICBjb25zdCBpc1NoaXBwaW5nUmVxdWlyZWQgPSBsaW5lSXRlbXMucGh5c2ljYWxJdGVtcy5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBncmFuZFRvdGFsID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCkub3V0c3RhbmRpbmdCYWxhbmNlO1xuICAgICAgICBjb25zdCBjaGVja291dFVybCA9IHN0YXRlLmdldFN0b3JlQ29uZmlnT3JUaHJvdygpLmxpbmtzLmNoZWNrb3V0TGluaztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGF5bWVudFR5cGU6IG1ldGhvZElkLFxuICAgICAgICAgICAgYW1vdW50OiBncmFuZFRvdGFsLFxuICAgICAgICAgICAgZmFsbGJhY2s6IHtcbiAgICAgICAgICAgICAgICB1cmw6IGNoZWNrb3V0VXJsLFxuICAgICAgICAgICAgICAgIGJ1dHRvblRleHQ6ICdDb21wbGV0ZSBQYXltZW50JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjdXJyZW5jeUNvZGU6IGN1cnJlbmN5LmNvZGUsXG4gICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3NSZXF1aXJlZDogaXNTaGlwcGluZ1JlcXVpcmVkLFxuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICBnaXZlbk5hbWU6IGZpcnN0TmFtZSxcbiAgICAgICAgICAgIHN1cm5hbWU6IGxhc3ROYW1lLFxuICAgICAgICAgICAgYWRkcmVzczoge1xuICAgICAgICAgICAgICAgIGNvdW50cnlDb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uUGF5bWVudFN0YXJ0OiBhc3luYyAoZGF0YTogQnJhaW50cmVlTFBNUGF5bWVudFN0YXJ0RGF0YSwgc3RhcnQ6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmRlcklkID0gZGF0YS5wYXltZW50SWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzaWNQYXltZW50RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uYmFzaWNQYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtgJHttZXRob2RJZH1fYWNjb3VudGBdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJfaWQ6IGRhdGEucGF5bWVudElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3VibWl0IG9yZGVyIGFuZCBwYXltZW50IHNob3VsZCBiZSBwZXJmb3JtZWQgdG8gcGFzcyBvcmRlcl9pZCB0byB0aGUgYmFja2VuZFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnREYXRhLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlKGVycm9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IuYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZC5kYXRhLm9yZGVyX2lkX3NhdmVkX3N1Y2Nlc3NmdWxseVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YXJ0IG1ldGhvZCBjYWxsIGluaXRpYXRlcyB0aGUgcG9wdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIHRoaXMuaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluc3RhbnRMUE1DYWxsYmFjayhcbiAgICAgICAgcmVzb2x2ZTogKHZhbHVlOiB1bmtub3duKSA9PiB2b2lkLFxuICAgICAgICByZWplY3Q6IChyZWFzb24/OiB1bmtub3duKSA9PiB2b2lkLFxuICAgICAgICBtZXRob2RJZDogc3RyaW5nLFxuICAgICAgICBvcmRlcjogT21pdDxPcmRlclJlcXVlc3RCb2R5LCAncGF5bWVudCc+LFxuICAgICAgICBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGNhcnQgPSBzdGF0ZS5nZXRDYXJ0T3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBhc3luYyAoXG4gICAgICAgICAgICBzdGFydFBheW1lbnRFcnJvcjogQnJhaW50cmVlTFBNU3RhcnRQYXltZW50RXJyb3IgfCB1bmRlZmluZWQsXG4gICAgICAgICAgICBwYXlsb2FkRGF0YTogQnJhaW50cmVlTG9jYWxQYXltZW50c1BheWxvYWQsXG4gICAgICAgICkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXJ0UGF5bWVudEVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UGF5bWVudEVycm9yLmNvZGUgPT09ICdMT0NBTF9QQVlNRU5UX1dJTkRPV19DTE9TRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgUGF5bWVudE1ldGhvZEludmFsaWRFcnJvcigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYmFzaWNQYXltZW50RGF0YSA9IGF3YWl0IHRoaXMuZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnREYXRhID0ge1xuICAgICAgICAgICAgICAgIC4uLmJhc2ljUGF5bWVudERhdGEsXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICBbYCR7bWV0aG9kSWR9X2FjY291bnRgXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGNhcnQuZW1haWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogcGF5bG9hZERhdGEubm9uY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQgPyB7IG9yZGVyX2lkOiB0aGlzLm9yZGVySWQgfSA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNMUE1zVXBkYXRlRXhwZXJpbWVudEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0UGF5bWVudCh7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgICAgICBwYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBMb2FkaW5nIEluZGljYXRvciBtZXRob2RzXG4gICAgICpcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgdG9nZ2xlTG9hZGluZ0luZGljYXRvcihpc0xvYWRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzTG9hZGluZyAmJiB0aGlzLmxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0luZGljYXRvci5zaG93KHRoaXMubG9hZGluZ0luZGljYXRvckNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdJbmRpY2F0b3IuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bikge1xuICAgICAgICBjb25zdCB7IG9uRXJyb3IgfSA9IHRoaXMuYnJhaW50cmVlbG9jYWxtZXRob2RzIHx8IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmlzUG9sbGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgIGlmIChvbkVycm9yICYmIHR5cGVvZiBvbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogVXRpbHNcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBpc05vbkluc3RhbnRQYXltZW50TWV0aG9kKG1ldGhvZElkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZElkLnRvVXBwZXJDYXNlKCkgaW4gTm9uSW5zdGFudExvY2FsUGF5bWVudE1ldGhvZHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0JyYWludHJlZVJlZGlyZWN0RXJyb3IoZXJyb3I6IHVua25vd24pOiBlcnJvciBpcyBCcmFpbnRyZWVSZWRpcmVjdEVycm9yIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvciAhPT0gJ29iamVjdCcgfHwgZXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYm9keSB9OiBQYXJ0aWFsPEJyYWludHJlZUxvY2FsUGF5bWVudE1ldGhvZFJlZGlyZWN0QWN0aW9uPiA9IGVycm9yO1xuXG4gICAgICAgIGlmICghYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhYm9keS5hZGRpdGlvbmFsX2FjdGlvbl9yZXF1aXJlZD8uZGF0YS5yZWRpcmVjdF91cmw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0JyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZShcbiAgICAgICAgcmVzcG9uc2U6IHVua25vd24sXG4gICAgKTogcmVzcG9uc2UgaXMgQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSAhPT0gJ29iamVjdCcgfHwgcmVzcG9uc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgYm9keSB9OiBQYXJ0aWFsPEJyYWludHJlZU9yZGVyU2F2ZWRSZXNwb25zZT4gPSByZXNwb25zZTtcblxuICAgICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib2R5LmFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkPy5kYXRhLmhhc093blByb3BlcnR5KCdvcmRlcl9pZF9zYXZlZF9zdWNjZXNzZnVsbHknKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBvbGxpbmcgbWVjaGFuaXNtXG4gICAgICpcbiAgICAgKlxuICAgICAqICovXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbShcbiAgICAgICAgbWV0aG9kSWQ6IHN0cmluZyxcbiAgICAgICAgcmVzb2x2ZVByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIHJlamVjdFByb21pc2U6ICgpID0+IHZvaWQsXG4gICAgICAgIGdhdGV3YXlJZD86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3BQb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucG9sbGluZ1RpbWVyICs9IHRoaXMucG9sbGluZ0ludGVydmFsO1xuXG4gICAgICAgICAgICBjb25zdCBvcmRlclN0YXR1cyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlUmVxdWVzdFNlbmRlci5nZXRPcmRlclN0YXR1cyhnYXRld2F5SWQsIHtcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlTWV0YWRhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgaXNPcmRlclBlbmRpbmcgPSBvcmRlclN0YXR1cy5zdGF0dXMgPT09IEJyYWludHJlZU9yZGVyU3RhdHVzLlBlbmRpbmc7XG4gICAgICAgICAgICBjb25zdCBpc09yZGVyQXBwcm92ZWQgPSBvcmRlclN0YXR1cy5zdGF0dXMgPT09IEJyYWludHJlZU9yZGVyU3RhdHVzLkNvbXBsZXRlZDtcbiAgICAgICAgICAgIGNvbnN0IGlzUG9sbGluZ0Vycm9yID0gb3JkZXJTdGF0dXMuc3RhdHVzID09PSBCcmFpbnRyZWVPcmRlclN0YXR1cy5GYWlsZWQ7XG5cbiAgICAgICAgICAgIGlmIChpc09yZGVyQXBwcm92ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlUHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNQb2xsaW5nRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWlzT3JkZXJBcHByb3ZlZCAmJlxuICAgICAgICAgICAgICAgIGlzT3JkZXJQZW5kaW5nICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wb2xsaW5nVGltZXIgPCB0aGlzLm1heFBvbGxpbmdJbnRlcnZhbFRpbWVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluaXRpYWxpemVQb2xsaW5nTWVjaGFuaXNtKFxuICAgICAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdFByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXlJZCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlaW5pdGlhbGl6ZVN0cmF0ZWd5KHtcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBnYXRld2F5SWQsXG4gICAgICAgICAgICAgICAgYnJhaW50cmVlbG9jYWxtZXRob2RzOiB0aGlzLmJyYWludHJlZWxvY2FsbWV0aG9kcyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKG5ldyBUaW1lb3V0RXJyb3IoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3RQcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICAgICAgdGhpcy5wb2xsaW5nVGltZXIgPSAwO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXRQb2xsaW5nTWVjaGFuaXNtKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJlaW5pdGlhbGl6ZVN0cmF0ZWd5KFxuICAgICAgICBvcHRpb25zOiBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgJiBXaXRoQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlaW5pdGlhbGl6ZSgpO1xuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlUmVxdWVzdFNlbmRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9yZXF1ZXN0LXNlbmRlcic7XG5pbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIFBheW1lbnRTdHJhdGVneUZhY3RvcnksXG4gICAgdG9SZXNvbHZhYmxlTW9kdWxlLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3VpJztcblxuaW1wb3J0IEJyYWludHJlZVJlcXVlc3RTZW5kZXIgZnJvbSAnLi4vYnJhaW50cmVlLXJlcXVlc3Qtc2VuZGVyJztcblxuaW1wb3J0IEJyYWludHJlZUxvY2FsTWV0aG9kc1BheW1lbnRTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1sb2NhbC1tZXRob2RzLXBheW1lbnQtc3RyYXRlZ3knO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3k6IFBheW1lbnRTdHJhdGVneUZhY3Rvcnk8XG4gICAgQnJhaW50cmVlTG9jYWxNZXRob2RzUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNkayA9IG5ldyBCcmFpbnRyZWVTZGsoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICApO1xuICAgIGNvbnN0IHJlcXVlc3RTZW5kZXIgPSBjcmVhdGVSZXF1ZXN0U2VuZGVyKCk7XG4gICAgY29uc3QgYnJhaW50cmVlUmVxdWVzdFNlbmRlciA9IG5ldyBCcmFpbnRyZWVSZXF1ZXN0U2VuZGVyKHJlcXVlc3RTZW5kZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZVNkayxcbiAgICAgICAgYnJhaW50cmVlUmVxdWVzdFNlbmRlcixcbiAgICAgICAgbmV3IExvYWRpbmdJbmRpY2F0b3IoeyBzdHlsZXM6IHsgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snIH0gfSksXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGdhdGV3YXk6ICdicmFpbnRyZWVsb2NhbG1ldGhvZHMnIH0sXG5dKTtcbiIsImltcG9ydCB7XG4gICAgUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgUGF5UGFsQ29ubmVjdEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNCcmFpbnRyZWVBY2NlbGVyYXRlZENoZWNrb3V0Q3VzdG9tZXIoXG4gICAgY3VzdG9tZXI/OiBQYXltZW50UHJvdmlkZXJDdXN0b21lcixcbik6IGN1c3RvbWVyIGlzIFBheVBhbENvbm5lY3RDdXN0b21lciB7XG4gICAgaWYgKCFjdXN0b21lcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgJ2F1dGhlbnRpY2F0aW9uU3RhdGUnIGluIGN1c3RvbWVyIHx8ICdhZGRyZXNzZXMnIGluIGN1c3RvbWVyIHx8ICdpbnN0cnVtZW50cycgaW4gY3VzdG9tZXJcbiAgICApO1xufVxuIiwiaW1wb3J0IHtcbiAgICBCcmFpbnRyZWUzRFNWZXJpZnlDYXJkRXJyb3IsXG4gICAgQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZFBheWxvYWQsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVBZGRyZXNzLFxuICAgIEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZSxcbiAgICBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnQsXG4gICAgQnJhaW50cmVlRmFzdGxhbmVDYXJkQ29tcG9uZW50T3B0aW9ucyxcbiAgICBCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGEsXG4gICAgQnJhaW50cmVlU2RrLFxuICAgIGdldEZhc3RsYW5lU3R5bGVzLFxuICAgIGlzQnJhaW50cmVlQWNjZWxlcmF0ZWRDaGVja291dEN1c3RvbWVyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgQ2FyZEluc3RydW1lbnQsXG4gICAgSW52YWxpZEFyZ3VtZW50RXJyb3IsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudCxcbiAgICBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IsXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yLFxuICAgIFBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yLFxuICAgIFBheW1lbnRSZXF1ZXN0T3B0aW9ucyxcbiAgICBQYXltZW50U3RyYXRlZ3ksXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRJbml0aWFsaXplT3B0aW9ucyB9IGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLXBheW1lbnQtaW5pdGlhbGl6ZS1vcHRpb25zJztcbmltcG9ydCBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzIGZyb20gJy4vYnJhaW50cmVlLWZhc3RsYW5lLXV0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgaW1wbGVtZW50cyBQYXltZW50U3RyYXRlZ3kge1xuICAgIHByaXZhdGUgYnJhaW50cmVlQ2FyZENvbXBvbmVudD86IEJyYWludHJlZUZhc3RsYW5lQ2FyZENvbXBvbmVudDtcbiAgICBwcml2YXRlIGlzM0RTRW5hYmxlZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlRmFzdGxhbmVVdGlsczogQnJhaW50cmVlRmFzdGxhbmVVdGlscyxcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTZGs6IEJyYWludHJlZVNkayxcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIERlZmF1bHQgbWV0aG9kc1xuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUZhc3RsYW5lUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IG1ldGhvZElkLCBicmFpbnRyZWVmYXN0bGFuZSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMubWV0aG9kSWRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWZhc3RsYW5lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlZmFzdGxhbmVcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWJyYWludHJlZWZhc3RsYW5lLm9uSW5pdCB8fCB0eXBlb2YgYnJhaW50cmVlZmFzdGxhbmUub25Jbml0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBpbml0aWFsaXplIHBheW1lbnQgYmVjYXVzZSBcIm9wdGlvbnMuYnJhaW50cmVlZmFzdGxhbmUub25Jbml0XCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkIG9yIGl0IGlzIG5vdCBhIGZ1bmN0aW9uLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFicmFpbnRyZWVmYXN0bGFuZS5vbkNoYW5nZSB8fCB0eXBlb2YgYnJhaW50cmVlZmFzdGxhbmUub25DaGFuZ2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWVmYXN0bGFuZS5vbkNoYW5nZVwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZCBvciBpdCBpcyBub3QgYSBmdW5jdGlvbi4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93PEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YT4obWV0aG9kSWQpO1xuICAgICAgICBjb25zdCB7IGluaXRpYWxpemF0aW9uRGF0YSwgY2xpZW50VG9rZW4gfSA9IHBheW1lbnRNZXRob2QgfHwge307XG4gICAgICAgIGNvbnN0IHsgaXNGYXN0bGFuZVN0eWxpbmdFbmFibGVkIH0gPSBpbml0aWFsaXphdGlvbkRhdGEgfHwge307XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcbiAgICAgICAgY29uc3QgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUFJPSkVDVC03MDgwLmJyYWludHJlZV9mYXN0bGFuZV90aHJlZV9kcycsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgPSBwYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG5cbiAgICAgICAgaWYgKGNsaWVudFRva2VuICYmIGlzVGhyZWVEU0V4cGVyaW1lbnRFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU3R5bGVTZXR0aW5ncyA9IGlzRmFzdGxhbmVTdHlsaW5nRW5hYmxlZFxuICAgICAgICAgICAgPyBwYXltZW50TWV0aG9kLmluaXRpYWxpemF0aW9uRGF0YT8uZmFzdGxhbmVTdHlsZXNcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnN0IGZhc3RsYW5lU3R5bGVzID0gZ2V0RmFzdGxhbmVTdHlsZXMoXG4gICAgICAgICAgICBwYXlwYWxGYXN0bGFuZVN0eWxlU2V0dGluZ3MsXG4gICAgICAgICAgICBicmFpbnRyZWVmYXN0bGFuZS5zdHlsZXMsXG4gICAgICAgICk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVGYXN0bGFuZVV0aWxzLmluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3coXG4gICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgIGZhc3RsYW5lU3R5bGVzLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMucnVuUGF5UGFsQXV0aGVudGljYXRpb25GbG93T3JUaHJvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplQ2FyZENvbXBvbmVudCgpO1xuXG4gICAgICAgIHRoaXMub25FcnJvciA9IGJyYWludHJlZWZhc3RsYW5lLm9uRXJyb3I7XG5cbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUub25Jbml0KChjb250YWluZXIpID0+IHRoaXMucmVuZGVyQnJhaW50cmVlQ2FyZENvbXBvbmVudChjb250YWluZXIpKTtcbiAgICAgICAgYnJhaW50cmVlZmFzdGxhbmUub25DaGFuZ2UoKCkgPT4gdGhpcy5oYW5kbGVCcmFpbnRyZWVTdG9yZWRJbnN0cnVtZW50Q2hhbmdlKG1ldGhvZElkKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXhlY3V0ZShvcmRlclJlcXVlc3Q6IE9yZGVyUmVxdWVzdEJvZHksIG9wdGlvbnM/OiBQYXltZW50UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50LCAuLi5vcmRlciB9ID0gb3JkZXJSZXF1ZXN0O1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcihbJ3BheW1lbnQnXSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IHBheW1lbnRQYXlsb2FkID0gYXdhaXQgdGhpcy5wcmVwYXJlUGF5bWVudFBheWxvYWQocGF5bWVudC5tZXRob2RJZCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQocGF5bWVudFBheWxvYWQpO1xuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5yZW1vdmVTZXNzaW9uSWRGcm9tQ29va2llcygpO1xuICAgIH1cblxuICAgIGZpbmFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMuYnJhaW50cmVlQ2FyZENvbXBvbmVudCA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBCcmFpbnRyZWUgRmFzdGxhbmUgQ29tcG9uZW50IHJlbmRlcmluZyBtZXRob2RcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZUNhcmRDb21wb25lbnQoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IHsgcGhvbmUsIGZpcnN0TmFtZSwgbGFzdE5hbWUgfSA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBmdWxsTmFtZSA9IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX1gO1xuXG4gICAgICAgIGNvbnN0IGNhcmRDb21wb25lbnRPcHRpb25zOiBCcmFpbnRyZWVGYXN0bGFuZUNhcmRDb21wb25lbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgc3R5bGVzOiB7fSxcbiAgICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IGZ1bGxOYW1lLFxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uKHBob25lICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcGhvbmVOdW1iZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpbGw6IHBob25lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlwYWxQYXltZW50Q29tcG9uZW50ID1cbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5nZXRCcmFpbnRyZWVGYXN0bGFuZUNvbXBvbmVudE9yVGhyb3coKTtcblxuICAgICAgICB0aGlzLmJyYWludHJlZUNhcmRDb21wb25lbnQgPSBhd2FpdCBwYXlwYWxQYXltZW50Q29tcG9uZW50KGNhcmRDb21wb25lbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckJyYWludHJlZUNhcmRDb21wb25lbnQoY29udGFpbmVyPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGJyYWludHJlZUNhcmRDb21wb25lbnQgPSB0aGlzLmdldEJyYWludHJlZUNhcmRDb21wb25lbnRPclRocm93KCk7XG5cbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwiY29udGFpbmVyXCIgYXJndW1lbnQgaXMgbm90IHByb3ZpZGVkLicsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJhaW50cmVlQ2FyZENvbXBvbmVudC5yZW5kZXIoY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFBheW1lbnQgUGF5bG9hZCBwcmVwYXJhdGlvbiBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50UGF5bG9hZChtZXRob2RJZDogc3RyaW5nKTogUHJvbWlzZTxQYXltZW50PiB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gc3RhdGUuZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGZ1bGxOYW1lID0gYCR7YmlsbGluZ0FkZHJlc3MuZmlyc3ROYW1lfSAke2JpbGxpbmdBZGRyZXNzLmxhc3ROYW1lfWA7XG5cbiAgICAgICAgY29uc3QgcGF5cGFsSW5zdHJ1bWVudCA9IHRoaXMuZ2V0UGF5UGFsSW5zdHJ1bWVudHMoKVswXTtcblxuICAgICAgICBjb25zdCBkZXZpY2VTZXNzaW9uSWQgPSBhd2FpdCB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuZ2V0RGV2aWNlU2Vzc2lvbklkKCk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCkuY2hlY2tvdXRTZXR0aW5ncy5mZWF0dXJlcztcbiAgICAgICAgY29uc3QgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWQgPSBpc0V4cGVyaW1lbnRFbmFibGVkKFxuICAgICAgICAgICAgZmVhdHVyZXMsXG4gICAgICAgICAgICAnUFJPSkVDVC03MDgwLmJyYWludHJlZV9mYXN0bGFuZV90aHJlZV9kcycsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHBheXBhbEluc3RydW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRocmVlRFNUb2tlbiA9XG4gICAgICAgICAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgJiYgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLmdldDNEUyhwYXlwYWxJbnN0cnVtZW50LmJpZ3BheVRva2VuLCBwYXlwYWxJbnN0cnVtZW50Py5paW4gfHwgJycpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRldmljZVNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkUGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF5cGFsX2Zhc3RsYW5lX3Rva2VuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IHRocmVlRFNUb2tlbiB8fCBwYXlwYWxJbnN0cnVtZW50LmJpZ3BheVRva2VuLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZ2V0UGF5bWVudFRva2VuIH0gPSB0aGlzLmdldEJyYWludHJlZUNhcmRDb21wb25lbnRPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgcGF5bWVudFRva2VuID0gYXdhaXQgZ2V0UGF5bWVudFRva2VuKHtcbiAgICAgICAgICAgIG5hbWU6IHsgZnVsbE5hbWUgfSxcbiAgICAgICAgICAgIGJpbGxpbmdBZGRyZXNzOiB0aGlzLm1hcFRvUGF5UGFsQWRkcmVzcyhiaWxsaW5nQWRkcmVzcyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJpbkd1ZXN0ID0gcGF5bWVudFRva2VuLnBheW1lbnRTb3VyY2UuY2FyZD8uYmluRGV0YWlscz8uYmluIHx8ICcnO1xuICAgICAgICBjb25zdCB0aHJlZURTVG9rZW4gPVxuICAgICAgICAgICAgdGhpcy5pczNEU0VuYWJsZWQgJiYgaXNUaHJlZURTRXhwZXJpbWVudEVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMuZ2V0M0RTKHBheW1lbnRUb2tlbi5pZCwgYmluR3Vlc3QpXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgcGF5bWVudERhdGE6IHtcbiAgICAgICAgICAgICAgICBkZXZpY2VTZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgbm9uY2U6IHRocmVlRFNUb2tlbiB8fCBwYXltZW50VG9rZW4uaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDNEU1xuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZ2V0M0RTKG5vbmNlOiBzdHJpbmcsIGJpbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgdGhyZWVEU2VjdXJlID0gYXdhaXQgdGhpcy5icmFpbnRyZWVTZGsuZ2V0QnJhaW50cmVlVGhyZWVEUygpO1xuICAgICAgICBjb25zdCBvcmRlciA9IHN0YXRlLmdldE9yZGVyT3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHZvaWQgdGhyZWVEU2VjdXJlLnZlcmlmeUNhcmQoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IG9yZGVyPy5vcmRlckFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIGJpbixcbiAgICAgICAgICAgICAgICAgICAgb25Mb29rdXBDb21wbGV0ZTogKF9kYXRhLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJlZURTZWN1cmUub24oJ2N1c3RvbWVyLWNhbmNlbGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5vbkVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5RXJyb3I6IEJyYWludHJlZTNEU1ZlcmlmeUNhcmRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogQnJhaW50cmVlM0RTVmVyaWZ5Q2FyZFBheWxvYWQsXG4gICAgICAgICAgICAgICAgKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUVycm9yICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlFcnJvci5jb2RlID09PSAnVEhSRUVEU19WRVJJRllfQ0FSRF9DQU5DRUxFRF9CWV9NRVJDSEFOVCdcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub25FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHBheWxvYWQubm9uY2UpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIE1hcHBlciBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIG1hcFRvUGF5UGFsQWRkcmVzcyhhZGRyZXNzPzogQWRkcmVzcyk6IEJyYWludHJlZUZhc3RsYW5lQWRkcmVzcyB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzPy5hZGRyZXNzMSB8fCAnJyxcbiAgICAgICAgICAgIGxvY2FsaXR5OiBhZGRyZXNzPy5jaXR5IHx8ICcnLFxuICAgICAgICAgICAgcmVnaW9uOiBhZGRyZXNzPy5zdGF0ZU9yUHJvdmluY2VDb2RlIHx8IGFkZHJlc3M/LnN0YXRlT3JQcm92aW5jZSB8fCAnJyxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGFkZHJlc3M/LnBvc3RhbENvZGUgfHwgJycsXG4gICAgICAgICAgICBjb3VudHJ5Q29kZUFscGhhMjogYWRkcmVzcz8uY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBPdGhlciBtZXRob2RzXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIHNob3VsZFJ1bkF1dGhlbnRpY2F0aW9uRmxvdygpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgY2FydCA9IHN0YXRlLmdldENhcnRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbWVyID0gc3RhdGUuZ2V0Q3VzdG9tZXJPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICAgICAgICAgIHBheW1lbnRQcm92aWRlckN1c3RvbWVyLFxuICAgICAgICApXG4gICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICA6IHt9O1xuXG4gICAgICAgIGNvbnN0IHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID0gdGhpcy5icmFpbnRyZWVGYXN0bGFuZVV0aWxzLmdldFNlc3Npb25JZEZyb21Db29raWVzKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWN1c3RvbWVyLmlzR3Vlc3QgfHxcbiAgICAgICAgICAgIGJyYWludHJlZVBheW1lbnRQcm92aWRlckN1c3RvbWVyPy5hdXRoZW50aWNhdGlvblN0YXRlID09PVxuICAgICAgICAgICAgICAgIEJyYWludHJlZUZhc3RsYW5lQXV0aGVudGljYXRpb25TdGF0ZS5DQU5DRUxFRFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAhYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXI/LmF1dGhlbnRpY2F0aW9uU3RhdGUgJiZcbiAgICAgICAgICAgIHBheXBhbEZhc3RsYW5lU2Vzc2lvbklkID09PSBjYXJ0LmlkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCcmFpbnRyZWVDYXJkQ29tcG9uZW50T3JUaHJvdygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmJyYWludHJlZUNhcmRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kQ2xpZW50VW5hdmFpbGFibGVFcnJvcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYnJhaW50cmVlQ2FyZENvbXBvbmVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFBheVBhbEluc3RydW1lbnRzKCk6IENhcmRJbnN0cnVtZW50W10ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50UHJvdmlkZXJDdXN0b21lciA9IHN0YXRlLmdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBicmFpbnRyZWVQYXltZW50UHJvdmlkZXJDdXN0b21lciA9IGlzQnJhaW50cmVlQWNjZWxlcmF0ZWRDaGVja291dEN1c3RvbWVyKFxuICAgICAgICAgICAgcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIsXG4gICAgICAgIClcbiAgICAgICAgICAgID8gcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXJcbiAgICAgICAgICAgIDoge307XG5cbiAgICAgICAgcmV0dXJuIGJyYWludHJlZVBheW1lbnRQcm92aWRlckN1c3RvbWVyLmluc3RydW1lbnRzIHx8IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQnJhaW50cmVlIEZhc3RsYW5lIGluc3RydW1lbnQgY2hhbmdlXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUJyYWludHJlZVN0b3JlZEluc3RydW1lbnRDaGFuZ2UoXG4gICAgICAgIG1ldGhvZElkOiBzdHJpbmcsXG4gICAgKTogUHJvbWlzZTxDYXJkSW5zdHJ1bWVudCB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCBwYXlwYWxBeG9TZGsgPSB0aGlzLmJyYWludHJlZUZhc3RsYW5lVXRpbHMuZ2V0QnJhaW50cmVlRmFzdGxhbmVPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBzZWxlY3Rpb25DaGFuZ2VkLCBzZWxlY3RlZENhcmQgfSA9IGF3YWl0IHBheXBhbEF4b1Nkay5wcm9maWxlLnNob3dDYXJkU2VsZWN0b3IoKTtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHBheW1lbnRQcm92aWRlckN1c3RvbWVyID0gc3RhdGUuZ2V0UGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihcbiAgICAgICAgICAgICAgICBwYXltZW50UHJvdmlkZXJDdXN0b21lcixcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA/IHBheW1lbnRQcm92aWRlckN1c3RvbWVyXG4gICAgICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbnN0cnVtZW50cyA9IHRoaXMuYnJhaW50cmVlRmFzdGxhbmVVdGlscy5tYXBQYXlQYWxUb0JjSW5zdHJ1bWVudChcbiAgICAgICAgICAgICAgICBtZXRob2RJZCxcbiAgICAgICAgICAgICAgICBbc2VsZWN0ZWRDYXJkXSxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEluc3RydW1lbnRzICYmIHNlbGVjdGVkSW5zdHJ1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS51cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lcih7XG4gICAgICAgICAgICAgICAgICAgIC4uLmJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIsXG4gICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRzOiBbLi4uc2VsZWN0ZWRJbnN0cnVtZW50c10sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRJbnN0cnVtZW50c1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0U2NyaXB0TG9hZGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL3NjcmlwdC1sb2FkZXInO1xuXG5pbXBvcnQge1xuICAgIEJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtZmFzdGxhbmUtcGF5bWVudC1zdHJhdGVneSc7XG5pbXBvcnQgQnJhaW50cmVlRmFzdGxhbmVVdGlscyBmcm9tICcuL2JyYWludHJlZS1mYXN0bGFuZS11dGlscyc7XG5cbmNvbnN0IGNyZWF0ZUJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSA9IG5ldyBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UoXG4gICAgICAgIG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgICAgICBnZXRTY3JpcHRMb2FkZXIoKSxcbiAgICAgICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICAgICAgKSxcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlRmFzdGxhbmVVdGlscyA9IG5ldyBCcmFpbnRyZWVGYXN0bGFuZVV0aWxzKFxuICAgICAgICBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKTtcblxuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhicmFpbnRyZWVTY3JpcHRMb2FkZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBCcmFpbnRyZWVGYXN0bGFuZVBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlRmFzdGxhbmVVdGlscyxcbiAgICAgICAgYnJhaW50cmVlU2RrLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlRmFzdGxhbmVQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVlYWNjZWxlcmF0ZWRjaGVja291dCcgfSxcbl0pO1xuIiwiaW1wb3J0IHsgRm9ybVBvc3RlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9mb3JtLXBvc3Rlcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVEYXRhQ29sbGVjdG9yLFxuICAgIEJyYWludHJlZUluaXRpYWxpemF0aW9uRGF0YSxcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlVmlzYUNoZWNrb3V0LFxuICAgIFZpc2FDaGVja291dEFkZHJlc3MsXG4gICAgVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgIFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgICBMZWdhY3lBZGRyZXNzLFxuICAgIE1pc3NpbmdEYXRhRXJyb3IsXG4gICAgTWlzc2luZ0RhdGFFcnJvclR5cGUsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEluaXRpYWxpemVPcHRpb25zLFxuICAgIFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgUGF5bWVudE1ldGhvZCxcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFJlcXVlc3RPcHRpb25zLFxuICAgIFBheW1lbnRTdHJhdGVneSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMgfSBmcm9tICcuL2JyYWludHJlZS12aXNhLWNoZWNrb3V0LXBheW1lbnQtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneSBpbXBsZW1lbnRzIFBheW1lbnRTdHJhdGVneSB7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDxCcmFpbnRyZWVJbml0aWFsaXphdGlvbkRhdGE+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGF5bWVudEludGVncmF0aW9uU2VydmljZTogUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBmb3JtUG9zdGVyOiBGb3JtUG9zdGVyLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZVNkazogQnJhaW50cmVlU2RrLFxuICAgICkge31cblxuICAgIGFzeW5jIGluaXRpYWxpemUoXG4gICAgICAgIG9wdGlvbnM6IFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyAmIFdpdGhCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgYnJhaW50cmVldmlzYWNoZWNrb3V0OiB2aXNhQ2hlY2tvdXRPcHRpb25zLCBtZXRob2RJZCB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAoIXZpc2FDaGVja291dE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICAgICAgICAnVW5hYmxlIHRvIGluaXRpYWxpemUgcGF5bWVudCBiZWNhdXNlIFwib3B0aW9ucy5icmFpbnRyZWV2aXNhY2hlY2tvdXRcIiBhcmd1bWVudCBpcyBub3QgcHJvdmlkZWQuJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZFBheW1lbnRNZXRob2QobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgdGhpcy5wYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQpO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrb3V0ID0gc3RhdGUuZ2V0Q2hlY2tvdXRPclRocm93KCk7XG4gICAgICAgIGNvbnN0IHN0b3JlQ29uZmlnID0gc3RhdGUuZ2V0U3RvcmVDb25maWdPclRocm93KCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSB0aGlzLnBheW1lbnRNZXRob2QgfHwge307XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBvbkVycm9yID0gbm9vcCwgb25QYXltZW50U2VsZWN0ID0gbm9vcCB9ID0gdmlzYUNoZWNrb3V0T3B0aW9ucztcblxuICAgICAgICB0aGlzLmJyYWludHJlZVNkay5pbml0aWFsaXplKGNsaWVudFRva2VuKTtcblxuICAgICAgICBjb25zdCBicmFpbnRyZWVWaXNhQ2hlY2tvdXQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRCcmFpbnRyZWVWaXNhQ2hlY2tvdXQoKTtcblxuICAgICAgICBjb25zdCB2aXNhQ2hlY2tvdXRTZGsgPSBhd2FpdCB0aGlzLmJyYWludHJlZVNkay5nZXRWaXNhQ2hlY2tvdXRTZGsoY29uZmlnPy50ZXN0TW9kZSk7XG5cbiAgICAgICAgY29uc3QgaW5pdE9wdGlvbnMgPSBicmFpbnRyZWVWaXNhQ2hlY2tvdXQuY3JlYXRlSW5pdE9wdGlvbnMoe1xuICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICBsb2NhbGU6IHN0b3JlQ29uZmlnLnN0b3JlUHJvZmlsZS5zdG9yZUxhbmd1YWdlLFxuICAgICAgICAgICAgICAgIHNoaXBwaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RTaGlwcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXltZW50UmVxdWVzdDoge1xuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZTogc3RvcmVDb25maWcuY3VycmVuY3kuY29kZSxcbiAgICAgICAgICAgICAgICBzdWJ0b3RhbDogU3RyaW5nKGNoZWNrb3V0LnN1YnRvdGFsKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IHZpc2FDaGVja291dFNkay5pbml0KGluaXRPcHRpb25zKTtcblxuICAgICAgICB2aXNhQ2hlY2tvdXRTZGsub24oXG4gICAgICAgICAgICAncGF5bWVudC5zdWNjZXNzJyxcbiAgICAgICAgICAgIChwYXltZW50U3VjY2Vzc1BheWxvYWQ6IFZpc2FDaGVja291dFBheW1lbnRTdWNjZXNzUGF5bG9hZCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplUGF5bWVudChicmFpbnRyZWVWaXNhQ2hlY2tvdXQsIHBheW1lbnRTdWNjZXNzUGF5bG9hZClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UubG9hZENoZWNrb3V0KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IG9uUGF5bWVudFNlbGVjdCgpKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBvbkVycm9yKGVycm9yKSksXG4gICAgICAgICk7XG4gICAgICAgIHZpc2FDaGVja291dFNkay5vbigncGF5bWVudC5lcnJvcicsIChfLCBlcnJvcikgPT4gb25FcnJvcihlcnJvcikpO1xuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUocGF5bG9hZDogT3JkZXJSZXF1ZXN0Qm9keSwgb3B0aW9ucz86IFBheW1lbnRSZXF1ZXN0T3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgIGlmICghcGF5bWVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gc3VibWl0IHBheW1lbnQgYmVjYXVzZSBcInBheWxvYWQucGF5bWVudFwiIGFyZ3VtZW50IGlzIG5vdCBwcm92aWRlZC4nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wYXltZW50TWV0aG9kPy5pbml0aWFsaXphdGlvbkRhdGE/Lm5vbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ0RhdGFFcnJvcihNaXNzaW5nRGF0YUVycm9yVHlwZS5NaXNzaW5nUGF5bWVudE1ldGhvZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnBheW1lbnRNZXRob2QuaW5pdGlhbGl6YXRpb25EYXRhO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2Uuc3VibWl0T3JkZXIob3JkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdFBheW1lbnQoe1xuICAgICAgICAgICAgICAgIC4uLnBheW1lbnQsXG4gICAgICAgICAgICAgICAgcGF5bWVudERhdGE6IHsgbm9uY2UgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5hbGl6ZSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvcigpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYnJhaW50cmVlU2RrLmRlaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdG9rZW5pemVQYXltZW50KFxuICAgICAgICBicmFpbnRyZWVWaXNhQ2hlY2tvdXQ6IEJyYWludHJlZVZpc2FDaGVja291dCxcbiAgICAgICAgcGF5bWVudDogVmlzYUNoZWNrb3V0UGF5bWVudFN1Y2Nlc3NQYXlsb2FkLFxuICAgICkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgYnJhaW50cmVlVmlzYUNoZWNrb3V0LnRva2VuaXplKHBheW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVTZGsuZ2V0RGF0YUNvbGxlY3Rvck9yVGhyb3coKSxcbiAgICAgICAgXSkudGhlbigoW3BheWxvYWQsIGRldmljZURhdGFdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBzaGlwcGluZyA9IHN0YXRlLmdldFNoaXBwaW5nQWRkcmVzcygpO1xuICAgICAgICAgICAgY29uc3QgYmlsbGluZyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICBzaGlwcGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhzaGlwcGluZyksXG4gICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MgPSB0aGlzLm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyhiaWxsaW5nKSxcbiAgICAgICAgICAgIH0gPSBwYXlsb2FkO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0Rm9ybShcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkZXZpY2VEYXRhLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBUb1Zpc2FDaGVja291dEFkZHJlc3MoYWRkcmVzcz86IEFkZHJlc3MpOiBWaXNhQ2hlY2tvdXRBZGRyZXNzIHtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3ROYW1lOiBhZGRyZXNzLmZpcnN0TmFtZSxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVOdW1iZXI6IGFkZHJlc3MucGhvbmUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MxLFxuICAgICAgICAgICAgZXh0ZW5kZWRBZGRyZXNzOiBhZGRyZXNzLmFkZHJlc3MyLFxuICAgICAgICAgICAgbG9jYWxpdHk6IGFkZHJlc3MuY2l0eSxcbiAgICAgICAgICAgIHJlZ2lvbjogYWRkcmVzcy5zdGF0ZU9yUHJvdmluY2VDb2RlLFxuICAgICAgICAgICAgY291bnRyeUNvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBhZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwb3N0Rm9ybShcbiAgICAgICAgcGF5bWVudERhdGE6IFZpc2FDaGVja291dFRva2VuaXplZFBheWxvYWQsXG4gICAgICAgIGRhdGFDb2xsZWN0b3I6IEJyYWludHJlZURhdGFDb2xsZWN0b3IsXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHsgdXNlckRhdGEsIGJpbGxpbmdBZGRyZXNzLCBzaGlwcGluZ0FkZHJlc3MsIGRldGFpbHM6IGNhcmRJbmZvcm1hdGlvbiB9ID0gcGF5bWVudERhdGE7XG4gICAgICAgIGNvbnN0IHsgdXNlckVtYWlsIH0gPSB1c2VyRGF0YTtcbiAgICAgICAgY29uc3QgeyBkZXZpY2VEYXRhIH0gPSBkYXRhQ29sbGVjdG9yO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1Qb3N0ZXIucG9zdEZvcm0oJy9jaGVja291dC5waHAnLCB7XG4gICAgICAgICAgICBwYXltZW50X3R5cGU6IHBheW1lbnREYXRhLnR5cGUsXG4gICAgICAgICAgICBub25jZTogcGF5bWVudERhdGEubm9uY2UsXG4gICAgICAgICAgICBwcm92aWRlcjogJ2JyYWludHJlZXZpc2FjaGVja291dCcsXG4gICAgICAgICAgICBhY3Rpb246ICdzZXRfZXh0ZXJuYWxfY2hlY2tvdXQnLFxuICAgICAgICAgICAgZGV2aWNlX2RhdGE6IGRldmljZURhdGEsXG4gICAgICAgICAgICBjYXJkX2luZm9ybWF0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogY2FyZEluZm9ybWF0aW9uLmNhcmRUeXBlLFxuICAgICAgICAgICAgICAgIG51bWJlcjogY2FyZEluZm9ybWF0aW9uLmxhc3RUd28sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGJpbGxpbmdfYWRkcmVzczogSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRBZGRyZXNzKHVzZXJFbWFpbCwgYmlsbGluZ0FkZHJlc3MpKSxcbiAgICAgICAgICAgIHNoaXBwaW5nX2FkZHJlc3M6IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0QWRkcmVzcyh1c2VyRW1haWwsIHNoaXBwaW5nQWRkcmVzcykpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEFkZHJlc3MoZW1haWw6IHN0cmluZywgYWRkcmVzczogVmlzYUNoZWNrb3V0QWRkcmVzcyA9IHt9KTogUGFydGlhbDxMZWdhY3lBZGRyZXNzPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgIGZpcnN0X25hbWU6IGFkZHJlc3MuZmlyc3ROYW1lLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiBhZGRyZXNzLmxhc3ROYW1lLFxuICAgICAgICAgICAgcGhvbmVfbnVtYmVyOiBhZGRyZXNzLnBob25lTnVtYmVyLFxuICAgICAgICAgICAgYWRkcmVzc19saW5lXzE6IGFkZHJlc3Muc3RyZWV0QWRkcmVzcyxcbiAgICAgICAgICAgIGFkZHJlc3NfbGluZV8yOiBhZGRyZXNzLmV4dGVuZGVkQWRkcmVzcyxcbiAgICAgICAgICAgIGNpdHk6IGFkZHJlc3MubG9jYWxpdHksXG4gICAgICAgICAgICBzdGF0ZTogYWRkcmVzcy5yZWdpb24sXG4gICAgICAgICAgICBjb3VudHJ5X2NvZGU6IGFkZHJlc3MuY291bnRyeUNvZGUsXG4gICAgICAgICAgICBwb3N0YWxfY29kZTogYWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IHVua25vd24pOiBuZXZlciB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgPT09ICdCcmFpbnRyZWVFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JtUG9zdGVyIH0gZnJvbSAnQGJpZ2NvbW1lcmNlL2Zvcm0tcG9zdGVyJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTZGssXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9icmFpbnRyZWUtdXRpbHMnO1xuaW1wb3J0IHtcbiAgICBQYXltZW50U3RyYXRlZ3lGYWN0b3J5LFxuICAgIHRvUmVzb2x2YWJsZU1vZHVsZSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCBCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50U3RyYXRlZ3kgZnJvbSAnLi9icmFpbnRyZWUtdmlzYS1jaGVja291dC1wYXltZW50LXN0cmF0ZWd5JztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmlzYUNoZWNrb3V0UGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneVxuPiA9IChwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKSA9PiB7XG4gICAgY29uc3QgaG9zdFdpbmRvdzogVmlzYUNoZWNrb3V0SG9zdFdpbmRvdyAmIEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG4gICAgY29uc3QgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIgPSBuZXcgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIocGF5bWVudEludGVncmF0aW9uU2VydmljZSk7XG4gICAgY29uc3QgYnJhaW50cmVlU2RrID0gbmV3IEJyYWludHJlZVNkayhcbiAgICAgICAgbmV3IEJyYWludHJlZVNjcmlwdExvYWRlcihnZXRTY3JpcHRMb2FkZXIoKSwgaG9zdFdpbmRvdywgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIpLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEJyYWludHJlZVZpc2FDaGVja291dFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgY3JlYXRlRm9ybVBvc3RlcigpLFxuICAgICAgICBicmFpbnRyZWVTZGssXG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZU1vZHVsZShjcmVhdGVCcmFpbnRyZWVWaXNhQ2hlY2tvdXRQYXltZW50U3RyYXRlZ3ksIFtcbiAgICB7IGlkOiAnYnJhaW50cmVldmlzYWNoZWNrb3V0JyB9LFxuXSk7XG4iLCJpbXBvcnQge1xuICAgIEJyYWludHJlZUVycm9yLFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVUb2tlbml6ZVBheWxvYWQsXG4gICAgQnJhaW50cmVlVmVubW9DaGVja291dCxcbiAgICBpc0JyYWludHJlZUVycm9yLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEZvcm1hdHRlZFBheWxvYWQsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBPcmRlckZpbmFsaXphdGlvbk5vdFJlcXVpcmVkRXJyb3IsXG4gICAgT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgT3JkZXJSZXF1ZXN0Qm9keSxcbiAgICBQYXltZW50LFxuICAgIFBheW1lbnRBcmd1bWVudEludmFsaWRFcnJvcixcbiAgICBQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RDYW5jZWxsZWRFcnJvcixcbiAgICBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IsXG4gICAgUGF5bWVudFN0cmF0ZWd5LFxuICAgIFBheXBhbEluc3RydW1lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IHsgaXNFeHBlcmltZW50RW5hYmxlZCB9IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvdXRpbGl0eSc7XG5pbXBvcnQgQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3lJbml0aWFsaXplT3B0aW9ucywge1xuICAgIFdpdGhCcmFpbnRyZWVWZW5tb0luaXRpYWxpemVPcHRpb25zLFxufSBmcm9tICcuL2JyYWludHJlZS12ZW5tby1wYXltZW50LXN0cmF0ZWd5LWluaXRpYWxpemUtb3B0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGJyYWludHJlZVZlbm1vQ2hlY2tvdXQ/OiBCcmFpbnRyZWVWZW5tb0NoZWNrb3V0O1xuICAgIHByaXZhdGUgdmVubW9PcHRpb25zPzogQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3lJbml0aWFsaXplT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2U6IFBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlOiBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZVZlbm1vSW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLmxvYWRQYXltZW50TWV0aG9kKG1ldGhvZElkKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICB0aGlzLnZlbm1vT3B0aW9ucyA9IG9wdGlvbnMuYnJhaW50cmVldmVubW87XG5cbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVCcmFpbnRyZWVWZW5tbyhwYXltZW50TWV0aG9kKTtcbiAgICB9XG5cbiAgICBhc3luYyBleGVjdXRlKG9yZGVyUmVxdWVzdDogT3JkZXJSZXF1ZXN0Qm9keSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB7IHBheW1lbnQsIC4uLm9yZGVyIH0gPSBvcmRlclJlcXVlc3Q7XG5cbiAgICAgICAgaWYgKCFwYXltZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yKFsncGF5bWVudCddKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHBheW1lbnREYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudGVhcmRvd24oKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogdW5rbm93bik6IG5ldmVyIHtcbiAgICAgICAgaWYgKCFpc0JyYWludHJlZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ1BBWVBBTF9QT1BVUF9DTE9TRUQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudE1ldGhvZENhbmNlbGxlZEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVCcmFpbnRyZWVWZW5tbyhwYXltZW50TWV0aG9kOiBQYXltZW50TWV0aG9kKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50VG9rZW4gfSA9IHBheW1lbnRNZXRob2Q7XG5cbiAgICAgICAgaWYgKCFjbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE1pc3NpbmdEYXRhRXJyb3IoTWlzc2luZ0RhdGFFcnJvclR5cGUuTWlzc2luZ1BheW1lbnRNZXRob2QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBzdGF0ZS5nZXRTdG9yZUNvbmZpZ09yVGhyb3coKS5jaGVja291dFNldHRpbmdzLmZlYXR1cmVzO1xuICAgICAgICBjb25zdCBpc0JyYWludHJlZVZlbm1vV2ViRmFsbGJhY2tTdXBwb3J0ID0gaXNFeHBlcmltZW50RW5hYmxlZChcbiAgICAgICAgICAgIGZlYXR1cmVzLFxuICAgICAgICAgICAgJ1BBWVBBTC01NDA2LmJyYWludHJlZV92ZW5tb193ZWJfZmFsbGJhY2tfc3VwcG9ydCcsXG4gICAgICAgICk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5icmFpbnRyZWVWZW5tb0NoZWNrb3V0ID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0VmVubW9DaGVja291dCh7XG4gICAgICAgICAgICAgICAgLi4uKHRoaXMudmVubW9PcHRpb25zPy5hbGxvd0Rlc2t0b3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IHsgYWxsb3dEZXNrdG9wOiB0aGlzLnZlbm1vT3B0aW9ucy5hbGxvd0Rlc2t0b3AgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgICAgICAuLi4oaXNCcmFpbnRyZWVWZW5tb1dlYkZhbGxiYWNrU3VwcG9ydFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlV2ViRmFsbEJhY2s6IGlzQnJhaW50cmVlVmVubW9XZWJGYWxsYmFja1N1cHBvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YShwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSk6IFByb21pc2U8UGF5bWVudD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhwYXltZW50Lm1ldGhvZElkKTtcblxuICAgICAgICBpZiAobm9uY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnBheW1lbnQsIHBheW1lbnREYXRhOiB0aGlzLmZvcm1hdHRlZFBheWxvYWQobm9uY2UpIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9rZW5pemVSZXN1bHQgPSBhd2FpdCB0aGlzLmJyYWludHJlZVZlbm1vVG9rZW5pemUoKTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U2Vzc2lvbklkKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBheW1lbnQsXG4gICAgICAgICAgICBwYXltZW50RGF0YTogdGhpcy5mb3JtYXR0ZWRQYXlsb2FkKFxuICAgICAgICAgICAgICAgIHRva2VuaXplUmVzdWx0Lm5vbmNlLFxuICAgICAgICAgICAgICAgIHRva2VuaXplUmVzdWx0LmRldGFpbHMuZW1haWwsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdHRlZFBheWxvYWQoXG4gICAgICAgIHRva2VuOiBzdHJpbmcsXG4gICAgICAgIGVtYWlsPzogc3RyaW5nLFxuICAgICAgICBzZXNzaW9uSWQ/OiBzdHJpbmcsXG4gICAgKTogRm9ybWF0dGVkUGF5bG9hZDxQYXlwYWxJbnN0cnVtZW50PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRQYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgdmF1bHRfcGF5bWVudF9pbnN0cnVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNldF9hc19kZWZhdWx0X3N0b3JlZF9pbnN0cnVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIGRldmljZV9pbmZvOiBzZXNzaW9uSWQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBwYXlwYWxfYWNjb3VudDoge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBicmFpbnRyZWVWZW5tb1Rva2VuaXplKCk6IFByb21pc2U8QnJhaW50cmVlVG9rZW5pemVQYXlsb2FkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZVZlbm1vQ2hlY2tvdXQ/LnRva2VuaXplKFxuICAgICAgICAgICAgICAgIChlcnJvcjogQnJhaW50cmVlRXJyb3IgfCB1bmRlZmluZWQsIHBheWxvYWQ6IEJyYWludHJlZVRva2VuaXplUGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDaGVja291dEJ1dHRvblN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuaW1wb3J0IEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5IGZyb20gJy4vYnJhaW50cmVlLXZlbm1vLXBheW1lbnQtc3RyYXRlZ3knO1xuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVIb3N0V2luZG93LFxuICAgIEJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICBCcmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7IGdldFNjcmlwdExvYWRlciB9IGZyb20gJ0BiaWdjb21tZXJjZS9zY3JpcHQtbG9hZGVyJztcblxuY29uc3QgY3JlYXRlQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3k6IENoZWNrb3V0QnV0dG9uU3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5XG4+ID0gKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpID0+IHtcbiAgICBjb25zdCBicmFpbnRyZWVIb3N0V2luZG93OiBCcmFpbnRyZWVIb3N0V2luZG93ID0gd2luZG93O1xuICAgIGNvbnN0IHNjcmlwdExvYWRlciA9IGdldFNjcmlwdExvYWRlcigpO1xuICAgIGNvbnN0IGJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyID0gbmV3IEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyKHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UpO1xuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIHNjcmlwdExvYWRlcixcbiAgICAgICAgYnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKTtcbiAgICBjb25zdCBicmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UgPSBuZXcgQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlKFxuICAgICAgICBicmFpbnRyZWVTY3JpcHRMb2FkZXIsXG4gICAgICAgIGJyYWludHJlZUhvc3RXaW5kb3csXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3koXG4gICAgICAgIHBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgICAgIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZSxcbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9SZXNvbHZhYmxlTW9kdWxlKGNyZWF0ZUJyYWludHJlZVZlbm1vUGF5bWVudFN0cmF0ZWd5LCBbeyBpZDogJ2JyYWludHJlZXZlbm1vJyB9XSk7XG4iLCJpbXBvcnQgeyBzb21lIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlVGhyZWVEU2VjdXJlT3B0aW9ucyxcbiAgICBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcixcbiAgICBpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvYnJhaW50cmVlLXV0aWxzJztcbmltcG9ydCB7XG4gICAgQWRkcmVzcyxcbiAgICBpc0hvc3RlZEluc3RydW1lbnRMaWtlLFxuICAgIGlzUmVxdWVzdEVycm9yLFxuICAgIGlzVmF1bHRlZEluc3RydW1lbnQsXG4gICAgTWlzc2luZ0RhdGFFcnJvcixcbiAgICBNaXNzaW5nRGF0YUVycm9yVHlwZSxcbiAgICBOb25jZUluc3RydW1lbnQsXG4gICAgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yLFxuICAgIE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgIE9yZGVyUmVxdWVzdEJvZHksXG4gICAgUGF5bWVudEFyZ3VtZW50SW52YWxpZEVycm9yLFxuICAgIFBheW1lbnRJbml0aWFsaXplT3B0aW9ucyxcbiAgICBQYXltZW50SW5zdHJ1bWVudCxcbiAgICBQYXltZW50SW5zdHJ1bWVudE1ldGEsXG4gICAgUGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICBQYXltZW50TWV0aG9kLFxuICAgIFBheW1lbnRNZXRob2RGYWlsZWRFcnJvcixcbiAgICBQYXltZW50U3RyYXRlZ3ksXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlSG9zdGVkRm9ybSBmcm9tICcuLi9icmFpbnRyZWUtaG9zdGVkLWZvcm0vYnJhaW50cmVlLWhvc3RlZC1mb3JtJztcbmltcG9ydCBpc0JyYWludHJlZUVycm9yIGZyb20gJy4uL2lzLWJyYWludHJlZS1lcnJvcic7XG5cbmltcG9ydCB7IFdpdGhCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudEluaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi9icmFpbnRyZWUtY3JlZGl0LWNhcmQtcGF5bWVudC1pbml0aWFsaXplLW9wdGlvbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudFN0cmF0ZWd5IGltcGxlbWVudHMgUGF5bWVudFN0cmF0ZWd5IHtcbiAgICBwcml2YXRlIGlzM2RzRW5hYmxlZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc0hvc3RlZEZvcm1Jbml0aWFsaXplZD86IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBkZXZpY2VTZXNzaW9uSWQ/OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZDtcbiAgICBwcml2YXRlIHRocmVlRFNlY3VyZT86IEJyYWludHJlZVRocmVlRFNlY3VyZU9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlOiBQYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUludGVncmF0aW9uU2VydmljZTogQnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGJyYWludHJlZUhvc3RlZEZvcm06IEJyYWludHJlZUhvc3RlZEZvcm0sXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogUGF5bWVudEluaXRpYWxpemVPcHRpb25zICYgV2l0aEJyYWludHJlZUNyZWRpdENhcmRQYXltZW50SW5pdGlhbGl6ZU9wdGlvbnMsXG4gICAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kSWQsIGdhdGV3YXlJZCwgYnJhaW50cmVlIH0gPSBvcHRpb25zO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5sb2FkUGF5bWVudE1ldGhvZChtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcblxuICAgICAgICB0aGlzLnBheW1lbnRNZXRob2QgPSBzdGF0ZS5nZXRQYXltZW50TWV0aG9kT3JUaHJvdyhtZXRob2RJZCk7XG5cbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiB9ID0gdGhpcy5wYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGhyZWVEU2VjdXJlID0gYnJhaW50cmVlPy50aHJlZURTZWN1cmU7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4sIHRoaXMudGhyZWVEU2VjdXJlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNIb3N0ZWRQYXltZW50Rm9ybUVuYWJsZWQobWV0aG9kSWQsIGdhdGV3YXlJZCkgJiYgYnJhaW50cmVlPy5mb3JtKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5icmFpbnRyZWVIb3N0ZWRGb3JtLmluaXRpYWxpemUoXG4gICAgICAgICAgICAgICAgICAgIGJyYWludHJlZS5mb3JtLFxuICAgICAgICAgICAgICAgICAgICBicmFpbnRyZWUudW5zdXBwb3J0ZWRDYXJkQnJhbmRzLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnRUb2tlbixcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5pc0hvc3RlZEZvcm1Jbml0aWFsaXplZCA9IHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS5pc0luaXRpYWxpemVkKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaXMzZHNFbmFibGVkID0gdGhpcy5wYXltZW50TWV0aG9kLmNvbmZpZy5pczNkc0VuYWJsZWQ7XG4gICAgICAgICAgICB0aGlzLmRldmljZVNlc3Npb25JZCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmdldFNlc3Npb25JZCgpO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZSgpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplQnJhaW50cmVlRmFzdGxhbmVPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWN1dGUob3JkZXJSZXF1ZXN0OiBPcmRlclJlcXVlc3RCb2R5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudCwgLi4ub3JkZXIgfSA9IG9yZGVyUmVxdWVzdDtcblxuICAgICAgICBpZiAoIXBheW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydwYXltZW50J10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNIb3N0ZWRGb3JtSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS52YWxpZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5wYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlLnN1Ym1pdE9yZGVyKG9yZGVyKTtcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IHN0YXRlLmdldEJpbGxpbmdBZGRyZXNzT3JUaHJvdygpO1xuICAgICAgICBjb25zdCBvcmRlckFtb3VudCA9IHN0YXRlLmdldE9yZGVyT3JUaHJvdygpLm9yZGVyQW1vdW50O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXltZW50RGF0YSA9IHRoaXMuaXNIb3N0ZWRGb3JtSW5pdGlhbGl6ZWRcbiAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMucHJlcGFyZUhvc3RlZFBheW1lbnREYXRhKHBheW1lbnQsIGJpbGxpbmdBZGRyZXNzLCBvcmRlckFtb3VudClcbiAgICAgICAgICAgICAgICA6IGF3YWl0IHRoaXMucHJlcGFyZVBheW1lbnREYXRhKHBheW1lbnQsIGJpbGxpbmdBZGRyZXNzLCBvcmRlckFtb3VudCk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50LFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzQWRkaXRpb25hbEFjdGlvbihlcnJvciwgcGF5bWVudCwgb3JkZXJBbW91bnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmluYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgT3JkZXJGaW5hbGl6YXRpb25Ob3RSZXF1aXJlZEVycm9yKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5pc0hvc3RlZEZvcm1Jbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRlYXJkb3duKCksXG4gICAgICAgICAgICB0aGlzLmJyYWludHJlZUhvc3RlZEZvcm0uZGVpbml0aWFsaXplKCksXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiB1bmtub3duKTogbmV2ZXIge1xuICAgICAgICBpZiAoaXNCcmFpbnRyZWVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50TWV0aG9kRmFpbGVkRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByZXBhcmVQYXltZW50RGF0YShcbiAgICAgICAgcGF5bWVudDogT3JkZXJQYXltZW50UmVxdWVzdEJvZHksXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzOiBBZGRyZXNzLFxuICAgICAgICBvcmRlckFtb3VudDogbnVtYmVyLFxuICAgICk6IFByb21pc2U8UGF5bWVudEluc3RydW1lbnQgJiBQYXltZW50SW5zdHJ1bWVudE1ldGE+IHtcbiAgICAgICAgY29uc3QgeyBwYXltZW50RGF0YSB9ID0gcGF5bWVudDtcbiAgICAgICAgY29uc3QgY29tbW9uUGF5bWVudERhdGEgPSB7IGRldmljZVNlc3Npb25JZDogdGhpcy5kZXZpY2VTZXNzaW9uSWQgfTtcblxuICAgICAgICBpZiAodGhpcy5pc1N1Ym1pdHRpbmdXaXRoU3RvcmVkQ2FyZChwYXltZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50RGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50ID0gZmFsc2UsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPSBmYWxzZSB9ID1cbiAgICAgICAgICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEgOiB7fTtcblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudClcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UudmVyaWZ5Q2FyZChcbiAgICAgICAgICAgICAgICAgIHBheW1lbnQsXG4gICAgICAgICAgICAgICAgICBiaWxsaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIG9yZGVyQW1vdW50LFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLnRva2VuaXplQ2FyZChwYXltZW50LCBiaWxsaW5nQWRkcmVzcyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbW1vblBheW1lbnREYXRhLFxuICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICBzaG91bGRTYXZlSW5zdHJ1bWVudCxcbiAgICAgICAgICAgIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcmVwYXJlSG9zdGVkUGF5bWVudERhdGEoXG4gICAgICAgIHBheW1lbnQ6IE9yZGVyUGF5bWVudFJlcXVlc3RCb2R5LFxuICAgICAgICBiaWxsaW5nQWRkcmVzczogQWRkcmVzcyxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPFBheW1lbnRJbnN0cnVtZW50ICYgUGF5bWVudEluc3RydW1lbnRNZXRhPiB7XG4gICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG4gICAgICAgIGNvbnN0IGNvbW1vblBheW1lbnREYXRhID0geyBkZXZpY2VTZXNzaW9uSWQ6IHRoaXMuZGV2aWNlU2Vzc2lvbklkIH07XG5cbiAgICAgICAgaWYgKHRoaXMuaXNTdWJtaXR0aW5nV2l0aFN0b3JlZENhcmQocGF5bWVudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSG9zdGVkRm9ybS50b2tlbml6ZUZvclN0b3JlZENhcmRWZXJpZmljYXRpb24oKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50RGF0YSxcbiAgICAgICAgICAgICAgICBub25jZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHNob3VsZFNhdmVJbnN0cnVtZW50ID0gZmFsc2UsIHNob3VsZFNldEFzRGVmYXVsdEluc3RydW1lbnQgPSBmYWxzZSB9ID1cbiAgICAgICAgICAgIGlzSG9zdGVkSW5zdHJ1bWVudExpa2UocGF5bWVudERhdGEpID8gcGF5bWVudERhdGEgOiB7fTtcblxuICAgICAgICBjb25zdCB7IG5vbmNlIH0gPSB0aGlzLnNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudClcbiAgICAgICAgICAgID8gYXdhaXQgdGhpcy52ZXJpZnlDYXJkV2l0aEhvc3RlZEZvcm0oYmlsbGluZ0FkZHJlc3MsIG9yZGVyQW1vdW50KVxuICAgICAgICAgICAgOiBhd2FpdCB0aGlzLmJyYWludHJlZUhvc3RlZEZvcm0udG9rZW5pemUoYmlsbGluZ0FkZHJlc3MpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5jb21tb25QYXltZW50RGF0YSxcbiAgICAgICAgICAgIHNob3VsZFNhdmVJbnN0cnVtZW50LFxuICAgICAgICAgICAgc2hvdWxkU2V0QXNEZWZhdWx0SW5zdHJ1bWVudCxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgdmVyaWZ5Q2FyZFdpdGhIb3N0ZWRGb3JtKFxuICAgICAgICBiaWxsaW5nQWRkcmVzczogQWRkcmVzcyxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPE5vbmNlSW5zdHJ1bWVudD4ge1xuICAgICAgICBjb25zdCB0b2tlbml6YXRpb25QYXlsb2FkID0gYXdhaXQgdGhpcy5icmFpbnRyZWVIb3N0ZWRGb3JtLnRva2VuaXplKGJpbGxpbmdBZGRyZXNzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5icmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UuY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uKFxuICAgICAgICAgICAgdG9rZW5pemF0aW9uUGF5bG9hZCxcbiAgICAgICAgICAgIG9yZGVyQW1vdW50LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcHJvY2Vzc0FkZGl0aW9uYWxBY3Rpb24oXG4gICAgICAgIGVycm9yOiB1bmtub3duLFxuICAgICAgICBwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSxcbiAgICAgICAgb3JkZXJBbW91bnQ6IG51bWJlcixcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzUmVxdWVzdEVycm9yKGVycm9yKSB8fFxuICAgICAgICAgICAgIXNvbWUoZXJyb3IuYm9keS5lcnJvcnMsIHsgY29kZTogJ3RocmVlX2Rfc2VjdXJlX3JlcXVpcmVkJyB9KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHBheWVyX2F1dGhfcmVxdWVzdDogc3RvcmVkQ3JlZGl0Q2FyZE5vbmNlIH0gPVxuICAgICAgICAgICAgICAgIChpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IoZXJyb3IpICYmIGVycm9yLmJvZHkudGhyZWVfZHNfcmVzdWx0KSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF5bWVudERhdGEgfSA9IHBheW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIXBheW1lbnREYXRhIHx8ICFpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnREYXRhKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IoWydpbnN0cnVtZW50SWQnXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluc3RydW1lbnQgPSBzdGF0ZS5nZXRDYXJkSW5zdHJ1bWVudE9yVGhyb3cocGF5bWVudERhdGEuaW5zdHJ1bWVudElkKTtcbiAgICAgICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmNoYWxsZW5nZTNEU1ZlcmlmaWNhdGlvbihcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG5vbmNlOiBzdG9yZWRDcmVkaXRDYXJkTm9uY2UgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGJpbjogaW5zdHJ1bWVudC5paW4sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcmRlckFtb3VudCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5zdWJtaXRQYXltZW50KHtcbiAgICAgICAgICAgICAgICAuLi5wYXltZW50LFxuICAgICAgICAgICAgICAgIHBheW1lbnREYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRldmljZVNlc3Npb25JZDogdGhpcy5kZXZpY2VTZXNzaW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNIb3N0ZWRQYXltZW50Rm9ybUVuYWJsZWQobWV0aG9kSWQ/OiBzdHJpbmcsIGdhdGV3YXlJZD86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIW1ldGhvZElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBwYXltZW50TWV0aG9kID0gc3RhdGUuZ2V0UGF5bWVudE1ldGhvZE9yVGhyb3cobWV0aG9kSWQsIGdhdGV3YXlJZCk7XG5cbiAgICAgICAgcmV0dXJuIHBheW1lbnRNZXRob2QuY29uZmlnLmlzSG9zdGVkRm9ybUVuYWJsZWQgPT09IHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1N1Ym1pdHRpbmdXaXRoU3RvcmVkQ2FyZChwYXltZW50OiBPcmRlclBheW1lbnRSZXF1ZXN0Qm9keSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISEocGF5bWVudC5wYXltZW50RGF0YSAmJiBpc1ZhdWx0ZWRJbnN0cnVtZW50KHBheW1lbnQucGF5bWVudERhdGEpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24ocGF5bWVudDogT3JkZXJQYXltZW50UmVxdWVzdEJvZHkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhKHRoaXMuaXMzZHNFbmFibGVkICYmICF0aGlzLmlzU3VibWl0dGluZ1dpdGhTdG9yZWRDYXJkKHBheW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICBwcml2YXRlIHNob3VsZEluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZSgpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnBheW1lbnRJbnRlZ3JhdGlvblNlcnZpY2UuZ2V0U3RhdGUoKTtcbiAgICAgICAgY29uc3QgcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIgPSBzdGF0ZS5nZXRQYXltZW50UHJvdmlkZXJDdXN0b21lck9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgYnJhaW50cmVlQ3VzdG9tZXIgPSBpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lcihwYXltZW50UHJvdmlkZXJDdXN0b21lcilcbiAgICAgICAgICAgID8gcGF5bWVudFByb3ZpZGVyQ3VzdG9tZXJcbiAgICAgICAgICAgIDoge307XG4gICAgICAgIGNvbnN0IGlzRmFzdGxhbmVFbmFibGVkOiBib29sZWFuID1cbiAgICAgICAgICAgIHRoaXMucGF5bWVudE1ldGhvZD8uaW5pdGlhbGl6YXRpb25EYXRhLmlzQWNjZWxlcmF0ZWRDaGVja291dEVuYWJsZWQ7XG5cbiAgICAgICAgcmV0dXJuIGlzRmFzdGxhbmVFbmFibGVkICYmICFicmFpbnRyZWVDdXN0b21lcj8uYXV0aGVudGljYXRpb25TdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZW1vdmUgd2hlbiBCVCBBWE8gQS9CIHRlc3RpbmcgaXMgZmluaXNoZWRcbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3cobWV0aG9kSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMucGF5bWVudEludGVncmF0aW9uU2VydmljZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBjYXJ0ID0gc3RhdGUuZ2V0Q2FydE9yVGhyb3coKTtcbiAgICAgICAgY29uc3QgcGF5bWVudE1ldGhvZCA9IHN0YXRlLmdldFBheW1lbnRNZXRob2RPclRocm93KG1ldGhvZElkKTtcbiAgICAgICAgY29uc3QgeyBjbGllbnRUb2tlbiwgY29uZmlnIH0gPSBwYXltZW50TWV0aG9kO1xuXG4gICAgICAgIGlmICghY2xpZW50VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNaXNzaW5nRGF0YUVycm9yKE1pc3NpbmdEYXRhRXJyb3JUeXBlLk1pc3NpbmdQYXltZW50TWV0aG9kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLmluaXRpYWxpemUoY2xpZW50VG9rZW4sIHRoaXMudGhyZWVEU2VjdXJlKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmJyYWludHJlZUludGVncmF0aW9uU2VydmljZS5nZXRCcmFpbnRyZWVGYXN0bGFuZShjYXJ0LmlkLCBjb25maWcudGVzdE1vZGUpO1xuICAgIH1cbn1cbiIsImltcG9ydCBSZXF1ZXN0RXJyb3IgZnJvbSAnLi9yZXF1ZXN0LWVycm9yJztcblxuLy8gSGF2ZSB0byB1c2UgYGFzYCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83Mzk4NzA0NC90eXBlZ3VhcmRpbmctYW4tdW5rbm93bi1uZXN0ZWQtb2JqZWN0IHNob3VsZCBiZSBmaXhlZCBpbiA0LjgrXG5jb25zdCBpc1JlcXVlc3RFcnJvciA9IChlcnJvcjogdW5rbm93bik6IGVycm9yIGlzIFJlcXVlc3RFcnJvciA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwgJiYgJ2JvZHknIGluIGVycm9yO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNSZXF1ZXN0RXJyb3I7XG4iLCJleHBvcnQgaW50ZXJmYWNlIEJyYWludHJlZVBheW1lbnQzRFNSZXF1ZXN0RXJyb3JzIHtcbiAgICBjb2RlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhaW50cmVlUGF5bWVudFJlcXVlc3QzRFNFcnJvciB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJvZHk6IHtcbiAgICAgICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgICAgIHRocmVlX2RzX3Jlc3VsdDoge1xuICAgICAgICAgICAgcGF5ZXJfYXV0aF9yZXF1ZXN0OiBzdHJpbmc7XG4gICAgICAgIH07XG4gICAgICAgIGVycm9yczogQnJhaW50cmVlUGF5bWVudDNEU1JlcXVlc3RFcnJvcnNbXTtcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IoXG4gICAgZXJyb3I6IHVua25vd24sXG4pOiBlcnJvciBpcyBCcmFpbnRyZWVQYXltZW50UmVxdWVzdDNEU0Vycm9yIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSAnb2JqZWN0JyB8fCBlcnJvciA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9ucyAqL1xuICAgIHJldHVybiAoXG4gICAgICAgICduYW1lJyBpbiBlcnJvciAmJlxuICAgICAgICAnYm9keScgaW4gZXJyb3IgJiZcbiAgICAgICAgJ3N0YXR1cycgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkgJiZcbiAgICAgICAgJ3RocmVlX2RzX3Jlc3VsdCcgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkgJiZcbiAgICAgICAgJ3BheWVyX2F1dGhfcmVxdWVzdCcgaW4gKGVycm9yIGFzIEJyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IpLmJvZHkudGhyZWVfZHNfcmVzdWx0ICYmXG4gICAgICAgICdlcnJvcnMnIGluIChlcnJvciBhcyBCcmFpbnRyZWVQYXltZW50UmVxdWVzdDNEU0Vycm9yKS5ib2R5XG4gICAgKTtcbn1cbiIsImltcG9ydCB7IEJyYWludHJlZUZvcm1GaWVsZHNNYXAsIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAgfSBmcm9tICcuLi9pbmRleCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0JyYWludHJlZUZvcm1GaWVsZHNNYXAoXG4gICAgZmllbGRzOiBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHwgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCxcbik6IGZpZWxkcyBpcyBCcmFpbnRyZWVGb3JtRmllbGRzTWFwIHtcbiAgICByZXR1cm4gJ2NhcmROdW1iZXInIGluIGZpZWxkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcChcbiAgICBmaWVsZHM6IEJyYWludHJlZUZvcm1GaWVsZHNNYXAgfCBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRzTWFwLFxuKTogZmllbGRzIGlzIEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAge1xuICAgIHJldHVybiAhIShcbiAgICAgICAgT2JqZWN0LmtleXMoZmllbGRzKS5sZW5ndGggPiAwICYmXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgKChmaWVsZHMgYXMgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCkuY2FyZENvZGVWZXJpZmljYXRpb24gfHxcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIChmaWVsZHMgYXMgQnJhaW50cmVlU3RvcmVkQ2FyZEZpZWxkc01hcCkuY2FyZE51bWJlclZlcmlmaWNhdGlvbilcbiAgICApO1xufVxuIiwiaW1wb3J0IGlzQnJhaW50cmVlRXJyb3IgZnJvbSAnLi9pcy1icmFpbnRyZWUtZXJyb3InO1xuaW1wb3J0IHsgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkSW52YWxpZEZpZWxkS2V5cyhpbnZhbGlkRmllbGRLZXlzOiB1bmtub3duKTogaW52YWxpZEZpZWxkS2V5cyBpcyBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgQXJyYXkuaXNBcnJheShpbnZhbGlkRmllbGRLZXlzKSAmJiBpbnZhbGlkRmllbGRLZXlzLmV2ZXJ5KChrZXkpID0+IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKVxuICAgICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yKFxuICAgIGVycm9yOiB1bmtub3duLFxuKTogZXJyb3IgaXMgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yIHtcbiAgICBpZiAoIWlzQnJhaW50cmVlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRldGFpbHMgfSA9IGVycm9yO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgZGV0YWlscyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICh0eXBlb2YgZGV0YWlscyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIGRldGFpbHMgIT09IG51bGwgJiZcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY29uc2lzdGVudC10eXBlLWFzc2VydGlvbnNcbiAgICAgICAgICAgIChkZXRhaWxzIGFzIHsgaW52YWxpZEZpZWxkS2V5cz86IHVua25vd24gfSkuaW52YWxpZEZpZWxkS2V5cyA9PT0gdW5kZWZpbmVkKSB8fFxuICAgICAgICBpc1ZhbGlkSW52YWxpZEZpZWxkS2V5cyhkZXRhaWxzKVxuICAgICk7XG59XG4iLCJpbXBvcnQgeyBEaWN0aW9uYXJ5LCBpc0VtcHR5LCBpc05pbCwgb21pdEJ5IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHtcbiAgICBCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT04sXG4gICAgQnJhaW50cmVlQmlsbGluZ0FkZHJlc3NSZXF1ZXN0RGF0YSxcbiAgICBCcmFpbnRyZWVDbGllbnQsXG4gICAgQnJhaW50cmVlRm9ybUVycm9yRGF0YUtleXMsXG4gICAgQnJhaW50cmVlRm9ybUVycm9yc0RhdGEsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkc01hcCxcbiAgICBCcmFpbnRyZWVGb3JtRmllbGRTdHlsZXMsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwLFxuICAgIEJyYWludHJlZUZvcm1GaWVsZFR5cGUsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFcnJvckRhdGEsXG4gICAgQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFdmVudERhdGEsXG4gICAgQnJhaW50cmVlRm9ybU9wdGlvbnMsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzLFxuICAgIEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWcsXG4gICAgQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUsXG4gICAgQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yLFxuICAgIEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICBCcmFpbnRyZWVTdG9yZWRDYXJkRmllbGRzTWFwLFxuICAgIGlzQnJhaW50cmVlRm9ybUZpZWxkc01hcCxcbiAgICBpc0JyYWludHJlZUhvc3RlZEZvcm1FcnJvcixcbiAgICBpc0JyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZCxcbiAgICBUb2tlbml6YXRpb25QYXlsb2FkLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5pbXBvcnQge1xuICAgIEFkZHJlc3MsXG4gICAgTm90SW5pdGlhbGl6ZWRFcnJvcixcbiAgICBOb3RJbml0aWFsaXplZEVycm9yVHlwZSxcbiAgICBQYXltZW50SW52YWxpZEZvcm1FcnJvcixcbiAgICBQYXltZW50SW52YWxpZEZvcm1FcnJvckRldGFpbHMsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5lbnVtIEJyYWludHJlZUhvc3RlZEZvcm1UeXBlIHtcbiAgICBDcmVkaXRDYXJkLFxuICAgIFN0b3JlZENhcmRWZXJpZmljYXRpb24sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyYWludHJlZUhvc3RlZEZvcm0ge1xuICAgIHByaXZhdGUgY2FyZEZpZWxkcz86IEJyYWludHJlZUhvc3RlZEZpZWxkcztcbiAgICBwcml2YXRlIGZvcm1PcHRpb25zPzogQnJhaW50cmVlRm9ybU9wdGlvbnM7XG4gICAgcHJpdmF0ZSB0eXBlPzogQnJhaW50cmVlSG9zdGVkRm9ybVR5cGU7XG4gICAgcHJpdmF0ZSBjbGllbnQ/OiBQcm9taXNlPEJyYWludHJlZUNsaWVudD47XG4gICAgcHJpdmF0ZSBjbGllbnRUb2tlbj86IHN0cmluZztcbiAgICBwcml2YXRlIGlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTY3JpcHRMb2FkZXI6IEJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICAgICAgcHJpdmF0ZSBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcjogQnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgaW5pdGlhbGl6ZShcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlRm9ybU9wdGlvbnMsXG4gICAgICAgIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcz86IHN0cmluZ1tdLFxuICAgICAgICBjbGllbnRUb2tlbj86IHN0cmluZyxcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5jbGllbnRUb2tlbiA9IGNsaWVudFRva2VuO1xuICAgICAgICB0aGlzLmZvcm1PcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy50eXBlID0gaXNCcmFpbnRyZWVGb3JtRmllbGRzTWFwKG9wdGlvbnMuZmllbGRzKVxuICAgICAgICAgICAgPyBCcmFpbnRyZWVIb3N0ZWRGb3JtVHlwZS5DcmVkaXRDYXJkXG4gICAgICAgICAgICA6IEJyYWludHJlZUhvc3RlZEZvcm1UeXBlLlN0b3JlZENhcmRWZXJpZmljYXRpb247XG5cbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5tYXBGaWVsZE9wdGlvbnMob3B0aW9ucy5maWVsZHMsIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcyk7XG5cbiAgICAgICAgaWYgKGlzRW1wdHkoZmllbGRzKSkge1xuICAgICAgICAgICAgdGhpcy5pc0luaXRpYWxpemVkSG9zdGVkRm9ybSA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhcmRGaWVsZHMgPSBhd2FpdCB0aGlzLmNyZWF0ZUhvc3RlZEZpZWxkcyh7XG4gICAgICAgICAgICBmaWVsZHMsXG4gICAgICAgICAgICBzdHlsZXM6IG9wdGlvbnMuc3R5bGVzICYmIHRoaXMubWFwU3R5bGVPcHRpb25zKG9wdGlvbnMuc3R5bGVzKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jYXJkRmllbGRzPy5vbignYmx1cicsIHRoaXMuaGFuZGxlQmx1cik7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2NhcmRUeXBlQ2hhbmdlJywgdGhpcy5oYW5kbGVDYXJkVHlwZUNoYW5nZSk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ3ZhbGlkaXR5Q2hhbmdlJywgdGhpcy5oYW5kbGVWYWxpZGl0eUNoYW5nZSk7XG4gICAgICAgIHRoaXMuY2FyZEZpZWxkcz8ub24oJ2lucHV0U3VibWl0UmVxdWVzdCcsIHRoaXMuaGFuZGxlSW5wdXRTdWJtaXRSZXF1ZXN0KTtcblxuICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLmlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtO1xuICAgIH1cblxuICAgIGFzeW5jIGRlaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZEhvc3RlZEZvcm0pIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZEhvc3RlZEZvcm0gPSBmYWxzZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2FyZEZpZWxkcz8udGVhcmRvd24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY2FyZEZpZWxkcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5jYXJkRmllbGRzLmdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRGb3JtKHN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVWYWxpZGl0eUNoYW5nZShzdGF0ZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubWFwVmFsaWRhdGlvbkVycm9ycyhzdGF0ZS5maWVsZHMpO1xuXG4gICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEludmFsaWRGb3JtRXJyb3IoZXJyb3JzIGFzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB0b2tlbml6ZShiaWxsaW5nQWRkcmVzczogQWRkcmVzcyk6IFByb21pc2U8VG9rZW5pemF0aW9uUGF5bG9hZD4ge1xuICAgICAgICBpZiAoIXRoaXMuY2FyZEZpZWxkcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5jYXJkRmllbGRzLnRva2VuaXplKFxuICAgICAgICAgICAgICAgIG9taXRCeShcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0FkZHJlc3M6IGJpbGxpbmdBZGRyZXNzICYmIHRoaXMubWFwQmlsbGluZ0FkZHJlc3MoYmlsbGluZ0FkZHJlc3MpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpc05pbCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25WYWxpZGF0ZT8uKHsgaXNWYWxpZDogdHJ1ZSwgZXJyb3JzOiB7fSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBub25jZTogcGF5bG9hZC5ub25jZSxcbiAgICAgICAgICAgICAgICBiaW46IHBheWxvYWQuZGV0YWlscz8uYmluLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChpc0JyYWludHJlZUhvc3RlZEZvcm1FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLm1hcFRva2VuaXplRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4oeyBpc1ZhbGlkOiBmYWxzZSwgZXJyb3JzIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUGF5bWVudEludmFsaWRGb3JtRXJyb3IoZXJyb3JzIGFzIFBheW1lbnRJbnZhbGlkRm9ybUVycm9yRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHRva2VuaXplRm9yU3RvcmVkQ2FyZFZlcmlmaWNhdGlvbigpOiBQcm9taXNlPFRva2VuaXphdGlvblBheWxvYWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNhcmRGaWVsZHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBOb3RJbml0aWFsaXplZEVycm9yKE5vdEluaXRpYWxpemVkRXJyb3JUeXBlLlBheW1lbnROb3RJbml0aWFsaXplZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHRoaXMuY2FyZEZpZWxkcy50b2tlbml6ZSgpO1xuXG4gICAgICAgICAgICB0aGlzLmZvcm1PcHRpb25zPy5vblZhbGlkYXRlPy4oeyBpc1ZhbGlkOiB0cnVlLCBlcnJvcnM6IHt9IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5vbmNlOiBwYXlsb2FkLm5vbmNlLFxuICAgICAgICAgICAgICAgIGJpbjogcGF5bG9hZC5kZXRhaWxzPy5iaW4sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGlzQnJhaW50cmVlSG9zdGVkRm9ybUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMubWFwVG9rZW5pemVFcnJvcihlcnJvciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih7IGlzVmFsaWQ6IGZhbHNlLCBlcnJvcnMgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQYXltZW50SW52YWxpZEZvcm1FcnJvcihlcnJvcnMgYXMgUGF5bWVudEludmFsaWRGb3JtRXJyb3JEZXRhaWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgY3JlYXRlSG9zdGVkRmllbGRzKFxuICAgICAgICBvcHRpb25zOiBQaWNrPEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWcsICdmaWVsZHMnIHwgJ3N0eWxlcyc+LFxuICAgICk6IFByb21pc2U8QnJhaW50cmVlSG9zdGVkRmllbGRzPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7XG4gICAgICAgIGNvbnN0IGhvc3RlZEZpZWxkcyA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRIb3N0ZWRGaWVsZHMoKTtcblxuICAgICAgICBjb25zdCBjdXJyZW50U2RrVmVyc2lvbiA9IHRoaXMuYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIuZ2V0U0RLVmVyc2lvbigpO1xuICAgICAgICBjb25zdCBob3N0ZWRGaWVsZHNPcHRpb25zID1cbiAgICAgICAgICAgIGN1cnJlbnRTZGtWZXJzaW9uID09PSBCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT05cbiAgICAgICAgICAgICAgICA/IHsgLi4ub3B0aW9ucywgcHJldmVudEN1cnNvckp1bXBzOiB0cnVlIH1cbiAgICAgICAgICAgICAgICA6IG9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIGhvc3RlZEZpZWxkcy5jcmVhdGUoeyAuLi5ob3N0ZWRGaWVsZHNPcHRpb25zLCBjbGllbnQgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2xpZW50KCk6IFByb21pc2U8QnJhaW50cmVlQ2xpZW50PiB7XG4gICAgICAgIGlmICghdGhpcy5jbGllbnRUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE5vdEluaXRpYWxpemVkRXJyb3IoTm90SW5pdGlhbGl6ZWRFcnJvclR5cGUuUGF5bWVudE5vdEluaXRpYWxpemVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuYnJhaW50cmVlU2NyaXB0TG9hZGVyLmxvYWRDbGllbnQoKTtcblxuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQuY3JlYXRlKHsgYXV0aG9yaXphdGlvbjogdGhpcy5jbGllbnRUb2tlbiB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcEJpbGxpbmdBZGRyZXNzKGJpbGxpbmdBZGRyZXNzOiBBZGRyZXNzKTogQnJhaW50cmVlQmlsbGluZ0FkZHJlc3NSZXF1ZXN0RGF0YSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb3VudHJ5TmFtZTogYmlsbGluZ0FkZHJlc3MuY291bnRyeSxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IGJpbGxpbmdBZGRyZXNzLnBvc3RhbENvZGUsXG4gICAgICAgICAgICBzdHJlZXRBZGRyZXNzOiBiaWxsaW5nQWRkcmVzcy5hZGRyZXNzMlxuICAgICAgICAgICAgICAgID8gYCR7YmlsbGluZ0FkZHJlc3MuYWRkcmVzczF9ICR7YmlsbGluZ0FkZHJlc3MuYWRkcmVzczJ9YFxuICAgICAgICAgICAgICAgIDogYmlsbGluZ0FkZHJlc3MuYWRkcmVzczEsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBGaWVsZE9wdGlvbnMoXG4gICAgICAgIGZpZWxkczogQnJhaW50cmVlRm9ybUZpZWxkc01hcCB8IEJyYWludHJlZVN0b3JlZENhcmRGaWVsZHNNYXAsXG4gICAgICAgIHVuc3VwcG9ydGVkQ2FyZEJyYW5kcz86IHN0cmluZ1tdLFxuICAgICk6IEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWdbJ2ZpZWxkcyddIHtcbiAgICAgICAgaWYgKGlzQnJhaW50cmVlRm9ybUZpZWxkc01hcChmaWVsZHMpKSB7XG4gICAgICAgICAgICBjb25zdCBzdXBwb3J0ZWRDYXJkQnJhbmRzOiBQYXJ0aWFsPFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+PiA9IHt9O1xuXG4gICAgICAgICAgICB1bnN1cHBvcnRlZENhcmRCcmFuZHM/LmZvckVhY2goKGNhcmRCcmFuZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc0JyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZChjYXJkQnJhbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZENhcmRCcmFuZHNbY2FyZEJyYW5kXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gb21pdEJ5KFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZE51bWJlci5jb250YWluZXJJZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZpZWxkcy5jYXJkTnVtYmVyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmROdW1iZXIuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKE9iamVjdC5rZXlzKHN1cHBvcnRlZENhcmRCcmFuZHMpLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgc3VwcG9ydGVkQ2FyZEJyYW5kcyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZEV4cGlyeS5jb250YWluZXJJZH1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGZpZWxkcy5jYXJkRXhwaXJ5LnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmRFeHBpcnkuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjdnY6IGZpZWxkcy5jYXJkQ29kZSAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IGAjJHtmaWVsZHMuY2FyZENvZGUuY29udGFpbmVySWR9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZENvZGUucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbExhYmVsOiBmaWVsZHMuY2FyZENvZGUuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjYXJkaG9sZGVyTmFtZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBgIyR7ZmllbGRzLmNhcmROYW1lLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZmllbGRzLmNhcmROYW1lLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxMYWJlbDogZmllbGRzLmNhcmROYW1lLmFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzTmlsLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvbWl0QnkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbnVtYmVyOiBmaWVsZHMuY2FyZE51bWJlclZlcmlmaWNhdGlvbiAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogYCMke2ZpZWxkcy5jYXJkTnVtYmVyVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZE51bWJlclZlcmlmaWNhdGlvbi5wbGFjZWhvbGRlcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN2djogZmllbGRzLmNhcmRDb2RlVmVyaWZpY2F0aW9uICYmIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiBgIyR7ZmllbGRzLmNhcmRDb2RlVmVyaWZpY2F0aW9uLmNvbnRhaW5lcklkfWAsXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmaWVsZHMuY2FyZENvZGVWZXJpZmljYXRpb24ucGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc05pbCxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFN0eWxlT3B0aW9ucyhcbiAgICAgICAgb3B0aW9uczogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzTWFwLFxuICAgICk6IEJyYWludHJlZUhvc3RlZEZpZWxkc0NyZWF0b3JDb25maWdbJ3N0eWxlcyddIHtcbiAgICAgICAgY29uc3QgbWFwU3R5bGVzID0gKHN0eWxlczogQnJhaW50cmVlRm9ybUZpZWxkU3R5bGVzID0ge30pID0+XG4gICAgICAgICAgICBvbWl0QnkoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3R5bGVzLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAnZm9udC1mYW1pbHknOiBzdHlsZXMuZm9udEZhbWlseSxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6IHN0eWxlcy5mb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0Jzogc3R5bGVzLmZvbnRXZWlnaHQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpc05pbCxcbiAgICAgICAgICAgICkgYXMgRGljdGlvbmFyeTxzdHJpbmc+O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogbWFwU3R5bGVzKG9wdGlvbnMuZGVmYXVsdCksXG4gICAgICAgICAgICAnLmludmFsaWQnOiBtYXBTdHlsZXMob3B0aW9ucy5lcnJvciksXG4gICAgICAgICAgICAnOmZvY3VzJzogbWFwU3R5bGVzKG9wdGlvbnMuZm9jdXMpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwRmllbGRUeXBlKHR5cGU6IHN0cmluZyk6IEJyYWludHJlZUZvcm1GaWVsZFR5cGUge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gQnJhaW50cmVlSG9zdGVkRm9ybVR5cGUuU3RvcmVkQ2FyZFZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlclZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA6IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE51bWJlcjtcblxuICAgICAgICAgICAgY2FzZSAnZXhwaXJhdGlvbkRhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRFeHBpcnk7XG5cbiAgICAgICAgICAgIGNhc2UgJ2N2dic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gQnJhaW50cmVlSG9zdGVkRm9ybVR5cGUuU3RvcmVkQ2FyZFZlcmlmaWNhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25cbiAgICAgICAgICAgICAgICAgICAgOiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRDb2RlO1xuXG4gICAgICAgICAgICBjYXNlICdjYXJkaG9sZGVyTmFtZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZE5hbWU7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGZpZWxkIHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgbWFwRXJyb3JzKGZpZWxkczogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGVbJ2ZpZWxkcyddKTogQnJhaW50cmVlRm9ybUVycm9yc0RhdGEge1xuICAgICAgICBjb25zdCBlcnJvcnM6IEJyYWludHJlZUZvcm1FcnJvcnNEYXRhID0ge307XG5cbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhmaWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHRoaXMuaXNWYWxpZFBhcmFtKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBpc1ZhbGlkLCBpc0VtcHR5LCBpc1BvdGVudGlhbGx5VmFsaWQgfSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGVycm9yc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW1wdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1BvdGVudGlhbGx5VmFsaWQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcFZhbGlkYXRpb25FcnJvcnMoXG4gICAgICAgIGZpZWxkczogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGVbJ2ZpZWxkcyddLFxuICAgICk6IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXZlbnREYXRhWydlcnJvcnMnXSB7XG4gICAgICAgIHJldHVybiAoT2JqZWN0LmtleXMoZmllbGRzKSBhcyBBcnJheTxrZXlvZiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZVsnZmllbGRzJ10+KS5yZWR1Y2UoXG4gICAgICAgICAgICAocmVzdWx0LCBmaWVsZEtleSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgW3RoaXMubWFwRmllbGRUeXBlKGZpZWxkS2V5KV06IGZpZWxkc1tmaWVsZEtleV0/LmlzVmFsaWRcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBbdGhpcy5jcmVhdGVJbnZhbGlkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoZmllbGRLZXkpKV0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHt9LFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwVG9rZW5pemVFcnJvcihcbiAgICAgICAgZXJyb3I6IEJyYWludHJlZUhvc3RlZEZvcm1FcnJvcixcbiAgICAgICAgaXNTdG9yZWRDYXJkID0gZmFsc2UsXG4gICAgKTogQnJhaW50cmVlRm9ybUZpZWxkVmFsaWRhdGVFdmVudERhdGFbJ2Vycm9ycyddIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdIT1NURURfRklFTERTX0ZJRUxEU19FTVBUWScpIHtcbiAgICAgICAgICAgIGNvbnN0IGN2diA9IFt0aGlzLmNyZWF0ZVJlcXVpcmVkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoJ2N2dicpKV07XG5cbiAgICAgICAgICAgIGlmIChpc1N0b3JlZENhcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBbdGhpcy5tYXBGaWVsZFR5cGUoJ2N2dicpXTogY3Z2IH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgW3RoaXMubWFwRmllbGRUeXBlKCdjdnYnKV06IGN2dixcbiAgICAgICAgICAgICAgICBbdGhpcy5tYXBGaWVsZFR5cGUoJ2V4cGlyYXRpb25EYXRlJyldOiBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVxdWlyZWRFcnJvcih0aGlzLm1hcEZpZWxkVHlwZSgnZXhwaXJhdGlvbkRhdGUnKSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBbdGhpcy5tYXBGaWVsZFR5cGUoJ251bWJlcicpXTogW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVJlcXVpcmVkRXJyb3IodGhpcy5tYXBGaWVsZFR5cGUoJ251bWJlcicpKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFt0aGlzLm1hcEZpZWxkVHlwZSgnY2FyZGhvbGRlck5hbWUnKV06IFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVSZXF1aXJlZEVycm9yKHRoaXMubWFwRmllbGRUeXBlKCdjYXJkaG9sZGVyTmFtZScpKSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvci5kZXRhaWxzPy5pbnZhbGlkRmllbGRLZXlzPy5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5tYXBGaWVsZFR5cGUoa2V5KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgW3R5cGVdOiBbdGhpcy5jcmVhdGVJbnZhbGlkRXJyb3IodHlwZSldLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUmVxdWlyZWRFcnJvcihcbiAgICAgICAgZmllbGRUeXBlOiBCcmFpbnRyZWVGb3JtRmllbGRUeXBlLFxuICAgICk6IEJyYWludHJlZUZvcm1GaWVsZFZhbGlkYXRlRXJyb3JEYXRhIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB7XG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV06ICdDVlYgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25dOiAnQ1ZWIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdOiAnQ3JlZGl0IGNhcmQgbnVtYmVyIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJWZXJpZmljYXRpb25dOiAnQ3JlZGl0IGNhcmQgbnVtYmVyIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmRFeHBpcnldOiAnRXhwaXJhdGlvbiBkYXRlIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXTogJ0Z1bGwgbmFtZSBpcyByZXF1aXJlZCcsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VzW2ZpZWxkVHlwZV0gPz8gJ0ZpZWxkIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgICAgIHR5cGU6ICdyZXF1aXJlZCcsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVJbnZhbGlkRXJyb3IoXG4gICAgICAgIGZpZWxkVHlwZTogQnJhaW50cmVlRm9ybUZpZWxkVHlwZSxcbiAgICApOiBCcmFpbnRyZWVGb3JtRmllbGRWYWxpZGF0ZUVycm9yRGF0YSB7XG4gICAgICAgIGNvbnN0IGZvcm1GaWVsZHMgPSB7XG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkQ29kZV06IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGNvZGUnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfY29kZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZENvZGVWZXJpZmljYXRpb25dOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBjb2RlJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX2NvZGUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROdW1iZXJdOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgY2FyZCBudW1iZXInLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnZhbGlkX2NhcmRfbnVtYmVyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbQnJhaW50cmVlRm9ybUZpZWxkVHlwZS5DYXJkTnVtYmVyVmVyaWZpY2F0aW9uXToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGNhcmQgbnVtYmVyJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW52YWxpZF9jYXJkX251bWJlcicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW0JyYWludHJlZUZvcm1GaWVsZFR5cGUuQ2FyZEV4cGlyeV06IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCBjYXJkIGV4cGlyeScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ludmFsaWRfY2FyZF9leHBpcnknLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtCcmFpbnRyZWVGb3JtRmllbGRUeXBlLkNhcmROYW1lXToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGNhcmQgbmFtZScsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2ludmFsaWRfY2FyZF9uYW1lJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpZWxkVHlwZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGZvcm1GaWVsZHNbZmllbGRUeXBlXT8ubWVzc2FnZSA/PyAnSW52YWxpZCBmaWVsZCcsXG4gICAgICAgICAgICB0eXBlOiBmb3JtRmllbGRzW2ZpZWxkVHlwZV0/LnR5cGUgPz8gJ2ludmFsaWQnLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGxlQmx1ciA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25CbHVyPy4oe1xuICAgICAgICAgICAgZmllbGRUeXBlOiB0aGlzLm1hcEZpZWxkVHlwZShldmVudC5lbWl0dGVkQnkpLFxuICAgICAgICAgICAgZXJyb3JzOiB0aGlzLm1hcEVycm9ycyhldmVudC5maWVsZHMpLFxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcHJpdmF0ZSBoYW5kbGVGb2N1cyA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25Gb2N1cz8uKHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZXZlbnQuZW1pdHRlZEJ5KSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaGFuZGxlQ2FyZFR5cGVDaGFuZ2UgPSAoZXZlbnQ6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGNhcmRUeXBlID1cbiAgICAgICAgICAgIGV2ZW50LmNhcmRzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgID8gZXZlbnQuY2FyZHNbMF0udHlwZS5yZXBsYWNlKC9ebWFzdGVyLWNhcmQkLywgJ21hc3RlcmNhcmQnKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uQ2FyZFR5cGVDaGFuZ2U/Lih7IGNhcmRUeXBlIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGhhbmRsZUlucHV0U3VibWl0UmVxdWVzdCA9IChldmVudDogQnJhaW50cmVlSG9zdGVkRmllbGRzU3RhdGUpOiB2b2lkID0+IHtcbiAgICAgICAgdGhpcy5mb3JtT3B0aW9ucz8ub25FbnRlcj8uKHtcbiAgICAgICAgICAgIGZpZWxkVHlwZTogdGhpcy5tYXBGaWVsZFR5cGUoZXZlbnQuZW1pdHRlZEJ5KSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHByaXZhdGUgaGFuZGxlVmFsaWRpdHlDaGFuZ2UgPSAoZXZlbnQ6IEJyYWludHJlZUhvc3RlZEZpZWxkc1N0YXRlKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuZm9ybU9wdGlvbnM/Lm9uVmFsaWRhdGU/Lih7XG4gICAgICAgICAgICBpc1ZhbGlkOiB0aGlzLmlzVmFsaWRGb3JtKGV2ZW50KSxcbiAgICAgICAgICAgIGVycm9yczogdGhpcy5tYXBWYWxpZGF0aW9uRXJyb3JzKGV2ZW50LmZpZWxkcyksXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBwcml2YXRlIGlzVmFsaWRGb3JtKGV2ZW50OiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZXZlbnQuZmllbGRzKSBhcyBBcnJheTxrZXlvZiBCcmFpbnRyZWVIb3N0ZWRGaWVsZHNTdGF0ZVsnZmllbGRzJ10+XG4gICAgICAgICkuZXZlcnkoKGtleSkgPT4gZXZlbnQuZmllbGRzW2tleV0/LmlzVmFsaWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNWYWxpZFBhcmFtKGtleTogc3RyaW5nKToga2V5IGlzIEJyYWludHJlZUZvcm1FcnJvckRhdGFLZXlzIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICdudW1iZXInLFxuICAgICAgICAgICAgJ2N2dicsXG4gICAgICAgICAgICAnZXhwaXJhdGlvbkRhdGUnLFxuICAgICAgICAgICAgJ3Bvc3RhbENvZGUnLFxuICAgICAgICAgICAgJ2NhcmRob2xkZXJOYW1lJyxcbiAgICAgICAgICAgICdjYXJkVHlwZScsXG4gICAgICAgIF0uaW5jbHVkZXMoa2V5KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaXNCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmQgPSAoXG4gICAgY2FyZEJyYW5kOiBzdHJpbmcsXG4pOiBjYXJkQnJhbmQgaXMgQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyA9PiB7XG4gICAgY29uc3Qgc3VwcG9ydGVkQ2FyZEJyYW5kcyA9IE9iamVjdC52YWx1ZXMoQnJhaW50cmVlU3VwcG9ydGVkQ2FyZEJyYW5kcyk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1hc3NlcnRpb25zXG4gICAgcmV0dXJuIHN1cHBvcnRlZENhcmRCcmFuZHMuaW5jbHVkZXMoY2FyZEJyYW5kIGFzIEJyYWludHJlZVN1cHBvcnRlZENhcmRCcmFuZHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmQ7XG4iLCJpbXBvcnQgeyBnZXRTY3JpcHRMb2FkZXIgfSBmcm9tICdAYmlnY29tbWVyY2Uvc2NyaXB0LWxvYWRlcic7XG5cbmltcG9ydCB7XG4gICAgQnJhaW50cmVlSG9zdFdpbmRvdyxcbiAgICBCcmFpbnRyZWVJbnRlZ3JhdGlvblNlcnZpY2UsXG4gICAgQnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgIEJyYWludHJlZVNES1ZlcnNpb25NYW5hZ2VyLFxufSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQtc2RrL2JyYWludHJlZS11dGlscyc7XG5cbmltcG9ydCB7XG4gICAgUGF5bWVudFN0cmF0ZWd5RmFjdG9yeSxcbiAgICB0b1Jlc29sdmFibGVNb2R1bGUsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC1zZGsvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGknO1xuXG5pbXBvcnQgQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneSBmcm9tICcuL2JyYWludHJlZS1jcmVkaXQtY2FyZC1wYXltZW50LXN0cmF0ZWd5JztcbmltcG9ydCBCcmFpbnRyZWVIb3N0ZWRGb3JtIGZyb20gJy4uL2JyYWludHJlZS1ob3N0ZWQtZm9ybS9icmFpbnRyZWUtaG9zdGVkLWZvcm0nO1xuXG5jb25zdCBjcmVhdGVCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudFN0cmF0ZWd5OiBQYXltZW50U3RyYXRlZ3lGYWN0b3J5PFxuICAgIEJyYWludHJlZUNyZWRpdENhcmRQYXltZW50U3RyYXRlZ3lcbj4gPSAocGF5bWVudEludGVncmF0aW9uU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IGJyYWludHJlZUhvc3RXaW5kb3c6IEJyYWludHJlZUhvc3RXaW5kb3cgPSB3aW5kb3c7XG5cbiAgICBjb25zdCBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciA9IG5ldyBCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcihwYXltZW50SW50ZWdyYXRpb25TZXJ2aWNlKTtcblxuICAgIGNvbnN0IGJyYWludHJlZVNjcmlwdExvYWRlciA9IG5ldyBCcmFpbnRyZWVTY3JpcHRMb2FkZXIoXG4gICAgICAgIGdldFNjcmlwdExvYWRlcigpLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICAgICBicmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlcixcbiAgICApO1xuXG4gICAgY29uc3QgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlID0gbmV3IEJyYWludHJlZUludGVncmF0aW9uU2VydmljZShcbiAgICAgICAgYnJhaW50cmVlU2NyaXB0TG9hZGVyLFxuICAgICAgICBicmFpbnRyZWVIb3N0V2luZG93LFxuICAgICk7XG5cbiAgICBjb25zdCBicmFpbnRyZWVIb3N0ZWRGb3JtID0gbmV3IEJyYWludHJlZUhvc3RlZEZvcm0oXG4gICAgICAgIGJyYWludHJlZVNjcmlwdExvYWRlcixcbiAgICAgICAgYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIsXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneShcbiAgICAgICAgcGF5bWVudEludGVncmF0aW9uU2VydmljZSxcbiAgICAgICAgYnJhaW50cmVlSW50ZWdyYXRpb25TZXJ2aWNlLFxuICAgICAgICBicmFpbnRyZWVIb3N0ZWRGb3JtLFxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVNb2R1bGUoY3JlYXRlQnJhaW50cmVlQ3JlZGl0Q2FyZFBheW1lbnRTdHJhdGVneSwgW3sgaWQ6ICdicmFpbnRyZWUnIH1dKTtcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaXNFeHBlcmltZW50RW5hYmxlZCIsImZlYXR1cmVzIiwiZXhwZXJpbWVudE5hbWUiLCJmYWxsYmFja1ZhbHVlIiwiZCIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJCUkFJTlRSRUVfU0RLX0hPU1RFRF9GSUVMRFNfRklYX1ZFUlNJT04iLCJCUkFJTlRSRUVfU0RLX0RFRkFVTFRfVkVSU0lPTiIsIkJSQUlOVFJFRV9TREtfU1RBQkxFX1ZFUlNJT04iLCJCcmFpbnRyZWVTREtWZXJzaW9uTWFuYWdlciIsImNvbnN0cnVjdG9yIiwicGF5bWVudEludGVncmF0aW9uU2VydmljZSIsImJyYWludHJlZVdpbmRvdyIsIndpbmRvdyIsImdldFNES1ZlcnNpb24iLCJzdG9yZUNvbmZpZyIsInRoaXMiLCJnZXRTdGF0ZSIsImdldFN0b3JlQ29uZmlnIiwiY2hlY2tvdXRTZXR0aW5ncyIsImdldFByZWxvYWRlZFNES1ZlcnNpb24iLCJicmFpbnRyZWUiLCJwcmVsb2FkZWRWZXJzaW9uIiwiZmluZCIsInZhbHVlcyIsIm1vZHVsZSIsIlZFUlNJT04iLCJTdGFuZGFyZEVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwic3VwZXIiLCJuYW1lIiwidHlwZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsIlVuc3VwcG9ydGVkQnJvd3NlckVycm9yIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJQYXltZW50QXJndW1lbnRJbnZhbGlkRXJyb3IiLCJpbnZhbGlkRmllbGRzIiwiam9pbiIsIlBheW1lbnRJbnZhbGlkRm9ybUVycm9yIiwiZGV0YWlscyIsIk5vdEluaXRpYWxpemVkRXJyb3JUeXBlIiwiTm90SW5pdGlhbGl6ZWRFcnJvciIsInN1YnR5cGUiLCJDdXN0b21lck5vdEluaXRpYWxpemVkIiwiUGF5bWVudE5vdEluaXRpYWxpemVkIiwiU2hpcHBpbmdOb3RJbml0aWFsaXplZCIsIlNwYW1Qcm90ZWN0aW9uTm90SW5pdGlhbGl6ZWQiLCJnZXRFcnJvck1lc3NhZ2UiLCJQYXltZW50TWV0aG9kQ2FuY2VsbGVkRXJyb3IiLCJDYW5jZWxsYWJsZVByb21pc2UiLCJwcm9taXNlIiwiY2FuY2VsbGFibGUiLCJQcm9taXNlIiwiXyIsInJlamVjdCIsImNhbmNlbCIsInJhY2UiLCJQQVlQQUxfQ09NUE9ORU5UUyIsIlBheXBhbEJ1dHRvblN0eWxlTGF5b3V0T3B0aW9uIiwiUGF5cGFsQnV0dG9uU3R5bGVTaXplT3B0aW9uIiwiUGF5cGFsQnV0dG9uU3R5bGVDb2xvck9wdGlvbiIsIlBheXBhbEJ1dHRvblN0eWxlTGFiZWxPcHRpb24iLCJQYXlwYWxCdXR0b25TdHlsZVNoYXBlT3B0aW9uIiwiTWVzc2FnaW5nUGxhY2VtZW50cyIsIkJyYWludHJlZUVudiIsIkJyYWludHJlZU1vZHVsZU5hbWUiLCJCcmFpbnRyZWVGb3JtRmllbGRUeXBlIiwiaXNCcmFpbnRyZWVFcnJvciIsImVycm9yIiwiQm9vbGVhbiIsIkJyYWludHJlZUludGVncmF0aW9uU2VydmljZSIsImJyYWludHJlZVNjcmlwdExvYWRlciIsImJyYWludHJlZUhvc3RXaW5kb3ciLCJvdmVybGF5IiwiZGF0YUNvbGxlY3RvcnMiLCJpbml0aWFsaXplIiwiY2xpZW50VG9rZW4iLCJ0aHJlZURTZWN1cmVPcHRpb25zIiwiZ2V0QnJhaW50cmVlRmFzdGxhbmUiLCJjYXJkSWQiLCJpc1Rlc3RNb2RlRW5hYmxlZCIsInN0eWxlcyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJicmFpbnRyZWVGYXN0bGFuZSIsImdldENsaWVudFRva2VuT3JUaHJvdyIsImNsaWVudCIsImdldENsaWVudCIsImRldmljZURhdGEiLCJnZXRTZXNzaW9uSWQiLCJicmFpbnRyZWVGYXN0bGFuZUNyZWF0b3IiLCJsb2FkRmFzdGxhbmUiLCJkZWZhdWx0U3R5bGVzIiwicm9vdCIsImJhY2tncm91bmRDb2xvclByaW1hcnkiLCJjcmVhdGUiLCJhdXRob3JpemF0aW9uIiwiY2xpZW50Q3JlYXRvciIsImxvYWRDbGllbnQiLCJnZXRQYXlwYWwiLCJicmFpbnRyZWVQYXlwYWwiLCJhbGwiLCJsb2FkUGF5cGFsIiwidGhlbiIsInBheXBhbCIsInNob3VsZFNhdmVJbnN0cnVtZW50IiwiY29uZmlnIiwibmV3V2luZG93RmxvdyIsInN1cHBvcnRzUG9wdXBzIiwic2hvdyIsIm9uQ2xpY2siLCJmb2N1c1dpbmRvdyIsInRva2VuaXplIiwiZW5hYmxlU2hpcHBpbmdBZGRyZXNzIiwiZmxvdyIsInVzZXJhY3Rpb24iLCJyZXNwb25zZSIsInJlbW92ZSIsImNhdGNoIiwiZ2V0UGF5cGFsQ2hlY2tvdXQiLCJvblN1Y2Nlc3MiLCJvbkVycm9yIiwicGF5cGFsQ2hlY2tvdXQiLCJsb2FkUGF5cGFsQ2hlY2tvdXQiLCJwYXlwYWxDaGVja291dENvbmZpZyIsImJyYWludHJlZVBheXBhbENoZWNrb3V0IiwicGF5cGFsU2RrTG9hZENvbmZpZyIsImN1cnJlbmN5IiwiaXNDcmVkaXRFbmFibGVkIiwiY29tcG9uZW50cyIsInRvU3RyaW5nIiwiaW50ZW50IiwiY29tbWl0IiwibG9hZFBheVBhbFNESyIsImdldERhdGFDb2xsZWN0b3IiLCJvcHRpb25zIiwiY2FjaGVLZXkiLCJjYWNoZWQiLCJkYXRhQ29sbGVjdG9yIiwibG9hZERhdGFDb2xsZWN0b3IiLCJkYXRhQ29sbGVjdG9yQ29uZmlnIiwia291bnQiLCJjb2RlIiwidW5kZWZpbmVkIiwidGVhcmRvd24iLCJyZXNvbHZlIiwiZ2V0QnJhaW50cmVlRW52IiwiaXNUZXN0TW9kZSIsIlNhbmRib3giLCJQcm9kdWN0aW9uIiwibWFwVG9CcmFpbnRyZWVTaGlwcGluZ0FkZHJlc3NPdmVycmlkZSIsImFkZHJlc3MiLCJyZWNpcGllbnROYW1lIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJsaW5lMSIsImFkZHJlc3MxIiwibGluZTIiLCJhZGRyZXNzMiIsImNpdHkiLCJzdGF0ZSIsInN0YXRlT3JQcm92aW5jZUNvZGUiLCJwb3N0YWxDb2RlIiwiY291bnRyeUNvZGUiLCJwaG9uZSIsIm1hcFRvTGVnYWN5U2hpcHBpbmdBZGRyZXNzIiwiZW1haWwiLCJzaGlwcGluZ0FkZHJlc3MiLCJzcGxpdCIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJwaG9uZV9udW1iZXIiLCJhZGRyZXNzX2xpbmVfMSIsImFkZHJlc3NfbGluZV8yIiwiY291bnRyeV9jb2RlIiwicG9zdGFsX2NvZGUiLCJtYXBUb0xlZ2FjeUJpbGxpbmdBZGRyZXNzIiwiYmlsbGluZ0FkZHJlc3MiLCJyZW1vdmVFbGVtZW50IiwiZWxlbWVudElkIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjYXJ0SWQiLCJyaXNrQ29ycmVsYXRpb25JZCIsInRlYXJkb3duTW9kdWxlIiwiZGVmYXVsdCIsImdldDNEUyIsInRocmVlRFMiLCJsb2FkM0RTIiwidGhyZWVEU2VjdXJlIiwidmVyc2lvbiIsImdldFZlbm1vQ2hlY2tvdXQiLCJ2ZW5tb0NvbmZpZyIsInZlbm1vQ2hlY2tvdXQiLCJsb2FkVmVubW9DaGVja291dCIsInZlbm1vQ2hlY2tvdXRDb25maWciLCJhbGxvd0Rlc2t0b3AiLCJwYXltZW50TWV0aG9kVXNhZ2UiLCJicmFpbnRyZWVWZW5tb0NoZWNrb3V0IiwiaXNCcm93c2VyU3VwcG9ydGVkIiwidmVyaWZ5Q2FyZCIsInBheW1lbnQiLCJhbW91bnQiLCJ0b2tlbml6YXRpb25QYXlsb2FkIiwidG9rZW5pemVDYXJkIiwiY2hhbGxlbmdlM0RTVmVyaWZpY2F0aW9uIiwicGF5bWVudERhdGEiLCJpbnN0cnVtZW50IiwiY3JlZGl0Q2FyZEluc3RydW1lbnQiLCJjY0V4cGlyeSIsImNjTnVtYmVyIiwiY2NOYW1lIiwiaXNDcmVkaXRDYXJkSW5zdHJ1bWVudExpa2UiLCJlcnJvcnMiLCJnZXRFcnJvcnNSZXF1aXJlZEZpZWxkcyIsImlzRW1wdHkiLCJyZXF1ZXN0RGF0YSIsIm1hcFRvQ3JlZGl0Q2FyZCIsImNyZWRpdENhcmRzIiwicmVxdWVzdCIsIm5vbmNlIiwiYmluIiwicHJlc2VudDNEU0NoYWxsZW5nZSIsImNyZWRpdENhcmQiLCJkYXRhIiwiY2FyZGhvbGRlck5hbWUiLCJudW1iZXIiLCJjdnYiLCJjY0N2diIsImV4cGlyYXRpb25EYXRlIiwibW9udGgiLCJ5ZWFyIiwidmFsaWRhdGUiLCJjb3VudHJ5Q29kZUFscGhhMiIsImxvY2FsaXR5IiwiY291bnRyeU5hbWUiLCJjb3VudHJ5Iiwic3RyZWV0QWRkcmVzcyIsImVuZHBvaW50IiwibWV0aG9kIiwiYWRkRnJhbWUiLCJyZW1vdmVGcmFtZSIsImNoYWxsZW5nZVJlcXVlc3RlZCIsImFkZGl0aW9uYWxJbmZvcm1hdGlvbiIsImNhbmNlbFZlcmlmeUNhcmQiLCJ2ZXJpZmljYXRpb24iLCJyb3VuZGVkQW1vdW50IiwidG9GaXhlZCIsImlmcmFtZSIsIk51bWJlciIsIm9uTG9va3VwQ29tcGxldGUiLCJfZGF0YSIsIm5leHQiLCJjb2xsZWN0RGV2aWNlRGF0YSIsIlBheW1lbnRNZXRob2RDbGllbnRVbmF2YWlsYWJsZUVycm9yIiwiQlJBSU5UUkVFX1NES19TQ1JJUFRTX0lOVEVHUklUWSIsIkNsaWVudCIsIlBheXBhbENoZWNrb3V0IiwiUGF5cGFsIiwiTG9jYWxQYXltZW50IiwiRGF0YUNvbGxlY3RvciIsIlVzQmFua0FjY291bnQiLCJHb29nbGVQYXltZW50IiwiVGhyZWVEU2VjdXJlIiwiVmlzYUNoZWNrb3V0IiwiVmVubW8iLCJIb3N0ZWRGaWVsZHMiLCJGYXN0bGFuZSIsIk1pc3NpbmdEYXRhRXJyb3JUeXBlIiwiQnJhaW50cmVlU2NyaXB0TG9hZGVyIiwic2NyaXB0TG9hZGVyIiwiYnJhaW50cmVlU0RLVmVyc2lvbk1hbmFnZXIiLCJsb2FkQnJhaW50cmVlTW9kdWxlT3JUaHJvdyIsImxvYWRMb2NhbFBheW1lbnQiLCJsb2FkVXNCYW5rQWNjb3VudCIsImxvYWRHb29nbGVQYXltZW50IiwibG9hZFZpc2FDaGVja291dCIsImxvYWRIb3N0ZWRGaWVsZHMiLCJsb2FkVmlzYUNoZWNrb3V0U2RrIiwidGVzdE1vZGUiLCJWIiwiaGFzaCIsImxvYWRTY3JpcHQiLCJhc3luYyIsImF0dHJpYnV0ZXMiLCJpbnRlZ3JpdHkiLCJjcm9zc29yaWdpbiIsImJyYWludHJlZU1vZHVsZU5hbWUiLCJmaWxlTmFtZSIsImdldEJyYWludHJlZU1vZHVsZSIsImJyYWludHJlZVNka1ZlcnNpb24iLCJzY3JpcHRQYXRoIiwiZ2V0SW50ZWdyaXR5VmFsdWVzQnlNb2R1bGVOYW1lIiwibW9kdWxlTmFtZSIsInRvUmVzb2x2YWJsZU1vZHVsZSIsInJlc29sdmVJZHMiLCJhc3NpZ24iLCJNaXNzaW5nRGF0YUVycm9yIiwiTWlzc2luZ0JpbGxpbmdBZGRyZXNzIiwiTWlzc2luZ0NhcnQiLCJNaXNzaW5nQ29uc2lnbm1lbnRzIiwiTWlzc2luZ0NoZWNrb3V0IiwiTWlzc2luZ0N1c3RvbWVyIiwiTWlzc2luZ0NoZWNrb3V0Q29uZmlnIiwiTWlzc2luZ09yZGVyQ29uZmlnIiwiTWlzc2luZ09yZGVyIiwiTWlzc2luZ09yZGVySWQiLCJNaXNzaW5nUGF5bWVudCIsIk1pc3NpbmdQYXltZW50VG9rZW4iLCJNaXNzaW5nUGF5bWVudE1ldGhvZCIsIk1pc3NpbmdTaGlwcGluZ0FkZHJlc3MiLCJCcmFpbnRyZWVQYXlwYWxDdXN0b21lclN0cmF0ZWd5IiwiZm9ybVBvc3RlciIsImJyYWludHJlZUludGVncmF0aW9uU2VydmljZSIsImJyYWludHJlZXBheXBhbCIsIm1ldGhvZElkIiwiY29udGFpbmVyIiwicGF5bWVudE1ldGhvZCIsImdldFBheW1lbnRNZXRob2RPclRocm93IiwiX2UiLCJsb2FkUGF5bWVudE1ldGhvZCIsImluaXRpYWxpemF0aW9uRGF0YSIsInBheW1lbnRCdXR0b25TdHlsZXMiLCJjaGVja291dFRvcEJ1dHRvblN0eWxlcyIsInBheXBhbENoZWNrb3V0T3B0aW9ucyIsImdldENhcnRPclRocm93IiwicmVuZGVyUGF5UGFsQnV0dG9uIiwiaGFuZGxlRXJyb3IiLCJkZWluaXRpYWxpemUiLCJzaWduSW4iLCJjcmVkZW50aWFscyIsInNpZ25JbkN1c3RvbWVyIiwic2lnbk91dCIsInNpZ25PdXRDdXN0b21lciIsImV4ZWN1dGVQYXltZW50TWV0aG9kQ2hlY2tvdXQiLCJjb250aW51ZVdpdGhDaGVja291dENhbGxiYWNrIiwiYnV0dG9uU3R5bGVzIiwibm9vcCIsImZ1bmRpbmdTb3VyY2UiLCJGVU5ESU5HIiwiUEFZUEFMIiwicGF5cGFsQnV0dG9uUmVuZGVyIiwiQnV0dG9ucyIsImVudiIsInN0eWxlIiwiaGVpZ2h0IiwiY3JlYXRlT3JkZXIiLCJzZXR1cFBheW1lbnQiLCJvbkFwcHJvdmUiLCJhdXRob3JpemVEYXRhIiwidG9rZW5pemVQYXltZW50IiwiaXNFbGlnaWJsZSIsInJlbmRlciIsImxvYWREZWZhdWx0Q2hlY2tvdXQiLCJnZXRDaGVja291dE9yVGhyb3ciLCJvdXRzdGFuZGluZ0JhbGFuY2UiLCJjdXN0b21lciIsImdldEN1c3RvbWVyIiwiYWRkcmVzc2VzIiwic2hpcHBpbmdBZGRyZXNzT3ZlcnJpZGUiLCJjcmVhdGVQYXltZW50Iiwic2hpcHBpbmdBZGRyZXNzRWRpdGFibGUiLCJvZmZlckNyZWRpdCIsInRva2VuaXplUGF5bG9hZCIsInBvc3RGb3JtIiwicGF5bWVudF90eXBlIiwicHJvdmlkZXIiLCJhY3Rpb24iLCJkZXZpY2VfZGF0YSIsImJpbGxpbmdfYWRkcmVzcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJzaGlwcGluZ19hZGRyZXNzIiwiYnV0dG9uQ29udGFpbmVySWQiLCJvbkVycm9yQ2FsbGJhY2siLCJnZXRTY3JpcHRMb2FkZXIiLCJjcmVhdGVGb3JtUG9zdGVyIiwiaWQiLCJCcmFpbnRyZWVQYXlwYWxDcmVkaXRDdXN0b21lclN0cmF0ZWd5IiwiYnJhaW50cmVlcGF5cGFsY3JlZGl0IiwiaGFzUmVuZGVyZWRTbWFydEJ1dHRvbiIsIlBBWUxBVEVSIiwiQ1JFRElUIiwiZm9yRWFjaCIsImlzSW52YWxpZFN0eWxlT3B0aW9uIiwic3R5bGVPcHRpb24iLCJnZXRGYXN0bGFuZVN0eWxlcyIsInN0eWxlU2V0dGluZ3MiLCJ1aVN0eWxlcyIsImZhc3RsYW5lU3R5bGVzIiwib21pdEJ5IiwiaW5wdXQiLCJ0b2dnbGUiLCJ0ZXh0Qm9keSIsInRleHQiLCJib2R5IiwidGV4dENhcHRpb24iLCJjYXB0aW9uIiwiYnJhbmRpbmciLCJrZXlzIiwibGVuZ3RoIiwiY2xlYW5VcEZhc3RsYW5lU3R5bGVzIiwiZmFzdGxhbmVSb290U2V0dGluZ3NCYWNrZ3JvdW5kQ29sb3IiLCJlcnJvckNvbG9yIiwiZmFzdGxhbmVSb290U2V0dGluZ3NFcnJvckNvbG9yIiwiZm9udEZhbWlseSIsImZhc3RsYW5lUm9vdFNldHRpbmdzRm9udEZhbWlseSIsImZvbnRTaXplQmFzZSIsImZhc3RsYW5lUm9vdFNldHRpbmdzRm9udFNpemUiLCJwYWRkaW5nIiwiZmFzdGxhbmVSb290U2V0dGluZ3NQYWRkaW5nIiwicHJpbWFyeUNvbG9yIiwiZmFzdGxhbmVSb290U2V0dGluZ3NQcmltYXJ5Q29sb3IiLCJib3JkZXJSYWRpdXMiLCJmYXN0bGFuZUlucHV0U2V0dGluZ3NCb3JkZXJSYWRpdXMiLCJib3JkZXJDb2xvciIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0JvcmRlckNvbG9yIiwiZm9jdXNCb3JkZXJDb2xvciIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0ZvY3VzQm9yZGVyQmFzZSIsImJhY2tncm91bmRDb2xvciIsImZhc3RsYW5lSW5wdXRTZXR0aW5nc0JhY2tncm91bmRDb2xvciIsImJvcmRlcldpZHRoIiwiZmFzdGxhbmVJbnB1dFNldHRpbmdzQm9yZGVyV2lkdGgiLCJ0ZXh0Q29sb3JCYXNlIiwiZmFzdGxhbmVJbnB1dFNldHRpbmdzVGV4dENvbG9yQmFzZSIsImNvbG9yUHJpbWFyeSIsImZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclByaW1hcnkiLCJjb2xvclNlY29uZGFyeSIsImZhc3RsYW5lVG9nZ2xlU2V0dGluZ3NDb2xvclNlY29uZGFyeSIsImNvbG9yIiwiZmFzdGxhbmVUZXh0Qm9keVNldHRpbmdzQ29sb3IiLCJmb250U2l6ZSIsImZhc3RsYW5lVGV4dEJvZHlTZXR0aW5nc0ZvbnRTaXplIiwiZmFzdGxhbmVUZXh0Q2FwdGlvblNldHRpbmdzQ29sb3IiLCJmYXN0bGFuZVRleHRDYXB0aW9uU2V0dGluZ3NGb250U2l6ZSIsImZhc3RsYW5lQnJhbmRpbmdTZXR0aW5ncyIsIm1lcmdlRmFzdGxhbmVTdHlsZXMiLCJUb3RhbFByaWNlU3RhdHVzVHlwZSIsIkJyYWludHJlZU9yZGVyU3RhdHVzIiwiTm9uSW5zdGFudExvY2FsUGF5bWVudE1ldGhvZHMiLCJCcmFpbnRyZWVGYXN0bGFuZUF1dGhlbnRpY2F0aW9uU3RhdGUiLCJCcmFpbnRyZWVFcnJvclR5cGUiLCJCcmFpbnRyZWVFcnJvckNvZGUiLCJCcmFpbnRyZWVTdXBwb3J0ZWRDYXJkQnJhbmRzIiwiVW50cnVzdGVkU2hpcHBpbmdDYXJkVmVyaWZpY2F0aW9uVHlwZSIsIkJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXJTdHJhdGVneSIsImJyYWludHJlZUZhc3RsYW5lVXRpbHMiLCJpc0FjY2VsZXJhdGVkQ2hlY2tvdXRFbmFibGVkIiwiYnJhaW50cmVlZmFzdGxhbmUiLCJnZXRWYWxpZFBheW1lbnRNZXRob2RPclRocm93IiwiaXNGYXN0bGFuZVN0eWxpbmdFbmFibGVkIiwicGF5cGFsRmFzdGxhbmVTdHlsZXNTZXR0aW5ncyIsImluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3ciLCJjaGVja291dFBheW1lbnRNZXRob2RFeGVjdXRlZCIsImdldEN1c3RvbWVyT3JUaHJvdyIsImlzR3Vlc3QiLCJzaG91bGRSdW5BdXRoZW50aWNhdGlvbkZsb3ciLCJydW5QYXlQYWxBdXRoZW50aWNhdGlvbkZsb3dPclRocm93IiwicHJpbWFyeU1ldGhvZElkIiwic2hvdWxkUnVuQWNjZWxlcmF0ZWRDaGVja291dCIsInZhbGlkUGF5bWVudE1ldGhvZElkIiwiQ29va2llU3RvcmFnZSIsImNvb2tpZUtleSIsImVuY29kZVVSSUNvbXBvbmVudCIsImNvb2tpZSIsInZhbHVlIiwiZmlyc3RJbmRleCIsImluZGV4T2YiLCJsYXN0SW5kZXgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdWJzdHJpbmciLCJzZXQiLCJzZWN1cmUiLCJjb29raWVUZXh0IiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJ0b1VUQ1N0cmluZyIsIm5vdyIsIkRhdGUiLCJtaW51dGVzIiwic2V0VGltZSIsImdldFRpbWUiLCJCcmFpbnRyZWVGYXN0bGFuZVV0aWxzIiwiZ2V0RGV2aWNlU2Vzc2lvbklkIiwiY2FydCIsImdldENhcnQiLCJnZXRCcmFpbnRyZWVGYXN0bGFuZU9yVGhyb3ciLCJnZXRCcmFpbnRyZWVGYXN0bGFuZUNvbXBvbmVudE9yVGhyb3ciLCJGYXN0bGFuZUNhcmRDb21wb25lbnQiLCJzaG91bGRTZXRTaGlwcGluZ09wdGlvbiIsImdldE1ldGhvZElkT3JUaHJvdyIsImxvb2t1cEN1c3RvbWVyQnlFbWFpbCIsInRyaWdnZXJBdXRoZW50aWNhdGlvbkZsb3ciLCJpZGVudGl0eSIsImdldEJpbGxpbmdBZGRyZXNzIiwiaXNGYXN0bGFuZVNoaXBwaW5nT3B0aW9uQXV0b1NlbGVjdEVuYWJsZWQiLCJjdXN0b21lckVtYWlsIiwiY3VzdG9tZXJDb250ZXh0SWQiLCJ1cGRhdGVQYXltZW50UHJvdmlkZXJDdXN0b21lciIsImF1dGhlbnRpY2F0aW9uU3RhdGUiLCJVTlJFQ09HTklaRUQiLCJpbnN0cnVtZW50cyIsInNhdmVTZXNzaW9uSWRUb0Nvb2tpZXMiLCJwcm9maWxlRGF0YSIsInBob25lTnVtYmVyIiwiQ0FOQ0VMRUQiLCJyZW1vdmVTZXNzaW9uSWRGcm9tQ29va2llcyIsInNoaXBwaW5nQWRkcmVzc2VzIiwibWFwUGF5UGFsVG9CY0FkZHJlc3MiLCJwYXlwYWxCaWxsaW5nQWRkcmVzcyIsImdldFBheVBhbEJpbGxpbmdBZGRyZXNzZXMiLCJiaWxsaW5nQWRkcmVzc2VzIiwiY2FyZCIsIm1hcFBheVBhbFRvQmNJbnN0cnVtZW50IiwibWVyZ2VTaGlwcGluZ0FuZEJpbGxpbmdBZGRyZXNzZXMiLCJsaW5lSXRlbXMiLCJwaHlzaWNhbEl0ZW1zIiwidXBkYXRlQmlsbGluZ0FkZHJlc3MiLCJkaWdpdGFsSXRlbXMiLCJkaWdpdGFsSXRlbUJpbGxpbmciLCJ1cGRhdGVTaGlwcGluZ0FkZHJlc3MiLCJzZXRTaGlwcGluZ09wdGlvbiIsImdldFNlc3Npb25JZEZyb21Db29raWVzIiwic2Vzc2lvbklkIiwic2V0RGF0ZSIsImdldERhdGUiLCJtYXAiLCJwYXltZW50U291cmNlIiwiYnJhbmQiLCJleHBpcnkiLCJsYXN0RGlnaXRzIiwiYmluRGV0YWlscyIsImV4cGlyeVllYXIiLCJleHBpcnlNb250aCIsImJpZ3BheVRva2VuIiwiZGVmYXVsdEluc3RydW1lbnQiLCJpaW4iLCJsYXN0NCIsInRydXN0ZWRTaGlwcGluZ0FkZHJlc3MiLCJ1bnRydXN0ZWRTaGlwcGluZ0NhcmRWZXJpZmljYXRpb25Nb2RlIiwiUEFOIiwicGhvbmVzIiwiY291bnRyaWVzIiwiZ2V0Q291bnRyaWVzIiwiZ2V0Q291bnRyeU5hbWVCeUNvdW50cnlDb2RlIiwibWF0Y2hlZENvdW50cnkiLCJjb21wYW55IiwiZXh0ZW5kZWRBZGRyZXNzIiwic3RhdGVPclByb3ZpbmNlIiwicmVnaW9uIiwiY3VzdG9tRmllbGRzIiwiZ2l2ZW5fbmFtZSIsInN1cm5hbWUiLCJpc0VxdWFsIiwibm9ybWFsaXplQWRkcmVzcyIsIm9taXQiLCJmaWx0ZXJlZEJpbGxpbmdBZGRyZXNzZXMiLCJmaWx0ZXIiLCJzb21lIiwiY29uc2lnbm1lbnRzIiwiZ2V0Q29uc2lnbm1lbnRzIiwiYXZhaWxhYmxlU2hpcHBpbmdPcHRpb25zIiwicmVjb21tZW5kZWRTaGlwcGluZ09wdGlvbiIsIm9wdGlvbiIsImlzUmVjb21tZW5kZWQiLCJzZWxlY3RlZE9wdGlvbiIsInNlbGVjdFNoaXBwaW5nT3B0aW9uIiwiQnJhaW50cmVlU2RrIiwic2V0Q2xpZW50VG9rZW4iLCJnZXREYXRhQ29sbGVjdG9yT3JUaHJvdyIsImVtcHR5RGF0YUNvbGxlY3RvciIsIktvdW50Tm90RW5hYmxlZCIsImdldEJyYWludHJlZUdvb2dsZVBheW1lbnQiLCJnb29nbGVQYXltZW50IiwiYnJhaW50cmVlR29vZ2xlUGF5bWVudCIsImdldEJyYWludHJlZVRocmVlRFMiLCJnZXRCcmFpbnRyZWVMb2NhbFBheW1lbnQiLCJtZXJjaGFudEFjY291bnRJZCIsImJyYWludHJlZUxvY2FsUGF5bWVudCIsImxvY2FsUGF5bWVudENyZWF0b3IiLCJnZXRVc0JhbmtBY2NvdW50IiwidXNCYW5rQWNjb3VudCIsImdldEJyYWludHJlZVZpc2FDaGVja291dCIsInZpc2FDaGVja291dCIsImdldFZpc2FDaGVja291dFNkayIsInZpc2FDaGVja291dFNESyIsImdldFZlbm1vQ2hlY2tvdXRPclRocm93IiwiYnJhaW50cmVlVmVubW8iLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiQnJhaW50cmVlVmlzYUNoZWNrb3V0Q3VzdG9tZXJTdHJhdGVneSIsImJyYWludHJlZVNkayIsImJ1dHRvbkNsYXNzTmFtZSIsImJyYWludHJlZXZpc2FjaGVja291dCIsInZpc2FDaGVja291dE9wdGlvbnMiLCJjaGVja291dCIsImdldFN0b3JlQ29uZmlnT3JUaHJvdyIsImJyYWludHJlZVZpc2FDaGVja291dCIsInZpc2FDaGVja291dEluc3RhbmNlIiwiaW5pdE9wdGlvbnMiLCJjcmVhdGVJbml0T3B0aW9ucyIsInBheW1lbnRSZXF1ZXN0IiwiY3VycmVuY3lDb2RlIiwic3VidG90YWwiLCJTdHJpbmciLCJzZXR0aW5ncyIsImxvY2FsZSIsInN0b3JlUHJvZmlsZSIsInN0b3JlTGFuZ3VhZ2UiLCJzaGlwcGluZyIsImNvbGxlY3RTaGlwcGluZyIsInNpZ25JbkJ1dHRvbiIsImNyZWF0ZVNpZ25JbkJ1dHRvbiIsImluaXQiLCJvbiIsInBheW1lbnRTdWNjZXNzUGF5bG9hZCIsImxvYWRDaGVja291dCIsInZpc2liaWxpdHkiLCJwYXlsb2FkIiwiZ2V0U2hpcHBpbmdBZGRyZXNzIiwiYmlsbGluZyIsIm1hcFRvVmlzYUNoZWNrb3V0QWRkcmVzcyIsInVzZXJEYXRhIiwiY2FyZEluZm9ybWF0aW9uIiwidXNlckVtYWlsIiwiY2FyZF9pbmZvcm1hdGlvbiIsImNhcmRUeXBlIiwibGFzdFR3byIsImdldEFkZHJlc3MiLCJjb250YWluZXJJZCIsImJ1dHRvbkNsYXNzIiwicXVlcnlTZWxlY3RvciIsImluc2VydFZpc2FDaGVja291dEJ1dHRvbiIsInZpc2FDaGVja291dEJ1dHRvbiIsImNyZWF0ZUVsZW1lbnQiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsIndpZHRoIiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJob3N0V2luZG93IiwiQnV5Tm93Q2FydENyZWF0aW9uRXJyb3IiLCJnZXRWYWxpZEJ1dHRvblN0eWxlIiwiZnVuZGluZ2ljb25zIiwibGF5b3V0Iiwic2hhcGUiLCJzaXplIiwidGFnbGluZSIsInZhbGlkU3R5bGVzIiwiZ2V0VmFsaWRIZWlnaHQiLCJpc05pbCIsImN1cnJlbnRIZWlnaHQiLCJpc05hTiIsIkJyYWludHJlZVBheXBhbEJ1dHRvblN0cmF0ZWd5IiwiYnV5Tm93SW5pdGlhbGl6ZU9wdGlvbnMiLCJzaG91bGRQcm9jZXNzUGF5bWVudCIsIm9uQXV0aG9yaXplRXJyb3IiLCJvbkVsaWdpYmlsaXR5RmFpbHVyZSIsIm9uUGF5bWVudEVycm9yIiwiYnV5Tm93Q2FydCIsImdldEJ1eU5vd0NhcnRSZXF1ZXN0Qm9keSIsImNyZWF0ZUJ1eU5vd0NhcnQiLCJidXlOb3dDYXJ0SWQiLCJjYXJ0QW1vdW50IiwiY2FydF9pZCIsImJ1eU5vd0NhcmRSZXF1ZXN0Qm9keSIsIkJyYWludHJlZU1lc3NhZ2VzIiwicGxhY2VtZW50IiwibWVzc2FnaW5nQ29udGFpbmVyIiwiZ2V0QmlsbGluZ0FkZHJlc3NPclRocm93IiwicGF5cGFsQk5QTENvbmZpZ3VyYXRpb24iLCJiYW5uZWRJZCIsIlBBWU1FTlQiLCJiYW5uZXJDb25maWd1cmF0aW9uIiwic3RhdHVzIiwiQ0FSVCIsInJlbW92ZUF0dHJpYnV0ZSIsIk1lc3NhZ2VzIiwiYnV5ZXJDb3VudHJ5IiwiZ2V0UGF5cGFsTWVzc2FnZXNTdHlsZXNGcm9tQk5QTENvbmZpZyIsIm1lc3NhZ2VzU3R5bGVzIiwibG9nbyIsInBvc2l0aW9uIiwicmF0aW8iLCJCcmFpbnRyZWVQYXlwYWxDcmVkaXRCdXR0b25TdHJhdGVneSIsImJyYWludHJlZU1lc3NhZ2VzIiwiaXNCYW5uZXJJbXBsZW1lbnRhdGlvbkRpc2FibGVkIiwibWVzc2FnaW5nQ29udGFpbmVySWQiLCJyZW5kZXJQYXlQYWxNZXNzYWdlcyIsImJ1dHRvblN0eWxlIiwibGFiZWwiLCJCcmFpbnRyZWVWaXNhQ2hlY2tvdXRCdXR0b25TdHJhdGVneSIsInBheW1lbnRTdWNjZXNzIiwidG9WaXNhQ2hlY2tvdXRBZGRyZXNzIiwiYWxpZ25JdGVtcyIsImdldFZlbm1vQnV0dG9uU3R5bGUiLCJjIiwiV0hJVEUiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRJbWFnZSIsIkJMVUUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiY3Vyc29yIiwidHJhbnNpdGlvbiIsIm1pbkhlaWdodCIsIm1pbldpZHRoIiwiYm9yZGVyIiwiQnJhaW50cmVlVmVubW9CdXR0b25TdHJhdGVneSIsImJyYWludHJlZXZlbm1vIiwiY2FydEJ1dHRvblN0eWxlcyIsInJlbmRlclZlbm1vQnV0dG9uIiwiaXNVbnN1cHBvcnRlZEJyb3dzZXJFcnJvciIsImhhbmRsZUluaXRpYWxpemF0aW9uVmVubW9FcnJvciIsImNhcnRSZXF1ZXN0Qm9keSIsInJlbW92ZVZlbm1vQ29udGFpbmVyIiwiYnV0dG9uQ29udGFpbmVyIiwidmVubW9CdXR0b24iLCJzZXRBdHRyaWJ1dGUiLCJhZGRFdmVudExpc3RlbmVyIiwiYnV5Qm93Q2FydCIsImhhbmRsZVBvc3RGb3JtIiwiaXNWYXVsdGVkSW5zdHJ1bWVudCIsImluc3RydW1lbnRJZCIsIk9yZGVyRmluYWxpemF0aW9uTm90UmVxdWlyZWRFcnJvciIsImlzSG9zdGVkSW5zdHJ1bWVudExpa2UiLCJzaG91bGRTZXRBc0RlZmF1bHRJbnN0cnVtZW50IiwiUGF5bWVudE1ldGhvZEZhaWxlZEVycm9yIiwiaXNVc0JhbmtBY2NvdW50SW5zdHJ1bWVudExpa2UiLCJCcmFpbnRyZWVBY2hQYXltZW50U3RyYXRlZ3kiLCJicmFpbnRyZWVhY2giLCJnZXRNYW5kYXRlVGV4dCIsImhhbmRsZUJyYWludHJlZUVycm9yIiwiZXhlY3V0ZSIsIm9yZGVyUmVxdWVzdCIsIm9yZGVyIiwiaXNTdWJtaXR0aW5nV2l0aFZhdWx0aW5nSW5zdHJ1bWVudCIsInRva2VuaXplUGF5bWVudEZvclZhdWx0ZWRJbnN0cnVtZW50Iiwic3VibWl0UGF5bWVudFBheWxvYWQiLCJwcmVwYXJlUGF5bWVudERhdGFGb3JWYXVsdGVkSW5zdHJ1bWVudCIsInByZXBhcmVQYXltZW50RGF0YSIsInN1Ym1pdE9yZGVyIiwic3VibWl0UGF5bWVudCIsImZpbmFsaXplIiwiZ2V0VXNCYW5rQWNjb3VudE9yVGhyb3ciLCJtYW5kYXRlVGV4dCIsImJhbmtEZXRhaWxzIiwiZ2V0QmFua0RldGFpbHMiLCJpc1ZhdWx0aW5nRW5hYmxlZCIsInJvdXRpbmdOdW1iZXIiLCJhY2NvdW50TnVtYmVyIiwiZGV2aWNlU2Vzc2lvbklkIiwiZm9ybWF0dGVkUGF5bG9hZCIsInRva2VuaXplZF9iYW5rX2FjY291bnQiLCJpc3N1ZXIiLCJtYXNrZWRfYWNjb3VudF9udW1iZXIiLCJzdWJzdHIiLCJ0b2tlbiIsIm93bmVyc2hpcFR5cGUiLCJ0b0xvd2VyQ2FzZSIsImFjY291bnRUeXBlIiwiYnVzaW5lc3NOYW1lIiwiT3ZlcmxheSIsImNsb3NlRWxlbWVudCIsIm1haW5FbGVtZW50IiwiX2NyZWF0ZUVsZW1lbnRzIiwiX2VsZW1lbnQiLCJfY2xvc2VFbGVtZW50IiwiX21haW5FbGVtZW50IiwicGFyZW50RWxlbWVudCIsIl9yZWdpc3RlckNsaWNrIiwic2V0VGltZW91dCIsIm9wYWNpdHkiLCJfdW5yZWdpc3RlckNsaWNrIiwiX3JlbW92ZUFmdGVyVHJhbnNpdGlvbiIsImJhY2tncm91bmQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJoYXNDbG9zZUJ1dHRvbiIsImlubmVySHRtbCIsImNsYXNzTGF5b3V0IiwiY2xhc3NDbG9zZSIsImNsYXNzT3ZlcmxheVRleHQiLCJvdmVybGF5VGV4dCIsImFkZENsYXNzTGF5b3V0IiwiaW5uZXJUZXh0IiwiZ2V0T3ZlcmxheVN0eWxlIiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkNsaWNrQ2xvc2UiLCJoYW5kbGVUcmFuc2l0aW9uIiwiZXZlbnQiLCJwcm9wZXJ0eU5hbWUiLCJERUZBVUxUX1NUWUxFUyIsIlJPVEFUSU9OX0FOSU1BVElPTiIsIkxvYWRpbmdJbmRpY2F0b3IiLCJjb250YWluZXJTdHlsZXMiLCJkZWZpbmVBbmltYXRpb24iLCJidWlsZENvbnRhaW5lciIsImluZGljYXRvciIsImJ1aWxkSW5kaWNhdG9yIiwicGFyZW50SWQiLCJwYXJlbnQiLCJoaWRlIiwiaGFuZGxlVHJhbnNpdGlvbkVuZCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInRvcCIsInNldFN0eWxlQXR0cmlidXRlIiwibWFyZ2luIiwidHJhbnNmb3JtIiwidHJhbnNmb3JtU3R5bGUiLCJhbmltYXRpb24iLCJhdHRycyIsImsiLCJzZXRQcm9wZXJ0eSIsImhlYWQiLCJzaGVldCIsIkNTU1N0eWxlU2hlZXQiLCJpbnNlcnRSdWxlIiwiTE9BRElOR19JTkRJQ0FUT1JfU1RZTEVTIiwiQnJhaW50cmVlUGF5cGFsUGF5bWVudFN0cmF0ZWd5IiwibG9hZGluZ0luZGljYXRvciIsImJyYWludHJlZU9wdGlvbnMiLCJiYW5uZXJDb250YWluZXJJZCIsImxvYWRQYXlwYWxDaGVja291dEluc3RhbmNlIiwidXNlU3RvcmVDcmVkaXQiLCJpc1Byb3ZpZGVyRXJyb3IiLCJjbG9zZSIsIl9yZXNvbHZlIiwiYnJhaW50cmVlVG9rZW5pemVQYXlsb2FkIiwiZ3JhbmRUb3RhbCIsImdldE91dHN0YW5kaW5nQmFsYW5jZSIsImdldFBheW1lbnRNZXRob2QiLCJ2YXVsdFBheW1lbnRJbnN0cnVtZW50IiwidmF1bHRfcGF5bWVudF9pbnN0cnVtZW50Iiwic2V0X2FzX2RlZmF1bHRfc3RvcmVkX2luc3RydW1lbnQiLCJkZXZpY2VfaW5mbyIsInBheXBhbF9hY2NvdW50IiwicGF5bWVudE1ldGhvZElkIiwic2hvdWxkU2hvd1BheVBhbENyZWRpdEJhbm5lciIsInN1Ym1pdEZvcm0iLCJvblJlbmRlckJ1dHRvbiIsImxvYWRpbmdJbmRpY2F0b3JDb250YWluZXIiLCJ0b2dnbGVMb2FkaW5nSW5kaWNhdG9yIiwidG9rZW5pemVQYXltZW50T3JUaHJvdyIsIm9uQ2FuY2VsIiwiaXNCcmFpbnRyZWVQYXlwYWxQcm92aWRlckVycm9yIiwiZSIsInByb3ZpZGVyX2Vycm9yIiwiaXNMb2FkaW5nIiwiQ29udGVudFR5cGUiLCJTREtfVkVSU0lPTl9IRUFERVJTIiwiQnJhaW50cmVlUmVxdWVzdFNlbmRlciIsInJlcXVlc3RTZW5kZXIiLCJnZXRPcmRlclN0YXR1cyIsInVybCIsImhlYWRlcnMiLCJKc29uIiwiREVGQVVMVF9SRVNQT05TRSIsIlJlcXVlc3RFcnJvciIsIlBheW1lbnRNZXRob2RJbnZhbGlkRXJyb3IiLCJUaW1lb3V0RXJyb3IiLCJCcmFpbnRyZWVMb2NhbE1ldGhvZHNQYXltZW50U3RyYXRlZ3kiLCJicmFpbnRyZWVSZXF1ZXN0U2VuZGVyIiwicG9sbGluZ0ludGVydmFsIiwibWF4UG9sbGluZ0ludGVydmFsVGltZSIsImlzTFBNc1VwZGF0ZUV4cGVyaW1lbnRFbmFibGVkIiwicG9sbGluZ1RpbWVyIiwic3RvcFBvbGxpbmciLCJpc1BvbGxpbmdFbmFibGVkIiwiZ2F0ZXdheUlkIiwiYnJhaW50cmVlbG9jYWxtZXRob2RzIiwibWVyY2hhbnRJZCIsImlzTm9uSW5zdGFudFBheW1lbnRNZXRob2QiLCJleGVjdXRlV2l0aE5vdEluc3RhbnRMUE0iLCJleGVjdXRlV2l0aEluc3RhbnRMUE0iLCJiYXNpY1BheW1lbnREYXRhIiwiZ2V0TFBNc0Jhc2ljUGF5bWVudERhdGEiLCJpc0JyYWludHJlZVJlZGlyZWN0RXJyb3IiLCJyZWRpcmVjdFVybCIsImFkZGl0aW9uYWxfYWN0aW9uX3JlcXVpcmVkIiwicmVkaXJlY3RfdXJsIiwibG9jYXRpb24iLCJyZXBsYWNlIiwic3RhcnRQYXltZW50IiwiZ2V0SW5zdGFudExQTUNvbmZpZyIsImdldEluc3RhbnRMUE1DYWxsYmFjayIsImlzU2hpcHBpbmdSZXF1aXJlZCIsImNoZWNrb3V0VXJsIiwibGlua3MiLCJjaGVja291dExpbmsiLCJwYXltZW50VHlwZSIsImZhbGxiYWNrIiwiYnV0dG9uVGV4dCIsInNoaXBwaW5nQWRkcmVzc1JlcXVpcmVkIiwiZ2l2ZW5OYW1lIiwib25QYXltZW50U3RhcnQiLCJzdGFydCIsIm9yZGVySWQiLCJwYXltZW50SWQiLCJvcmRlcl9pZCIsImlzQnJhaW50cmVlT3JkZXJTYXZlZFJlc3BvbnNlIiwib3JkZXJfaWRfc2F2ZWRfc3VjY2Vzc2Z1bGx5IiwiaW5pdGlhbGl6ZVBvbGxpbmdNZWNoYW5pc20iLCJzdGFydFBheW1lbnRFcnJvciIsInBheWxvYWREYXRhIiwicmVzZXRQb2xsaW5nTWVjaGFuaXNtIiwidG9VcHBlckNhc2UiLCJyZXNvbHZlUHJvbWlzZSIsInJlamVjdFByb21pc2UiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwib3JkZXJTdGF0dXMiLCJwYXJhbXMiLCJ1c2VNZXRhZGF0YSIsImlzT3JkZXJQZW5kaW5nIiwiUGVuZGluZyIsImlzT3JkZXJBcHByb3ZlZCIsIkNvbXBsZXRlZCIsImlzUG9sbGluZ0Vycm9yIiwiRmFpbGVkIiwiZGVpbml0aWFsaXplUG9sbGluZ01lY2hhbmlzbSIsInJlaW5pdGlhbGl6ZVN0cmF0ZWd5IiwiY3JlYXRlUmVxdWVzdFNlbmRlciIsImdhdGV3YXkiLCJpc0JyYWludHJlZUFjY2VsZXJhdGVkQ2hlY2tvdXRDdXN0b21lciIsIkJyYWludHJlZUZhc3RsYW5lUGF5bWVudFN0cmF0ZWd5Iiwib25Jbml0Iiwib25DaGFuZ2UiLCJpc1RocmVlRFNFeHBlcmltZW50RW5hYmxlZCIsImlzM0RTRW5hYmxlZCIsImlzM2RzRW5hYmxlZCIsImluaXRpYWxpemVDYXJkQ29tcG9uZW50IiwicmVuZGVyQnJhaW50cmVlQ2FyZENvbXBvbmVudCIsImhhbmRsZUJyYWludHJlZVN0b3JlZEluc3RydW1lbnRDaGFuZ2UiLCJwYXltZW50UGF5bG9hZCIsInByZXBhcmVQYXltZW50UGF5bG9hZCIsImJyYWludHJlZUNhcmRDb21wb25lbnQiLCJmdWxsTmFtZSIsImNhcmRDb21wb25lbnRPcHRpb25zIiwiZmllbGRzIiwicHJlZmlsbCIsImVuYWJsZWQiLCJwYXlwYWxQYXltZW50Q29tcG9uZW50IiwiZ2V0QnJhaW50cmVlQ2FyZENvbXBvbmVudE9yVGhyb3ciLCJwYXlwYWxJbnN0cnVtZW50IiwiZ2V0UGF5UGFsSW5zdHJ1bWVudHMiLCJ0aHJlZURTVG9rZW4iLCJwYXlwYWxfZmFzdGxhbmVfdG9rZW4iLCJnZXRQYXltZW50VG9rZW4iLCJwYXltZW50VG9rZW4iLCJtYXBUb1BheVBhbEFkZHJlc3MiLCJiaW5HdWVzdCIsImdldE9yZGVyT3JUaHJvdyIsIm9yZGVyQW1vdW50IiwidmVyaWZ5RXJyb3IiLCJwYXltZW50UHJvdmlkZXJDdXN0b21lciIsImdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyIiwiYnJhaW50cmVlUGF5bWVudFByb3ZpZGVyQ3VzdG9tZXIiLCJwYXlwYWxGYXN0bGFuZVNlc3Npb25JZCIsImdldFBheW1lbnRQcm92aWRlckN1c3RvbWVyT3JUaHJvdyIsInBheXBhbEF4b1NkayIsInNlbGVjdGlvbkNoYW5nZWQiLCJzZWxlY3RlZENhcmQiLCJwcm9maWxlIiwic2hvd0NhcmRTZWxlY3RvciIsImJyYWludHJlZUZhc3RsYW5lQ3VzdG9tZXIiLCJzZWxlY3RlZEluc3RydW1lbnRzIiwiQnJhaW50cmVlVmlzYUNoZWNrb3V0UGF5bWVudFN0cmF0ZWd5Iiwib25QYXltZW50U2VsZWN0IiwidmlzYUNoZWNrb3V0U2RrIiwiQnJhaW50cmVlVmVubW9QYXltZW50U3RyYXRlZ3kiLCJ2ZW5tb09wdGlvbnMiLCJpbml0aWFsaXplQnJhaW50cmVlVmVubW8iLCJpc0JyYWludHJlZVZlbm1vV2ViRmFsbGJhY2tTdXBwb3J0IiwibW9iaWxlV2ViRmFsbEJhY2siLCJ0b2tlbml6ZVJlc3VsdCIsImJyYWludHJlZVZlbm1vVG9rZW5pemUiLCJCcmFpbnRyZWVDcmVkaXRDYXJkUGF5bWVudFN0cmF0ZWd5IiwiYnJhaW50cmVlSG9zdGVkRm9ybSIsImlzSG9zdGVkUGF5bWVudEZvcm1FbmFibGVkIiwiZm9ybSIsInVuc3VwcG9ydGVkQ2FyZEJyYW5kcyIsImlzSG9zdGVkRm9ybUluaXRpYWxpemVkIiwiaXNJbml0aWFsaXplZCIsInNob3VsZEluaXRpYWxpemVCcmFpbnRyZWVGYXN0bGFuZSIsInByZXBhcmVIb3N0ZWRQYXltZW50RGF0YSIsInByb2Nlc3NBZGRpdGlvbmFsQWN0aW9uIiwiY29tbW9uUGF5bWVudERhdGEiLCJpc1N1Ym1pdHRpbmdXaXRoU3RvcmVkQ2FyZCIsInNob3VsZFBlcmZvcm0zRFNWZXJpZmljYXRpb24iLCJ0b2tlbml6ZUZvclN0b3JlZENhcmRWZXJpZmljYXRpb24iLCJ2ZXJpZnlDYXJkV2l0aEhvc3RlZEZvcm0iLCJwYXllcl9hdXRoX3JlcXVlc3QiLCJzdG9yZWRDcmVkaXRDYXJkTm9uY2UiLCJ0aHJlZV9kc19yZXN1bHQiLCJpc0JyYWludHJlZVBheW1lbnRSZXF1ZXN0M0RTRXJyb3IiLCJnZXRDYXJkSW5zdHJ1bWVudE9yVGhyb3ciLCJpc0hvc3RlZEZvcm1FbmFibGVkIiwiYnJhaW50cmVlQ3VzdG9tZXIiLCJpc0JyYWludHJlZUZvcm1GaWVsZHNNYXAiLCJpc0JyYWludHJlZUhvc3RlZEZvcm1FcnJvciIsImludmFsaWRGaWVsZEtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsIkJyYWludHJlZUhvc3RlZEZvcm1UeXBlIiwiQnJhaW50cmVlSG9zdGVkRm9ybSIsImlzSW5pdGlhbGl6ZWRIb3N0ZWRGb3JtIiwiaGFuZGxlQmx1ciIsImZvcm1PcHRpb25zIiwib25CbHVyIiwiZmllbGRUeXBlIiwibWFwRmllbGRUeXBlIiwiZW1pdHRlZEJ5IiwibWFwRXJyb3JzIiwiaGFuZGxlRm9jdXMiLCJvbkZvY3VzIiwiaGFuZGxlQ2FyZFR5cGVDaGFuZ2UiLCJjYXJkcyIsIm9uQ2FyZFR5cGVDaGFuZ2UiLCJoYW5kbGVJbnB1dFN1Ym1pdFJlcXVlc3QiLCJvbkVudGVyIiwiaGFuZGxlVmFsaWRpdHlDaGFuZ2UiLCJvblZhbGlkYXRlIiwiaXNWYWxpZCIsImlzVmFsaWRGb3JtIiwibWFwVmFsaWRhdGlvbkVycm9ycyIsIkNyZWRpdENhcmQiLCJTdG9yZWRDYXJkVmVyaWZpY2F0aW9uIiwibWFwRmllbGRPcHRpb25zIiwiY2FyZEZpZWxkcyIsImNyZWF0ZUhvc3RlZEZpZWxkcyIsIm1hcFN0eWxlT3B0aW9ucyIsIm1hcEJpbGxpbmdBZGRyZXNzIiwibWFwVG9rZW5pemVFcnJvciIsImhvc3RlZEZpZWxkcyIsImhvc3RlZEZpZWxkc09wdGlvbnMiLCJwcmV2ZW50Q3Vyc29ySnVtcHMiLCJzdXBwb3J0ZWRDYXJkQnJhbmRzIiwiY2FyZEJyYW5kIiwiaW5jbHVkZXMiLCJjYXJkTnVtYmVyIiwicGxhY2Vob2xkZXIiLCJpbnRlcm5hbExhYmVsIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiY2FyZEV4cGlyeSIsImNhcmRDb2RlIiwiY2FyZE5hbWUiLCJjYXJkTnVtYmVyVmVyaWZpY2F0aW9uIiwiY2FyZENvZGVWZXJpZmljYXRpb24iLCJtYXBTdHlsZXMiLCJmb250V2VpZ2h0IiwiZm9jdXMiLCJDYXJkTnVtYmVyVmVyaWZpY2F0aW9uIiwiQ2FyZE51bWJlciIsIkNhcmRFeHBpcnkiLCJDYXJkQ29kZVZlcmlmaWNhdGlvbiIsIkNhcmRDb2RlIiwiQ2FyZE5hbWUiLCJlbnRyaWVzIiwiaXNWYWxpZFBhcmFtIiwiaXNQb3RlbnRpYWxseVZhbGlkIiwicmVkdWNlIiwicmVzdWx0IiwiZmllbGRLZXkiLCJjcmVhdGVJbnZhbGlkRXJyb3IiLCJpc1N0b3JlZENhcmQiLCJjcmVhdGVSZXF1aXJlZEVycm9yIiwiZm9ybUZpZWxkcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/braintree.js\n\n}");

/***/ })

}]);