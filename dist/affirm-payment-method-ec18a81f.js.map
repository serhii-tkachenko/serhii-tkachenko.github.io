{"version":3,"file":"affirm-payment-method-ec18a81f.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/utility/amount-transformer.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/items-require-shipping.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirm-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/affirm-integration/src/affirmJs.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/affirm-integration/src/create-affirm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/affirm-integration/src/AffirmPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        {\n            message,\n            errors,\n        }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {},\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'There is a problem processing your payment. Please try again later.',\n        });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * 10 ** this._decimalPlaces);\n    }\n}\n","export interface Affirm {\n    checkout: AffirmCheckout;\n    ui: {\n        error: {\n            on(event: string, callback: () => void): void;\n        };\n        ready(callback: () => void): void;\n    };\n}\n\nexport interface AffirmCheckout {\n    (options: AffirmRequestData): void;\n    open(modalOptions: AffirmCallback): void;\n    init(): void;\n}\n\ninterface AffirmCallback {\n    onFail(onFail: AffirmFailResponse): void;\n    onSuccess(success: AffirmSuccessResponse): void;\n}\n\nexport interface AffirmHostWindow extends Window {\n    affirm?: Affirm;\n}\n\nexport interface AffirmSuccessResponse {\n    checkout_token: string;\n    created: string;\n}\n\nexport interface AffirmFailResponse {\n    reason: string;\n}\n\nexport interface AffirmRequestData {\n    merchant: {\n        user_confirmation_url: string;\n        user_cancel_url: string;\n        user_confirmation_url_action?: string;\n        name?: string;\n    };\n    shipping: AffirmAddress;\n    billing?: AffirmAddress;\n    items: AffirmItem[];\n    discounts: AffirmDiscount;\n    metadata: {\n        shipping_type: string;\n        entity_name?: string;\n        webhook_session_id?: string;\n        mode?: string;\n        platform_type: string;\n        platform_version: string;\n        platform_affirm: string;\n    };\n    order_id?: string;\n    shipping_amount: number;\n    tax_amount: number;\n    total: number;\n}\n\nexport interface AffirmItem {\n    display_name: string;\n    sku: string;\n    unit_price: number;\n    qty: number;\n    item_image_url: string;\n    item_url: string;\n    categories?: string[][];\n}\n\nexport interface AffirmDiscount {\n    [key: string]: {\n        discount_amount: number;\n        discount_display_name: string;\n    };\n}\n\nexport interface AffirmAddress {\n    name: {\n        first: string;\n        last: string;\n        full?: string;\n    };\n    address: {\n        line1: string;\n        line2?: string;\n        city: string;\n        state: string;\n        zipcode: string;\n        country?: string;\n    };\n    phone_number?: string;\n    email?: string;\n}\n\nexport enum AFFIRM_SCRIPTS {\n    PROD = '//cdn1.affirm.com/js/v2/affirm.js',\n    SANDBOX = '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n}\n","import {\n    AmountTransformer,\n    Consignment,\n    itemsRequireShipping,\n    LineItemCategory,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    Order,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentMethodInvalidError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    Affirm,\n    AffirmAddress,\n    AffirmDiscount,\n    AffirmFailResponse,\n    AffirmItem,\n    AffirmRequestData,\n    AffirmSuccessResponse,\n} from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private affirm?: Affirm;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private affirmScriptLoader: AffirmScriptLoader,\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<void> {\n        await this.paymentIntegrationService.loadPaymentMethod(options.methodId);\n\n        const state = this.paymentIntegrationService.getState();\n\n        const {\n            clientToken,\n            config: { testMode },\n        } = state.getPaymentMethodOrThrow(options.methodId);\n\n        if (!clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this.affirm = await this.affirmScriptLoader.load(clientToken, testMode);\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const methodId = payload.payment?.methodId;\n        const { useStoreCredit } = payload;\n\n        if (!this.affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.submitOrder({ useStoreCredit }, options);\n\n        const affirmCheckout = await this.initializeAffirmCheckout();\n\n        const paymentPayload = {\n            methodId,\n            paymentData: { nonce: affirmCheckout.checkout_token },\n        };\n\n        await this.paymentIntegrationService.submitPayment(paymentPayload);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this.affirm) {\n            this.affirm = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private initializeAffirmCheckout(): Promise<AffirmSuccessResponse> {\n        this.affirm?.checkout(this.getCheckoutInformation());\n\n        return new Promise((resolve, reject) => {\n            this.affirm?.checkout.open({\n                onFail: (failObject: AffirmFailResponse) => {\n                    if (failObject.reason === 'canceled') {\n                        reject(new PaymentMethodCancelledError());\n                    } else {\n                        reject(new PaymentMethodInvalidError());\n                    }\n                },\n                onSuccess: (successObject) => {\n                    resolve(successObject);\n                },\n            });\n            this.affirm?.ui.error.on('close', () => {\n                reject(new PaymentMethodCancelledError());\n            });\n        });\n    }\n\n    private getCheckoutInformation(): AffirmRequestData {\n        const state = this.paymentIntegrationService.getState();\n        const config = state.getStoreConfig();\n        const consignments = state.getConsignments();\n        const order = state.getOrder();\n        const cart = state.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this.getBillingAddress();\n\n        const retrievedShippingAddress = this.getShippingAddress();\n        const shippingAddress =\n            itemsRequireShipping(cart, config) && retrievedShippingAddress\n                ? retrievedShippingAddress\n                : billingAddress;\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: shippingAddress,\n            billing: billingAddress,\n            items: this.getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this.getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this.getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return consignment?.selectedShippingOption ? consignment.selectedShippingOption.type : '';\n    }\n\n    private getBillingAddress(): AffirmAddress {\n        const state = this.paymentIntegrationService.getState();\n        const billingAddress = state.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private getShippingAddress(): AffirmAddress | undefined {\n        const state = this.paymentIntegrationService.getState();\n        const shippingAddress = state.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        order.lineItems.physicalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.digitalItems.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this.getCategories(item.categories),\n            });\n        });\n\n        order.lineItems.giftCertificates.forEach((item) => {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        });\n\n        if (order.lineItems.customItems) {\n            order.lineItems.customItems.forEach((item) => {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            });\n        }\n\n        return items;\n    }\n\n    private getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        order.coupons.forEach((line) => {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        });\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return [[]];\n        }\n\n        return categories.map((categoryTree) => categoryTree.map((category) => category.name));\n    }\n}\n","import { Cart } from '../cart';\nimport { StoreConfig } from '../config';\n\nconst itemsRequireShipping = (cart?: Cart, config?: StoreConfig) => {\n    if (!cart) {\n        return false;\n    }\n\n    if (cart.lineItems.physicalItems.some((lineItem) => lineItem.isShippingRequired)) {\n        return true;\n    }\n\n    if (config && cart.lineItems.customItems) {\n        return cart.lineItems.customItems.length > 0;\n    }\n\n    return false;\n};\n\nexport default itemsRequireShipping;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { Affirm, AFFIRM_SCRIPTS, AffirmHostWindow } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(public affirmWindow: AffirmHostWindow = window) {}\n\n    load(apikey = '', testMode?: boolean): Promise<Affirm> {\n        const scriptURI = testMode ? AFFIRM_SCRIPTS.SANDBOX : AFFIRM_SCRIPTS.PROD;\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this.affirmWindow.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this.affirmWindow.affirm);\n    }\n}\n","/* istanbul ignore file */\n\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable no-plusplus */\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-underscore-dangle */\n/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nimport { Affirm, AffirmHostWindow } from './affirm';\n\ninterface AffirmConfig {\n    public_api_key: string;\n    script: string;\n}\n\nexport default function loadAffirmJS(apiKey: string, scriptURL: string) {\n    const _AFFIRM_CONFIG: AffirmConfig = {\n        public_api_key: apiKey,\n        script: scriptURL,\n    };\n\n    (function foo(\n        m: AffirmHostWindow | any,\n        g: AffirmConfig,\n        n: 'affirm',\n        d: 'checkout',\n        a: 'ui',\n        e: 'script',\n        h: 'ready',\n        c: 'jsReady',\n    ) {\n        const b = m[n] || {};\n        const k = document.createElement(e);\n        const p = document.getElementsByTagName(e)[0];\n        const l = function bar(a: Affirm | any, b: keyof Affirm, c: string) {\n            return function baz() {\n                a[b]._.push([c, arguments]);\n            };\n        };\n\n        b[d] = l(b, d, 'set');\n\n        const f = b[d];\n\n        b[a] = {};\n        b[a]._ = [];\n        f._ = [];\n        b._ = [];\n        b[a][h] = l(b, a, h);\n\n        b[c] = function qux() {\n            b._.push([h, arguments]);\n        };\n\n        let a1 = 0;\n\n        for (\n            const c1 = 'set add save post open empty reset on off trigger ready setProduct'.split(\n                ' ',\n            );\n            a1 < c1.length;\n            a1++\n        ) {\n            f[c1[a1]] = l(b, d, c1[a1]);\n        }\n\n        let a2 = 0;\n\n        for (const c2 = ['get', 'token', 'url', 'items']; a2 < c2.length; a2++) {\n            f[c2[a2]] = function foobar() {};\n        }\n\n        k.async = !0;\n        k.src = g[e];\n\n        if (p.parentNode) {\n            p.parentNode.insertBefore(k, p);\n        }\n\n        delete (g as Partial<AffirmConfig>)[e];\n        f(g);\n        m[n] = b;\n    })(window, _AFFIRM_CONFIG, 'affirm', 'checkout', 'ui', 'script', 'ready', 'jsReady');\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AffirmPaymentStrategy from './affirm-payment-strategy';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nconst createAffirmPaymentStrategy: PaymentStrategyFactory<AffirmPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AffirmPaymentStrategy(paymentIntegrationService, new AffirmScriptLoader());\n};\n\nexport default toResolvableModule(createAffirmPaymentStrategy, [{ id: 'affirm' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createAffirmPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/affirm';\nimport React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AffirmPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    ...rest\n}) => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    const initializeAffirmPayment = useCallback(\n        (options: PaymentInitializeOptions) => {\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createAffirmPaymentStrategy],\n            });\n        },\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            {...rest}\n            checkoutService={checkoutService}\n            deinitializePayment={checkoutService.deinitializePayment}\n            description={description}\n            initializePayment={initializeAffirmPayment}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AffirmPaymentMethod,\n    [{ id: 'affirm' }],\n);\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","trustedShippingAddress","checkoutService","checkoutState","isUsingMultiShipping","data","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","cart","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","length","isInstrumentFeatureAvailable","id","gateway","paymentMethod","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","MissingDataErrorType","NotInitializedErrorType","StandardError","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","PaymentMethodCancelledError","DEFAULT_RESPONSE","body","headers","status","RequestError","response","errors","PaymentMethodInvalidError","AmountTransformer","_decimalPlaces","toInteger","amount","Math","round","AFFIRM_SCRIPTS","AffirmPaymentStrategy","paymentIntegrationService","affirmScriptLoader","initialize","options","loadPaymentMethod","state","getState","clientToken","testMode","getPaymentMethodOrThrow","affirm","load","execute","payload","payment","useStoreCredit","submitOrder","paymentPayload","paymentData","nonce","initializeAffirmCheckout","checkout_token","submitPayment","deinitialize","Promise","resolve","finalize","reject","checkout","getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","on","getStoreConfig","consignments","getConsignments","order","getOrder","amountTransformer","currency","decimalPlaces","billingAddress","getBillingAddress","retrievedShippingAddress","getShippingAddress","shippingAddress","lineItems","physicalItems","some","lineItem","isShippingRequired","customItems","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","billing","items","getItems","metadata","shipping_type","getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","getDiscounts","order_id","orderId","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","consignment","selectedShippingOption","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","forEach","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","categories","getCategories","digitalItems","giftCertificates","listPrice","coupons","line","discountedAmount","code","discount_amount","discount_display_name","displayName","discountAmount","DISCOUNTED_AMOUNT","map","categoryTree","category","PaymentMethodClientUnavailableError","PROD","SANDBOX","AffirmScriptLoader","affirmWindow","window","apikey","scriptURI","m","g","n","d","a","e","h","b","k","document","createElement","p","getElementsByTagName","l","c","_","arguments","f","a1","c1","split","a2","c2","async","src","parentNode","insertBefore","public_api_key","script","module","resolveIds","assign","rest","useMemo","TranslatedString","initializeAffirmPayment","integrations","HostedPaymentComponent","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}