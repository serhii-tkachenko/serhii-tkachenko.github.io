{"version":3,"file":"bolt-payment-method-4dfd26e4.js","mappings":"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","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/bolt-integration/src/BoltClientPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltCustomForm.tsx","webpack://checkout/./packages/bolt-integration/src/BoltEmbeddedPaymentMethod.tsx","webpack://checkout/./packages/bolt-integration/src/BoltPaymentMethod.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CheckoutService, type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createBoltPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/bolt';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedPaymentComponent } from '@bigcommerce/checkout/hosted-payment-integration';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nconst BoltClientPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    ...rest\n}) => {\n    const initializeBoltPayment: CheckoutService['initializePayment'] = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createBoltPaymentStrategy],\n                bolt: {\n                    useBigCommerceCheckout: true,\n                },\n            }),\n        [checkoutService],\n    );\n\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={initializeBoltPayment}\n            method={method}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltClientPaymentMethod;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CheckboxFormField } from '@bigcommerce/checkout/ui';\n\nexport interface BoltCustomFormProps {\n    containerId: string;\n    showCreateAccountCheckbox: boolean;\n}\n\nconst agreementTranslationOptions = {\n    privacyPolicyUrl: 'https://www.bolt.com/privacy/',\n    termsUrl: 'https://www.bolt.com/end-user-terms/',\n};\n\nconst benefitsList = [\n    { id: 'payment.bolt_benefit_1' },\n    { id: 'payment.bolt_benefit_2' },\n    { id: 'payment.bolt_benefit_3' },\n];\n\nconst BoltCreateAccountCheckbox: FunctionComponent = () => {\n    const labelContent = (\n        <>\n            <TranslatedHtml\n                data={agreementTranslationOptions}\n                id=\"payment.bolt_checkbox_agreement\"\n            />\n            <ul>\n                {benefitsList.map(({ id }, key) => (\n                    <li key={key}>\n                        <TranslatedString id={id} />\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n\n    return (\n        <CheckboxFormField\n            additionalClassName=\"form-checkbox form-field--createAccount\"\n            labelContent={labelContent}\n            name=\"shouldCreateAccount\"\n        />\n    );\n};\n\nconst BoltCustomForm: FunctionComponent<BoltCustomFormProps> = ({\n    containerId,\n    showCreateAccountCheckbox,\n}) => {\n    return (\n        <div className=\"form-ccFields\">\n            <div className=\"form-field form-field--bolt-embed\" id={containerId} />\n            {showCreateAccountCheckbox ? <BoltCreateAccountCheckbox /> : null}\n        </div>\n    );\n};\n\nexport default BoltCustomForm;\n","import { type CustomerInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport {\n    createBoltCustomerStrategy,\n    createBoltPaymentStrategy,\n} from '@bigcommerce/checkout-sdk/integrations/bolt';\nimport React, { type FunctionComponent, useCallback, useState } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltCustomForm from './BoltCustomForm';\n\nconst BoltEmbeddedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const [showCreateAccountCheckbox, setShowCreateAccountCheckbox] = useState(false);\n\n    const boltEmbeddedContainerId = 'bolt-embedded';\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const initializeBoltPayment = useCallback(\n        (options: any) =>\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createBoltPaymentStrategy],\n                bolt: {\n                    containerId: boltEmbeddedContainerId,\n                    useBigCommerceCheckout: true,\n                    onPaymentSelect: (hasBoltAccount: boolean) => {\n                        setShowCreateAccountCheckbox(!hasBoltAccount);\n\n                        if (hasBoltAccount) {\n                            setFieldValue('shouldCreateAccount', false);\n                        }\n                    },\n                },\n            }),\n        [checkoutService, boltEmbeddedContainerId, setFieldValue],\n    );\n\n    const initializeBoltCustomer = useCallback(\n        (options: CustomerInitializeOptions) => {\n            return checkoutService.initializeCustomer({\n                ...options,\n                integrations: [createBoltCustomerStrategy],\n            });\n        },\n        [checkoutService],\n    );\n\n    const renderCustomPaymentForm = useCallback(\n        () => (\n            <BoltCustomForm\n                containerId={boltEmbeddedContainerId}\n                showCreateAccountCheckbox={showCreateAccountCheckbox}\n            />\n        ),\n        [boltEmbeddedContainerId, showCreateAccountCheckbox],\n    );\n\n    const { getInstruments, isPaymentDataRequired } = checkoutState.data;\n    const { isInitializingPayment, isLoadingInstruments } = checkoutState.statuses;\n    const instruments = getInstruments(method) || [];\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            containerId=\"boltEmbeddedOneClick\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializeCustomer={initializeBoltCustomer}\n            initializePayment={initializeBoltPayment}\n            instruments={instruments}\n            isInitializing={isInitializingPayment()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={!isGuestCustomer}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument\n            signOut={checkoutService.signOutCustomer}\n            {...rest}\n        />\n    );\n};\n\nexport default BoltEmbeddedPaymentMethod;\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport BoltClientPaymentMethod from './BoltClientPaymentMethod';\nimport BoltEmbeddedPaymentMethod from './BoltEmbeddedPaymentMethod';\n\nconst BoltPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    paymentForm,\n    ...rest\n}) => {\n    const useBoltEmbedded = method.initializationData?.embeddedOneClickEnabled;\n\n    if (useBoltEmbedded) {\n        return (\n            <BoltEmbeddedPaymentMethod\n                checkoutService={checkoutService}\n                checkoutState={checkoutState}\n                method={method}\n                paymentForm={paymentForm}\n                {...rest}\n            />\n        );\n    }\n\n    return (\n        <BoltClientPaymentMethod\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            method={method}\n            paymentForm={paymentForm}\n            {...rest}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    BoltPaymentMethod,\n    [{ id: 'bolt' }],\n);\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","props","description","isInitializing","initializePayment","method","onUnhandledError","noop","deinitializePayment","isAddingNewInstrument","setIsAddingNewInstrument","useState","selectedInstrument","setSelectedInstrument","derivedProps","filterAccountInstruments","instruments","filter","filterTrustedInstruments","checkoutService","checkoutState","isUsingMultiShipping","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","isLoadingInstruments","config","customer","Error","currentMethodInstruments","trustedInstruments","isNewAddress","isInstrumentFeatureAvailable","id","gateway","loadInstruments","getHostedPaymentMethodDerivedProps","isInstrumentFeatureAvailableProp","getDefaultInstrument","useCallback","find","defaultInstrument","handleUseNewInstrument","undefined","handleSelectInstrument","bigpayToken","useEffect","gatewayId","methodId","error","currentSelectedInstrument","isLoading","shouldShowInstrumentFieldset","hideContentWhenLoading","className","A","onSelectInstrument","onUseNewInstrument","instrumentId","isAccountInstrument","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","isInstrumentCardCodeRequired","rest","initializeBoltPayment","options","integrations","bolt","useBigCommerceCheckout","HostedPaymentComponent","agreementTranslationOptions","privacyPolicyUrl","termsUrl","benefitsList","BoltCreateAccountCheckbox","labelContent","TranslatedHtml","map","key","TranslatedString","CheckboxFormField","additionalClassName","name","containerId","showCreateAccountCheckbox","paymentForm","setShowCreateAccountCheckbox","boltEmbeddedContainerId","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","onPaymentSelect","hasBoltAccount","initializeBoltCustomer","initializeCustomer","renderCustomPaymentForm","isInitializingPayment","isGuestCustomer","isGuest","Boolean","isVaultingEnabled","HostedWidgetPaymentComponent","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignedIn","shouldRenderCustomInstrument","signOut","signOutCustomer","embeddedOneClickEnabled","InstrumentMenuItem","testId","shouldHideExpiryDate","onClick","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","handleClick","InstrumentUseNewButton","InstrumentMenu","selectedInstrumentId","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","setTimeout","value","current","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","style","display","EditButton","buttonId","shouldShowEditButton","translatedString","preventDefault","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","hideWidget","isSignInRequired","shouldShowCreditCardFieldset","tabIndex","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","storedCardValidationSchema","deinitializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","getSelectedInstrument","currentSelectedId","getValidationSchema","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","accountInstruments","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","AccountInstrumentFieldset","CardInstrumentFieldset","StoreInstrumentFieldset","checkoutSettings","isCardVaultingEnabled"],"sourceRoot":""}