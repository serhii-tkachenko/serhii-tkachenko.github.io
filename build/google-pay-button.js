/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonpCheckout"] = self["webpackJsonpCheckout"] || []).push([["google-pay-button"],{

/***/ "../checkout-sdk-js/dist/esm/integrations/google-pay.js":
/*!**************************************************************!*\
  !*** ../checkout-sdk-js/dist/esm/integrations/google-pay.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGooglePayAdyenV2ButtonStrategy: () => (/* binding */ Kt),\n/* harmony export */   createGooglePayAdyenV2CustomerStrategy: () => (/* binding */ At),\n/* harmony export */   createGooglePayAdyenV2PaymentStrategy: () => (/* binding */ ae),\n/* harmony export */   createGooglePayAdyenV3ButtonStrategy: () => (/* binding */ Zt),\n/* harmony export */   createGooglePayAdyenV3CustomerStrategy: () => (/* binding */ Mt),\n/* harmony export */   createGooglePayAdyenV3PaymentStrategy: () => (/* binding */ de),\n/* harmony export */   createGooglePayAuthorizeDotNetButtonStrategy: () => (/* binding */ Xt),\n/* harmony export */   createGooglePayAuthorizeDotNetCustomerStrategy: () => (/* binding */ Dt),\n/* harmony export */   createGooglePayAuthorizeNetPaymentStrategy: () => (/* binding */ ue),\n/* harmony export */   createGooglePayBigCommercePaymentsButtonStrategy: () => (/* binding */ Jt),\n/* harmony export */   createGooglePayBigCommercePaymentsCustomerStrategy: () => (/* binding */ Ft),\n/* harmony export */   createGooglePayBigCommercePaymentsPaymentStrategy: () => (/* binding */ bt),\n/* harmony export */   createGooglePayBnzCustomerStrategy: () => (/* binding */ xt),\n/* harmony export */   createGooglePayBraintreeButtonStrategy: () => (/* binding */ Wt),\n/* harmony export */   createGooglePayBraintreeCustomerStrategy: () => (/* binding */ jt),\n/* harmony export */   createGooglePayBraintreePaymentStrategy: () => (/* binding */ nt),\n/* harmony export */   createGooglePayCheckoutComButtonStrategy: () => (/* binding */ Qt),\n/* harmony export */   createGooglePayCheckoutComCustomerStrategy: () => (/* binding */ Et),\n/* harmony export */   createGooglePayCheckoutComPaymentStrategy: () => (/* binding */ fe),\n/* harmony export */   createGooglePayCybersourceButtonStrategy: () => (/* binding */ $t),\n/* harmony export */   createGooglePayCybersourceCustomerStrategy: () => (/* binding */ Nt),\n/* harmony export */   createGooglePayCybersourcePaymentStrategy: () => (/* binding */ Pe),\n/* harmony export */   createGooglePayOrbitalButtonStrategy: () => (/* binding */ en),\n/* harmony export */   createGooglePayOrbitalCustomerStrategy: () => (/* binding */ zt),\n/* harmony export */   createGooglePayOrbitalPaymentStrategy: () => (/* binding */ _e),\n/* harmony export */   createGooglePayPPCPPaymentStrategy: () => (/* binding */ yt),\n/* harmony export */   createGooglePayPayPalCommerceButtonStrategy: () => (/* binding */ Yt),\n/* harmony export */   createGooglePayPayPalCommerceCustomerStrategy: () => (/* binding */ Lt),\n/* harmony export */   createGooglePayStripeButtonStrategy: () => (/* binding */ tn),\n/* harmony export */   createGooglePayStripeCustomerStrategy: () => (/* binding */ Gt),\n/* harmony export */   createGooglePayStripePaymentStrategy: () => (/* binding */ Ae),\n/* harmony export */   createGooglePayStripeUpeCustomerStrategy: () => (/* binding */ Rt),\n/* harmony export */   createGooglePayTdOnlineMartButtonStrategy: () => (/* binding */ on),\n/* harmony export */   createGooglePayTdOnlineMartCustomerStrategy: () => (/* binding */ Ut),\n/* harmony export */   createGooglePayTdOnlineMartPaymentStrategy: () => (/* binding */ It),\n/* harmony export */   createGooglePayWorldpayAccessButtonStrategy: () => (/* binding */ nn),\n/* harmony export */   createGooglePayWorldpayAccessCustomerStrategy: () => (/* binding */ Bt),\n/* harmony export */   createGooglePayWorldpayAccessPaymentStrategy: () => (/* binding */ De)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/form-poster */ \"../checkout-sdk-js/node_modules/@bigcommerce/form-poster/lib/index.js\");\n/* harmony import */ var _bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/request-sender */ \"../checkout-sdk-js/node_modules/@bigcommerce/request-sender/esm/index.js\");\n/* harmony import */ var _bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/script-loader */ \"../checkout-sdk-js/node_modules/@bigcommerce/script-loader/lib/index.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ \"../checkout-sdk-js/node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);\nclass l extends Error{constructor(e){var t;super(e||\"An unexpected error has occurred.\"),this.name=\"StandardError\",this.type=\"standard\",t=new.target.prototype,Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,\"function\"==typeof Error.captureStackTrace?Error.captureStackTrace(this,new.target):this.stack=new Error(this.message).stack}}class u extends l{constructor(e){super(e||\"Unable to proceed because the client library of a payment method is not loaded or ready to be used.\"),this.name=\"PaymentMethodClientUnavailableError\",this.type=\"payment_method_client_unavailable\"}}var h;class y{constructor(e,t,n=window){this._scriptLoader=e,this._stylesheetLoader=t,this._window=n}load(e){var t,n,i,o,a,r;return i=this,o=void 0,r=function*(){if(yield Promise.all([this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${null!==(t=e.environment)&&void 0!==t?t:\"\"}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.css`,{prepend:!1,attributes:{integrity:\"sha384-8ofgICZZ/k5cC5N7xegqFZOA73H9RQ7H13439JfAZW8Gj3qjuKL2isaTD3GMIhDE\",crossorigin:\"anonymous\"}}),this._scriptLoader.loadScript(`https://checkoutshopper-${null!==(n=e.environment)&&void 0!==n?n:\"\"}.adyen.com/checkoutshopper/sdk/3.10.1/adyen.js`,{async:!0,attributes:{integrity:\"sha384-wG2z9zSQo61EIvyXmiFCo+zB3y0ZB4hsrXVcANmpP8HLthjoQJQPBh7tZKJSV8jA\",crossorigin:\"anonymous\"}})]),!this._window.AdyenCheckout)throw new u;return new this._window.AdyenCheckout(e)},new((a=void 0)||(a=Promise))(function(e,t){function n(e){try{c(r.next(e))}catch(e){t(e)}}function s(e){try{c(r.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(n,s)}c((r=r.apply(i,o||[])).next())})}}function g(e,t){return Object.assign(e,{resolveIds:t})}function p(e){return\"object\"==typeof e&&null!==e&&\"errors\"in e&&Array.isArray(e.errors)&&\"code\"in e.errors[0]&&\"string\"==typeof e.errors[0].code&&\"provider_data\"in e&&\"object\"==typeof e.provider_data}!function(e){e[e.MissingBillingAddress=0]=\"MissingBillingAddress\",e[e.MissingCart=1]=\"MissingCart\",e[e.MissingCheckout=2]=\"MissingCheckout\",e[e.MissingConsignments=3]=\"MissingConsignments\",e[e.MissingCustomer=4]=\"MissingCustomer\",e[e.MissingCheckoutConfig=5]=\"MissingCheckoutConfig\",e[e.MissingOrder=6]=\"MissingOrder\",e[e.MissingOrderConfig=7]=\"MissingOrderConfig\",e[e.MissingOrderId=8]=\"MissingOrderId\",e[e.MissingPayment=9]=\"MissingPayment\",e[e.MissingPaymentId=10]=\"MissingPaymentId\",e[e.MissingPaymentInstrument=11]=\"MissingPaymentInstrument\",e[e.MissingPaymentMethod=12]=\"MissingPaymentMethod\",e[e.MissingPaymentRedirectUrl=13]=\"MissingPaymentRedirectUrl\",e[e.MissingPaymentStatus=14]=\"MissingPaymentStatus\",e[e.MissingPaymentToken=15]=\"MissingPaymentToken\",e[e.MissingShippingAddress=16]=\"MissingShippingAddress\"}(h||(h={}));class m extends l{constructor(e){super(function(e){switch(e){case h.MissingBillingAddress:return\"Unable to proceed because billing address data is unavailable.\";case h.MissingCart:return\"Unable to proceed because cart data is unavailable.\";case h.MissingConsignments:return\"Unable to proceed because consignments data is unavailable.\";case h.MissingCheckout:return\"Unable to proceed because checkout data is unavailable.\";case h.MissingCustomer:return\"Unable to proceed because customer data is unavailable.\";case h.MissingCheckoutConfig:case h.MissingOrderConfig:return\"Unable to proceed because configuration data is unavailable.\";case h.MissingOrder:return\"Unable to proceed because order data is unavailable.\";case h.MissingOrderId:return\"Unable to proceed because order ID is unavailable or not generated yet.\";case h.MissingPayment:return\"Unable to proceed because payment data is unavailable.\";case h.MissingPaymentToken:return\"Unable to proceed because the token required to submit a payment is missing.\";case h.MissingPaymentMethod:return\"Unable to proceed because payment method data is unavailable or not properly configured.\";case h.MissingShippingAddress:return\"Unable to proceed because shipping address data is unavailable.\";default:return\"Unable to proceed because the required data is unavailable.\"}}(e)),this.subtype=e,this.name=\"MissingDataError\",this.type=\"missing_data\"}}function f(){const{navigator:e}=window;let t;return t=e.language?e.language:e.userLanguage,{color_depth:window.screen.colorDepth||24,java_enabled:\"function\"==typeof e.javaEnabled&&e.javaEnabled(),language:t,screen_height:window.screen.height,screen_width:window.screen.width,time_zone_offset:(new Date).getTimezoneOffset().toString()}}const w=e=>\"object\"==typeof e&&null!==e&&\"body\"in e;class P extends l{constructor(e){super(e||\"Payment process was cancelled.\"),this.name=\"PaymentMethodCancelledError\",this.type=\"payment_cancelled\"}}var v;!function(e){e[e.CheckoutButtonNotInitialized=0]=\"CheckoutButtonNotInitialized\",e[e.CustomerNotInitialized=1]=\"CustomerNotInitialized\",e[e.PaymentNotInitialized=2]=\"PaymentNotInitialized\",e[e.ShippingNotInitialized=3]=\"ShippingNotInitialized\",e[e.SpamProtectionNotInitialized=4]=\"SpamProtectionNotInitialized\"}(v||(v={}));class _ extends l{constructor(e){super(function(e){switch(e){case v.CustomerNotInitialized:return\"Unable to proceed because the customer step of checkout has not been initialized.\";case v.PaymentNotInitialized:return\"Unable to proceed because the payment step of checkout has not been initialized.\";case v.ShippingNotInitialized:return\"Unable to proceed because the shipping step of checkout has not been initialized.\";case v.SpamProtectionNotInitialized:return\"Unable to proceed because the checkout spam protection has not been initialized.\";default:return\"Unable to proceed because the required component has not been initialized.\"}}(e)),this.subtype=e,this.name=\"NotInitializedError\",this.type=\"not_initialized\"}}class b extends l{constructor(e){super(e||\"Invalid arguments have been provided.\"),this.name=\"InvalidArgumentError\",this.type=\"invalid_argument\"}}function C(e,t,n){if(\"function\"!=typeof n.value)return n;let i=n.value;return{get(){const e=i.bind(this);return Object.defineProperty(this,t,Object.assign(Object.assign({},n),{value:e})),e},set(e){i=e}}}class S{constructor(e){if(!e)throw new Error(\"Currency settings missing\");const{decimalPlaces:t,symbolLocation:n,symbol:i,thousandsSeparator:o,decimalSeparator:a}=e;if(\"string\"!=typeof n||\"string\"!=typeof i||\"string\"!=typeof o||\"string\"!=typeof a||\"string\"!=typeof t)throw new b(\"Invalid currency settings provided\");this._decimalPlaces=parseInt(t,10),this._symbolLocation=n,this._symbol=i,this._thousandsSeparator=o,this._decimalSeparator=a}format(e){if(\"number\"!=typeof e)throw new b(\"Invalid amount provided\");const t=this._formatNumber(e),n=this._formatCurrency(t);return e<0?`-${n}`:n}_formatNumber(e){const t=Math.abs(e),[n,i=\"\"]=this._toFixed(t,this._decimalPlaces).split(\".\"),o=n.replace(/\\B(?=(\\d{3})+(?!\\d))/g,this._thousandsSeparator);return this._decimalPlaces<1?o:[o,i].join(this._decimalSeparator)}_formatCurrency(e){return\"left\"===this._symbolLocation.toLowerCase()?`${this._symbol}${e}`:`${e}${this._symbol}`}_toFixed(e,t){return(+`${Math.round(+`${e}e${t}`)}e${-t}`).toFixed(t)}}let I=class{constructor(e){this._storeConfig=e,this._customerFormatter=new S(this._storeConfig.shopperCurrency),this._storeFormatter=new S(this._storeConfig.currency)}toCustomerCurrency(e){const t=this._storeConfig.shopperCurrency.exchangeRate;return this._customerFormatter.format(e*t)}toStoreCurrency(e){return this._storeFormatter.format(e)}};I=function(e,t,n,i){var o,a=arguments.length,r=a<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(r=(a<3?o(r):a>3?o(t,n,r):o(t,n))||r);return a>3&&r&&Object.defineProperty(t,n,r),r}([function(e,t,n){return t&&n?C(0,t,n):function(e){const t=class extends e{};return Object.getOwnPropertyNames(e.prototype).forEach(n=>{const i=Object.getOwnPropertyDescriptor(e.prototype,n);i&&\"constructor\"!==n&&Object.defineProperty(t.prototype,n,C(e.prototype,n,i))}),t}(e)}],I);const O=I;function k(e,t){if(null==e)throw t?t():new Error(\"An unexpected error has occurred.\");return e}var T,A,M,D,E,N,x,z,G;function R(e){return e in N}!function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(T||(T={})),function(e){e.paypal=\"paypal\",e.checkout=\"checkout\",e.buynow=\"buynow\",e.pay=\"pay\",e.installment=\"installment\"}(A||(A={})),function(e){e.gold=\"gold\",e.blue=\"blue\",e.silver=\"silver\",e.black=\"black\",e.white=\"white\"}(M||(M={})),function(e){e.pill=\"pill\",e.rect=\"rect\"}(D||(D={})),function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(E||(E={})),function(e){e.AMEX=\"AMEX\",e.DISCOVER=\"DISCOVER\",e.INTERAC=\"INTERAC\",e.JCB=\"JCB\",e.MC=\"MASTERCARD\",e.VISA=\"VISA\"}(N||(N={})),function(e){e.OFFER=\"OFFER\",e.PAYMENT_AUTHORIZATION=\"PAYMENT_AUTHORIZATION\",e.SHIPPING_ADDRESS=\"SHIPPING_ADDRESS\",e.SHIPPING_OPTION=\"SHIPPING_OPTION\"}(x||(x={})),function(e){e.OFFER_INVALID=\"OFFER_INVALID\",e.PAYMENT_DATA_INVALID=\"PAYMENT_DATA_INVALID\",e.SHIPPING_ADDRESS_INVALID=\"SHIPPING_ADDRESS_INVALID\",e.SHIPPING_ADDRESS_UNSERVICEABLE=\"SHIPPING_ADDRESS_UNSERVICEABLE\",e.SHIPPING_OPTION_INVALID=\"SHIPPING_OPTION_INVALID\",e.OTHER_ERROR=\"OTHER_ERROR\"}(z||(z={})),function(e){e.INITIALIZE=\"INITIALIZE\",e.SHIPPING_OPTION=\"SHIPPING_OPTION\",e.SHIPPING_ADDRESS=\"SHIPPING_ADDRESS\",e.OFFER=\"OFFER\"}(G||(G={}));var B=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class j{constructor(e,t){this._gatewayIdentifier=e,this._paymentIntegrationService=t,this._isBuyNowFlow=!1}mapToShippingAddressRequestBody({shippingAddress:e}){if(!e)return;const{company:t=\"\",phone:n=\"\"}=this._paymentIntegrationService.getState().getShippingAddress()||{};return this._mapToAddressRequestBody(e,t,n)}mapToBillingAddressRequestBody(e){const{billingAddress:t}=e.paymentMethodData.info;if(!t)return;const{company:n=\"\",phone:i=\"\",email:o,customFields:a=[]}=this._paymentIntegrationService.getState().getBillingAddress()||{};return Object.assign(Object.assign({},this._mapToAddressRequestBody(t,n,i,a)),{email:o||e.email})}mapToExternalCheckoutData(e){var t;const{paymentMethodData:{tokenizationData:{token:n},info:{cardNetwork:i,cardDetails:o}}}=e;if(!n)throw new m(h.MissingPaymentToken);return Promise.resolve(Object.assign({nonce:n,card_information:{type:i,number:o}},this._isBuyNowFlow&&{cart_id:null===(t=this._paymentIntegrationService.getState().getCart())||void 0===t?void 0:t.id}))}getRequiredData(){var e;return B(this,void 0,void 0,function*(){const t={emailRequired:!0};if(!this._isShippingAddressRequired())return t;const n=yield this._paymentIntegrationService.loadShippingCountries(),i=null===(e=n.getShippingCountries())||void 0===e?void 0:e.map(e=>e.code);return Object.assign(Object.assign({},t),{shippingAddressRequired:!0,shippingAddressParameters:Object.assign({phoneNumberRequired:!0},i&&{allowedCountryCodes:i}),shippingOptionRequired:!0})})}getCallbackIntents(){return this._isShippingAddressRequired()?[x.OFFER,x.SHIPPING_ADDRESS,x.SHIPPING_OPTION]:[x.OFFER]}getCallbackTriggers(){const e=this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-2875.googlepay_coupons_handling\"]||!1;return{availableTriggers:[G.INITIALIZE,G.SHIPPING_ADDRESS,G.SHIPPING_OPTION,...e?[G.OFFER]:[]],initializationTrigger:[G.INITIALIZE],addressChangeTriggers:[G.INITIALIZE,G.SHIPPING_ADDRESS],shippingOptionsChangeTriggers:[G.SHIPPING_OPTION],offerChangeTriggers:e?[G.OFFER]:[]}}getNonce(e){var t;const n=null===(t=this._paymentIntegrationService.getState().getPaymentMethodOrThrow(e).initializationData)||void 0===t?void 0:t.nonce;if(!n)throw new m(h.MissingPaymentToken);return Promise.resolve(n)}extraPaymentData(){return Promise.resolve(void 0)}getMerchantInfo(){const{googleMerchantName:e,googleMerchantId:t,platformToken:n}=this.getGooglePayInitializationData();return{merchantName:e,merchantId:t,authJwt:n}}getTransactionInfo(){let e;if(this._isBuyNowFlow)e=this._getCurrencyCodeOrThrow();else{const{getCartOrThrow:t}=this._paymentIntegrationService.getState();e=t().currency.code}const t=this.getGooglePayInitializationData().storeCountry;return Object.assign(Object.assign({},t&&{countryCode:t}),{currencyCode:e,totalPriceStatus:E.ESTIMATED,totalPrice:\"0\"})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData().gatewayMerchantId;if(!e)throw new b(\"Unable to proceed, gatewayMerchantId is missing.\");return{gateway:this._gatewayIdentifier,gatewayMerchantId:e}}getCardParameters(){return{allowedAuthMethods:[\"PAN_ONLY\",\"CRYPTOGRAM_3DS\"],allowedCardNetworks:this.getPaymentMethod().supportedCards.filter(R).map(e=>N[e]),billingAddressRequired:!0,billingAddressParameters:{format:\"FULL\",phoneNumberRequired:!0}}}initialize(e,t,n){return this._getPaymentMethodFn=e,this._isBuyNowFlow=Boolean(t),this._currencyCode=n,this._isBuyNowFlow&&this._getCurrencyCodeOrThrow(),Promise.resolve()}handleShippingAddressChange(e){var t,n,i,o;return B(this,void 0,void 0,function*(){e&&(e.name=e.name||\"\",e.address1=e.address1||\"\");const a=this.mapToShippingAddressRequestBody({shippingAddress:e});a&&(yield this._paymentIntegrationService.updateShippingAddress(a));const r=this._paymentIntegrationService.getState(),s=r.getConsignments();if(!(null==s?void 0:s[0]))return;const c=s[0],d=r.getStoreConfigOrThrow();this._currencyService||(this._currencyService=new O(d));const l=(c.availableShippingOptions||[]).map(this._getGooglePayShippingOption.bind(this)),u=null===(t=c.availableShippingOptions)||void 0===t?void 0:t.find(e=>e.isRecommended);if(l.length){const e=(null===(n=c.selectedShippingOption)||void 0===n?void 0:n.id)||(null==u?void 0:u.id)||(null===(i=l[0])||void 0===i?void 0:i.id);return!(null===(o=c.selectedShippingOption)||void 0===o?void 0:o.id)&&l[0]&&(yield this.handleShippingOptionChange((null==u?void 0:u.id)||l[0].id)),{defaultSelectedOptionId:e,shippingOptions:l}}})}handleShippingOptionChange(e){return B(this,void 0,void 0,function*(){if(\"shipping_option_unselected\"!==e)return this._paymentIntegrationService.selectShippingOption(e)})}getTotalPrice(){const{getCheckoutOrThrow:e,getCartOrThrow:t}=this._paymentIntegrationService.getState(),{decimalPlaces:n}=t().currency;return (0,lodash__WEBPACK_IMPORTED_MODULE_3__.round)(e().outstandingBalance,n).toFixed(n)}handleCoupons(e){return B(this,void 0,void 0,function*(){const{redemptionCodes:t=[]}=e,{offers:n}=this.getAppliedCoupons();let i;return yield t.reduce((e,t)=>B(this,void 0,void 0,function*(){if(yield e,n.some(({redemptionCode:e})=>e===t))return;const o=yield this.applyCoupon(t);o&&(i=o)}),Promise.resolve()),yield n.reduce((e,n)=>B(this,void 0,void 0,function*(){yield e,t.includes(n.redemptionCode)||(yield this._paymentIntegrationService.removeCoupon(n.redemptionCode))}),Promise.resolve()),{newOfferInfo:this.getAppliedCoupons(),error:i}})}getAppliedCoupons(){const e=this._paymentIntegrationService.getState(),{coupons:t}=e.getCheckout()||{};return{offers:(t||[]).map(e=>{const{displayName:t,code:n}=e;return{redemptionCode:n,description:t}})}}applyCoupon(e){return B(this,void 0,void 0,function*(){let t;try{yield this._paymentIntegrationService.applyCoupon(e)}catch(e){return e instanceof Error&&(t={reason:z.OFFER_INVALID,message:e.message,intent:G.OFFER}),t}})}getGooglePayInitializationData(){return k(this.getPaymentMethod().initializationData,()=>new b(\"Missing initialization data.\"))}getPaymentMethod(){return k(this._getPaymentMethodFn,()=>new _(v.PaymentNotInitialized))()}getGatewayIdentifier(){return this._gatewayIdentifier}setGatewayIdentifier(e){this._gatewayIdentifier=e||this.getGatewayIdentifier()}_isShippingAddressRequired(){const{getCartOrThrow:e,getStoreConfig:t,getShippingAddress:n}=this._paymentIntegrationService.getState();return void 0===n()&&(i=e(),o=t(),!!i&&(!!i.lineItems.physicalItems.some(e=>e.isShippingRequired)||!(!o||!i.lineItems.customItems)&&i.lineItems.customItems.length>0));// removed by dead control flow\n var i, o; }_mapToAddressRequestBody(e,t,n,i){const{name:o,address1:a,address2:r,address3:s,locality:c,administrativeArea:d,countryCode:l,postalCode:u,phoneNumber:h}=e,[y,g]=this._getFirstAndLastName(o);return{firstName:y,lastName:g,company:t,address1:a,address2:`${r} ${s}`.trim(),city:c||d,stateOrProvince:d,stateOrProvinceCode:d,countryCode:l,postalCode:u,phone:h||n,customFields:i||[]}}_getFirstAndLastName(e){const t=e.split(\" \");return 1===t.length?[e,\"\"]:[t.slice(0,-1).join(\" \"),t[t.length-1]]}_getCurrencyCodeOrThrow(){return k(this._currencyCode,()=>new b('Unable to initialize payment because \"options.currencyCode\" argument is not provided.'))}_getGooglePayShippingOption({id:e,cost:t,description:n,additionalDescription:i}){var o;const a=null===(o=this._currencyService)||void 0===o?void 0:o.toCustomerCurrency(t);return this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-3540.googlepay_new_shipping_options_description\"]?{id:e,label:`${a||t} ${n}`,description:i}:{id:e,label:n,description:a||t}}}var L=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class F extends j{constructor(e,t){super(\"adyen\",e),this._scriptLoader=t,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return L(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);const o=i.getPaymentMethod.call(this),a=this._service.getState().getStoreConfig();if(!a)throw new m(h.MissingCheckoutConfig);return this._adyenClient=yield this._scriptLoader.load({environment:o.config.testMode?\"test\":\"live\",locale:a.storeProfile.storeLanguage}),Promise.resolve()})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});return L(this,void 0,void 0,function*(){const n=yield t.getNonce.call(this,e),i=t.getPaymentMethod.call(this);return JSON.stringify({type:i.method,googlePayToken:n,browser_info:f()})})}processAdditionalAction(e){return L(this,void 0,void 0,function*(){if(!w(e)||!p(e.body))throw e;const t=yield this._handleAction(e.body.provider_data);try{return yield this._service.submitPayment(t)}catch(e){return this.processAdditionalAction(e)}})}_handleAction(e){return new Promise((t,n)=>{const i=JSON.parse(e.action);this._getAdyenClient().createFromAction(i,{onAdditionalDetails:e=>{const n={methodId:i.paymentMethodType,paymentData:{nonce:JSON.stringify(e.data)}};t(n)},size:\"05\",onError:e=>n(e)}).mount(\"body\"),n(new P)})}_getAdyenClient(){if(!this._adyenClient)throw new _(v.PaymentNotInitialized);return this._adyenClient}}const U={\"X-Checkout-SDK-Version\":\"1.808.0\"};class V extends l{constructor(e){super(e||\"Unable to proceed because the client library of a payment method has thrown an unexpected error.\"),this.name=\"PaymentMethodFailedError\",this.type=\"payment_method_client_invalid\"}}var q=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class H{constructor(e,t,n,i){this._scriptLoader=e,this._gateway=t,this._requestSender=n,this._formPoster=i,this._baseRequest={apiVersion:2,apiVersionMinor:0}}initialize(e,t,n,i){return q(this,void 0,void 0,function*(){this._paymentsClient=yield this._scriptLoader.getGooglePaymentsClient(e().config.testMode,t),yield this._gateway.initialize(e,n,i),this._buildButtonPayloads()})}initializeWidget(){return q(this,void 0,void 0,function*(){yield this._buildWidgetPayloads(),yield this._determineReadinessToPay(),this._prefetchGooglePaymentData()})}getNonce(e){return this._gateway.getNonce(e)}extraPaymentData(){return q(this,void 0,void 0,function*(){return this._gateway.extraPaymentData()})}addPaymentButton(e,t){const n=document.querySelector(`#${e}`);if(!n)return;const i=this._getPaymentsClient().createButton(Object.assign(Object.assign({},t),{allowedPaymentMethods:[this._getBaseCardPaymentMethod()]}));return n.appendChild(i)}showPaymentSheet(){return q(this,void 0,void 0,function*(){const e=this._getPaymentDataRequest();return this._getPaymentsClient().loadPaymentData(e)})}setExternalCheckoutXhr(e,t){return q(this,void 0,void 0,function*(){return this._setExternalCheckout(e,t)})}setExternalCheckoutForm(e,t,n){return q(this,void 0,void 0,function*(){return this._setExternalCheckout(e,t,!0,n)})}mapToBillingAddressRequestBody(e){return this._gateway.mapToBillingAddressRequestBody(e)}mapToShippingAddressRequestBody(e){return this._gateway.mapToShippingAddressRequestBody(e)}processAdditionalAction(e,t){return\"processAdditionalAction\"in this._gateway?this._gateway.processAdditionalAction(e,t):Promise.reject(e)}signOut(e){return q(this,void 0,void 0,function*(){yield this._requestSender.get(`/remote-checkout/${e}/signout`)})}getCallbackTriggers(){return this._gateway.getCallbackTriggers()}handleShippingAddressChange(e){return q(this,void 0,void 0,function*(){return this._gateway.handleShippingAddressChange(e)})}handleShippingOptionChange(e){return q(this,void 0,void 0,function*(){yield this._gateway.handleShippingOptionChange(e)})}handleCoupons(e){return q(this,void 0,void 0,function*(){return this._gateway.handleCoupons(e)})}getTotalPrice(){return this._gateway.getTotalPrice()}_setExternalCheckout(e,t,n=!1,i){return q(this,void 0,void 0,function*(){const o=\"/checkout.php\",a=Object.assign({action:\"set_external_checkout\",provider:e},yield this._gateway.mapToExternalCheckoutData(t));if(n)return new Promise(e=>{this._formPoster.postForm(i?`${i}/checkout`:o,Object.assign(Object.assign({},a),{card_information:JSON.stringify(a.card_information)}),e)});yield this._requestSender.post(o,{headers:Object.assign({Accept:\"text/html\",\"Content-Type\":\"application/x-www-form-urlencoded\"},U),body:a})})}_prefetchGooglePaymentData(){const e=this._getPaymentDataRequest();e.transactionInfo=this._gateway.getTransactionInfo(),this._getPaymentsClient().prefetchPaymentData(e)}_determineReadinessToPay(){return q(this,void 0,void 0,function*(){try{const{result:e}=yield this._getPaymentsClient().isReadyToPay(this._getIsReadyToPayRequest());if(!1===e)throw new V(\"Google Pay is not supported by the current device and browser, please try another payment method.\")}catch(e){if(e instanceof V)throw e;throw new V}})}_buildButtonPayloads(){this._baseCardPaymentMethod={type:\"CARD\",parameters:this._gateway.getCardParameters()}}_buildWidgetPayloads(){return q(this,void 0,void 0,function*(){const e=this._getBaseCardPaymentMethod();this._cardPaymentMethod=Object.assign(Object.assign({},e),{tokenizationSpecification:{type:\"PAYMENT_GATEWAY\",parameters:yield this._gateway.getPaymentGatewayParameters()}}),this._paymentDataRequest=Object.assign(Object.assign(Object.assign(Object.assign({},this._baseRequest),{allowedPaymentMethods:[this._cardPaymentMethod],transactionInfo:this._gateway.getTransactionInfo(),merchantInfo:this._gateway.getMerchantInfo()}),yield this._gateway.getRequiredData()),{callbackIntents:this._gateway.getCallbackIntents(),offerInfo:this._gateway.getAppliedCoupons()}),this._isReadyToPayRequest=Object.assign(Object.assign({},this._baseRequest),{allowedPaymentMethods:[e]})})}_getBaseCardPaymentMethod(){return this._getOrThrow(this._baseCardPaymentMethod)}_getPaymentDataRequest(){return this._getOrThrow(this._paymentDataRequest)}_getIsReadyToPayRequest(){return this._getOrThrow(this._isReadyToPayRequest)}_getPaymentsClient(){return this._getOrThrow(this._paymentsClient)}_getOrThrow(e){return k(e,()=>new _(v.PaymentNotInitialized))}}class W extends b{constructor(e){let t=\"Unable to submit payment for the order because the payload is invalid.\";e&&(t=`${t} Make sure the following fields are provided correctly: ${e.join(\", \")}.`),super(t),this.name=\"PaymentArgumentInvalidError\"}}class Y extends l{constructor(){super(\"The current order does not need to be finalized at this stage.\"),this.name=\"OrderFinalizationNotRequiredError\",this.type=\"order_finalization_not_required\"}}const J={size:70,color:\"#d9d9d9\",backgroundColor:\"#ffffff\"},K={position:\"fixed\",\"background-color\":\"rgba(0, 0, 0, 0.4)\",\"z-index\":\"1000\"},Z=\"embedded-checkout-loading-indicator-rotation\";class X{constructor(e){this.styles=Object.assign(Object.assign({},J),e&&e.styles),this.containerStyles=Object.assign({},e&&e.containerStyles),this.defineAnimation(),this.container=this.buildContainer(),this.indicator=this.buildIndicator(),this.container.appendChild(this.indicator)}show(e){if(e){const t=document.getElementById(e);if(!t)throw new Error(\"Unable to attach the loading indicator because the parent ID is not valid.\");t.appendChild(this.container)}this.container.style.visibility=\"visible\",this.container.style.opacity=\"1\"}hide(){const e=()=>{this.container.style.visibility=\"hidden\",this.container.removeEventListener(\"transitionend\",e)};this.container.addEventListener(\"transitionend\",e),this.container.style.opacity=\"0\"}buildContainer(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.bottom=\"0\",e.style.left=\"0\",e.style.height=\"100%\",e.style.width=\"100%\",e.style.position=\"absolute\",e.style.right=\"0\",e.style.top=\"0\",e.style.transition=\"all 250ms ease-out\",e.style.opacity=\"0\",this.setStyleAttribute(e,this.containerStyles),e}buildIndicator(){const e=document.createElement(\"div\");return e.style.display=\"block\",e.style.width=`${this.styles.size}px`,e.style.height=`${this.styles.size}px`,e.style.borderRadius=`${this.styles.size}px`,e.style.border=\"solid 1px\",e.style.borderColor=`${this.styles.backgroundColor} ${this.styles.backgroundColor} ${this.styles.color} ${this.styles.color}`,e.style.margin=\"0 auto\",e.style.position=\"absolute\",e.style.left=\"0\",e.style.right=\"0\",e.style.top=\"50%\",e.style.transform=\"translateY(-50%) rotate(0deg)\",e.style.transformStyle=\"preserve-3d\",e.style.animation=`${Z} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`,e}setStyleAttribute(e,t){Object.keys(t).forEach(n=>{e.style.setProperty(n,t[n])})}defineAnimation(){var e;if(document.getElementById(Z))return;const t=document.createElement(\"style\");t.id=Z,null===(e=document.head)||void 0===e||e.appendChild(t),t.sheet instanceof CSSStyleSheet&&t.sheet.insertRule(`\\n                @keyframes ${Z} {\\n                    0% { transform: translateY(-50%) rotate(0deg); }\\n                    100% { transform: translateY(-50%) rotate(360deg); }\\n                }\\n            `,0)}}function Q(e){return\"object\"==typeof e&&null!==e&&\"statusCode\"in e}var $;function ee(e){return Object.values($).includes(e)}!function(e){e.ADYEN_V2=\"googlepayadyenv2\",e.ADYEN_V3=\"googlepayadyenv3\",e.AUTHORIZE_NET=\"googlepayauthorizenet\",e.BNZ=\"googlepaybnz\",e.BRAINTREE=\"googlepaybraintree\",e.PAYPAL_COMMERCE=\"googlepaypaypalcommerce\",e.BIGCOMMERCE_PAYMENTS=\"googlepay_bigcommerce_payments\",e.CHECKOUT_COM=\"googlepaycheckoutcom\",e.CYBERSOURCE_V2=\"googlepaycybersourcev2\",e.ORBITAL=\"googlepayorbital\",e.STRIPE=\"googlepaystripe\",e.STRIPE_UPE=\"googlepaystripeupe\",e.STRIPE_OCS=\"googlepaystripeocs\",e.WORLDPAY_ACCESS=\"googlepayworldpayaccess\",e.TD_ONLINE_MART=\"googlepaytdonlinemart\"}($||($={}));var te=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class ne{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t,this._loadingIndicator=new X({containerStyles:K})}initialize(e){var t;return te(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId)||!ee(e.methodId))throw new b('Unable to proceed because \"methodId\" is not a valid key.');this._methodId=e.methodId;const n=e[this._getMethodId()];if(!(null==n?void 0:n.walletButton))throw new b(\"Unable to proceed without valid options.\");const{walletButton:i,loadingContainerId:o}=n,a=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(e);o<i.length;o++)t.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(e,i[o])&&(n[i[o]]=e[i[o]])}return n}(n,[\"walletButton\",\"loadingContainerId\"]);this._loadingIndicatorContainer=o,yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId());const r=this._paymentIntegrationService.getState().getPaymentMethodOrThrow(this._getMethodId());yield this._googlePayPaymentProcessor.initialize(()=>r,this._getGooglePayClientOptions(null===(t=r.initializationData)||void 0===t?void 0:t.storeCountry)),this._addPaymentButton(i,a)})}execute({payment:e}){return te(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new W([\"payment\"]);yield this._paymentIntegrationService.submitOrder();const t=yield this._googlePayPaymentProcessor.getNonce(e.methodId),n=yield this._googlePayPaymentProcessor.extraPaymentData();try{yield this._paymentIntegrationService.submitPayment(Object.assign(Object.assign({},e),{paymentData:Object.assign({nonce:t},n)}))}catch(t){yield this._googlePayPaymentProcessor.processAdditionalAction(t,e.methodId)}})}finalize(){return Promise.reject(new Y)}deinitialize(){var e;return this._clickListener&&(null===(e=this._paymentButton)||void 0===e||e.removeEventListener(\"click\",this._clickListener)),this._paymentButton=void 0,this._clickListener=void 0,this._methodId=void 0,Promise.resolve()}_addPaymentButton(e,t){if(this._paymentButton)return;const n=document.getElementById(e);if(!n)throw new b(\"Unable to proceed without a walletButton.\");this._paymentButton=n,this._clickListener=this._handleClick(t),this._paymentButton.addEventListener(\"click\",this._clickListener)}_handleClick({onPaymentSelect:e,onError:t}){return n=>te(this,void 0,void 0,function*(){n.preventDefault();try{yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(e){let n=e;if(this._toggleLoadingIndicator(!1),Q(e)){if(\"CANCELED\"===e.statusCode)throw new P;n=new V(JSON.stringify(e))}throw null==t||t(new V(\"An error occurred while requesting your Google Pay payment details.\")),n}null==e||e()})}_interactWithPaymentSheet(){return te(this,void 0,void 0,function*(){const e=yield this._googlePayPaymentProcessor.showPaymentSheet();this._toggleLoadingIndicator(!0);const t=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(e);t&&(yield this._paymentIntegrationService.updateBillingAddress(t)),yield this._googlePayPaymentProcessor.setExternalCheckoutXhr(this._getMethodId(),e),yield this._paymentIntegrationService.loadCheckout(),yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId()),this._toggleLoadingIndicator(!1)})}_getMethodId(){return k(this._methodId,()=>new _(v.PaymentNotInitialized))}_getIsSignedInOrThrow(){return te(this,void 0,void 0,function*(){try{return!!(yield this._googlePayPaymentProcessor.getNonce(this._getMethodId()))}catch(e){if(e instanceof m&&e.subtype===h.MissingPaymentToken)return!1;throw e}})}_handleOfferTrigger(e){return te(this,void 0,void 0,function*(){let t=!1,n=\"Sign in to Google Pay first to apply or remove promo codes.\";try{t=yield this._getIsSignedInOrThrow()}catch(e){e instanceof m&&(n=e.message)}if(t){const{newOfferInfo:t,error:n}=yield this._googlePayPaymentProcessor.handleCoupons(e);return{newOfferInfo:t,error:n}}return{error:{reason:z.OFFER_INVALID,message:n,intent:G.OFFER}}})}_getGooglePayClientOptions(e){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:t,offerData:n})=>te(this,void 0,void 0,function*(){const i=this._paymentIntegrationService.getState().getStoreConfigOrThrow().checkoutSettings.features[\"PI-2875.googlepay_coupons_handling\"]||!1;if(t!==G.INITIALIZE&&(!i||t!==G.OFFER))return;const{offerChangeTriggers:o}=this._googlePayPaymentProcessor.getCallbackTriggers(),{newOfferInfo:a,error:r}=o.includes(t)?yield this._handleOfferTrigger(n):{},s=r;yield this._paymentIntegrationService.loadCheckout();const{getCheckoutOrThrow:d,getCartOrThrow:l}=this._paymentIntegrationService.getState(),{code:u,decimalPlaces:h}=l().currency,y=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.round)(d().outstandingBalance,h).toFixed(h);return Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},e&&{countryCode:e}),{currencyCode:u,totalPriceStatus:E.FINAL,totalPrice:y})},a&&{newOfferInfo:a}),s&&{error:s})})}}}_toggleLoadingIndicator(e){e&&this._loadingIndicatorContainer?this._loadingIndicator.show(this._loadingIndicatorContainer):this._loadingIndicator.hide()}}class ie{constructor(e){this._scriptLoader=e,this._window=window}getGooglePaymentsClient(e=!1,t){return n=this,i=void 0,a=function*(){if(yield this._scriptLoader.loadScript(\"https://pay.google.com/gp/p/js/pay.js\"),!this._window.google)throw new u;return void 0===this._paymentsClient&&(this._paymentsClient=new this._window.google.payments.api.PaymentsClient(Object.assign({environment:e?\"TEST\":\"PRODUCTION\"},null!=t?t:{}))),this._paymentsClient},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}function oe(){return new ie((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())}const ae=g(o=>new ne(o,new H(oe(),new F(o,new y((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)(),(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getStylesheetLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayadyenv2\"}]);class re{constructor(e,t,n=window){this._scriptLoader=e,this._stylesheetLoader=t,this._window=n}load(e){var t,n,i,o,a,r;return i=this,o=void 0,r=function*(){if(yield Promise.all([this._stylesheetLoader.loadStylesheet(`https://checkoutshopper-${null!==(t=e.environment)&&void 0!==t?t:\"\"}.adyen.com/checkoutshopper/sdk/5.71.1/adyen.css`,{prepend:!1,attributes:{integrity:\"sha384-5MvB4RnzvviA3VBT4KYABZ4HXNZG5LRqREEgd41xt/pf/QvKmsj2O9GuNuywRXx9\",crossorigin:\"anonymous\"}}),this._scriptLoader.loadScript(`https://checkoutshopper-${null!==(n=e.environment)&&void 0!==n?n:\"\"}.adyen.com/checkoutshopper/sdk/5.71.1/adyen.js`,{async:!0,attributes:{integrity:\"sha384-yvY2yFNR4WqIjPqP9MzjI+gJimmaJnAvj4rLHKvgJbgFD5fMuf8zIJrFJOW8Lhhf\",crossorigin:\"anonymous\"}})]),!this._window.AdyenCheckout)throw new u;return yield this._window.AdyenCheckout(e)},new((a=void 0)||(a=Promise))(function(e,t){function n(e){try{c(r.next(e))}catch(e){t(e)}}function s(e){try{c(r.throw(e))}catch(e){t(e)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a(function(e){e(i)})).then(n,s)}c((r=r.apply(i,o||[])).next())})}}var se=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class ce extends j{constructor(e,t){super(\"adyen\",e),this._scriptLoader=t,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return se(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);const o=i.getPaymentMethod.call(this),a=this._service.getState().getStoreConfig();if(!a)throw new m(h.MissingCheckoutConfig);return this._adyenClient=yield this._scriptLoader.load({environment:o.config.testMode?\"test\":\"live\",locale:a.storeProfile.storeLanguage}),Promise.resolve()})}processAdditionalAction(e){return se(this,void 0,void 0,function*(){if(!w(e)||!p(e.body))throw e;const t=yield this._handleAction(e.body.provider_data);try{return yield this._service.submitPayment(t)}catch(e){return this.processAdditionalAction(e)}})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});return se(this,void 0,void 0,function*(){const n=yield t.getNonce.call(this,e),i=t.getPaymentMethod.call(this);return JSON.stringify({type:i.method,googlePayToken:n,browser_info:f()})})}_handleAction(e){return new Promise((t,n)=>{const i=JSON.parse(e.action);this._getAdyenClient().createFromAction(i,{onAdditionalDetails:e=>{const n={methodId:i.paymentMethodType,paymentData:{nonce:JSON.stringify(e.data)}};t(n)},size:\"05\",onError:e=>n(e)}).mount(\"body\"),n(new P)})}_getAdyenClient(){if(!this._adyenClient)throw new _(v.PaymentNotInitialized);return this._adyenClient}}const de=g(o=>new ne(o,new H(oe(),new ce(o,new re((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)(),(0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getStylesheetLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayadyenv3\"}]);class le extends j{constructor(e){super(\"authorizenet\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();return function(e){if(!function(e){return\"paymentGatewayId\"in e}(e))throw new m(h.MissingPaymentMethod)}(e),{gateway:this.getGatewayIdentifier(),gatewayMerchantId:e.paymentGatewayId}}}const ue=g(n=>new ne(n,new H(oe(),new le(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]);var he;!function(e){e.Json=\"application/json\",e.JsonV1=\"application/vnd.bc.v1+json\"}(he||(he={}));const ye=he;function ge(e){if(!function(e){return\"checkoutcomkey\"in e}(e))throw new m(h.MissingPaymentMethod)}var pe=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class me extends j{constructor(e,t){super(\"checkoutltd\",e),this._requestSender=t}processAdditionalAction(e){return new Promise((t,n)=>{if(w(e)&&function(e){var t;if(\"object\"!=typeof e||null===e)return!1;const n=e;return\"string\"==typeof(null===(t=n.three_ds_result)||void 0===t?void 0:t.acs_url)&&\"string\"==typeof n.three_ds_result.code}(e.body)&&\"three_d_secure_required\"===e.body.three_ds_result.code)return window.location.assign(e.body.three_ds_result.acs_url);n(e)})}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return pe(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new b(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"protocolVersion\"in e&&\"signature\"in e&&\"signedMessage\"in e}(e))throw new m(h.MissingPaymentToken)}(i),n.nonce=yield this._tokenize(i),n})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();return ge(e),{gateway:this.getGatewayIdentifier(),gatewayMerchantId:e.checkoutcomkey}}_tokenize(e){return pe(this,void 0,void 0,function*(){const t=this.getPaymentMethod().config.testMode?\"https://api.sandbox.checkout.com/tokens\":\"https://api.checkout.com/tokens\",n=this.getGooglePayInitializationData();ge(n);const{body:i}=yield this._requestSender.post(t,{credentials:!1,body:{type:\"googlepay\",token_data:e},headers:{Authorization:n.checkoutcomkey,\"Content-Type\":ye.Json,\"X-XSRF-TOKEN\":null}});return i.token})}}const fe=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new ne(n,new H(oe(),new me(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]);class we extends j{constructor(e){super(\"cybersource\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const Pe=g(n=>new ne(n,new H(oe(),new we(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"},{id:\"googlepaybnz\"}]);class ve extends j{constructor(e){super(\"chase\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const _e=g(n=>new ne(n,new H(oe(),new ve(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]),be={body:{},headers:{},status:0};class Ce extends l{constructor(e,{message:t,errors:n}={}){const{body:i,headers:o,status:a}=e||be;super(t||\"An unexpected error has occurred.\"),this.name=\"RequestError\",this.type=\"request\",this.body=i,this.headers=o,this.status=a,this.errors=n||[]}}function Se(e){if(!function(e){return\"stripeConnectedAccount\"in e&&\"stripePublishableKey\"in e&&\"stripeVersion\"in e}(e))throw new m(h.MissingPaymentMethod)}var Ie=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Oe extends j{constructor(e,t){super(\"stripe\",e),this.paymentIntegrationService=e,this.scriptLoader=t}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return Ie(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new b(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"id\"in e}(e))throw new m(h.MissingPaymentToken)}(i),n.nonce=i.id,n})}getPaymentGatewayParameters(){const e=this.getGooglePayInitializationData();Se(e);const{stripeVersion:t,stripePublishableKey:n,stripeConnectedAccount:i}=e;return{gateway:this.getGatewayIdentifier(),\"stripe:version\":t,\"stripe:publishableKey\":`${n}/${i}`}}processAdditionalAction(e,t){var n,i;return Ie(this,void 0,void 0,function*(){if(!t)throw new W([\"payment\"]);if(!w(e)||(\"object\"!=typeof(o=e.body)||null===o||!(\"three_ds_result\"in o)||!(\"errors\"in o)))throw e;var o;const a=this.paymentIntegrationService.getState(),r=null===(n=a.getStoreConfig())||void 0===n?void 0:n.checkoutSettings.features[\"STRIPE-476.enable_stripe_googlepay_3ds\"];if((0,lodash__WEBPACK_IMPORTED_MODULE_3__.some)(e.body.errors,{code:\"three_d_secure_required\"})&&r){const n=this.getGooglePayInitializationData();Se(n);const{stripePublishableKey:o,stripeConnectedAccount:a}=n;this.stripeUPEClient=yield this.loadStripeJs(o,a);const r=e.body.three_ds_result.token;let s,c=!1;try{s=yield this.stripeUPEClient.confirmCardPayment(r)}catch(e){try{s=yield this.stripeUPEClient.retrievePaymentIntent(r)}catch(e){c=!0}}if(null==s?void 0:s.error){if(this._throwDisplayableStripeError(s.error),this._isCancellationError(s.error))throw new P;throw new V}if(!(null==s?void 0:s.paymentIntent)&&!c)throw new Ce;return this.paymentIntegrationService.submitPayment({methodId:t,paymentData:{nonce:(null===(i=null==s?void 0:s.paymentIntent)||void 0===i?void 0:i.id)||r}})}throw e})}loadStripeJs(e,t){return Ie(this,void 0,void 0,function*(){return this.stripeUPEClient?this.stripeUPEClient:this.scriptLoader.getStripeClient(e,t)})}_isCancellationError(e){var t,n;return e&&-1!==(null===(n=null===(t=e.payment_intent.last_payment_error)||void 0===t?void 0:t.message)||void 0===n?void 0:n.indexOf(\"canceled\"))}_throwDisplayableStripeError(e){if((0,lodash__WEBPACK_IMPORTED_MODULE_3__.includes)([\"card_error\",\"invalid_request_error\",\"validation_error\"],e.type))throw new Error(e.message)}}var ke=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Te{constructor(e,t=window){this.scriptLoader=e,this.stripeWindow=t}getStripeClient(e,t,n){return ke(this,void 0,void 0,function*(){let i=this.stripeWindow.bcStripeClient;return i||(i=(yield this.load())(e,{stripeAccount:t,locale:n,betas:[\"payment_element_beta_2\",\"alipay_pm_beta_1\",\"link_default_integration_beta_1\",\"shipping_address_element_beta_1\",\"address_element_beta_1\"],apiVersion:\"2020-03-02;alipay_beta=v1;link_beta=v1\"}),Object.assign(this.stripeWindow,{bcStripeClient:i})),i})}load(){return ke(this,void 0,void 0,function*(){if(this.stripeWindow.Stripe||(yield this.scriptLoader.loadScript(\"https://js.stripe.com/v3/\")),!this.stripeWindow.Stripe)throw new u;return this.stripeWindow.Stripe})}}const Ae=g(i=>new ne(i,new H(oe(),new Oe(i,new Te((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeupe\"},{id:\"googlepaystripeocs\"}]);class Me extends j{constructor(e){super(\"worldpay\",e)}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return n=this,i=void 0,a=function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n},new((o=void 0)||(o=Promise))(function(e,t){function r(e){try{c(a.next(e))}catch(e){t(e)}}function s(e){try{c(a.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o(function(e){e(n)})).then(r,s)}c((a=a.apply(n,i||[])).next())});// removed by dead control flow\n var n, i, o, a; }}const De=g(n=>new ne(n,new H(oe(),new Me(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]);function Ee(e,t,n=!0){var i;return null!==(i=e[t])&&void 0!==i?i:n}const Ne=\"3.128.0\",xe=\"3.123.2\",ze=\"3.106.0\";class Ge{constructor(e){this.paymentIntegrationService=e,this.braintreeWindow=window}getSDKVersion(){const e=this.paymentIntegrationService.getState().getStoreConfig(),t=(null==e?void 0:e.checkoutSettings.features)||{};return this.getPreloadedSDKVersion()||(Ee(t,\"PAYPAL-5809.braintree_hosted_fields_fix_version\")?Ne:Ee(t,\"PAYPAL-5636.update_braintree_sdk_version\")?xe:ze)}getPreloadedSDKVersion(){const e=this.braintreeWindow.braintree;if(e){const t=(0,lodash__WEBPACK_IMPORTED_MODULE_3__.find)(Object.values(e),e=>!!e.VERSION);return null==t?void 0:t.VERSION}}}class Re extends l{constructor(e){super(e||\"Unsupported browser error\"),this.name=\"UnsupportedBrowserError\",this.type=\"unsupported_browser\"}}var Be,je,Le,Fe,Ue,Ve,qe;!function(e){e.ESTIMATED=\"ESTIMATED\",e.FINAL=\"FINAL\",e.NOT_CURRENTLY_KNOWN=\"NOT_CURRENTLY_KNOWN\"}(Be||(Be={})),function(e){e.Completed=\"COMPLETED\",e.Pending=\"PENDING\",e.Failed=\"FAILED\"}(je||(je={})),function(e){e.TRUSTLY=\"trustly\"}(Le||(Le={})),function(e){e.SUCCEEDED=\"succeeded\",e.FAILED=\"failed\",e.CANCELED=\"cancelled\",e.UNRECOGNIZED=\"unrecognized\"}(Fe||(Fe={})),function(e){e.Customer=\"CUSTOMER\",e.Merchant=\"MERCHANT\",e.Network=\"NETWORK\",e.Internal=\"INTERNAL\",e.Unknown=\"UNKNOWN\"}(Ue||(Ue={})),function(e){e.KountNotEnabled=\"DATA_COLLECTOR_KOUNT_NOT_ENABLED\"}(Ve||(Ve={})),function(e){e.Visa=\"visa\",e.Mastercard=\"mastercard\",e.AmericanExpress=\"american-express\",e.DinersClub=\"diners-club\",e.Discover=\"discover\",e.Jcb=\"jcb\",e.UnionPay=\"union-pay\",e.Maestro=\"maestro\",e.Elo=\"elo\",e.Mir=\"mir\",e.Hiper=\"hiper\",e.Hipercard=\"hipercard\"}(qe||(qe={}));var He,We,Ye,Je=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ke{constructor(e){this.braintreeScriptLoader=e}initialize(e){this.setClientToken(e)}deinitialize(){return Je(this,void 0,void 0,function*(){yield this.teardownModule(this.dataCollector),this.dataCollector=void 0})}getClient(){return Je(this,void 0,void 0,function*(){if(!this.client){const e=this.getClientTokenOrThrow(),t=yield this.braintreeScriptLoader.loadClient();this.client=yield t.create({authorization:e})}return this.client})}getDataCollectorOrThrow(e){return Je(this,void 0,void 0,function*(){const t={deviceData:void 0,teardown:()=>Promise.resolve()};if(!this.dataCollector)try{const t=yield this.getClient(),n=yield this.braintreeScriptLoader.loadDataCollector(),i=Object.assign({client:t,kount:!0},e);this.dataCollector=yield n.create(i)}catch(e){if(function(e){return Boolean(\"object\"==typeof e&&null!==e&&(\"type\"in e||\"message\"in e||\"code\"in e))}(e)&&e.code===Ve.KountNotEnabled)return t;throw e}return this.dataCollector})}getBraintreeGooglePayment(){return Je(this,void 0,void 0,function*(){if(!this.googlePayment){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadGooglePayment()]);this.googlePayment=yield t.create({client:e})}return this.googlePayment})}getBraintreeThreeDS(){return Je(this,void 0,void 0,function*(){if(!this.threeDS){const[e,t]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.load3DS()]);this.threeDS=yield t.create({client:e,version:2})}return this.threeDS})}getBraintreeLocalPayment(e){return Je(this,void 0,void 0,function*(){if(!this.braintreeLocalPayment){const[t,n]=yield Promise.all([this.getClient(),this.braintreeScriptLoader.loadLocalPayment()]);this.braintreeLocalPayment=yield new Promise((i,o)=>{n.create({client:t,merchantAccountId:e},(e,t)=>{e&&o(e),i(t)})})}return this.braintreeLocalPayment})}getUsBankAccount(){return Je(this,void 0,void 0,function*(){if(!this.usBankAccount){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadUsBankAccount();this.usBankAccount=yield t.create({client:e})}return this.usBankAccount})}getBraintreeVisaCheckout(){return this.visaCheckout||(this.visaCheckout=Promise.all([this.getClient(),this.braintreeScriptLoader.loadVisaCheckout()]).then(([e,t])=>t.create({client:e}))),this.visaCheckout}getVisaCheckoutSdk(e){return Je(this,void 0,void 0,function*(){return this.visaCheckoutSDK||(this.visaCheckoutSDK=yield this.braintreeScriptLoader.loadVisaCheckoutSdk(e)),this.visaCheckoutSDK})}getVenmoCheckoutOrThrow(){return Je(this,void 0,void 0,function*(){if(!this.braintreeVenmo){const e=yield this.getClient(),t=yield this.braintreeScriptLoader.loadVenmoCheckout(),n={client:e,allowDesktop:!0,paymentMethodUsage:\"multi_use\"},i=yield t.create(n);if(!i.isBrowserSupported())throw new Re;this.braintreeVenmo=i}return this.braintreeVenmo})}setClientToken(e){this.clientToken=e}getClientTokenOrThrow(){if(!this.clientToken)throw new _(v.PaymentNotInitialized);return this.clientToken}teardownModule(e){return e?e.teardown():Promise.resolve()}}!function(e){e.Sandbox=\"sandbox\",e.Production=\"production\"}(He||(He={})),function(e){e.Client=\"client\",e.DataCollector=\"dataCollector\",e.Fastlane=\"fastlane\",e.GooglePayment=\"googlePayment\",e.HostedFields=\"hostedFields\",e.LocalPayment=\"localPayment\",e.Paypal=\"paypal\",e.PaypalCheckout=\"paypalCheckout\",e.ThreeDSecure=\"threeDSecure\",e.UsBankAccount=\"usBankAccount\",e.Venmo=\"venmo\",e.VisaCheckout=\"visaCheckout\"}(We||(We={})),function(e){e.CardCode=\"cardCode\",e.CardCodeVerification=\"cardCodeVerification\",e.CardExpiry=\"cardExpiry\",e.CardName=\"cardName\",e.CardNumber=\"cardNumber\",e.CardNumberVerification=\"cardNumberVerification\"}(Ye||(Ye={}));const Ze={[ze]:{[We.Client]:\"sha384-26BXDNnJI23JYRyFBj4xe4sVNrUSSiSSu11kxVXNM/vEPONm4LuL00w6ZaTgQewt\",[We.PaypalCheckout]:\"sha384-B+vzbZwnQtzWBthpkT4TXKUibO65tyeK7eCxSvpblgprTep2+IAXB2Cxxjrn710O\",[We.Paypal]:\"sha384-uyAGL1/3+XJAHnGoNy4eCoXdzJ4f7Ilzp+6w9PNnEjs6DCCz9WMyJjMN1gzc78U+\",[We.LocalPayment]:\"sha384-LIvOEMkIVEwVuYBdVOQc1AC5YbGGlwyfUheS0ACK218D2STuVYQlZ4FyEPowAEfT\",[We.DataCollector]:\"sha384-1bo9JDz+Kscthc085cCKWur8CLwUoBpoNyxsDi7932mCl0zFq3A5mv+FQLw9GHpV\",[We.UsBankAccount]:\"sha384-xmHBVaU+w74V+OebD3AaPONFxHUGMf+QRs8G/JxVPXNNP7MDa2jL0ICWHIe2tTfJ\",[We.GooglePayment]:\"sha384-WKDJl8mqoP82qZpMGH6AbZxnvXnSW8ILV4M64CyMLiugGMwu7LyP89wjCkHqsiBe\",[We.ThreeDSecure]:\"sha384-VQUlpGHzsGvs5XeiGFip7EXRsvoHWEXDVmgCacfbyieZI9mdBOqq3NSoyo28OCOB\",[We.VisaCheckout]:\"sha384-yx7mADfzTN0T43Q6rlH49LIg1EJ0iUZgBp/EczX9LXsUGkySgxrD+nWHQRBkyfoT\",[We.Venmo]:\"sha384-QX4rPjoj1ZDhuG0aSyKs56lEKDqTMTcjYxUHY1SzO5VZDsqIE2NTkqot7KNSCyov\",[We.HostedFields]:\"sha384-VvYBACfSu0Cr/J32uKmxG7AXcNOJE1AzIIL3kbikyS7YKp5fz5Is+NzNP/lyauNy\",[We.Fastlane]:\"sha384-9oGsZMRZwpGtDEDYa/dFt76dECqj1xAni9gIKgc3KfMIiRnR73nEeeUDLiBzxhFa\"},[xe]:{[We.Client]:\"sha384-o+nbQGcwNNxIBeXeu3+XmbSq+Cg8R3EN3N0l5hXCgMMU2RGY0t1z0LroSEIAbfAO\",[We.PaypalCheckout]:\"sha384-WrfbWPBS4mH86GAoycPSgiH8hQ8KH7A67C93Hjhunv/xhNk2YpBn3wbFA4Fhg9U/\",[We.Paypal]:\"sha384-VF389nvvrRUgDsTXMxTYORDtVegB9IQa3Cxr//DyJnLYnz8/X8VCzEvck2c+Megt\",[We.LocalPayment]:\"sha384-tZKx2rEQbfmZpoPSY5VPmJEhaq4X75dLvwHMs3VE9U+C8lPyw+hWTIL1+GPvWCIH\",[We.DataCollector]:\"sha384-E6k3wOpP7syCDDwaRDLF06942Y00NkbwJvWi2OQXwwKzGwG5fd3E7RFUvCCecfvO\",[We.UsBankAccount]:\"sha384-258FON8LZGG0W9Qaz4Jij83pZHu30YnKjJA7gNulLBh6CclkucgF+tHDQuYFRYfW\",[We.GooglePayment]:\"sha384-taJ2p/0+n0VH328POAoBiuEbL3tnHUTE9S42hK1V+Txs3X+QYjZOyKW35JgHRFfO\",[We.ThreeDSecure]:\"sha384-+NSZH4Zj3sO5bdWvPKhU5N16QDxeueTVTnUVeleeESkhLSaz4Ob1hh/5myecc9Ym\",[We.VisaCheckout]:\"sha384-66DiBjghxk1OmBj8aksN8gbQ+CwoQcx1vPfiXUN08g1iQVM+BwewF0p7toM3i7SS\",[We.Venmo]:\"sha384-B5UwY42kE4RoLoWbQ7YpqosUlUad2/DlGWiw0HhoZbSPk30CQAaSA10ohyLDTkDU\",[We.HostedFields]:\"sha384-Aw9EesSaUeWxe36PqEHiOyOyOq8M6CIb1gw7/yHNVPRzGtFXXcd2OQ8qXrIlOj2P\",[We.Fastlane]:\"sha384-rhBL1hpZ71JqG+2TsT0Dih47mbjx8cjJCpeZjk9tw3df1gFMKfCTmMyZunhr7H4Y\"},[Ne]:{[We.Client]:\"sha384-0WNxksIpRP+fYZiIdr12g6DBUQfLDzYCQJZtR/C8KkcwSGhPHfcFp3tTaGcMyFTq\",[We.PaypalCheckout]:\"sha384-lWM1jk4BOxoDNV6Kop7tVNvQgINlmEVz0c/OwM+HNHK3QC8xqwd54Ovrt2QRDTjh\",[We.Paypal]:\"sha384-fXUmVxC2EMZBDXZ7eTHSTL/LFBrHej/MSXT/vTBXvra4lzgLNGvREAp+x0GYObuH\",[We.LocalPayment]:\"sha384-pha1xGuGSkmZH5x9aqHvRaO4xLea7rmQ/79PFj9zxNzxuFcOWZg7gOP7FibygOEC\",[We.DataCollector]:\"sha384-Q6PI2F9eekWbAxhroybl+aEcvqhdowN/EQlGwBUyJOzPFn9982u9xl6SU6XfGKzc\",[We.UsBankAccount]:\"sha384-W3RLQSKJL1tQ3+Y7mP6tmkamtZ8bV4Yw/XxL9Jj5JtXHraD8loMF8hAIG5m2zK7F\",[We.GooglePayment]:\"sha384-TITQMsFWA3elDNGP2mWz2oKBo4qjt+TlqzovcaPoeBiAh/wPBi6nae50ADdgU1/i\",[We.ThreeDSecure]:\"sha384-YiycYN89ZlL/Evcaq4y1ajW1mhd7JYfZBDuOwHtIn4/Jnm20GL+/XCM+zYAwWD8D\",[We.VisaCheckout]:\"sha384-/OdaTv9qrkKzjObtUe6yzfDhHozFW/+uXlrSl736sOZRJpjGQETvpYXqMFFg69xv\",[We.Venmo]:\"sha384-dA+ojdW9vbJS4JavcXyOs9d5uZHJg5dNtYupoPSH2zsXIiYDVS5amLb/u8qmQ6oz\",[We.HostedFields]:\"sha384-31ZkS58+iaWsW06ftW52zzVZFp43WPd7pNYRiddYynSNg6Oh7WGbSFGorAUH6T1z\",[We.Fastlane]:\"sha384-jlbrwNvL3HvLAUCtLSmrnQ2GH1udCUrRS/bVmReAS5fuIVvcW8Pko/Gkg82tlgtr\"}};var Xe=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Qe{constructor(e,t,n){this.scriptLoader=e,this.braintreeHostWindow=t,this.braintreeSDKVersionManager=n}loadClient(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.Client,\"client.min.js\")})}loadFastlane(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.Fastlane,\"fastlane.min.js\")})}loadPaypalCheckout(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.PaypalCheckout,\"paypal-checkout.min.js\")})}loadPaypal(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.Paypal,\"paypal.min.js\")})}loadLocalPayment(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.LocalPayment,\"local-payment.min.js\")})}loadDataCollector(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.DataCollector,\"data-collector.min.js\")})}loadUsBankAccount(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.UsBankAccount,\"us-bank-account.min.js\")})}loadGooglePayment(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.GooglePayment,\"google-payment.min.js\")})}load3DS(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.ThreeDSecure,\"three-d-secure.min.js\")})}loadVisaCheckout(){return this.loadBraintreeModuleOrThrow(We.VisaCheckout,\"visa-checkout.min.js\")}loadVenmoCheckout(){return this.loadBraintreeModuleOrThrow(We.Venmo,\"venmo.min.js\")}loadHostedFields(){return Xe(this,void 0,void 0,function*(){return this.loadBraintreeModuleOrThrow(We.HostedFields,\"hosted-fields.min.js\")})}loadVisaCheckoutSdk(e){return Xe(this,void 0,void 0,function*(){if(this.braintreeHostWindow.V)return this.braintreeHostWindow.V;const t=e?\"sha384-0eu1s1GtqzXlL9DtLgmwzC5WWlEH/ADRM0n38cVQkvtT+W/gey96rcb1LwuUOPDm\":\"sha384-1f1csvP3ZFxg4dILH1GaY4LHlZ0oX7Rk83rxmLlwbnIi4TM0NYzXoev1VoEiVDS6\";return this.scriptLoader.loadScript(`//${e?\"sandbox-\":\"\"}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`,{async:!0,attributes:{integrity:t,crossorigin:\"anonymous\"}}).then(()=>{if(!this.braintreeHostWindow.V)throw new u;return this.braintreeHostWindow.V})})}loadBraintreeModuleOrThrow(e,t){return Xe(this,void 0,void 0,function*(){let n=this.getBraintreeModule(e);if(n)return n;const i=this.braintreeSDKVersionManager.getSDKVersion(),o=`//js.braintreegateway.com/web/${i}/js/${t}`,a=i in Ze?this.getIntegrityValuesByModuleName(e,i):void 0;if(yield this.scriptLoader.loadScript(o,a?{async:!0,attributes:{integrity:a,crossorigin:\"anonymous\"}}:void 0),n=this.getBraintreeModule(e),!n)throw new u;return n})}getBraintreeModule(e){var t;return null===(t=this.braintreeHostWindow.braintree)||void 0===t?void 0:t[e]}getIntegrityValuesByModuleName(e,t){const n=Ze[t][e];if(!n)throw new Error(\"Unexpected fileName value\");return n}}class $e{constructor(e){const t=new Promise((e,t)=>{this.cancel=t});this.promise=Promise.race([e,t])}}var et=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class tt extends j{constructor(e,t){super(\"braintree\",e),this._braintreeSdk=t,this._methodId=$.BRAINTREE,this._service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});return et(this,void 0,void 0,function*(){yield i.initialize.call(this,e,t,n);let o=i.getPaymentMethod.call(this);if(o.clientToken||(o=(yield this._service.loadPaymentMethod(this._methodId)).getPaymentMethodOrThrow(this._methodId)),!o.clientToken||!o.initializationData)throw new m(h.MissingPaymentMethod);return this._braintreeSdk.initialize(o.clientToken),this._braintreeGooglePayment=yield this._braintreeSdk.getBraintreeGooglePayment(),Promise.resolve()})}getNonce(e){const t=Object.create(null,{getNonce:{get:()=>super.getNonce},getPaymentMethod:{get:()=>super.getPaymentMethod}});var n;return et(this,void 0,void 0,function*(){const i=yield t.getNonce.call(this,e),{clientToken:o,initializationData:a}=t.getPaymentMethod.call(this);if(!o||!a||!(null===(n=a.card_information)||void 0===n?void 0:n.bin))throw new m(h.MissingPaymentMethod);const{isThreeDSecureEnabled:r,card_information:{bin:s,isNetworkTokenized:c}}=a;if(r&&!c){const e=yield this._braintreeSdk.getBraintreeThreeDS(),{orderAmount:t}=this._service.getState().getOrderOrThrow();return(yield this._braintreePresent3DSChallenge(e,t,i,s)).nonce}return i})}extraPaymentData(){return et(this,void 0,void 0,function*(){return{deviceSessionId:yield this._getBraintreeDeviceData()}})}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return et(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);let i;try{i=JSON.parse(n.nonce)}catch(e){throw new b(\"Unable to parse response from Google Pay.\")}return function(e){if(!function(e){return\"object\"==typeof e&&null!==e&&\"androidPayCards\"in e}(e))throw new m(h.MissingPaymentToken)}(i),n.nonce=i.androidPayCards[0].nonce,n.card_information.bin=i.androidPayCards[0].details.bin,n.card_information.isNetworkTokenized=i.androidPayCards[0].details.isNetworkTokenized,n})}getCardParameters(){return super.getCardParameters()}getPaymentGatewayParameters(){const e=Object.create(null,{getMerchantInfo:{get:()=>super.getMerchantInfo},getTransactionInfo:{get:()=>super.getTransactionInfo},getRequiredData:{get:()=>super.getRequiredData}});return et(this,void 0,void 0,function*(){return this.getBraintreeGooglePayment().createPaymentDataRequest(Object.assign({merchantInfo:e.getMerchantInfo.call(this),transactionInfo:e.getTransactionInfo.call(this),cardRequirements:{billingAddressRequired:!0,billingAddressFormat:\"FULL\"}},yield e.getRequiredData.call(this))).paymentMethodTokenizationParameters.parameters})}getBraintreeGooglePayment(){if(!this._braintreeGooglePayment)throw new m(h.MissingPaymentMethod);return this._braintreeGooglePayment}_getBraintreeDeviceData(){return et(this,void 0,void 0,function*(){const{deviceData:e}=yield this._braintreeSdk.getDataCollectorOrThrow();return e})}_braintreePresent3DSChallenge(e,t,n,i){return new $e(e.verifyCard({amount:t,bin:i,nonce:n,onLookupComplete:(e,t)=>{t()}})).promise}}const nt=g(i=>{const o=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),a=window,r=new Ge(i),s=new Ke(new Qe((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)(),a,r));return new ne(i,new H(oe(),new tt(i,s),o,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]);var it=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class ot{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,n){return it(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const i=this.getPayPalFastlaneSdkConfiguration(e,t,n);if(yield this.loadPayPalSdk(i),!this.window.paypalFastlaneSdk)throw new u}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,n,i){return it(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||i){const i=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n);yield this.loadPayPalSdk(i)}if(!this.window.paypalGooglePay)throw new u;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return it(this,void 0,void 0,function*(){if(!this.window.paypalApms){const n=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(n),!this.window.paypalApms)throw new u}return this.window.paypalApms})}getPayPalMessages(e,t){return it(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const n=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(n)}if(!this.window.paypalMessages)throw new u;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return it(this,void 0,void 0,function*(){const n=this.transformConfig(e),i=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(n).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:i})})}getPayPalFastlaneSdkConfiguration(e,t,n){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new m(h.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,attributionId:c}=o;return{options:{\"client-id\":r,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"buttons\",\"payment-fields\",\"hosted-fields\",\"three-domain-secure\"],currency:t,intent:a},attributes:{\"data-client-metadata-id\":n.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":c,\"data-sdk-client-token\":i}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n=!0){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new m(h.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,buyerCountry:c,attributionId:d,isHostedCheckoutEnabled:l,isDeveloperModeApplicable:u}=o,y=l||n;return{options:Object.assign({\"client-id\":r,\"merchant-id\":s,commit:y,components:[\"googlepay\"],currency:t,intent:a},u&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":d,\"data-client-token\":i,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new m(h.MissingPaymentMethod);const{intent:i,clientId:o,merchantId:a,buyerCountry:r,attributionId:s,isDeveloperModeApplicable:c,availableAlternativePaymentMethods:d=[],enabledAlternativePaymentMethods:l=[]}=n,u=l,y=d.filter(e=>!l.includes(e));return{options:Object.assign({\"client-id\":o,\"merchant-id\":a,\"enable-funding\":u.length>0?u:void 0,\"disable-funding\":y.length>0?y:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:i},c&&{\"buyer-country\":r}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new m(h.MissingPaymentMethod);const{clientId:i,merchantId:o,attributionId:a,isDeveloperModeApplicable:r,buyerCountry:s}=n;return{options:Object.assign({\"client-id\":i,\"merchant-id\":o,components:[\"messages\"],currency:t},r&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":a}}}transformConfig(e){let t={};return Object.keys(e).forEach(n=>{const i=e[n];null==i||\"\"===i||Array.isArray(i)&&0===i.length||(t=Object.assign(Object.assign({},t),{[n]:Array.isArray(i)?i.join(\",\"):i}))}),t}}function at(e){if(!function(e){return!!e.initializationData&&\"attributionId\"in e.initializationData&&\"isVenmoEnabled\"in e.initializationData&&\"isGooglePayEnabled\"in e.initializationData&&\"isPayPalCreditAvailable\"in e.initializationData}(e))throw new m(h.MissingPaymentMethod)}var rt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class st extends j{constructor(e,t){super(\"paypalsb\",e),this.payPalCommerceSdk=t,this.service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});var o,a,r,s,c;return rt(this,void 0,void 0,function*(){const d=null!==(a=null===(o=this.service.getState().getStoreConfig())||void 0===o?void 0:o.currency.code)&&void 0!==a?a:n;if(!d)throw new m(h.MissingPaymentMethod);yield i.initialize.call(this,e,t,d);const l=i.getPaymentMethod.call(this);if(!l.initializationData)throw new m(h.MissingPaymentMethod);at(l);const u=yield this.payPalCommerceSdk.getPayPalGooglePaySdk(l,d);this.googlepayConfig=yield u.Googlepay().config();const{allowedPaymentMethods:y}=this.googlepayConfig;this.setGatewayIdentifier(null===(c=null===(s=null===(r=y[0])||void 0===r?void 0:r.tokenizationSpecification)||void 0===s?void 0:s.parameters)||void 0===c?void 0:c.gateway)})}getPaymentGatewayParameters(){if(this.googlepayConfig){const{allowedPaymentMethods:e}=this.googlepayConfig,{gatewayMerchantId:t}=e[0].tokenizationSpecification.parameters;return{gateway:this.getGatewayIdentifier(),gatewayMerchantId:t}}return{gateway:this.getGatewayIdentifier()}}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return rt(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n})}}const ct=\"This API endpoint is for internal use only and may change in the future\";var dt,lt;!function(e){e.Approved=\"APPROVED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\"}(dt||(dt={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(lt||(lt={}));var ut=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class ht extends ne{constructor(e,t,n,i){super(e,t),this._payPalCommerceSdk=n,this._requestSender=i}execute({payment:e}){return ut(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new W([\"payment\"]);const t=this._paymentIntegrationService.getState(),n=t.getCartOrThrow().id,{initializationData:i}=t.getPaymentMethodOrThrow(this._getMethodId()),{orderId:o}=yield this.getOrderId(n),{card_information:a}=i||{},r=yield this._googlePayPaymentProcessor.getNonce(e.methodId),s={tokenizationData:{type:\"PAYMENT_GATEWAY\",token:atob(r)},info:{cardNetwork:(null==a?void 0:a.type)||\"\",cardDetails:(null==a?void 0:a.number)||\"\"},type:\"CARD\"};yield this.confirmOrder(o,s),yield this._paymentIntegrationService.submitOrder();try{const t={formattedPayload:{method_id:e.methodId,paypal_account:{order_id:o}}};yield this._paymentIntegrationService.submitPayment({methodId:e.methodId,paymentData:t})}catch(e){yield this._googlePayPaymentProcessor.processAdditionalAction(e)}})}confirmOrder(e,t){return ut(this,void 0,void 0,function*(){const n=this._paymentIntegrationService.getState(),i=n.getPaymentMethodOrThrow(this._getMethodId());if(!i.initializationData)throw new m(h.MissingPaymentMethod);const o=n.getCartOrThrow().currency.code,a=yield this._payPalCommerceSdk.getPayPalGooglePaySdk(i,o,!0),{status:r}=yield a.Googlepay().confirmOrder({orderId:e,paymentMethodData:t});if(r===dt.PayerActionRequired)return yield a.Googlepay().initiatePayerAction({orderId:e}),Promise.resolve();if(r!==dt.Approved)throw new b(\"Payment is not approved.\");return Promise.resolve()})}getOrderId(e){return ut(this,void 0,void 0,function*(){const t={cartId:e,shouldSaveInstrument:!1},{body:n}=yield this._requestSender.post(\"/api/storefront/payments/googlepaypaypalcommercecheckout\",{headers:Object.assign({\"X-API-INTERNAL\":ct,\"Content-Type\":ye.Json},U),body:t});return n})}}const yt=g(i=>{const o=new ot((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)());return new ht(i,new H(oe(),new st(i,o),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),o,(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)())},[{id:\"googlepaypaypalcommerce\"}]);var gt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class pt{constructor(e){this.scriptLoader=e,this.window=window}getPayPalFastlaneSdk(e,t,n){return gt(this,void 0,void 0,function*(){if(!this.window.paypalFastlaneSdk){const i=this.getPayPalFastlaneSdkConfiguration(e,t,n);if(yield this.loadPayPalSdk(i),!this.window.paypalFastlaneSdk)throw new u}return this.window.paypalFastlaneSdk})}getPayPalGooglePaySdk(e,t,n,i){return gt(this,void 0,void 0,function*(){if(!this.window.paypalGooglePay||i){const i=this.getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n);yield this.loadPayPalSdk(i)}if(!this.window.paypalGooglePay)throw new u;return this.window.paypalGooglePay})}getPayPalApmsSdk(e,t){return gt(this,void 0,void 0,function*(){if(!this.window.paypalApms){const n=this.getPayPalApmSdkConfiguration(e,t);if(yield this.loadPayPalSdk(n),!this.window.paypalApms)throw new u}return this.window.paypalApms})}getPayPalMessages(e,t){return gt(this,void 0,void 0,function*(){if(!this.window.paypalMessages){const n=this.getPayPalSdkMessagesConfiguration(e,t);yield this.loadPayPalSdk(n)}if(!this.window.paypalMessages)throw new u;return this.window.paypalMessages})}loadPayPalSdk({options:e,attributes:t}){return gt(this,void 0,void 0,function*(){const n=this.transformConfig(e),i=this.transformConfig(t),o=`https://www.paypal.com/sdk/js?${new URLSearchParams(n).toString()}`;yield this.scriptLoader.loadScript(o,{async:!0,attributes:i})})}getPayPalFastlaneSdkConfiguration(e,t,n){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new m(h.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,attributionId:c}=o;return{options:{\"client-id\":r,\"merchant-id\":s,commit:!0,components:[\"fastlane\",\"three-domain-secure\"],currency:t,intent:a},attributes:{\"data-client-metadata-id\":n.replace(/-/g,\"\"),\"data-namespace\":\"paypalFastlaneSdk\",\"data-partner-attribution-id\":c,\"data-sdk-client-token\":i}}}getPayPalGooglePaySdkScriptConfigOrThrow(e,t,n=!0){const{clientToken:i,initializationData:o}=e;if(!o||!o.clientId)throw new m(h.MissingPaymentMethod);const{intent:a,clientId:r,merchantId:s,buyerCountry:c,attributionId:d,isHostedCheckoutEnabled:l,isDeveloperModeApplicable:u}=o,y=l||n;return{options:Object.assign({\"client-id\":r,\"merchant-id\":s,commit:y,components:[\"googlepay\"],currency:t,intent:a},u&&{\"buyer-country\":c}),attributes:{\"data-partner-attribution-id\":d,\"data-client-token\":i,\"data-namespace\":\"paypalGooglePay\"}}}getPayPalApmSdkConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new m(h.MissingPaymentMethod);const{intent:i,clientId:o,merchantId:a,buyerCountry:r,attributionId:s,isDeveloperModeApplicable:c,availableAlternativePaymentMethods:d=[],enabledAlternativePaymentMethods:l=[]}=n,u=this.filterFundingOptions(l),y=this.filterFundingOptions(d.filter(e=>!l.includes(e)));return{options:Object.assign({\"client-id\":o,\"merchant-id\":a,\"enable-funding\":u.length>0?u:void 0,\"disable-funding\":y.length>0?y:void 0,commit:!0,components:[\"buttons\",\"payment-fields\"],currency:t,intent:i},c&&{\"buyer-country\":r}),attributes:{\"data-partner-attribution-id\":s,\"data-namespace\":\"paypalApms\"}}}getPayPalSdkMessagesConfiguration(e,t){const{initializationData:n}=e;if(!n||!n.clientId)throw new m(h.MissingPaymentMethod);const{clientId:i,merchantId:o,attributionId:a,isDeveloperModeApplicable:r,buyerCountry:s}=n;return{options:Object.assign({\"client-id\":i,\"merchant-id\":o,components:[\"messages\"],currency:t},r&&{\"buyer-country\":s}),attributes:{\"data-namespace\":\"paypalMessages\",\"data-partner-attribution-id\":a}}}filterFundingOptions(e){const t=[\"klarna\"];return e?e.filter(e=>!t.includes(e)):[]}transformConfig(e){let t={};return Object.keys(e).forEach(n=>{const i=e[n];null==i||\"\"===i||Array.isArray(i)&&0===i.length||(t=Object.assign(Object.assign({},t),{[n]:Array.isArray(i)?i.join(\",\"):i}))}),t}}var mt,ft,wt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Pt extends j{constructor(e,t){super(\"googlepay_bigcommerce_payments\",e),this.payPalSdkHelper=t,this.service=e}initialize(e,t,n){const i=Object.create(null,{initialize:{get:()=>super.initialize},getPaymentMethod:{get:()=>super.getPaymentMethod}});var o,a,r,s,c;return wt(this,void 0,void 0,function*(){const d=null!==(a=null===(o=this.service.getState().getStoreConfig())||void 0===o?void 0:o.currency.code)&&void 0!==a?a:n;if(!d)throw new m(h.MissingPaymentMethod);yield i.initialize.call(this,e,t,d);const l=i.getPaymentMethod.call(this);if(!l.initializationData)throw new m(h.MissingPaymentMethod);at(l);const u=yield this.payPalSdkHelper.getPayPalGooglePaySdk(l,d);this.googlepayConfig=yield u.Googlepay().config();const{allowedPaymentMethods:y}=this.googlepayConfig;this.setGatewayIdentifier(null===(c=null===(s=null===(r=y[0])||void 0===r?void 0:r.tokenizationSpecification)||void 0===s?void 0:s.parameters)||void 0===c?void 0:c.gateway)})}getPaymentGatewayParameters(){if(this.googlepayConfig){const{allowedPaymentMethods:e}=this.googlepayConfig,{gatewayMerchantId:t}=e[0].tokenizationSpecification.parameters;return{gateway:this.getGatewayIdentifier(),gatewayMerchantId:t}}return{gateway:this.getGatewayIdentifier()}}mapToExternalCheckoutData(e){const t=Object.create(null,{mapToExternalCheckoutData:{get:()=>super.mapToExternalCheckoutData}});return wt(this,void 0,void 0,function*(){const n=yield t.mapToExternalCheckoutData.call(this,e);return n.nonce=btoa(n.nonce),n})}}!function(e){e.Approved=\"APPROVED\",e.PayerActionRequired=\"PAYER_ACTION_REQUIRED\"}(mt||(mt={})),function(e){e.AUTHORIZE=\"authorize\",e.CAPTURE=\"capture\"}(ft||(ft={}));var vt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class _t extends ne{constructor(e,t,n,i){super(e,t),this._payPalSdkHelper=n,this._requestSender=i}execute({payment:e}){return vt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId))throw new W([\"payment\"]);const t=this._paymentIntegrationService.getState(),n=t.getCartOrThrow().id,{initializationData:i}=t.getPaymentMethodOrThrow(this._getMethodId()),{orderId:o}=yield this.getOrderId(n),{card_information:a}=i||{},r=yield this._googlePayPaymentProcessor.getNonce(e.methodId),s={tokenizationData:{type:\"PAYMENT_GATEWAY\",token:atob(r)},info:{cardNetwork:(null==a?void 0:a.type)||\"\",cardDetails:(null==a?void 0:a.number)||\"\"},type:\"CARD\"};yield this.confirmOrder(o,s),yield this._paymentIntegrationService.submitOrder();try{const t={formattedPayload:{method_id:e.methodId,paypal_account:{order_id:o}}};yield this._paymentIntegrationService.submitPayment({methodId:e.methodId,paymentData:t})}catch(e){yield this._googlePayPaymentProcessor.processAdditionalAction(e)}})}confirmOrder(e,t){return vt(this,void 0,void 0,function*(){const n=this._paymentIntegrationService.getState(),i=n.getPaymentMethodOrThrow(this._getMethodId());if(!i.initializationData)throw new m(h.MissingPaymentMethod);const o=n.getCartOrThrow().currency.code,a=yield this._payPalSdkHelper.getPayPalGooglePaySdk(i,o,!0),{status:r}=yield a.Googlepay().confirmOrder({orderId:e,paymentMethodData:t});if(r===mt.PayerActionRequired)return yield a.Googlepay().initiatePayerAction({orderId:e}),Promise.resolve();if(r!==mt.Approved)throw new b(\"Payment is not approved.\");return Promise.resolve()})}getOrderId(e){return vt(this,void 0,void 0,function*(){const t={cartId:e,shouldSaveInstrument:!1},{body:n}=yield this._requestSender.post(\"/api/storefront/payments/googlepay_bigcommerce_paymentscheckout\",{headers:Object.assign({\"X-API-INTERNAL\":ct,\"Content-Type\":ye.Json},U),body:t});return n})}}const bt=g(i=>{const o=new pt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)());return new _t(i,new H(oe(),new Pt(i,o),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),o,(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)())},[{id:\"googlepay_bigcommerce_payments\"}]);var Ct=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class St extends j{constructor(e,t){super(\"worldlinena\",e),this.formPoster=t}extraPaymentData(){return Ct(this,void 0,void 0,function*(){return Promise.resolve({browser_info:f()})})}processAdditionalAction(e){return Ct(this,void 0,void 0,function*(){if(!function(e){return w(e)&&(t=e.body,(0,lodash__WEBPACK_IMPORTED_MODULE_3__.isObject)(t)&&\"object\"==typeof t&&\"errors\"in t&&\"three_ds_result\"in t&&(0,lodash__WEBPACK_IMPORTED_MODULE_3__.isArray)(t.errors)&&(0,lodash__WEBPACK_IMPORTED_MODULE_3__.some)(t.errors,{code:\"three_d_secure_required\"}));// removed by dead control flow\n var t; }(e))throw e;const{three_ds_result:t}=e.body,{acs_url:n,payer_auth_request:i,merchant_data:o}=t||{};if(!n||!i||!o)throw new W([\"formUrl\",\"threeDSSessionData\",\"creq\"]);return new Promise(e=>{this.formPoster.postForm(n,{threeDSSessionData:i,creq:o},e,\"_top\")})})}}const It=g(n=>new ne(n,new H(oe(),new St(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);class Ot extends l{constructor(e){super(e||\"Not implemented.\"),this.name=\"NotImplementedError\",this.type=\"not_implemented\"}}var kt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Tt{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t}initialize(e){var t;return kt(this,void 0,void 0,function*(){if(!(null==e?void 0:e.methodId)||!ee(e.methodId))throw new b('Unable to proceed because \"methodId\" is not a valid key.');this._methodId=e.methodId;const n=e[this._getMethodId()];if(!n)throw new b(\"Unable to proceed without valid options.\");let i,o=this._paymentIntegrationService.getState();try{i=o.getPaymentMethodOrThrow(this._getMethodId())}catch(e){o=yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodId()),i=o.getPaymentMethodOrThrow(this._getMethodId())}try{yield this._googlePayPaymentProcessor.initialize(()=>i,this._getGooglePayClientOptions(null===(t=i.initializationData)||void 0===t?void 0:t.storeCountry))}catch(e){return}this._addPaymentButton(n)})}signIn(){return Promise.reject(new Ot('In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'))}signOut(){var e;return kt(this,void 0,void 0,function*(){const t=null===(e=this._paymentIntegrationService.getState().getPaymentId())||void 0===e?void 0:e.providerId;t&&(yield this._googlePayPaymentProcessor.signOut(t))})}executePaymentMethodCheckout(e){var t;return null===(t=null==e?void 0:e.continueWithCheckoutCallback)||void 0===t||t.call(e),Promise.resolve()}deinitialize(){var e;return null===(e=this._paymentButton)||void 0===e||e.remove(),this._paymentButton=void 0,this._methodId=void 0,Promise.resolve()}_getGooglePayClientOptions(e){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:t,shippingAddress:n,shippingOptionData:i,offerData:o})=>kt(this,void 0,void 0,function*(){const{availableTriggers:a,addressChangeTriggers:r,shippingOptionsChangeTriggers:s,offerChangeTriggers:c}=this._googlePayPaymentProcessor.getCallbackTriggers();if(!a.includes(t))return;const d=r.includes(t)?yield this._googlePayPaymentProcessor.handleShippingAddressChange(n):void 0;s.includes(t)&&(yield this._googlePayPaymentProcessor.handleShippingOptionChange(i.id));const{newOfferInfo:l,error:u}=c.includes(t)?yield this._googlePayPaymentProcessor.handleCoupons(o):{},h=u;yield this._paymentIntegrationService.loadCheckout();const y=this._googlePayPaymentProcessor.getTotalPrice(),{code:g}=this._paymentIntegrationService.getState().getCartOrThrow().currency;return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},e&&{countryCode:e}),{currencyCode:g,totalPriceStatus:E.FINAL,totalPrice:y})},d&&{newShippingOptionParameters:d}),l&&{newOfferInfo:l}),h&&{error:h})})}}}_addPaymentButton({container:e,buttonColor:t,buttonType:n,onClick:i,onError:o}){var a;this._paymentButton=null!==(a=this._paymentButton)&&void 0!==a?a:this._googlePayPaymentProcessor.addPaymentButton(e,{buttonColor:null!=t?t:\"default\",buttonType:null!=n?n:\"plain\",onClick:this._handleClick(o,i)})}_handleClick(e,t){return n=>kt(this,void 0,void 0,function*(){n.preventDefault(),t&&\"function\"==typeof t&&t();try{yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(t){let n=t;if(Q(t)){if(\"CANCELED\"===t.statusCode)throw new P;n=new V(JSON.stringify(t))}throw null==e||e(new V(\"An error occurred while requesting your Google Pay payment details.\")),n}})}_interactWithPaymentSheet(){return kt(this,void 0,void 0,function*(){const e=yield this._googlePayPaymentProcessor.showPaymentSheet(),t=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(e),n=this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(e),i=\"/embedded-checkout\"===window.location.pathname?this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink:void 0;t&&(yield this._paymentIntegrationService.updateBillingAddress(t)),n&&(yield this._paymentIntegrationService.updateShippingAddress(n)),yield this._googlePayPaymentProcessor.setExternalCheckoutForm(this._getMethodId(),e,i)})}_getMethodId(){return k(this._methodId,()=>new _(v.PaymentNotInitialized))}}const At=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Tt(n,new H(oe(),new j(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv2\"}]),Mt=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Tt(n,new H(oe(),new j(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv3\"}]),Dt=g(n=>new Tt(n,new H(oe(),new le(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]),Et=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Tt(n,new H(oe(),new me(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]),Nt=g(n=>new Tt(n,new H(oe(),new we(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"}]),xt=g(n=>new Tt(n,new H(oe(),new we(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaybnz\"}]),zt=g(n=>new Tt(n,new H(oe(),new ve(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]),Gt=g(i=>new Tt(i,new H(oe(),new Oe(i,new Te((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeocs\"}]),Rt=g(i=>new Tt(i,new H(oe(),new Oe(i,new Te((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripeupe\"}]),Bt=g(n=>new Tt(n,new H(oe(),new Me(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]),jt=g(i=>{const o=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),a=window,r=new Ge(i),s=new Ke(new Qe((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)(),a,r));return new Tt(i,new H(oe(),new tt(i,s),o,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]),Lt=g(i=>new Tt(i,new H(oe(),new st(i,new ot((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaypaypalcommerce\"}]),Ft=g(i=>new Tt(i,new H(oe(),new Pt(i,new pt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepay_bigcommerce_payments\"}]),Ut=g(n=>new Tt(n,new H(oe(),new St(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);class Vt extends l{constructor(e){super(e||\"An unexpected error has occurred during buy now cart creation process. Please try again later.\"),this.name=\"BuyNowCartCreationError\",this.type=\"buy_now_cart_creation_error\"}}var qt=function(e,t,n,i){return new(n||(n=Promise))(function(o,a){function r(e){try{c(i.next(e))}catch(e){a(e)}}function s(e){try{c(i.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,s)}c((i=i.apply(e,t||[])).next())})};class Ht{constructor(e,t){this._paymentIntegrationService=e,this._googlePayPaymentProcessor=t}initialize(e){var t,n;return qt(this,void 0,void 0,function*(){if(!e.methodId||!ee(e.methodId))throw new b('Unable to proceed because \"methodId\" is not a valid key.');if(this._methodId=e.methodId,!e.containerId)throw new b('Unable to proceed because \"containerId\" is not a valid key.');const i=e[this._getMethodOrThrow()];if(!i)throw new b(\"Unable to proceed without valid options.\");const{buyNowInitializeOptions:o,currencyCode:a,buttonColor:r,buttonType:s,onError:c}=i;let d,l=this._paymentIntegrationService.getState();try{d=l.getPaymentMethodOrThrow(this._getMethodOrThrow())}catch(e){l=yield this._paymentIntegrationService.loadPaymentMethod(this._getMethodOrThrow()),d=l.getPaymentMethodOrThrow(this._getMethodOrThrow())}if(this._countryCode=null===(t=d.initializationData)||void 0===t?void 0:t.storeCountry,o){if(!a)throw new b('Unable to initialize payment because \"options.currencyCode\" argument is not provided.');this._currencyCode=a,this._buyNowInitializeOptions=o,yield this._googlePayPaymentProcessor.initialize(()=>d,this._getGooglePayClientOptions(),!!o,a)}else yield this._paymentIntegrationService.loadDefaultCheckout(),yield this._googlePayPaymentProcessor.initialize(()=>d,this._getGooglePayClientOptions());this._paymentButton=null!==(n=this._paymentButton)&&void 0!==n?n:this._googlePayPaymentProcessor.addPaymentButton(e.containerId,{buttonColor:null!=r?r:\"default\",buttonType:null!=s?s:\"plain\",onClick:this._handleClick(c)})})}deinitialize(){var e;return null===(e=this._paymentButton)||void 0===e||e.remove(),this._paymentButton=void 0,this._methodId=void 0,Promise.resolve()}_handleClick(e){return t=>qt(this,void 0,void 0,function*(){t.preventDefault();try{this._buyNowInitializeOptions?yield this._createBuyNowCartOrThrow(this._buyNowInitializeOptions):yield this._paymentIntegrationService.loadDefaultCheckout(),yield this._googlePayPaymentProcessor.initializeWidget(),yield this._interactWithPaymentSheet()}catch(t){let n=t;if(Q(t)){if(\"CANCELED\"===t.statusCode)throw new P;n=new V(JSON.stringify(t))}throw null==e||e(new V(\"An error occurred while requesting your Google Pay payment details.\")),n}})}_interactWithPaymentSheet(){var e;return qt(this,void 0,void 0,function*(){const t=yield this._googlePayPaymentProcessor.showPaymentSheet(),n=this._googlePayPaymentProcessor.mapToBillingAddressRequestBody(t),i=this._googlePayPaymentProcessor.mapToShippingAddressRequestBody(t),o=\"/embedded-checkout\"===window.location.pathname?this._paymentIntegrationService.getState().getStoreConfigOrThrow().links.siteLink:void 0;n&&(yield this._paymentIntegrationService.updateBillingAddress(n)),i&&!(null===(e=this._buyNowCart)||void 0===e?void 0:e.lineItems.digitalItems.length)&&(yield this._paymentIntegrationService.updateShippingAddress(i)),yield this._googlePayPaymentProcessor.setExternalCheckoutForm(this._getMethodOrThrow(),t,o)})}_getGooglePayClientOptions(){return{paymentDataCallbacks:{onPaymentDataChanged:({callbackTrigger:e,shippingAddress:t,shippingOptionData:n,offerData:i})=>qt(this,void 0,void 0,function*(){const{availableTriggers:o,addressChangeTriggers:a,shippingOptionsChangeTriggers:r,offerChangeTriggers:s}=this._googlePayPaymentProcessor.getCallbackTriggers();if(!o.includes(e))return;const c=a.includes(e)?yield this._googlePayPaymentProcessor.handleShippingAddressChange(t):void 0;r.includes(e)&&(yield this._googlePayPaymentProcessor.handleShippingOptionChange(n.id));const{newOfferInfo:d,error:l}=s.includes(e)?yield this._googlePayPaymentProcessor.handleCoupons(i):{},u=l;return this._buyNowInitializeOptions?this._getBuyNowTransactionInfo(c,d,u):this._getTransactionInfo(c,d,u)})}}}_createBuyNowCartOrThrow(e){return qt(this,void 0,void 0,function*(){if(\"function\"==typeof(null==e?void 0:e.getBuyNowCartRequestBody)){const t=e.getBuyNowCartRequestBody();try{this._buyNowCart=yield this._paymentIntegrationService.createBuyNowCart(t),yield this._paymentIntegrationService.loadCheckout(this._buyNowCart.id)}catch(e){if(\"string\"==typeof e)throw new Vt(e);throw e}}})}_getBuyNowTransactionInfo(e,t,n){if(!this._buyNowCart)return;const{cartAmount:i}=this._buyNowCart,o=this._googlePayPaymentProcessor.getTotalPrice();return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},this._countryCode&&{countryCode:this._countryCode}),{currencyCode:this._getCurrencyCodeOrThrow(),totalPrice:o||String(i),totalPriceStatus:E.FINAL})},e&&{newShippingOptionParameters:e}),t&&{newOfferInfo:t}),n&&{error:n})}_getTransactionInfo(e,t,n){return qt(this,void 0,void 0,function*(){yield this._paymentIntegrationService.loadCheckout();const i=this._googlePayPaymentProcessor.getTotalPrice(),{code:o}=this._paymentIntegrationService.getState().getCartOrThrow().currency;return Object.assign(Object.assign(Object.assign({newTransactionInfo:Object.assign(Object.assign({},this._countryCode&&{countryCode:this._countryCode}),{currencyCode:o,totalPriceStatus:E.FINAL,totalPrice:i})},e&&{newShippingOptionParameters:e}),t&&{newOfferInfo:t}),n&&{error:n})})}_getMethodOrThrow(){return k(this._methodId,()=>new _(v.PaymentNotInitialized))}_getCurrencyCodeOrThrow(){return k(this._currencyCode,()=>new b('Unable to initialize payment because \"options.currencyCode\" argument is not provided.'))}}const Wt=g(i=>{const o=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),a=window,r=new Ge(i),s=new Ke(new Qe((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)(),a,r));return new Ht(i,new H(oe(),new tt(i,s),o,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaybraintree\"}]),Yt=g(i=>new Ht(i,new H(oe(),new st(i,new ot((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaypaypalcommerce\"}]),Jt=g(i=>new Ht(i,new H(oe(),new Pt(i,new pt((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepay_bigcommerce_payments\"}]),Kt=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Ht(n,new H(oe(),new j(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv2\"}]),Zt=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Ht(n,new H(oe(),new j(\"adyen\",n),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepayadyenv3\"}]),Xt=g(n=>new Ht(n,new H(oe(),new le(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayauthorizenet\"}]),Qt=g(n=>{const i=(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)();return new Ht(n,new H(oe(),new me(n,i),i,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()))},[{id:\"googlepaycheckoutcom\"}]),$t=g(n=>new Ht(n,new H(oe(),new we(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaycybersourcev2\"},{id:\"googlepaybnz\"}]),en=g(n=>new Ht(n,new H(oe(),new ve(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayorbital\"}]),tn=g(i=>new Ht(i,new H(oe(),new Oe(i,new Te((0,_bigcommerce_script_loader__WEBPACK_IMPORTED_MODULE_2__.getScriptLoader)())),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaystripe\"},{id:\"googlepaystripeupe\"},{id:\"googlepaystripeocs\"}]),nn=g(n=>new Ht(n,new H(oe(),new Me(n),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepayworldpayaccess\"}]),on=g(n=>new Ht(n,new H(oe(),new St(n,(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)()),(0,_bigcommerce_request_sender__WEBPACK_IMPORTED_MODULE_1__.createRequestSender)(),(0,_bigcommerce_form_poster__WEBPACK_IMPORTED_MODULE_0__.createFormPoster)())),[{id:\"googlepaytdonlinemart\"}]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../checkout-sdk-js/dist/esm/integrations/google-pay.js\n\n}");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss ***!
  \***************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("{// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".google-pay-top-button > div {\\n  height: 100%;\\n  width: 100%;\\n}\\n.google-pay-top-button .gpay-card-info-container {\\n  height: 36px;\\n  width: 100%;\\n  min-width: 100%;\\n  min-height: unset;\\n}\\n.google-pay-top-button .gpay-card-info-animation-container {\\n  height: 100%;\\n}\\n.google-pay-top-button .gpay-card-info-container, .google-pay-top-button .gpay-button {\\n  outline: none;\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2NzcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLDJHQUFzRDtBQUNoRztBQUNBO0FBQ0Esd0RBQXdELGlCQUFpQixnQkFBZ0IsR0FBRyxvREFBb0QsaUJBQWlCLGdCQUFnQixvQkFBb0Isc0JBQXNCLEdBQUcsOERBQThELGlCQUFpQixHQUFHLHlGQUF5RixrQkFBa0IsR0FBRztBQUM5WjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2Nzcz9kNzI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZ29vZ2xlLXBheS10b3AtYnV0dG9uID4gZGl2IHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZ29vZ2xlLXBheS10b3AtYnV0dG9uIC5ncGF5LWNhcmQtaW5mby1jb250YWluZXIge1xcbiAgaGVpZ2h0OiAzNnB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtaW4td2lkdGg6IDEwMCU7XFxuICBtaW4taGVpZ2h0OiB1bnNldDtcXG59XFxuLmdvb2dsZS1wYXktdG9wLWJ1dHRvbiAuZ3BheS1jYXJkLWluZm8tYW5pbWF0aW9uLWNvbnRhaW5lciB7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcbi5nb29nbGUtcGF5LXRvcC1idXR0b24gLmdwYXktY2FyZC1pbmZvLWNvbnRhaW5lciwgLmdvb2dsZS1wYXktdG9wLWJ1dHRvbiAuZ3BheS1idXR0b24ge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss\n\n}");

/***/ }),

/***/ "./packages/checkout-button-integration/src/CheckoutButton.tsx":
/*!*********************************************************************!*\
  !*** ./packages/checkout-button-integration/src/CheckoutButton.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n\n\n\nconst CheckoutButton = ({ checkoutService: { deinitializeCustomer, initializeCustomer }, checkoutButtonContainerClass, containerId, methodId, onUnhandledError, onWalletButtonClick, additionalInitializationOptions, integrations, }) => {\n    const initializeCustomerStrategyOrThrow = () => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n        try {\n            yield initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: Object.assign({ container: containerId, onUnhandledError, onClick: () => onWalletButtonClick(methodId) }, additionalInitializationOptions),\n            });\n        }\n        catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    });\n    const deinitializeCustomerStrategyOrThrow = () => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n        try {\n            yield deinitializeCustomer({ methodId });\n        }\n        catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        void initializeCustomerStrategyOrThrow();\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", { className: checkoutButtonContainerClass, \"data-test\": containerId, id: containerId }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(CheckoutButton, []));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9jaGVja291dC1idXR0b24taW50ZWdyYXRpb24vc3JjL0NoZWNrb3V0QnV0dG9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUU7QUFNVjtBQUV2RCxNQUFNLGNBQWMsR0FBMkMsQ0FBQyxFQUM1RCxlQUFlLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxFQUM3RCw0QkFBNEIsRUFDNUIsV0FBVyxFQUNYLFFBQVEsRUFDUixnQkFBZ0IsRUFDaEIsbUJBQW1CLEVBQ25CLCtCQUErQixFQUMvQixZQUFZLEdBQ2YsRUFBRSxFQUFFO0lBQ0QsTUFBTSxpQ0FBaUMsR0FBRyxHQUFTLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUM7WUFDRCxNQUFNLGtCQUFrQixDQUFDO2dCQUNyQixRQUFRO2dCQUNSLFlBQVk7Z0JBQ1osQ0FBQyxRQUFRLENBQUMsa0JBQ04sU0FBUyxFQUFFLFdBQVcsRUFDdEIsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFDekMsK0JBQStCLENBQ3JDO2FBQ0osQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixJQUFJLE9BQU8sZ0JBQWdCLEtBQUssVUFBVSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDbkUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDLEVBQUM7SUFFRixNQUFNLG1DQUFtQyxHQUFHLEdBQVMsRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQztZQUNELE1BQU0sb0JBQW9CLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2IsSUFBSSxPQUFPLGdCQUFnQixLQUFLLFVBQVUsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7Z0JBQ25FLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQyxFQUFDO0lBRUYsZ0RBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxLQUFLLGlDQUFpQyxFQUFFLENBQUM7UUFFekMsT0FBTyxHQUFHLEVBQUU7WUFDUixLQUFLLG1DQUFtQyxFQUFFLENBQUM7UUFDL0MsQ0FBQyxDQUFDO1FBQ0YsdURBQXVEO0lBQzNELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLE9BQU8sQ0FDSCxvRUFBSyxTQUFTLEVBQUUsNEJBQTRCLGVBQWEsV0FBVyxFQUFFLEVBQUUsRUFBRSxXQUFXLEdBQUksQ0FDNUYsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVGLGlFQUFlLHlGQUFxQixDQUNoQyxjQUFjLEVBQ2QsRUFBRSxDQUNMLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2NoZWNrb3V0LWJ1dHRvbi1pbnRlZ3JhdGlvbi9zcmMvQ2hlY2tvdXRCdXR0b24udHN4P2FjMzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHR5cGUgRnVuY3Rpb25Db21wb25lbnQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgICB0eXBlIENoZWNrb3V0QnV0dG9uUHJvcHMsXG4gICAgdHlwZSBDaGVja291dEJ1dHRvblJlc29sdmVJZCxcbiAgICB0b1Jlc29sdmFibGVDb21wb25lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmNvbnN0IENoZWNrb3V0QnV0dG9uOiBGdW5jdGlvbkNvbXBvbmVudDxDaGVja291dEJ1dHRvblByb3BzPiA9ICh7XG4gICAgY2hlY2tvdXRTZXJ2aWNlOiB7IGRlaW5pdGlhbGl6ZUN1c3RvbWVyLCBpbml0aWFsaXplQ3VzdG9tZXIgfSxcbiAgICBjaGVja291dEJ1dHRvbkNvbnRhaW5lckNsYXNzLFxuICAgIGNvbnRhaW5lcklkLFxuICAgIG1ldGhvZElkLFxuICAgIG9uVW5oYW5kbGVkRXJyb3IsXG4gICAgb25XYWxsZXRCdXR0b25DbGljayxcbiAgICBhZGRpdGlvbmFsSW5pdGlhbGl6YXRpb25PcHRpb25zLFxuICAgIGludGVncmF0aW9ucyxcbn0pID0+IHtcbiAgICBjb25zdCBpbml0aWFsaXplQ3VzdG9tZXJTdHJhdGVneU9yVGhyb3cgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBpbml0aWFsaXplQ3VzdG9tZXIoe1xuICAgICAgICAgICAgICAgIG1ldGhvZElkLFxuICAgICAgICAgICAgICAgIGludGVncmF0aW9ucyxcbiAgICAgICAgICAgICAgICBbbWV0aG9kSWRdOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVySWQsXG4gICAgICAgICAgICAgICAgICAgIG9uVW5oYW5kbGVkRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IG9uV2FsbGV0QnV0dG9uQ2xpY2sobWV0aG9kSWQpLFxuICAgICAgICAgICAgICAgICAgICAuLi5hZGRpdGlvbmFsSW5pdGlhbGl6YXRpb25PcHRpb25zLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb25VbmhhbmRsZWRFcnJvciA9PT0gJ2Z1bmN0aW9uJyAmJiBlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZGVpbml0aWFsaXplQ3VzdG9tZXJTdHJhdGVneU9yVGhyb3cgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBkZWluaXRpYWxpemVDdXN0b21lcih7IG1ldGhvZElkIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvblVuaGFuZGxlZEVycm9yID09PSAnZnVuY3Rpb24nICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2b2lkIGluaXRpYWxpemVDdXN0b21lclN0cmF0ZWd5T3JUaHJvdygpO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB2b2lkIGRlaW5pdGlhbGl6ZUN1c3RvbWVyU3RyYXRlZ3lPclRocm93KCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2hlY2tvdXRCdXR0b25Db250YWluZXJDbGFzc30gZGF0YS10ZXN0PXtjb250YWluZXJJZH0gaWQ9e2NvbnRhaW5lcklkfSAvPlxuICAgICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b1Jlc29sdmFibGVDb21wb25lbnQ8Q2hlY2tvdXRCdXR0b25Qcm9wcywgQ2hlY2tvdXRCdXR0b25SZXNvbHZlSWQ+KFxuICAgIENoZWNrb3V0QnV0dG9uLFxuICAgIFtdLFxuKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/checkout-button-integration/src/CheckoutButton.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayButton.scss":
/*!******************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayButton.scss ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{\nvar content = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./GooglePayButton.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!./packages/google-pay-integration/src/GooglePayButton.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! !../../../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) // removed by dead control flow\n{}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2NzcyIsIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLDRUQUFpSjs7QUFFdks7O0FBRUE7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsMEdBQXNEOztBQUUzRTs7QUFFQSxHQUFHLEtBQVUsRUFBRTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24uc2Nzcz9hMjRkIl0sInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzJdIS4vR29vZ2xlUGF5QnV0dG9uLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9Hb29nbGVQYXlCdXR0b24uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMl0hLi9Hb29nbGVQYXlCdXR0b24uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayButton.scss\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayButton.tsx":
/*!*****************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayButton.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bigcommerce/checkout-sdk/integrations/google-pay */ \"../checkout-sdk-js/dist/esm/integrations/google-pay.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bigcommerce_checkout_checkout_button_integration__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @bigcommerce/checkout/checkout-button-integration */ \"./packages/checkout-button-integration/src/CheckoutButton.tsx\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/isEmbedded.ts\");\n/* harmony import */ var _GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GooglePayButton.scss */ \"./packages/google-pay-integration/src/GooglePayButton.scss\");\n/* harmony import */ var _GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_GooglePayButton_scss__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\nconst GooglePayButton = (props) => {\n    const { language, onUnhandledError } = props;\n    if ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()) {\n        onUnhandledError(new _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"](language.translate('embedded_checkout.unsupported_error', {\n            methods: 'googlepay',\n        })));\n        return null;\n    }\n    const integrations = [\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAdyenV2CustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAdyenV3CustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayAuthorizeDotNetCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayCheckoutComCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayCybersourceCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBnzCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayOrbitalCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayStripeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayStripeUpeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayWorldpayAccessCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBraintreeCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayPayPalCommerceCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayBigCommercePaymentsCustomerStrategy,\n        _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_0__.createGooglePayTdOnlineMartCustomerStrategy,\n    ];\n    return (react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_bigcommerce_checkout_checkout_button_integration__WEBPACK_IMPORTED_MODULE_2__[\"default\"], Object.assign({ checkoutButtonContainerClass: \"google-pay-top-button\", integrations: integrations }, props)));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GooglePayButton, [\n    { id: 'googlepayadyenv2' },\n    { id: 'googlepayadyenv3' },\n    { id: 'googlepayauthorizenet' },\n    { id: 'googlepaybnz' },\n    { id: 'googlepaybraintree' },\n    { id: 'googlepaypaypalcommerce' },\n    { id: 'googlepaycheckoutcom' },\n    { id: 'googlepaycybersourcev2' },\n    { id: 'googlepayorbital' },\n    { id: 'googlepaystripe' },\n    { id: 'googlepaystripeupe' },\n    { id: 'googlepayworldpayaccess' },\n    { id: 'googlepaytdonlinemart' },\n    { id: 'googlepaystripeocs' },\n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9Hb29nbGVQYXlCdXR0b24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFlMkQ7QUFDTDtBQUU2QjtBQU81QjtBQUV2QjtBQUVoQyxNQUFNLGVBQWUsR0FBMkMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUN0RSxNQUFNLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsS0FBSyxDQUFDO0lBRTdDLElBQUkseUZBQVUsRUFBRSxFQUFFLENBQUM7UUFDZixnQkFBZ0IsQ0FDWixJQUFJLHFGQUFnQyxDQUNoQyxRQUFRLENBQUMsU0FBUyxDQUFDLHFDQUFxQyxFQUFFO1lBQ3RELE9BQU8sRUFBRSxXQUFXO1NBQ3ZCLENBQUMsQ0FDTCxDQUNKLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUc7UUFDakIscUhBQXNDO1FBQ3RDLHFIQUFzQztRQUN0Qyw2SEFBOEM7UUFDOUMseUhBQTBDO1FBQzFDLHlIQUEwQztRQUMxQyxpSEFBa0M7UUFDbEMscUhBQXNDO1FBQ3RDLG9IQUFxQztRQUNyQyx1SEFBd0M7UUFDeEMsNEhBQTZDO1FBQzdDLHVIQUF3QztRQUN4Qyw0SEFBNkM7UUFDN0MsaUlBQWtEO1FBQ2xELDBIQUEyQztLQUM5QyxDQUFDO0lBRUYsT0FBTyxDQUNILDJEQUFDLHlGQUFjLGtCQUNYLDRCQUE0QixFQUFDLHVCQUF1QixFQUNwRCxZQUFZLEVBQUUsWUFBWSxJQUN0QixLQUFLLEVBQ1gsQ0FDTCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUYsaUVBQWUseUZBQXFCLENBQ2hDLGVBQWUsRUFDZjtJQUNJLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFO0lBQzFCLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFO0lBQzFCLEVBQUUsRUFBRSxFQUFFLHVCQUF1QixFQUFFO0lBQy9CLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRTtJQUN0QixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtJQUM1QixFQUFFLEVBQUUsRUFBRSx5QkFBeUIsRUFBRTtJQUNqQyxFQUFFLEVBQUUsRUFBRSxzQkFBc0IsRUFBRTtJQUM5QixFQUFFLEVBQUUsRUFBRSx3QkFBd0IsRUFBRTtJQUNoQyxFQUFFLEVBQUUsRUFBRSxrQkFBa0IsRUFBRTtJQUMxQixFQUFFLEVBQUUsRUFBRSxpQkFBaUIsRUFBRTtJQUN6QixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtJQUM1QixFQUFFLEVBQUUsRUFBRSx5QkFBeUIsRUFBRTtJQUNqQyxFQUFFLEVBQUUsRUFBRSx1QkFBdUIsRUFBRTtJQUMvQixFQUFFLEVBQUUsRUFBRSxvQkFBb0IsRUFBRTtDQUMvQixDQUNKLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2dvb2dsZS1wYXktaW50ZWdyYXRpb24vc3JjL0dvb2dsZVBheUJ1dHRvbi50c3g/NGMwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIGNyZWF0ZUdvb2dsZVBheUFkeWVuVjJDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUFkeWVuVjNDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUF1dGhvcml6ZURvdE5ldEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5QmlnQ29tbWVyY2VQYXltZW50c0N1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5Qm56Q3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlCcmFpbnRyZWVDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheUNoZWNrb3V0Q29tQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlDeWJlcnNvdXJjZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5T3JiaXRhbEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5UGF5UGFsQ29tbWVyY2VDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheVN0cmlwZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlVXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICBjcmVhdGVHb29nbGVQYXlUZE9ubGluZU1hcnRDdXN0b21lclN0cmF0ZWd5LFxuICAgIGNyZWF0ZUdvb2dsZVBheVdvcmxkcGF5QWNjZXNzQ3VzdG9tZXJTdHJhdGVneSxcbn0gZnJvbSAnQGJpZ2NvbW1lcmNlL2NoZWNrb3V0LXNkay9pbnRlZ3JhdGlvbnMvZ29vZ2xlLXBheSc7XG5pbXBvcnQgUmVhY3QsIHsgdHlwZSBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ2hlY2tvdXRCdXR0b24gfSBmcm9tICdAYmlnY29tbWVyY2UvY2hlY2tvdXQvY2hlY2tvdXQtYnV0dG9uLWludGVncmF0aW9uJztcbmltcG9ydCB7XG4gICAgdHlwZSBDaGVja291dEJ1dHRvblByb3BzLFxuICAgIHR5cGUgQ2hlY2tvdXRCdXR0b25SZXNvbHZlSWQsXG4gICAgRW1iZWRkZWRDaGVja291dFVuc3VwcG9ydGVkRXJyb3IsXG4gICAgaXNFbWJlZGRlZCxcbiAgICB0b1Jlc29sdmFibGVDb21wb25lbnQsXG59IGZyb20gJ0BiaWdjb21tZXJjZS9jaGVja291dC9wYXltZW50LWludGVncmF0aW9uLWFwaSc7XG5cbmltcG9ydCAnLi9Hb29nbGVQYXlCdXR0b24uc2Nzcyc7XG5cbmNvbnN0IEdvb2dsZVBheUJ1dHRvbjogRnVuY3Rpb25Db21wb25lbnQ8Q2hlY2tvdXRCdXR0b25Qcm9wcz4gPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IGxhbmd1YWdlLCBvblVuaGFuZGxlZEVycm9yIH0gPSBwcm9wcztcblxuICAgIGlmIChpc0VtYmVkZGVkKCkpIHtcbiAgICAgICAgb25VbmhhbmRsZWRFcnJvcihcbiAgICAgICAgICAgIG5ldyBFbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvcihcbiAgICAgICAgICAgICAgICBsYW5ndWFnZS50cmFuc2xhdGUoJ2VtYmVkZGVkX2NoZWNrb3V0LnVuc3VwcG9ydGVkX2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2RzOiAnZ29vZ2xlcGF5JyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgaW50ZWdyYXRpb25zID0gW1xuICAgICAgICBjcmVhdGVHb29nbGVQYXlBZHllblYyQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5QWR5ZW5WM0N1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUF1dGhvcml6ZURvdE5ldEN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUNoZWNrb3V0Q29tQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5Q3liZXJzb3VyY2VDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlCbnpDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlPcmJpdGFsQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5U3RyaXBlVXBlQ3VzdG9tZXJTdHJhdGVneSxcbiAgICAgICAgY3JlYXRlR29vZ2xlUGF5V29ybGRwYXlBY2Nlc3NDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlCcmFpbnRyZWVDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlQYXlQYWxDb21tZXJjZUN1c3RvbWVyU3RyYXRlZ3ksXG4gICAgICAgIGNyZWF0ZUdvb2dsZVBheUJpZ0NvbW1lcmNlUGF5bWVudHNDdXN0b21lclN0cmF0ZWd5LFxuICAgICAgICBjcmVhdGVHb29nbGVQYXlUZE9ubGluZU1hcnRDdXN0b21lclN0cmF0ZWd5LFxuICAgIF07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Q2hlY2tvdXRCdXR0b25cbiAgICAgICAgICAgIGNoZWNrb3V0QnV0dG9uQ29udGFpbmVyQ2xhc3M9XCJnb29nbGUtcGF5LXRvcC1idXR0b25cIlxuICAgICAgICAgICAgaW50ZWdyYXRpb25zPXtpbnRlZ3JhdGlvbnN9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIC8+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRvUmVzb2x2YWJsZUNvbXBvbmVudDxDaGVja291dEJ1dHRvblByb3BzLCBDaGVja291dEJ1dHRvblJlc29sdmVJZD4oXG4gICAgR29vZ2xlUGF5QnV0dG9uLFxuICAgIFtcbiAgICAgICAgeyBpZDogJ2dvb2dsZXBheWFkeWVudjInIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlhZHllbnYzJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5YXV0aG9yaXplbmV0JyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5Ym56JyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5YnJhaW50cmVlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5cGF5cGFsY29tbWVyY2UnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXljaGVja291dGNvbScgfSxcbiAgICAgICAgeyBpZDogJ2dvb2dsZXBheWN5YmVyc291cmNldjInIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlvcmJpdGFsJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5c3RyaXBlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5c3RyaXBldXBlJyB9LFxuICAgICAgICB7IGlkOiAnZ29vZ2xlcGF5d29ybGRwYXlhY2Nlc3MnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXl0ZG9ubGluZW1hcnQnIH0sXG4gICAgICAgIHsgaWQ6ICdnb29nbGVwYXlzdHJpcGVvY3MnIH0sXG4gICAgXSxcbik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayButton.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx":
/*!************************************************************************!*\
  !*** ./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @bigcommerce/checkout-sdk/integrations/google-pay */ \"../checkout-sdk-js/dist/esm/integrations/google-pay.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/PaymentMethodId.ts\");\n/* harmony import */ var _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @bigcommerce/checkout/payment-integration-api */ \"./packages/payment-integration-api/src/toResolvableComponent.tsx\");\n/* harmony import */ var _bigcommerce_checkout_wallet_button_integration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @bigcommerce/checkout/wallet-button-integration */ \"./packages/wallet-button-integration/src/WalletButtonPaymentMethodComponent.tsx\");\n\n\n\n\n\nconst GooglePayPaymentMethod = (_a) => {\n    var { checkoutService, method, onUnhandledError } = _a, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_a, [\"checkoutService\", \"method\", \"onUnhandledError\"]);\n    const initializeGooglePayPayment = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((defaultOptions) => {\n        const reinitializePayment = (options) => (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(void 0, void 0, void 0, function* () {\n            try {\n                yield checkoutService.deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                yield checkoutService.initializePayment(Object.assign(Object.assign({}, options), { gatewayId: method.gateway, methodId: method.id }));\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        });\n        const loadingContainerId = 'checkout-app';\n        const mergedOptions = Object.assign(Object.assign({}, defaultOptions), { integrations: [\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAdyenV2PaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAdyenV3PaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayAuthorizeNetPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayCheckoutComPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayCybersourcePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayOrbitalPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayStripePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayWorldpayAccessPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayBraintreePaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayPPCPPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayBigCommercePaymentsPaymentStrategy,\n                _bigcommerce_checkout_sdk_integrations_google_pay__WEBPACK_IMPORTED_MODULE_1__.createGooglePayTdOnlineMartPaymentStrategy,\n            ], [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV2GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV3GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AuthorizeNetGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BNZGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BigCommercePaymentsGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BraintreeGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PayPalCommerceGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeUPEGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CybersourceV2GooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OrbitalGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CheckoutcomGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].WorldpayAccessGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TdOnlineMartGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            }, [_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeOCSGooglePay]: {\n                loadingContainerId,\n                walletButton: 'walletButton',\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            } });\n        return checkoutService.initializePayment(mergedOptions);\n    }, [checkoutService, method, onUnhandledError]);\n    return (react__WEBPACK_IMPORTED_MODULE_2___default().createElement(_bigcommerce_checkout_wallet_button_integration__WEBPACK_IMPORTED_MODULE_5__[\"default\"], Object.assign({}, rest, { buttonId: \"walletButton\", deinitializePayment: checkoutService.deinitializePayment, initializePayment: initializeGooglePayPayment, method: method, shouldShowEditButton: true, signOutCustomer: checkoutService.signOutCustomer })));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(GooglePayPaymentMethod, [\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV2GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AdyenV3GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].AuthorizeNetGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BNZGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BraintreeGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PayPalCommerceGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BigCommercePaymentsGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CheckoutcomGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].CybersourceV2GooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].OrbitalGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeUPEGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].WorldpayAccessGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TdOnlineMartGooglePay },\n    { id: _bigcommerce_checkout_payment_integration_api__WEBPACK_IMPORTED_MODULE_3__[\"default\"].StripeOCSGooglePay },\n]));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx\n\n}");

/***/ }),

/***/ "./packages/google-pay-integration/src/index.ts":
/*!******************************************************!*\
  !*** ./packages/google-pay-integration/src/index.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GooglePayButton: () => (/* reexport safe */ _GooglePayButton__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   GooglePayPaymentMethod: () => (/* reexport safe */ _GooglePayPaymentMethod__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _GooglePayButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GooglePayButton */ \"./packages/google-pay-integration/src/GooglePayButton.tsx\");\n/* harmony import */ var _GooglePayPaymentMethod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GooglePayPaymentMethod */ \"./packages/google-pay-integration/src/GooglePayPaymentMethod.tsx\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9nb29nbGUtcGF5LWludGVncmF0aW9uL3NyYy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQStEO0FBQ2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL2dvb2dsZS1wYXktaW50ZWdyYXRpb24vc3JjL2luZGV4LnRzP2I5NTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBHb29nbGVQYXlCdXR0b24gfSBmcm9tICcuL0dvb2dsZVBheUJ1dHRvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdvb2dsZVBheVBheW1lbnRNZXRob2QgfSBmcm9tICcuL0dvb2dsZVBheVBheW1lbnRNZXRob2QnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/google-pay-integration/src/index.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/errors/CustomError.ts":
/*!********************************************************************!*\
  !*** ./packages/payment-integration-api/src/errors/CustomError.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CustomError)\n/* harmony export */ });\nclass CustomError extends Error {\n    constructor({ data = {}, message = '', title = '', name = '', }) {\n        super();\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, CustomError);\n        }\n        else {\n            this.stack = new Error().stack;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.data = data;\n        this.message = message;\n        this.name = name;\n        this.title = title;\n        this.type = 'custom';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0N1c3RvbUVycm9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxNQUFNLFdBQVksU0FBUSxLQUFLO0lBTzFDLFlBQVksRUFDUixJQUFJLEdBQUcsRUFBRSxFQUNULE9BQU8sR0FBRyxFQUFFLEVBQ1osS0FBSyxHQUFHLEVBQUUsRUFDVixJQUFJLEdBQUcsRUFBRSxHQU1aO1FBQ0csS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLE9BQU8sS0FBSyxDQUFDLGlCQUFpQixLQUFLLFVBQVUsRUFBRSxDQUFDO1lBQ2hELEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDL0MsQ0FBQzthQUFNLENBQUM7WUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQ25DLENBQUM7UUFFRCxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7SUFDekIsQ0FBQztDQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0N1c3RvbUVycm9yLnRzP2E1YjEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGljIHNob3VsZFJlcG9ydDogYm9vbGVhbjtcblxuICAgIGRhdGE6IGFueTtcbiAgICB0aXRsZTogYW55O1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgZGF0YSA9IHt9LFxuICAgICAgICBtZXNzYWdlID0gJycsXG4gICAgICAgIHRpdGxlID0gJycsXG4gICAgICAgIG5hbWUgPSAnJyxcbiAgICB9OiB7XG4gICAgICAgIGRhdGE/OiBhbnk7XG4gICAgICAgIG1lc3NhZ2U/OiBzdHJpbmc7XG4gICAgICAgIHRpdGxlPzogc3RyaW5nO1xuICAgICAgICBuYW1lPzogc3RyaW5nO1xuICAgIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDdXN0b21FcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy50eXBlID0gJ2N1c3RvbSc7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/errors/CustomError.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts":
/*!*****************************************************************************************!*\
  !*** ./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EmbeddedCheckoutUnsupportedError)\n/* harmony export */ });\n/* harmony import */ var _setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../setPrototypeOf */ \"./packages/payment-integration-api/src/setPrototypeOf.ts\");\n/* harmony import */ var _CustomError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomError */ \"./packages/payment-integration-api/src/errors/CustomError.ts\");\n\n\nclass EmbeddedCheckoutUnsupportedError extends _CustomError__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(message) {\n        super({\n            name: 'EMBEDDED_CHECKOUT_UNSUPPORTED_ERROR',\n            message,\n        });\n        (0,_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, EmbeddedCheckoutUnsupportedError.prototype);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvZXJyb3JzL0VtYmVkZGVkQ2hlY2tvdXRVbnN1cHBvcnRlZEVycm9yLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUVQO0FBRXpCLE1BQU0sZ0NBQWlDLFNBQVEsb0RBQVc7SUFDckUsWUFBWSxPQUFlO1FBQ3ZCLEtBQUssQ0FBQztZQUNGLElBQUksRUFBRSxxQ0FBcUM7WUFDM0MsT0FBTztTQUNWLENBQUMsQ0FBQztRQUVILDJEQUFjLENBQUMsSUFBSSxFQUFFLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL2Vycm9ycy9FbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvci50cz9kMTE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tICcuLi9zZXRQcm90b3R5cGVPZic7XG5cbmltcG9ydCBDdXN0b21FcnJvciBmcm9tICcuL0N1c3RvbUVycm9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW1iZWRkZWRDaGVja291dFVuc3VwcG9ydGVkRXJyb3IgZXh0ZW5kcyBDdXN0b21FcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIG5hbWU6ICdFTUJFRERFRF9DSEVDS09VVF9VTlNVUFBPUlRFRF9FUlJPUicsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICB9KTtcblxuICAgICAgICBzZXRQcm90b3R5cGVPZih0aGlzLCBFbWJlZGRlZENoZWNrb3V0VW5zdXBwb3J0ZWRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/errors/EmbeddedCheckoutUnsupportedError.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/isEmbedded.ts":
/*!************************************************************!*\
  !*** ./packages/payment-integration-api/src/isEmbedded.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isEmbedded)\n/* harmony export */ });\nfunction isEmbedded(pathname = document.location.pathname) {\n    const basePath = `/${pathname.split('/')[1]}`;\n    return basePath === '/embedded-checkout';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvaXNFbWJlZGRlZC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsU0FBUyxVQUFVLENBQUMsV0FBbUIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRO0lBQzVFLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRTlDLE9BQU8sUUFBUSxLQUFLLG9CQUFvQixDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja291dC8uL3BhY2thZ2VzL3BheW1lbnQtaW50ZWdyYXRpb24tYXBpL3NyYy9pc0VtYmVkZGVkLnRzP2ZhNTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNFbWJlZGRlZChwYXRobmFtZTogc3RyaW5nID0gZG9jdW1lbnQubG9jYXRpb24ucGF0aG5hbWUpOiBib29sZWFuIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IGAvJHtwYXRobmFtZS5zcGxpdCgnLycpWzFdfWA7XG5cbiAgICByZXR1cm4gYmFzZVBhdGggPT09ICcvZW1iZWRkZWQtY2hlY2tvdXQnO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/isEmbedded.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/setPrototypeOf.ts":
/*!****************************************************************!*\
  !*** ./packages/payment-integration-api/src/setPrototypeOf.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ setPrototypeOf)\n/* harmony export */ });\nfunction setPrototypeOf(object, prototype) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    }\n    else if (hasProto(object)) {\n        // eslint-disable-next-line no-proto\n        object.__proto__ = prototype;\n    }\n    return object;\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction hasProto(object) {\n    return '__proto__' in object;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvc2V0UHJvdG90eXBlT2YudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVMsY0FBYyxDQUFtQixNQUFTLEVBQUUsU0FBaUI7SUFDakYsdUVBQXVFO0lBQ3ZFLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7U0FBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzFCLG9DQUFvQztRQUNwQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELGdFQUFnRTtBQUNoRSxTQUFTLFFBQVEsQ0FBQyxNQUFjO0lBQzVCLE9BQU8sV0FBVyxJQUFJLE1BQU0sQ0FBQztBQUNqQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hlY2tvdXQvLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvc2V0UHJvdG90eXBlT2YudHM/MjhiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZjxUIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IFQsIHByb3RvdHlwZTogb2JqZWN0KTogVCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmplY3QsIHByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChoYXNQcm90byhvYmplY3QpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmplY3Q7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmZ1bmN0aW9uIGhhc1Byb3RvKG9iamVjdDogb2JqZWN0KTogb2JqZWN0IGlzIG9iamVjdCAmIHsgX19wcm90b19fOiBvYmplY3QgfSB7XG4gICAgcmV0dXJuICdfX3Byb3RvX18nIGluIG9iamVjdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/setPrototypeOf.ts\n\n}");

/***/ }),

/***/ "./packages/payment-integration-api/src/toResolvableComponent.tsx":
/*!************************************************************************!*\
  !*** ./packages/payment-integration-api/src/toResolvableComponent.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toResolvableComponent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction toResolvableComponent(\n// eslint-disable-next-line @typescript-eslint/naming-convention\nComponent, resolveIds) {\n    return Object.assign((props) => react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, Object.assign({}, props)), { resolveIds });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWNrYWdlcy9wYXltZW50LWludGVncmF0aW9uLWFwaS9zcmMvdG9SZXNvbHZhYmxlQ29tcG9uZW50LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0Q7QUFJbkMsU0FBUyxxQkFBcUI7QUFDekMsZ0VBQWdFO0FBQ2hFLFNBQWdDLEVBQ2hDLFVBQXlCO0lBRXpCLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsMkRBQUMsU0FBUyxvQkFBSyxLQUFLLEVBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDdEYsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZWNrb3V0Ly4vcGFja2FnZXMvcGF5bWVudC1pbnRlZ3JhdGlvbi1hcGkvc3JjL3RvUmVzb2x2YWJsZUNvbXBvbmVudC50c3g/YTQ5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdHlwZSBDb21wb25lbnRUeXBlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSBSZXNvbHZhYmxlQ29tcG9uZW50IGZyb20gJy4vUmVzb2x2YWJsZUNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvUmVzb2x2YWJsZUNvbXBvbmVudDxUUHJvcHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBUSWRlbnRpZmllcj4oXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuICAgIENvbXBvbmVudDogQ29tcG9uZW50VHlwZTxUUHJvcHM+LFxuICAgIHJlc29sdmVJZHM6IFRJZGVudGlmaWVyW10sXG4pOiBSZXNvbHZhYmxlQ29tcG9uZW50PFRQcm9wcywgVElkZW50aWZpZXI+IHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbigocHJvcHM6IFRQcm9wcykgPT4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+LCB7IHJlc29sdmVJZHMgfSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/payment-integration-api/src/toResolvableComponent.tsx\n\n}");

/***/ })

}]);