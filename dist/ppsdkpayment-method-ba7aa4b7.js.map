{"version":3,"file":"ppsdkpayment-method-ba7aa4b7.js","mappings":"4LAKO,MCGMA,EAA2C,CAEpDC,QAASC,EAAA,EACTC,KCLiBC,IACjB,MAAMC,EFFuB,CAACD,IAC9B,MAAM,gBAAEE,EAAe,OAAEC,EAAM,iBAAEC,EAAmB,EAAAC,MAASL,GACvD,kBAAEM,EAAiB,oBAAEC,GAAwBL,EAE7CM,GAAU,IAAAC,UACZ,KAAM,CACFC,UAAWP,EAAOQ,QAClBC,SAAUT,EAAOU,MAErB,CAACV,EAAOQ,QAASR,EAAOU,KAGtBC,GAAS,IAAAC,cAAY,IAAMT,EAAkBE,IAAU,CAACF,EAAmBE,IAC3EQ,GAAW,IAAAD,cACb,IAAMR,EAAoBC,IAC1B,CAACD,EAAqBC,IAG1B,OAAO,IAAAO,cAAY,KACfD,IAASG,MAAMb,GAER,KACHY,IAAWC,MAAMb,MAEtB,CAACU,EAAQV,EAAkBY,KEtBdE,CAAkBlB,GAKlC,OAHA,IAAAmB,WAAUlB,EAAS,CAACA,IAGb,mCCcX,GAAe,EAAAmB,EAAA,IAhBoDpB,I,MAC/D,MAAM,OAAEG,EAAM,iBAAEC,EAAmB,EAAAC,MAASL,EAEtCqB,GAA4C,QAA7B,EAAAlB,EAAOmB,8BAAsB,eAAEC,OAAQ,GACtDC,EAAY5B,EAA2ByB,GAG7C,OAAKG,EAME,gBAACA,EAAS,iBAAKxB,KALlBI,EAAiB,IAAIqB,MAAM,4CAEpB,QAM0C,CACrD,CACIF,KAAM,qB,uEClBd,MAoBA,GAAe,QApB8D,EACzEpB,SACAD,kBACAwB,gBACAC,cACAC,WACAxB,sBAGI,gBAAC,IAAyB,CACtBF,gBAAiBA,EACjBwB,cAAeA,EACfE,SAAUA,EACVzB,OAAQA,EACRC,iBAAkBA,EAClBuB,YAAaA,KAOrB,CACI,CACId,GAAI,sBAER,CAAEA,GAAI,cAAeF,QAAS,kBAC9B,CAAEE,GAAI,cAAeF,QAAS,eAE9B,CAAEE,GAAI,iB","sources":["webpack://checkout/./packages/ppsdk-integration/src/usePropsToOnMount.ts","webpack://checkout/./packages/ppsdk-integration/src/initializationComponentMap.ts","webpack://checkout/./packages/ppsdk-integration/src/NoUI.tsx","webpack://checkout/./packages/ppsdk-integration/src/PPSDKPaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/HostedCreditCardPaymentMethod.tsx"],"sourcesContent":["import { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nexport const usePropsToOnMount = (props: PaymentMethodProps): (() => () => void) => {\n    const { checkoutService, method, onUnhandledError = noop } = props;\n    const { initializePayment, deinitializePayment } = checkoutService;\n\n    const options = useMemo(\n        () => ({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }),\n        [method.gateway, method.id],\n    );\n\n    const onInit = useCallback(() => initializePayment(options), [initializePayment, options]);\n    const onDeinit = useCallback(\n        () => deinitializePayment(options),\n        [deinitializePayment, options],\n    );\n\n    return useCallback(() => {\n        onInit().catch(onUnhandledError);\n\n        return () => {\n            onDeinit().catch(onUnhandledError);\n        };\n    }, [onInit, onUnhandledError, onDeinit]);\n};\n","import { type ComponentType } from 'react';\n\nimport { HostedCreditCardPaymentMethod } from '@bigcommerce/checkout/hosted-credit-card-integration';\n\nimport { NoUI } from './NoUI';\n\ntype ComponentMap = Record<string, ComponentType<any>>;\n\nexport const initializationComponentMap: ComponentMap = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    card_ui: HostedCreditCardPaymentMethod,\n    none: NoUI,\n};\n","import React, { useEffect } from 'react';\n\nimport { type PaymentMethodProps } from '@bigcommerce/checkout/payment-integration-api';\n\nimport { usePropsToOnMount } from './usePropsToOnMount';\n\nexport const NoUI = (props: PaymentMethodProps) => {\n    const onMount = usePropsToOnMount(props);\n\n    useEffect(onMount, [onMount]);\n\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n};\n","import { noop } from 'lodash';\nimport React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { initializationComponentMap } from './initializationComponentMap';\n\nconst PPSDKPaymentMethod: FunctionComponent<PaymentMethodProps> = (props) => {\n    const { method, onUnhandledError = noop } = props;\n\n    const componentKey = method.initializationStrategy?.type || '';\n    const Component = initializationComponentMap[componentKey];\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!Component) {\n        onUnhandledError(new Error('PPSDK initialization strategy not found'));\n\n        return null;\n    }\n\n    return <Component {...props} />;\n};\n\nexport default toResolvableComponent(PPSDKPaymentMethod, [\n    {\n        type: 'PAYMENT_TYPE_SDK',\n    },\n]);\n","import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedCreditCardComponent } from './components';\n\nconst HostedCreditCardPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    language,\n    onUnhandledError,\n}) => {\n    return (\n        <HostedCreditCardComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedCreditCardPaymentMethod,\n    [\n        {\n            id: 'hosted-credit-card',\n        },\n        { id: 'credit_card', gateway: 'bluesnapdirect' },\n        { id: 'credit_card', gateway: 'checkoutcom' },\n\n        { id: 'tdonlinemart' },\n    ],\n);\n"],"names":["initializationComponentMap","card_ui","HostedCreditCardPaymentMethod","none","props","onMount","checkoutService","method","onUnhandledError","noop","initializePayment","deinitializePayment","options","useMemo","gatewayId","gateway","methodId","id","onInit","useCallback","onDeinit","catch","usePropsToOnMount","useEffect","toResolvableComponent","componentKey","initializationStrategy","type","Component","Error","checkoutState","paymentForm","language"],"sourceRoot":""}