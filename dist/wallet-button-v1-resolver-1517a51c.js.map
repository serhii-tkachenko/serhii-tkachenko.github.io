{"version":3,"file":"wallet-button-v1-resolver-1517a51c.js","mappings":"+NAIA,MA4CA,EAhCuB,EACnBA,cACAC,WACAC,8BACAC,eACAC,aACAC,UACAC,UAAU,EAAAC,UAEV,IAAAC,YAAU,KACN,MAAMC,GAAeP,GAA6C,oBAAbD,GAA+C,0BAAbA,EAEjF,CAAC,EADD,CAAES,aAvBa,IAoCrB,OAVAN,EAAW,CACPH,WACA,CAACA,GAAW,OAAF,wBACHQ,GAAY,CACfE,UAAWX,EACXK,UACAC,QAAS,IAAMA,EAAQL,OAIxB,KACHE,EAAa,CAAEF,gBAEpB,IAEI,mCAAgBD,EAAaY,GAAIZ,K,oCCnC5C,MA2BA,EA3BgE,I,IAAA,WAC5DI,EAAU,QACVC,EAAO,QACPC,EAAU,EAAAC,MAAI,EACXM,GAAI,cAJqD,oCAM5D,MAAMC,GAAgB,IAAAC,YAAWC,EAAA,GAC3BC,GAAoB,IAAAC,cACrBC,GACGf,EAAW,OAAD,wBACHe,GAAO,CACVC,aAAc,CAAC,MACfC,SAAU,CACNV,UAAWE,EAAKb,YAChBsB,cAAeR,aAAa,EAAbA,EAAeS,SAASC,UAAU,sBACjDC,cAAeX,aAAa,EAAbA,EAAeS,SAASC,UAAU,sBACjDnB,UACAC,QAAS,IAAMA,EAAQO,EAAKZ,UAC5ByB,mBAAoBC,EAAA,OAGhC,CAACvB,EAAYU,EAAeT,EAASQ,EAAKb,cAG9C,OAAO,gBAAC,EAAc,eAACI,WAAYa,GAAuBJ,KCuC9D,EArDoF,I,IAAA,4BAChFX,GAA6B,EAAK,WAClCE,EAAU,QACVC,EAAO,SACPJ,GAAQ,EACLY,GAAI,cALyE,mEAOhF,MAAMe,GAA6B,IAAAV,cAC9BC,I,MACG,OAAOf,EAAW,OAAD,wBACVe,GAAO,CACVC,aAAc,IACa,QAApB,EAAAD,EAAQC,oBAAY,QAAI,GAC3B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,WAIZ,CAAChB,IAGL,MACS,aADDH,EAEO,gBAAC,EAAc,eAClBD,YAAa,GAAGC,kBAChBG,WAAYA,EACZyB,IAAK5B,EACLA,SAAUA,EACVI,QAASA,GACLQ,IAIT,gBAAC,EAAc,eACdb,YAAa,GAAGC,kBAChBG,WAAYwB,EACZ1B,4BAA6BA,EAC7B2B,IAAK5B,EACLA,SAAUA,EACVI,QAASA,GACLQ,I","sources":["webpack://checkout/./packages/core/src/app/customer/CheckoutButton.tsx","webpack://checkout/./packages/core/src/app/customer/customWalletButton/ApplePayButton.tsx","webpack://checkout/./packages/core/src/app/customer/WalletButtonV1Resolver.tsx"],"sourcesContent":["import { type CustomerInitializeOptions, type CustomerRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { type ReactElement, useEffect } from 'react';\n\nconst WALLET_BUTTON_HEIGHT = 36;\n\nexport interface CheckoutButtonProps {\n    containerId: string;\n    methodId: string;\n    isShowingWalletButtonsOnTop?: boolean;\n    deinitialize(options: CustomerRequestOptions): void;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n    onClick?(methodId: string): void;\n}\n\nconst CheckoutButton = ({\n    containerId,\n    methodId,\n    isShowingWalletButtonsOnTop,\n    deinitialize,\n    initialize,\n    onError,\n    onClick = noop,\n}: CheckoutButtonProps): ReactElement => {\n    useEffect(() => {\n        const heightOption = isShowingWalletButtonsOnTop && (methodId === 'braintreepaypal' || methodId === 'braintreepaypalcredit' )\n            ? { buttonHeight: WALLET_BUTTON_HEIGHT }\n            : {};\n\n        initialize({\n            methodId,\n            [methodId]: {\n                ...heightOption,\n                container: containerId,\n                onError,\n                onClick: () => onClick(methodId),\n            },\n        });\n\n        return () => {\n            deinitialize({ methodId });\n        };\n    }, []);\n\n    return <div data-test={containerId} id={containerId} />;\n};\n\nexport default CheckoutButton;\n","import { type CustomerInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createApplePayCustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/apple-pay';\nimport { noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useContext } from 'react';\n\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport { navigateToOrderConfirmation } from '@bigcommerce/checkout/utility';\n\nimport CheckoutButton, { type CheckoutButtonProps } from '../CheckoutButton';\n\nconst ApplePayButton: FunctionComponent<CheckoutButtonProps> = ({\n    initialize,\n    onError,\n    onClick = noop,\n    ...rest\n}) => {\n    const localeContext = useContext(LocaleContext);\n    const initializeOptions = useCallback(\n        (options: CustomerInitializeOptions) =>\n            initialize({\n                ...options,\n                integrations: [createApplePayCustomerStrategy],\n                applepay: {\n                    container: rest.containerId,\n                    shippingLabel: localeContext?.language.translate('cart.shipping_text'),\n                    subtotalLabel: localeContext?.language.translate('cart.subtotal_text'),\n                    onError,\n                    onClick: () => onClick(rest.methodId),\n                    onPaymentAuthorize: navigateToOrderConfirmation,\n                },\n            }),\n        [initialize, localeContext, onError, rest.containerId],\n    );\n\n    return <CheckoutButton initialize={initializeOptions} {...rest} />;\n};\n\nexport default ApplePayButton;\n","import { type CustomerInitializeOptions, type CustomerRequestOptions } from \"@bigcommerce/checkout-sdk\";\nimport { createBigCommercePaymentsFastlaneCustomerStrategy, createBigCommercePaymentsVenmoCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/bigcommerce-payments\";\nimport { createBoltCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/bolt\";\nimport { createBraintreeFastlaneCustomerStrategy, createBraintreePaypalCreditCustomerStrategy, createBraintreePaypalCustomerStrategy, createBraintreeVisaCheckoutCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/braintree\";\nimport { createPayPalCommerceFastlaneCustomerStrategy, createPayPalCommerceVenmoCustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/paypal-commerce\";\nimport { createStripeLinkV2CustomerStrategy, createStripeUPECustomerStrategy } from \"@bigcommerce/checkout-sdk/integrations/stripe\";\nimport React, { type FunctionComponent, useCallback } from \"react\";\n\nimport CheckoutButton from \"./CheckoutButton\";\nimport { ApplePayButton } from \"./customWalletButton\";\n\ninterface CheckoutButtonV1ResolverProps {\n    methodId: string;\n    deinitialize(options: CustomerRequestOptions): void;\n    isShowingWalletButtonsOnTop?: boolean;\n    initialize(options: CustomerInitializeOptions): void;\n    onError?(error: Error): void;\n    onClick?(methodName: string): void;\n}\n\nconst CheckoutButtonV1Resolver: FunctionComponent<CheckoutButtonV1ResolverProps> = ({\n    isShowingWalletButtonsOnTop= false,\n    initialize,\n    onError,\n    methodId,\n    ...rest\n}) => {\n    const initializeWithIntegrations = useCallback(\n        (options: CustomerInitializeOptions) => {\n            return initialize({\n                ...options,\n                integrations: [\n                    ...options.integrations ?? [],\n                    createBigCommercePaymentsFastlaneCustomerStrategy,\n                    createBigCommercePaymentsVenmoCustomerStrategy,\n                    createBoltCustomerStrategy,\n                    createBraintreePaypalCustomerStrategy,\n                    createBraintreePaypalCreditCustomerStrategy,\n                    createBraintreeFastlaneCustomerStrategy,\n                    createBraintreeVisaCheckoutCustomerStrategy,\n                    createPayPalCommerceVenmoCustomerStrategy,\n                    createPayPalCommerceFastlaneCustomerStrategy,\n                    createStripeUPECustomerStrategy,\n                    createStripeLinkV2CustomerStrategy,\n                ],\n            });\n        },\n        [initialize],\n    );\n\n    switch (methodId) {\n        case 'applepay':\n            return <ApplePayButton\n                containerId={`${methodId}CheckoutButton`}\n                initialize={initialize}\n                key={methodId}\n                methodId={methodId}\n                onError={onError}\n                {...rest}\n            />;\n    }\n\n    return <CheckoutButton\n            containerId={`${methodId}CheckoutButton`}\n            initialize={initializeWithIntegrations}\n            isShowingWalletButtonsOnTop={isShowingWalletButtonsOnTop}\n            key={methodId}\n            methodId={methodId}\n            onError={onError}\n            {...rest}\n        />;\n};\n\nexport default CheckoutButtonV1Resolver;\n"],"names":["containerId","methodId","isShowingWalletButtonsOnTop","deinitialize","initialize","onError","onClick","noop","useEffect","heightOption","buttonHeight","container","id","rest","localeContext","useContext","LocaleContext","initializeOptions","useCallback","options","integrations","applepay","shippingLabel","language","translate","subtotalLabel","onPaymentAuthorize","navigateToOrderConfirmation","initializeWithIntegrations","key"],"sourceRoot":""}