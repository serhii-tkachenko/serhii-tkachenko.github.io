{"version":3,"file":"hosted-payment-method-99d139a0.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-payment-integration/src/HostedPaymentMethod.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/is-additional-action.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/external-integration/src/create-external-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-execute-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/humm-integration/src/create-humm-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/payment-status-types.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/bootstrap","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/define property getters","webpack://checkout/@bigcommerce/checkout-sdk/webpack/runtime/hasOwnProperty shorthand","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/offsite-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/offsite-integration/src/create-offsite-payment-strategy.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./packages/core/src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./packages/core/src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./packages/hosted-payment-integration/src/components/HostedPaymentComponent.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentFeatureAvailable/isInstrumentFeatureAvailable.ts"],"sourcesContent":["import React, { type FunctionComponent } from 'react';\n\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport { HostedPaymentComponent } from './components';\n\nconst HostedPaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    method,\n    onUnhandledError,\n    language,\n    paymentForm,\n}) => {\n    return (\n        <HostedPaymentComponent\n            checkoutService={checkoutService}\n            checkoutState={checkoutState}\n            deinitializePayment={checkoutService.deinitializePayment}\n            initializePayment={checkoutService.initializePayment}\n            language={language}\n            method={method}\n            onUnhandledError={onUnhandledError}\n            paymentForm={paymentForm}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    HostedPaymentMethod,\n    [{ gateway: 'afterpay' }, { id: 'quadpay' }, { id: 'sezzle' }, { id: 'zip' }],\n);\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    isRequestError,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { AdditionalActionRequired, isAdditionalActionRequired } from './is-additional-action';\n\nexport default class ExternalPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _formPoster: FormPoster,\n        private _paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        await this._paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this._paymentIntegrationService.submitPayment({ ...payment, paymentData });\n        } catch (error) {\n            if (\n                !isRequestError(error) ||\n                !isAdditionalActionRequired(error.body) ||\n                !this._isAdditionalActionRequired(error.body)\n            ) {\n                return Promise.reject(error);\n            }\n\n            const {\n                body: {\n                    additional_action_required: {\n                        data: { redirect_url },\n                    },\n                },\n            } = error;\n\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            return new Promise(() => {\n                this.redirectUrl(redirect_url);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }) as any;\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected redirectUrl(redirect_url: string): void {\n        return this._formPoster.postForm(redirect_url, {});\n    }\n\n    private _isAdditionalActionRequired(body: AdditionalActionRequired): boolean {\n        const { additional_action_required, status } = body;\n\n        return (\n            status === 'additional_action_required' &&\n            additional_action_required &&\n            additional_action_required.type === 'offsite_redirect'\n        );\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","export interface AdditionalActionRequired {\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n        type: string;\n    };\n    status: string;\n}\n\nexport function isAdditionalActionRequired(value: unknown): value is AdditionalActionRequired {\n    return typeof value === 'object' && value !== null && 'additional_action_required' in value;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport ExternalPaymentStrategy from './external-payment-strategy';\n\nconst createExternalPaymentStrategy: PaymentStrategyFactory<ExternalPaymentStrategy> = (\n    paymentIntegrationService,\n) => new ExternalPaymentStrategy(createFormPoster(), paymentIntegrationService);\n\nexport default toResolvableModule(createExternalPaymentStrategy, [{ id: 'laybuy' }]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\nconst defaultMessage =\n    'Payment cannot be processed for this order, please select another payment method';\n\nexport default class PaymentExecuteError extends StandardError {\n    type = 'custom_provider_execute_error';\n    subtype: string;\n\n    constructor(subtype: string, name: string, message?: string) {\n        super(message || defaultMessage);\n\n        this.name = name;\n        this.subtype = subtype;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentExecuteError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { HummInitializationData, OffsiteRedirectResponse } from './humm';\n\nexport default class HummPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private formPoster: FormPoster,\n    ) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n\n        if (!payment?.methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        await this.paymentIntegrationService.loadPaymentMethod(payment.methodId, options);\n\n        const paymentMethod = this.paymentIntegrationService\n            .getState()\n            .getPaymentMethodOrThrow<HummInitializationData>(payment.methodId);\n\n        if (!paymentMethod.initializationData?.processable) {\n            throw new PaymentExecuteError(\n                'payment.humm_not_processable_error',\n                'hummNotProcessableError',\n            );\n        }\n\n        await this.paymentIntegrationService.submitOrder(order, options);\n\n        try {\n            await this.paymentIntegrationService.submitPayment({\n                methodId: payment.methodId,\n            });\n        } catch (error) {\n            if (this.isOffsiteRedirectResponse(error)) {\n                return this.handleOffsiteRedirectResponse(error);\n            }\n\n            return Promise.reject(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private handleOffsiteRedirectResponse(response: OffsiteRedirectResponse): Promise<void> {\n        const url = response.body.additional_action_required.data.redirect_url;\n        const data = response.body.provider_data;\n\n        return new Promise((resolve) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            this.formPoster.postForm(url, JSON.parse(data), resolve);\n        });\n    }\n\n    private isOffsiteRedirectResponse(response: unknown): response is OffsiteRedirectResponse {\n        if (typeof response !== 'object' || response === null) {\n            return false;\n        }\n\n        const partialResponse: Partial<OffsiteRedirectResponse> = response;\n\n        if (!partialResponse.body) {\n            return false;\n        }\n\n        const partialBody: Partial<OffsiteRedirectResponse['body']> = partialResponse.body;\n\n        return (\n            partialBody.status === 'additional_action_required' &&\n            !!partialBody.additional_action_required &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            partialBody.additional_action_required.type === 'offsite_redirect' &&\n            typeof partialBody.provider_data === 'string'\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport HummPaymentStrategy from './humm-payment-strategy';\n\nconst createHummPaymentStrategy: PaymentStrategyFactory<HummPaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new HummPaymentStrategy(paymentIntegrationService, createFormPoster());\n};\n\nexport default toResolvableModule(createHummPaymentStrategy, [{ id: 'humm' }]);\n","enum PaymentStatusTypes {\n    ACKNOWLEDGE = 'ACKNOWLEDGE',\n    FINALIZE = 'FINALIZE',\n    INITIALIZE = 'INITIALIZE',\n}\n\nexport default PaymentStatusTypes;\n","// The require scope\nvar __webpack_require__ = {};\n\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import {\n    isHostedInstrumentLike,\n    isVaultedInstrument,\n    OrderFinalizationNotRequiredError,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStatusTypes,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(private _paymentIntegrationService: PaymentIntegrationService) {}\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n        const paymentData = payment && payment.paymentData;\n        const instrumentId =\n            (paymentData && isVaultedInstrument(paymentData) && paymentData.instrumentId) ||\n            undefined;\n        const shouldSaveInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSaveInstrument) ||\n            undefined;\n        const shouldSetAsDefaultInstrument =\n            (paymentData &&\n                isHostedInstrumentLike(paymentData) &&\n                paymentData.shouldSetAsDefaultInstrument) ||\n            undefined;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId, gatewayId } = payment;\n\n        await this._paymentIntegrationService.submitOrder(orderPayload, options);\n        await this._paymentIntegrationService.initializeOffsitePayment({\n            methodId,\n            gatewayId,\n            instrumentId,\n            shouldSaveInstrument,\n            shouldSetAsDefaultInstrument,\n        });\n    }\n\n    async finalize(options?: PaymentRequestOptions): Promise<void> {\n        const state = this._paymentIntegrationService.getState();\n        const order = state.getOrder();\n        const status = state.getPaymentStatus();\n\n        if (\n            order &&\n            (status === PaymentStatusTypes.ACKNOWLEDGE || status === PaymentStatusTypes.FINALIZE)\n        ) {\n            await this._paymentIntegrationService.finalizeOrder(options);\n\n            return;\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.gatewayId === 'barclaycard';\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport OffsitePaymentStrategy from './offsite-payment-strategy';\n\nconst createOffsitePaymentStrategy: PaymentStrategyFactory<OffsitePaymentStrategy> = (\n    paymentIntegrationService,\n) => new OffsitePaymentStrategy(paymentIntegrationService);\n\nexport default toResolvableModule(createOffsitePaymentStrategy, [{ type: 'PAYMENT_TYPE_HOSTED' }]);\n","import React, { type FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg height=\"25\" viewBox=\"0 0 35 25\" width=\"35\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n            clipRule=\"evenodd\"\n            d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n        <path\n            clipRule=\"evenodd\"\n            d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\"\n            fill=\"#D1D7E0\"\n            fillRule=\"evenodd\"\n        />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { type AccountInstrument, type AchInstrument, type BankInstrument, type PayPalInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, PureComponent, type ReactNode, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nimport isBankAccountInstrument from './isBankAccountInstrument';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        const { selectedInstrumentId, field } = this.props;\n\n        if (field.value === '' && selectedInstrumentId !== undefined) {\n            this.updateFieldValue();\n        }\n    }\n\n    render(): ReactNode {\n        const { field, instruments, onSelectInstrument, onUseNewInstrument, selectedInstrumentId } =\n            this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const { value, ...otherFieldProps } = field;\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={instruments}\n                            onSelectInstrument={onSelectInstrument}\n                            onUseNewInstrument={onUseNewInstrument}\n                            selectedInstrumentId={selectedInstrumentId}\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={selectedInstrument}\n                        testId=\"instrument-select\"\n                    />\n\n                    <input type=\"hidden\" value={value || ''} {...otherFieldProps} />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId = ''): void {\n        const { form, field } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <AccountInstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <AccountInstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            testId={testId}\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return !isBankAccountInstrument(instrument) ? (\n        <AccountInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    ) : (\n        <BankInstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: PayPalInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n                <div className=\"instrumentSelect-account\" data-test={`${testId}-externalId`}>\n                    {externalId}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface BankInstrumentMenuItemProps {\n    className?: string;\n    instrument: BankInstrument | AchInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst BankInstrumentMenuItem: FunctionComponent<BankInstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <div className=\"instrumentSelect-card\">\n                    <TranslatedString\n                        data={{ accountNumber: instrument.accountNumber }}\n                        id=\"payment.instrument_account_number_ending\"\n                    />\n                </div>\n                <div className=\"instrumentSelect-issuer\">\n                    <TranslatedString id=\"payment.instrument_issuer\" />: {instrument.issuer}\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount additionalClassName=\"accountIcon-icon\" size={IconSize.Medium} />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { type AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, type ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <AccountInstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n            />\n        ),\n        [instruments, onSelectInstrument, onUseNewInstrument, selectedInstrument],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal instruments={instruments} {...props} />\n        ),\n        [instruments],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.account_instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            {instruments.length === 0 && (\n                <div className=\"instrumentSelect-note\">\n                    <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n                </div>\n            )}\n        </Fieldset>\n    );\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createExternalPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/external';\nimport { createHummPaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/humm';\nimport { createOffsitePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/offsite';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, type ReactNode } from 'react';\n\nimport { type MapToPropsFactory } from '@bigcommerce/checkout/legacy-hoc';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { type CheckoutContextProps, type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { withCheckout } from '../../checkout';\nimport { connectFormik, type ConnectFormikProps } from '../../common/form';\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n} from '../storedInstrument';\nimport StoreInstrumentFieldset from '../StoreInstrumentFieldset';\nimport withPayment, { type WithPaymentProps } from '../withPayment';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n                integrations: [\n                    createHummPaymentStrategy,\n                    createExternalPaymentStrategy,\n                    createOffsitePaymentStrategy,\n                ],\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitializePayment, method, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const { selectedInstrument = this.getDefaultInstrument() } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset =\n            isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    {description}\n\n                    {shouldShowInstrumentFieldset && (\n                        <AccountInstrumentFieldset\n                            instruments={instruments}\n                            onSelectInstrument={this.handleSelectInstrument}\n                            onUseNewInstrument={this.handleUseNewInstrument}\n                            selectedInstrument={selectedInstrument}\n                        />\n                    )}\n\n                    {isInstrumentFeatureAvailableProp && (\n                        <StoreInstrumentFieldset\n                            instrumentId={selectedInstrument && selectedInstrument.bigpayToken}\n                            isAccountInstrument={true}\n                        />\n                    )}\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = (id) => {\n        const { instruments } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nconst mapFromCheckoutProps: MapToPropsFactory<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> = () => {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n\n    return (context, props) => {\n        const { method } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: { isLoadingInstruments },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable:\n                !isPaymentDataSubmitted(method.id, method.gateway) &&\n                isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n};\n\nexport default connectFormik(\n    withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))),\n);\n","import {\n    type AccountInstrument,\n    type CheckoutSelectors,\n    type CheckoutService,\n    type LanguageService,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { type ReactNode, useCallback, useEffect, useState } from 'react';\n\nimport {\n    AccountInstrumentFieldset,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormService } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nexport interface HostedPaymentComponentProps {\n    checkoutService: CheckoutService;\n    checkoutState: CheckoutSelectors;\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    language: LanguageService;\n    method: PaymentMethod;\n    paymentForm: PaymentFormService;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentComponentDerivedProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nfunction getHostedPaymentMethodDerivedProps(\n    props: HostedPaymentComponentProps,\n): HostedPaymentComponentDerivedProps {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) =>\n        instruments.filter(isAccountInstrument),\n    );\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) =>\n        instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress),\n    );\n    const { checkoutService, checkoutState, isUsingMultiShipping = false, method } = props;\n\n    const {\n        data: {\n            getCart,\n            getConfig,\n            getCustomer,\n            getInstruments,\n            isPaymentDataRequired,\n            isPaymentDataSubmitted,\n        },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const cart = getCart();\n    const config = getConfig();\n    const customer = getCustomer();\n\n    if (!config || !cart || !customer) {\n        throw new Error('Unable to get checkout');\n    }\n\n    const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n    const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n    return {\n        instruments: trustedInstruments,\n        isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n        isInstrumentFeatureAvailable:\n            !isPaymentDataSubmitted(method.id, method.gateway) &&\n            isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n        isLoadingInstruments: isLoadingInstruments(),\n        isPaymentDataRequired: isPaymentDataRequired(),\n        loadInstruments: checkoutService.loadInstruments,\n    };\n}\n\nconst HostedPaymentMethodComponent: React.FC<HostedPaymentComponentProps> = (props) => {\n    const {\n        description,\n        isInitializing = false,\n        initializePayment,\n        method,\n        onUnhandledError = noop,\n        deinitializePayment,\n    } = props;\n\n    const [isAddingNewInstrument, setIsAddingNewInstrument] = useState(false);\n    const [selectedInstrument, setSelectedInstrument] = useState<AccountInstrument | undefined>();\n\n    const derivedProps = getHostedPaymentMethodDerivedProps(props);\n    const {\n        isLoadingInstruments,\n        instruments,\n        isNewAddress,\n        isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        loadInstruments,\n    } = derivedProps;\n\n    const getDefaultInstrument = useCallback((): AccountInstrument | undefined => {\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }, [isAddingNewInstrument, instruments]);\n\n    const handleUseNewInstrument = useCallback(() => {\n        setIsAddingNewInstrument(true);\n        setSelectedInstrument(undefined);\n    }, []);\n\n    const handleSelectInstrument = useCallback(\n        (id: string) => {\n            setIsAddingNewInstrument(false);\n            setSelectedInstrument(find(instruments, { bigpayToken: id }));\n        },\n        [instruments],\n    );\n\n    useEffect(() => {\n        const initializePaymentAsync = async () => {\n            try {\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments();\n                }\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        void initializePaymentAsync();\n\n        return () => {\n            const deinitializePaymentAsync = async () => {\n                try {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                } catch (error) {\n                    onUnhandledError(error);\n                }\n            };\n\n            void deinitializePaymentAsync();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const currentSelectedInstrument = selectedInstrument || getDefaultInstrument();\n    const isLoading = isInitializing || isLoadingInstruments;\n    const shouldShowInstrumentFieldset =\n        isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n\n    if (!description && !isInstrumentFeatureAvailableProp) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod paymentMethod--hosted\">\n                {description}\n\n                {shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={instruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewInstrument}\n                        selectedInstrument={currentSelectedInstrument}\n                    />\n                )}\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={\n                            currentSelectedInstrument && currentSelectedInstrument.bigpayToken\n                        }\n                        instruments={instruments}\n                        isAccountInstrument={true}\n                    />\n                )}\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedPaymentMethodComponent;\n","import { type Customer, type PaymentMethod, type StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (\n        !config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n"],"names":["toResolvableComponent","checkoutService","checkoutState","method","onUnhandledError","language","paymentForm","HostedPaymentComponent","deinitializePayment","initializePayment","gateway","id","StandardError","Error","constructor","message","prototype","super","name","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","PaymentArgumentInvalidError","invalidFields","join","OrderFinalizationNotRequiredError","ExternalPaymentStrategy","_formPoster","_paymentIntegrationService","execute","payload","options","payment","order","paymentData","submitOrder","submitPayment","error","value","body","_isAdditionalActionRequired","Promise","reject","additional_action_required","data","redirect_url","redirectUrl","finalize","initialize","resolve","deinitialize","postForm","status","module","paymentIntegrationService","createFormPoster","resolveIds","assign","PaymentExecuteError","subtype","HummPaymentStrategy","formPoster","methodId","loadPaymentMethod","paymentMethod","getState","getPaymentMethodOrThrow","initializationData","processable","isOffsiteRedirectResponse","handleOffsiteRedirectResponse","response","url","provider_data","JSON","parse","partialResponse","partialBody","PaymentStatusTypes","__webpack_require__","isHostedInstrumentLike","instrument","shouldSaveInstrument","shouldSetAsDefaultInstrument","d","exports","definition","key","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","ACKNOWLEDGE","FINALIZE","INITIALIZE","e","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","instrumentId","Boolean","gatewayId","initializeOffsitePayment","state","getOrder","getPaymentStatus","finalizeOrder","withIconContainer","height","viewBox","width","xmlns","clipRule","fill","fillRule","AccountInstrumentSelect","PureComponent","componentDidMount","selectedInstrumentId","props","setTimeout","updateFieldValue","componentDidUpdate","prevProps","prevSelectedInstrumentId","componentWillUnmount","field","undefined","render","instruments","onSelectInstrument","onUseNewInstrument","selectedInstrument","find","bigpayToken","otherFieldProps","className","DropdownTrigger","dropdown","AccountInstrumentMenu","AccountInstrumentSelectButton","testId","form","setFieldValue","map","AccountInstrumentOption","onClick","AccountInstrumentUseNewButton","isBankAccountInstrument","BankInstrumentMenuItem","AccountInstrumentMenuItem","noop","handleClick","useCallback","externalId","IconPaypal","additionalClassName","size","Medium","TranslatedString","accountNumber","issuer","memo","renderInput","renderModal","ManageInstrumentsModal","Fieldset","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","length","TranslatedHtml","HostedPaymentMethod","Component","isAddingNewInstrument","handleUseNewInstrument","setState","handleSelectInstrument","isInstrumentFeatureAvailable","isInstrumentFeatureAvailableProp","loadInstruments","integrations","description","isInitializing","isLoadingInstruments","isNewAddress","getDefaultInstrument","isLoading","shouldShowInstrumentFieldset","LoadingOverlay","hideContentWhenLoading","StoreInstrumentFieldset","isAccountInstrument","defaultInstrument","connectFormik","withLanguage","withPayment","withCheckout","filterAccountInstruments","filter","filterTrustedInstruments","trustedShippingAddress","context","getCart","getConfig","getCustomer","getInstruments","isPaymentDataRequired","isPaymentDataSubmitted","statuses","cart","config","customer","currentMethodInstruments","trustedInstruments","setIsAddingNewInstrument","useState","setSelectedInstrument","derivedProps","isUsingMultiShipping","getHostedPaymentMethodDerivedProps","useEffect","currentSelectedInstrument","A","checkoutSettings","isCardVaultingEnabled","isVaultingEnabled","isGuest"],"sourceRoot":""}