{"version":3,"file":"mollie-payment-method-3d05e6fb.js","mappings":"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","sources":["webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardExpiryField.tsx","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/browser-info/get-browser-info.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-vaulted-instrument.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/payment/is-hosted-intrument-like.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/mollie-integration/src/mollie-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/mollie-integration/src/is-mollie-window.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/mollie-integration/src/create-mollie-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/./packages/mollie-integration/src/MollieAPMCustomForm.tsx","webpack://checkout/./packages/mollie-integration/src/MollieCustomCardForm.tsx","webpack://checkout/./packages/mollie-integration/src/MolliePaymentMethod.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardNumberField/HostedCreditCardNumberField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardCodeField/HostedCreditCardCodeField.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/getHostedInstrumentValidationSchema/getHostedInstrumentValidationSchema.ts","webpack://checkout/./packages/instrument-utils/src/creditCard/getCreditCardInputStyles/getCreditCardInputStyles.tsx","webpack://checkout/./packages/ui/src/form/TextInputIframeContainer/TextInputIframeContainer.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx","webpack://checkout/./packages/hosted-credit-card-integration/src/components/HostedCreditCardValidation/HostedCreditCardValidation.tsx"],"sourcesContent":["import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardExpiryFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardExpiryField: FunctionComponent<HostedCreditCardExpiryFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => <TextInputIframeContainer appearFocused={appearFocused} id={id} />,\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccExpiry\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_expiration_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardExpiryField;\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import BrowserInfo from './browser-info';\n\nexport default function getBrowserInfo(): BrowserInfo {\n    const { navigator } = window;\n\n    let language: string;\n\n    if (navigator.language) {\n        language = navigator.language;\n    } else {\n        language = (navigator as any).userLanguage;\n    }\n\n    return {\n        color_depth: window.screen.colorDepth || 24,\n        java_enabled: typeof navigator.javaEnabled === 'function' ? navigator.javaEnabled() : false,\n        language,\n        screen_height: window.screen.height,\n        screen_width: window.screen.width,\n        time_zone_offset: new Date().getTimezoneOffset().toString(),\n    };\n}\n","import { each, some } from 'lodash';\n\nimport {\n    getBrowserInfo,\n    HostedForm,\n    HostedFormOptions,\n    InvalidArgumentError,\n    isHostedInstrumentLike,\n    isRequestError,\n    isVaultedInstrument,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderPaymentRequestBody,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentRequestOptions,\n    PaymentStrategy,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { MollieClient, MollieElement } from './mollie';\nimport MolliePaymentInitializeOptions, {\n    WithMolliePaymentInitializeOptions,\n} from './mollie-payment-initialize-options';\nimport MollieScriptLoader from './mollie-script-loader';\n\nexport enum MolliePaymentMethodType {\n    CREDIT_CARD = 'credit_card',\n}\n\nconst methodsNotAllowedWhenDigitalOrder = ['klarnapaylater', 'klarnasliceit'];\n\nexport default class MolliePaymentStrategy implements PaymentStrategy {\n    private initializeOptions?: MolliePaymentInitializeOptions;\n    private mollieClient?: MollieClient;\n    private cardHolderElement?: MollieElement;\n    private cardNumberElement?: MollieElement;\n    private verificationCodeElement?: MollieElement;\n    private expiryDateElement?: MollieElement;\n    private locale?: string;\n\n    private hostedForm?: HostedForm;\n\n    private unsubscribe?: () => void;\n\n    constructor(\n        private mollieScriptLoader: MollieScriptLoader,\n        private paymentIntegrationService: PaymentIntegrationService,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithMolliePaymentInitializeOptions,\n    ): Promise<void> {\n        const { mollie, methodId, gatewayId } = options;\n\n        if (!mollie) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"options.mollie\" argument is not provided.',\n            );\n        }\n\n        if (!methodId || !gatewayId) {\n            throw new InvalidArgumentError(\n                'Unable to initialize payment because \"methodId\" and/or \"gatewayId\" argument is not provided.',\n            );\n        }\n\n        const controllers = document.querySelectorAll('.mollie-components-controller');\n\n        each(controllers, (controller) => controller.remove());\n\n        const state = this.paymentIntegrationService.getState();\n        const storeConfig = state.getStoreConfigOrThrow();\n\n        this.initializeOptions = mollie;\n\n        const paymentMethod = state.getPaymentMethodOrThrow(methodId, gatewayId);\n\n        const {\n            config: { merchantId, testMode },\n        } = paymentMethod;\n\n        this.locale = state.getLocale();\n\n        if (!merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (\n            this.isCreditCard(methodId) &&\n            mollie.form &&\n            this.shouldShowTSVHostedForm(methodId, gatewayId)\n        ) {\n            this.hostedForm = await this.mountCardVerificationfields(mollie.form);\n        } else if (this.isCreditCard(methodId)) {\n            this.mollieClient = await this.loadMollieJs(\n                merchantId,\n                storeConfig.storeProfile.storeLanguage,\n                testMode,\n            );\n            this.mountElements();\n        }\n\n        this.unsubscribe = () => {\n            if (\n                this.paymentIntegrationService.getState().isPaymentMethodInitialized({\n                    methodId: options.methodId,\n                    gatewayId: options.gatewayId,\n                })\n            ) {\n                const element = document.getElementById(`${gatewayId}-${methodId}-paragraph`);\n\n                if (element) {\n                    element.remove();\n                }\n\n                mollie.disableButton(false);\n\n                this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n            }\n        };\n\n        this.unsubscribe();\n\n        this.loadPaymentMethodsAllowed(mollie, methodId, gatewayId);\n\n        return Promise.resolve();\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment, ...order } = payload;\n        const paymentData = payment?.paymentData;\n\n        if (!payment || !payment.gatewayId || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment', 'gatewayId', 'paymentData']);\n        }\n\n        try {\n            await this.paymentIntegrationService.submitOrder(order, options);\n\n            if (isVaultedInstrument(paymentData)) {\n                return await this.executeWithVaulted(payment);\n            }\n\n            if (this.isCreditCard(payment.methodId)) {\n                return await this.executeWithCC(payment);\n            }\n\n            return await this.executeWithAPM(payment);\n        } catch (error) {\n            await this.processAdditionalAction(error);\n        }\n    }\n\n    finalize(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<void> {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n\n        if (this.hostedForm) {\n            this.hostedForm.detach();\n        }\n\n        if (options && options.methodId && options.gatewayId && !this.hostedForm) {\n            const element = document.getElementById(`${options.gatewayId}-${options.methodId}`);\n\n            if (element) {\n                element.remove();\n            }\n        } else if (options && options.methodId && this.isCreditCard(options.methodId)) {\n            if (\n                this.cardHolderElement &&\n                this.cardNumberElement &&\n                this.verificationCodeElement &&\n                this.expiryDateElement\n            ) {\n                this.cardHolderElement.unmount();\n                this.cardHolderElement = undefined;\n\n                this.cardNumberElement.unmount();\n                this.cardNumberElement = undefined;\n\n                this.verificationCodeElement.unmount();\n                this.verificationCodeElement = undefined;\n\n                this.expiryDateElement.unmount();\n                this.expiryDateElement = undefined;\n            }\n        }\n\n        this.mollieClient = undefined;\n\n        return Promise.resolve();\n    }\n\n    protected async executeWithCC(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n\n        const { shouldSaveInstrument = false, shouldSetAsDefaultInstrument = false } =\n            isHostedInstrumentLike(paymentData) ? paymentData : {};\n\n        const { token, error } = await this.getMollieClient().createToken();\n\n        /* eslint-disable */\n        if (error) {\n            return Promise.reject(error);\n        }\n\n        const formattedPayload = {\n            credit_card_token: {\n                token,\n            },\n            vault_payment_instrument: shouldSaveInstrument,\n            set_as_default_stored_instrument: shouldSetAsDefaultInstrument,\n            browser_info: getBrowserInfo(),\n            shopper_locale: this.getShopperLocale(),\n        };\n        /* eslint-enable */\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                formattedPayload,\n            },\n        });\n    }\n\n    protected async executeWithVaulted(payment: OrderPaymentRequestBody): Promise<void> {\n        if (this.isHostedPaymentFormEnabled(payment.methodId, payment.gatewayId)) {\n            const form = this.hostedForm;\n\n            if (!form) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            await form.validate();\n            await form.submit(payment);\n\n            await this.paymentIntegrationService.loadCurrentOrder();\n        } else {\n            await this.paymentIntegrationService.submitPayment(payment);\n        }\n    }\n\n    protected async executeWithAPM(payment: OrderPaymentRequestBody): Promise<void> {\n        const paymentData = payment.paymentData;\n        const issuer = paymentData && 'issuer' in paymentData ? paymentData.issuer : '';\n\n        await this.paymentIntegrationService.submitPayment({\n            ...payment,\n            paymentData: {\n                ...paymentData,\n                formattedPayload: {\n                    issuer,\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    shopper_locale: this.getShopperLocale(),\n                },\n            },\n        });\n    }\n\n    private isCreditCard(methodId: string): boolean {\n        return methodId === MolliePaymentMethodType.CREDIT_CARD;\n    }\n\n    private shouldShowTSVHostedForm(methodId: string, gatewayId: string): boolean {\n        return (\n            this.isHostedPaymentFormEnabled(methodId, gatewayId) && this.isHostedFieldAvailable()\n        );\n    }\n\n    private mountCardVerificationfields(formOptions: HostedFormOptions): Promise<HostedForm> {\n        /* eslint-disable */\n        return new Promise(async (resolve, reject) => {\n            try {\n                const config = this.paymentIntegrationService.getState().getStoreConfig();\n                const bigpayBaseUrl = config?.paymentSettings.bigpayBaseUrl;\n\n                if (!bigpayBaseUrl) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const form = this.paymentIntegrationService.createHostedForm(\n                    bigpayBaseUrl,\n                    formOptions\n                );\n\n                await form.attach();\n\n                resolve(form);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private isHostedPaymentFormEnabled(methodId: string, gatewayId?: string): boolean {\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n        const paymentMethod = getPaymentMethodOrThrow(methodId, gatewayId);\n\n        return paymentMethod.config.isHostedFormEnabled === true;\n    }\n\n    private isHostedFieldAvailable(): boolean {\n        const options = this.getInitializeOptions();\n\n        return !!options.form?.fields;\n    }\n\n    private processAdditionalAction(error: any): Promise<unknown> {\n        if (!isRequestError(error)) {\n            return Promise.reject(error);\n        }\n\n        if (some(error.body.errors, {code: 'additional_action_required'})) {\n            const { additional_action_required: { data : { redirect_url } } } = error.body;\n\n            return new Promise(() => window.location.replace(redirect_url));\n        }\n\n        return Promise.reject(error);\n    }\n\n    private getInitializeOptions(): MolliePaymentInitializeOptions {\n        if (!this.initializeOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.initializeOptions;\n    }\n\n    private loadMollieJs(merchantId: string, locale: string, testmode = false): Promise<MollieClient> {\n        if (this.mollieClient) {\n            return Promise.resolve(this.mollieClient);\n        }\n\n        return this.mollieScriptLoader\n            .load(merchantId, locale, testmode);\n    }\n\n    private getMollieClient(): MollieClient {\n        if (!this.mollieClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.mollieClient;\n    }\n\n    private getShopperLocale(): string {\n        if (!this.locale) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this.locale;\n    }\n\n    /**\n     * ContainerId is use in Mollie for determined either its showing or not the\n     * container, because when Mollie has Vaulted Instruments it gets hide,\n     * and shows an error because can't mount Provider Components\n     *\n     * We had to add a settimeout because Mollie sets de tab index after mounting\n     * each component, but without a setTimeOut Mollie is not able to find the\n     * components as they are hidden so we need to wait until they are shown\n     */\n    private mountElements() {\n        const { containerId, cardNumberId, cardCvcId, cardExpiryId, cardHolderId, styles } = this.getInitializeOptions();\n        let container: HTMLElement | null;\n\n        if (containerId) {\n            container = document.getElementById(containerId);\n        }\n\n        setTimeout(() => {\n            if (!containerId || container?.style.display !== 'none') {\n                const mollieClient = this.getMollieClient();\n\n                this.cardHolderElement = mollieClient.createComponent('cardHolder', { styles });\n                this.cardHolderElement.mount(`#${cardHolderId}`);\n\n                this.cardNumberElement = mollieClient.createComponent('cardNumber', { styles });\n                this.cardNumberElement.mount(`#${cardNumberId}`);\n\n                this.verificationCodeElement = mollieClient.createComponent('verificationCode', { styles });\n                this.verificationCodeElement.mount(`#${cardCvcId}`);\n\n                this.expiryDateElement = mollieClient.createComponent('expiryDate', { styles });\n                this.expiryDateElement.mount(`#${cardExpiryId}`);\n            }\n        }, 0);\n    }\n\n    private loadPaymentMethodsAllowed(mollie: MolliePaymentInitializeOptions, methodId: string, gatewayId: string){\n        if (methodsNotAllowedWhenDigitalOrder.includes(methodId)) {\n            const cart = this.paymentIntegrationService.getState().getCartOrThrow();\n            const cartDigitalItems = cart.lineItems?.digitalItems;\n\n            if (cartDigitalItems && cartDigitalItems.length > 0) {\n                const { containerId } = this.getInitializeOptions();\n\n                if (containerId) {\n                    const container = document.getElementById(containerId);\n\n                    if (container) {\n                        const paragraph = document.createElement('p') ;\n                        paragraph.setAttribute(\"id\",`${gatewayId}-${methodId}-paragraph`)\n\n                        if (mollie.unsupportedMethodMessage) {\n                            paragraph.innerText = mollie.unsupportedMethodMessage;\n                            container.appendChild(paragraph);\n                            mollie.disableButton(true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","import {\n    FormattedPayload,\n    FormattedVaultedInstrument,\n    HostedVaultedInstrument,\n    PaymentInstrumentPayload,\n    VaultedInstrument,\n} from './payment';\n\nexport default function isVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n\nexport function isHostedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is HostedVaultedInstrument {\n    return (\n        Boolean((instrument as HostedVaultedInstrument).instrumentId) &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccNumber') &&\n        !Object.prototype.hasOwnProperty.call(instrument, 'ccCvv')\n    );\n}\n\nexport function isFormattedVaultedInstrument(\n    instrument: PaymentInstrumentPayload,\n): instrument is FormattedPayload<FormattedVaultedInstrument> {\n    const formattedInstrument = (instrument as FormattedPayload<FormattedVaultedInstrument>)\n        .formattedPayload;\n\n    if (!formattedInstrument) {\n        return false;\n    }\n\n    return (\n        typeof formattedInstrument.bigpay_token === 'string' ||\n        Boolean(formattedInstrument.bigpay_token && formattedInstrument.bigpay_token.token)\n    );\n}\n","import { HostedInstrument } from './payment';\n\nexport default function isHostedInstrumentLike(\n    instrument: unknown,\n): instrument is HostedInstrument {\n    return (\n        typeof instrument === 'object' &&\n        instrument !== null &&\n        (typeof (instrument as HostedInstrument).shouldSaveInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSaveInstrument === 'boolean') &&\n        (typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'undefined' ||\n            typeof (instrument as HostedInstrument).shouldSetAsDefaultInstrument === 'boolean')\n    );\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport isMollieWindow from './is-mollie-window';\nimport { MollieClient } from './mollie';\n\nexport default class MollieScriptLoader {\n    constructor(private scriptLoader: ScriptLoader, private mollieHostWindow: Window = window) {}\n\n    async load(merchantId: string, locale: string, testmode: boolean): Promise<MollieClient> {\n        await this.scriptLoader.loadScript('https://js.mollie.com/v1/mollie.js');\n\n        if (!isMollieWindow(this.mollieHostWindow)) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.mollieHostWindow.Mollie(merchantId, {\n            locale,\n            testmode,\n        });\n    }\n}\n","import { MollieHostWindow } from './mollie';\n\nexport default function isMollieWindow(window: Window): window is MollieHostWindow {\n    return 'Mollie' in window;\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport MolliePaymentStrategy from './mollie-payment-strategy';\nimport MollieScriptLoader from './mollie-script-loader';\n\nconst createMolliePaymentStrategy: PaymentStrategyFactory<MolliePaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new MolliePaymentStrategy(\n        new MollieScriptLoader(getScriptLoader()),\n        paymentIntegrationService,\n    );\n};\n\nexport default toResolvableModule(createMolliePaymentStrategy, [\n    { gateway: 'mollie' },\n    { gateway: 'mollie', id: 'applepay' },\n]);\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps, useField } from 'formik';\nimport React, {\n    type FunctionComponent,\n    type SyntheticEvent,\n    useCallback,\n    useEffect,\n    useState,\n} from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { withLanguage, type WithLanguageProps } from '@bigcommerce/checkout/locale';\nimport { DropdownTrigger, FormField } from '@bigcommerce/checkout/ui';\n\nexport interface MollieCustomCardFormProps {\n    method: PaymentMethod;\n}\n\nexport interface Issuer {\n    name: string;\n    image: {\n        size1x: string;\n    };\n    id: string;\n}\n\ninterface HiddenInputProps extends FieldProps {\n    selectedIssuer?: Issuer;\n}\n\ninterface SelecteIssuerProp {\n    selectedIssuer: Issuer;\n}\n\ninterface OptionButtonProps {\n    issuer: Issuer;\n    className?: string;\n    onClick?(event: SyntheticEvent<EventTarget>): void;\n}\n\nconst MollieAPMCustomForm: FunctionComponent<MollieCustomCardFormProps & WithLanguageProps> = ({\n    method,\n    language,\n}) => {\n    const issuers: Issuer[] = method.initializationData?.paymentMethodsResponse;\n\n    const [selectedIssuer, setSelectedIssuer] = useState<Issuer>({\n        name: language.translate('payment.select_your_bank'),\n        id: '',\n        image: { size1x: '' },\n    });\n    const render = useCallback(\n        (props: FieldProps) => <HiddenInput {...props} selectedIssuer={selectedIssuer} />,\n        [selectedIssuer],\n    );\n\n    if (!issuers || issuers.length === 0) {\n        return <></>;\n    }\n\n    const handleClick = ({ currentTarget }: SyntheticEvent<HTMLButtonElement>) => {\n        const _selectedIssuer = issuers.find(({ id }) => id === currentTarget.dataset.id);\n\n        if (!_selectedIssuer) {\n            return;\n        }\n\n        setSelectedIssuer(_selectedIssuer);\n    };\n\n    const issuersList = (\n        <ul\n            className=\"dropdown-menu instrumentSelect-dropdownMenu mollie-instrument-card\"\n            id=\"issuersDropdown\"\n        >\n            {issuers.map((issuer) => (\n                <li className=\"dropdown-menu-item dropdown-menu-item--select\" key={issuer.id}>\n                    <OptionButton issuer={issuer} onClick={handleClick} />\n                </li>\n            ))}\n        </ul>\n    );\n\n    return (\n        <>\n            <DropdownTrigger dropdown={issuersList}>\n                <IssuerSelectButton selectedIssuer={selectedIssuer} />\n            </DropdownTrigger>\n            <FormField input={render} name=\"issuer\" />\n        </>\n    );\n};\n\nexport const HiddenInput: FunctionComponent<HiddenInputProps> = ({\n    field: { value, ...restField },\n    selectedIssuer,\n}) => {\n    const [field, _, helpers] = useField(restField.name);\n    const Input = useCallback(() => <input {...field} type=\"hidden\" />, [field]);\n\n    useEffect(() => {\n        if (value === selectedIssuer) {\n            return;\n        }\n\n        void helpers.setValue(selectedIssuer?.id);\n    }, [value, selectedIssuer, helpers]);\n\n    return <Input />;\n};\n\nexport const IssuerSelectButton: FunctionComponent<SelecteIssuerProp> = ({ selectedIssuer }) => (\n    <a\n        className=\"instrumentSelect instrumentSelect-card button dropdown-button dropdown-toogle--select\"\n        href=\"#\"\n        id=\"issuerToggle\"\n        onClick={preventDefault()}\n    >\n        {selectedIssuer.name}\n    </a>\n);\n\nexport const OptionButton: FunctionComponent<OptionButtonProps> = ({ issuer, ...props }) => {\n    const { name, image, id } = issuer;\n\n    return (\n        <a className=\"instrumentSelect-details mollie-instrument-list\" {...props} data-id={id}>\n            <label className=\"mollie-instrument-left\">{name}</label>\n            <img alt={name} data-test=\"cart-item-image\" src={image.size1x} />\n        </a>\n    );\n};\n\nexport default withLanguage(MollieAPMCustomForm);\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { IconHelp, TooltipTrigger } from '@bigcommerce/checkout/ui';\n\nimport MollieAPMCustomForm from './MollieAPMCustomForm';\n\nexport interface MollieCustomCardFormProps {\n    options: {\n        cardNumberElementOptions: {\n            containerId: string;\n        };\n        cardExpiryElementOptions: {\n            containerId: string;\n        };\n        cardCvcElementOptions: {\n            containerId: string;\n        };\n        cardHolderElementOptions: {\n            containerId: string;\n        };\n    };\n    isCreditCard: boolean;\n    method: PaymentMethod;\n}\n\nconst MollieCustomCardForm: React.FunctionComponent<MollieCustomCardFormProps> = ({\n    options,\n    isCreditCard,\n    method,\n}) =>\n    !isCreditCard ? (\n        <MollieAPMCustomForm method={method} />\n    ) : (\n        <div className=\"form-ccFields\">\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardNumberElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input', 'has-icon')}\n                    data-cse=\"CardNumber\"\n                    id={options.cardNumberElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-full')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardHolderElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_name_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"CardHolder\"\n                    id={options.cardHolderElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside', 'mollie-paddingRight')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardCvcElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                    <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                        <span className=\"has-tip\">\n                            <IconHelp />\n                        </span>\n                    </TooltipTrigger>\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"SecurityCode\"\n                    id={options.cardCvcElementOptions.containerId}\n                />\n            </div>\n            <div className={classNames('form-field', 'mollie-aside')}>\n                <label\n                    className=\"form-label optimizedCheckout-form-label\"\n                    htmlFor={options.cardExpiryElementOptions.containerId}\n                >\n                    <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                </label>\n                <div\n                    className={classNames('form-input', 'optimizedCheckout-form-input')}\n                    data-cse=\"ExpiryDate\"\n                    id={options.cardExpiryElementOptions.containerId}\n                />\n            </div>\n        </div>\n    );\n\nexport default MollieCustomCardForm;\n","import {\n    type CardInstrument,\n    type LegacyHostedFormOptions,\n    type PaymentInitializeOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { createMolliePaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/mollie';\nimport { compact, forIn, some } from 'lodash';\nimport React, {\n    type FunctionComponent,\n    type ReactNode,\n    useCallback,\n    useContext,\n    useState,\n} from 'react';\n\nimport {\n    getHostedInstrumentValidationSchema,\n    HostedCreditCardValidation,\n} from '@bigcommerce/checkout/hosted-credit-card-integration';\nimport {\n    type HostedWidgetComponentProps,\n    HostedWidgetPaymentComponent,\n} from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    CreditCardInputStylesType,\n    getCreditCardInputStyles,\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { LocaleContext } from '@bigcommerce/checkout/locale';\nimport {\n    PaymentFormContext,\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nimport MollieCustomCardForm from './MollieCustomCardForm';\n\nexport enum MolliePaymentMethodType {\n    creditcard = 'credit_card',\n}\n\nconst MolliePaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    method,\n    checkoutState,\n    checkoutService,\n    language,\n    paymentForm,\n    ...props\n}) => {\n    const paymentContext = useContext(PaymentFormContext);\n    const localeContext = useContext(LocaleContext);\n    const containerId = `mollie-${method.method}`;\n\n    const [focusedFieldType, setFocusedFieldType] = useState<string>();\n    const {\n        setFieldTouched,\n        setFieldValue,\n        setSubmitted,\n        submitForm,\n        setSubmit,\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const isInstrumentCardCodeRequiredProp = isInstrumentCardCodeRequiredSelector(checkoutState);\n    const isInstrumentCardNumberRequiredProp =\n        isInstrumentCardNumberRequiredSelector(checkoutState);\n\n    const {\n        config: { cardCode },\n    } = method;\n    const isCardCodeRequired = cardCode || cardCode === null;\n    const getHostedFieldId: (name: string) => string = useCallback(\n        (name) => {\n            return `${compact([method.gateway, method.id]).join('-')}-${name}`;\n        },\n        [method],\n    );\n\n    const getHostedFormOptions: (\n        selectedInstrument?: CardInstrument,\n    ) => Promise<LegacyHostedFormOptions> = useCallback(\n        async (selectedInstrument) => {\n            const styleProps = ['color', 'fontFamily', 'fontSize', 'fontWeight'];\n            const isInstrumentCardNumberRequired = selectedInstrument\n                ? isInstrumentCardNumberRequiredProp(selectedInstrument)\n                : false;\n            const isInstrumentCardCodeRequired = selectedInstrument\n                ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                : false;\n            const styleContainerId = selectedInstrument\n                ? isInstrumentCardCodeRequired\n                    ? getHostedFieldId('ccCvv')\n                    : undefined\n                : getHostedFieldId('ccNumber');\n\n            return {\n                fields: selectedInstrument\n                    ? {\n                          cardCodeVerification:\n                              isInstrumentCardCodeRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_cvv_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccCvv'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                          cardNumberVerification:\n                              isInstrumentCardNumberRequired && selectedInstrument\n                                  ? {\n                                        accessibilityLabel: language.translate(\n                                            'payment.credit_card_number_label',\n                                        ),\n                                        containerId: getHostedFieldId('ccNumber'),\n                                        instrumentId: selectedInstrument.bigpayToken,\n                                    }\n                                  : undefined,\n                      }\n                    : {\n                          cardCode: isCardCodeRequired\n                              ? {\n                                    accessibilityLabel: language.translate(\n                                        'payment.credit_card_cvv_label',\n                                    ),\n                                    containerId: getHostedFieldId('ccCvv'),\n                                }\n                              : undefined,\n                          cardExpiry: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_expiration_label',\n                              ),\n                              containerId: getHostedFieldId('ccExpiry'),\n                              placeholder: language.translate(\n                                  'payment.credit_card_expiration_placeholder_text',\n                              ),\n                          },\n                          cardName: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_name_label',\n                              ),\n                              containerId: getHostedFieldId('ccName'),\n                          },\n                          cardNumber: {\n                              accessibilityLabel: language.translate(\n                                  'payment.credit_card_number_label',\n                              ),\n                              containerId: getHostedFieldId('ccNumber'),\n                          },\n                      },\n                styles: styleContainerId\n                    ? {\n                          default: await getCreditCardInputStyles(styleContainerId, styleProps),\n                          error: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Error,\n                          ),\n                          focus: await getCreditCardInputStyles(\n                              styleContainerId,\n                              styleProps,\n                              CreditCardInputStylesType.Focus,\n                          ),\n                      }\n                    : {},\n                onBlur: ({ fieldType }) => {\n                    if (focusedFieldType === fieldType) {\n                        setFocusedFieldType(undefined);\n                    }\n                },\n                onCardTypeChange: ({ cardType }) => {\n                    setFieldValue('hostedForm.cardType', cardType);\n                },\n                onEnter: () => {\n                    setSubmitted(true);\n                    submitForm();\n                },\n                onFocus: ({ fieldType }) => {\n                    setFocusedFieldType(fieldType);\n                },\n                onValidate: ({ errors = {} }) => {\n                    forIn(errors, (fieldErrors = [], fieldType) => {\n                        const errorKey = `hostedForm.errors.${fieldType}`;\n\n                        setFieldValue(errorKey, fieldErrors[0]?.type ?? '');\n\n                        if (fieldErrors[0]) {\n                            setFieldTouched(errorKey);\n                        }\n                    });\n                },\n            };\n        },\n        [\n            focusedFieldType,\n            getHostedFieldId,\n            isCardCodeRequired,\n            isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequiredProp,\n            language,\n            method,\n            setFieldTouched,\n            setFieldValue,\n            setSubmitted,\n            submitForm,\n        ],\n    );\n    const getHostedStoredCardValidationFieldset: (selectedInstrument: CardInstrument) => ReactNode =\n        useCallback(\n            (selectedInstrument) => {\n                const isInstrumentCardNumberRequired = selectedInstrument\n                    ? isInstrumentCardNumberRequiredProp(selectedInstrument, method)\n                    : false;\n                const isInstrumentCardCodeRequired = selectedInstrument\n                    ? isInstrumentCardCodeRequiredProp(selectedInstrument, method)\n                    : false;\n\n                return (\n                    <HostedCreditCardValidation\n                        cardCodeId={\n                            isInstrumentCardCodeRequired ? getHostedFieldId('ccCvv') : undefined\n                        }\n                        cardNumberId={\n                            isInstrumentCardNumberRequired\n                                ? getHostedFieldId('ccNumber')\n                                : undefined\n                        }\n                        focusedFieldType={focusedFieldType}\n                    />\n                );\n            },\n            [\n                focusedFieldType,\n                getHostedFieldId,\n                isInstrumentCardCodeRequiredProp,\n                isInstrumentCardNumberRequiredProp,\n                method,\n            ],\n        );\n    const initializeMolliePayment: HostedWidgetComponentProps['initializePayment'] = useCallback(\n        async (options: PaymentInitializeOptions, selectedInstrument) => {\n            const mollieElements = getMolliesElementOptions();\n\n            return checkoutService.initializePayment({\n                ...options,\n                integrations: [createMolliePaymentStrategy],\n                mollie: {\n                    containerId,\n                    cardNumberId: mollieElements.cardNumberElementOptions.containerId,\n                    cardCvcId: mollieElements.cardCvcElementOptions.containerId,\n                    cardHolderId: mollieElements.cardHolderElementOptions.containerId,\n                    cardExpiryId: mollieElements.cardExpiryElementOptions.containerId,\n                    styles: {\n                        base: {\n                            color: '#333333',\n                            '::placeholder': {\n                                color: '#999999',\n                            },\n                        },\n                        valid: {\n                            color: '#090',\n                        },\n                        invalid: {\n                            color: '#D14343',\n                        },\n                    },\n                    unsupportedMethodMessage: localeContext?.language.translate(\n                        'payment.mollie_unsupported_method_error',\n                    ),\n                    disableButton: (disabled: boolean) => {\n                        if (paymentContext) {\n                            disableSubmit(method, disabled);\n                        }\n                    },\n                    ...(selectedInstrument && {\n                        form: await getHostedFormOptions(selectedInstrument),\n                    }),\n                },\n            });\n        },\n        [\n            checkoutService,\n            containerId,\n            disableSubmit,\n            localeContext?.language,\n            getHostedFormOptions,\n            paymentContext,\n            method,\n        ],\n    );\n\n    const getMolliesElementOptions = () => {\n        return {\n            cardNumberElementOptions: {\n                containerId: 'mollie-card-number-component-field',\n            },\n            cardExpiryElementOptions: {\n                containerId: 'mollie-card-expiry-component-field',\n            },\n            cardCvcElementOptions: {\n                containerId: 'mollie-card-cvc-component-field',\n            },\n            cardHolderElementOptions: {\n                containerId: 'mollie-card-holder-component-field',\n            },\n        };\n    };\n\n    function renderCustomPaymentForm() {\n        const options = getMolliesElementOptions();\n\n        return (\n            <MollieCustomCardForm isCreditCard={isCreditCard()} method={method} options={options} />\n        );\n    }\n\n    function isCreditCard(): boolean {\n        return method.method === MolliePaymentMethodType.creditcard;\n    }\n\n    function validateInstrument(_shouldShowNumber: boolean, selectedInstrument: CardInstrument) {\n        return getHostedStoredCardValidationFieldset(selectedInstrument);\n    }\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    const {\n        data: { getCheckout, isPaymentDataRequired, getCustomer },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...props}\n            containerId={containerId}\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hideContentWhenSignedOut\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            initializePayment={initializeMolliePayment}\n            instruments={instruments}\n            isAccountInstrument={!isCreditCard()}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            renderCustomPaymentForm={renderCustomPaymentForm}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldRenderCustomInstrument={true}\n            signOut={checkoutService.signOutCustomer}\n            storedCardValidationSchema={getHostedInstrumentValidationSchema({ language })}\n            validateInstrument={validateInstrument}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    MolliePaymentMethod,\n    [{ gateway: 'mollie' }, { gateway: 'mollie', id: 'applepay' }],\n);\n","import React, { type FunctionComponent, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { FormField, IconLock, TextInputIframeContainer } from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardNumberFieldProps {\n    appearFocused: boolean;\n    id: string;\n    name: string;\n}\n\nconst HostedCreditCardNumberField: FunctionComponent<HostedCreditCardNumberFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-field--ccNumber\"\n            input={renderInput}\n            labelContent={<TranslatedString id=\"payment.credit_card_number_label\" />}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardNumberField;\n","import React, { type FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { CreditCardCodeTooltip } from '@bigcommerce/checkout/instrument-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    FormField,\n    IconHelp,\n    IconLock,\n    TextInputIframeContainer,\n    TooltipTrigger,\n} from '@bigcommerce/checkout/ui';\n\nexport interface HostedCreditCardCodeFieldProps {\n    appearFocused: boolean;\n    id?: string;\n    name: string;\n}\n\nconst HostedCreditCardCodeField: FunctionComponent<HostedCreditCardCodeFieldProps> = ({\n    appearFocused,\n    id,\n    name,\n}) => {\n    const renderInput = useCallback(\n        () => (\n            <>\n                <TextInputIframeContainer\n                    additionalClassName=\"has-icon\"\n                    appearFocused={appearFocused}\n                    id={id}\n                />\n\n                <IconLock />\n            </>\n        ),\n        [id, appearFocused],\n    );\n\n    const labelContent = useMemo(\n        () => (\n            <>\n                <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n                <TooltipTrigger placement=\"top-start\" tooltip={<CreditCardCodeTooltip />}>\n                    <span className=\"has-tip\">\n                        <IconHelp />\n                    </span>\n                </TooltipTrigger>\n            </>\n        ),\n        [],\n    );\n\n    return (\n        <FormField\n            additionalClassName=\"form-ccFields-field--ccCvv\"\n            input={renderInput}\n            labelContent={labelContent}\n            name={name}\n        />\n    );\n};\n\nexport default HostedCreditCardCodeField;\n","import { type LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, type ObjectSchema, string } from 'yup';\n\nexport interface HostedInstrumentValidationSchemaOptions {\n    language: LanguageService;\n    isCardExpiryRequired?: boolean;\n}\n\nexport interface HostedInstrumentValidationSchemaShape {\n    hostedForm: {\n        errors: {\n            cardCodeVerification: string;\n            cardNumberVerification: string;\n        };\n    };\n    instrumentId: string;\n}\n\nexport default memoize(function getHostedInstrumentValidationSchema({\n    language,\n    isCardExpiryRequired = false,\n}: HostedInstrumentValidationSchemaOptions): ObjectSchema<HostedInstrumentValidationSchemaShape> {\n    return object().shape<HostedInstrumentValidationSchemaShape>({\n        instrumentId: string().required(),\n\n        hostedForm: object()\n            .required()\n            .shape<HostedInstrumentValidationSchemaShape['hostedForm']>({\n                errors: object()\n                    .required()\n                    .shape<HostedInstrumentValidationSchemaShape['hostedForm']['errors']>({\n                        cardCodeVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_cvv_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_code',\n                            }),\n\n                        cardNumberVerification: string()\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_required_error',\n                                ),\n                                test: (value) => value !== 'required',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_invalid_error',\n                                ),\n                                test: (value) => value !== 'invalid_card_number',\n                            })\n                            .test({\n                                message: language.translate(\n                                    'payment.credit_card_number_mismatch_error',\n                                ),\n                                test: (value) => value !== 'mismatched_card_number',\n                            }),\n                        ...(isCardExpiryRequired\n                            ? {\n                                  cardExpiryVerification: string()\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_required_error',\n                                          ),\n                                          test: (value) => value !== 'required',\n                                      })\n                                      .test({\n                                          message: language.translate(\n                                              'payment.credit_card_expiration_invalid_error',\n                                          ),\n                                          test: (value) => value !== 'invalid_card_expiry',\n                                      }),\n                              }\n                            : {}),\n                    }),\n            }),\n    });\n});\n","import { noop } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { getAppliedStyles } from '@bigcommerce/checkout/dom-utils';\nimport { FormContext, FormFieldContainer, TextInput } from '@bigcommerce/checkout/ui';\n\nexport enum CreditCardInputStylesType {\n    Default = 'default',\n    Error = 'error',\n    Focus = 'focus',\n}\n\nexport default function getCreditCardInputStyles(\n    containerId: string,\n    properties: string[],\n    type: CreditCardInputStylesType = CreditCardInputStylesType.Default,\n): Promise<{ [key: string]: string }> {\n    const container = document.createElement('div');\n    const parentContainer = document.getElementById(containerId);\n\n    if (!parentContainer) {\n        throw new Error(\n            'Unable to retrieve input styles as the provided container ID is not valid.',\n        );\n    }\n\n    parentContainer.appendChild(container);\n\n    return new Promise((resolve) => {\n        const callbackRef = (element: HTMLInputElement | null) => {\n            if (!element) {\n                return;\n            }\n\n            resolve(getAppliedStyles(element, properties));\n\n            ReactDOM.unmountComponentAtNode(container);\n\n            if (container.parentElement) {\n                container.parentElement.removeChild(container);\n            }\n        };\n\n        ReactDOM.render(\n            <FormContext.Provider value={{ isSubmitted: true, setSubmitted: noop }}>\n                <FormFieldContainer hasError={type === CreditCardInputStylesType.Error}>\n                    <TextInput\n                        appearFocused={type === CreditCardInputStylesType.Focus}\n                        ref={callbackRef}\n                    />\n                </FormFieldContainer>\n            </FormContext.Provider>,\n            container,\n        );\n    });\n}\n","import classNames from 'classnames';\nimport React, { type FunctionComponent, type HTMLAttributes } from 'react';\n\nexport interface TextInputIframeContainerProps extends HTMLAttributes<HTMLDivElement> {\n    additionalClassName?: string;\n    appearFocused?: boolean;\n    testId?: string;\n}\n\nconst TextInputIframeContainer: FunctionComponent<TextInputIframeContainerProps> = ({\n    additionalClassName,\n    appearFocused,\n    testId,\n    ...props\n}) => (\n    <div\n        {...props}\n        className={classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            { 'form-input--focus': appearFocused },\n            { 'optimizedCheckout-form-input--focus': appearFocused },\n            additionalClassName,\n        )}\n        data-test={testId}\n    />\n);\n\nexport default TextInputIframeContainer;\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n","import React, { type FunctionComponent } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\nimport {\n    HostedCreditCardCodeField,\n    HostedCreditCardExpiryField,\n    HostedCreditCardNumberField,\n} from '../';\n\nexport interface HostedCreditCardValidationProps {\n    cardCodeId?: string;\n    cardNumberId?: string;\n    cardExpiryId?: string;\n    focusedFieldType?: string;\n}\n\nconst HostedCreditCardValidation: FunctionComponent<HostedCreditCardValidationProps> = ({\n    cardCodeId,\n    cardNumberId,\n    cardExpiryId,\n    focusedFieldType,\n}) => (\n    <>\n        {cardNumberId && (\n            <p>\n                <strong>\n                    <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n                </strong>\n\n                <br />\n\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n            </p>\n        )}\n\n        <div className=\"form-ccFields\">\n            {cardNumberId && (\n                <HostedCreditCardNumberField\n                    appearFocused={focusedFieldType === 'cardNumber'}\n                    id={cardNumberId}\n                    name=\"hostedForm.errors.cardNumberVerification\"\n                />\n            )}\n\n            {cardCodeId && (\n                <HostedCreditCardCodeField\n                    appearFocused={focusedFieldType === 'cardCode'}\n                    id={cardCodeId}\n                    name=\"hostedForm.errors.cardCodeVerification\"\n                />\n            )}\n\n            {cardExpiryId && (\n                <HostedCreditCardExpiryField\n                    appearFocused={focusedFieldType === 'cardExpiry'}\n                    id={cardExpiryId}\n                    name=\"hostedForm.errors.cardExpiryVerification\"\n                />\n            )}\n        </div>\n    </>\n);\n\nexport default HostedCreditCardValidation;\n"],"names":["appearFocused","id","name","renderInput","useCallback","additionalClassName","input","labelContent","MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","type","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","InvalidArgumentError","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","PaymentArgumentInvalidError","invalidFields","join","getBrowserInfo","navigator","window","language","userLanguage","color_depth","screen","colorDepth","java_enabled","javaEnabled","screen_height","height","screen_width","width","time_zone_offset","Date","getTimezoneOffset","toString","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","MolliePaymentMethodType","CREDIT_CARD","methodsNotAllowedWhenDigitalOrder","MolliePaymentStrategy","mollieScriptLoader","paymentIntegrationService","initialize","options","mollie","methodId","gatewayId","controllers","document","querySelectorAll","each","controller","remove","state","getState","storeConfig","getStoreConfigOrThrow","initializeOptions","paymentMethod","getPaymentMethodOrThrow","config","merchantId","testMode","locale","getLocale","isCreditCard","form","shouldShowTSVHostedForm","hostedForm","mountCardVerificationfields","mollieClient","loadMollieJs","storeProfile","storeLanguage","mountElements","unsubscribe","isPaymentMethodInitialized","element","getElementById","disableButton","loadPaymentMethodsAllowed","Promise","resolve","execute","payload","payment","order","paymentData","submitOrder","Boolean","instrumentId","executeWithVaulted","executeWithCC","executeWithAPM","error","processAdditionalAction","finalize","deinitialize","detach","cardHolderElement","cardNumberElement","verificationCodeElement","expiryDateElement","unmount","shouldSaveInstrument","shouldSetAsDefaultInstrument","instrument","token","getMollieClient","createToken","reject","formattedPayload","credit_card_token","vault_payment_instrument","set_as_default_stored_instrument","browser_info","shopper_locale","getShopperLocale","submitPayment","isHostedPaymentFormEnabled","validate","submit","loadCurrentOrder","issuer","isHostedFieldAvailable","formOptions","getStoreConfig","bigpayBaseUrl","paymentSettings","createHostedForm","attach","isHostedFormEnabled","getInitializeOptions","fields","some","body","errors","code","additional_action_required","data","redirect_url","location","replace","testmode","load","containerId","cardNumberId","cardCvcId","cardExpiryId","cardHolderId","styles","container","setTimeout","style","display","createComponent","mount","includes","cartDigitalItems","getCartOrThrow","lineItems","digitalItems","length","paragraph","createElement","setAttribute","unsupportedMethodMessage","innerText","appendChild","PaymentMethodClientUnavailableError","MollieScriptLoader","scriptLoader","mollieHostWindow","loadScript","Mollie","module","getScriptLoader","resolveIds","gateway","assign","HiddenInput","field","value","restField","selectedIssuer","_","helpers","Input","useEffect","setValue","IssuerSelectButton","className","href","onClick","preventDefault","OptionButton","props","image","alt","src","size1x","withLanguage","method","issuers","initializationData","paymentMethodsResponse","setSelectedIssuer","useState","translate","render","handleClick","currentTarget","_selectedIssuer","find","dataset","issuersList","map","key","DropdownTrigger","dropdown","FormField","htmlFor","cardNumberElementOptions","TranslatedString","cardHolderElementOptions","cardCvcElementOptions","TooltipTrigger","placement","tooltip","CreditCardCodeTooltip","IconHelp","cardExpiryElementOptions","toResolvableComponent","checkoutState","checkoutService","paymentForm","paymentContext","useContext","PaymentFormContext","localeContext","LocaleContext","focusedFieldType","setFocusedFieldType","setFieldTouched","setFieldValue","setSubmitted","submitForm","setSubmit","hidePaymentSubmitButton","disableSubmit","setValidationSchema","isInstrumentCardCodeRequiredProp","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredProp","isInstrumentCardNumberRequiredSelector","cardCode","isCardCodeRequired","getHostedFieldId","compact","getHostedFormOptions","selectedInstrument","styleProps","isInstrumentCardNumberRequired","isInstrumentCardCodeRequired","styleContainerId","undefined","cardCodeVerification","accessibilityLabel","bigpayToken","cardNumberVerification","cardExpiry","placeholder","cardName","cardNumber","default","getCreditCardInputStyles","focus","Focus","onBlur","fieldType","onCardTypeChange","cardType","onEnter","onFocus","onValidate","forIn","fieldErrors","errorKey","getHostedStoredCardValidationFieldset","HostedCreditCardValidation","cardCodeId","initializeMolliePayment","mollieElements","getMolliesElementOptions","initializePayment","integrations","base","color","valid","invalid","disabled","creditcard","instruments","getInstruments","getCheckout","isPaymentDataRequired","getCustomer","statuses","isLoadingInstruments","checkout","customer","isInstrumentFeatureAvailable","isGuest","isVaultingEnabled","HostedWidgetPaymentComponent","deinitializePayment","hideContentWhenSignedOut","isAccountInstrument","isSignedIn","payments","providerId","loadInstruments","renderCustomPaymentForm","shouldRenderCustomInstrument","signOut","signOutCustomer","storedCardValidationSchema","getHostedInstrumentValidationSchema","validateInstrument","_shouldShowNumber","useMemo","isCardExpiryRequired","shape","required","test","cardExpiryVerification","CreditCardInputStylesType","properties","Default","parentContainer","Provider","isSubmitted","noop","hasError","ref","parentElement","removeChild","testId","EditButton","buttonId","shouldShowEditButton","translatedString","PaymentDescriptor","shouldShowDescriptor","paymentDescriptor","PaymentWidget","additionalContainerClassName","hideWidget","isSignInRequired","shouldShowCreditCardFieldset","tabIndex","isInitializing","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","shouldShow","hideVerificationFields","onUnhandledError","deinitializeCustomer","initializeCustomer","signInCustomer","isAddingNewCard","setIsAddingNewCard","selectedInstrumentId","setSelectedInstrumentId","instrumentsRef","useRef","current","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","filter","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","onSelectInstrument","onUseNewInstrument","CardInstrumentFieldset","onDeleteInstrument","shouldHideExpiryDate","StoreInstrumentFieldset"],"sourceRoot":""}