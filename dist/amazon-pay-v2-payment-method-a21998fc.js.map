{"version":3,"file":"amazon-pay-v2-payment-method-a21998fc.js","mappings":"qGAAe,SAASA,EAA0BC,GAC9C,OAAQA,GACJ,IAAK,OACL,IAAK,mBACD,MAAO,mBAEX,IAAK,SACL,IAAK,cACD,MAAO,cAEX,QACI,OAAOA,EAEnB,C,mDCJA,MAmBA,GAnB+C,E,SAAA,KAC3C,EAAGC,WACC,MAAMC,EAAOD,EAAKE,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAc,CAACC,EAAwBC,MAC/BF,GCRE,UAAwC,UACnDA,EAAS,WACTC,EAAU,cACVC,IAEA,MAAM,wCAAEC,GAA0C,IAC9CD,aAAa,EAAbA,EAAeE,qBAAsB,CAAC,EAE1C,QAAuC,IAAnCJ,EAAUK,cAAcC,SAAiBH,GAIrCF,EAAWM,uBACvB,CDDeC,CAA+B,CAClCR,YACAC,aACAC,mB,wFErBAO,ECAAC,EDAAD,E,4CEKG,MAAeE,UAAsBC,MAIhD,WAAAC,CAAYC,GCXD,IAAqCC,EDY5CC,MAAMF,GAAW,qCAJrB,KAAAG,KAAO,gBACP,KAAArB,KAAO,WCTyCmB,aDcZA,UCbhCG,OAAOC,eACPD,OAAOC,eDYQC,KCZeL,GDYfK,KCVRC,UAAYN,EDYoB,mBAA5BH,MAAMU,kBACbV,MAAMU,kBAAkBF,iBAExBA,KAAKG,MAAQ,IAAIX,MAAMQ,KAAKN,SAASS,KAE7C,GFnBQd,EAAAA,IAAAA,EAAoB,KAC5B,EAAAe,sBAAA,2BACA,IAAAC,YAAA,iBACA,IAAAC,gBAAA,qBACA,IAAAC,oBAAA,yBACA,IAAAC,gBAAA,qBACA,IAAAC,sBAAA,2BACA,IAAAC,aAAA,kBACA,IAAAC,mBAAA,wBACA,IAAAC,eAAA,oBACA,IAAAC,eAAA,oBACA,IAAAC,iBAAA,uBACA,IAAAC,yBAAA,+BACA,IAAAC,qBAAA,2BACA,IAAAC,0BAAA,gCACA,IAAAC,qBAAA,2BACA,IAAAC,oBAAA,0BACA,IAAAC,uBAAA,6BAQW,MAAMC,UAAyB9B,EAC1C,WAAAE,CAAmB6B,GACf1B,MAOR,SAAyBpB,GACrB,OAAQA,GACJ,KAAKa,EAAqBe,sBACtB,MAAO,iEAEX,KAAKf,EAAqBgB,YACtB,MAAO,sDAEX,KAAKhB,EAAqBkB,oBACtB,MAAO,8DAEX,KAAKlB,EAAqBiB,gBACtB,MAAO,0DAEX,KAAKjB,EAAqBmB,gBACtB,MAAO,0DAEX,KAAKnB,EAAqBoB,sBAC1B,KAAKpB,EAAqBsB,mBACtB,MAAO,+DAEX,KAAKtB,EAAqBqB,aACtB,MAAO,uDAEX,KAAKrB,EAAqBuB,eACtB,MAAO,0EAEX,KAAKvB,EAAqBwB,eACtB,MAAO,yDAEX,KAAKxB,EAAqB8B,oBACtB,MAAO,+EAEX,KAAK9B,EAAqB2B,qBACtB,MAAO,2FAEX,KAAK3B,EAAqB+B,uBACtB,MAAO,kEAEX,QACI,MAAO,8DAEnB,CA1CA,CAP8BE,IADP,KAAAA,QAAAA,EAGftB,KAAKH,KAAO,mBACZG,KAAKxB,KAAO,cAChB,EI7BW,SAAS+C,EAAuB7C,GAC3C,OCDsCE,EDCbF,EAAKE,UAAUK,cAAcuC,QAAQC,IAAUA,EAAKC,oBCAtEC,EAAAA,EAAAA,QAAO/C,GAAW,CAACgD,EAAOH,IAAmBG,EAAQH,EAAKI,UAAU,GADhE,KDEf,CENe,SAASC,EAASC,EAAUC,GACvC,GAAID,MAAAA,EACA,MAAMC,EAAeA,IAAiB,IAAIxC,MAAM,qCAGpD,OAAOuC,CACX,ELJA,SAAYzC,GACR,IAAA2C,6BAAA,kCACA,IAAAC,uBAAA,4BACA,IAAAC,sBAAA,2BACA,IAAAC,uBAAA,4BACA,IAAAC,6BAAA,iCACH,CAND,CAAY/C,IAAAA,EAAuB,KAapB,MAAMgD,UAA4B/C,EAC7C,WAAAE,CAAmB6B,GACf1B,MAOR,SAAyBpB,GACrB,OAAQA,GACJ,KAAKc,EAAwB4C,uBACzB,MAAO,oFAEX,KAAK5C,EAAwB6C,sBACzB,MAAO,mFAEX,KAAK7C,EAAwB8C,uBACzB,MAAO,oFAEX,KAAK9C,EAAwB+C,6BACzB,MAAO,mFAEX,QACI,MAAO,6EAEnB,CAjBA,CAP8Bf,IADP,KAAAA,QAAAA,EAGftB,KAAKH,KAAO,sBACZG,KAAKxB,KAAO,iBAChB,EMiLG,MAAM+D,EAAgD,CACzDC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,MAIR,IAAYC,EAYAC,EAkBAC,EAOAC,EAQAC,EAMAC,GAnDZ,SAAYL,GACR,EAAAM,MAAA,QACA,EAAAC,MAAA,QACA,EAAAC,MAAA,QACA,EAAAC,MAAA,QACA,EAAAC,MAAA,QACA,EAAAC,MAAA,QACA,EAAAC,MAAA,OACH,CARD,CAAYZ,IAAAA,EAA2B,KAYvC,SAAYC,GAER,EAAAY,KAAA,OAGA,EAAAC,QAAA,UAGA,EAAAC,KAAA,OAGA,EAAAC,SAAA,WAGA,EAAAC,MAAA,OACH,CAfD,CAAYhB,IAAAA,EAAoB,KAkBhC,SAAYC,GACR,EAAAgB,IAAA,MACA,EAAAC,IAAA,MACA,EAAAC,IAAA,MACA,EAAAC,IAAA,KACH,CALD,CAAYnB,IAAAA,EAAyB,KAOrC,SAAYC,GAER,EAAAmB,WAAA,aAGA,EAAAC,QAAA,SACH,CAND,CAAYpB,IAAAA,EAAqB,KAQjC,SAAYC,GACR,EAAAoB,KAAA,OACA,EAAAC,UAAA,YACA,EAAAC,SAAA,UACH,CAJD,CAAYtB,IAAAA,EAAsB,KAMlC,SAAYC,GACR,EAAAsB,MAAA,OACH,CAFD,CAAYtB,IAAAA,EAAuB,K,0SC/NpB,MAAMuB,EAMjB,WAAA/E,CAAoBgF,GAAA,KAAAA,wBAAAA,CAAmD,CAEjE,UAAAC,CAAW5F,G,yCACbkB,KAAK2E,qBAAuB3E,KAAKyE,wBAAwBG,KAAK9F,GAC9DkB,KAAK6E,sBACD7E,KAAK6E,uBAAyB7E,KAAK8E,sCAC3C,G,CAEA,YAAAC,G,MAMI,OALA/E,KAAKgF,uBAAAA,EACqB,QAA1BC,EAAAjF,KAAK6E,6BAAAA,IAAqB,KAAEK,SAC5BlF,KAAK6E,2BAAAA,EACL7E,KAAK2E,oBAAAA,EAEEQ,QAAQC,SACnB,CAEA,UAAAC,CACIC,EACAC,EACAC,GAEAxF,KAAKyF,oBAAoBC,IAAIC,iBAAiB,IAAIL,IAAY,CAC1DM,wBAAyBL,EACzBC,aAAAA,GAER,CAEA,YAAAK,CAAaC,EAAqBC,GAC9B/F,KAAKgF,kBAAoBhF,KAAKyF,oBAAoBC,IAAIM,aAClD,IAAIF,IACJC,EAER,CAEA,eAAAE,CAAgBC,GACZ,MAAMC,EAAgBnG,KAAKoG,qBAAqBF,GAEhDlG,KAAKqG,uBAAuBC,SAAQ,KAChCtG,KAAKqG,uBAAuBE,aAAaJ,KAEjD,CAEA,wCAAAK,CACIC,GASAzG,KAAKqG,uBAAuBC,SAAQ,IAAY,EAAD,gCAC3C,MAAMI,QAAeD,IAErB,GAAIC,EAAQ,CACR,MAAMP,EAAgBnG,KAAKoG,qBACvBM,EAAOR,4BACPQ,EAAOC,qBACPD,EAAOE,aAGX5G,KAAKqG,uBAAuBE,aAAaJ,E,CAEjD,KACJ,CAEM,OAAAU,G,yCAKF,OAJI7G,KAAK2E,gBACL3E,KAAK2E,eAAee,IAAImB,UAGrB1B,QAAQC,SACnB,G,CAEA,qBAAA0B,EAAsB,YAClBC,EAAW,cACXC,EAAa,YACblB,EAAW,2BACXmB,GAAAA,EAAkC,SAClCC,EAAQ,QACRnB,EAAO,UACPoB,EAAS,0BACTC,GAAAA,IAEA,MAAMC,EAAYC,SAASC,cAA2B,IAAIzB,KAE1D,IAAKuB,EACD,OAGJ,MAAQG,GAAIC,GAAsBJ,EAAUK,YAAY1H,KAAK2H,4BAEzD5B,GAAWqB,IACXrB,EAAQ6B,OAAS3E,EAAwBsB,OAG7C,MAAMsD,EACF9B,MAAAA,EAAAA,EACA/F,KAAK8H,4BACDd,EACAE,EACAC,EACAF,EACAF,GAKR,OAFA/G,KAAK6F,aAAa4B,EAAmBI,GAE9B7H,KAAK2H,0BAChB,CAEA,oBAAAI,CAAqBC,GACjBhI,KAAKgI,aAAeC,QAAQD,EAChC,CAKA,YAAAE,CACIC,EACAC,GAEA,MAAMF,IAAiBC,EAAS,+BAC1BE,IAAgBF,EAAS,mCAE/B,OAAID,GAAgBG,EACY,OAArBD,EAGJF,CACX,CAEQ,oBAAA9B,CACJF,EACAS,EACAC,GAEA,MAAM,YAAE0B,GAAkCpC,EAAlBqC,E,0UAAkBrC,EAApC,iBAEN,OAAO,OAAP,sBACIA,4BAA6BlG,KAAKwI,sBAAsBF,GAClDC,EACArC,GACFS,GAAwB,CAAEA,qBAAAA,IAC1BC,GAAe,CAAEA,YAAAA,GAE7B,CAEQ,oCAAA9B,GACJ,MAAM2D,EAAMC,KAAKC,SAASC,SAAS,IAAIC,QAAQ,GACzCC,EAAkBxB,SAASyB,cAAc,OAI/C,OAFAD,EAAgBtB,GAAK,qCAAqCiB,IAEnDK,CACX,CAEQ,2BAAAhB,CACJd,EACAE,EACAC,EACAF,GAAAA,EACAF,EAAc/D,EAAuBoB,M,MAErC,MAAM,QAAEzF,EAAO,YAAEqK,EAAW,sBAAEC,EAAqB,wBAAEC,GACjDlJ,KAAKmJ,iBAAiBnC,IAEtBN,QAAQ,WAAE0C,EAAU,SAAEC,GAAU,mBAChCrK,GACAkK,EAAsDhC,GAE1D,IAAKlI,EACD,MAAM,IAAIqC,EAAiBhC,EAAqB2B,sBAGpD,MAAM,iBACFsI,EAAgB,sBAChBC,EAAqB,4BACrBrD,EAA2B,+BAC3BsD,EAA8B,eAC9BC,EAAc,YACdnB,EAAc,GAAE,0BAChBlB,GACApI,EAEJ,IAAKoK,IAAeK,EAChB,MAAM,IAAIpI,EAAiBhC,EAAqB2B,sBAGpD,MAAM0I,EAAgB,eAClBN,WAAAA,EACAK,eAAAA,EACAH,iBAAAA,EACAnC,UAAAA,EACAJ,YAAAA,GACIK,EAA4B,CAAEQ,OAAQ3E,EAAwBsB,OAAU,CAAC,GAGjF,GAAIvE,KAAKgI,aACL,OAAO,OAAP,wBACO0B,GAAgB,CACnBC,UAAWN,IAInB,MAAM3K,EAAOC,IAEb+K,EAAiB9C,YACblI,GAAyC,IAAjC6C,EAAuB7C,GACzBqE,EAAsBoB,QACtBpB,EAAsBmB,WAEhC,MACI0F,kBAAkB,SAAEzB,GACpB0B,cAAc,SAAEC,EAAQ,iBAAE1B,IAC1Ba,IAEJ,GAAIjJ,KAAKkI,aAAaC,EAAUC,GAAmB,CAC/C,IAAKlC,EACD,MAAM,IAAI7E,EAAiBhC,EAAqB2B,sBAGpD,MAAM+I,EAAsB,QAAb,EAAAf,WAAAA,IAAa,WAAEgB,mBAAmBpB,WAC3CqB,EAAevL,MAAAA,OAAAA,EAAAA,EAAMwL,SAASC,KAC9BC,EAAa,iBAAoCV,GACvD,IAAIW,EAkBJ,OAhBIrK,KAAKwI,sBAAsBF,IAC3B8B,EAAc9B,YAAcA,EAC5B+B,EAAYnE,IAEZkE,EAAcT,UAAYN,EAC1BgB,EAAY,OAAH,wBAAQnE,GAA2B,CAAEoC,YAAAA,KAG7CrB,IACDmD,EAAclE,4BAA8BmE,GAG5CN,GAAUE,IACVG,EAAczD,qBAAuB,CAAEoD,OAAAA,EAAQE,aAAAA,IAG5CG,C,CAGX,MAAME,EAAwB,CAC1BC,OAAQhB,EACRiB,IAAK,GAAGV,qBAA4B5C,oBACpCsC,+BAAAA,GAGJ,OAAO,OAAP,wBACOE,GAAgB,CACnBY,sBAAAA,EACAX,UAAWN,GAEnB,CAEQ,qBAAAb,CAAsBF,GAC1B,MAAO,kBAAkBmC,KAAKnC,EAClC,CAEQ,iBAAA7C,GACJ,OAAOzF,KAAK0K,WAAW1K,KAAK2E,eAChC,CAEQ,wBAAAgD,GACJ,OAAO3H,KAAK0K,WAAW1K,KAAK6E,sBAChC,CAEQ,oBAAAwB,GACJ,OAAOrG,KAAK0K,WAAW1K,KAAKgF,kBAChC,CAEQ,UAAA0F,CAAc3I,GAClB,OAAOD,EACHC,GACA,IAAM,IAAIO,EAAoBhD,EAAwB6C,wBAE9D,CAGQ,gBAAAgH,CACJnC,GAKA,MCrU6B,iBAHjC2D,EDwUoC3D,ICpUV,OAAtB2D,GACA,SAAUA,GACV,aAAcA,GACd,WAAYA,GACZ,mBAAoBA,EDiUT,CACHhM,QAASqI,EAActI,KAAKC,QAC5BqK,YAAahC,EAAc4D,SAAS5B,YACpCC,sBAAuBjC,EAAcN,OAAOuC,sBAC5CC,wBAA6BhC,GACzBF,EAAc6D,eAAe3B,wBAA2BhC,IAI7DF,ECnVR,KDoVH,EEhVW,MAAM8D,UAA4CvL,EAC7D,WAAAE,CAAYC,GACRE,MACIF,GACI,uGAGRM,KAAKH,KAAO,sCACZG,KAAKxB,KAAO,mCAChB,ECDW,MAAMuM,EACjB,WAAAtL,CACYuL,EACAC,EAA6CC,QAD7C,KAAAF,aAAAA,EACA,KAAAC,oBAAAA,CACT,CAEG,IAAArG,CAAK2F,G,4BACP,MAAM,mBAAEvL,GAAuBuL,EACzBY,GAASnM,MAAAA,OAAAA,EAAAA,EAAoBmM,SAAU,KAEvCC,EAAoB7I,EAAmB4I,GAM7C,SAJMnL,KAAKgL,aAAaK,WACpB,kBAAkBD,sCAGjBpL,KAAKiL,oBAAoBK,OAC1B,MAAM,IAAIR,EAGd,OAAO9K,KAAKiL,oBAAoBK,MACpC,E,2RC9BW,SAASC,IACpB,OAAO,IAAI/G,EAA4B,IAAIuG,GAAwBS,EAAAA,EAAAA,OACvE,CCLe,SAASC,EACpBC,EACAC,GAEA,OAAO7L,OAAO8L,OAAOF,EAAQ,CAAEC,WAAAA,GACnC,CCAe,MAAME,UAA6BtM,EAC9C,WAAAE,CAAYC,GACRE,MAAMF,GAAW,yCAEjBM,KAAKH,KAAO,uBACZG,KAAKxB,KAAO,kBAChB,ECPW,MAAMsN,UAAgCvM,EACjD,WAAAE,CAAYC,GACRE,MACIF,GACI,kGAGRM,KAAKH,KAAO,0BACZG,KAAKxB,KAAO,6BAChB,ECbW,MAAMuN,UAAuCxM,EACxD,WAAAE,CAAYC,GACRE,MACIF,GACI,4FAGRM,KAAKH,KAAO,iCACZG,KAAKxB,KAAO,qCAChB,ECTG,SAASwN,EAAqBjG,GACjC,OAAMA,aAAmBjG,QAIlB,4BAA6BiG,CACxC,C,ICRKkG,E,sSC0BU,MAAMC,EAGjB,WAAAzM,CACY0M,EACAC,EACAC,GAFA,KAAAF,0BAAAA,EACA,KAAAC,4BAAAA,EACA,KAAAC,+BAAAA,CACT,CAEG,UAAA3H,CACFqB,G,+CAEA,MAAM,SAAEmB,EAAQ,YAAEpB,EAAW,UAAEwG,GAAcvG,GACvC,YAAEgB,GAAgBuF,GAAa,CAAC,EAEtC,IAAKpF,IAAapB,EACd,MAAM,IAAI+F,EACN,mFAIR,MAAM,wBAAE3C,GAA4BlJ,KAAKmM,0BAA0BI,WAE7DzN,EAAgBoK,EAAsDhC,IACtE,mBAAElI,GAAuBF,QAEzBkB,KAAKoM,4BAA4B1H,WAAW5F,GAE7CwN,UACKtM,KAAKmM,0BAA0BK,uBAGzC,MAAMC,EAAgCT,EAAqBM,QAAAA,EAErDA,EAGFN,EAAqBM,IACkD,mBAA/B,QAAjC,EAAAA,EAAUI,+BAAAA,IAAuB,WAAEC,4BAE1C3M,KAAK4M,yBAA2BN,EAAUI,wBAC1C1M,KAAKoM,4BAA4BrE,sBAAqB,IAG1D/H,KAAKoM,4BAA4BtF,sBAAsB,CACnDE,cAAehH,KAAKmM,0BAA0BI,WAC9CzG,YAAAA,EACAoB,SAAAA,EACAnB,QAAS0G,EACTtF,UAAWtE,EAAqBc,KAChCoD,YAAAA,EACAK,0BAA2BpI,MAAAA,OAAAA,EAAAA,EAAoBoI,4BAG/CpH,KAAK4M,0BACL5M,KAAKoM,4BAA4B5F,yCAC7BxG,KAAK6M,kCAAkCC,KAAK9M,M,IAKxD,YAAA+E,GACI,OAAO/E,KAAKoM,4BAA4BrH,cAC5C,CAEc,wBAAAgI,G,iDACV,MAAMC,EAA+E,QAAvD,EAA6B,QAA7B/H,EAAAjF,KAAK4M,gCAAAA,IAAwB,WAAED,gCAAAA,IAAwB,mBAErF,IAAKK,EACD,MAAM,IAAI3L,EAAiBhC,EAAqBgB,aAGpD,IAKI,aAJyBL,KAAKmM,0BAA0Bc,iBACpDD,E,CAIN,MAAOE,GACL,MAAM,IAAIpB,C,KAIJ,qBAAAqB,CACV3F,G,yCAEA,IACI,MACI,SACMxH,KAAKqM,+BAA+B5F,qBAAqBe,IAAG,MADlE,QAAQ4F,EAAO,WAAEC,GAAU,EAAKC,E,0UAAI,EAA9B,0BAGV,OAAO,OAAP,QACIC,YAAaH,EACb9E,YAAa+E,GACVC,E,CAET,MAAOJ,GACL,MAAM,IAAInB,C,CAElB,G,CAEc,iCAAAc,G,yCACV,MAAMW,QAAmBxN,KAAK+M,2BACxBpG,EAAuB,CACzBoD,OAAQ0D,OAAOD,EAAWE,YAC1BzD,aAAcuD,EAAWtD,SAASC,MAItC,MAAO,CACHjE,kCAHsClG,KAAKmN,sBAAsBK,EAAWhG,IAI5Eb,qBAAAA,EACAC,YAC2C,IAAvCrF,EAAuBiM,GACjBzK,EAAsBoB,QACtBpB,EAAsBmB,WAExC,G,GD/IJ,SAAK+H,GACD,EAAA0B,KAAA,mBACA,EAAAC,OAAA,4BACH,CAHD,CAAK3B,IAAAA,EAAW,KAKhB,UELa4B,EAAsB,CAAE,yBAA0B,WCchD,MAAMC,EACjB,WAAArO,CAAoBsO,GAAA,KAAAA,eAAAA,CAAgC,CAEpD,oBAAAtH,CAAqBuH,GACjB,MAAMC,EAAO,CAAED,OAAAA,GACTE,EAAU,OAAH,QACT,iBCnBR,0EDoBQ,eAAgB,EAAYP,MACzBE,GAGP,OAAO7N,KAAK+N,eAAeI,KAAK,oCAAqC,CAAED,QAAAA,EAASD,KAAAA,GACpF,EEDWxC,GAbXU,IAEA,MAAMiC,GAAgBC,EAAAA,EAAAA,uBAChBC,EAA2B,IAAIR,EAAyBM,GACxDhC,EAA8Bb,IAEpC,OAAO,IAAIW,EACPC,EACAC,EACAkC,KAI2D,CAAC,CAAE9G,GAAI,eClB3D,MAAM+G,UAAoC1C,EACrD,WAAApM,CAAY+O,GACR,IAAI9O,EAAU,yEAEV8O,IACA9O,EAAU,GAAGA,4DAAkE8O,EAAcC,KACzF,UAIR7O,MAAMF,GAENM,KAAKH,KAAO,6BAChB,ECbW,MAAM6O,UAAoCnP,EACrD,WAAAE,CAAYC,GACRE,MAAMF,GAAW,kCAEjBM,KAAKH,KAAO,8BACZG,KAAKxB,KAAO,mBAChB,ECPW,MAAMmQ,UAA0CpP,EAC3D,WAAAE,GACIG,MAAM,kEAENI,KAAKH,KAAO,oCACZG,KAAKxB,KAAO,iCAChB,E,0SCkBW,MAAMoQ,EAGjB,WAAAnP,CACY0M,EACAC,GADA,KAAAD,0BAAAA,EACA,KAAAC,4BAAAA,CACT,CAEG,UAAA1H,CACFqB,G,yCAEA,MAAM,SAAEmB,EAAQ,UAAEoF,GAAcvG,EAEhC,IAAKmB,EACD,MAAM,IAAI2E,EACN,kEAIR,MAAMgD,EAAQ7O,KAAKmM,0BAA0BI,YACvC,SAAEpE,GAAa0G,EAAM5F,wBAAwBW,iBAC7C9K,EAAgB+P,EAAM3F,wBAAsDhC,GAC5ElI,EAAqBF,EAAcE,oBAAsB,CAAC,GAC1D,aAAE8P,EAAe,GAAE,OAAE3D,EAAS,GAAE,0BAAE/D,GAA8BpI,EAItE,SAFMgB,KAAKoM,4BAA4B1H,WAAW5F,GAE9CkB,KAAK+O,cAAcD,IACfxC,MAAAA,OAAAA,EAAAA,EAAW0C,eACXhP,KAAKiP,gBACD3C,EAAU0C,aACVF,EACA,gBACA9O,KAAKkP,aAAa/D,QAGvB,CACH,MAAQ3D,GAAI1B,GAAgB9F,KAAKmP,mBAcjC,GAZAnP,KAAKoP,iBAAmBpP,KAAKoM,4BAA4BtF,sBAAsB,CAC3EE,cAAe6H,EACf/I,YAAAA,EACAmB,2BAA4BjH,KAAKqP,sBAC7BlH,EACAgD,EAAOmE,eAEXpI,SAAAA,EACAC,UAAWtE,EAAqBe,SAChCwD,0BAAAA,KAGCpH,KAAKoP,iBACN,MAAM,IAAIvD,EACN,+E,CAIhB,G,CAEM,OAAA0D,CAAQnC,EAA2BrH,G,yCACrC,MAAM,QAAEyJ,GAAYpC,EAEpB,IAAKoC,EACD,MAAM,IAAIjB,EAA4B,CAAC,YAG3C,MAAM,SAAErH,GAAasI,EACfX,EAAQ7O,KAAKmM,0BAA0BI,YACvC,SAAEpE,GAAa0G,EAAM5F,wBAAwBW,iBAE7C5K,EADgB6P,EAAM3F,wBAAsDhC,GACzClI,oBAAsB,CAAC,GAC1D,aAAE8P,EAAe,GAAE,OAAE3D,EAAS,IAAOnM,EAE3C,GACIgB,KAAK+O,cAAcD,IACnB9O,KAAKqP,sBAAsBlH,EAAUgD,EAAOmE,eAC9C,CACE,MAAMG,EAAiB,CACnBvI,SAAAA,EACAwI,YAAa,CAAEC,MAAOb,GAAgB,cAGpC9O,KAAKmM,0BAA0ByD,YAAYxC,EAASrH,GAE1D,IAGI,kBAFM/F,KAAKmM,0BAA0B0D,cAAcJ,G,CAGrD,MAAOvC,GACL,KCpHO,CAACA,GACI,iBAAVA,GAAgC,OAAVA,GAAkB,SAAUA,EAD7C,CDoHaA,KEnHhC4C,EFmHgF5C,EAAMe,KEhH7D,iBAAd6B,GACO,OAAdA,GACA,WAAYA,GACZ,+BAAgCA,GAC6B,+BAA5DA,EAAiDC,QAClD,SAAWD,EAAiDE,4BAC5D,iBACKF,EAAiDE,2BAA2BvR,MAE3D,iBADdqR,EAAiDE,2BAA2BvR,KAC/EwR,eFwGO,MAAM/C,EAGV,MAAQ8C,2BAA4BE,GAAqBhD,EAAMe,MACzD,aAAEgC,GAAiBC,EAAiBzR,KAE1C,GAAIqQ,EACA,OAAO,IAAI3J,SAAQ,IAAM+F,OAAOiF,SAASvE,OAAOqE,KAGpDjQ,KAAKoM,4BAA4BnG,gBAE7BmK,KAAKC,MAAMJ,G,EEjIxB,IACHH,EFyII,OAJA9P,KAAKsQ,sBAAsBC,QAIvBvQ,KAAKkP,aAAa/D,GACX,IAAIhG,SAAQ,CAACqL,EAAGC,KACnB,MAAMC,EAAU,KACZxF,OAAOyF,oBAAoB,QAASD,GACpCD,EACI,IAAI/B,EACA,qDAKZxD,OAAO0F,iBAAiB,QAASF,MAIlC,IAAIvL,QAAe0L,EAAAA,KAC9B,G,CAEA,QAAAC,GACI,OAAO3L,QAAQsL,OAAO,IAAI9B,EAC9B,CAEM,YAAA5J,G,+CACI/E,KAAKoM,4BAA4BrH,eAEvC/E,KAAKoP,sBAAAA,CACT,G,CAEQ,eAAAH,CACJ3J,EACAC,EACAC,EACAuL,GAEA,MAAMC,EAAS1J,SAAS2J,eAAe3L,GAEvC,GAAK0L,GAAWA,EAAOE,WAAvB,CAIA,IAAKH,EAAa,CACd,MAAMI,EAAQH,EAAOI,WAAU,GAE/BJ,EAAOE,WAAWG,aAAaF,EAAOH,GAEtCG,EAAMP,iBAAiB,SAAS,KACvB5Q,KAAKsR,wB,CAIlBtR,KAAKoM,4BAA4B/G,WAAWC,EAAUC,EAAWC,E,CACrE,CAEQ,YAAA0J,CAAa/D,GACjB,MAAkB,OAAXA,CACX,CAEc,mBAAAmG,G,+CACJtR,KAAKmM,0BAA0BoF,mBAAkB,IAAM,IAAIpM,QAAQ0L,EAAAA,OAC7E,G,CAEQ,gBAAA1B,GACJ,IAAI9H,EAAYC,SAAS2J,eAAe,mBAExC,OAAI5J,IAIJA,EAAYC,SAASyB,cAAc,OACnC1B,EAAUG,GAAK,kBACfH,EAAUmK,MAAMC,QAAU,OAEnBnK,SAAS2G,KAAKvG,YAAYL,GACrC,CAEQ,mBAAAiJ,GACJ,OAAOxO,EACH9B,KAAKoP,kBACL,IAAM,IAAI9M,EAAoBhD,EAAwB6C,wBAE9D,CAEQ,qBAAAkN,CACJlH,EACAC,GAEA,OACIpI,KAAKoM,4BAA4BlE,aAAaC,EAAUC,IACxDD,EAAS,0BAEjB,CAEQ,aAAA4G,CAAcD,GAClB,QAASA,CACb,EGnOJ,MASA,EAAerD,GARXU,GAEO,IAAIyC,EACPzC,EACAZ,MAI4D,CAAC,CAAE/D,GAAI,eCX5D,MAAMkK,UAA4BnS,EAC7C,WAAAE,CAAYC,GACRE,MAAMF,GAAW,oBAEjBM,KAAKH,KAAO,sBACZG,KAAKxB,KAAO,iBAChB,E,0SCMW,MAAMmT,EACjB,WAAAlS,CACY0M,EACAC,GADA,KAAAD,0BAAAA,EACA,KAAAC,4BAAAA,CACT,CAEG,UAAA1H,CACFqB,G,yCAEA,MAAM,SAAEmB,EAAQ,UAAEoF,GAAcvG,EAEhC,IAAKmB,KAAaoF,MAAAA,OAAAA,EAAAA,EAAWjF,WACzB,MAAM,IAAIwE,EACN,mFAIR,IAAI/M,EAEJ,IACIA,EAAgBkB,KAAKmM,0BAChBI,WACArD,wBAAwBhC,E,CAC/B,MAAO0K,SACC5R,KAAKmM,0BAA0B0F,kBAAkB3K,GACvDpI,EAAgBkB,KAAKmM,0BAChBI,WACArD,wBAAwBhC,E,OAG3BlH,KAAKoM,4BAA4B1H,WAAW5F,GAElDkB,KAAKoM,4BAA4BtF,sBAAsB,CACnDE,cAAehH,KAAKmM,0BAA0BI,WAC9CzG,YAAawG,EAAUjF,UACvBH,SAAAA,EACAC,UAAWtE,EAAqBe,UAExC,G,CAEM,YAAAmB,G,+CACI/E,KAAKoM,4BAA4BrH,cAC3C,G,CAEA,MAAA+M,GACI,MAAM,IAAIJ,EACN,iFAER,CAEM,OAAAK,CAAQhM,G,yCACV,MACMyJ,EADQxP,KAAKmM,0BAA0BI,WACvByF,eAEjBxC,UAICxP,KAAKoM,4BAA4BvF,gBACjC7G,KAAKmM,0BAA0B8F,sBAAsBzC,EAAQ0C,WAAYnM,GACnF,G,CAEA,4BAAAoM,CAA6BpM,G,MAGzB,OAFqC,QAArC,EAAAA,MAAAA,OAAAA,EAAAA,EAASqM,oCAAAA,IAA4B,aAE9BjN,QAAQC,SACnB,EC5EJ,MASA,EAAeqG,GARXU,GAEO,IAAIwF,EACPxF,EACAZ,MAI6D,CAAC,CAAE/D,GAAI,e,sECD5E,MA8EA,IAAe,EAAA6K,EAAA,IA9E0D,I,IAAA,gBACrEC,EAAe,cACftL,EAAa,YACbuL,EAAW,OACXhI,EACAA,QACIvL,oBAAoB,kBAAEwT,EAAiB,aAAE1D,KAC5C,EACExB,GAAI,cAR8D,qEAUrE,MAAMmF,GAA+B,IAAAC,cAChC3M,GACGuM,EAAgBK,kBAAkB,OAAD,wBAC1B5M,GAAO,CACV6M,aAAc,CAAC,GACftG,UAAW,CACP0C,aAAc,oBAG1B,CAACsD,IAGCO,GAAS,IAAAH,cAAY,IAAMxH,OAAOiF,SAAS0C,UAAU,KAErD,wBACFC,EAAuB,cACvBC,EAAa,cACbC,EAAa,UACbC,EAAS,oBACTC,GACAX,GAGA9T,MAAM,YAAEuK,EAAW,sBAAEmK,GACrBC,UAAU,qBAAEC,IACZrM,EAEE4D,EAAW5B,IACXsK,EAAWtM,EAAcvI,KAAK8U,cAE9BC,IADkBF,aAAQ,EAARA,EAAUG,UAEVxL,QAAQsC,EAAO7D,OAAOgN,mBAExCC,EAAc3M,EAAcvI,KAAKmV,eAAerJ,IAAW,GAEjE,OACI,gBAACsJ,EAAA,EAA4B,iBACrBvG,EAAI,CACRhI,SAAS,eACTQ,YAAY,gBACZgO,oBAAqBxB,EAAgBwB,oBACrCf,cAAeA,EACfD,wBAAyBA,EACzBiB,YAAU,EACVpB,kBAAmBF,EACnBkB,YAAaA,EACbK,8BAA8B,EAAAC,EAAA,GAAqCjN,GACnE5H,gCAAgC,EAAA8U,EAAA,GAAuClN,GACvEwM,6BAA8BA,EAC9BH,qBAAsBA,IACtBF,sBAAuBA,IACvBgB,kBAAkB,EAClBC,YAAY,IAAAC,MAAKzJ,aAAQ,EAARA,EAAU0J,SAAU,CAAEpC,WAAY3H,EAAO/C,KAC1D+M,gBAAiBjC,EAAgBiC,gBACjChK,OAAQA,EACRiK,UAAW3B,EACXL,kBAAmBA,EACnBQ,cAAeA,EACfC,UAAWA,EACXC,oBAAqBA,EACrBuB,aAAc3F,EACd4F,uBAAwB5F,EACxB6F,uBAAwB7F,EACxBiD,QAASO,EAAgBsC,qBAOjC,CAAC,CAAEpN,GAAI,e,gBCrFX,MAAMqN,GAAuB,K,MACzB,IAAKvN,SAASC,cAAc,8BACxB,OAGJ,MAAMF,EAAYC,SAASC,cAAc,kCAEzC,GAAIF,EAAW,CACX,MAAMyN,EAAmC,QAApB,EAAAzN,EAAU0N,kBAAU,eAAExN,cAAc,2BAEzD,GAAkBuN,aCpBIE,YDuBlB,YAFAF,EAAatD,MAAMyD,OAAS,OAIpC,CAEAC,WAAWL,GAAsB,KAerC,IAAe,EAAAxC,EAAA,IAZoD8C,KAC/D,IAAAC,YAAU,KACNP,OACD,IAGC,uBAAKQ,UAAU,sBACX,gBAACC,GAAA,EAAc,eAAC1C,aAAc,CAAC,IAAwCuC,OAO/E,CAAC,CAAE3N,GAAI,c,kDEvCJ,MAAM+N,EAA8B,CAAC,kBCG5C,MAmBA,GAnB6C,SACzC,EAAG9W,WACC,MAAMC,EAAOD,EAAKE,UAElB,OAAOD,GAAQA,EAAKE,aAEvBA,GAAc,CAACC,EAAwB0L,MAC/B3L,GDFE,UAAsC,WACjDC,EAAU,UACVD,EAAS,cACTE,IAEA,MACI4H,QAAQ,qBAAE8O,EAAoB,SAAEC,GAAU,mBAC1CzW,GACAF,GACE,sCAAE4W,GAAwC,GAAS1W,GAAsB,CAAC,EAEhF,QACIuW,EAA4BI,SAAS9W,EAAW+W,YAC/CF,KAMD9W,EAAUiX,aAAa3W,OAAS,GAAKN,EAAUkX,iBAAiB5W,OAAS,KAKzEL,EAAWM,wBACFqW,GAKHA,IAAwBC,GACtC,CCzBezB,CAA6B,CAChCnV,aACAD,YACAE,cAAeyL,K,uMCU3B,MAAMwL,EAAiE,EACnEV,YACAxW,aACAmX,SACAC,wBAAuB,EACvB3P,c,MAEA,MAAM4P,GAAW,EAAA3X,EAAA,GAA0BM,EAAWsX,OAChDC,EAAW,gBAA2BF,GACtCG,IAAa,IAAAC,gBAAe,CAC9BC,MAAO1X,EAAW2X,YAClBC,KAAM5X,EAAW6X,aAClBC,QAEH,OACI,0BAAQtB,UAAWA,EAAS,YAAaW,EAAQ1P,QAASA,EAAS9H,KAAK,UACpE,uBACI6W,UAAW,IAAW,2BAA4B,CAC9C,oCAAqCgB,KAGzC,gBAACO,EAAA,EAAc,CAACV,SAAUA,IAE1B,uBAAKb,UAAU,wBAAuB,YAAY,GAAGW,QAAAA,EAAU,YAC1DI,EACG,gBAACS,EAAA,EAAgB,CACbpY,KAAM,CACFqY,UAA4B,QAAjB,EAAAV,EAASW,gBAAQ,QAAI,GAChCC,SAAUnY,EAAWoY,OAEzBzP,GAAG,sCAGP,gBAACqP,EAAA,EAAgB,CACbpY,KAAM,CAAEuY,SAAUnY,EAAWoY,OAC7BzP,GAAG,gDAKbyO,GACE,uBACIZ,UAAW,IAAW,0BAA2B,CAC7C,mCAAoCgB,IACtC,YACS,GAAGL,GAAU,aAEvBK,EACG,gBAACQ,EAAA,EAAgB,CACbpY,KAAM,CACFyY,WAAY,GAAGrY,EAAW2X,eAAe3X,EAAW6X,cAExDlP,GAAG,oCAGP,gBAACqP,EAAA,EAAgB,CACbpY,KAAM,CACFyY,WAAY,GAAGrY,EAAW2X,eAAe3X,EAAW6X,cAExDlP,GAAG,wCAiB7B2P,EAA6D,EAC/DtY,aACAoX,wBAAuB,EACvB3P,UAAU,EAAAuK,SAEV,MAAMuG,GAAc,IAAA1E,cAAY,KAC5BpM,EAAQzH,EAAWwY,eACpB,CAAC/Q,EAASzH,IAEb,OACI,gBAACkX,EAAkB,CACflX,WAAYA,EACZyH,QAAS8Q,EACTnB,qBAAsBA,EACtBD,OAAO,8BAWbsB,EAAyE,EAC3EjC,YACAW,SACA1P,UAAU,EAAAuK,QAEV,0BAAQwE,UAAWA,EAAS,YAAaW,EAAQ1P,QAASA,EAAS9H,KAAK,UACpE,uBAAK6W,UAAU,6DACX,gBAACuB,EAAA,EAAc,MAEf,uBAAKvB,UAAU,yBACX,gBAACwB,EAAA,EAAgB,CAACrP,GAAG,0CAc/B+P,EAAyD,EAC3D5D,cACA6D,uBACAvB,wBAAuB,EACvBwB,qBACAC,wBAGI,sBACIrC,UAAU,gFAA+E,YAC/E,0BAET1B,EAAYgE,KAAK9Y,GACd,sBACIwW,UAAW,IAAW,6CAA8C,CAChE,oCACIxW,EAAWwY,cAAgBG,IAEnCI,IAAK/Y,EAAWwY,aAEhB,gBAACF,EAAgB,CACbtY,WAAYA,EACZyH,QAASmR,EACTxB,qBAAsBA,EACtBD,OAAO,gCAKnB,sBAAIX,UAAU,8EACV,gBAACiC,EAAsB,CACnBhR,QAASoR,EACT1B,OAAO,uCAcrB6B,EAAyE,EAC3EhZ,aACAoX,wBAAuB,EACvBD,SACA1P,aAEKzH,EAUD,gBAACkX,EAAkB,CACfV,UAAU,mFACVxW,WAAYA,EACZyH,QAASA,EACT2P,qBAAsBA,EACtBD,OAAQA,IAbR,gBAACsB,EAAsB,CACnBjC,UAAU,mFACVW,OAAQA,IAsFxB,EAtEmE,EAC/D8B,QACAC,OACApE,cACA8D,qBACAC,qBACAF,uBACAvB,wBAAuB,MAEvB,MAAM+B,GAA8B,IAAAC,QAAOT,GAErCU,GAAmB,IAAAxF,cACrB,CAACyF,EAAe,MACPJ,EAAK/E,cAAc8E,EAAMjY,KAAMsY,KAExC,CAACJ,EAAMD,EAAMjY,QAGjB,IAAAuV,YAAU,KAINF,YAAW,IAAMgD,EAAiBV,KAE3B,KACiB,KAAhBM,EAAM/V,YAAyCqW,IAAzBZ,GACtBU,OAIT,KAEH,IAAA9C,YAAU,KACF4C,EAA4BK,UAAYb,GAIxCtC,YAAW,IAAMgD,EAAiBV,KAGtCQ,EAA4BK,QAAUb,IACvC,CAACA,EAAsBU,IAE1B,MAAMI,GAAqB,IAAAC,MAAK5E,EAAa,CAAE0D,YAAaG,IAE5D,OACI,uBAAKnC,UAAU,oBACX,gBAACmD,EAAA,EAAe,CACZC,SACI,gBAAClB,EAAc,CACX5D,YAAaA,EACb8D,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBvB,qBAAsBA,KAI9B,gBAAC4B,EAAsB,CACnBhZ,WAAYyZ,EACZrC,qBAAsBA,EACtBD,OAAO,sBAGX,uCAAOxX,KAAK,UAAasZ,O,cC5QzC,MAkEA,GAAe,IAAAY,OAlEgE,EAC3E/E,cACAgF,qBACAlB,qBACAC,qBACAF,uBACAvB,wBAAuB,EACvB2C,qBAAqB,SAErB,MAAMC,GAAc,IAAAnG,cACfoF,GACG,gBAAC,EAAgB,iBACTA,EAAK,CACTnE,YAAaA,EACb8D,mBAAoBA,EACpBC,mBAAoBA,EACpBF,qBAAsBA,EACtBvB,qBAAsBA,MAG9B,CACItC,EACA8D,EACAC,EACAF,EACAvB,IAIF6C,GAAc,IAAApG,cACfyC,GACG,gBAAC4D,EAAA,EAAsB,eACnBpF,YAAaA,EACbgF,mBAAoBA,GAChBxD,KAGZ,CAACxB,EAAagF,IAGlB,OACI,gBAACK,EAAA,EAAQ,CACLC,oBAAoB,qBACpBC,OACI,gBAACC,EAAA,EAAM,CAACC,QAAM,GACV,gBAACvC,EAAA,EAAgB,CAACrP,GAAG,8BAI7B,gBAAC6R,EAAA,EAAY,CAACC,MAAOR,IAChB,EAAGxS,aACA,0BAAQ+O,UAAU,0BAA0B/O,QAASA,EAAS9H,KAAK,UAC/D,gBAACqY,EAAA,EAAgB,CAACrP,GAAG,wCAKjC,gBAAC+R,EAAA,EAAc,CAAC1Z,KAAK,eAAe2Z,OAAQX,IAE5C,uBAAKrH,MAAO,CAAEC,QAAS+F,OAAuBY,EAAY,SACrDQ,M,6DC9EjB,MAqDA,GAAe,E,SAAA,IArDgD,EAC3DtG,iBAAmBmH,uBAAsBC,sBACzCC,+BACA7T,cACAoB,WACA0S,mBACAC,sBACAC,kCACAlH,oBA+BA,IAAAwC,YAAU,MA7B4C,iDAClD,UACUsE,EAAmB,CACrBxS,WACA0L,eACA,CAAC1L,GAAW,OAAF,QACNG,UAAWvB,EACX8T,mBACAtT,QAAS,IAAMuT,EAAoB3S,IAChC4S,IAGf,CAAE,MAAO5M,GAC2B,mBAArB0M,GAAmC1M,aAAiB1N,OAC3Doa,EAAiB1M,EAEzB,CACJ,IAeW,MAb6C,iDACpD,UACUuM,EAAqB,CAAEvS,YACjC,CAAE,MAAOgG,GAC2B,mBAArB0M,GAAmC1M,aAAiB1N,OAC3Doa,EAAiB1M,EAEzB,CACJ,OASG,IAGC,uBAAKmI,UAAWsE,EAA4B,YAAa7T,EAAa0B,GAAI1B,MAM9E,G,mLCpDG,MAAMiU,EAAa,EAAGzU,WAAUqP,2BACnC,GAAIA,EAAsB,CACtB,MAAMqF,EAAmB,gBAACnD,EAAA,EAAgB,CAACrP,GAAG,wCAE9C,OACI,yBACI,0BACI6N,UAAW,IAAW,aAAc,yBACpC7N,GAAIlC,EACJgB,SAAS,EAAA2T,EAAA,KACTzb,KAAK,UAEJwb,GAIjB,CAEA,OAAO,MCtBEE,EAAoB,EAC7BxF,uBACAlC,uBAEIkC,GAAwBlC,EACjB,uBAAK6C,UAAU,sBAAsB7C,GAGzC,KCEE2H,EAAgB,EACzBC,+BACAtU,cACAuU,2BACAtG,aACAI,mBACAC,aACA7J,SACA+P,0BACAC,+BACAC,kCAEA,uBACInF,UAAW,IACP,SACA,WAAW9K,EAAO/C,KAClB,iBACA+S,EAA+B,GAAKH,GAExC5S,GAAI1B,EACJ0L,MAAO,CACHC,QACK4I,GAA4BlG,IAAqBC,IACjDoG,GACDzG,EACM,YACAqE,GAEdqC,UAAW,GAEVF,GAAgCD,GAA2BA,KC4bpE,EA9XqC,EACjC3G,cACAI,cAAa,EACb2G,kBAAiB,EACjBC,sBACAnH,6BAA8BoH,EAC9BvH,uBACAwH,kCAAiC,EACjCpG,cAAa,EACbqG,yBACAvQ,SACAwQ,6BACA5H,wBACAD,sBACAqB,kBACAqF,mBAAmB,EAAA/I,KACnB4I,uBACA3F,sBACAb,YACAyG,qBACA/G,oBACAqI,iBACA5G,aACAD,mBACA/U,iCACAwZ,qBACA9S,cACAuU,4BAA2B,EAC3BC,0BACAF,+BACAG,gCAA+B,EAC/B/H,oBACAkC,uBACAC,uBACArP,WACA0N,oBAEA,MAAOiI,EAAiBC,IAAsB,IAAAC,WAAS,IAChD3D,EAAsB4D,IAA2B,IAAAD,eAA6B/C,GAC/EiD,GAAiB,IAAApD,QAA4BtE,IAEnD,IAAAyB,YAAU,KACNiG,EAAehD,QAAU1E,IAC1B,CAACA,IAEJ,MAAM2H,GAAyB,IAAA5I,cAAY,KACvC,GAAIuI,EACA,OAGJ,MAAMM,EACFF,EAAehD,QAAQE,MAAM1Z,GAAeA,EAAW0c,qBACvDF,EAAehD,QAAQ,GAE3B,OAAOkD,EAAoBA,EAAkBlE,iBAAce,IAC5D,CAAC6C,IAEEO,GAAwB,IAAA9I,cAAY,KACtC,MAAM+I,EAAoBjE,GAAwB8D,IAElD,OAAO,IAAA/C,MAAK8C,EAAehD,QAAS,CAAEhB,YAAaoE,MACpD,CAACjE,EAAsB8D,IAEpBI,IAAsB,IAAAhJ,cAAY,KACpC,IAAKS,EACD,OAAO,KAGX,MAAMwI,EAA4BH,IAElC,OAAIZ,GAAoCe,GAC7BZ,GAGJ,OACR,CACCS,EACAZ,EACAzH,EACA4H,IAGEa,IAAmC,IAAAlJ,cACrC,CACImJ,EACAF,KAEQE,IAAa,OAAwBF,GACvCA,OACAvD,GAEV,IAGE0D,IAAyB,IAAApJ,cAC1BlL,IACG,GAA2B,IAAvBmM,EAAYzU,OAKZ,OAJAgc,GAAmB,GACnBE,OAAwBhD,QACxBpF,EAAc,eAAgB,IAKlC,GAAIwE,IAAyBhQ,EAAI,CAC7B,MAAMuU,EAAST,IAEfF,EAAwBW,GACxB/I,EAAc,eAAgB+I,EAClC,IAEJ,CAACpI,EAAa6D,EAAsB8D,IAGlCU,IAAmB,IAAAtJ,cAAY,KAAY,iDAC7CwI,GAAmB,GACnBE,OAAwBhD,GAEpBtE,UACMA,EAAoB,CACtBmI,UAAW1R,EAAO2R,QAClBhV,SAAUqD,EAAO/C,MAIrBmL,UACMA,EAAkB,CACpBsJ,UAAW1R,EAAO2R,QAClBhV,SAAUqD,EAAO/C,KAG7B,KAAG,CAAC+C,EAAQuJ,EAAqBnB,IAE3BwJ,IAAyB,IAAAzJ,cAAalL,IACxC0T,GAAmB,GACnBE,EAAwB5T,KACzB,IAEG4U,IAAwB,IAAA1J,cAAY,KACtC,MAAM+I,EAAoBjE,GAAwB8D,IAC5CK,GAA4B,IAAApD,MAAK5E,EAAa,CAAE0D,YAAaoE,IAEnE,GAAIE,EAA2B,EAC3B,OAAuBA,GAEvB,MAAMU,EAAwBjd,EAC1Buc,EACApR,GAGJ,GAAIuQ,EACA,OAGJ,GAAIlC,EACA,OAAOA,EAAmByD,EAAuBV,EAEzD,IAGD,CACCnE,EACA8D,EACA3H,EACApJ,EACAuQ,EACAlC,IAGE0D,GAAmB,KAA+C,iDACpE,MAAMC,EAAqBlB,EAAehD,QAE1C,IAAKlF,EAGD,YAFAF,EAAU1I,EAAQ,MAKtB,GAAI4J,IAAqBC,EAGrB,OAFAnB,EAAU1I,EAAQyQ,GAAkB,MAEhCtB,EACOA,EAAmB,CAAExS,SAAUqD,EAAO/C,UAGjD,EAKJ,IAAIgV,EAEJ,GAJAvJ,EAAU1I,EAAQ,OAIb0Q,EAAiB,CAClB,MAAMwB,EAA8BjF,GAAwB8D,IACtDoB,EACFH,EAAmBhE,MACd1Z,GAAeA,EAAWwY,cAAgBoF,KAC1CF,EAAmB,GAExBG,IAAmB,EAAAC,EAAA,GAAiBD,KACpCF,EAAyBE,EAEjC,CAEA,OAAI/J,EACOA,EACH,CAAEsJ,UAAW1R,EAAO2R,QAAShV,SAAUqD,EAAO/C,IAC9CgV,QAHR,CAMJ,IAGMI,GAAgCpF,GAAwB8D,IACxDhD,GAAqBsE,IACrBjJ,EAAY4E,MAAMsE,GAAMA,EAAExF,cAAgBuF,MAC1CjJ,EAAY,GACZmJ,GAAoCnJ,EAAYnS,QACjDqb,KAA4B,OAAwBA,KAEnDE,GAA0CpJ,EAAYnS,QACvDqb,IAA8B,OAAwBA,KAErDG,GAA+BpC,GAAoCjH,EAAYzU,OAAS,EACxFsb,IAAgCwC,IAAgC/B,EAChEgC,IAAavC,GAAkBrH,KAA0BU,EACzDmJ,GAA4B5E,GAC5BsD,GAAiCX,EAAiB3C,SAClDF,EACA+E,GAA8BxJ,EAAY,KAAM,OAAwBA,EAAY,KAE1F,IAAAyB,YAAU,MACmB,iDACrBlC,EAAoB3I,EAAQmR,MAE5B,IACQd,UACMrG,aAAe,EAAfA,WAGJ+H,IACV,CAAE,MAAOpP,GACDA,aAAiB1N,OACjBoa,EAAiB1M,EAEzB,CACJ,IAIO,MACwB,iDACvBgG,EAAoB3I,EAAQ,MAC5B0I,EAAU1I,EAAQ,MAElB,IACQuJ,UACMA,EAAoB,CACtBmI,UAAW1R,EAAO2R,QAClBhV,SAAUqD,EAAO/C,MAIrBiS,UACMA,EAAqB,CAAEvS,SAAUqD,EAAO/C,KAEtD,CAAE,MAAO0F,GACDA,aAAiB1N,OACjBoa,EAAiB1M,EAEzB,CACJ,OAIL,IAEH,MAAMkQ,IAAqB,IAAAnF,SAAO,GAC5BoF,IAAoB,IAAApF,QAAOtE,EAAYzU,QACvCoe,IAA2B,IAAArF,QAAO9E,GAClCoK,IAA0B,IAAAtF,QAAOT,GAyCvC,OAvCA,IAAApC,YAAU,KACN,GAAIgI,GAAmB/E,QAGnB,YAFA+E,GAAmB/E,SAAU,GAKjCnF,EAAoB3I,EAAQmR,OAoBxB6B,GAAwBlF,UAAYb,GACnCgG,OAAOH,GAAkBhF,SAAW,GAA4B,IAAvB1E,EAAYzU,QACtDoe,GAAyBjF,UAAYlF,KAErCoK,GAAwBlF,QAAUb,EAClC6F,GAAkBhF,QAAU1E,EAAYzU,OACxCoe,GAAyBjF,QAAUlF,GAxBZ,iDACvB,IACQW,UACMA,EAAoB,CACtBmI,UAAW1R,EAAO2R,QAClBhV,SAAUqD,EAAO/C,YAInB8U,IACV,CAAE,MAAOpP,GACDA,aAAiB1N,OACjBoa,EAAiB1M,EAEzB,CACJ,OAaD,CAACsK,EAAsB7D,EAAaR,IAElCsB,EAKD,gBAACgJ,EAAA,EAAc,CAACC,wBAAsB,EAACT,UAAWA,IAC9C,uBAAK5H,UAAU,yBACV8H,IAA+BH,IAC5B,gBAACW,EAAAC,EAAyB,CACtBjK,YAAaoJ,GACbtF,mBAAoB0E,GACpBzE,mBAAoBsE,GACpB1D,mBAAoB4E,MAG1BC,IAA+BH,IAC7B,gBAACa,EAAA,EAAsB,CACnBlK,YAAamJ,GACbnE,mBAAoBmD,GACpBrE,mBAAoB0E,GACpBzE,mBAAoBsE,GACpBxE,qBAAsBoF,GACtB3G,qBAAsB4E,EACtBjC,mBAAoBwD,OAI5B,gBAAClC,EAAiB,CACd1H,kBAAmBA,EACnBkC,qBAAsBA,IAG1B,gBAACyF,EAAa,CACVC,6BAA8BA,EAC9BtU,YAAaA,EACbuU,yBAA0BA,EAC1BtG,WAAYA,EACZI,iBAAkBA,EAClBC,WAAYA,EACZ7J,OAAQA,EACR+P,wBAAyBA,EACzBC,6BAA8BA,EAC9BC,6BAA8BA,KAGjCI,GACG,gBAACkD,EAAA,EAAuB,CACpB3F,aAAcyE,GACdjJ,YAAaA,EACbgH,oBAAqB1S,QACjB0S,GAAuBwC,MAKnC,gBAACpD,EAAU,CAACzU,SAAUA,EAAUqP,qBAAsBA,MAtDvD,uBAAKnD,MAAO,CAAEC,QAAS,U","sources":["webpack://checkout/./packages/instrument-utils/src/storedInstrument/mapFromInstrumentCardType/mapFromInstrumentCardType.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardNumberRequired/isInstrumentCardNumberRequired.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/missing-data-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-initialized-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/standard-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/set-prototype-of.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getShippableItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/shipping/getLineItemsCount.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/util-types/guard.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isInternalCheckoutSelectors.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-client-unavailable-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/amazon-pay-v2-script-loader.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/create-amazon-pay-v2-payment-processor.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/to-resolvable-module.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/invalid-argument-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/buy-now-cart-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/errors/amazon-pay-v2-config-creation-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/isWithBuyNowFeatures.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/content-type.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/sdk-version-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-request-sender.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/common/http-request/internal-api-headers.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-button-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-argument-invalid-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/payment-method-cancelled-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/order-finalization-not-required-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/is-request-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-utils/src/isAmazonPayAdditionalActionError.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-payment-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/payment-integration-api/src/errors/not-implemented-error.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/amazon-pay-v2-customer-strategy.ts","webpack://checkout/@bigcommerce/checkout-sdk/./packages/amazon-pay-integration/src/create-amazon-pay-v2-customer-strategy.ts","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2PaymentMethod.tsx","webpack://checkout/./packages/amazon-pay-v2-integration/src/AmazonPayV2Button.tsx","webpack://checkout/./packages/instrument-utils/src/guards/isHTMLElement/isHTMLElement.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequired/isInstrumentCardCodeRequired.ts","webpack://checkout/./packages/instrument-utils/src/guards/isInstrumentCardCodeRequiredSelector.ts","webpack://checkout/./packages/instrument-utils/src/storedInstrument/InstrumentSelect/InstrumentSelect.tsx","webpack://checkout/./packages/instrument-utils/src/storedInstrument/CardInstrumentFieldset/CardInstrumentFieldset.tsx","webpack://checkout/./packages/checkout-button-integration/src/CheckoutButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/EditButton.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentDescriptor.tsx","webpack://checkout/./packages/hosted-widget-integration/src/PaymentWidget.tsx","webpack://checkout/./packages/hosted-widget-integration/src/HostedWidgetPaymentComponent.tsx"],"sourcesContent":["export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n        case 'amex':\n        case 'american_express':\n            return 'american-express';\n\n        case 'diners':\n        case 'diners_club':\n            return 'diners-club';\n\n        default:\n            return type;\n    }\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired/isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, paymentMethod?: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            lineItems,\n            instrument,\n            paymentMethod,\n        });\n    },\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { type Instrument, type LineItemMap, type PaymentMethod } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    lineItems: LineItemMap;\n    instrument: Instrument;\n    paymentMethod?: PaymentMethod;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    lineItems,\n    instrument,\n    paymentMethod,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    const { isVaultingCardNumberValidationAvailable = true } =\n        paymentMethod?.initializationData || {};\n\n    if (lineItems.physicalItems.length === 0 || !isVaultingCardNumberValidationAvailable) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCustomer,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentId,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentRedirectUrl,\n    MissingPaymentStatus,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(public subtype: MissingDataErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n        case MissingDataErrorType.MissingBillingAddress:\n            return 'Unable to proceed because billing address data is unavailable.';\n\n        case MissingDataErrorType.MissingCart:\n            return 'Unable to proceed because cart data is unavailable.';\n\n        case MissingDataErrorType.MissingConsignments:\n            return 'Unable to proceed because consignments data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckout:\n            return 'Unable to proceed because checkout data is unavailable.';\n\n        case MissingDataErrorType.MissingCustomer:\n            return 'Unable to proceed because customer data is unavailable.';\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n        case MissingDataErrorType.MissingOrderConfig:\n            return 'Unable to proceed because configuration data is unavailable.';\n\n        case MissingDataErrorType.MissingOrder:\n            return 'Unable to proceed because order data is unavailable.';\n\n        case MissingDataErrorType.MissingOrderId:\n            return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n        case MissingDataErrorType.MissingPayment:\n            return 'Unable to proceed because payment data is unavailable.';\n\n        case MissingDataErrorType.MissingPaymentToken:\n            return 'Unable to proceed because the token required to submit a payment is missing.';\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n        case MissingDataErrorType.MissingShippingAddress:\n            return 'Unable to proceed because shipping address data is unavailable.';\n\n        default:\n            return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(public subtype: NotInitializedErrorType) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n        case NotInitializedErrorType.SpamProtectionNotInitialized:\n            return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n        default:\n            return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import CustomError from './custom-error';\nimport setPrototypeOf from './set-prototype-of';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = new Error(this.message).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter((item) => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item: LineItem) => total + item.quantity, 0);\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import {\n    Cart,\n    Checkout,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    Pay: AmazonPayV2Client;\n}\n\nexport interface RequestConfig {\n    createCheckoutSessionConfig: AmazonPayV2CheckoutSessionConfig;\n    estimatedOrderAmount?: AmazonPayV2Price;\n    productType?: AmazonPayV2PayOptions;\n}\n\nexport interface AmazonPayV2Button {\n    /**\n     * Allows you to define custom actions.\n     */\n    onClick: (callback: () => void | Promise<void>) => void;\n\n    /**\n     * Initiates the Amazon Pay checkout.\n     */\n    initCheckout(requestConfig: RequestConfig): void;\n}\n\nexport type AmazonPayV2ButtonParameters = AmazonPayV2ButtonParams | AmazonPayV2NewButtonParams;\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParameters): AmazonPayV2Button;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonConfig {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Color of the Amazon Pay button.\n     */\n    buttonColor?: AmazonPayV2ButtonColor;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix. Default is false.\n     */\n    sandbox?: boolean;\n\n    /**\n     * Sets Amazon Pay button design.\n     */\n    design?: AmazonPayV2ButtonDesign;\n}\n\nexport interface AmazonPayV2ButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n}\n\nexport interface AmazonPayV2NewButtonParams extends AmazonPayV2ButtonConfig {\n    /**\n     * Credential provided by Amazon Pay. You must also set the `sandbox`\n     * parameter if your `publicKeyId` does not have an environment prefix.\n     */\n    publicKeyId?: string;\n\n    /**\n     * It does not have to match the final order amount if the buyer updates\n     * their order after starting checkout. Amazon Pay will use this value to\n     * assess transaction risk and prevent buyers from selecting payment methods\n     * that can't be used to process the order.\n     */\n    estimatedOrderAmount?: AmazonPayV2Price;\n\n    /**\n     * Create Checkout Session configuration.\n     */\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport interface AmazonPayV2CheckoutSessionConfig {\n    /**\n     * A payload that Amazon Pay will use to create a Checkout Session object.\n     */\n    payloadJSON: string;\n\n    /**\n     * Payload's signature.\n     */\n    signature: string;\n\n    /**\n     * Credential provided by Amazon Pay. You do not have to set this parameter\n     * if your `publicKeyId` has an environment prefix.\n     */\n    publicKeyId?: string;\n}\n\nexport interface AmazonPayV2Price {\n    /**\n     * Transaction amount.\n     */\n    amount: string;\n\n    /**\n     * Transaction currency code in ISO 4217 format. Example: USD.\n     */\n    currencyCode: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport const amazonPayV2Regions: { [key: string]: string } = {\n    de: 'eu',\n    jp: 'fe',\n    uk: 'eu',\n    us: 'na',\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n\nexport enum AmazonPayV2ButtonColor {\n    Gold = 'Gold',\n    LightGray = 'LightGray',\n    DarkGray = 'DarkGray',\n}\n\nexport enum AmazonPayV2ButtonDesign {\n    C0001 = 'C0001',\n}\n\n// TODO: after migration AmazonPay strategies to integration package\n// <InternalCheckoutSelectors> should be removed\n// and replaced usage with <PaymentIntegrationService>\nexport interface InternalCheckoutSelectors {\n    cart: {\n        getCart: () => Cart | undefined;\n    };\n    checkout: {\n        getCheckout: () => Checkout | undefined;\n    };\n    config: {\n        getStoreConfigOrThrow: () => StoreConfig;\n    };\n    paymentMethods: {\n        getPaymentMethodOrThrow: <T>(methodId: string) => PaymentMethod<T>;\n    };\n}\n\nexport interface AmazonPayV2InitializeOptions {\n    buttonColor?: AmazonPayV2ButtonColor;\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n    checkoutSessionMethod?: 'GET' | 'POST';\n    createCheckoutSessionConfig?: AmazonPayV2CheckoutSessionConfig;\n    extractAmazonCheckoutSessionId?: string;\n    ledgerCurrency?: AmazonPayV2LedgerCurrency;\n    publicKeyId?: string;\n    region?: string;\n    isButtonMicroTextDisabled?: boolean;\n    paymentToken?: string;\n}\n\nexport interface AmazonPayV2ButtonRenderingOptions {\n    checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors;\n    containerId: string;\n    decoupleCheckoutInitiation?: boolean;\n    methodId: string;\n    buttonColor?: AmazonPayV2ButtonColor;\n    options?: AmazonPayV2ButtonParameters;\n    placement: AmazonPayV2Placement;\n    isButtonMicroTextDisabled?: boolean;\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport interface AmazonPayAdditionalActionErrorBody {\n    status: string;\n    additional_action_required: {\n        data: {\n            redirect_url: string;\n        };\n    };\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n","import {\n    CheckoutSettings,\n    getShippableItemsCount,\n    guard,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    PaymentIntegrationSelectors,\n    PaymentMethod,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2Button,\n    AmazonPayV2ButtonColor,\n    AmazonPayV2ButtonConfig,\n    AmazonPayV2ButtonDesign,\n    AmazonPayV2ButtonParameters,\n    AmazonPayV2ButtonRenderingOptions,\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2NewButtonParams,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n    AmazonPayV2Price,\n    AmazonPayV2SDK,\n    InternalCheckoutSelectors,\n    RequestConfig,\n} from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\nimport { isInternalCheckoutSelectors } from './isInternalCheckoutSelectors';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private amazonPayV2SDK?: AmazonPayV2SDK;\n    private buttonParentContainer?: HTMLDivElement;\n    private amazonPayV2Button?: AmazonPayV2Button;\n    private isBuyNowFlow?: boolean;\n\n    constructor(private amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader) {}\n\n    async initialize(paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<void> {\n        this.amazonPayV2SDK = await this.amazonPayV2ScriptLoader.load(paymentMethod);\n        this.buttonParentContainer =\n            this.buttonParentContainer || this.createAmazonPayButtonParentContainer();\n    }\n\n    deinitialize(): Promise<void> {\n        this.amazonPayV2Button = undefined;\n        this.buttonParentContainer?.remove();\n        this.buttonParentContainer = undefined;\n        this.amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n    ): void {\n        this.getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonParameters): void {\n        this.amazonPayV2Button = this.getAmazonPayV2SDK().Pay.renderButton(\n            `#${containerId}`,\n            options,\n        );\n    }\n\n    prepareCheckout(createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>) {\n        const requestConfig = this.prepareRequestConfig(createCheckoutSessionConfig);\n\n        this.getAmazonPayV2Button().onClick(() => {\n            this.getAmazonPayV2Button().initCheckout(requestConfig);\n        });\n    }\n\n    prepareCheckoutWithCreationRequestConfig(\n        createCheckoutConfig: () => Promise<\n            | {\n                  createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>;\n                  estimatedOrderAmount: AmazonPayV2Price;\n                  productType: AmazonPayV2PayOptions;\n              }\n            | undefined\n        >,\n    ) {\n        this.getAmazonPayV2Button().onClick(async () => {\n            const config = await createCheckoutConfig();\n\n            if (config) {\n                const requestConfig = this.prepareRequestConfig(\n                    config.createCheckoutSessionConfig,\n                    config.estimatedOrderAmount,\n                    config.productType,\n                );\n\n                this.getAmazonPayV2Button().initCheckout(requestConfig);\n            }\n        });\n    }\n\n    async signout(): Promise<void> {\n        if (this.amazonPayV2SDK) {\n            this.amazonPayV2SDK.Pay.signout();\n        }\n\n        return Promise.resolve();\n    }\n\n    renderAmazonPayButton({\n        buttonColor,\n        checkoutState,\n        containerId,\n        decoupleCheckoutInitiation = false,\n        methodId,\n        options,\n        placement,\n        isButtonMicroTextDisabled = false,\n    }: AmazonPayV2ButtonRenderingOptions): HTMLDivElement | undefined {\n        const container = document.querySelector<HTMLElement>(`#${containerId}`);\n\n        if (!container) {\n            return;\n        }\n\n        const { id: parentContainerId } = container.appendChild(this.getButtonParentContainer());\n\n        if (options && isButtonMicroTextDisabled) {\n            options.design = AmazonPayV2ButtonDesign.C0001;\n        }\n\n        const amazonPayV2ButtonOptions =\n            options ??\n            this.getAmazonPayV2ButtonOptions(\n                checkoutState,\n                methodId,\n                placement,\n                decoupleCheckoutInitiation,\n                buttonColor,\n            );\n\n        this.createButton(parentContainerId, amazonPayV2ButtonOptions);\n\n        return this.getButtonParentContainer();\n    }\n\n    updateBuyNowFlowFlag(isBuyNowFlow?: boolean) {\n        this.isBuyNowFlow = Boolean(isBuyNowFlow);\n    }\n\n    /**\n     * @internal\n     */\n    isPh4Enabled(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        const isPh4Enabled = !!features['PROJECT-3483.amazon_pay_ph4'];\n        const isPh4UsOnly = !!features['INT-6885.amazon_pay_ph4_us_only'];\n\n        if (isPh4Enabled && isPh4UsOnly) {\n            return storeCountryCode === 'US';\n        }\n\n        return isPh4Enabled;\n    }\n\n    private prepareRequestConfig(\n        createCheckoutSessionConfig: Required<AmazonPayV2CheckoutSessionConfig>,\n        estimatedOrderAmount?: AmazonPayV2Price,\n        productType?: AmazonPayV2PayOptions,\n    ): RequestConfig {\n        const { publicKeyId, ...signedPayload } = createCheckoutSessionConfig;\n\n        return {\n            createCheckoutSessionConfig: this.isEnvironmentSpecific(publicKeyId)\n                ? signedPayload\n                : createCheckoutSessionConfig,\n            ...(estimatedOrderAmount && { estimatedOrderAmount }),\n            ...(productType && { productType }),\n        };\n    }\n\n    private createAmazonPayButtonParentContainer(): HTMLDivElement {\n        const uid = Math.random().toString(16).substr(-4);\n        const parentContainer = document.createElement('div');\n\n        parentContainer.id = `amazonpay_button_parent_container_${uid}`;\n\n        return parentContainer;\n    }\n\n    private getAmazonPayV2ButtonOptions(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n        methodId: string,\n        placement: AmazonPayV2Placement,\n        decoupleCheckoutInitiation = false,\n        buttonColor = AmazonPayV2ButtonColor.Gold,\n    ): AmazonPayV2ButtonParameters {\n        const { getCart, getCheckout, getStoreConfigOrThrow, getPaymentMethodOrThrow } =\n            this.getCheckoutState(checkoutState);\n        const {\n            config: { merchantId, testMode },\n            initializationData,\n        } = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n\n        if (!initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const {\n            checkoutLanguage,\n            checkoutSessionMethod,\n            createCheckoutSessionConfig,\n            extractAmazonCheckoutSessionId,\n            ledgerCurrency,\n            publicKeyId = '',\n            isButtonMicroTextDisabled,\n        } = initializationData;\n\n        if (!merchantId || !ledgerCurrency) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const buttonBaseConfig: AmazonPayV2ButtonConfig = {\n            merchantId,\n            ledgerCurrency,\n            checkoutLanguage,\n            placement,\n            buttonColor,\n            ...(isButtonMicroTextDisabled ? { design: AmazonPayV2ButtonDesign.C0001 } : {}),\n        };\n\n        if (this.isBuyNowFlow) {\n            return {\n                ...buttonBaseConfig,\n                sandbox: !!testMode,\n            };\n        }\n\n        const cart = getCart();\n\n        buttonBaseConfig.productType =\n            cart && getShippableItemsCount(cart) === 0\n                ? AmazonPayV2PayOptions.PayOnly\n                : AmazonPayV2PayOptions.PayAndShip;\n\n        const {\n            checkoutSettings: { features },\n            storeProfile: { shopPath, storeCountryCode },\n        } = getStoreConfigOrThrow();\n\n        if (this.isPh4Enabled(features, storeCountryCode)) {\n            if (!createCheckoutSessionConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            const amount = getCheckout()?.outstandingBalance.toString();\n            const currencyCode = cart?.currency.code;\n            const buttonOptions: AmazonPayV2NewButtonParams = { ...buttonBaseConfig };\n            let tmpConfig: AmazonPayV2CheckoutSessionConfig;\n\n            if (this.isEnvironmentSpecific(publicKeyId)) {\n                buttonOptions.publicKeyId = publicKeyId;\n                tmpConfig = createCheckoutSessionConfig;\n            } else {\n                buttonOptions.sandbox = !!testMode;\n                tmpConfig = { ...createCheckoutSessionConfig, publicKeyId };\n            }\n\n            if (!decoupleCheckoutInitiation) {\n                buttonOptions.createCheckoutSessionConfig = tmpConfig;\n            }\n\n            if (amount && currencyCode) {\n                buttonOptions.estimatedOrderAmount = { amount, currencyCode };\n            }\n\n            return buttonOptions;\n        }\n\n        const createCheckoutSession = {\n            method: checkoutSessionMethod,\n            url: `${shopPath}/remote-checkout/${methodId}/payment-session`,\n            extractAmazonCheckoutSessionId,\n        };\n\n        return {\n            ...buttonBaseConfig,\n            createCheckoutSession,\n            sandbox: !!testMode,\n        };\n    }\n\n    private isEnvironmentSpecific(publicKeyId: string): boolean {\n        return /^(SANDBOX|LIVE)/.test(publicKeyId);\n    }\n\n    private getAmazonPayV2SDK(): AmazonPayV2SDK {\n        return this.getOrThrow(this.amazonPayV2SDK);\n    }\n\n    private getButtonParentContainer(): HTMLDivElement {\n        return this.getOrThrow(this.buttonParentContainer);\n    }\n\n    private getAmazonPayV2Button(): AmazonPayV2Button {\n        return this.getOrThrow(this.amazonPayV2Button);\n    }\n\n    private getOrThrow<T>(value?: T): T {\n        return guard(\n            value,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    // INFO: need this mapping while we have strategies in core and in integration package at the same time\n    private getCheckoutState(\n        checkoutState: InternalCheckoutSelectors | PaymentIntegrationSelectors,\n    ): Pick<\n        PaymentIntegrationSelectors,\n        'getCart' | 'getCheckout' | 'getStoreConfigOrThrow' | 'getPaymentMethodOrThrow'\n    > {\n        if (isInternalCheckoutSelectors(checkoutState)) {\n            return {\n                getCart: checkoutState.cart.getCart,\n                getCheckout: checkoutState.checkout.getCheckout,\n                getStoreConfigOrThrow: checkoutState.config.getStoreConfigOrThrow,\n                getPaymentMethodOrThrow: <T>(methodId: string) =>\n                    checkoutState.paymentMethods.getPaymentMethodOrThrow<T>(methodId),\n            };\n        }\n\n        return checkoutState;\n    }\n}\n","import { InternalCheckoutSelectors } from './amazon-pay-v2';\n\nexport function isInternalCheckoutSelectors(\n    checkoutSelectors: unknown,\n): checkoutSelectors is InternalCheckoutSelectors {\n    return (\n        typeof checkoutSelectors === 'object' &&\n        checkoutSelectors !== null &&\n        'cart' in checkoutSelectors &&\n        'checkout' in checkoutSelectors &&\n        'config' in checkoutSelectors &&\n        'paymentMethods' in checkoutSelectors\n    );\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'Unable to proceed because the client library of a payment method is not loaded or ready to be used.',\n        );\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    PaymentMethod,\n    PaymentMethodClientUnavailableError,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    AmazonPayV2HostWindow,\n    AmazonPayV2InitializeOptions,\n    amazonPayV2Regions,\n    AmazonPayV2SDK,\n} from './amazon-pay-v2';\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private scriptLoader: ScriptLoader,\n        private windowWithAmazonPay: AmazonPayV2HostWindow = window,\n    ) {}\n\n    async load(method: PaymentMethod<AmazonPayV2InitializeOptions>): Promise<AmazonPayV2SDK> {\n        const { initializationData } = method;\n        const region = initializationData?.region || 'us';\n\n        const amazonPayV2Region = amazonPayV2Regions[region];\n\n        await this.scriptLoader.loadScript(\n            `https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`,\n        );\n\n        if (!this.windowWithAmazonPay.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this.windowWithAmazonPay.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(new AmazonPayV2ScriptLoader(getScriptLoader()));\n}\n","import ResolvableModule from './resolvable-module';\n\nexport default function toResolvableModule<TModule, TIdentifier>(\n    module: TModule,\n    resolveIds: TIdentifier[],\n): ResolvableModule<TModule, TIdentifier> {\n    return Object.assign(module, { resolveIds });\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class BuyNowCartCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during buy now cart creation process. Please try again later.',\n        );\n\n        this.name = 'BuyNowCartCreationError';\n        this.type = 'buy_now_cart_creation_error';\n    }\n}\n","import { StandardError } from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport default class AmazonPayV2ConfigCreationError extends StandardError {\n    constructor(message?: string) {\n        super(\n            message ||\n                'An unexpected error has occurred during config creation process. Please try again later.',\n        );\n\n        this.name = 'AmazonPayV2ConfigCreationError';\n        this.type = 'amazon_pay_v2_config_creation_error';\n    }\n}\n","import { WithBuyNowFeature } from './amazon-pay-v2-button-options';\n\nexport function isWithBuyNowFeatures(options: unknown): options is WithBuyNowFeature {\n    if (!(options instanceof Object)) {\n        return false;\n    }\n\n    return 'buyNowInitializeOptions' in options;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import {\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2PayOptions,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    BuyNowCartCreationError,\n    CheckoutButtonInitializeOptions,\n    CheckoutButtonStrategy,\n    getShippableItemsCount,\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    PaymentIntegrationService,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport {\n    WithAmazonPayV2ButtonInitializeOptions,\n    WithBuyNowFeature,\n} from './amazon-pay-v2-button-options';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\nimport AmazonPayV2ConfigCreationError from './errors/amazon-pay-v2-config-creation-error';\nimport { isWithBuyNowFeatures } from './isWithBuyNowFeatures';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _buyNowInitializeOptions: WithBuyNowFeature['buyNowInitializeOptions'];\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n        private amazonPayV2ConfigRequestSender: AmazonPayV2RequestSender,\n    ) {}\n\n    async initialize(\n        options: CheckoutButtonInitializeOptions & WithAmazonPayV2ButtonInitializeOptions,\n    ): Promise<void> {\n        const { methodId, containerId, amazonpay } = options;\n        const { buttonColor } = amazonpay || {};\n\n        if (!methodId || !containerId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        const { getPaymentMethodOrThrow } = this.paymentIntegrationService.getState();\n\n        const paymentMethod = getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const { initializationData } = paymentMethod;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (!amazonpay) {\n            await this.paymentIntegrationService.loadDefaultCheckout();\n        }\n\n        const initializeAmazonButtonOptions = isWithBuyNowFeatures(amazonpay)\n            ? undefined\n            : amazonpay;\n\n        if (\n            isWithBuyNowFeatures(amazonpay) &&\n            typeof amazonpay.buyNowInitializeOptions?.getBuyNowCartRequestBody === 'function'\n        ) {\n            this._buyNowInitializeOptions = amazonpay.buyNowInitializeOptions;\n            this.amazonPayV2PaymentProcessor.updateBuyNowFlowFlag(true);\n        }\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId,\n            methodId,\n            options: initializeAmazonButtonOptions,\n            placement: AmazonPayV2Placement.Cart,\n            buttonColor,\n            isButtonMicroTextDisabled: initializationData?.isButtonMicroTextDisabled,\n        });\n\n        if (this._buyNowInitializeOptions) {\n            this.amazonPayV2PaymentProcessor.prepareCheckoutWithCreationRequestConfig(\n                this._getCheckoutCreationRequestConfig.bind(this),\n            );\n        }\n    }\n\n    deinitialize(): Promise<void> {\n        return this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    private async _createBuyNowCartOrThrow() {\n        const buyNowCartRequestBody = this._buyNowInitializeOptions?.getBuyNowCartRequestBody?.();\n\n        if (!buyNowCartRequestBody) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        try {\n            const buyNowCart = await this.paymentIntegrationService.createBuyNowCart(\n                buyNowCartRequestBody,\n            );\n\n            return buyNowCart;\n        } catch (error) {\n            throw new BuyNowCartCreationError();\n        }\n    }\n\n    private async _createCheckoutConfig(\n        id: string,\n    ): Promise<Required<AmazonPayV2CheckoutSessionConfig>> {\n        try {\n            const {\n                body: { payload, public_key, ...rest },\n            } = await this.amazonPayV2ConfigRequestSender.createCheckoutConfig(id);\n\n            return {\n                payloadJSON: payload,\n                publicKeyId: public_key,\n                ...rest,\n            };\n        } catch (error) {\n            throw new AmazonPayV2ConfigCreationError();\n        }\n    }\n\n    private async _getCheckoutCreationRequestConfig() {\n        const buyNowCart = await this._createBuyNowCartOrThrow();\n        const estimatedOrderAmount = {\n            amount: String(buyNowCart.baseAmount),\n            currencyCode: buyNowCart.currency.code,\n        };\n        const createCheckoutSessionConfig = await this._createCheckoutConfig(buyNowCart.id);\n\n        return {\n            createCheckoutSessionConfig,\n            estimatedOrderAmount,\n            productType:\n                getShippableItemsCount(buyNowCart) === 0\n                    ? AmazonPayV2PayOptions.PayOnly\n                    : AmazonPayV2PayOptions.PayAndShip,\n        };\n    }\n}\n","export const SDK_VERSION_HEADERS = { 'X-Checkout-SDK-Version': LIBRARY_VERSION };\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport {\n    ContentType,\n    INTERNAL_USE_ONLY,\n    SDK_VERSION_HEADERS,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nexport interface CheckoutConfig {\n    payload: string;\n    signature: string;\n    public_key: string;\n}\n\nexport default class AmazonPayV2RequestSender {\n    constructor(private _requestSender: RequestSender) {}\n\n    createCheckoutConfig(cartId: string): Promise<Response<CheckoutConfig>> {\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n            ...SDK_VERSION_HEADERS,\n        };\n\n        return this._requestSender.post('/api/storefront/payment/amazonpay', { headers, body });\n    }\n}\n","export const INTERNAL_USE_ONLY =\n    'This API endpoint is for internal use only and may change in the future';\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutButtonStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2ButtonStrategy from './amazon-pay-v2-button-strategy';\nimport AmazonPayV2RequestSender from './amazon-pay-v2-request-sender';\n\nconst createAmazonPayV2ButtonStrategy: CheckoutButtonStrategyFactory<AmazonPayV2ButtonStrategy> = (\n    paymentIntegrationService,\n) => {\n    const requestSender = createRequestSender();\n    const amazonPayV2RequestSender = new AmazonPayV2RequestSender(requestSender);\n    const amazonPayV2PaymentProcessor = createAmazonPayV2PaymentProcessor();\n\n    return new AmazonPayV2ButtonStrategy(\n        paymentIntegrationService,\n        amazonPayV2PaymentProcessor,\n        amazonPayV2RequestSender,\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2ButtonStrategy, [{ id: 'amazonpay' }]);\n","import InvalidArgumentError from './invalid-argument-error';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(\n                ', ',\n            )}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { noop } from 'lodash';\n\nimport {\n    AmazonPayV2ChangeActionType,\n    AmazonPayV2CheckoutSessionConfig,\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n    isAmazonPayAdditionalActionErrorBody,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CheckoutSettings,\n    guard,\n    InvalidArgumentError,\n    isRequestError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    OrderFinalizationNotRequiredError,\n    OrderRequestBody,\n    PaymentArgumentInvalidError,\n    PaymentInitializeOptions,\n    PaymentIntegrationService,\n    PaymentMethodCancelledError,\n    PaymentRequestOptions,\n    PaymentStrategy,\n    StoreProfile,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2PaymentInitializeOptions } from './amazon-pay-v2-payment-initialize-options';\n\nexport default class AmazonPayV2PaymentStrategy implements PaymentStrategy {\n    private _amazonPayButton?: HTMLDivElement;\n\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: PaymentInitializeOptions & WithAmazonPayV2PaymentInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" argument is not provided.',\n            );\n        }\n\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '', isButtonMicroTextDisabled } = initializationData;\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        if (this._isReadyToPay(paymentToken)) {\n            if (amazonpay?.editButtonId) {\n                this._bindEditButton(\n                    amazonpay.editButtonId,\n                    paymentToken,\n                    'changePayment',\n                    this._isModalFlow(region),\n                );\n            }\n        } else {\n            const { id: containerId } = this._createContainer();\n\n            this._amazonPayButton = this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n                checkoutState: state,\n                containerId,\n                decoupleCheckoutInitiation: this._isOneTimeTransaction(\n                    features,\n                    region.toUpperCase(),\n                ),\n                methodId,\n                placement: AmazonPayV2Placement.Checkout,\n                isButtonMicroTextDisabled,\n            });\n\n            if (!this._amazonPayButton) {\n                throw new InvalidArgumentError(\n                    'Unable to render the Amazon Pay button to an invalid HTML container element.',\n                );\n            }\n        }\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<void> {\n        const { payment } = payload;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        const { methodId } = payment;\n        const state = this.paymentIntegrationService.getState();\n        const { features } = state.getStoreConfigOrThrow().checkoutSettings;\n        const paymentMethod = state.getPaymentMethodOrThrow<AmazonPayV2InitializeOptions>(methodId);\n        const initializationData = paymentMethod.initializationData || {};\n        const { paymentToken = '', region = '' } = initializationData;\n\n        if (\n            this._isReadyToPay(paymentToken) ||\n            this._isOneTimeTransaction(features, region.toUpperCase())\n        ) {\n            const paymentPayload = {\n                methodId,\n                paymentData: { nonce: paymentToken || 'apb' },\n            };\n\n            await this.paymentIntegrationService.submitOrder(payload, options);\n\n            try {\n                await this.paymentIntegrationService.submitPayment(paymentPayload);\n\n                return;\n            } catch (error) {\n                if (!isRequestError(error) || !isAmazonPayAdditionalActionErrorBody(error.body)) {\n                    throw error;\n                }\n\n                const { additional_action_required: additionalAction } = error.body;\n                const { redirect_url } = additionalAction.data;\n\n                if (paymentToken) {\n                    return new Promise(() => window.location.assign(redirect_url));\n                }\n\n                this.amazonPayV2PaymentProcessor.prepareCheckout(\n                    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                    JSON.parse(redirect_url) as Required<AmazonPayV2CheckoutSessionConfig>,\n                );\n            }\n        }\n\n        this._getAmazonPayButton().click();\n\n        // Focus of parent window used to try and detect the user cancelling the Amazon log in modal\n        // Should be refactored if/when Amazon add a modal close hook to their SDK\n        if (this._isModalFlow(region)) {\n            return new Promise((_, reject) => {\n                const onFocus = () => {\n                    window.removeEventListener('focus', onFocus);\n                    reject(\n                        new PaymentMethodCancelledError(\n                            'Shopper needs to login to Amazonpay to continue',\n                        ),\n                    );\n                };\n\n                window.addEventListener('focus', onFocus);\n            });\n        }\n\n        return new Promise<never>(noop);\n    }\n\n    finalize(): Promise<void> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n\n        this._amazonPayButton = undefined;\n    }\n\n    private _bindEditButton(\n        buttonId: string,\n        sessionId: string,\n        changeAction: AmazonPayV2ChangeActionType,\n        isModalFlow: boolean,\n    ): void {\n        const button = document.getElementById(buttonId);\n\n        if (!button || !button.parentNode) {\n            return;\n        }\n\n        if (!isModalFlow) {\n            const clone = button.cloneNode(true);\n\n            button.parentNode.replaceChild(clone, button);\n\n            clone.addEventListener('click', () => {\n                void this._showLoadingSpinner();\n            });\n        }\n\n        this.amazonPayV2PaymentProcessor.bindButton(buttonId, sessionId, changeAction);\n    }\n\n    private _isModalFlow(region: string) {\n        return region === 'us';\n    }\n\n    private async _showLoadingSpinner(): Promise<void> {\n        await this.paymentIntegrationService.widgetInteraction(() => new Promise(noop));\n    }\n\n    private _createContainer(): HTMLElement {\n        let container = document.getElementById('AmazonPayButton');\n\n        if (container) {\n            return container;\n        }\n\n        container = document.createElement('div');\n        container.id = 'AmazonPayButton';\n        container.style.display = 'none';\n\n        return document.body.appendChild(container);\n    }\n\n    private _getAmazonPayButton() {\n        return guard(\n            this._amazonPayButton,\n            () => new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized),\n        );\n    }\n\n    private _isOneTimeTransaction(\n        features: CheckoutSettings['features'],\n        storeCountryCode: StoreProfile['storeCountryCode'],\n    ): boolean {\n        return (\n            this.amazonPayV2PaymentProcessor.isPh4Enabled(features, storeCountryCode) &&\n            features['INT-6399.amazon_pay_apb']\n        );\n    }\n\n    private _isReadyToPay(paymentToken?: string): boolean {\n        return !!paymentToken;\n    }\n}\n","import RequestError from './request-error';\n\n// Have to use `as` https://stackoverflow.com/questions/73987044/typeguarding-an-unknown-nested-object should be fixed in 4.8+\nconst isRequestError = (error: unknown): error is RequestError => {\n    return typeof error === 'object' && error !== null && 'body' in error;\n};\n\nexport default isRequestError;\n","import { AmazonPayAdditionalActionErrorBody } from './amazon-pay-v2';\n\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\nexport function isAmazonPayAdditionalActionErrorBody(\n    errorBody: unknown,\n): errorBody is AmazonPayAdditionalActionErrorBody {\n    return (\n        typeof errorBody === 'object' &&\n        errorBody !== null &&\n        'status' in errorBody &&\n        'additional_action_required' in errorBody &&\n        (errorBody as AmazonPayAdditionalActionErrorBody).status === 'additional_action_required' &&\n        'data' in (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required &&\n        'redirect_url' in\n            (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data &&\n        typeof (errorBody as AmazonPayAdditionalActionErrorBody).additional_action_required.data\n            .redirect_url === 'string'\n    );\n}\n/* eslint-enable @typescript-eslint/consistent-type-assertions */\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    PaymentStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2PaymentStrategy from './amazon-pay-v2-payment-strategy';\n\nconst createAmazonPayV2PaymentStrategy: PaymentStrategyFactory<AmazonPayV2PaymentStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2PaymentStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2PaymentStrategy, [{ id: 'amazonpay' }]);\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import {\n    AmazonPayV2InitializeOptions,\n    AmazonPayV2PaymentProcessor,\n    AmazonPayV2Placement,\n} from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerInitializeOptions,\n    CustomerStrategy,\n    ExecutePaymentMethodCheckoutOptions,\n    InvalidArgumentError,\n    NotImplementedError,\n    PaymentIntegrationService,\n    PaymentMethod,\n    RequestOptions,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport { WithAmazonPayV2CustomerInitializeOptions } from './amazon-pay-v2-customer-initialize-options';\n\nexport default class AmazonPayV2CustomerStrategy implements CustomerStrategy {\n    constructor(\n        private paymentIntegrationService: PaymentIntegrationService,\n        private amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor,\n    ) {}\n\n    async initialize(\n        options: CustomerInitializeOptions & WithAmazonPayV2CustomerInitializeOptions,\n    ): Promise<void> {\n        const { methodId, amazonpay } = options;\n\n        if (!methodId || !amazonpay?.container) {\n            throw new InvalidArgumentError(\n                'Unable to proceed because \"methodId\" or \"containerId\" argument is not provided.',\n            );\n        }\n\n        let paymentMethod: PaymentMethod<AmazonPayV2InitializeOptions>;\n\n        try {\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        } catch (_e) {\n            await this.paymentIntegrationService.loadPaymentMethod(methodId);\n            paymentMethod = this.paymentIntegrationService\n                .getState()\n                .getPaymentMethodOrThrow(methodId);\n        }\n\n        await this.amazonPayV2PaymentProcessor.initialize(paymentMethod);\n\n        this.amazonPayV2PaymentProcessor.renderAmazonPayButton({\n            checkoutState: this.paymentIntegrationService.getState(),\n            containerId: amazonpay.container,\n            methodId,\n            placement: AmazonPayV2Placement.Checkout,\n        });\n    }\n\n    async deinitialize(): Promise<void> {\n        await this.amazonPayV2PaymentProcessor.deinitialize();\n    }\n\n    signIn(): Promise<void> {\n        throw new NotImplementedError(\n            'In order to sign in via Amazon, the shopper must click on \"Amazon Pay\" button.',\n        );\n    }\n\n    async signOut(options?: RequestOptions): Promise<void> {\n        const state = this.paymentIntegrationService.getState();\n        const payment = state.getPaymentId();\n\n        if (!payment) {\n            return;\n        }\n\n        await this.amazonPayV2PaymentProcessor.signout();\n        await this.paymentIntegrationService.remoteCheckoutSignOut(payment.providerId, options);\n    }\n\n    executePaymentMethodCheckout(options?: ExecutePaymentMethodCheckoutOptions): Promise<void> {\n        options?.continueWithCheckoutCallback?.();\n\n        return Promise.resolve();\n    }\n}\n","import { createAmazonPayV2PaymentProcessor } from '@bigcommerce/checkout-sdk/amazon-pay-utils';\nimport {\n    CustomerStrategyFactory,\n    toResolvableModule,\n} from '@bigcommerce/checkout-sdk/payment-integration-api';\n\nimport AmazonPayV2CustomerStrategy from './amazon-pay-v2-customer-strategy';\n\nconst createAmazonPayV2CustomerStrategy: CustomerStrategyFactory<AmazonPayV2CustomerStrategy> = (\n    paymentIntegrationService,\n) => {\n    return new AmazonPayV2CustomerStrategy(\n        paymentIntegrationService,\n        createAmazonPayV2PaymentProcessor(),\n    );\n};\n\nexport default toResolvableModule(createAmazonPayV2CustomerStrategy, [{ id: 'amazonpay' }]);\n","import { type PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { createAmazonPayV2PaymentStrategy } from '@bigcommerce/checkout-sdk/integrations/amazon-pay';\nimport { some } from 'lodash';\nimport React, { type FunctionComponent, useCallback } from 'react';\n\nimport { HostedWidgetPaymentComponent } from '@bigcommerce/checkout/hosted-widget-integration';\nimport {\n    isInstrumentCardCodeRequiredSelector,\n    isInstrumentCardNumberRequiredSelector,\n} from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type PaymentMethodProps,\n    type PaymentMethodResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst AmazonPayV2PaymentMethod: FunctionComponent<PaymentMethodProps> = ({\n    checkoutService,\n    checkoutState,\n    paymentForm,\n    method,\n    method: {\n        initializationData: { paymentDescriptor, paymentToken },\n    },\n    ...rest\n}) => {\n    const initializeAmazonPayV2Payment = useCallback(\n        (options: PaymentInitializeOptions) =>\n            checkoutService.initializePayment({\n                ...options,\n                integrations: [createAmazonPayV2PaymentStrategy],\n                amazonpay: {\n                    editButtonId: 'editButtonId',\n                },\n            }),\n        [checkoutService],\n    );\n\n    const reload = useCallback(() => window.location.reload(), []);\n\n    const {\n        hidePaymentSubmitButton,\n        disableSubmit,\n        setFieldValue,\n        setSubmit,\n        setValidationSchema,\n    } = paymentForm;\n\n    const {\n        data: { getCheckout, isPaymentDataRequired },\n        statuses: { isLoadingInstruments },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const customer = checkoutState.data.getCustomer();\n    const isGuestCustomer = customer?.isGuest;\n    const isInstrumentFeatureAvailable =\n        !isGuestCustomer && Boolean(method.config.isVaultingEnabled);\n\n    const instruments = checkoutState.data.getInstruments(method) || [];\n\n    return (\n        <HostedWidgetPaymentComponent\n            {...rest}\n            buttonId=\"editButtonId\"\n            containerId=\"paymentWidget\"\n            deinitializePayment={checkoutService.deinitializePayment}\n            disableSubmit={disableSubmit}\n            hidePaymentSubmitButton={hidePaymentSubmitButton}\n            hideWidget\n            initializePayment={initializeAmazonPayV2Payment}\n            instruments={instruments}\n            isInstrumentCardCodeRequired={isInstrumentCardCodeRequiredSelector(checkoutState)}\n            isInstrumentCardNumberRequired={isInstrumentCardNumberRequiredSelector(checkoutState)}\n            isInstrumentFeatureAvailable={isInstrumentFeatureAvailable}\n            isLoadingInstruments={isLoadingInstruments()}\n            isPaymentDataRequired={isPaymentDataRequired()}\n            isSignInRequired={false}\n            isSignedIn={some(checkout?.payments, { providerId: method.id })}\n            loadInstruments={checkoutService.loadInstruments}\n            method={method}\n            onSignOut={reload}\n            paymentDescriptor={paymentDescriptor}\n            setFieldValue={setFieldValue}\n            setSubmit={setSubmit}\n            setValidationSchema={setValidationSchema}\n            shouldShow={!!paymentToken}\n            shouldShowDescriptor={!!paymentToken}\n            shouldShowEditButton={!!paymentToken}\n            signOut={checkoutService.signOutCustomer}\n        />\n    );\n};\n\nexport default toResolvableComponent<PaymentMethodProps, PaymentMethodResolveId>(\n    AmazonPayV2PaymentMethod,\n    [{ id: 'amazonpay' }],\n);\n","import { createAmazonPayV2CustomerStrategy } from '@bigcommerce/checkout-sdk/integrations/amazon-pay';\nimport React, { type FunctionComponent, useEffect } from 'react';\n\nimport { CheckoutButton } from '@bigcommerce/checkout/checkout-button-integration';\nimport { isHTMLElement } from '@bigcommerce/checkout/instrument-utils';\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst beautifyAmazonButton = (): void => {\n    if (!document.querySelector('.checkout-button-container')) {\n        return;\n    }\n\n    const container = document.querySelector('#amazonpayCheckoutButton > div');\n\n    if (container) {\n        const amazonButton = container.shadowRoot?.querySelector('.amazonpay-button-view1');\n\n        if (isHTMLElement(amazonButton)) {\n            amazonButton.style.height = '36px';\n\n            return;\n        }\n    }\n\n    setTimeout(beautifyAmazonButton, 10);\n};\n\nconst AmazonPayV2Button: FunctionComponent<CheckoutButtonProps> = (props) => {\n    useEffect(() => {\n        beautifyAmazonButton();\n    }, []);\n\n    return (\n        <div className=\"AmazonPayContainer\">\n            <CheckoutButton integrations={[createAmazonPayV2CustomerStrategy]} {...props} />\n        </div>\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    AmazonPayV2Button,\n    [{ id: 'amazonpay' }],\n);\n","export default function isHTMLElement(element: unknown): element is HTMLElement {\n    return element instanceof HTMLElement;\n}\n","import {\n    type LineItemMap,\n    type PaymentInstrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\n\nexport const PROVIDERS_WITHOUT_CARD_CODE = ['bluesnapdirect'];\n\nexport interface IsInstrumentCardCodeRequiredState {\n    instrument: PaymentInstrument;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    instrument,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    const {\n        config: { isVaultingCvvEnabled, cardCode },\n        initializationData,\n    } = paymentMethod;\n    const { isVaultingCardCodeValidationAvailable = true } = initializationData || {};\n\n    if (\n        PROVIDERS_WITHOUT_CARD_CODE.includes(instrument.provider) ||\n        !isVaultingCardCodeValidationAvailable\n    ) {\n        return false;\n    }\n\n    // If there's a digital item in the cart, always show CVV field\n    if (lineItems.digitalItems.length > 0 || lineItems.giftCertificates.length > 0) {\n        return true;\n    }\n\n    // If the shipping address is trusted, show CVV field based on the merchant's configuration\n    if (instrument.trustedShippingAddress) {\n        return !!isVaultingCvvEnabled;\n    }\n\n    // Otherwise, if the shipping address is untrusted, show CVV field if the\n    // merchant either requires it for regular card or stored card payments.\n    return !!(isVaultingCvvEnabled || cardCode);\n}\n","import {\n    type CheckoutSelectors,\n    type Instrument,\n    type PaymentMethod,\n} from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardCodeRequired from './isInstrumentCardCodeRequired/isInstrumentCardCodeRequired';\n\nconst isInstrumentCardCodeRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (lineItems) => (instrument: Instrument, method: PaymentMethod) => {\n        if (!lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardCodeRequired({\n            instrument,\n            lineItems,\n            paymentMethod: method,\n        });\n    },\n);\n\nexport default isInstrumentCardCodeRequiredSelector;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { type FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { type FunctionComponent, useCallback, useEffect, useRef } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport { CreditCardIcon, DropdownTrigger } from '@bigcommerce/checkout/ui';\n\nimport { mapFromInstrumentCardType } from '../mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    shouldHideExpiryDate = false,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = !expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid;\n\n    return (\n        <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n            <div\n                className={classNames('instrumentSelect-details', {\n                    'instrumentSelect-details--expired': isExpired,\n                })}\n            >\n                <CreditCardIcon cardType={cardType} />\n\n                <div className=\"instrumentSelect-card\" data-test={`${testId ?? ''}-last4`}>\n                    {cardInfo ? (\n                        <TranslatedString\n                            data={{\n                                cardTitle: cardInfo.niceType ?? '',\n                                endingIn: instrument.last4,\n                            }}\n                            id=\"payment.instrument_ending_in_text\"\n                        />\n                    ) : (\n                        <TranslatedString\n                            data={{ endingIn: instrument.last4 }}\n                            id=\"payment.instrument_default_ending_in_text\"\n                        />\n                    )}\n                </div>\n\n                {!shouldHideExpiryDate && (\n                    <div\n                        className={classNames('instrumentSelect-expiry', {\n                            'instrumentSelect-expiry--expired': isExpired,\n                        })}\n                        data-test={`${testId || ''}-expiry`}\n                    >\n                        {isExpired ? (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expired_text\"\n                            />\n                        ) : (\n                            <TranslatedString\n                                data={{\n                                    expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}`,\n                                }}\n                                id=\"payment.instrument_expires_text\"\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    shouldHideExpiryDate?: boolean;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [onClick, instrument]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={instrument}\n            onClick={handleClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button className={className} data-test={testId} onClick={onClick} type=\"button\">\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return (\n        <ul\n            className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n            data-test=\"instrument-select-menu\"\n        >\n            {instruments.map((instrument) => (\n                <li\n                    className={classNames('instrumentSelect-option dropdown-menu-item', {\n                        'instrumentSelect-option--selected':\n                            instrument.bigpayToken === selectedInstrumentId,\n                    })}\n                    key={instrument.bigpayToken}\n                >\n                    <InstrumentOption\n                        instrument={instrument}\n                        onClick={onSelectInstrument}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                        testId=\"instrument-select-option\"\n                    />\n                </li>\n            ))}\n\n            <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n                <InstrumentUseNewButton\n                    onClick={onUseNewInstrument}\n                    testId=\"instrument-select-option-use-new\"\n                />\n            </li>\n        </ul>\n    );\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    shouldHideExpiryDate?: boolean;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    shouldHideExpiryDate = false,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={testId}\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={instrument}\n            onClick={onClick}\n            shouldHideExpiryDate={shouldHideExpiryDate}\n            testId={testId}\n        />\n    );\n};\n\nconst InstrumentSelect: FunctionComponent<InstrumentSelectProps> = ({\n    field,\n    form,\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n}) => {\n    const prevSelectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    const updateFieldValue = useCallback(\n        (instrumentId = '') => {\n            void form.setFieldValue(field.name, instrumentId);\n        },\n        [form, field.name],\n    );\n\n    useEffect(() => {\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => updateFieldValue(selectedInstrumentId));\n\n        return () => {\n            if (field.value === '' && selectedInstrumentId !== undefined) {\n                updateFieldValue();\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (prevSelectedInstrumentIdRef.current !== selectedInstrumentId) {\n            // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n            //        This ensures that update Field value is called after formik has mounted.\n            // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n            setTimeout(() => updateFieldValue(selectedInstrumentId));\n        }\n\n        prevSelectedInstrumentIdRef.current = selectedInstrumentId;\n    }, [selectedInstrumentId, updateFieldValue]);\n\n    const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n    return (\n        <div className=\"instrumentSelect\">\n            <DropdownTrigger\n                dropdown={\n                    <InstrumentMenu\n                        instruments={instruments}\n                        onSelectInstrument={onSelectInstrument}\n                        onUseNewInstrument={onUseNewInstrument}\n                        selectedInstrumentId={selectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideExpiryDate}\n                    />\n                }\n            >\n                <InstrumentSelectButton\n                    instrument={selectedInstrument}\n                    shouldHideExpiryDate={shouldHideExpiryDate}\n                    testId=\"instrument-select\"\n                />\n\n                <input type=\"hidden\" {...field} />\n            </DropdownTrigger>\n        </div>\n    );\n};\n\nexport default InstrumentSelect;\n","import { type CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { type FieldProps } from 'formik';\nimport React, { type FunctionComponent, memo, useCallback } from 'react';\n\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\nimport {\n    BasicFormField,\n    Fieldset,\n    Legend,\n    ModalTrigger,\n    type ModalTriggerModalProps,\n} from '@bigcommerce/checkout/ui';\n\nimport { InstrumentSelect } from '../InstrumentSelect';\nimport { ManageInstrumentsModal } from '../ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    shouldHideExpiryDate?: boolean;\n    validateInstrument?: React.ReactNode;\n    onDeleteInstrument?(instrumentId: string): void;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onDeleteInstrument,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    shouldHideExpiryDate = false,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback(\n        (field: FieldProps<string>) => (\n            <InstrumentSelect\n                {...field}\n                instruments={instruments}\n                onSelectInstrument={onSelectInstrument}\n                onUseNewInstrument={onUseNewInstrument}\n                selectedInstrumentId={selectedInstrumentId}\n                shouldHideExpiryDate={shouldHideExpiryDate}\n            />\n        ),\n        [\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n            shouldHideExpiryDate,\n        ],\n    );\n\n    const renderModal = useCallback(\n        (props: ModalTriggerModalProps) => (\n            <ManageInstrumentsModal\n                instruments={instruments}\n                onDeleteInstrument={onDeleteInstrument}\n                {...props}\n            />\n        ),\n        [instruments, onDeleteInstrument],\n    );\n\n    return (\n        <Fieldset\n            additionalClassName=\"instrumentFieldset\"\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"payment.instrument_text\" />\n                </Legend>\n            }\n        >\n            <ModalTrigger modal={renderModal}>\n                {({ onClick }) => (\n                    <button className=\"instrumentModal-trigger\" onClick={onClick} type=\"button\">\n                        <TranslatedString id=\"payment.instrument_manage_button\" />\n                    </button>\n                )}\n            </ModalTrigger>\n\n            <BasicFormField name=\"instrumentId\" render={renderInput} />\n\n            <div style={{ display: selectedInstrumentId ? undefined : 'none' }}>\n                {validateInstrument}\n            </div>\n        </Fieldset>\n    );\n};\n\nexport default memo(CardInstrumentFieldset);\n","import React, { type FunctionComponent, useEffect } from 'react';\n\nimport {\n    type CheckoutButtonProps,\n    type CheckoutButtonResolveId,\n    toResolvableComponent,\n} from '@bigcommerce/checkout/payment-integration-api';\n\nconst CheckoutButton: FunctionComponent<CheckoutButtonProps> = ({\n    checkoutService: { deinitializeCustomer, initializeCustomer },\n    checkoutButtonContainerClass,\n    containerId,\n    methodId,\n    onUnhandledError,\n    onWalletButtonClick,\n    additionalInitializationOptions,\n    integrations,\n}) => {\n    const initializeCustomerStrategyOrThrow = async () => {\n        try {\n            await initializeCustomer({\n                methodId,\n                integrations,\n                [methodId]: {\n                    container: containerId,\n                    onUnhandledError,\n                    onClick: () => onWalletButtonClick(methodId),\n                    ...additionalInitializationOptions,\n                },\n            });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    const deinitializeCustomerStrategyOrThrow = async () => {\n        try {\n            await deinitializeCustomer({ methodId });\n        } catch (error) {\n            if (typeof onUnhandledError === 'function' && error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        void initializeCustomerStrategyOrThrow();\n\n        return () => {\n            void deinitializeCustomerStrategyOrThrow();\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className={checkoutButtonContainerClass} data-test={containerId} id={containerId} />\n    );\n};\n\nexport default toResolvableComponent<CheckoutButtonProps, CheckoutButtonResolveId>(\n    CheckoutButton,\n    [],\n);\n","import classNames from 'classnames';\nimport React, { type ReactNode } from 'react';\n\nimport { preventDefault } from '@bigcommerce/checkout/dom-utils';\nimport { TranslatedString } from '@bigcommerce/checkout/locale';\n\ninterface EditButtonProps {\n    buttonId: string | undefined;\n    shouldShowEditButton: boolean | undefined;\n}\n\nexport const EditButton = ({ buttonId, shouldShowEditButton }: EditButtonProps): ReactNode => {\n    if (shouldShowEditButton) {\n        const translatedString = <TranslatedString id=\"remote.select_different_card_action\" />;\n\n        return (\n            <p>\n                <button\n                    className={classNames('stepHeader', 'widget-link-amazonpay')}\n                    id={buttonId}\n                    onClick={preventDefault()}\n                    type=\"button\"\n                >\n                    {translatedString}\n                </button>\n            </p>\n        );\n    }\n\n    return null;\n};\n","import React, { type ReactNode } from 'react';\n\ninterface PaymentDescriptorProps {\n    paymentDescriptor: string | undefined;\n    shouldShowDescriptor: boolean | undefined;\n}\n\nexport const PaymentDescriptor = ({\n    shouldShowDescriptor,\n    paymentDescriptor,\n}: PaymentDescriptorProps): ReactNode => {\n    if (shouldShowDescriptor && paymentDescriptor) {\n        return <div className=\"payment-descriptor\">{paymentDescriptor}</div>;\n    }\n\n    return null;\n};\n","import { type PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { type ReactElement } from 'react';\n\ninterface PaymentWidgetProps {\n    additionalContainerClassName: string | undefined;\n    containerId: string;\n    hideContentWhenSignedOut: boolean;\n    hideWidget: boolean;\n    isSignInRequired: boolean | undefined;\n    isSignedIn: boolean;\n    method: PaymentMethod;\n    renderCustomPaymentForm: (() => React.ReactNode) | undefined;\n    shouldRenderCustomInstrument: boolean;\n    shouldShowCreditCardFieldset: boolean;\n}\n\nexport const PaymentWidget = ({\n    additionalContainerClassName,\n    containerId,\n    hideContentWhenSignedOut,\n    hideWidget,\n    isSignInRequired,\n    isSignedIn,\n    method,\n    renderCustomPaymentForm,\n    shouldRenderCustomInstrument,\n    shouldShowCreditCardFieldset,\n}: PaymentWidgetProps): ReactElement => (\n    <div\n        className={classNames(\n            'widget',\n            `widget--${method.id}`,\n            'payment-widget',\n            shouldRenderCustomInstrument ? '' : additionalContainerClassName,\n        )}\n        id={containerId}\n        style={{\n            display:\n                (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) ||\n                !shouldShowCreditCardFieldset ||\n                hideWidget\n                    ? 'none'\n                    : undefined,\n        }}\n        tabIndex={-1}\n    >\n        {shouldRenderCustomInstrument && renderCustomPaymentForm && renderCustomPaymentForm()}\n    </div>\n);\n","import {\n    type AccountInstrument,\n    type CardInstrument,\n    type CheckoutSelectors,\n    type CustomerInitializeOptions,\n    type CustomerRequestOptions,\n    type Instrument,\n    type PaymentInitializeOptions,\n    type PaymentInstrument,\n    type PaymentMethod,\n    type PaymentRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, {\n    type ReactElement,\n    type ReactNode,\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n} from 'react';\nimport { type ObjectSchema } from 'yup';\n\nimport {\n    AccountInstrumentFieldset,\n    assertIsCardInstrument,\n    CardInstrumentFieldset,\n    isBankAccountInstrument,\n    isCardInstrument,\n    StoreInstrumentFieldset,\n} from '@bigcommerce/checkout/instrument-utils';\nimport { type PaymentFormValues } from '@bigcommerce/checkout/payment-integration-api';\nimport { LoadingOverlay } from '@bigcommerce/checkout/ui';\n\nimport { EditButton } from './EditButton';\nimport { PaymentDescriptor } from './PaymentDescriptor';\nimport { PaymentWidget } from './PaymentWidget';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setFieldValue<TField extends keyof PaymentFormValues>(\n        field: TField,\n        value: PaymentFormValues[TField],\n    ): void;\n    setValidationSchema(\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null,\n    ): void;\n    hidePaymentSubmitButton(method: PaymentMethod, hidden?: boolean): void;\n}\n\nexport interface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: PaymentInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardCodeRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument, method: PaymentMethod): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nexport interface HostedWidgetComponentProps extends WithCheckoutHostedWidgetPaymentMethodProps {\n    additionalContainerClassName?: string;\n    buttonId?: string;\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isAccountInstrument?: boolean;\n    hideWidget?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    paymentDescriptor?: string;\n    shouldHideInstrumentExpiryDate?: boolean;\n    shouldShow?: boolean;\n    shouldShowDescriptor?: boolean;\n    shouldShowEditButton?: boolean;\n    shouldRenderCustomInstrument?: boolean;\n    storedCardValidationSchema?: ObjectSchema;\n    renderCustomPaymentForm?(): React.ReactNode;\n    validateInstrument?(\n        shouldShowNumberField: boolean,\n        selectedInstrument?: CardInstrument,\n    ): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(\n        options: PaymentInitializeOptions,\n        selectedInstrument?: CardInstrument,\n    ): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\nconst HostedWidgetPaymentComponent = ({\n    instruments,\n    hideWidget = false,\n    isInitializing = false,\n    isAccountInstrument,\n    isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n    isLoadingInstruments,\n    shouldHideInstrumentExpiryDate = false,\n    shouldShow = true,\n    hideVerificationFields,\n    method,\n    storedCardValidationSchema,\n    isPaymentDataRequired,\n    setValidationSchema,\n    loadInstruments,\n    onUnhandledError = noop,\n    deinitializeCustomer,\n    deinitializePayment,\n    setSubmit,\n    initializeCustomer,\n    initializePayment,\n    signInCustomer,\n    isSignedIn,\n    isSignInRequired,\n    isInstrumentCardNumberRequired,\n    validateInstrument,\n    containerId,\n    hideContentWhenSignedOut = false,\n    renderCustomPaymentForm,\n    additionalContainerClassName,\n    shouldRenderCustomInstrument = false,\n    paymentDescriptor,\n    shouldShowDescriptor,\n    shouldShowEditButton,\n    buttonId,\n    setFieldValue,\n}: HostedWidgetComponentProps & PaymentContextProps): ReactElement => {\n    const [isAddingNewCard, setIsAddingNewCard] = useState(false);\n    const [selectedInstrumentId, setSelectedInstrumentId] = useState<string | undefined>(undefined);\n    const instrumentsRef = useRef<PaymentInstrument[]>(instruments);\n\n    useEffect(() => {\n        instrumentsRef.current = instruments;\n    }, [instruments]);\n\n    const getDefaultInstrumentId = useCallback((): string | undefined => {\n        if (isAddingNewCard) {\n            return undefined;\n        }\n\n        const defaultInstrument =\n            instrumentsRef.current.find((instrument) => instrument.defaultInstrument) ||\n            instrumentsRef.current[0];\n\n        return defaultInstrument ? defaultInstrument.bigpayToken : undefined;\n    }, [isAddingNewCard]);\n\n    const getSelectedInstrument = useCallback((): PaymentInstrument | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n\n        return find(instrumentsRef.current, { bigpayToken: currentSelectedId });\n    }, [selectedInstrumentId, getDefaultInstrumentId]);\n\n    const getValidationSchema = useCallback((): ObjectSchema | null => {\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const currentSelectedInstrument = getSelectedInstrument();\n\n        if (isInstrumentFeatureAvailableProp && currentSelectedInstrument) {\n            return storedCardValidationSchema || null;\n        }\n\n        return null;\n    }, [\n        getSelectedInstrument,\n        isInstrumentFeatureAvailableProp,\n        isPaymentDataRequired,\n        storedCardValidationSchema,\n    ]);\n\n    const getSelectedBankAccountInstrument = useCallback(\n        (\n            addingNew: boolean,\n            currentSelectedInstrument: PaymentInstrument,\n        ): AccountInstrument | undefined => {\n            return !addingNew && isBankAccountInstrument(currentSelectedInstrument)\n                ? currentSelectedInstrument\n                : undefined;\n        },\n        [],\n    );\n\n    const handleDeleteInstrument = useCallback(\n        (id: string): void => {\n            if (instruments.length === 0) {\n                setIsAddingNewCard(true);\n                setSelectedInstrumentId(undefined);\n                setFieldValue('instrumentId', '');\n\n                return;\n            }\n\n            if (selectedInstrumentId === id) {\n                const nextId = getDefaultInstrumentId();\n\n                setSelectedInstrumentId(nextId);\n                setFieldValue('instrumentId', nextId);\n            }\n        },\n        [instruments, selectedInstrumentId, getDefaultInstrumentId],\n    );\n\n    const handleUseNewCard = useCallback(async () => {\n        setIsAddingNewCard(true);\n        setSelectedInstrumentId(undefined);\n\n        if (deinitializePayment) {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n\n        if (initializePayment) {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        }\n    }, [method, deinitializePayment, initializePayment]);\n\n    const handleSelectInstrument = useCallback((id: string) => {\n        setIsAddingNewCard(false);\n        setSelectedInstrumentId(id);\n    }, []);\n\n    const getValidateInstrument = useCallback((): ReactNode | undefined => {\n        const currentSelectedId = selectedInstrumentId || getDefaultInstrumentId();\n        const currentSelectedInstrument = find(instruments, { bigpayToken: currentSelectedId });\n\n        if (currentSelectedInstrument) {\n            assertIsCardInstrument(currentSelectedInstrument);\n\n            const shouldShowNumberField = isInstrumentCardNumberRequired(\n                currentSelectedInstrument,\n                method,\n            );\n\n            if (hideVerificationFields) {\n                return undefined;\n            }\n\n            if (validateInstrument) {\n                return validateInstrument(shouldShowNumberField, currentSelectedInstrument);\n            }\n        }\n\n        return undefined;\n    }, [\n        selectedInstrumentId,\n        getDefaultInstrumentId,\n        instruments,\n        method,\n        hideVerificationFields,\n        validateInstrument,\n    ]);\n\n    const initializeMethod = async (): Promise<CheckoutSelectors | void> => {\n        const currentInstruments = instrumentsRef.current;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return;\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer || null);\n\n            if (initializeCustomer) {\n                return initializeCustomer({ methodId: method.id });\n            }\n\n            return;\n        }\n\n        setSubmit(method, null);\n\n        let selectedCardInstrument: CardInstrument | undefined;\n\n        if (!isAddingNewCard) {\n            const currentSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n            const maybeInstrument =\n                currentInstruments.find(\n                    (instrument) => instrument.bigpayToken === currentSelectedInstrumentId,\n                ) || currentInstruments[0];\n\n            if (maybeInstrument && isCardInstrument(maybeInstrument)) {\n                selectedCardInstrument = maybeInstrument;\n            }\n        }\n\n        if (initializePayment) {\n            return initializePayment(\n                { gatewayId: method.gateway, methodId: method.id },\n                selectedCardInstrument,\n            );\n        }\n    };\n\n    // Below values are for lower level components\n    const effectiveSelectedInstrumentId = selectedInstrumentId || getDefaultInstrumentId();\n    const selectedInstrument = effectiveSelectedInstrumentId\n        ? instruments.find((i) => i.bigpayToken === effectiveSelectedInstrumentId) || instruments[0]\n        : instruments[0];\n    const cardInstruments: CardInstrument[] = instruments.filter(\n        (i): i is CardInstrument => !isBankAccountInstrument(i),\n    );\n    const accountInstruments: AccountInstrument[] = instruments.filter(\n        (i): i is AccountInstrument => isBankAccountInstrument(i),\n    );\n    const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n    const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n    const isLoading = (isInitializing || isLoadingInstruments) && !hideWidget;\n    const selectedAccountInstrument = selectedInstrument\n        ? getSelectedBankAccountInstrument(isAddingNewCard, selectedInstrument)\n        : undefined;\n    const shouldShowAccountInstrument = instruments[0] && isBankAccountInstrument(instruments[0]);\n\n    useEffect(() => {\n        const init = async () => {\n            setValidationSchema(method, getValidationSchema());\n\n            try {\n                if (isInstrumentFeatureAvailableProp) {\n                    await loadInstruments?.();\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        void init();\n\n        return () => {\n            const deInit = async () => {\n                setValidationSchema(method, null);\n                setSubmit(method, null);\n\n                try {\n                    if (deinitializePayment) {\n                        await deinitializePayment({\n                            gatewayId: method.gateway,\n                            methodId: method.id,\n                        });\n                    }\n\n                    if (deinitializeCustomer) {\n                        await deinitializeCustomer({ methodId: method.id });\n                    }\n                } catch (error: unknown) {\n                    if (error instanceof Error) {\n                        onUnhandledError(error);\n                    }\n                }\n            };\n\n            void deInit();\n        };\n    }, []);\n\n    const isInitialRenderRef = useRef(true);\n    const instrumentsLength = useRef(instruments.length);\n    const isPaymentDataRequiredRef = useRef(isPaymentDataRequired);\n    const selectedInstrumentIdRef = useRef(selectedInstrumentId);\n\n    useEffect(() => {\n        if (isInitialRenderRef.current) {\n            isInitialRenderRef.current = false;\n\n            return;\n        }\n\n        setValidationSchema(method, getValidationSchema());\n\n        const reInit = async () => {\n            try {\n                if (deinitializePayment) {\n                    await deinitializePayment({\n                        gatewayId: method.gateway,\n                        methodId: method.id,\n                    });\n                }\n\n                await initializeMethod();\n            } catch (error: unknown) {\n                if (error instanceof Error) {\n                    onUnhandledError(error);\n                }\n            }\n        };\n\n        if (\n            selectedInstrumentIdRef.current !== selectedInstrumentId ||\n            (Number(instrumentsLength.current) > 0 && instruments.length === 0) ||\n            isPaymentDataRequiredRef.current !== isPaymentDataRequired\n        ) {\n            selectedInstrumentIdRef.current = selectedInstrumentId;\n            instrumentsLength.current = instruments.length;\n            isPaymentDataRequiredRef.current = isPaymentDataRequired;\n\n            void reInit();\n        }\n    }, [selectedInstrumentId, instruments, isPaymentDataRequired]);\n\n    if (!shouldShow) {\n        return <div style={{ display: 'none' }} />;\n    }\n\n    return (\n        <LoadingOverlay hideContentWhenLoading isLoading={isLoading}>\n            <div className=\"paymentMethod--hosted\">\n                {shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <AccountInstrumentFieldset\n                        instruments={accountInstruments}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrument={selectedAccountInstrument}\n                    />\n                )}\n                {!shouldShowAccountInstrument && shouldShowInstrumentFieldset && (\n                    <CardInstrumentFieldset\n                        instruments={cardInstruments}\n                        onDeleteInstrument={handleDeleteInstrument}\n                        onSelectInstrument={handleSelectInstrument}\n                        onUseNewInstrument={handleUseNewCard}\n                        selectedInstrumentId={effectiveSelectedInstrumentId}\n                        shouldHideExpiryDate={shouldHideInstrumentExpiryDate}\n                        validateInstrument={getValidateInstrument()}\n                    />\n                )}\n\n                <PaymentDescriptor\n                    paymentDescriptor={paymentDescriptor}\n                    shouldShowDescriptor={shouldShowDescriptor}\n                />\n\n                <PaymentWidget\n                    additionalContainerClassName={additionalContainerClassName}\n                    containerId={containerId}\n                    hideContentWhenSignedOut={hideContentWhenSignedOut}\n                    hideWidget={hideWidget}\n                    isSignInRequired={isSignInRequired}\n                    isSignedIn={isSignedIn}\n                    method={method}\n                    renderCustomPaymentForm={renderCustomPaymentForm}\n                    shouldRenderCustomInstrument={shouldRenderCustomInstrument}\n                    shouldShowCreditCardFieldset={shouldShowCreditCardFieldset}\n                />\n\n                {isInstrumentFeatureAvailableProp && (\n                    <StoreInstrumentFieldset\n                        instrumentId={effectiveSelectedInstrumentId}\n                        instruments={instruments}\n                        isAccountInstrument={Boolean(\n                            isAccountInstrument || shouldShowAccountInstrument,\n                        )}\n                    />\n                )}\n\n                <EditButton buttonId={buttonId} shouldShowEditButton={shouldShowEditButton} />\n            </div>\n        </LoadingOverlay>\n    );\n};\n\nexport default HostedWidgetPaymentComponent;\n"],"names":["mapFromInstrumentCardType","type","data","cart","getCart","lineItems","instrument","paymentMethod","isVaultingCardNumberValidationAvailable","initializationData","physicalItems","length","trustedShippingAddress","isInstrumentCardNumberRequired","MissingDataErrorType","NotInitializedErrorType","StandardError","Error","constructor","message","prototype","super","name","Object","setPrototypeOf","this","__proto__","captureStackTrace","stack","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCustomer","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentId","MissingPaymentInstrument","MissingPaymentMethod","MissingPaymentRedirectUrl","MissingPaymentStatus","MissingPaymentToken","MissingShippingAddress","MissingDataError","subtype","getShippableItemsCount","filter","item","addedByPromotion","reduce","total","quantity","guard","value","errorFactory","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","NotInitializedError","amazonPayV2Regions","de","jp","uk","us","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","AmazonPayV2ButtonColor","AmazonPayV2ButtonDesign","en_US","en_GB","de_DE","fr_FR","it_IT","es_ES","ja_JP","Home","Product","Cart","Checkout","Other","USD","EUR","GBP","JPY","PayAndShip","PayOnly","Gold","LightGray","DarkGray","C0001","AmazonPayV2PaymentProcessor","amazonPayV2ScriptLoader","initialize","amazonPayV2SDK","load","buttonParentContainer","createAmazonPayButtonParentContainer","deinitialize","amazonPayV2Button","t","remove","Promise","resolve","bindButton","buttonId","sessionId","changeAction","getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","createButton","containerId","options","renderButton","prepareCheckout","createCheckoutSessionConfig","requestConfig","prepareRequestConfig","getAmazonPayV2Button","onClick","initCheckout","prepareCheckoutWithCreationRequestConfig","createCheckoutConfig","config","estimatedOrderAmount","productType","signout","renderAmazonPayButton","buttonColor","checkoutState","decoupleCheckoutInitiation","methodId","placement","isButtonMicroTextDisabled","container","document","querySelector","id","parentContainerId","appendChild","getButtonParentContainer","design","amazonPayV2ButtonOptions","getAmazonPayV2ButtonOptions","updateBuyNowFlowFlag","isBuyNowFlow","Boolean","isPh4Enabled","features","storeCountryCode","isPh4UsOnly","publicKeyId","signedPayload","isEnvironmentSpecific","uid","Math","random","toString","substr","parentContainer","createElement","getCheckout","getStoreConfigOrThrow","getPaymentMethodOrThrow","getCheckoutState","merchantId","testMode","checkoutLanguage","checkoutSessionMethod","extractAmazonCheckoutSessionId","ledgerCurrency","buttonBaseConfig","sandbox","checkoutSettings","storeProfile","shopPath","amount","outstandingBalance","currencyCode","currency","code","buttonOptions","tmpConfig","createCheckoutSession","method","url","test","getOrThrow","checkoutSelectors","checkout","paymentMethods","PaymentMethodClientUnavailableError","AmazonPayV2ScriptLoader","scriptLoader","windowWithAmazonPay","window","region","amazonPayV2Region","loadScript","amazon","createAmazonPayV2PaymentProcessor","getScriptLoader","toResolvableModule","module","resolveIds","assign","InvalidArgumentError","BuyNowCartCreationError","AmazonPayV2ConfigCreationError","isWithBuyNowFeatures","ContentType","AmazonPayV2ButtonStrategy","paymentIntegrationService","amazonPayV2PaymentProcessor","amazonPayV2ConfigRequestSender","amazonpay","getState","loadDefaultCheckout","initializeAmazonButtonOptions","buyNowInitializeOptions","getBuyNowCartRequestBody","_buyNowInitializeOptions","_getCheckoutCreationRequestConfig","bind","_createBuyNowCartOrThrow","buyNowCartRequestBody","createBuyNowCart","error","_createCheckoutConfig","payload","public_key","rest","payloadJSON","buyNowCart","String","baseAmount","Json","JsonV1","SDK_VERSION_HEADERS","AmazonPayV2RequestSender","_requestSender","cartId","body","headers","post","requestSender","createRequestSender","amazonPayV2RequestSender","PaymentArgumentInvalidError","invalidFields","join","PaymentMethodCancelledError","OrderFinalizationNotRequiredError","AmazonPayV2PaymentStrategy","state","paymentToken","_isReadyToPay","editButtonId","_bindEditButton","_isModalFlow","_createContainer","_amazonPayButton","_isOneTimeTransaction","toUpperCase","execute","payment","paymentPayload","paymentData","nonce","submitOrder","submitPayment","errorBody","status","additional_action_required","redirect_url","additionalAction","location","JSON","parse","_getAmazonPayButton","click","_","reject","onFocus","removeEventListener","addEventListener","noop","finalize","isModalFlow","button","getElementById","parentNode","clone","cloneNode","replaceChild","_showLoadingSpinner","widgetInteraction","style","display","NotImplementedError","AmazonPayV2CustomerStrategy","_e","loadPaymentMethod","signIn","signOut","getPaymentId","remoteCheckoutSignOut","providerId","executePaymentMethodCheckout","continueWithCheckoutCallback","toResolvableComponent","checkoutService","paymentForm","paymentDescriptor","initializeAmazonPayV2Payment","useCallback","initializePayment","integrations","reload","hidePaymentSubmitButton","disableSubmit","setFieldValue","setSubmit","setValidationSchema","isPaymentDataRequired","statuses","isLoadingInstruments","customer","getCustomer","isInstrumentFeatureAvailable","isGuest","isVaultingEnabled","instruments","getInstruments","HostedWidgetPaymentComponent","deinitializePayment","hideWidget","isInstrumentCardCodeRequired","isInstrumentCardCodeRequiredSelector","isInstrumentCardNumberRequiredSelector","isSignInRequired","isSignedIn","some","payments","loadInstruments","onSignOut","shouldShow","shouldShowDescriptor","shouldShowEditButton","signOutCustomer","beautifyAmazonButton","amazonButton","shadowRoot","HTMLElement","height","setTimeout","props","useEffect","className","CheckoutButton","PROVIDERS_WITHOUT_CARD_CODE","isVaultingCvvEnabled","cardCode","isVaultingCardCodeValidationAvailable","includes","provider","digitalItems","giftCertificates","InstrumentMenuItem","testId","shouldHideExpiryDate","cardType","brand","cardInfo","isExpired","expirationDate","month","expiryMonth","year","expiryYear","isValid","CreditCardIcon","TranslatedString","cardTitle","niceType","endingIn","last4","expiryDate","InstrumentOption","handleClick","bigpayToken","InstrumentUseNewButton","InstrumentMenu","selectedInstrumentId","onSelectInstrument","onUseNewInstrument","map","key","InstrumentSelectButton","field","form","prevSelectedInstrumentIdRef","useRef","updateFieldValue","instrumentId","undefined","current","selectedInstrument","find","DropdownTrigger","dropdown","memo","onDeleteInstrument","validateInstrument","renderInput","renderModal","ManageInstrumentsModal","Fieldset","additionalClassName","legend","Legend","hidden","ModalTrigger","modal","BasicFormField","render","deinitializeCustomer","initializeCustomer","checkoutButtonContainerClass","onUnhandledError","onWalletButtonClick","additionalInitializationOptions","EditButton","translatedString","preventDefault","PaymentDescriptor","PaymentWidget","additionalContainerClassName","hideContentWhenSignedOut","renderCustomPaymentForm","shouldRenderCustomInstrument","shouldShowCreditCardFieldset","tabIndex","isInitializing","isAccountInstrument","isInstrumentFeatureAvailableProp","shouldHideInstrumentExpiryDate","hideVerificationFields","storedCardValidationSchema","signInCustomer","isAddingNewCard","setIsAddingNewCard","useState","setSelectedInstrumentId","instrumentsRef","getDefaultInstrumentId","defaultInstrument","getSelectedInstrument","currentSelectedId","getValidationSchema","currentSelectedInstrument","getSelectedBankAccountInstrument","addingNew","handleDeleteInstrument","nextId","handleUseNewCard","gatewayId","gateway","handleSelectInstrument","getValidateInstrument","shouldShowNumberField","initializeMethod","currentInstruments","selectedCardInstrument","currentSelectedInstrumentId","maybeInstrument","isCardInstrument","effectiveSelectedInstrumentId","i","cardInstruments","accountInstruments","shouldShowInstrumentFieldset","isLoading","selectedAccountInstrument","shouldShowAccountInstrument","isInitialRenderRef","instrumentsLength","isPaymentDataRequiredRef","selectedInstrumentIdRef","Number","LoadingOverlay","hideContentWhenLoading","AccountInstrumentFieldset","A","CardInstrumentFieldset","StoreInstrumentFieldset"],"sourceRoot":""}